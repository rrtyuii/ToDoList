!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=14)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i,o=n(7),s=n(1),a=n(2),u=n(4),c=((r={})["no-app"]="No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",r["bad-app-name"]="Illegal App name: '{$appName}",r["duplicate-app"]="Firebase App named '{$appName}' already exists",r["app-deleted"]="Firebase App named '{$appName}' already deleted",r["invalid-app-argument"]="firebase.{$appName}() takes either no argument or a Firebase App instance.",r["invalid-log-argument"]="First argument to `onLog` must be null or a function.",r),h=new s.ErrorFactory("app","Firebase",c),f=((i={})["@firebase/app"]="fire-core",i["@firebase/analytics"]="fire-analytics",i["@firebase/auth"]="fire-auth",i["@firebase/database"]="fire-rtdb",i["@firebase/functions"]="fire-fn",i["@firebase/installations"]="fire-iid",i["@firebase/messaging"]="fire-fcm",i["@firebase/performance"]="fire-perf",i["@firebase/remote-config"]="fire-rc",i["@firebase/storage"]="fire-gcs",i["@firebase/firestore"]="fire-fst",i["fire-js"]="fire-js",i["firebase-wrapper"]="fire-js-all",i),l=new u.Logger("@firebase/app"),p=function(){function t(t,e,n){var r,i,u=this;this.firebase_=n,this.isDeleted_=!1,this.name_=e.name,this.automaticDataCollectionEnabled_=e.automaticDataCollectionEnabled||!1,this.options_=s.deepCopy(t),this.container=new a.ComponentContainer(e.name),this._addComponent(new a.Component("app",(function(){return u}),"PUBLIC"));try{for(var c=o.__values(this.firebase_.INTERNAL.components.values()),h=c.next();!h.done;h=c.next()){var f=h.value;this._addComponent(f)}}catch(t){r={error:t}}finally{try{h&&!h.done&&(i=c.return)&&i.call(c)}finally{if(r)throw r.error}}}return Object.defineProperty(t.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed_(),this.automaticDataCollectionEnabled_},set:function(t){this.checkDestroyed_(),this.automaticDataCollectionEnabled_=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"name",{get:function(){return this.checkDestroyed_(),this.name_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"options",{get:function(){return this.checkDestroyed_(),this.options_},enumerable:!0,configurable:!0}),t.prototype.delete=function(){var t=this;return new Promise((function(e){t.checkDestroyed_(),e()})).then((function(){return t.firebase_.INTERNAL.removeApp(t.name_),Promise.all(t.container.getProviders().map((function(t){return t.delete()})))})).then((function(){t.isDeleted_=!0}))},t.prototype._getService=function(t,e){return void 0===e&&(e="[DEFAULT]"),this.checkDestroyed_(),this.container.getProvider(t).getImmediate({identifier:e})},t.prototype._removeServiceInstance=function(t,e){void 0===e&&(e="[DEFAULT]"),this.container.getProvider(t).clearInstance(e)},t.prototype._addComponent=function(t){try{this.container.addComponent(t)}catch(e){l.debug("Component "+t.name+" failed to register with FirebaseApp "+this.name,e)}},t.prototype._addOrOverwriteComponent=function(t){this.container.addOrOverwriteComponent(t)},t.prototype.checkDestroyed_=function(){if(this.isDeleted_)throw h.create("app-deleted",{appName:this.name_})},t}();p.prototype.name&&p.prototype.options||p.prototype.delete||console.log("dc");var d=
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function t(){var e=
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function(t){var e={},n=new Map,r={__esModule:!0,initializeApp:function(n,i){void 0===i&&(i={});if("object"!=typeof i||null===i){i={name:i}}var o=i;void 0===o.name&&(o.name="[DEFAULT]");var a=o.name;if("string"!=typeof a||!a)throw h.create("bad-app-name",{appName:String(a)});if(s.contains(e,a))throw h.create("duplicate-app",{appName:a});var u=new t(n,o,r);return e[a]=u,u},app:i,registerVersion:function(t,e,n){var r,i=null!==(r=f[t])&&void 0!==r?r:t;n&&(i+="-"+n);var o=i.match(/\s|\//),s=e.match(/\s|\//);if(o||s){var u=['Unable to register library "'+i+'" with version "'+e+'":'];return o&&u.push('library name "'+i+'" contains illegal characters (whitespace or "/")'),o&&s&&u.push("and"),s&&u.push('version name "'+e+'" contains illegal characters (whitespace or "/")'),void l.warn(u.join(" "))}c(new a.Component(i+"-version",(function(){return{library:i,version:e}}),"VERSION"))},setLogLevel:u.setLogLevel,onLog:function(t,e){if(null!==t&&"function"!=typeof t)throw h.create("invalid-log-argument",{appName:name});u.setUserLogHandler(t,e)},apps:null,SDK_VERSION:"7.14.5",INTERNAL:{registerComponent:c,removeApp:function(t){delete e[t]},components:n,useAsService:function(t,e){if("serverAuth"===e)return null;return e}}};function i(t){if(t=t||"[DEFAULT]",!s.contains(e,t))throw h.create("no-app",{appName:t});return e[t]}function c(a){var u,c,f=a.name;if(n.has(f))return l.debug("There were multiple attempts to register component "+f+"."),"PUBLIC"===a.type?r[f]:null;if(n.set(f,a),"PUBLIC"===a.type){var p=function(t){if(void 0===t&&(t=i()),"function"!=typeof t[f])throw h.create("invalid-app-argument",{appName:f});return t[f]()};void 0!==a.serviceProps&&s.deepExtend(p,a.serviceProps),r[f]=p,t.prototype[f]=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=this._getService.bind(this,f);return n.apply(this,a.multipleInstances?t:[])}}try{for(var d=o.__values(Object.keys(e)),v=d.next();!v.done;v=d.next()){var y=v.value;e[y]._addComponent(a)}}catch(t){u={error:t}}finally{try{v&&!v.done&&(c=d.return)&&c.call(d)}finally{if(u)throw u.error}}return"PUBLIC"===a.type?r[f]:null}return r.default=r,Object.defineProperty(r,"apps",{get:function(){return Object.keys(e).map((function(t){return e[t]}))}}),i.App=t,r}(p);return e.INTERNAL=o.__assign(o.__assign({},e.INTERNAL),{createFirebaseNamespace:t,extendNamespace:function(t){s.deepExtend(e,t)},createSubscribe:s.createSubscribe,ErrorFactory:s.ErrorFactory,deepExtend:s.deepExtend}),e}(),v=function(){function t(t){this.container=t}return t.prototype.getPlatformInfoString=function(){return this.container.getProviders().map((function(t){if(function(t){var e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(t)){var e=t.getImmediate();return e.library+"/"+e.version}return null})).filter((function(t){return t})).join(" ")},t}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
if(s.isBrowser()&&void 0!==self.firebase){l.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");var y=self.firebase.SDK_VERSION;y&&y.indexOf("LITE")>=0&&l.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ")}var g=d.initializeApp;d.initializeApp=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return s.isNode()&&l.warn('\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the "main" field in package.json.\n      \n      If you are using Webpack, you can specify "main" as the first item in\n      "resolve.mainFields":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the rollup-plugin-node-resolve plugin and specify "main"\n      as the first item in "mainFields", e.g. [\'main\', \'module\'].\n      https://github.com/rollup/rollup-plugin-node-resolve\n      '),g.apply(void 0,t)};var m=d;!function(t,e){t.INTERNAL.registerComponent(new a.Component("platform-logger",(function(t){return new v(t)}),"PRIVATE")),t.registerVersion("@firebase/app","0.6.4",e),t.registerVersion("fire-js","")}(m),e.default=m,e.firebase=m},function(t,e,n){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0});var r=n(8),i={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},o=function(t,e){if(!t)throw s(e)},s=function(t){return new Error("Firebase Database ("+i.SDK_VERSION+") INTERNAL ASSERT FAILED: "+t)},a=function(t){for(var e=[],n=0,r=0;r<t.length;r++){var i=t.charCodeAt(r);i<128?e[n++]=i:i<2048?(e[n++]=i>>6|192,e[n++]=63&i|128):55296==(64512&i)&&r+1<t.length&&56320==(64512&t.charCodeAt(r+1))?(i=65536+((1023&i)<<10)+(1023&t.charCodeAt(++r)),e[n++]=i>>18|240,e[n++]=i>>12&63|128,e[n++]=i>>6&63|128,e[n++]=63&i|128):(e[n++]=i>>12|224,e[n++]=i>>6&63|128,e[n++]=63&i|128)}return e},u={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray:function(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();for(var n=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[],i=0;i<t.length;i+=3){var o=t[i],s=i+1<t.length,a=s?t[i+1]:0,u=i+2<t.length,c=u?t[i+2]:0,h=o>>2,f=(3&o)<<4|a>>4,l=(15&a)<<2|c>>6,p=63&c;u||(p=64,s||(l=64)),r.push(n[h],n[f],n[l],n[p])}return r.join("")},encodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(a(t),e)},decodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){for(var e=[],n=0,r=0;n<t.length;){var i=t[n++];if(i<128)e[r++]=String.fromCharCode(i);else if(i>191&&i<224){var o=t[n++];e[r++]=String.fromCharCode((31&i)<<6|63&o)}else if(i>239&&i<365){var s=((7&i)<<18|(63&(o=t[n++]))<<12|(63&(a=t[n++]))<<6|63&t[n++])-65536;e[r++]=String.fromCharCode(55296+(s>>10)),e[r++]=String.fromCharCode(56320+(1023&s))}else{o=t[n++];var a=t[n++];e[r++]=String.fromCharCode((15&i)<<12|(63&o)<<6|63&a)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray:function(t,e){this.init_();for(var n=e?this.charToByteMapWebSafe_:this.charToByteMap_,r=[],i=0;i<t.length;){var o=n[t.charAt(i++)],s=i<t.length?n[t.charAt(i)]:0,a=++i<t.length?n[t.charAt(i)]:64,u=++i<t.length?n[t.charAt(i)]:64;if(++i,null==o||null==s||null==a||null==u)throw Error();var c=o<<2|s>>4;if(r.push(c),64!==a){var h=s<<4&240|a>>2;if(r.push(h),64!==u){var f=a<<6&192|u;r.push(f)}}}return r},init_:function(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(var t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}},c=function(t){try{return u.decodeString(t,!0)}catch(t){console.error("base64Decode failed: ",t)}return null};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function h(t,e){if(!(e instanceof Object))return e;switch(e.constructor){case Date:return new Date(e.getTime());case Object:void 0===t&&(t={});break;case Array:t=[];break;default:return e}for(var n in e)e.hasOwnProperty(n)&&(t[n]=h(t[n],e[n]));return t}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var f=function(){function t(){var t=this;this.reject=function(){},this.resolve=function(){},this.promise=new Promise((function(e,n){t.resolve=e,t.reject=n}))}return t.prototype.wrapCallback=function(t){var e=this;return function(n,r){n?e.reject(n):e.resolve(r),"function"==typeof t&&(e.promise.catch((function(){})),1===t.length?t(n):t(n,r))}},t}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function l(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var p=function(t){function e(n,r){var i=t.call(this,r)||this;return i.code=n,i.name="FirebaseError",Object.setPrototypeOf(i,e.prototype),Error.captureStackTrace&&Error.captureStackTrace(i,d.prototype.create),i}return r.__extends(e,t),e}(Error),d=function(){function t(t,e,n){this.service=t,this.serviceName=e,this.errors=n}return t.prototype.create=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];for(var r=e[0]||{},i=this.service+"/"+t,o=this.errors[t],s=o?v(o,r):"Error",a=this.serviceName+": "+s+" ("+i+").",u=new p(i,a),c=0,h=Object.keys(r);c<h.length;c++){var f=h[c];"_"!==f.slice(-1)&&(f in u&&console.warn('Overwriting FirebaseError base field "'+f+'" can cause unexpected behavior.'),u[f]=r[f])}return u},t}();function v(t,e){return t.replace(y,(function(t,n){var r=e[n];return null!=r?r.toString():"<"+n+"?>"}))}var y=/\{\$([^}]+)}/g;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function g(t){return JSON.parse(t)}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var m=function(t){var e={},n={},r={},i="";try{var o=t.split(".");e=g(c(o[0])||""),n=g(c(o[1])||""),i=o[2],r=n.d||{},delete n.d}catch(t){}return{header:e,claims:n,data:r,signature:i}};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var b=function(){function t(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(var t=1;t<this.blockSize;++t)this.pad_[t]=0;this.reset()}return t.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},t.prototype.compress_=function(t,e){e||(e=0);var n=this.W_;if("string"==typeof t)for(var r=0;r<16;r++)n[r]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(r=0;r<16;r++)n[r]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(r=16;r<80;r++){var i=n[r-3]^n[r-8]^n[r-14]^n[r-16];n[r]=4294967295&(i<<1|i>>>31)}var o,s,a=this.chain_[0],u=this.chain_[1],c=this.chain_[2],h=this.chain_[3],f=this.chain_[4];for(r=0;r<80;r++){r<40?r<20?(o=h^u&(c^h),s=1518500249):(o=u^c^h,s=1859775393):r<60?(o=u&c|h&(u|c),s=2400959708):(o=u^c^h,s=3395469782);i=(a<<5|a>>>27)+o+f+s+n[r]&4294967295;f=h,h=c,c=4294967295&(u<<30|u>>>2),u=a,a=i}this.chain_[0]=this.chain_[0]+a&4294967295,this.chain_[1]=this.chain_[1]+u&4294967295,this.chain_[2]=this.chain_[2]+c&4294967295,this.chain_[3]=this.chain_[3]+h&4294967295,this.chain_[4]=this.chain_[4]+f&4294967295},t.prototype.update=function(t,e){if(null!=t){void 0===e&&(e=t.length);for(var n=e-this.blockSize,r=0,i=this.buf_,o=this.inbuf_;r<e;){if(0===o)for(;r<=n;)this.compress_(t,r),r+=this.blockSize;if("string"==typeof t){for(;r<e;)if(i[o]=t.charCodeAt(r),++r,++o===this.blockSize){this.compress_(i),o=0;break}}else for(;r<e;)if(i[o]=t[r],++r,++o===this.blockSize){this.compress_(i),o=0;break}}this.inbuf_=o,this.total_+=e}},t.prototype.digest=function(){var t=[],e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&e,e/=256;this.compress_(this.buf_);var r=0;for(n=0;n<5;n++)for(var i=24;i>=0;i-=8)t[r]=this.chain_[n]>>i&255,++r;return t},t}();var w=function(){function t(t,e){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then((function(){t(n)})).catch((function(t){n.error(t)}))}return t.prototype.next=function(t){this.forEachObserver((function(e){e.next(t)}))},t.prototype.error=function(t){this.forEachObserver((function(e){e.error(t)})),this.close(t)},t.prototype.complete=function(){this.forEachObserver((function(t){t.complete()})),this.close()},t.prototype.subscribe=function(t,e,n){var r,i=this;if(void 0===t&&void 0===e&&void 0===n)throw new Error("Missing Observer.");void 0===(r=function(t,e){if("object"!=typeof t||null===t)return!1;for(var n=0,r=e;n<r.length;n++){var i=r[n];if(i in t&&"function"==typeof t[i])return!0}return!1}(t,["next","error","complete"])?t:{next:t,error:e,complete:n}).next&&(r.next=E),void 0===r.error&&(r.error=E),void 0===r.complete&&(r.complete=E);var o=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((function(){try{i.finalError?r.error(i.finalError):r.complete()}catch(t){}})),this.observers.push(r),o},t.prototype.unsubscribeOne=function(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},t.prototype.forEachObserver=function(t){if(!this.finalized)for(var e=0;e<this.observers.length;e++)this.sendOne(e,t)},t.prototype.sendOne=function(t,e){var n=this;this.task.then((function(){if(void 0!==n.observers&&void 0!==n.observers[t])try{e(n.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}}))},t.prototype.close=function(t){var e=this;this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then((function(){e.observers=void 0,e.onNoObservers=void 0})))},t}();function E(){}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function _(t,e,n){var r="";switch(e){case 1:r=n?"first":"First";break;case 2:r=n?"second":"Second";break;case 3:r=n?"third":"Third";break;case 4:r=n?"fourth":"Fourth";break;default:throw new Error("errorPrefix called with argumentNumber > 4.  Need to update it?")}var i=t+" failed: ";return i+=r+" argument "}e.CONSTANTS=i,e.Deferred=f,e.ErrorFactory=d,e.FirebaseError=p,e.Sha1=b,e.assert=o,e.assertionError=s,e.async=function(t,e){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];Promise.resolve(!0).then((function(){t.apply(void 0,n)})).catch((function(t){e&&e(t)}))}},e.base64=u,e.base64Decode=c,e.base64Encode=function(t){var e=a(t);return u.encodeByteArray(e,!0)},e.contains=
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.createSubscribe=function(t,e){var n=new w(t,e);return n.subscribe.bind(n)},e.decode=m,e.deepCopy=
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function(t){return h(void 0,t)},e.deepExtend=h,e.errorPrefix=_,e.getUA=l,e.isAdmin=function(t){var e=m(t).claims;return"object"==typeof e&&!0===e.admin},e.isBrowser=function(){return"object"==typeof self&&self.self===self},e.isBrowserExtension=function(){var t="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof t&&void 0!==t.id},e.isElectron=function(){return l().indexOf("Electron/")>=0},e.isEmpty=function(t){for(var e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0},e.isIE=function(){var t=l();return t.indexOf("MSIE ")>=0||t.indexOf("Trident/")>=0},e.isMobileCordova=function(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(l())},e.isNode=function(){try{return"[object process]"===Object.prototype.toString.call(t.process)}catch(t){return!1}},e.isNodeSdk=function(){return!0===i.NODE_CLIENT||!0===i.NODE_ADMIN},e.isReactNative=function(){return"object"==typeof navigator&&"ReactNative"===navigator.product},e.isUWP=function(){return l().indexOf("MSAppHost/")>=0},e.isValidFormat=function(t){var e=m(t).claims;return!!e&&"object"==typeof e&&e.hasOwnProperty("iat")},e.isValidTimestamp=function(t){var e=m(t).claims,n=Math.floor((new Date).getTime()/1e3),r=0,i=0;return"object"==typeof e&&(e.hasOwnProperty("nbf")?r=e.nbf:e.hasOwnProperty("iat")&&(r=e.iat),i=e.hasOwnProperty("exp")?e.exp:r+86400),!!n&&!!r&&!!i&&n>=r&&n<=i},e.issuedAtTime=function(t){var e=m(t).claims;return"object"==typeof e&&e.hasOwnProperty("iat")?e.iat:null},e.jsonEval=g,e.map=function(t,e,n){var r={};for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(r[i]=e.call(n,t[i],i,t));return r}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */,e.querystring=function(t){for(var e=[],n=function(t,n){Array.isArray(n)?n.forEach((function(n){e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))})):e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))},r=0,i=Object.entries(t);r<i.length;r++){var o=i[r];n(o[0],o[1])}return e.length?"&"+e.join("&"):""},e.querystringDecode=function(t){var e={};return t.replace(/^\?/,"").split("&").forEach((function(t){if(t){var n=t.split("=");e[n[0]]=n[1]}})),e},e.safeGet=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)?t[e]:void 0},e.stringLength=function(t){for(var e=0,n=0;n<t.length;n++){var r=t.charCodeAt(n);r<128?e++:r<2048?e+=2:r>=55296&&r<=56319?(e+=4,n++):e+=3}return e},e.stringToByteArray=function(t){for(var e=[],n=0,r=0;r<t.length;r++){var i=t.charCodeAt(r);if(i>=55296&&i<=56319){var s=i-55296;r++,o(r<t.length,"Surrogate pair missing trail surrogate."),i=65536+(s<<10)+(t.charCodeAt(r)-56320)}i<128?e[n++]=i:i<2048?(e[n++]=i>>6|192,e[n++]=63&i|128):i<65536?(e[n++]=i>>12|224,e[n++]=i>>6&63|128,e[n++]=63&i|128):(e[n++]=i>>18|240,e[n++]=i>>12&63|128,e[n++]=i>>6&63|128,e[n++]=63&i|128)}return e},e.stringify=function(t){return JSON.stringify(t)},e.validateArgCount=function(t,e,n,r){var i;if(r<e?i="at least "+e:r>n&&(i=0===n?"none":"no more than "+n),i)throw new Error(t+" failed: Was called with "+r+(1===r?" argument.":" arguments.")+" Expects "+i+".")},e.validateCallback=function(t,e,n,r){if((!r||n)&&"function"!=typeof n)throw new Error(_(t,e,r)+"must be a valid function.")},e.validateContextObject=function(t,e,n,r){if((!r||n)&&("object"!=typeof n||null===n))throw new Error(_(t,e,r)+"must be a valid context object.")}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */,e.validateNamespace=function(t,e,n,r){if((!r||n)&&"string"!=typeof n)throw new Error(_(t,e,r)+"must be a valid firebase namespace.")}}).call(this,n(5))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(9),i=n(1),o=function(){function t(t,e,n){this.name=t,this.instanceFactory=e,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY"}return t.prototype.setInstantiationMode=function(t){return this.instantiationMode=t,this},t.prototype.setMultipleInstances=function(t){return this.multipleInstances=t,this},t.prototype.setServiceProps=function(t){return this.serviceProps=t,this},t}(),s=function(){function t(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map}return t.prototype.get=function(t){void 0===t&&(t="[DEFAULT]");var e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){var n=new i.Deferred;this.instancesDeferred.set(e,n);try{var r=this.getOrInitializeService(e);r&&n.resolve(r)}catch(t){}}return this.instancesDeferred.get(e).promise},t.prototype.getImmediate=function(t){var e=r.__assign({identifier:"[DEFAULT]",optional:!1},t),n=e.identifier,i=e.optional,o=this.normalizeInstanceIdentifier(n);try{var s=this.getOrInitializeService(o);if(!s){if(i)return null;throw Error("Service "+this.name+" is not available")}return s}catch(t){if(i)return null;throw t}},t.prototype.getComponent=function(){return this.component},t.prototype.setComponent=function(t){var e,n;if(t.name!==this.name)throw Error("Mismatching Component "+t.name+" for Provider "+this.name+".");if(this.component)throw Error("Component for "+this.name+" has already been provided");if(this.component=t,function(t){return"EAGER"===t.instantiationMode}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(t))try{this.getOrInitializeService("[DEFAULT]")}catch(t){}try{for(var i=r.__values(this.instancesDeferred.entries()),o=i.next();!o.done;o=i.next()){var s=r.__read(o.value,2),a=s[0],u=s[1],c=this.normalizeInstanceIdentifier(a);try{var h=this.getOrInitializeService(c);u.resolve(h)}catch(t){}}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}},t.prototype.clearInstance=function(t){void 0===t&&(t="[DEFAULT]"),this.instancesDeferred.delete(t),this.instances.delete(t)},t.prototype.delete=function(){return r.__awaiter(this,void 0,void 0,(function(){var t;return r.__generator(this,(function(e){switch(e.label){case 0:return t=Array.from(this.instances.values()),[4,Promise.all(t.filter((function(t){return"INTERNAL"in t})).map((function(t){return t.INTERNAL.delete()})))];case 1:return e.sent(),[2]}}))}))},t.prototype.isComponentSet=function(){return null!=this.component},t.prototype.getOrInitializeService=function(t){var e=this.instances.get(t);return!e&&this.component&&(e=this.component.instanceFactory(this.container,function(t){return"[DEFAULT]"===t?void 0:t}(t)),this.instances.set(t,e)),e||null},t.prototype.normalizeInstanceIdentifier=function(t){return this.component?this.component.multipleInstances?t:"[DEFAULT]":t},t}();var a=function(){function t(t){this.name=t,this.providers=new Map}return t.prototype.addComponent=function(t){var e=this.getProvider(t.name);if(e.isComponentSet())throw new Error("Component "+t.name+" has already been registered with "+this.name);e.setComponent(t)},t.prototype.addOrOverwriteComponent=function(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)},t.prototype.getProvider=function(t){if(this.providers.has(t))return this.providers.get(t);var e=new s(t,this);return this.providers.set(t,e),e},t.prototype.getProviders=function(){return Array.from(this.providers.values())},t}();e.Component=o,e.ComponentContainer=a,e.Provider=s},function(t,e,n){"use strict";var r,i=(r=n(0))&&"object"==typeof r&&"default"in r?r.default:r;
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
i.registerVersion("firebase","7.14.6","app"),t.exports=i},function(t,e,n){"use strict";
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
function r(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,i++)r[i]=o[s];return r}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var i;n.r(e),n.d(e,"LogLevel",(function(){return o})),n.d(e,"Logger",(function(){return f})),n.d(e,"setLogLevel",(function(){return l})),n.d(e,"setUserLogHandler",(function(){return p}));var o,s=[];!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(o||(o={}));var a={debug:o.DEBUG,verbose:o.VERBOSE,info:o.INFO,warn:o.WARN,error:o.ERROR,silent:o.SILENT},u=o.INFO,c=((i={})[o.DEBUG]="log",i[o.VERBOSE]="log",i[o.INFO]="info",i[o.WARN]="warn",i[o.ERROR]="error",i),h=function(t,e){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];if(!(e<t.logLevel)){var o=(new Date).toISOString(),s=c[e];if(!s)throw new Error("Attempted to log a message with an invalid logType (value: "+e+")");console[s].apply(console,r(["["+o+"]  "+t.name+":"],n))}},f=function(){function t(t){this.name=t,this._logLevel=u,this._logHandler=h,this._userLogHandler=null,s.push(this)}return Object.defineProperty(t.prototype,"logLevel",{get:function(){return this._logLevel},set:function(t){if(!(t in o))throw new TypeError("Invalid value assigned to `logLevel`");this._logLevel=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"logHandler",{get:function(){return this._logHandler},set:function(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"userLogHandler",{get:function(){return this._userLogHandler},set:function(t){this._userLogHandler=t},enumerable:!0,configurable:!0}),t.prototype.debug=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.DEBUG],t)),this._logHandler.apply(this,r([this,o.DEBUG],t))},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.VERBOSE],t)),this._logHandler.apply(this,r([this,o.VERBOSE],t))},t.prototype.info=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.INFO],t)),this._logHandler.apply(this,r([this,o.INFO],t))},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.WARN],t)),this._logHandler.apply(this,r([this,o.WARN],t))},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.ERROR],t)),this._logHandler.apply(this,r([this,o.ERROR],t))},t}();function l(t){var e="string"==typeof t?a[t]:t;s.forEach((function(t){t.logLevel=e}))}function p(t,e){for(var n=function(n){var r=null;e&&e.level&&(r=a[e.level]),n.userLogHandler=null===t?null:function(e,n){for(var i=[],s=2;s<arguments.length;s++)i[s-2]=arguments[s];var a=i.map((function(t){if(null==t)return null;if("string"==typeof t)return t;if("number"==typeof t||"boolean"==typeof t)return t.toString();if(t instanceof Error)return t.message;try{return JSON.stringify(t)}catch(t){return null}})).filter((function(t){return t})).join(" ");n>=(null!=r?r:e.logLevel)&&t({level:o[n].toLowerCase(),message:a,args:i,type:e.name})}},r=0,i=s;r<i.length;r++){n(i[r])}}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){!function(t){"use strict";function e(t){return Array.prototype.slice.call(t)}function n(t){return new Promise((function(e,n){t.onsuccess=function(){e(t.result)},t.onerror=function(){n(t.error)}}))}function r(t,e,r){var i,o=new Promise((function(o,s){n(i=t[e].apply(t,r)).then(o,s)}));return o.request=i,o}function i(t,e,n){var i=r(t,e,n);return i.then((function(t){if(t)return new h(t,i.request)}))}function o(t,e,n){n.forEach((function(n){Object.defineProperty(t.prototype,n,{get:function(){return this[e][n]},set:function(t){this[e][n]=t}})}))}function s(t,e,n,i){i.forEach((function(i){i in n.prototype&&(t.prototype[i]=function(){return r(this[e],i,arguments)})}))}function a(t,e,n,r){r.forEach((function(r){r in n.prototype&&(t.prototype[r]=function(){return this[e][r].apply(this[e],arguments)})}))}function u(t,e,n,r){r.forEach((function(r){r in n.prototype&&(t.prototype[r]=function(){return i(this[e],r,arguments)})}))}function c(t){this._index=t}function h(t,e){this._cursor=t,this._request=e}function f(t){this._store=t}function l(t){this._tx=t,this.complete=new Promise((function(e,n){t.oncomplete=function(){e()},t.onerror=function(){n(t.error)},t.onabort=function(){n(t.error)}}))}function p(t,e,n){this._db=t,this.oldVersion=e,this.transaction=new l(n)}function d(t){this._db=t}o(c,"_index",["name","keyPath","multiEntry","unique"]),s(c,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),u(c,"_index",IDBIndex,["openCursor","openKeyCursor"]),o(h,"_cursor",["direction","key","primaryKey","value"]),s(h,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach((function(t){t in IDBCursor.prototype&&(h.prototype[t]=function(){var e=this,r=arguments;return Promise.resolve().then((function(){return e._cursor[t].apply(e._cursor,r),n(e._request).then((function(t){if(t)return new h(t,e._request)}))}))})})),f.prototype.createIndex=function(){return new c(this._store.createIndex.apply(this._store,arguments))},f.prototype.index=function(){return new c(this._store.index.apply(this._store,arguments))},o(f,"_store",["name","keyPath","indexNames","autoIncrement"]),s(f,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),u(f,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),a(f,"_store",IDBObjectStore,["deleteIndex"]),l.prototype.objectStore=function(){return new f(this._tx.objectStore.apply(this._tx,arguments))},o(l,"_tx",["objectStoreNames","mode"]),a(l,"_tx",IDBTransaction,["abort"]),p.prototype.createObjectStore=function(){return new f(this._db.createObjectStore.apply(this._db,arguments))},o(p,"_db",["name","version","objectStoreNames"]),a(p,"_db",IDBDatabase,["deleteObjectStore","close"]),d.prototype.transaction=function(){return new l(this._db.transaction.apply(this._db,arguments))},o(d,"_db",["name","version","objectStoreNames"]),a(d,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach((function(t){[f,c].forEach((function(n){t in n.prototype&&(n.prototype[t.replace("open","iterate")]=function(){var n=e(arguments),r=n[n.length-1],i=this._store||this._index,o=i[t].apply(i,n.slice(0,-1));o.onsuccess=function(){r(o.result)}})}))})),[c,f].forEach((function(t){t.prototype.getAll||(t.prototype.getAll=function(t,e){var n=this,r=[];return new Promise((function(i){n.iterateCursor(t,(function(t){t?(r.push(t.value),void 0===e||r.length!=e?t.continue():i(r)):i(r)}))}))})})),t.openDb=function(t,e,n){var i=r(indexedDB,"open",[t,e]),o=i.request;return o&&(o.onupgradeneeded=function(t){n&&n(new p(o.result,t.oldVersion,o.transaction))}),i.then((function(t){return new d(t)}))},t.deleteDb=function(t){return r(indexedDB,"deleteDatabase",[t])},Object.defineProperty(t,"__esModule",{value:!0})}(e)},function(t,e,n){"use strict";n.r(e),n.d(e,"__extends",(function(){return i})),n.d(e,"__assign",(function(){return o})),n.d(e,"__rest",(function(){return s})),n.d(e,"__decorate",(function(){return a})),n.d(e,"__param",(function(){return u})),n.d(e,"__metadata",(function(){return c})),n.d(e,"__awaiter",(function(){return h})),n.d(e,"__generator",(function(){return f})),n.d(e,"__exportStar",(function(){return l})),n.d(e,"__values",(function(){return p})),n.d(e,"__read",(function(){return d})),n.d(e,"__spread",(function(){return v})),n.d(e,"__spreadArrays",(function(){return y})),n.d(e,"__await",(function(){return g})),n.d(e,"__asyncGenerator",(function(){return m})),n.d(e,"__asyncDelegator",(function(){return b})),n.d(e,"__asyncValues",(function(){return w})),n.d(e,"__makeTemplateObject",(function(){return E})),n.d(e,"__importStar",(function(){return _})),n.d(e,"__importDefault",(function(){return I})),n.d(e,"__classPrivateFieldGet",(function(){return T})),n.d(e,"__classPrivateFieldSet",(function(){return A}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var o=function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};function s(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n}function a(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s}function u(t,e){return function(n,r){e(n,r,t)}}function c(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function h(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}u((r=r.apply(t,e||[])).next())}))}function f(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}function l(t,e){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}function p(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function d(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s}function v(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(d(arguments[e]));return t}function y(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,i++)r[i]=o[s];return r}function g(t){return this instanceof g?(this.v=t,this):new g(t)}function m(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},s("next"),s("throw"),s("return"),r[Symbol.asyncIterator]=function(){return this},r;function s(t){i[t]&&(r[t]=function(e){return new Promise((function(n,r){o.push([t,e,n,r])>1||a(t,e)}))})}function a(t,e){try{(n=i[t](e)).value instanceof g?Promise.resolve(n.value.v).then(u,c):h(o[0][2],n)}catch(t){h(o[0][3],t)}var n}function u(t){a("next",t)}function c(t){a("throw",t)}function h(t,e){t(e),o.shift(),o.length&&a(o[0][0],o[0][1])}}function b(t){var e,n;return e={},r("next"),r("throw",(function(t){throw t})),r("return"),e[Symbol.iterator]=function(){return this},e;function r(r,i){e[r]=t[r]?function(e){return(n=!n)?{value:g(t[r](e)),done:"return"===r}:i?i(e):e}:i}}function w(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=p(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,i){(function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)})(r,i,(e=t[n](e)).done,e.value)}))}}}function E(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}function _(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}function I(t){return t&&t.__esModule?t:{default:t}}function T(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)}function A(t,e,n){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,n),n}},function(t,e,n){"use strict";n.r(e),n.d(e,"__extends",(function(){return i})),n.d(e,"__assign",(function(){return o})),n.d(e,"__rest",(function(){return s})),n.d(e,"__decorate",(function(){return a})),n.d(e,"__param",(function(){return u})),n.d(e,"__metadata",(function(){return c})),n.d(e,"__awaiter",(function(){return h})),n.d(e,"__generator",(function(){return f})),n.d(e,"__exportStar",(function(){return l})),n.d(e,"__values",(function(){return p})),n.d(e,"__read",(function(){return d})),n.d(e,"__spread",(function(){return v})),n.d(e,"__spreadArrays",(function(){return y})),n.d(e,"__await",(function(){return g})),n.d(e,"__asyncGenerator",(function(){return m})),n.d(e,"__asyncDelegator",(function(){return b})),n.d(e,"__asyncValues",(function(){return w})),n.d(e,"__makeTemplateObject",(function(){return E})),n.d(e,"__importStar",(function(){return _})),n.d(e,"__importDefault",(function(){return I})),n.d(e,"__classPrivateFieldGet",(function(){return T})),n.d(e,"__classPrivateFieldSet",(function(){return A}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var o=function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};function s(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n}function a(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s}function u(t,e){return function(n,r){e(n,r,t)}}function c(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function h(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}u((r=r.apply(t,e||[])).next())}))}function f(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}function l(t,e){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}function p(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function d(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s}function v(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(d(arguments[e]));return t}function y(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,i++)r[i]=o[s];return r}function g(t){return this instanceof g?(this.v=t,this):new g(t)}function m(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},s("next"),s("throw"),s("return"),r[Symbol.asyncIterator]=function(){return this},r;function s(t){i[t]&&(r[t]=function(e){return new Promise((function(n,r){o.push([t,e,n,r])>1||a(t,e)}))})}function a(t,e){try{(n=i[t](e)).value instanceof g?Promise.resolve(n.value.v).then(u,c):h(o[0][2],n)}catch(t){h(o[0][3],t)}var n}function u(t){a("next",t)}function c(t){a("throw",t)}function h(t,e){t(e),o.shift(),o.length&&a(o[0][0],o[0][1])}}function b(t){var e,n;return e={},r("next"),r("throw",(function(t){throw t})),r("return"),e[Symbol.iterator]=function(){return this},e;function r(r,i){e[r]=t[r]?function(e){return(n=!n)?{value:g(t[r](e)),done:"return"===r}:i?i(e):e}:i}}function w(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=p(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,i){(function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)})(r,i,(e=t[n](e)).done,e.value)}))}}}function E(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}function _(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}function I(t){return t&&t.__esModule?t:{default:t}}function T(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)}function A(t,e,n){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,n),n}},function(t,e,n){"use strict";n.r(e),n.d(e,"__extends",(function(){return i})),n.d(e,"__assign",(function(){return o})),n.d(e,"__rest",(function(){return s})),n.d(e,"__decorate",(function(){return a})),n.d(e,"__param",(function(){return u})),n.d(e,"__metadata",(function(){return c})),n.d(e,"__awaiter",(function(){return h})),n.d(e,"__generator",(function(){return f})),n.d(e,"__exportStar",(function(){return l})),n.d(e,"__values",(function(){return p})),n.d(e,"__read",(function(){return d})),n.d(e,"__spread",(function(){return v})),n.d(e,"__spreadArrays",(function(){return y})),n.d(e,"__await",(function(){return g})),n.d(e,"__asyncGenerator",(function(){return m})),n.d(e,"__asyncDelegator",(function(){return b})),n.d(e,"__asyncValues",(function(){return w})),n.d(e,"__makeTemplateObject",(function(){return E})),n.d(e,"__importStar",(function(){return _})),n.d(e,"__importDefault",(function(){return I})),n.d(e,"__classPrivateFieldGet",(function(){return T})),n.d(e,"__classPrivateFieldSet",(function(){return A}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var o=function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};function s(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n}function a(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s}function u(t,e){return function(n,r){e(n,r,t)}}function c(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function h(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}u((r=r.apply(t,e||[])).next())}))}function f(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}function l(t,e){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}function p(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function d(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s}function v(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(d(arguments[e]));return t}function y(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,i++)r[i]=o[s];return r}function g(t){return this instanceof g?(this.v=t,this):new g(t)}function m(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},s("next"),s("throw"),s("return"),r[Symbol.asyncIterator]=function(){return this},r;function s(t){i[t]&&(r[t]=function(e){return new Promise((function(n,r){o.push([t,e,n,r])>1||a(t,e)}))})}function a(t,e){try{(n=i[t](e)).value instanceof g?Promise.resolve(n.value.v).then(u,c):h(o[0][2],n)}catch(t){h(o[0][3],t)}var n}function u(t){a("next",t)}function c(t){a("throw",t)}function h(t,e){t(e),o.shift(),o.length&&a(o[0][0],o[0][1])}}function b(t){var e,n;return e={},r("next"),r("throw",(function(t){throw t})),r("return"),e[Symbol.iterator]=function(){return this},e;function r(r,i){e[r]=t[r]?function(e){return(n=!n)?{value:g(t[r](e)),done:"return"===r}:i?i(e):e}:i}}function w(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=p(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,i){(function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)})(r,i,(e=t[n](e)).done,e.value)}))}}}function E(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}function _(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}function I(t){return t&&t.__esModule?t:{default:t}}function T(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)}function A(t,e,n){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,n),n}},function(t,e,n){"use strict";(function(t){var e=n(0),r=n.n(e);(function(){var e,n="function"==typeof Object.defineProperties?Object.defineProperty:function(t,e,n){t!=Array.prototype&&t!=Object.prototype&&(t[e]=n.value)};var i=function(e){e=["object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof t&&t,e];for(var n=0;n<e.length;++n){var r=e[n];if(r&&r.Math==Math)return r}return globalThis}(this);function o(t){var e=0;return function(){return e<t.length?{done:!1,value:t[e++]}:{done:!0}}}function s(t){var e="undefined"!=typeof Symbol&&Symbol.iterator&&t[Symbol.iterator];return e?e.call(t):{next:o(t)}}!function(t,e){if(e){var r=i;t=t.split(".");for(var o=0;o<t.length-1;o++){var s=t[o];s in r||(r[s]={}),r=r[s]}(e=e(o=r[t=t[t.length-1]]))!=o&&null!=e&&n(r,t,{configurable:!0,writable:!0,value:e})}}("Promise",(function(t){function e(t){this.b=0,this.c=void 0,this.a=[];var e=this.f();try{t(e.resolve,e.reject)}catch(t){e.reject(t)}}function n(){this.a=null}function r(t){return t instanceof e?t:new e((function(e){e(t)}))}if(t)return t;n.prototype.b=function(t){if(null==this.a){this.a=[];var e=this;this.c((function(){e.g()}))}this.a.push(t)};var o=i.setTimeout;n.prototype.c=function(t){o(t,0)},n.prototype.g=function(){for(;this.a&&this.a.length;){var t=this.a;this.a=[];for(var e=0;e<t.length;++e){var n=t[e];t[e]=null;try{n()}catch(t){this.f(t)}}}this.a=null},n.prototype.f=function(t){this.c((function(){throw t}))},e.prototype.f=function(){function t(t){return function(r){n||(n=!0,t.call(e,r))}}var e=this,n=!1;return{resolve:t(this.m),reject:t(this.g)}},e.prototype.m=function(t){if(t===this)this.g(new TypeError("A Promise cannot resolve to itself"));else if(t instanceof e)this.s(t);else{t:switch(typeof t){case"object":var n=null!=t;break t;case"function":n=!0;break t;default:n=!1}n?this.u(t):this.h(t)}},e.prototype.u=function(t){var e=void 0;try{e=t.then}catch(t){return void this.g(t)}"function"==typeof e?this.w(e,t):this.h(t)},e.prototype.g=function(t){this.i(2,t)},e.prototype.h=function(t){this.i(1,t)},e.prototype.i=function(t,e){if(0!=this.b)throw Error("Cannot settle("+t+", "+e+"): Promise already settled in state"+this.b);this.b=t,this.c=e,this.l()},e.prototype.l=function(){if(null!=this.a){for(var t=0;t<this.a.length;++t)a.b(this.a[t]);this.a=null}};var a=new n;return e.prototype.s=function(t){var e=this.f();t.Oa(e.resolve,e.reject)},e.prototype.w=function(t,e){var n=this.f();try{t.call(e,n.resolve,n.reject)}catch(t){n.reject(t)}},e.prototype.then=function(t,n){function r(t,e){return"function"==typeof t?function(e){try{i(t(e))}catch(t){o(t)}}:e}var i,o,s=new e((function(t,e){i=t,o=e}));return this.Oa(r(t,i),r(n,o)),s},e.prototype.catch=function(t){return this.then(void 0,t)},e.prototype.Oa=function(t,e){function n(){switch(r.b){case 1:t(r.c);break;case 2:e(r.c);break;default:throw Error("Unexpected state: "+r.b)}}var r=this;null==this.a?a.b(n):this.a.push(n)},e.resolve=r,e.reject=function(t){return new e((function(e,n){n(t)}))},e.race=function(t){return new e((function(e,n){for(var i=s(t),o=i.next();!o.done;o=i.next())r(o.value).Oa(e,n)}))},e.all=function(t){var n=s(t),i=n.next();return i.done?r([]):new e((function(t,e){function o(e){return function(n){s[e]=n,0==--a&&t(s)}}var s=[],a=0;do{s.push(void 0),a++,r(i.value).Oa(o(s.length-1),e),i=n.next()}while(!i.done)}))},e}));var a=a||{},u=this||self,c=/^[\w+/_-]+[=]{0,2}$/,h=null;function f(){}function l(t){var e=typeof t;if("object"==e){if(!t)return"null";if(t instanceof Array)return"array";if(t instanceof Object)return e;var n=Object.prototype.toString.call(t);if("[object Window]"==n)return"object";if("[object Array]"==n||"number"==typeof t.length&&void 0!==t.splice&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("splice"))return"array";if("[object Function]"==n||void 0!==t.call&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("call"))return"function"}else if("function"==e&&void 0===t.call)return"object";return e}function p(t){var e=l(t);return"array"==e||"object"==e&&"number"==typeof t.length}function d(t){return"function"==l(t)}function v(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}function y(t){return Object.prototype.hasOwnProperty.call(t,g)&&t[g]||(t[g]=++m)}var g="closure_uid_"+(1e9*Math.random()>>>0),m=0;function b(t,e,n){return t.call.apply(t.bind,arguments)}function w(t,e,n){if(!t)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function E(t,e,n){return(E=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?b:w).apply(null,arguments)}function _(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}var I=Date.now||function(){return+new Date};function T(t,e){function n(){}n.prototype=e.prototype,t.Za=e.prototype,t.prototype=new n,t.prototype.constructor=t}function A(t,e,n){this.code=k+t,this.message=e||O[t]||"",this.a=n||null}function N(t){var e=t&&t.code;return e?new A(e.substring(k.length),t.message,t.serverResponse):null}T(A,Error),A.prototype.v=function(){var t={code:this.code,message:this.message};return this.a&&(t.serverResponse=this.a),t},A.prototype.toJSON=function(){return this.v()};var S,k="auth/",O={"admin-restricted-operation":"This operation is restricted to administrators only.","argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.","captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.","code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.","requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-change-needs-verification":"Multi-factor users must always have a verified email.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.","internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.","invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.","invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-dynamic-link-domain":"The provided dynamic link domain is not configured or authorized for the current project.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.","invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-multi-factor-session":"The request does not contain a valid proof of first factor successful sign-in.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.","unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].","invalid-provider-id":"The specified provider ID is invalid.","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","invalid-tenant-id":"The Auth instance's tenant ID is invalid.","multi-factor-info-not-found":"The user does not have a second factor matching the identifier provided.","multi-factor-auth-required":"Proof of ownership of a second factor is required to complete sign-in.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.","missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-multi-factor-info":"No second factor identifier is provided.","missing-multi-factor-session":"The request is missing proof of first factor successful sign-in.","missing-or-invalid-nonce":"The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.","missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.","no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","null-user":"A null user object was provided as the argument for an operation which requires a non-null user object.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.","rejected-credential":"The request contains malformed or mismatching credentials.","second-factor-already-in-use":"The second factor is already enrolled on this account.","maximum-second-factor-count-exceeded":"The maximum allowed number of second factors on a user has been exceeded.","tenant-id-mismatch":"The provided tenant ID does not match the Auth instance's tenant ID",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.","too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-first-factor":"Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","unsupported-tenant-operation":"This operation is not supported in a multi-tenant context.","unverified-email":"The operation requires a verified email.","user-cancelled":"The user did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.","web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."},D={hd:{Ra:"https://staging-identitytoolkit.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",Xa:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Ua:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"b"},pd:{Ra:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",Xa:"https://securetoken.googleapis.com/v1/token",Ua:"https://identitytoolkit.googleapis.com/v2/",id:"p"},rd:{Ra:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",Xa:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Ua:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"s"},sd:{Ra:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",Xa:"https://test-securetoken.sandbox.googleapis.com/v1/token",Ua:"https://test-identitytoolkit.sandbox.googleapis.com/v2/",id:"t"}};function P(t){for(var e in D)if(D[e].id===t)return{firebaseEndpoint:(t=D[e]).Ra,secureTokenEndpoint:t.Xa,identityPlatformEndpoint:t.Ua};return null}function C(t){if(!t)return!1;try{return!!t.$goog_Thenable}catch(t){return!1}}function x(t){if(Error.captureStackTrace)Error.captureStackTrace(this,x);else{var e=Error().stack;e&&(this.stack=e)}t&&(this.message=String(t))}function R(t,e){for(var n="",r=(t=t.split("%s")).length-1,i=0;i<r;i++)n+=t[i]+(i<e.length?e[i]:"%s");x.call(this,n+t[r])}function L(t,e){throw new R("Failure"+(t?": "+t:""),Array.prototype.slice.call(arguments,1))}function j(t,e){this.c=t,this.f=e,this.b=0,this.a=null}function M(t,e){t.f(e),100>t.b&&(t.b++,e.next=t.a,t.a=e)}function V(){this.b=this.a=null}S=P("__EID__")?"__EID__":void 0,T(x,Error),x.prototype.name="CustomError",T(R,x),R.prototype.name="AssertionError",j.prototype.get=function(){if(0<this.b){this.b--;var t=this.a;this.a=t.next,t.next=null}else t=this.c();return t};var U=new j((function(){return new q}),(function(t){t.reset()}));function F(){var t=me,e=null;return t.a&&(e=t.a,t.a=t.a.next,t.a||(t.b=null),e.next=null),e}function q(){this.next=this.b=this.a=null}V.prototype.add=function(t,e){var n=U.get();n.set(t,e),this.b?this.b.next=n:this.a=n,this.b=n},q.prototype.set=function(t,e){this.a=t,this.b=e,this.next=null},q.prototype.reset=function(){this.next=this.b=this.a=null};var B=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if("string"==typeof t)return"string"!=typeof e||1!=e.length?-1:t.indexOf(e,0);for(var n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},G=Array.prototype.forEach?function(t,e,n){Array.prototype.forEach.call(t,e,n)}:function(t,e,n){for(var r=t.length,i="string"==typeof t?t.split(""):t,o=0;o<r;o++)o in i&&e.call(n,i[o],o,t)};var W=Array.prototype.filter?function(t,e){return Array.prototype.filter.call(t,e,void 0)}:function(t,e){for(var n=t.length,r=[],i=0,o="string"==typeof t?t.split(""):t,s=0;s<n;s++)if(s in o){var a=o[s];e.call(void 0,a,s,t)&&(r[i++]=a)}return r},z=Array.prototype.map?function(t,e){return Array.prototype.map.call(t,e,void 0)}:function(t,e){for(var n=t.length,r=Array(n),i="string"==typeof t?t.split(""):t,o=0;o<n;o++)o in i&&(r[o]=e.call(void 0,i[o],o,t));return r},K=Array.prototype.some?function(t,e){return Array.prototype.some.call(t,e,void 0)}:function(t,e){for(var n=t.length,r="string"==typeof t?t.split(""):t,i=0;i<n;i++)if(i in r&&e.call(void 0,r[i],i,t))return!0;return!1};function H(t,e){return 0<=B(t,e)}function Y(t,e){var n;return(n=0<=(e=B(t,e)))&&Array.prototype.splice.call(t,e,1),n}function X(t,e){!function(t,e){for(var n="string"==typeof t?t.split(""):t,r=t.length-1;0<=r;--r)r in n&&e.call(void 0,n[r],r,t)}(t,(function(n,r){e.call(void 0,n,r,t)&&1==Array.prototype.splice.call(t,r,1).length&&0}))}function J(t){return Array.prototype.concat.apply([],arguments)}function $(t){var e=t.length;if(0<e){for(var n=Array(e),r=0;r<e;r++)n[r]=t[r];return n}return[]}var Q,Z=String.prototype.trim?function(t){return t.trim()}:function(t){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(t)[1]},tt=/&/g,et=/</g,nt=/>/g,rt=/"/g,it=/'/g,ot=/\x00/g,st=/[\x00&<>"']/;function at(t,e){return-1!=t.indexOf(e)}function ut(t,e){return t<e?-1:t>e?1:0}t:{var ct=u.navigator;if(ct){var ht=ct.userAgent;if(ht){Q=ht;break t}}Q=""}function ft(t){return at(Q,t)}function lt(t,e){for(var n in t)e.call(void 0,t[n],n,t)}function pt(t){for(var e in t)return!1;return!0}function dt(t){var e,n={};for(e in t)n[e]=t[e];return n}var vt="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function yt(t,e){for(var n,r,i=1;i<arguments.length;i++){for(n in r=arguments[i])t[n]=r[n];for(var o=0;o<vt.length;o++)n=vt[o],Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}}function gt(t,e){t:{try{var n=t&&t.ownerDocument,r=n&&(n.defaultView||n.parentWindow);if((r=r||u).Element&&r.Location){var i=r;break t}}catch(t){}i=null}if(i&&void 0!==i[e]&&(!t||!(t instanceof i[e])&&(t instanceof i.Location||t instanceof i.Element))){if(v(t))try{var o=t.constructor.displayName||t.constructor.name||Object.prototype.toString.call(t)}catch(t){o="<object could not be stringified>"}else o=void 0===t?"undefined":null===t?"null":typeof t;L("Argument is not a %s (or a non-Element, non-Location mock); got: %s",e,o)}}function mt(t,e){this.a=t===Et&&e||"",this.b=wt}function bt(t){return t instanceof mt&&t.constructor===mt&&t.b===wt?t.a:(L("expected object of type Const, got '"+t+"'"),"type_error:Const")}mt.prototype.ra=!0,mt.prototype.qa=function(){return this.a},mt.prototype.toString=function(){return"Const{"+this.a+"}"};var wt={},Et={},_t=new mt(Et,"");function It(t,e){this.a=t===Ot&&e||"",this.b=kt}function Tt(t){return t instanceof It&&t.constructor===It&&t.b===kt?t.a:(L("expected object of type TrustedResourceUrl, got '"+t+"' of type "+l(t)),"type_error:TrustedResourceUrl")}function At(t,e){var n=bt(t);if(!St.test(n))throw Error("Invalid TrustedResourceUrl format: "+n);return t=n.replace(Nt,(function(t,r){if(!Object.prototype.hasOwnProperty.call(e,r))throw Error('Found marker, "'+r+'", in format string, "'+n+'", but no valid label mapping found in args: '+JSON.stringify(e));return(t=e[r])instanceof mt?bt(t):encodeURIComponent(String(t))})),new It(Ot,t)}It.prototype.ra=!0,It.prototype.qa=function(){return this.a.toString()},It.prototype.toString=function(){return"TrustedResourceUrl{"+this.a+"}"};var Nt=/%{(\w+)}/g,St=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i,kt={},Ot={};function Dt(t,e){this.a=t===Lt&&e||"",this.b=Rt}function Pt(t){return t instanceof Dt&&t.constructor===Dt&&t.b===Rt?t.a:(L("expected object of type SafeUrl, got '"+t+"' of type "+l(t)),"type_error:SafeUrl")}Dt.prototype.ra=!0,Dt.prototype.qa=function(){return this.a.toString()},Dt.prototype.toString=function(){return"SafeUrl{"+this.a+"}"};var Ct=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;function xt(t){return t instanceof Dt?t:(t="object"==typeof t&&t.ra?t.qa():String(t),Ct.test(t)||(t="about:invalid#zClosurez"),new Dt(Lt,t))}var Rt={},Lt={};function jt(){this.a="",this.b=Vt}function Mt(t){return t instanceof jt&&t.constructor===jt&&t.b===Vt?t.a:(L("expected object of type SafeHtml, got '"+t+"' of type "+l(t)),"type_error:SafeHtml")}jt.prototype.ra=!0,jt.prototype.qa=function(){return this.a.toString()},jt.prototype.toString=function(){return"SafeHtml{"+this.a+"}"};var Vt={};function Ut(t){var e=new jt;return e.a=t,e}Ut("<!DOCTYPE html>");var Ft=Ut("");function qt(t,e){for(var n=t.split("%s"),r="",i=Array.prototype.slice.call(arguments,1);i.length&&1<n.length;)r+=n.shift()+i.shift();return r+n.join("%s")}function Bt(t){return st.test(t)&&(-1!=t.indexOf("&")&&(t=t.replace(tt,"&amp;")),-1!=t.indexOf("<")&&(t=t.replace(et,"&lt;")),-1!=t.indexOf(">")&&(t=t.replace(nt,"&gt;")),-1!=t.indexOf('"')&&(t=t.replace(rt,"&quot;")),-1!=t.indexOf("'")&&(t=t.replace(it,"&#39;")),-1!=t.indexOf("\0")&&(t=t.replace(ot,"&#0;"))),t}function Gt(t){return Gt[" "](t),t}Ut("<br>"),Gt[" "]=f;var Wt,zt,Kt=ft("Opera"),Ht=ft("Trident")||ft("MSIE"),Yt=ft("Edge"),Xt=Yt||Ht,Jt=ft("Gecko")&&!(at(Q.toLowerCase(),"webkit")&&!ft("Edge"))&&!(ft("Trident")||ft("MSIE"))&&!ft("Edge"),$t=at(Q.toLowerCase(),"webkit")&&!ft("Edge");function Qt(){var t=u.document;return t?t.documentMode:void 0}t:{var Zt="",te=(zt=Q,Jt?/rv:([^\);]+)(\)|;)/.exec(zt):Yt?/Edge\/([\d\.]+)/.exec(zt):Ht?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(zt):$t?/WebKit\/(\S+)/.exec(zt):Kt?/(?:Version)[ \/]?(\S+)/.exec(zt):void 0);if(te&&(Zt=te?te[1]:""),Ht){var ee=Qt();if(null!=ee&&ee>parseFloat(Zt)){Wt=String(ee);break t}}Wt=Zt}var ne,re={};function ie(t){return function(t,e){var n=re;return Object.prototype.hasOwnProperty.call(n,t)?n[t]:n[t]=e(t)}(t,(function(){for(var e=0,n=Z(String(Wt)).split("."),r=Z(String(t)).split("."),i=Math.max(n.length,r.length),o=0;0==e&&o<i;o++){var s=n[o]||"",a=r[o]||"";do{if(s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],0==s[0].length&&0==a[0].length)break;e=ut(0==s[1].length?0:parseInt(s[1],10),0==a[1].length?0:parseInt(a[1],10))||ut(0==s[2].length,0==a[2].length)||ut(s[2],a[2]),s=s[3],a=a[3]}while(0==e)}return 0<=e}))}ne=u.document&&Ht?Qt():void 0;try{new self.OffscreenCanvas(0,0).getContext("2d")}catch(zt){}var oe=!Ht||9<=Number(ne);function se(t){var e=document;return"string"==typeof t?e.getElementById(t):t}function ae(t,e){lt(e,(function(e,n){e&&"object"==typeof e&&e.ra&&(e=e.qa()),"style"==n?t.style.cssText=e:"class"==n?t.className=e:"for"==n?t.htmlFor=e:he.hasOwnProperty(n)?t.setAttribute(he[n],e):0==n.lastIndexOf("aria-",0)||0==n.lastIndexOf("data-",0)?t.setAttribute(n,e):t[n]=e}))}var ue,ce,he={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};function fe(t,e,n){function r(n){n&&e.appendChild("string"==typeof n?t.createTextNode(n):n)}for(var i=2;i<n.length;i++){var o=n[i];!p(o)||v(o)&&0<o.nodeType?r(o):G(pe(o)?$(o):o,r)}}function le(t,e){return e=String(e),"application/xhtml+xml"===t.contentType&&(e=e.toLowerCase()),t.createElement(e)}function pe(t){if(t&&"number"==typeof t.length){if(v(t))return"function"==typeof t.item||"string"==typeof t.item;if(d(t))return"function"==typeof t.item}return!1}function de(t){u.setTimeout((function(){throw t}),0)}function ve(){var t=u.MessageChannel;if(void 0===t&&"undefined"!=typeof window&&window.postMessage&&window.addEventListener&&!ft("Presto")&&(t=function(){var t=le(document,"IFRAME");t.style.display="none",function(t){var e=new It(Ot,bt(_t));gt(t,"HTMLIFrameElement"),t.src=Tt(e).toString()}(t),document.documentElement.appendChild(t);var e=t.contentWindow;(t=e.document).open(),t.write(Mt(Ft)),t.close();var n="callImmediate"+Math.random(),r="file:"==e.location.protocol?"*":e.location.protocol+"//"+e.location.host;t=E((function(t){"*"!=r&&t.origin!=r||t.data!=n||this.port1.onmessage()}),this),e.addEventListener("message",t,!1),this.port1={},this.port2={postMessage:function(){e.postMessage(n,r)}}}),void 0!==t&&!ft("Trident")&&!ft("MSIE")){var e=new t,n={},r=n;return e.port1.onmessage=function(){if(void 0!==n.next){var t=(n=n.next).Db;n.Db=null,t()}},function(t){r.next={Db:t},r=r.next,e.port2.postMessage(0)}}return function(t){u.setTimeout(t,0)}}function ye(t,e){ce||function(){if(u.Promise&&u.Promise.resolve){var t=u.Promise.resolve(void 0);ce=function(){t.then(be)}}else ce=function(){var t=be;!d(u.setImmediate)||u.Window&&u.Window.prototype&&!ft("Edge")&&u.Window.prototype.setImmediate==u.setImmediate?(ue||(ue=ve()),ue(t)):u.setImmediate(t)}}(),ge||(ce(),ge=!0),me.add(t,e)}var ge=!1,me=new V;function be(){for(var t;t=F();){try{t.a.call(t.b)}catch(t){de(t)}M(U,t)}ge=!1}function we(t,e){if(this.a=Ee,this.i=void 0,this.f=this.b=this.c=null,this.g=this.h=!1,t!=f)try{var n=this;t.call(e,(function(t){xe(n,_e,t)}),(function(t){if(!(t instanceof Fe))try{if(t instanceof Error)throw t;throw Error("Promise rejected.")}catch(t){}xe(n,Ie,t)}))}catch(t){xe(this,Ie,t)}}var Ee=0,_e=2,Ie=3;function Te(){this.next=this.f=this.b=this.g=this.a=null,this.c=!1}Te.prototype.reset=function(){this.f=this.b=this.g=this.a=null,this.c=!1};var Ae=new j((function(){return new Te}),(function(t){t.reset()}));function Ne(t,e,n){var r=Ae.get();return r.g=t,r.b=e,r.f=n,r}function Se(t){if(t instanceof we)return t;var e=new we(f);return xe(e,_e,t),e}function ke(t){return new we((function(e,n){n(t)}))}function Oe(t,e,n){Re(t,e,n,null)||ye(_(e,t))}function De(t){return new we((function(e){var n=t.length,r=[];if(n)for(var i=function(t,i,o){n--,r[t]=i?{Mb:!0,value:o}:{Mb:!1,reason:o},0==n&&e(r)},o=0;o<t.length;o++)Oe(t[o],_(i,o,!0),_(i,o,!1));else e(r)}))}function Pe(t,e){t.b||t.a!=_e&&t.a!=Ie||Le(t),t.f?t.f.next=e:t.b=e,t.f=e}function Ce(t,e,n,r){var i=Ne(null,null,null);return i.a=new we((function(t,o){i.g=e?function(n){try{var i=e.call(r,n);t(i)}catch(t){o(t)}}:t,i.b=n?function(e){try{var i=n.call(r,e);void 0===i&&e instanceof Fe?o(e):t(i)}catch(t){o(t)}}:o})),i.a.c=t,Pe(t,i),i.a}function xe(t,e,n){t.a==Ee&&(t===n&&(e=Ie,n=new TypeError("Promise cannot resolve to itself")),t.a=1,Re(n,t.Yc,t.Zc,t)||(t.i=n,t.a=e,t.c=null,Le(t),e!=Ie||n instanceof Fe||function(t,e){t.g=!0,ye((function(){t.g&&Ue.call(null,e)}))}(t,n)))}function Re(t,e,n,r){if(t instanceof we)return Pe(t,Ne(e||f,n||null,r)),!0;if(C(t))return t.then(e,n,r),!0;if(v(t))try{var i=t.then;if(d(i))return function(t,e,n,r,i){function o(t){s||(s=!0,r.call(i,t))}var s=!1;try{e.call(t,(function(t){s||(s=!0,n.call(i,t))}),o)}catch(t){o(t)}}(t,i,e,n,r),!0}catch(t){return n.call(r,t),!0}return!1}function Le(t){t.h||(t.h=!0,ye(t.ec,t))}function je(t){var e=null;return t.b&&(e=t.b,t.b=e.next,e.next=null),t.b||(t.f=null),e}function Me(t,e,n,r){if(n==Ie&&e.b&&!e.c)for(;t&&t.g;t=t.c)t.g=!1;if(e.a)e.a.c=null,Ve(e,n,r);else try{e.c?e.g.call(e.f):Ve(e,n,r)}catch(t){Ue.call(null,t)}M(Ae,e)}function Ve(t,e,n){e==_e?t.g.call(t.f,n):t.b&&t.b.call(t.f,n)}we.prototype.then=function(t,e,n){return Ce(this,d(t)?t:null,d(e)?e:null,n)},we.prototype.$goog_Thenable=!0,(e=we.prototype).ma=function(t,e){return(t=Ne(t,t,e)).c=!0,Pe(this,t),this},e.o=function(t,e){return Ce(this,null,t,e)},e.cancel=function(t){if(this.a==Ee){var e=new Fe(t);ye((function(){!function t(e,n){if(e.a==Ee)if(e.c){var r=e.c;if(r.b){for(var i=0,o=null,s=null,a=r.b;a&&(a.c||(i++,a.a==e&&(o=a),!(o&&1<i)));a=a.next)o||(s=a);o&&(r.a==Ee&&1==i?t(r,n):(s?((i=s).next==r.f&&(r.f=i),i.next=i.next.next):je(r),Me(r,o,Ie,n)))}e.c=null}else xe(e,Ie,n)}(this,e)}),this)}},e.Yc=function(t){this.a=Ee,xe(this,_e,t)},e.Zc=function(t){this.a=Ee,xe(this,Ie,t)},e.ec=function(){for(var t;t=je(this);)Me(this,t,this.a,this.i);this.h=!1};var Ue=de;function Fe(t){x.call(this,t)}function qe(){0!=Be&&(Ge[y(this)]=this),this.wa=this.wa,this.na=this.na}T(Fe,x),Fe.prototype.name="cancel";var Be=0,Ge={};function We(t){if(!t.wa&&(t.wa=!0,t.Ba(),0!=Be)){var e=y(t);if(0!=Be&&t.na&&0<t.na.length)throw Error(t+" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");delete Ge[e]}}qe.prototype.wa=!1,qe.prototype.Ba=function(){if(this.na)for(;this.na.length;)this.na.shift()()};var ze=Object.freeze||function(t){return t},Ke=!Ht||9<=Number(ne),He=Ht&&!ie("9"),Ye=function(){if(!u.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});try{u.addEventListener("test",f,e),u.removeEventListener("test",f,e)}catch(t){}return t}();function Xe(t,e){this.type=t,this.b=this.target=e,this.defaultPrevented=!1}function Je(t,e){if(Xe.call(this,t?t.type:""),this.relatedTarget=this.b=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.pointerId=0,this.pointerType="",this.a=null,t){var n=this.type=t.type,r=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.b=e,e=t.relatedTarget){if(Jt){t:{try{Gt(e.nodeName);var i=!0;break t}catch(t){}i=!1}i||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,r?(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0):(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType="string"==typeof t.pointerType?t.pointerType:$e[t.pointerType]||"",this.a=t,t.defaultPrevented&&this.preventDefault()}}Xe.prototype.preventDefault=function(){this.defaultPrevented=!0},T(Je,Xe);var $e=ze({2:"touch",3:"pen",4:"mouse"});Je.prototype.preventDefault=function(){Je.Za.preventDefault.call(this);var t=this.a;if(t.preventDefault)t.preventDefault();else if(t.returnValue=!1,He)try{(t.ctrlKey||112<=t.keyCode&&123>=t.keyCode)&&(t.keyCode=-1)}catch(t){}},Je.prototype.f=function(){return this.a};var Qe="closure_listenable_"+(1e6*Math.random()|0),Ze=0;function tn(t,e,n,r,i){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!r,this.Ta=i,this.key=++Ze,this.ua=this.Na=!1}function en(t){t.ua=!0,t.listener=null,t.proxy=null,t.src=null,t.Ta=null}function nn(t){this.src=t,this.a={},this.b=0}function rn(t,e){var n=e.type;n in t.a&&Y(t.a[n],e)&&(en(e),0==t.a[n].length&&(delete t.a[n],t.b--))}function on(t,e,n,r){for(var i=0;i<t.length;++i){var o=t[i];if(!o.ua&&o.listener==e&&o.capture==!!n&&o.Ta==r)return i}return-1}nn.prototype.add=function(t,e,n,r,i){var o=t.toString();(t=this.a[o])||(t=this.a[o]=[],this.b++);var s=on(t,e,r,i);return-1<s?(e=t[s],n||(e.Na=!1)):((e=new tn(e,this.src,o,!!r,i)).Na=n,t.push(e)),e};var sn="closure_lm_"+(1e6*Math.random()|0),an={};function un(t,e,n,r,i){if(r&&r.once)hn(t,e,n,r,i);else if(Array.isArray(e))for(var o=0;o<e.length;o++)un(t,e[o],n,r,i);else n=bn(n),t&&t[Qe]?En(t,e,n,v(r)?!!r.capture:!!r,i):cn(t,e,n,!1,r,i)}function cn(t,e,n,r,i,o){if(!e)throw Error("Invalid event type");var s=v(i)?!!i.capture:!!i,a=gn(t);if(a||(t[sn]=a=new nn(t)),!(n=a.add(e,n,r,s,o)).proxy){if(r=function(){var t=yn,e=Ke?function(n){return t.call(e.src,e.listener,n)}:function(n){if(!(n=t.call(e.src,e.listener,n)))return n};return e}(),n.proxy=r,r.src=t,r.listener=n,t.addEventListener)Ye||(i=s),void 0===i&&(i=!1),t.addEventListener(e.toString(),r,i);else if(t.attachEvent)t.attachEvent(pn(e.toString()),r);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(r)}0}}function hn(t,e,n,r,i){if(Array.isArray(e))for(var o=0;o<e.length;o++)hn(t,e[o],n,r,i);else n=bn(n),t&&t[Qe]?_n(t,e,n,v(r)?!!r.capture:!!r,i):cn(t,e,n,!0,r,i)}function fn(t,e,n,r,i){if(Array.isArray(e))for(var o=0;o<e.length;o++)fn(t,e[o],n,r,i);else r=v(r)?!!r.capture:!!r,n=bn(n),t&&t[Qe]?(t=t.u,(e=String(e).toString())in t.a&&(-1<(n=on(o=t.a[e],n,r,i))&&(en(o[n]),Array.prototype.splice.call(o,n,1),0==o.length&&(delete t.a[e],t.b--)))):t&&(t=gn(t))&&(e=t.a[e.toString()],t=-1,e&&(t=on(e,n,r,i)),(n=-1<t?e[t]:null)&&ln(n))}function ln(t){if("number"!=typeof t&&t&&!t.ua){var e=t.src;if(e&&e[Qe])rn(e.u,t);else{var n=t.type,r=t.proxy;e.removeEventListener?e.removeEventListener(n,r,t.capture):e.detachEvent?e.detachEvent(pn(n),r):e.addListener&&e.removeListener&&e.removeListener(r),(n=gn(e))?(rn(n,t),0==n.b&&(n.src=null,e[sn]=null)):en(t)}}}function pn(t){return t in an?an[t]:an[t]="on"+t}function dn(t,e,n,r){var i=!0;if((t=gn(t))&&(e=t.a[e.toString()]))for(e=e.concat(),t=0;t<e.length;t++){var o=e[t];o&&o.capture==n&&!o.ua&&(o=vn(o,r),i=i&&!1!==o)}return i}function vn(t,e){var n=t.listener,r=t.Ta||t.src;return t.Na&&ln(t),n.call(r,e)}function yn(t,e){if(t.ua)return!0;if(!Ke){if(!e)t:{e=["window","event"];for(var n=u,r=0;r<e.length;r++)if(null==(n=n[e[r]])){e=null;break t}e=n}if(e=new Je(r=e,this),n=!0,!(0>r.keyCode||null!=r.returnValue)){t:{var i=!1;if(0==r.keyCode)try{r.keyCode=-1;break t}catch(t){i=!0}(i||null==r.returnValue)&&(r.returnValue=!0)}for(r=[],i=e.b;i;i=i.parentNode)r.push(i);for(t=t.type,i=r.length-1;0<=i;i--){e.b=r[i];var o=dn(r[i],t,!0,e);n=n&&o}for(i=0;i<r.length;i++)e.b=r[i],o=dn(r[i],t,!1,e),n=n&&o}return n}return vn(t,new Je(e,this))}function gn(t){return(t=t[sn])instanceof nn?t:null}var mn="__closure_events_fn_"+(1e9*Math.random()>>>0);function bn(t){return d(t)?t:(t[mn]||(t[mn]=function(e){return t.handleEvent(e)}),t[mn])}function wn(){qe.call(this),this.u=new nn(this),this.Yb=this,this.eb=null}function En(t,e,n,r,i){t.u.add(String(e),n,!1,r,i)}function _n(t,e,n,r,i){t.u.add(String(e),n,!0,r,i)}function In(t,e,n,r){if(!(e=t.u.a[String(e)]))return!0;e=e.concat();for(var i=!0,o=0;o<e.length;++o){var s=e[o];if(s&&!s.ua&&s.capture==n){var a=s.listener,u=s.Ta||s.src;s.Na&&rn(t.u,s),i=!1!==a.call(u,r)&&i}}return i&&!r.defaultPrevented}function Tn(t,e,n){if(d(t))n&&(t=E(t,n));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=E(t.handleEvent,t)}return 2147483647<Number(e)?-1:u.setTimeout(t,e||0)}function An(t){var e=null;return new we((function(n,r){-1==(e=Tn((function(){n(void 0)}),t))&&r(Error("Failed to schedule timer."))})).o((function(t){throw u.clearTimeout(e),t}))}function Nn(t){if(t.V&&"function"==typeof t.V)return t.V();if("string"==typeof t)return t.split("");if(p(t)){for(var e=[],n=t.length,r=0;r<n;r++)e.push(t[r]);return e}for(r in e=[],n=0,t)e[n++]=t[r];return e}function Sn(t){if(t.X&&"function"==typeof t.X)return t.X();if(!t.V||"function"!=typeof t.V){if(p(t)||"string"==typeof t){var e=[];t=t.length;for(var n=0;n<t;n++)e.push(n);return e}for(var r in e=[],n=0,t)e[n++]=r;return e}}function kn(t,e){this.b={},this.a=[],this.c=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else if(t)if(t instanceof kn)for(n=t.X(),r=0;r<n.length;r++)this.set(n[r],t.get(n[r]));else for(r in t)this.set(r,t[r])}function On(t){if(t.c!=t.a.length){for(var e=0,n=0;e<t.a.length;){var r=t.a[e];Dn(t.b,r)&&(t.a[n++]=r),e++}t.a.length=n}if(t.c!=t.a.length){var i={};for(n=e=0;e<t.a.length;)Dn(i,r=t.a[e])||(t.a[n++]=r,i[r]=1),e++;t.a.length=n}}function Dn(t,e){return Object.prototype.hasOwnProperty.call(t,e)}T(wn,qe),wn.prototype[Qe]=!0,wn.prototype.addEventListener=function(t,e,n,r){un(this,t,e,n,r)},wn.prototype.removeEventListener=function(t,e,n,r){fn(this,t,e,n,r)},wn.prototype.dispatchEvent=function(t){var e,n=this.eb;if(n)for(e=[];n;n=n.eb)e.push(n);n=this.Yb;var r=t.type||t;if("string"==typeof t)t=new Xe(t,n);else if(t instanceof Xe)t.target=t.target||n;else{var i=t;yt(t=new Xe(r,n),i)}if(i=!0,e)for(var o=e.length-1;0<=o;o--){var s=t.b=e[o];i=In(s,r,!0,t)&&i}if(i=In(s=t.b=n,r,!0,t)&&i,i=In(s,r,!1,t)&&i,e)for(o=0;o<e.length;o++)i=In(s=t.b=e[o],r,!1,t)&&i;return i},wn.prototype.Ba=function(){if(wn.Za.Ba.call(this),this.u){var t,e=this.u;for(t in e.a){for(var n=e.a[t],r=0;r<n.length;r++)en(n[r]);delete e.a[t],e.b--}}this.eb=null},(e=kn.prototype).V=function(){On(this);for(var t=[],e=0;e<this.a.length;e++)t.push(this.b[this.a[e]]);return t},e.X=function(){return On(this),this.a.concat()},e.clear=function(){this.b={},this.c=this.a.length=0},e.get=function(t,e){return Dn(this.b,t)?this.b[t]:e},e.set=function(t,e){Dn(this.b,t)||(this.c++,this.a.push(t)),this.b[t]=e},e.forEach=function(t,e){for(var n=this.X(),r=0;r<n.length;r++){var i=n[r],o=this.get(i);t.call(e,o,i,this)}};var Pn=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/\\#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Cn(t,e){var n;this.b=this.i=this.f="",this.l=null,this.g=this.c="",this.h=!1,t instanceof Cn?(this.h=void 0!==e?e:t.h,xn(this,t.f),this.i=t.i,this.b=t.b,Rn(this,t.l),this.c=t.c,Ln(this,tr(t.a)),this.g=t.g):t&&(n=String(t).match(Pn))?(this.h=!!e,xn(this,n[1]||"",!0),this.i=Fn(n[2]||""),this.b=Fn(n[3]||"",!0),Rn(this,n[4]),this.c=Fn(n[5]||"",!0),Ln(this,n[6]||"",!0),this.g=Fn(n[7]||"")):(this.h=!!e,this.a=new Yn(null,this.h))}function xn(t,e,n){t.f=n?Fn(e,!0):e,t.f&&(t.f=t.f.replace(/:$/,""))}function Rn(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.l=e}else t.l=null}function Ln(t,e,n){e instanceof Yn?(t.a=e,function(t,e){e&&!t.f&&(Xn(t),t.c=null,t.a.forEach((function(t,e){var n=e.toLowerCase();e!=n&&($n(this,e),Zn(this,n,t))}),t)),t.f=e}(t.a,t.h)):(n||(e=qn(e,Kn)),t.a=new Yn(e,t.h))}function jn(t,e,n){t.a.set(e,n)}function Mn(t,e){return t.a.get(e)}function Vn(t){return t instanceof Cn?new Cn(t):new Cn(t,void 0)}function Un(t,e){var n=new Cn(null,void 0);return xn(n,"https"),t&&(n.b=t),e&&(n.c=e),n}function Fn(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function qn(t,e,n){return"string"==typeof t?(t=encodeURI(t).replace(e,Bn),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function Bn(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}Cn.prototype.toString=function(){var t=[],e=this.f;e&&t.push(qn(e,Gn,!0),":");var n=this.b;return(n||"file"==e)&&(t.push("//"),(e=this.i)&&t.push(qn(e,Gn,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.l)&&t.push(":",String(n))),(n=this.c)&&(this.b&&"/"!=n.charAt(0)&&t.push("/"),t.push(qn(n,"/"==n.charAt(0)?zn:Wn,!0))),(n=this.a.toString())&&t.push("?",n),(n=this.g)&&t.push("#",qn(n,Hn)),t.join("")},Cn.prototype.resolve=function(t){var e=new Cn(this),n=!!t.f;n?xn(e,t.f):n=!!t.i,n?e.i=t.i:n=!!t.b,n?e.b=t.b:n=null!=t.l;var r=t.c;if(n)Rn(e,t.l);else if(n=!!t.c){if("/"!=r.charAt(0))if(this.b&&!this.c)r="/"+r;else{var i=e.c.lastIndexOf("/");-1!=i&&(r=e.c.substr(0,i+1)+r)}if(".."==(i=r)||"."==i)r="";else if(at(i,"./")||at(i,"/.")){r=0==i.lastIndexOf("/",0),i=i.split("/");for(var o=[],s=0;s<i.length;){var a=i[s++];"."==a?r&&s==i.length&&o.push(""):".."==a?((1<o.length||1==o.length&&""!=o[0])&&o.pop(),r&&s==i.length&&o.push("")):(o.push(a),r=!0)}r=o.join("/")}else r=i}return n?e.c=r:n=""!==t.a.toString(),n?Ln(e,tr(t.a)):n=!!t.g,n&&(e.g=t.g),e};var Gn=/[#\/\?@]/g,Wn=/[#\?:]/g,zn=/[#\?]/g,Kn=/[#\?@]/g,Hn=/#/g;function Yn(t,e){this.b=this.a=null,this.c=t||null,this.f=!!e}function Xn(t){t.a||(t.a=new kn,t.b=0,t.c&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var r=t[n].indexOf("="),i=null;if(0<=r){var o=t[n].substring(0,r);i=t[n].substring(r+1)}else o=t[n];e(o,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(t.c,(function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)})))}function Jn(t){var e=Sn(t);if(void 0===e)throw Error("Keys are undefined");var n=new Yn(null,void 0);t=Nn(t);for(var r=0;r<e.length;r++){var i=e[r],o=t[r];Array.isArray(o)?Zn(n,i,o):n.add(i,o)}return n}function $n(t,e){Xn(t),e=er(t,e),Dn(t.a.b,e)&&(t.c=null,t.b-=t.a.get(e).length,Dn((t=t.a).b,e)&&(delete t.b[e],t.c--,t.a.length>2*t.c&&On(t)))}function Qn(t,e){return Xn(t),e=er(t,e),Dn(t.a.b,e)}function Zn(t,e,n){$n(t,e),0<n.length&&(t.c=null,t.a.set(er(t,e),$(n)),t.b+=n.length)}function tr(t){var e=new Yn;return e.c=t.c,t.a&&(e.a=new kn(t.a),e.b=t.b),e}function er(t,e){return e=String(e),t.f&&(e=e.toLowerCase()),e}function nr(t){var e=[];return function t(e,n,r){if(null==n)r.push("null");else{if("object"==typeof n){if(Array.isArray(n)){var i=n;n=i.length,r.push("[");for(var o="",s=0;s<n;s++)r.push(o),t(e,i[s],r),o=",";return void r.push("]")}if(!(n instanceof String||n instanceof Number||n instanceof Boolean)){for(i in r.push("{"),o="",n)Object.prototype.hasOwnProperty.call(n,i)&&("function"!=typeof(s=n[i])&&(r.push(o),sr(i,r),r.push(":"),t(e,s,r),o=","));return void r.push("}")}n=n.valueOf()}switch(typeof n){case"string":sr(n,r);break;case"number":r.push(isFinite(n)&&!isNaN(n)?String(n):"null");break;case"boolean":r.push(String(n));break;case"function":r.push("null");break;default:throw Error("Unknown type: "+typeof n)}}}(new rr,t,e),e.join("")}function rr(){}(e=Yn.prototype).add=function(t,e){Xn(this),this.c=null,t=er(this,t);var n=this.a.get(t);return n||this.a.set(t,n=[]),n.push(e),this.b+=1,this},e.clear=function(){this.a=this.c=null,this.b=0},e.forEach=function(t,e){Xn(this),this.a.forEach((function(n,r){G(n,(function(n){t.call(e,n,r,this)}),this)}),this)},e.X=function(){Xn(this);for(var t=this.a.V(),e=this.a.X(),n=[],r=0;r<e.length;r++)for(var i=t[r],o=0;o<i.length;o++)n.push(e[r]);return n},e.V=function(t){Xn(this);var e=[];if("string"==typeof t)Qn(this,t)&&(e=J(e,this.a.get(er(this,t))));else{t=this.a.V();for(var n=0;n<t.length;n++)e=J(e,t[n])}return e},e.set=function(t,e){return Xn(this),this.c=null,Qn(this,t=er(this,t))&&(this.b-=this.a.get(t).length),this.a.set(t,[e]),this.b+=1,this},e.get=function(t,e){return t&&0<(t=this.V(t)).length?String(t[0]):e},e.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var t=[],e=this.a.X(),n=0;n<e.length;n++){var r=e[n],i=encodeURIComponent(String(r));r=this.V(r);for(var o=0;o<r.length;o++){var s=i;""!==r[o]&&(s+="="+encodeURIComponent(String(r[o]))),t.push(s)}}return this.c=t.join("&")};var ir={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\u000b"},or=/\uffff/.test("￿")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;function sr(t,e){e.push('"',t.replace(or,(function(t){var e=ir[t];return e||(e="\\u"+(65536|t.charCodeAt(0)).toString(16).substr(1),ir[t]=e),e})),'"')}function ar(){var t=Nr();return Ht&&!!ne&&11==ne||/Edge\/\d+/.test(t)}function ur(){return u.window&&u.window.location.href||self&&self.location&&self.location.href||""}function cr(t,e){e=e||u.window;var n="about:blank";t&&(n=Pt(xt(t))),e.location.href=n}function hr(t){return!!((t=(t||Nr()).toLowerCase()).match(/android/)||t.match(/webos/)||t.match(/iphone|ipad|ipod/)||t.match(/blackberry/)||t.match(/windows phone/)||t.match(/iemobile/))}function fr(t){t=t||u.window;try{t.close()}catch(t){}}function lr(t,e,n){var r=Math.floor(1e9*Math.random()).toString();e=e||500,n=n||600;var i=(window.screen.availHeight-n)/2,o=(window.screen.availWidth-e)/2;for(s in e={width:e,height:n,top:0<i?i:0,left:0<o?o:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1},n=Nr().toLowerCase(),r&&(e.target=r,at(n,"crios/")&&(e.target="_blank")),Ir(Nr())==Er&&(t=t||"http://localhost",e.scrollbars=!0),n=t||"",(t=e)||(t={}),r=window,e=n instanceof Dt?n:xt(void 0!==n.href?n.href:String(n)),n=t.target||n.target,i=[],t)switch(s){case"width":case"height":case"top":case"left":i.push(s+"="+t[s]);break;case"target":case"noopener":case"noreferrer":break;default:i.push(s+"="+(t[s]?1:0))}var s=i.join(",");if((ft("iPhone")&&!ft("iPod")&&!ft("iPad")||ft("iPad")||ft("iPod"))&&r.navigator&&r.navigator.standalone&&n&&"_self"!=n?(gt(s=le(document,"A"),"HTMLAnchorElement"),e instanceof Dt||e instanceof Dt||(e="object"==typeof e&&e.ra?e.qa():String(e),Ct.test(e)||(e="about:invalid#zClosurez"),e=new Dt(Lt,e)),s.href=Pt(e),s.setAttribute("target",n),t.noreferrer&&s.setAttribute("rel","noreferrer"),(t=document.createEvent("MouseEvent")).initMouseEvent("click",!0,!0,r,1),s.dispatchEvent(t),s={}):t.noreferrer?(s=r.open("",n,s),t=Pt(e),s&&(Xt&&at(t,";")&&(t="'"+t.replace(/'/g,"%27")+"'"),s.opener=null,t=Ut('<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+Bt(t)+'">'),r=s.document)&&(r.write(Mt(t)),r.close())):(s=r.open(Pt(e),n,s))&&t.noopener&&(s.opener=null),s)try{s.focus()}catch(t){}return s}var pr=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,dr=/^[^@]+@[^@]+$/;function vr(){var t=null;return new we((function(e){"complete"==u.document.readyState?e():(t=function(){e()},hn(window,"load",t))})).o((function(e){throw fn(window,"load",t),e}))}function yr(t){return t=t||Nr(),!("file:"!==Pr()&&"ionic:"!==Pr()||!t.toLowerCase().match(/iphone|ipad|ipod|android/))}function gr(){var t=u.window;try{return!(!t||t==t.top)}catch(t){return!1}}function mr(){return void 0!==u.WorkerGlobalScope&&"function"==typeof u.importScripts}function br(){return r.a.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":r.a.INTERNAL.hasOwnProperty("node")?"Node":mr()?"Worker":"Browser"}function wr(){var t=br();return"ReactNative"===t||"Node"===t}var Er="Firefox",_r="Chrome";function Ir(t){var e=t.toLowerCase();return at(e,"opera/")||at(e,"opr/")||at(e,"opios/")?"Opera":at(e,"iemobile")?"IEMobile":at(e,"msie")||at(e,"trident/")?"IE":at(e,"edge/")?"Edge":at(e,"firefox/")?Er:at(e,"silk/")?"Silk":at(e,"blackberry")?"Blackberry":at(e,"webos")?"Webos":!at(e,"safari/")||at(e,"chrome/")||at(e,"crios/")||at(e,"android")?!at(e,"chrome/")&&!at(e,"crios/")||at(e,"edge/")?at(e,"android")?"Android":(t=t.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&2==t.length?t[1]:"Other":_r:"Safari"}var Tr={jd:"FirebaseCore-web",ld:"FirebaseUI-web"};function Ar(t,e){e=e||[];var n,r=[],i={};for(n in Tr)i[Tr[n]]=!0;for(n=0;n<e.length;n++)void 0!==i[e[n]]&&(delete i[e[n]],r.push(e[n]));return r.sort(),(e=r).length||(e=["FirebaseCore-web"]),"Browser"===(r=br())?r=Ir(i=Nr()):"Worker"===r&&(r=Ir(i=Nr())+"-"+r),r+"/JsCore/"+t+"/"+e.join(",")}function Nr(){return u.navigator&&u.navigator.userAgent||""}function Sr(t,e){t=t.split("."),e=e||u;for(var n=0;n<t.length&&"object"==typeof e&&null!=e;n++)e=e[t[n]];return n!=t.length&&(e=void 0),e}function kr(){try{var t=u.localStorage,e=jr();if(t)return t.setItem(e,"1"),t.removeItem(e),!ar()||!!u.indexedDB}catch(t){return mr()&&!!u.indexedDB}return!1}function Or(){return(Dr()||"chrome-extension:"===Pr()||yr())&&!wr()&&kr()&&!mr()}function Dr(){return"http:"===Pr()||"https:"===Pr()}function Pr(){return u.location&&u.location.protocol||null}function Cr(t){return!hr(t=t||Nr())&&Ir(t)!=Er}function xr(t){return void 0===t?null:nr(t)}function Rr(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&null!==t[e]&&void 0!==t[e]&&(n[e]=t[e]);return n}function Lr(t){if(null!==t)return JSON.parse(t)}function jr(t){return t||Math.floor(1e9*Math.random()).toString()}function Mr(t){return"Safari"!=Ir(t=t||Nr())&&!t.toLowerCase().match(/iphone|ipad|ipod/)}function Vr(){var t=u.___jsl;if(t&&t.H)for(var e in t.H)if(t.H[e].r=t.H[e].r||[],t.H[e].L=t.H[e].L||[],t.H[e].r=t.H[e].L.concat(),t.CP)for(var n=0;n<t.CP.length;n++)t.CP[n]=null}function Ur(t,e){if(t>e)throw Error("Short delay should be less than long delay!");this.a=t,this.c=e,t=Nr(),e=br(),this.b=hr(t)||"ReactNative"===e}function Fr(){var t=u.document;return!t||void 0===t.visibilityState||"visible"==t.visibilityState}function qr(t){try{var e=new Date(parseInt(t,10));if(!isNaN(e.getTime())&&!/[^0-9]/.test(t))return e.toUTCString()}catch(t){}return null}function Br(){return!(!Sr("fireauth.oauthhelper",u)&&!Sr("fireauth.iframe",u))}Ur.prototype.get=function(){var t=u.navigator;return!t||"boolean"!=typeof t.onLine||!Dr()&&"chrome-extension:"!==Pr()&&void 0===t.connection||t.onLine?this.b?this.c:this.a:Math.min(5e3,this.a)};var Gr,Wr={};function zr(t){Wr[t]||(Wr[t]=!0,"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(t))}try{var Kr={};Object.defineProperty(Kr,"abcd",{configurable:!0,enumerable:!0,value:1}),Object.defineProperty(Kr,"abcd",{configurable:!0,enumerable:!0,value:2}),Gr=2==Kr.abcd}catch(zt){Gr=!1}function Hr(t,e,n){Gr?Object.defineProperty(t,e,{configurable:!0,enumerable:!0,value:n}):t[e]=n}function Yr(t,e){if(e)for(var n in e)e.hasOwnProperty(n)&&Hr(t,n,e[n])}function Xr(t){var e={};return Yr(e,t),e}function Jr(t){var e=t;if("object"==typeof t&&null!=t)for(var n in e="length"in t?[]:{},t)Hr(e,n,Jr(t[n]));return e}function $r(t){var e=t&&(t[ni]?"phone":null);if(!(e&&t&&t[ei]))throw new A("internal-error","Internal assert: invalid MultiFactorInfo object");Hr(this,"uid",t[ei]),Hr(this,"displayName",t[Zr]||null);var n=null;t[ti]&&(n=new Date(t[ti]).toUTCString()),Hr(this,"enrollmentTime",n),Hr(this,"factorId",e)}function Qr(t){try{var e=new ri(t)}catch(t){e=null}return e}$r.prototype.v=function(){return{uid:this.uid,displayName:this.displayName,factorId:this.factorId,enrollmentTime:this.enrollmentTime}};var Zr="displayName",ti="enrolledAt",ei="mfaEnrollmentId",ni="phoneInfo";function ri(t){$r.call(this,t),Hr(this,"phoneNumber",t[ni])}function ii(t){var e={},n=t[ui],r=t[hi],i=t[fi];if(t=Qr(t[ci]),!i||i!=si&&i!=ai&&!n||i==ai&&!r||i==oi&&!t)throw Error("Invalid checkActionCode response!");i==ai?(e[pi]=n||null,e[vi]=n||null,e[li]=r):(e[pi]=r||null,e[vi]=r||null,e[li]=n||null),e[di]=t||null,Hr(this,gi,i),Hr(this,yi,Jr(e))}T(ri,$r),ri.prototype.v=function(){var t=ri.Za.v.call(this);return t.phoneNumber=this.phoneNumber,t};var oi="REVERT_SECOND_FACTOR_ADDITION",si="EMAIL_SIGNIN",ai="VERIFY_AND_CHANGE_EMAIL",ui="email",ci="mfaInfo",hi="newEmail",fi="requestType",li="email",pi="fromEmail",di="multiFactorInfo",vi="previousEmail",yi="data",gi="operation";function mi(t){var e=Mn(t=Vn(t),bi)||null,n=Mn(t,wi)||null,r=Mn(t,Ii)||null;if(r=r&&Ai[r]||null,!e||!n||!r)throw new A("argument-error",bi+", "+wi+"and "+Ii+" are required in a valid action code URL.");Yr(this,{apiKey:e,operation:r,code:n,continueUrl:Mn(t,Ei)||null,languageCode:Mn(t,_i)||null,tenantId:Mn(t,Ti)||null})}var bi="apiKey",wi="oobCode",Ei="continueUrl",_i="languageCode",Ii="mode",Ti="tenantId",Ai={recoverEmail:"RECOVER_EMAIL",resetPassword:"PASSWORD_RESET",revertSecondFactorAddition:oi,signIn:si,verifyAndChangeEmail:ai,verifyEmail:"VERIFY_EMAIL"};function Ni(t){try{return new mi(t)}catch(t){return null}}function Si(t){var e=t[Ci];if(void 0===e)throw new A("missing-continue-uri");if("string"!=typeof e||"string"==typeof e&&!e.length)throw new A("invalid-continue-uri");this.h=e,this.b=this.a=null,this.g=!1;var n=t[ki];if(n&&"object"==typeof n){e=n[Li];var r=n[xi];if(n=n[Ri],"string"==typeof e&&e.length){if(this.a=e,void 0!==r&&"boolean"!=typeof r)throw new A("argument-error",xi+" property must be a boolean when specified.");if(this.g=!!r,void 0!==n&&("string"!=typeof n||"string"==typeof n&&!n.length))throw new A("argument-error",Ri+" property must be a non empty string when specified.");this.b=n||null}else{if(void 0!==e)throw new A("argument-error",Li+" property must be a non empty string when specified.");if(void 0!==r||void 0!==n)throw new A("missing-android-pkg-name")}}else if(void 0!==n)throw new A("argument-error",ki+" property must be a non null object when specified.");if(this.f=null,(e=t[Pi])&&"object"==typeof e){if("string"==typeof(e=e[ji])&&e.length)this.f=e;else if(void 0!==e)throw new A("argument-error",ji+" property must be a non empty string when specified.")}else if(void 0!==e)throw new A("argument-error",Pi+" property must be a non null object when specified.");if(void 0!==(e=t[Di])&&"boolean"!=typeof e)throw new A("argument-error",Di+" property must be a boolean when specified.");if(this.c=!!e,void 0!==(t=t[Oi])&&("string"!=typeof t||"string"==typeof t&&!t.length))throw new A("argument-error",Oi+" property must be a non empty string when specified.");this.i=t||null}var ki="android",Oi="dynamicLinkDomain",Di="handleCodeInApp",Pi="iOS",Ci="url",xi="installApp",Ri="minimumVersion",Li="packageName",ji="bundleId";function Mi(t){var e={};for(var n in e.continueUrl=t.h,e.canHandleCodeInApp=t.c,(e.androidPackageName=t.a)&&(e.androidMinimumVersion=t.b,e.androidInstallApp=t.g),e.iOSBundleId=t.f,e.dynamicLinkDomain=t.i,e)null===e[n]&&delete e[n];return e}var Vi=null;function Ui(t){var e="";return function(t,e){function n(e){for(;r<t.length;){var n=t.charAt(r++),i=Vi[n];if(null!=i)return i;if(!/^[\s\xa0]*$/.test(n))throw Error("Unknown base64 encoding at char: "+n)}return e}!function(){if(!Vi){Vi={};for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),e=["+/=","+/","-_=","-_.","-_"],n=0;5>n;n++)for(var r=t.concat(e[n].split("")),i=0;i<r.length;i++){var o=r[i];void 0===Vi[o]&&(Vi[o]=i)}}}();for(var r=0;;){var i=n(-1),o=n(0),s=n(64),a=n(64);if(64===a&&-1===i)break;e(i<<2|o>>4),64!=s&&(e(o<<4&240|s>>2),64!=a&&e(s<<6&192|a))}}(t,(function(t){e+=String.fromCharCode(t)})),e}function Fi(t){var e=Bi(t);if(!(e&&e.sub&&e.iss&&e.aud&&e.exp))throw Error("Invalid JWT");this.g=t,this.c=e.exp,this.h=e.sub,I(),this.a=e.provider_id||e.firebase&&e.firebase.sign_in_provider||null,this.f=e.firebase&&e.firebase.tenant||null,this.b=!!e.is_anonymous||"anonymous"==this.a}function qi(t){try{return new Fi(t)}catch(t){return null}}function Bi(t){if(!t)return null;if(3!=(t=t.split(".")).length)return null;for(var e=(4-(t=t[1]).length%4)%4,n=0;n<e;n++)t+=".";try{return JSON.parse(Ui(t))}catch(t){}return null}Fi.prototype.S=function(){return this.f},Fi.prototype.i=function(){return this.b},Fi.prototype.toString=function(){return this.g};var Gi="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),Wi=["client_id","response_type","scope","redirect_uri","state"],zi={kd:{Ha:"locale",ta:700,sa:600,ea:"facebook.com",Va:Wi},md:{Ha:null,ta:500,sa:750,ea:"github.com",Va:Wi},nd:{Ha:"hl",ta:515,sa:680,ea:"google.com",Va:Wi},td:{Ha:"lang",ta:485,sa:705,ea:"twitter.com",Va:Gi},gd:{Ha:"locale",ta:640,sa:600,ea:"apple.com",Va:[]}};function Ki(t){for(var e in zi)if(zi[e].ea==t)return zi[e];return null}function Hi(t){var e={};e["facebook.com"]=Qi,e["google.com"]=to,e["github.com"]=Zi,e["twitter.com"]=eo;var n=t&&t[Xi];try{if(n)return e[n]?new e[n](t):new $i(t);if(void 0!==t[Yi])return new Ji(t)}catch(t){}return null}var Yi="idToken",Xi="providerId";function Ji(t){var e=t[Xi];if(!e&&t[Yi]){var n=qi(t[Yi]);n&&n.a&&(e=n.a)}if(!e)throw Error("Invalid additional user info!");"anonymous"!=e&&"custom"!=e||(e=null),n=!1,void 0!==t.isNewUser?n=!!t.isNewUser:"identitytoolkit#SignupNewUserResponse"===t.kind&&(n=!0),Hr(this,"providerId",e),Hr(this,"isNewUser",n)}function $i(t){Ji.call(this,t),Hr(this,"profile",Jr((t=Lr(t.rawUserInfo||"{}"))||{}))}function Qi(t){if($i.call(this,t),"facebook.com"!=this.providerId)throw Error("Invalid provider ID!")}function Zi(t){if($i.call(this,t),"github.com"!=this.providerId)throw Error("Invalid provider ID!");Hr(this,"username",this.profile&&this.profile.login||null)}function to(t){if($i.call(this,t),"google.com"!=this.providerId)throw Error("Invalid provider ID!")}function eo(t){if($i.call(this,t),"twitter.com"!=this.providerId)throw Error("Invalid provider ID!");Hr(this,"username",t.screenName||null)}function no(t){var e=Vn(t),n=Mn(e,"link"),r=Mn(Vn(n),"link");return e=Mn(e,"deep_link_id"),Mn(Vn(e),"link")||e||r||n||t}function ro(t,e){if(!t&&!e)throw new A("internal-error","Internal assert: no raw session string available");if(t&&e)throw new A("internal-error","Internal assert: unable to determine the session type");this.a=t||null,this.b=e||null,this.type=this.a?io:oo}T($i,Ji),T(Qi,$i),T(Zi,$i),T(to,$i),T(eo,$i);var io="enroll",oo="signin";function so(){}function ao(t,e){return t.then((function(t){if(t[Xs]){var n=qi(t[Xs]);if(!n||e!=n.h)throw new A("user-mismatch");return t}throw new A("user-mismatch")})).o((function(t){throw t&&t.code&&t.code==k+"user-not-found"?new A("user-mismatch"):t}))}function uo(t,e){if(!e)throw new A("internal-error","failed to construct a credential");this.a=e,Hr(this,"providerId",t),Hr(this,"signInMethod",t)}function co(t){return{pendingToken:t.a,requestUri:"http://localhost"}}function ho(t){if(t&&t.providerId&&t.signInMethod&&0==t.providerId.indexOf("saml.")&&t.pendingToken)try{return new uo(t.providerId,t.pendingToken)}catch(t){}return null}function fo(t,e,n){if(this.a=null,e.idToken||e.accessToken)e.idToken&&Hr(this,"idToken",e.idToken),e.accessToken&&Hr(this,"accessToken",e.accessToken),e.nonce&&!e.pendingToken&&Hr(this,"nonce",e.nonce),e.pendingToken&&(this.a=e.pendingToken);else{if(!e.oauthToken||!e.oauthTokenSecret)throw new A("internal-error","failed to construct a credential");Hr(this,"accessToken",e.oauthToken),Hr(this,"secret",e.oauthTokenSecret)}Hr(this,"providerId",t),Hr(this,"signInMethod",n)}function lo(t){var e={};return t.idToken&&(e.id_token=t.idToken),t.accessToken&&(e.access_token=t.accessToken),t.secret&&(e.oauth_token_secret=t.secret),e.providerId=t.providerId,t.nonce&&!t.a&&(e.nonce=t.nonce),e={postBody:Jn(e).toString(),requestUri:"http://localhost"},t.a&&(delete e.postBody,e.pendingToken=t.a),e}function po(t){if(t&&t.providerId&&t.signInMethod){var e={idToken:t.oauthIdToken,accessToken:t.oauthTokenSecret?null:t.oauthAccessToken,oauthTokenSecret:t.oauthTokenSecret,oauthToken:t.oauthTokenSecret&&t.oauthAccessToken,nonce:t.nonce,pendingToken:t.pendingToken};try{return new fo(t.providerId,e,t.signInMethod)}catch(t){}}return null}function vo(t,e){this.Oc=e||[],Yr(this,{providerId:t,isOAuthProvider:!0}),this.Fb={},this.lb=(Ki(t)||{}).Ha||null,this.kb=null}function yo(t){if("string"!=typeof t||0!=t.indexOf("saml."))throw new A("argument-error",'SAML provider IDs must be prefixed with "saml."');vo.call(this,t,[])}function go(t){vo.call(this,t,Wi),this.a=[]}function mo(){go.call(this,"facebook.com")}function bo(t){if(!t)throw new A("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return v(t)&&(e=t.accessToken),(new mo).credential({accessToken:e})}function wo(){go.call(this,"github.com")}function Eo(t){if(!t)throw new A("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return v(t)&&(e=t.accessToken),(new wo).credential({accessToken:e})}function _o(){go.call(this,"google.com"),this.Aa("profile")}function Io(t,e){var n=t;return v(t)&&(n=t.idToken,e=t.accessToken),(new _o).credential({idToken:n,accessToken:e})}function To(){vo.call(this,"twitter.com",Gi)}function Ao(t,e){var n=t;if(v(n)||(n={oauthToken:t,oauthTokenSecret:e}),!n.oauthToken||!n.oauthTokenSecret)throw new A("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new fo("twitter.com",n,"twitter.com")}function No(t,e,n){this.a=t,this.f=e,Hr(this,"providerId","password"),Hr(this,"signInMethod",n===ko.EMAIL_LINK_SIGN_IN_METHOD?ko.EMAIL_LINK_SIGN_IN_METHOD:ko.EMAIL_PASSWORD_SIGN_IN_METHOD)}function So(t){return t&&t.email&&t.password?new No(t.email,t.password,t.signInMethod):null}function ko(){Yr(this,{providerId:"password",isOAuthProvider:!1})}function Oo(t,e){if(!(e=Do(e)))throw new A("argument-error","Invalid email link!");return new No(t,e.code,ko.EMAIL_LINK_SIGN_IN_METHOD)}function Do(t){return(t=Ni(t=no(t)))&&t.operation===si?t:null}function Po(t){if(!(t.bb&&t.ab||t.Ja&&t.da))throw new A("internal-error");this.a=t,Hr(this,"providerId","phone"),this.ea="phone",Hr(this,"signInMethod","phone")}function Co(t){if(t&&"phone"===t.providerId&&(t.verificationId&&t.verificationCode||t.temporaryProof&&t.phoneNumber)){var e={};return G(["verificationId","verificationCode","temporaryProof","phoneNumber"],(function(n){t[n]&&(e[n]=t[n])})),new Po(e)}return null}function xo(t){return t.a.Ja&&t.a.da?{temporaryProof:t.a.Ja,phoneNumber:t.a.da}:{sessionInfo:t.a.bb,code:t.a.ab}}function Ro(t){try{this.a=t||r.a.auth()}catch(t){throw new A("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().")}Yr(this,{providerId:"phone",isOAuthProvider:!1})}function Lo(t,e){if(!t)throw new A("missing-verification-id");if(!e)throw new A("missing-verification-code");return new Po({bb:t,ab:e})}function jo(t){if(t.temporaryProof&&t.phoneNumber)return new Po({Ja:t.temporaryProof,da:t.phoneNumber});var e=t&&t.providerId;if(!e||"password"===e)return null;var n=t&&t.oauthAccessToken,r=t&&t.oauthTokenSecret,i=t&&t.nonce,o=t&&t.oauthIdToken,s=t&&t.pendingToken;try{switch(e){case"google.com":return Io(o,n);case"facebook.com":return bo(n);case"github.com":return Eo(n);case"twitter.com":return Ao(n,r);default:return n||r||o||s?s?0==e.indexOf("saml.")?new uo(e,s):new fo(e,{pendingToken:s,idToken:t.oauthIdToken,accessToken:t.oauthAccessToken},e):new go(e).credential({idToken:o,accessToken:n,rawNonce:i}):null}}catch(t){return null}}function Mo(t){if(!t.isOAuthProvider)throw new A("invalid-oauth-provider")}function Vo(t,e,n,r,i,o,s){if(this.c=t,this.b=e||null,this.g=n||null,this.f=r||null,this.i=o||null,this.h=s||null,this.a=i||null,!this.g&&!this.a)throw new A("invalid-auth-event");if(this.g&&this.a)throw new A("invalid-auth-event");if(this.g&&!this.f)throw new A("invalid-auth-event")}function Uo(t){return(t=t||{}).type?new Vo(t.type,t.eventId,t.urlResponse,t.sessionId,t.error&&N(t.error),t.postBody,t.tenantId):null}function Fo(){this.b=null,this.a=[]}ro.prototype.Fa=function(){return this.a?Se(this.a):Se(this.b)},ro.prototype.v=function(){return this.type==io?{multiFactorSession:{idToken:this.a}}:{multiFactorSession:{pendingCredential:this.b}}},so.prototype.ia=function(){},so.prototype.b=function(){},so.prototype.c=function(){},so.prototype.v=function(){},uo.prototype.ia=function(t){return va(t,co(this))},uo.prototype.b=function(t,e){var n=co(this);return n.idToken=e,ya(t,n)},uo.prototype.c=function(t,e){return ao(ga(t,co(this)),e)},uo.prototype.v=function(){return{providerId:this.providerId,signInMethod:this.signInMethod,pendingToken:this.a}},fo.prototype.ia=function(t){return va(t,lo(this))},fo.prototype.b=function(t,e){var n=lo(this);return n.idToken=e,ya(t,n)},fo.prototype.c=function(t,e){return ao(ga(t,lo(this)),e)},fo.prototype.v=function(){var t={providerId:this.providerId,signInMethod:this.signInMethod};return this.idToken&&(t.oauthIdToken=this.idToken),this.accessToken&&(t.oauthAccessToken=this.accessToken),this.secret&&(t.oauthTokenSecret=this.secret),this.nonce&&(t.nonce=this.nonce),this.a&&(t.pendingToken=this.a),t},vo.prototype.Ia=function(t){return this.Fb=dt(t),this},T(yo,vo),T(go,vo),go.prototype.Aa=function(t){return H(this.a,t)||this.a.push(t),this},go.prototype.Nb=function(){return $(this.a)},go.prototype.credential=function(t,e){var n;if(!(n=v(t)?{idToken:t.idToken||null,accessToken:t.accessToken||null,nonce:t.rawNonce||null}:{idToken:t||null,accessToken:e||null}).idToken&&!n.accessToken)throw new A("argument-error","credential failed: must provide the ID token and/or the access token.");return new fo(this.providerId,n,this.providerId)},T(mo,go),Hr(mo,"PROVIDER_ID","facebook.com"),Hr(mo,"FACEBOOK_SIGN_IN_METHOD","facebook.com"),T(wo,go),Hr(wo,"PROVIDER_ID","github.com"),Hr(wo,"GITHUB_SIGN_IN_METHOD","github.com"),T(_o,go),Hr(_o,"PROVIDER_ID","google.com"),Hr(_o,"GOOGLE_SIGN_IN_METHOD","google.com"),T(To,vo),Hr(To,"PROVIDER_ID","twitter.com"),Hr(To,"TWITTER_SIGN_IN_METHOD","twitter.com"),No.prototype.ia=function(t){return this.signInMethod==ko.EMAIL_LINK_SIGN_IN_METHOD?Qa(t,Aa,{email:this.a,oobCode:this.f}):Qa(t,Ha,{email:this.a,password:this.f})},No.prototype.b=function(t,e){return this.signInMethod==ko.EMAIL_LINK_SIGN_IN_METHOD?Qa(t,Na,{idToken:e,email:this.a,oobCode:this.f}):Qa(t,Ua,{idToken:e,email:this.a,password:this.f})},No.prototype.c=function(t,e){return ao(this.ia(t),e)},No.prototype.v=function(){return{email:this.a,password:this.f,signInMethod:this.signInMethod}},Yr(ko,{PROVIDER_ID:"password"}),Yr(ko,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"}),Yr(ko,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"}),Po.prototype.ia=function(t){return t.cb(xo(this))},Po.prototype.b=function(t,e){var n=xo(this);return n.idToken=e,Qa(t,Xa,n)},Po.prototype.c=function(t,e){var n=xo(this);return n.operation="REAUTH",ao(t=Qa(t,Ja,n),e)},Po.prototype.v=function(){var t={providerId:"phone"};return this.a.bb&&(t.verificationId=this.a.bb),this.a.ab&&(t.verificationCode=this.a.ab),this.a.Ja&&(t.temporaryProof=this.a.Ja),this.a.da&&(t.phoneNumber=this.a.da),t},Ro.prototype.cb=function(t,e){var n=this.a.b;return Se(e.verify()).then((function(r){if("string"!=typeof r)throw new A("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(e.type){case"recaptcha":var i=v(t)?t.session:null,o=v(t)?t.phoneNumber:t;return(i&&i.type==io?i.Fa().then((function(t){return function(t,e){return Qa(t,qa,e).then((function(t){return t.phoneSessionInfo.sessionInfo}))}(n,{idToken:t,phoneEnrollmentInfo:{phoneNumber:o,recaptchaToken:r}})})):i&&i.type==oo?i.Fa().then((function(e){return function(t,e){return Qa(t,Ba,e).then((function(t){return t.phoneResponseInfo.sessionInfo}))}(n,{mfaPendingCredential:e,mfaEnrollmentId:t.multiFactorHint&&t.multiFactorHint.uid||t.multiFactorUid,phoneSignInInfo:{recaptchaToken:r}})})):function(t,e){return Qa(t,Ma,e)}(n,{phoneNumber:o,recaptchaToken:r})).then((function(t){return"function"==typeof e.reset&&e.reset(),t}),(function(t){throw"function"==typeof e.reset&&e.reset(),t}));default:throw new A("argument-error",'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.')}}))},Yr(Ro,{PROVIDER_ID:"phone"}),Yr(Ro,{PHONE_SIGN_IN_METHOD:"phone"}),Vo.prototype.getUid=function(){var t=[];return t.push(this.c),this.b&&t.push(this.b),this.f&&t.push(this.f),this.h&&t.push(this.h),t.join("-")},Vo.prototype.S=function(){return this.h},Vo.prototype.v=function(){return{type:this.c,eventId:this.b,urlResponse:this.g,sessionId:this.f,postBody:this.i,tenantId:this.h,error:this.a&&this.a.v()}};var qo,Bo=null;function Go(t){var e="unauthorized-domain",n=void 0,r=Vn(t);t=r.b,"chrome-extension"==(r=r.f)?n=qt("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):"http"==r||"https"==r?n=qt("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):e="operation-not-supported-in-this-environment",A.call(this,e,n)}function Wo(t,e,n){A.call(this,t,n),(t=e||{}).Gb&&Hr(this,"email",t.Gb),t.da&&Hr(this,"phoneNumber",t.da),t.credential&&Hr(this,"credential",t.credential),t.Wb&&Hr(this,"tenantId",t.Wb)}function zo(t){if(t.code){var e=t.code||"";0==e.indexOf(k)&&(e=e.substring(k.length));var n={credential:jo(t),Wb:t.tenantId};if(t.email)n.Gb=t.email;else if(t.phoneNumber)n.da=t.phoneNumber;else if(!n.credential)return new A(e,t.message||void 0);return new Wo(e,n,t.message)}return null}function Ko(){}function Ho(t){return t.c||(t.c=t.b())}function Yo(){}function Xo(t){if(!t.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var e=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],n=0;n<e.length;n++){var r=e[n];try{return new ActiveXObject(r),t.f=r}catch(t){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed")}return t.f}function Jo(){}function $o(){this.a=new XDomainRequest,this.readyState=0,this.onreadystatechange=null,this.responseType=this.responseText=this.response="",this.status=-1,this.statusText="",this.a.onload=E(this.oc,this),this.a.onerror=E(this.Pb,this),this.a.onprogress=E(this.pc,this),this.a.ontimeout=E(this.tc,this)}function Qo(t,e){t.readyState=e,t.onreadystatechange&&t.onreadystatechange()}function Zo(t,e,n){this.reset(t,e,n,void 0,void 0)}T(Go,A),T(Wo,A),Wo.prototype.v=function(){var t={code:this.code,message:this.message};this.email&&(t.email=this.email),this.phoneNumber&&(t.phoneNumber=this.phoneNumber),this.tenantId&&(t.tenantId=this.tenantId);var e=this.credential&&this.credential.v();return e&&yt(t,e),t},Wo.prototype.toJSON=function(){return this.v()},Ko.prototype.c=null,T(Yo,Ko),Yo.prototype.a=function(){var t=Xo(this);return t?new ActiveXObject(t):new XMLHttpRequest},Yo.prototype.b=function(){var t={};return Xo(this)&&(t[0]=!0,t[1]=!0),t},qo=new Yo,T(Jo,Ko),Jo.prototype.a=function(){var t=new XMLHttpRequest;if("withCredentials"in t)return t;if("undefined"!=typeof XDomainRequest)return new $o;throw Error("Unsupported browser")},Jo.prototype.b=function(){return{}},(e=$o.prototype).open=function(t,e,n){if(null!=n&&!n)throw Error("Only async requests are supported.");this.a.open(t,e)},e.send=function(t){if(t){if("string"!=typeof t)throw Error("Only string data is supported");this.a.send(t)}else this.a.send()},e.abort=function(){this.a.abort()},e.setRequestHeader=function(){},e.getResponseHeader=function(t){return"content-type"==t.toLowerCase()?this.a.contentType:""},e.oc=function(){this.status=200,this.response=this.responseText=this.a.responseText,Qo(this,4)},e.Pb=function(){this.status=500,this.response=this.responseText="",Qo(this,4)},e.tc=function(){this.Pb()},e.pc=function(){this.status=200,Qo(this,1)},e.getAllResponseHeaders=function(){return"content-type: "+this.a.contentType},Zo.prototype.a=null;function ts(t){this.f=t,this.b=this.c=this.a=null}function es(t,e){this.name=t,this.value=e}Zo.prototype.reset=function(t,e,n,r,i){"number"==typeof i||0,r||I(),delete this.a},es.prototype.toString=function(){return this.name};var ns=new es("SEVERE",1e3),rs=new es("WARNING",900),is=new es("CONFIG",700),os=new es("FINE",500);ts.prototype.log=function(t,e,n){if(t.value>=function t(e){return e.c?e.c:e.a?t(e.a):(L("Root logger has no level set."),null)}(this).value)for(d(e)&&(e=e()),t=new Zo(t,String(e),this.f),n&&(t.a=n),n=this;n;)n=n.a};var ss={},as=null;function us(t){var e;if(as||(as=new ts(""),ss[""]=as,as.c=is),!(e=ss[t])){e=new ts(t);var n=t.lastIndexOf("."),r=t.substr(n+1);(n=us(t.substr(0,n))).b||(n.b={}),n.b[r]=e,e.a=n,ss[t]=e}return e}function cs(t,e){t&&t.log(os,e,void 0)}function hs(t){this.f=t}function fs(t){wn.call(this),this.s=t,this.readyState=ls,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.i=new Headers,this.b=null,this.m="GET",this.g="",this.a=!1,this.h=us("goog.net.FetchXmlHttp"),this.l=this.c=this.f=null}T(hs,Ko),hs.prototype.a=function(){return new fs(this.f)},hs.prototype.b=function(t){return function(){return t}}({}),T(fs,wn);var ls=0;function ps(t){t.c.read().then(t.nc.bind(t)).catch(t.Sa.bind(t))}function ds(t,e){e&&t.f&&(t.status=t.f.status,t.statusText=t.f.statusText),t.readyState=4,t.f=null,t.c=null,t.l=null,vs(t)}function vs(t){t.onreadystatechange&&t.onreadystatechange.call(t)}function ys(t){wn.call(this),this.headers=new kn,this.D=t||null,this.c=!1,this.B=this.a=null,this.h=this.P=this.l="",this.f=this.O=this.i=this.N=!1,this.g=0,this.s=null,this.m=gs,this.w=this.R=!1}(e=fs.prototype).open=function(t,e){if(this.readyState!=ls)throw this.abort(),Error("Error reopening a connection");this.m=t,this.g=e,this.readyState=1,vs(this)},e.send=function(t){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var e={headers:this.i,method:this.m,credentials:void 0,cache:void 0};t&&(e.body=t),this.s.fetch(new Request(this.g,e)).then(this.sc.bind(this),this.Sa.bind(this))},e.abort=function(){this.response=this.responseText="",this.i=new Headers,this.status=0,this.c&&this.c.cancel("Request was aborted."),1<=this.readyState&&this.a&&4!=this.readyState&&(this.a=!1,ds(this,!1)),this.readyState=ls},e.sc=function(t){this.a&&(this.f=t,this.b||(this.b=t.headers,this.readyState=2,vs(this)),this.a&&(this.readyState=3,vs(this),this.a&&("arraybuffer"===this.responseType?t.arrayBuffer().then(this.qc.bind(this),this.Sa.bind(this)):void 0!==u.ReadableStream&&"body"in t?(this.response=this.responseText="",this.c=t.body.getReader(),this.l=new TextDecoder,ps(this)):t.text().then(this.rc.bind(this),this.Sa.bind(this)))))},e.nc=function(t){if(this.a){var e=this.l.decode(t.value?t.value:new Uint8Array(0),{stream:!t.done});e&&(this.response=this.responseText+=e),t.done?ds(this,!0):vs(this),3==this.readyState&&ps(this)}},e.rc=function(t){this.a&&(this.response=this.responseText=t,ds(this,!0))},e.qc=function(t){this.a&&(this.response=t,ds(this,!0))},e.Sa=function(t){var e=this.h;e&&e.log(rs,"Failed to fetch url "+this.g,t instanceof Error?t:Error(t)),this.a&&ds(this,!0)},e.setRequestHeader=function(t,e){this.i.append(t,e)},e.getResponseHeader=function(t){return this.b?this.b.get(t.toLowerCase())||"":((t=this.h)&&t.log(rs,"Attempting to get response header but no headers have been received for url: "+this.g,void 0),"")},e.getAllResponseHeaders=function(){if(!this.b){var t=this.h;return t&&t.log(rs,"Attempting to get all response headers but no headers have been received for url: "+this.g,void 0),""}t=[];for(var e=this.b.entries(),n=e.next();!n.done;)n=n.value,t.push(n[0]+": "+n[1]),n=e.next();return t.join("\r\n")},T(ys,wn);var gs="";ys.prototype.b=us("goog.net.XhrIo");var ms=/^https?$/i,bs=["POST","PUT"];function ws(t,e,n,r,i){if(t.a)throw Error("[goog.net.XhrIo] Object is active with another request="+t.l+"; newUri="+e);n=n?n.toUpperCase():"GET",t.l=e,t.h="",t.P=n,t.N=!1,t.c=!0,t.a=t.D?t.D.a():qo.a(),t.B=t.D?Ho(t.D):Ho(qo),t.a.onreadystatechange=E(t.Sb,t);try{cs(t.b,Os(t,"Opening Xhr")),t.O=!0,t.a.open(n,String(e),!0),t.O=!1}catch(e){return cs(t.b,Os(t,"Error opening Xhr: "+e.message)),void _s(t,e)}e=r||"";var o=new kn(t.headers);i&&function(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(p(t)||"string"==typeof t)G(t,e,void 0);else for(var n=Sn(t),r=Nn(t),i=r.length,o=0;o<i;o++)e.call(void 0,r[o],n&&n[o],t)}(i,(function(t,e){o.set(e,t)})),i=function(t){t:{for(var e=Es,n=t.length,r="string"==typeof t?t.split(""):t,i=0;i<n;i++)if(i in r&&e.call(void 0,r[i],i,t)){e=i;break t}e=-1}return 0>e?null:"string"==typeof t?t.charAt(e):t[e]}(o.X()),r=u.FormData&&e instanceof u.FormData,!H(bs,n)||i||r||o.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),o.forEach((function(t,e){this.a.setRequestHeader(e,t)}),t),t.m&&(t.a.responseType=t.m),"withCredentials"in t.a&&t.a.withCredentials!==t.R&&(t.a.withCredentials=t.R);try{Ns(t),0<t.g&&(t.w=function(t){return Ht&&ie(9)&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(t.a),cs(t.b,Os(t,"Will abort after "+t.g+"ms if incomplete, xhr2 "+t.w)),t.w?(t.a.timeout=t.g,t.a.ontimeout=E(t.Ka,t)):t.s=Tn(t.Ka,t.g,t)),cs(t.b,Os(t,"Sending request")),t.i=!0,t.a.send(e),t.i=!1}catch(e){cs(t.b,Os(t,"Send error: "+e.message)),_s(t,e)}}function Es(t){return"content-type"==t.toLowerCase()}function _s(t,e){t.c=!1,t.a&&(t.f=!0,t.a.abort(),t.f=!1),t.h=e,Is(t),As(t)}function Is(t){t.N||(t.N=!0,t.dispatchEvent("complete"),t.dispatchEvent("error"))}function Ts(t){if(t.c&&void 0!==a)if(t.B[1]&&4==Ss(t)&&2==ks(t))cs(t.b,Os(t,"Local request error detected and ignored"));else if(t.i&&4==Ss(t))Tn(t.Sb,0,t);else if(t.dispatchEvent("readystatechange"),4==Ss(t)){cs(t.b,Os(t,"Request complete")),t.c=!1;try{var e,n=ks(t);t:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var r=!0;break t;default:r=!1}if(!(e=r)){var i;if(i=0===n){var o=String(t.l).match(Pn)[1]||null;if(!o&&u.self&&u.self.location){var s=u.self.location.protocol;o=s.substr(0,s.length-1)}i=!ms.test(o?o.toLowerCase():"")}e=i}if(e)t.dispatchEvent("complete"),t.dispatchEvent("success");else{try{var c=2<Ss(t)?t.a.statusText:""}catch(e){cs(t.b,"Can not get status: "+e.message),c=""}t.h=c+" ["+ks(t)+"]",Is(t)}}finally{As(t)}}}function As(t,e){if(t.a){Ns(t);var n=t.a,r=t.B[0]?f:null;t.a=null,t.B=null,e||t.dispatchEvent("ready");try{n.onreadystatechange=r}catch(e){(t=t.b)&&t.log(ns,"Problem encountered resetting onreadystatechange: "+e.message,void 0)}}}function Ns(t){t.a&&t.w&&(t.a.ontimeout=null),t.s&&(u.clearTimeout(t.s),t.s=null)}function Ss(t){return t.a?t.a.readyState:0}function ks(t){try{return 2<Ss(t)?t.a.status:-1}catch(t){return-1}}function Os(t,e){return e+" ["+t.P+" "+t.l+" "+ks(t)+"]"}function Ds(t){var e=qs;this.g=[],this.w=e,this.s=t||null,this.f=this.a=!1,this.c=void 0,this.u=this.B=this.i=!1,this.h=0,this.b=null,this.l=0}function Ps(t,e,n){t.a=!0,t.c=n,t.f=!e,Ls(t)}function Cs(t){if(t.a){if(!t.u)throw new js(t);t.u=!1}}function xs(t,e,n,r){t.g.push([e,n,r]),t.a&&Ls(t)}function Rs(t){return K(t.g,(function(t){return d(t[1])}))}function Ls(t){if(t.h&&t.a&&Rs(t)){var e=t.h,n=Us[e];n&&(u.clearTimeout(n.a),delete Us[e]),t.h=0}t.b&&(t.b.l--,delete t.b),e=t.c;for(var r=n=!1;t.g.length&&!t.i;){var i=t.g.shift(),o=i[0],s=i[1];if(i=i[2],o=t.f?s:o)try{var a=o.call(i||t.s,e);void 0!==a&&(t.f=t.f&&(a==e||a instanceof Error),t.c=e=a),(C(e)||"function"==typeof u.Promise&&e instanceof u.Promise)&&(r=!0,t.i=!0)}catch(r){e=r,t.f=!0,Rs(t)||(n=!0)}}t.c=e,r&&(a=E(t.m,t,!0),r=E(t.m,t,!1),e instanceof Ds?(xs(e,a,r),e.B=!0):e.then(a,r)),n&&(e=new Vs(e),Us[e.a]=e,t.h=e.a)}function js(){x.call(this)}function Ms(){x.call(this)}function Vs(t){this.a=u.setTimeout(E(this.c,this),0),this.b=t}(e=ys.prototype).Ka=function(){void 0!==a&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",cs(this.b,Os(this,this.h)),this.dispatchEvent("timeout"),this.abort(8))},e.abort=function(){this.a&&this.c&&(cs(this.b,Os(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),As(this))},e.Ba=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),As(this,!0)),ys.Za.Ba.call(this)},e.Sb=function(){this.wa||(this.O||this.i||this.f?Ts(this):this.Hc())},e.Hc=function(){Ts(this)},e.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.m){case gs:case"text":return this.a.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var t=this.b;return t&&t.log(ns,"Response type "+this.m+" is not supported on this browser",void 0),null}catch(t){return cs(this.b,"Can not get response: "+t.message),null}},Ds.prototype.cancel=function(t){if(this.a)this.c instanceof Ds&&this.c.cancel();else{if(this.b){var e=this.b;delete this.b,t?e.cancel(t):(e.l--,0>=e.l&&e.cancel())}this.w?this.w.call(this.s,this):this.u=!0,this.a||(t=new Ms(this),Cs(this),Ps(this,!1,t))}},Ds.prototype.m=function(t,e){this.i=!1,Ps(this,t,e)},Ds.prototype.then=function(t,e,n){var r,i,o=new we((function(t,e){r=t,i=e}));return xs(this,r,(function(t){t instanceof Ms?o.cancel():i(t)})),o.then(t,e,n)},Ds.prototype.$goog_Thenable=!0,T(js,x),js.prototype.message="Deferred has already fired",js.prototype.name="AlreadyCalledError",T(Ms,x),Ms.prototype.message="Deferred was canceled",Ms.prototype.name="CanceledError",Vs.prototype.c=function(){throw delete Us[this.a],this.b};var Us={};function Fs(t){var e={},n=e.document||document,r=Tt(t).toString(),i=le(document,"SCRIPT"),o={Tb:i,Ka:void 0},s=new Ds(o),a=null,f=null!=e.timeout?e.timeout:5e3;return 0<f&&(a=window.setTimeout((function(){Bs(i,!0);var t=new zs(Ws,"Timeout reached for loading script "+r);Cs(s),Ps(s,!1,t)}),f),o.Ka=a),i.onload=i.onreadystatechange=function(){i.readyState&&"loaded"!=i.readyState&&"complete"!=i.readyState||(Bs(i,e.ud||!1,a),Cs(s),Ps(s,!0,null))},i.onerror=function(){Bs(i,!0,a);var t=new zs(Gs,"Error while loading script "+r);Cs(s),Ps(s,!1,t)},yt(o=e.attributes||{},{type:"text/javascript",charset:"UTF-8"}),ae(i,o),function(t,e){gt(t,"HTMLScriptElement"),t.src=Tt(e),null===h&&(h=(e=(e=u.document).querySelector&&e.querySelector("script[nonce]"))&&(e=e.nonce||e.getAttribute("nonce"))&&c.test(e)?e:""),(e=h)&&t.setAttribute("nonce",e)}(i,t),function(t){var e;return(e=(t||document).getElementsByTagName("HEAD"))&&0!=e.length?e[0]:t.documentElement}(n).appendChild(i),s}function qs(){if(this&&this.Tb){var t=this.Tb;t&&"SCRIPT"==t.tagName&&Bs(t,!0,this.Ka)}}function Bs(t,e,n){null!=n&&u.clearTimeout(n),t.onload=f,t.onerror=f,t.onreadystatechange=f,e&&window.setTimeout((function(){t&&t.parentNode&&t.parentNode.removeChild(t)}),0)}var Gs=0,Ws=1;function zs(t,e){var n="Jsloader error (code #"+t+")";e&&(n+=": "+e),x.call(this,n),this.code=t}function Ks(t){this.f=t}function Hs(t,e,n){if(this.c=t,t=e||{},this.u=t.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token",this.m=t.secureTokenTimeout||Js,this.g=dt(t.secureTokenHeaders||$s),this.h=t.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",this.l=t.identityPlatformEndpoint||"https://identitytoolkit.googleapis.com/v2/",this.i=t.firebaseTimeout||Qs,this.a=dt(t.firebaseHeaders||Zs),n&&(this.a["X-Client-Version"]=n,this.g["X-Client-Version"]=n),n="Node"==br(),!(n=u.XMLHttpRequest||n&&r.a.INTERNAL.node&&r.a.INTERNAL.node.XMLHttpRequest)&&!mr())throw new A("internal-error","The XMLHttpRequest compatibility library was not found.");this.f=void 0,mr()?this.f=new hs(self):wr()?this.f=new Ks(n):this.f=new Jo,this.b=null}T(zs,x),T(Ks,Ko),Ks.prototype.a=function(){return new this.f},Ks.prototype.b=function(){return{}};var Ys,Xs="idToken",Js=new Ur(3e4,6e4),$s={"Content-Type":"application/x-www-form-urlencoded"},Qs=new Ur(3e4,6e4),Zs={"Content-Type":"application/json"};function ta(t,e){e?t.a["X-Firebase-Locale"]=e:delete t.a["X-Firebase-Locale"]}function ea(t,e){e?(t.a["X-Client-Version"]=e,t.g["X-Client-Version"]=e):(delete t.a["X-Client-Version"],delete t.g["X-Client-Version"])}function na(t,e,n,r,i,o,s){(function(){var t=Nr();return!((t=Ir(t)!=_r?null:(t=t.match(/\sChrome\/(\d+)/i))&&2==t.length?parseInt(t[1],10):null)&&30>t)&&(!Ht||!ne||9<ne)})()||mr()?t=E(t.w,t):(Ys||(Ys=new we((function(t,e){!function(t,e){if(((window.gapi||{}).client||{}).request)t();else{u[ia]=function(){((window.gapi||{}).client||{}).request?t():e(Error("CORS_UNSUPPORTED"))},function(t,e){xs(t,null,e,void 0)}(Fs(At(ra,{onload:ia})),(function(){e(Error("CORS_UNSUPPORTED"))}))}}(t,e)}))),t=E(t.s,t)),t(e,n,r,i,o,s)}Hs.prototype.S=function(){return this.b},Hs.prototype.w=function(t,e,n,r,i,o){if(mr()&&(void 0===u.fetch||void 0===u.Headers||void 0===u.Request))throw new A("operation-not-supported-in-this-environment","fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");var s=new ys(this.f);if(o){s.g=Math.max(0,o);var a=setTimeout((function(){s.dispatchEvent("timeout")}),o)}En(s,"complete",(function(){a&&clearTimeout(a);var t=null;try{t=JSON.parse(function(t){try{return t.a?t.a.responseText:""}catch(e){return cs(t.b,"Can not get responseText: "+e.message),""}}(this))||null}catch(e){t=null}e&&e(t)})),_n(s,"ready",(function(){a&&clearTimeout(a),We(this)})),_n(s,"timeout",(function(){a&&clearTimeout(a),We(this),e&&e(null)})),ws(s,t,n,r,i)};var ra=new mt(Et,"https://apis.google.com/js/client.js?onload=%{onload}"),ia="__fcb"+Math.floor(1e6*Math.random()).toString();function oa(t,e,n,r,i,o,s){var a=Vn(e+n);jn(a,"key",t.c),s&&jn(a,"cb",I().toString());var u="GET"==r;if(u)for(var c in i)i.hasOwnProperty(c)&&jn(a,c,i[c]);return new we((function(e,n){na(t,a.toString(),(function(t){t?t.error?n(tu(t,o||{})):e(t):n(new A("network-request-failed"))}),r,u?void 0:nr(Rr(i)),t.a,t.i.get())}))}function sa(t){if("string"!=typeof(t=t.email)||!dr.test(t))throw new A("invalid-email")}function aa(t){"email"in t&&sa(t)}function ua(t){if(!t[Xs]){if(t.mfaPendingCredential)throw new A("multi-factor-auth-required",null,dt(t));throw new A("internal-error")}}function ca(t){if(t.phoneNumber||t.temporaryProof){if(!t.phoneNumber||!t.temporaryProof)throw new A("internal-error")}else{if(!t.sessionInfo)throw new A("missing-verification-id");if(!t.code)throw new A("missing-verification-code")}}Hs.prototype.s=function(t,e,n,r,i){var o=this;Ys.then((function(){window.gapi.client.setApiKey(o.c);var s=window.gapi.auth.getToken();window.gapi.auth.setToken(null),window.gapi.client.request({path:t,method:n,body:r,headers:i,authType:"none",callback:function(t){window.gapi.auth.setToken(s),e&&e(t)}})})).o((function(t){e&&e({error:{message:t&&t.message||"CORS_UNSUPPORTED"}})}))},Hs.prototype.vb=function(){return Qa(this,Fa,{})},Hs.prototype.xb=function(t,e){return Qa(this,Va,{idToken:t,email:e})},Hs.prototype.yb=function(t,e){return Qa(this,Ua,{idToken:t,password:e})};var ha={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};function fa(t){if(!t.phoneVerificationInfo)throw new A("internal-error");if(!t.phoneVerificationInfo.sessionInfo)throw new A("missing-verification-id");if(!t.phoneVerificationInfo.code)throw new A("missing-verification-code")}function la(t){if(!t.requestUri||!t.sessionId&&!t.postBody&&!t.pendingToken)throw new A("internal-error")}function pa(t,e){return e.oauthIdToken&&e.providerId&&0==e.providerId.indexOf("oidc.")&&!e.pendingToken&&(t.sessionId?e.nonce=t.sessionId:t.postBody&&(Qn(t=new Yn(t.postBody),"nonce")&&(e.nonce=t.get("nonce")))),e}function da(t){var e=null;if(t.needConfirmation?(t.code="account-exists-with-different-credential",e=zo(t)):"FEDERATED_USER_ID_ALREADY_LINKED"==t.errorMessage?(t.code="credential-already-in-use",e=zo(t)):"EMAIL_EXISTS"==t.errorMessage?(t.code="email-already-in-use",e=zo(t)):t.errorMessage&&(e=Za(t.errorMessage)),e)throw e;ua(t)}function va(t,e){return e.returnIdpCredential=!0,Qa(t,Ga,e)}function ya(t,e){return e.returnIdpCredential=!0,Qa(t,za,e)}function ga(t,e){return e.returnIdpCredential=!0,e.autoCreate=!1,Qa(t,Wa,e)}function ma(t){if(!t.oobCode)throw new A("invalid-action-code")}(e=Hs.prototype).zb=function(t,e){var n={idToken:t},r=[];return lt(ha,(function(t,i){var o=e[i];null===o?r.push(t):i in e&&(n[i]=o)})),r.length&&(n.deleteAttribute=r),Qa(this,Va,n)},e.rb=function(t,e){return yt(t={requestType:"PASSWORD_RESET",email:t},e),Qa(this,xa,t)},e.sb=function(t,e){return yt(t={requestType:"EMAIL_SIGNIN",email:t},e),Qa(this,Da,t)},e.qb=function(t,e){return yt(t={requestType:"VERIFY_EMAIL",idToken:t},e),Qa(this,Pa,t)},e.Ab=function(t,e,n){return yt(t={requestType:"VERIFY_AND_CHANGE_EMAIL",idToken:t,newEmail:e},n),Qa(this,Ca,t)},e.cb=function(t){return Qa(this,Ya,t)},e.jb=function(t,e){return Qa(this,ja,{oobCode:t,newPassword:e})},e.Pa=function(t){return Qa(this,wa,{oobCode:t})},e.fb=function(t){return Qa(this,ba,{oobCode:t})};var ba={endpoint:"setAccountInfo",A:ma,Y:"email",C:!0},wa={endpoint:"resetPassword",A:ma,G:function(t){var e=t.requestType;if(!e||!t.email&&"EMAIL_SIGNIN"!=e&&"VERIFY_AND_CHANGE_EMAIL"!=e)throw new A("internal-error")},C:!0},Ea={endpoint:"signupNewUser",A:function(t){if(sa(t),!t.password)throw new A("weak-password")},G:ua,U:!0,C:!0},_a={endpoint:"createAuthUri",C:!0},Ia={endpoint:"deleteAccount",M:["idToken"]},Ta={endpoint:"setAccountInfo",M:["idToken","deleteProvider"],A:function(t){if("array"!=l(t.deleteProvider))throw new A("internal-error")}},Aa={endpoint:"emailLinkSignin",M:["email","oobCode"],A:sa,G:ua,U:!0,C:!0},Na={endpoint:"emailLinkSignin",M:["idToken","email","oobCode"],A:sa,G:ua,U:!0},Sa={endpoint:"accounts/mfaEnrollment:finalize",M:["idToken","phoneVerificationInfo"],A:fa,G:ua,C:!0,La:!0},ka={endpoint:"accounts/mfaSignIn:finalize",M:["mfaPendingCredential","phoneVerificationInfo"],A:fa,G:ua,C:!0,La:!0},Oa={endpoint:"getAccountInfo"},Da={endpoint:"getOobConfirmationCode",M:["requestType"],A:function(t){if("EMAIL_SIGNIN"!=t.requestType)throw new A("internal-error");sa(t)},Y:"email",C:!0},Pa={endpoint:"getOobConfirmationCode",M:["idToken","requestType"],A:function(t){if("VERIFY_EMAIL"!=t.requestType)throw new A("internal-error")},Y:"email",C:!0},Ca={endpoint:"getOobConfirmationCode",M:["idToken","newEmail","requestType"],A:function(t){if("VERIFY_AND_CHANGE_EMAIL"!=t.requestType)throw new A("internal-error")},Y:"email",C:!0},xa={endpoint:"getOobConfirmationCode",M:["requestType"],A:function(t){if("PASSWORD_RESET"!=t.requestType)throw new A("internal-error");sa(t)},Y:"email",C:!0},Ra={hb:!0,endpoint:"getProjectConfig",Rb:"GET"},La={hb:!0,endpoint:"getRecaptchaParam",Rb:"GET",G:function(t){if(!t.recaptchaSiteKey)throw new A("internal-error")}},ja={endpoint:"resetPassword",A:ma,Y:"email",C:!0},Ma={endpoint:"sendVerificationCode",M:["phoneNumber","recaptchaToken"],Y:"sessionInfo",C:!0},Va={endpoint:"setAccountInfo",M:["idToken"],A:aa,U:!0},Ua={endpoint:"setAccountInfo",M:["idToken"],A:function(t){if(aa(t),!t.password)throw new A("weak-password")},G:ua,U:!0},Fa={endpoint:"signupNewUser",G:ua,U:!0,C:!0},qa={endpoint:"accounts/mfaEnrollment:start",M:["idToken","phoneEnrollmentInfo"],A:function(t){if(!t.phoneEnrollmentInfo)throw new A("internal-error");if(!t.phoneEnrollmentInfo.phoneNumber)throw new A("missing-phone-number");if(!t.phoneEnrollmentInfo.recaptchaToken)throw new A("missing-app-credential")},G:function(t){if(!t.phoneSessionInfo||!t.phoneSessionInfo.sessionInfo)throw new A("internal-error")},C:!0,La:!0},Ba={endpoint:"accounts/mfaSignIn:start",M:["mfaPendingCredential","mfaEnrollmentId","phoneSignInInfo"],A:function(t){if(!t.phoneSignInInfo||!t.phoneSignInInfo.recaptchaToken)throw new A("missing-app-credential")},G:function(t){if(!t.phoneResponseInfo||!t.phoneResponseInfo.sessionInfo)throw new A("internal-error")},C:!0,La:!0},Ga={endpoint:"verifyAssertion",A:la,Wa:pa,G:da,U:!0,C:!0},Wa={endpoint:"verifyAssertion",A:la,Wa:pa,G:function(t){if(t.errorMessage&&"USER_NOT_FOUND"==t.errorMessage)throw new A("user-not-found");if(t.errorMessage)throw Za(t.errorMessage);ua(t)},U:!0,C:!0},za={endpoint:"verifyAssertion",A:function(t){if(la(t),!t.idToken)throw new A("internal-error")},Wa:pa,G:da,U:!0},Ka={endpoint:"verifyCustomToken",A:function(t){if(!t.token)throw new A("invalid-custom-token")},G:ua,U:!0,C:!0},Ha={endpoint:"verifyPassword",A:function(t){if(sa(t),!t.password)throw new A("wrong-password")},G:ua,U:!0,C:!0},Ya={endpoint:"verifyPhoneNumber",A:ca,G:ua,C:!0},Xa={endpoint:"verifyPhoneNumber",A:function(t){if(!t.idToken)throw new A("internal-error");ca(t)},G:function(t){if(t.temporaryProof)throw t.code="credential-already-in-use",zo(t);ua(t)}},Ja={Eb:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",A:ca,G:ua,C:!0},$a={endpoint:"accounts/mfaEnrollment:withdraw",M:["idToken","mfaEnrollmentId"],G:function(t){if(!!t[Xs]^!!t.refreshToken)throw new A("internal-error")},C:!0,La:!0};function Qa(t,e,n){if(!function(t,e){if(!e||!e.length)return!0;if(!t)return!1;for(var n=0;n<e.length;n++){var r=t[e[n]];if(null==r||""===r)return!1}return!0}(n,e.M))return ke(new A("internal-error"));var r,i=!!e.La,o=e.Rb||"POST";return Se(n).then(e.A).then((function(){return e.U&&(n.returnSecureToken=!0),e.C&&t.b&&void 0===n.tenantId&&(n.tenantId=t.b),oa(t,i?t.l:t.h,e.endpoint,o,n,e.Eb,e.hb||!1)})).then((function(t){return r=t,e.Wa?e.Wa(n,r):r})).then(e.G).then((function(){if(!e.Y)return r;if(!(e.Y in r))throw new A("internal-error");return r[e.Y]}))}function Za(t){return tu({error:{errors:[{message:t}],code:400,message:t}})}function tu(t,e){var n=(t.error&&t.error.errors&&t.error.errors[0]||{}).reason||"",r={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(n=r[n]?new A(r[n]):null)return n;for(var i in n=t.error&&t.error.message||"",yt(r={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_OR_INVALID_NONCE:"missing-or-invalid-nonce",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",INVALID_PROVIDER_ID:"invalid-provider-id",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",REJECTED_CREDENTIAL:"rejected-credential",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_DYNAMIC_LINK_DOMAIN:"invalid-dynamic-link-domain",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash",UNSUPPORTED_TENANT_OPERATION:"unsupported-tenant-operation",INVALID_TENANT_ID:"invalid-tenant-id",TENANT_ID_MISMATCH:"tenant-id-mismatch",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",EMAIL_CHANGE_NEEDS_VERIFICATION:"email-change-needs-verification",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded",UNSUPPORTED_FIRST_FACTOR:"unsupported-first-factor",UNVERIFIED_EMAIL:"unverified-email"},e||{}),e=(e=n.match(/^[^\s]+\s*:\s*([\s\S]*)$/))&&1<e.length?e[1]:void 0,r)if(0===n.indexOf(i))return new A(r[i],e);return!e&&t&&(e=xr(t)),new A("internal-error",e)}function eu(t){this.b=t,this.a=null,this.nb=function(t){return(ou||(ou=new we((function(t,e){function n(){Vr(),Sr("gapi.load")("gapi.iframes",{callback:t,ontimeout:function(){Vr(),e(Error("Network Error"))},timeout:ru.get()})}if(Sr("gapi.iframes.Iframe"))t();else if(Sr("gapi.load"))n();else{var r="__iframefcb"+Math.floor(1e6*Math.random()).toString();u[r]=function(){Sr("gapi.load")?n():e(Error("Network Error"))},Se(Fs(r=At(nu,{onload:r}))).o((function(){e(Error("Network Error"))}))}})).o((function(t){throw ou=null,t})))).then((function(){return new we((function(e,n){Sr("gapi.iframes.getContext")().open({where:document.body,url:t.b,messageHandlersFilter:Sr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},(function(r){function i(){clearTimeout(o),e()}t.a=r,t.a.restyle({setHideOnLeave:!1});var o=setTimeout((function(){n(Error("Network Error"))}),iu.get());r.ping(i).then(i,(function(){n(Error("Network Error"))}))}))}))}))}(this)}var nu=new mt(Et,"https://apis.google.com/js/api.js?onload=%{onload}"),ru=new Ur(3e4,6e4),iu=new Ur(5e3,15e3),ou=null;function su(t,e,n){this.i=t,this.g=e,this.h=n,this.f=null,this.a=Un(this.i,"/__/auth/iframe"),jn(this.a,"apiKey",this.g),jn(this.a,"appName",this.h),this.b=null,this.c=[]}function au(t,e,n,r,i){this.s=t,this.m=e,this.c=n,this.u=r,this.i=this.g=this.l=null,this.a=i,this.h=this.f=null}function uu(t){try{return r.a.app(t).auth().Ea()}catch(t){return[]}}function cu(t,e,n,r,i){this.u=t,this.f=e,this.b=n,this.c=r||null,this.h=i||null,this.m=this.s=this.w=null,this.g=[],this.l=this.a=null}function hu(t){var e=ur();return function(t){return Qa(t,Ra,{}).then((function(t){return t.authorizedDomains||[]}))}(t).then((function(t){t:{var n=Vn(e),r=n.f;n=n.b;for(var i=0;i<t.length;i++){var o=t[i],s=n,a=r;if(0==o.indexOf("chrome-extension://")?s=Vn(o).b==s&&"chrome-extension"==a:"http"!=a&&"https"!=a?s=!1:pr.test(o)?s=s==o:(o=o.split(".").join("\\."),s=new RegExp("^(.+\\."+o+"|"+o+")$","i").test(s)),s){t=!0;break t}}t=!1}if(!t)throw new Go(ur())}))}function fu(t){return t.l||(t.l=vr().then((function(){if(!t.s){var e=t.c,n=t.h,r=uu(t.b),i=new su(t.u,t.f,t.b);i.f=e,i.b=n,i.c=$(r||[]),t.s=i.toString()}t.i=new eu(t.s),function(t){if(!t.i)throw Error("IfcHandler must be initialized!");!function(t,e){t.nb.then((function(){t.a.register("authEvent",e,Sr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}(t.i,(function(e){var n={};if(e&&e.authEvent){var r=!1;for(e=Uo(e.authEvent),n=0;n<t.g.length;n++)r=t.g[n](e)||r;return(n={}).status=r?"ACK":"ERROR",Se(n)}return n.status="ERROR",Se(n)}))}(t)}))),t.l}function lu(t){return t.m||(t.w=t.c?Ar(t.c,uu(t.b)):null,t.m=new Hs(t.f,P(t.h),t.w)),t.m}function pu(t,e,n,r,i,o,s,a,u,c,h){return(t=new au(t,e,n,r,i)).l=o,t.g=s,t.i=a,t.b=dt(u||null),t.f=c,t.ub(h).toString()}function du(t){if(this.a=t||r.a.INTERNAL.reactNative&&r.a.INTERNAL.reactNative.AsyncStorage,!this.a)throw new A("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage"}function vu(t){this.b=t,this.a={},this.f=E(this.c,this)}su.prototype.toString=function(){return this.f?jn(this.a,"v",this.f):$n(this.a.a,"v"),this.b?jn(this.a,"eid",this.b):$n(this.a.a,"eid"),this.c.length?jn(this.a,"fw",this.c.join(",")):$n(this.a.a,"fw"),this.a.toString()},au.prototype.ub=function(t){return this.h=t,this},au.prototype.toString=function(){var t=Un(this.s,"/__/auth/handler");if(jn(t,"apiKey",this.m),jn(t,"appName",this.c),jn(t,"authType",this.u),this.a.isOAuthProvider){var e=this.a;try{var n=r.a.app(this.c).auth().ja()}catch(t){n=null}for(var i in e.kb=n,jn(t,"providerId",this.a.providerId),n=Rr((e=this.a).Fb))n[i]=n[i].toString();i=e.Oc,n=dt(n);for(var o=0;o<i.length;o++){var s=i[o];s in n&&delete n[s]}e.lb&&e.kb&&!n[e.lb]&&(n[e.lb]=e.kb),pt(n)||jn(t,"customParameters",xr(n))}if("function"==typeof this.a.Nb&&((e=this.a.Nb()).length&&jn(t,"scopes",e.join(","))),this.l?jn(t,"redirectUrl",this.l):$n(t.a,"redirectUrl"),this.g?jn(t,"eventId",this.g):$n(t.a,"eventId"),this.i?jn(t,"v",this.i):$n(t.a,"v"),this.b)for(var a in this.b)this.b.hasOwnProperty(a)&&!Mn(t,a)&&jn(t,a,this.b[a]);return this.h?jn(t,"tid",this.h):$n(t.a,"tid"),this.f?jn(t,"eid",this.f):$n(t.a,"eid"),(a=uu(this.c)).length&&jn(t,"fw",a.join(",")),t.toString()},(e=cu.prototype).Lb=function(t,e,n){var r=new A("popup-closed-by-user"),i=new A("web-storage-unsupported"),o=this,s=!1;return this.ka().then((function(){(function(t){var e={type:"webStorageSupport"};return fu(t).then((function(){return function(t,e){return t.nb.then((function(){return new we((function(n){t.a.send(e.type,e,n,Sr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}))}(t.i,e)})).then((function(t){if(t&&t.length&&void 0!==t[0].webStorageSupport)return t[0].webStorageSupport;throw Error()}))})(o).then((function(n){n||(t&&fr(t),e(i),s=!0)}))})).o((function(){})).then((function(){if(!s)return function(t){return new we((function(e){return function n(){An(2e3).then((function(){if(t&&!t.closed)return n();e()}))}()}))}(t)})).then((function(){if(!s)return An(n).then((function(){e(r)}))}))},e.Ub=function(){var t=Nr();return!Cr(t)&&!Mr(t)},e.Qb=function(){return!1},e.Jb=function(t,e,n,r,i,o,s,a){if(!t)return ke(new A("popup-blocked"));if(s&&!Cr())return this.ka().o((function(e){fr(t),i(e)})),r(),Se();this.a||(this.a=hu(lu(this)));var u=this;return this.a.then((function(){var e=u.ka().o((function(e){throw fr(t),i(e),e}));return r(),e})).then((function(){(Mo(n),s)||cr(pu(u.u,u.f,u.b,e,n,null,o,u.c,void 0,u.h,a),t)})).o((function(t){throw"auth/network-request-failed"==t.code&&(u.a=null),t}))},e.Kb=function(t,e,n,r){this.a||(this.a=hu(lu(this)));var i=this;return this.a.then((function(){Mo(e),cr(pu(i.u,i.f,i.b,t,e,ur(),n,i.c,void 0,i.h,r))})).o((function(t){throw"auth/network-request-failed"==t.code&&(i.a=null),t}))},e.ka=function(){var t=this;return fu(this).then((function(){return t.i.nb})).o((function(){throw t.a=null,new A("network-request-failed")}))},e.Xb=function(){return!0},e.Ca=function(t){this.g.push(t)},e.Qa=function(t){X(this.g,(function(e){return e==t}))},(e=du.prototype).get=function(t){return Se(this.a.getItem(t)).then((function(t){return t&&Lr(t)}))},e.set=function(t,e){return Se(this.a.setItem(t,xr(e)))},e.T=function(t){return Se(this.a.removeItem(t))},e.ba=function(){},e.ha=function(){};var yu,gu=[];function mu(t,e,n){pt(t.a)&&t.b.addEventListener("message",t.f),void 0===t.a[e]&&(t.a[e]=[]),t.a[e].push(n)}function bu(t){this.a=t}function wu(t){this.c=t,this.b=!1,this.a=[]}function Eu(t,e,n,r){var i,o,s,a,u=n||{},c=null;if(t.b)return ke(Error("connection_unavailable"));var h=r?800:50,f="undefined"!=typeof MessageChannel?new MessageChannel:null;return new we((function(n,r){f?(i=Math.floor(Math.random()*Math.pow(10,20)).toString(),f.port1.start(),s=setTimeout((function(){r(Error("unsupported_event"))}),h),c={messageChannel:f,onMessage:o=function(t){t.data.eventId===i&&("ack"===t.data.status?(clearTimeout(s),a=setTimeout((function(){r(Error("timeout"))}),3e3)):"done"===t.data.status?(clearTimeout(a),void 0!==t.data.response?n(t.data.response):r(Error("unknown_error"))):(clearTimeout(s),clearTimeout(a),r(Error("invalid_response"))))}},t.a.push(c),f.port1.addEventListener("message",o),t.c.postMessage({eventType:e,eventId:i,data:u},[f.port2])):r(Error("connection_unavailable"))})).then((function(e){return _u(t,c),e})).o((function(e){throw _u(t,c),e}))}function _u(t,e){if(e){var n=e.messageChannel,r=e.onMessage;n&&(n.port1.removeEventListener("message",r),n.port1.close()),X(t.a,(function(t){return t==e}))}}function Iu(){if(!Nu())throw new A("web-storage-unsupported");this.c={},this.a=[],this.b=0,this.u=u.indexedDB,this.type="indexedDB",this.g=this.l=this.f=this.i=null,this.s=!1,this.h=null;var t=this;mr()&&self?(this.l=function(){var t=mr()?self:null;if(G(gu,(function(n){n.b==t&&(e=n)})),!e){var e=new vu(t);gu.push(e)}return e}(),mu(this.l,"keyChanged",(function(e,n){return Pu(t).then((function(e){return 0<e.length&&G(t.a,(function(t){t(e)})),{keyProcessed:H(e,n.key)}}))})),mu(this.l,"ping",(function(){return Se(["keyChanged"])}))):function(){var t=u.navigator;return t&&t.serviceWorker?Se().then((function(){return t.serviceWorker.ready})).then((function(t){return t.active||null})).o((function(){return null})):Se(null)}().then((function(e){(t.h=e)&&(t.g=new wu(new bu(e)),Eu(t.g,"ping",null,!0).then((function(e){e[0].fulfilled&&H(e[0].value,"keyChanged")&&(t.s=!0)})).o((function(){})))}))}function Tu(t){return new we((function(e,n){var r=t.u.open("firebaseLocalStorageDb",1);r.onerror=function(t){try{t.preventDefault()}catch(t){}n(Error(t.target.error))},r.onupgradeneeded=function(t){t=t.target.result;try{t.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"})}catch(t){n(t)}},r.onsuccess=function(r){(r=r.target.result).objectStoreNames.contains("firebaseLocalStorage")?e(r):function(t){return new we((function(e,n){var r=t.u.deleteDatabase("firebaseLocalStorageDb");r.onsuccess=function(){e()},r.onerror=function(t){n(Error(t.target.error))}}))}(t).then((function(){return Tu(t)})).then((function(t){e(t)})).o((function(t){n(t)}))}}))}function Au(t){return t.m||(t.m=Tu(t)),t.m}function Nu(){try{return!!u.indexedDB}catch(t){return!1}}function Su(t){return t.objectStore("firebaseLocalStorage")}function ku(t,e){return t.transaction(["firebaseLocalStorage"],e?"readwrite":"readonly")}function Ou(t){return new we((function(e,n){t.onsuccess=function(t){t&&t.target?e(t.target.result):e()},t.onerror=function(t){n(t.target.error)}}))}function Du(t,e){return t.g&&t.h&&function(){var t=u.navigator;return t&&t.serviceWorker&&t.serviceWorker.controller||null}()===t.h?Eu(t.g,"keyChanged",{key:e},t.s).then((function(){})).o((function(){})):Se()}function Pu(t){return Au(t).then((function(t){var e=Su(ku(t,!1));return e.getAll?Ou(e.getAll()):new we((function(t,n){var r=[],i=e.openCursor();i.onsuccess=function(e){(e=e.target.result)?(r.push(e.value),e.continue()):t(r)},i.onerror=function(t){n(t.target.error)}}))})).then((function(e){var n={},r=[];if(0==t.b){for(r=0;r<e.length;r++)n[e[r].fbase_key]=e[r].value;r=function t(e,n){var r,i=[];for(r in e)r in n?typeof e[r]!=typeof n[r]?i.push(r):"object"==typeof e[r]&&null!=e[r]&&null!=n[r]?0<t(e[r],n[r]).length&&i.push(r):e[r]!==n[r]&&i.push(r):i.push(r);for(r in n)r in e||i.push(r);return i}(t.c,n),t.c=n}return r}))}function Cu(t){t.i&&t.i.cancel("STOP_EVENT"),t.f&&(clearTimeout(t.f),t.f=null)}function xu(t){var e=this,n=null;this.a=[],this.type="indexedDB",this.c=t,this.b=Se().then((function(){if(Nu()){var t=jr(),r="__sak"+t;return yu||(yu=new Iu),(n=yu).set(r,t).then((function(){return n.get(r)})).then((function(e){if(e!==t)throw Error("indexedDB not supported!");return n.T(r)})).then((function(){return n})).o((function(){return e.c}))}return e.c})).then((function(t){return e.type=t.type,t.ba((function(t){G(e.a,(function(e){e(t)}))})),t}))}function Ru(){this.a={},this.type="inMemory"}function Lu(){if(!function(){var t="Node"==br();if(!(t=ju()||t&&r.a.INTERNAL.node&&r.a.INTERNAL.node.localStorage))return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}}()){if("Node"==br())throw new A("internal-error","The LocalStorage compatibility library was not found.");throw new A("web-storage-unsupported")}this.a=ju()||r.a.INTERNAL.node.localStorage,this.type="localStorage"}function ju(){try{var t=u.localStorage,e=jr();return t&&(t.setItem(e,"1"),t.removeItem(e)),t}catch(t){return null}}function Mu(){this.type="nullStorage"}function Vu(){if(!function(){var t="Node"==br();if(!(t=Uu()||t&&r.a.INTERNAL.node&&r.a.INTERNAL.node.sessionStorage))return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}}()){if("Node"==br())throw new A("internal-error","The SessionStorage compatibility library was not found.");throw new A("web-storage-unsupported")}this.a=Uu()||r.a.INTERNAL.node.sessionStorage,this.type="sessionStorage"}function Uu(){try{var t=u.sessionStorage,e=jr();return t&&(t.setItem(e,"1"),t.removeItem(e)),t}catch(t){return null}}function Fu(){var t={};t.Browser=Gu,t.Node=Wu,t.ReactNative=zu,t.Worker=Ku,this.a=t[br()]}vu.prototype.c=function(t){var e=t.data.eventType,n=t.data.eventId,r=this.a[e];if(r&&0<r.length){t.ports[0].postMessage({status:"ack",eventId:n,eventType:e,response:null});var i=[];G(r,(function(e){i.push(Se().then((function(){return e(t.origin,t.data.data)})))})),De(i).then((function(r){var i=[];G(r,(function(t){i.push({fulfilled:t.Mb,value:t.value,reason:t.reason?t.reason.message:void 0})})),G(i,(function(t){for(var e in t)void 0===t[e]&&delete t[e]})),t.ports[0].postMessage({status:"done",eventId:n,eventType:e,response:i})}))}},bu.prototype.postMessage=function(t,e){this.a.postMessage(t,e)},wu.prototype.close=function(){for(;0<this.a.length;)_u(this,this.a[0]);this.b=!0},(e=Iu.prototype).set=function(t,e){var n,r=!1,i=this;return Au(this).then((function(e){return Ou((e=Su(ku(n=e,!0))).get(t))})).then((function(o){var s=Su(ku(n,!0));return o?(o.value=e,Ou(s.put(o))):(i.b++,r=!0,(o={}).fbase_key=t,o.value=e,Ou(s.add(o)))})).then((function(){return i.c[t]=e,Du(i,t)})).ma((function(){r&&i.b--}))},e.get=function(t){return Au(this).then((function(e){return Ou(Su(ku(e,!1)).get(t))})).then((function(t){return t&&t.value}))},e.T=function(t){var e=!1,n=this;return Au(this).then((function(r){return e=!0,n.b++,Ou(Su(ku(r,!0)).delete(t))})).then((function(){return delete n.c[t],Du(n,t)})).ma((function(){e&&n.b--}))},e.ba=function(t){0==this.a.length&&function(t){Cu(t),function e(){t.f=setTimeout((function(){t.i=Pu(t).then((function(e){0<e.length&&G(t.a,(function(t){t(e)}))})).then((function(){e()})).o((function(t){"STOP_EVENT"!=t.message&&e()}))}),800)}()}(this),this.a.push(t)},e.ha=function(t){X(this.a,(function(e){return e==t})),0==this.a.length&&Cu(this)},(e=xu.prototype).get=function(t){return this.b.then((function(e){return e.get(t)}))},e.set=function(t,e){return this.b.then((function(n){return n.set(t,e)}))},e.T=function(t){return this.b.then((function(e){return e.T(t)}))},e.ba=function(t){this.a.push(t)},e.ha=function(t){X(this.a,(function(e){return e==t}))},(e=Ru.prototype).get=function(t){return Se(this.a[t])},e.set=function(t,e){return this.a[t]=e,Se()},e.T=function(t){return delete this.a[t],Se()},e.ba=function(){},e.ha=function(){},(e=Lu.prototype).get=function(t){var e=this;return Se().then((function(){return Lr(e.a.getItem(t))}))},e.set=function(t,e){var n=this;return Se().then((function(){var r=xr(e);null===r?n.T(t):n.a.setItem(t,r)}))},e.T=function(t){var e=this;return Se().then((function(){e.a.removeItem(t)}))},e.ba=function(t){u.window&&un(u.window,"storage",t)},e.ha=function(t){u.window&&fn(u.window,"storage",t)},(e=Mu.prototype).get=function(){return Se(null)},e.set=function(){return Se()},e.T=function(){return Se()},e.ba=function(){},e.ha=function(){},(e=Vu.prototype).get=function(t){var e=this;return Se().then((function(){return Lr(e.a.getItem(t))}))},e.set=function(t,e){var n=this;return Se().then((function(){var r=xr(e);null===r?n.T(t):n.a.setItem(t,r)}))},e.T=function(t){var e=this;return Se().then((function(){e.a.removeItem(t)}))},e.ba=function(){},e.ha=function(){};var qu,Bu,Gu={F:Lu,$a:Vu},Wu={F:Lu,$a:Vu},zu={F:du,$a:Mu},Ku={F:Lu,$a:Mu},Hu={od:"local",NONE:"none",qd:"session"};function Yu(){var t=!(Mr(Nr())||!gr()),e=Cr(),n=kr();this.m=t,this.h=e,this.l=n,this.a={},qu||(qu=new Fu),t=qu;try{this.g=!ar()&&Br()||!u.indexedDB?new t.a.F:new xu(mr()?new Ru:new t.a.F)}catch(t){this.g=new Ru,this.h=!0}try{this.i=new t.a.$a}catch(t){this.i=new Ru}this.u=new Ru,this.f=E(this.Vb,this),this.b={}}function Xu(){return Bu||(Bu=new Yu),Bu}function Ju(t,e){switch(e){case"session":return t.i;case"none":return t.u;default:return t.g}}function $u(t,e){return"firebase:"+t.name+(e?":"+e:"")}function Qu(t,e,n){return n=$u(e,n),"local"==e.F&&(t.b[n]=null),Ju(t,e.F).T(n)}function Zu(t){t.c&&(clearInterval(t.c),t.c=null)}function tc(t){this.a=t,this.b=Xu()}(e=Yu.prototype).get=function(t,e){return Ju(this,t.F).get($u(t,e))},e.set=function(t,e,n){var r=$u(t,n),i=this,o=Ju(this,t.F);return o.set(r,e).then((function(){return o.get(r)})).then((function(e){"local"==t.F&&(i.b[r]=e)}))},e.addListener=function(t,e,n){t=$u(t,e),this.l&&(this.b[t]=u.localStorage.getItem(t)),pt(this.a)&&(Ju(this,"local").ba(this.f),this.h||(ar()||!Br())&&u.indexedDB||!this.l||function(t){Zu(t),t.c=setInterval((function(){for(var e in t.a){var n=u.localStorage.getItem(e),r=t.b[e];n!=r&&(t.b[e]=n,n=new Je({type:"storage",key:e,target:window,oldValue:r,newValue:n,a:!0}),t.Vb(n))}}),1e3)}(this)),this.a[t]||(this.a[t]=[]),this.a[t].push(n)},e.removeListener=function(t,e,n){t=$u(t,e),this.a[t]&&(X(this.a[t],(function(t){return t==n})),0==this.a[t].length&&delete this.a[t]),pt(this.a)&&(Ju(this,"local").ha(this.f),Zu(this))},e.Vb=function(t){if(t&&t.f){var e=t.a.key;if(null==e)for(var n in this.a){var r=this.b[n];void 0===r&&(r=null);var i=u.localStorage.getItem(n);i!==r&&(this.b[n]=i,this.ib(n))}else if(0==e.indexOf("firebase:")&&this.a[e]){if(void 0!==t.a.a?Ju(this,"local").ha(this.f):Zu(this),this.m)if(n=u.localStorage.getItem(e),(r=t.a.newValue)!==n)null!==r?u.localStorage.setItem(e,r):u.localStorage.removeItem(e);else if(this.b[e]===r&&void 0===t.a.a)return;var o=this;n=function(){void 0===t.a.a&&o.b[e]===u.localStorage.getItem(e)||(o.b[e]=u.localStorage.getItem(e),o.ib(e))},Ht&&ne&&10==ne&&u.localStorage.getItem(e)!==t.a.newValue&&t.a.newValue!==t.a.oldValue?setTimeout(n,10):n()}}else G(t,E(this.ib,this))},e.ib=function(t){this.a[t]&&G(this.a[t],(function(t){t()}))};var ec,nc={name:"authEvent",F:"local"};function rc(){this.a=Xu()}function ic(t,e){this.b=oc,this.f=u.Uint8Array?new Uint8Array(this.b):Array(this.b),this.g=this.c=0,this.a=[],this.i=t,this.h=e,this.l=u.Int32Array?new Int32Array(64):Array(64),void 0===ec&&(ec=u.Int32Array?new Int32Array(lc):lc),this.reset()}T(ic,(function(){this.b=-1}));for(var oc=64,sc=oc-1,ac=[],uc=0;uc<sc;uc++)ac[uc]=0;var cc=J(128,ac);function hc(t){for(var e=t.f,n=t.l,r=0,i=0;i<e.length;)n[r++]=e[i]<<24|e[i+1]<<16|e[i+2]<<8|e[i+3],i=4*r;for(e=16;64>e;e++){i=0|n[e-15],r=0|n[e-2];var o=(0|n[e-16])+((i>>>7|i<<25)^(i>>>18|i<<14)^i>>>3)|0,s=(0|n[e-7])+((r>>>17|r<<15)^(r>>>19|r<<13)^r>>>10)|0;n[e]=o+s|0}r=0|t.a[0],i=0|t.a[1];var a=0|t.a[2],u=0|t.a[3],c=0|t.a[4],h=0|t.a[5],f=0|t.a[6];for(o=0|t.a[7],e=0;64>e;e++){var l=((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+(r&i^r&a^i&a)|0;s=(o=o+((c>>>6|c<<26)^(c>>>11|c<<21)^(c>>>25|c<<7))|0)+((s=(s=c&h^~c&f)+(0|ec[e])|0)+(0|n[e])|0)|0,o=f,f=h,h=c,c=u+s|0,u=a,a=i,i=r,r=s+l|0}t.a[0]=t.a[0]+r|0,t.a[1]=t.a[1]+i|0,t.a[2]=t.a[2]+a|0,t.a[3]=t.a[3]+u|0,t.a[4]=t.a[4]+c|0,t.a[5]=t.a[5]+h|0,t.a[6]=t.a[6]+f|0,t.a[7]=t.a[7]+o|0}function fc(t,e,n){void 0===n&&(n=e.length);var r=0,i=t.c;if("string"==typeof e)for(;r<n;)t.f[i++]=e.charCodeAt(r++),i==t.b&&(hc(t),i=0);else{if(!p(e))throw Error("message must be string or array");for(;r<n;){var o=e[r++];if(!("number"==typeof o&&0<=o&&255>=o&&o==(0|o)))throw Error("message must be a byte array");t.f[i++]=o,i==t.b&&(hc(t),i=0)}}t.c=i,t.g+=n}ic.prototype.reset=function(){this.g=this.c=0,this.a=u.Int32Array?new Int32Array(this.h):$(this.h)};var lc=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function pc(){ic.call(this,8,dc)}T(pc,ic);var dc=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function vc(t,e,n,r,i){this.u=t,this.i=e,this.l=n,this.m=r||null,this.s=i||null,this.h=e+":"+n,this.w=new rc,this.g=new tc(this.h),this.f=null,this.b=[],this.a=this.c=null}function yc(t){return new A("invalid-cordova-configuration",t)}function gc(t){var e=new pc;fc(e,t),t=[];var n=8*e.g;56>e.c?fc(e,cc,56-e.c):fc(e,cc,e.b-(e.c-56));for(var r=63;56<=r;r--)e.f[r]=255&n,n/=256;for(hc(e),r=n=0;r<e.i;r++)for(var i=24;0<=i;i-=8)t[n++]=e.a[r]>>i&255;return function(t){return z(t,(function(t){return 1<(t=t.toString(16)).length?t:"0"+t})).join("")}(t)}function mc(t,e){for(var n=0;n<t.b.length;n++)try{t.b[n](e)}catch(t){}}function bc(t){return t.f||(t.f=t.ka().then((function(){return new we((function(e){t.Ca((function n(r){return e(r),t.Qa(n),!1})),function(t){function e(e){r=!0,i&&i.cancel(),wc(t).then((function(r){var i=n;if(r&&e&&e.url){var o=null;-1!=(i=no(e.url)).indexOf("/__/auth/callback")&&(o=(o="object"==typeof(o=Lr(Mn(o=Vn(i),"firebaseError")||null))?N(o):null)?new Vo(r.c,r.b,null,null,o,null,r.S()):new Vo(r.c,r.b,i,r.f,null,null,r.S())),i=o||n}mc(t,i)}))}var n=new Vo("unknown",null,null,null,new A("no-auth-event")),r=!1,i=An(500).then((function(){return wc(t).then((function(){r||mc(t,n)}))})),o=u.handleOpenURL;u.handleOpenURL=function(t){if(0==t.toLowerCase().indexOf(Sr("BuildInfo.packageName",u).toLowerCase()+"://")&&e({url:t}),"function"==typeof o)try{o(t)}catch(t){console.error(t)}},Bo||(Bo=new Fo),function(t){var e=Bo;e.a.push(t),e.b||(e.b=function(t){for(var n=0;n<e.a.length;n++)e.a[n](t)},"function"==typeof(t=Sr("universalLinks.subscribe",u))&&t(null,e.b))}(e)}(t)}))}))),t.f}function wc(t){var e=null;return function(t){return t.b.get(nc,t.a).then((function(t){return Uo(t)}))}(t.g).then((function(n){return e=n,Qu((n=t.g).b,nc,n.a)})).then((function(){return e}))}function Ec(t){this.a=t,this.b=Xu()}(e=vc.prototype).ka=function(){return this.Ga?this.Ga:this.Ga=(yr(void 0)?vr().then((function(){return new we((function(t,e){var n=u.document,r=setTimeout((function(){e(Error("Cordova framework is not ready."))}),1e3);n.addEventListener("deviceready",(function(){clearTimeout(r),t()}),!1)}))})):ke(Error("Cordova must run in an Android or iOS file scheme."))).then((function(){if("function"!=typeof Sr("universalLinks.subscribe",u))throw yc("cordova-universal-links-plugin-fix is not installed");if(void 0===Sr("BuildInfo.packageName",u))throw yc("cordova-plugin-buildinfo is not installed");if("function"!=typeof Sr("cordova.plugins.browsertab.openUrl",u))throw yc("cordova-plugin-browsertab is not installed");if("function"!=typeof Sr("cordova.InAppBrowser.open",u))throw yc("cordova-plugin-inappbrowser is not installed")}),(function(){throw new A("cordova-not-ready")}))},e.Lb=function(t,e){return e(new A("operation-not-supported-in-this-environment")),Se()},e.Jb=function(){return ke(new A("operation-not-supported-in-this-environment"))},e.Xb=function(){return!1},e.Ub=function(){return!0},e.Qb=function(){return!0},e.Kb=function(t,e,n,r){if(this.c)return ke(new A("redirect-operation-pending"));var i=this,o=u.document,s=null,a=null,c=null,h=null;return this.c=Se().then((function(){return Mo(e),bc(i)})).then((function(){return function(t,e,n,r,i){var o=function(){for(var t=20,e=[];0<t;)e.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),t--;return e.join("")}(),s=new Vo(e,r,null,o,new A("no-auth-event"),null,i),a=Sr("BuildInfo.packageName",u);if("string"!=typeof a)throw new A("invalid-cordova-configuration");var c=Sr("BuildInfo.displayName",u),h={};if(Nr().toLowerCase().match(/iphone|ipad|ipod/))h.ibi=a;else{if(!Nr().toLowerCase().match(/android/))return ke(new A("operation-not-supported-in-this-environment"));h.apn=a}c&&(h.appDisplayName=c),o=gc(o),h.sessionId=o;var f=pu(t.u,t.i,t.l,e,n,null,r,t.m,h,t.s,i);return t.ka().then((function(){var e=t.h;return t.w.a.set(nc,s.v(),e)})).then((function(){var e=Sr("cordova.plugins.browsertab.isAvailable",u);if("function"!=typeof e)throw new A("invalid-cordova-configuration");var n=null;e((function(e){if(e){if("function"!=typeof(n=Sr("cordova.plugins.browsertab.openUrl",u)))throw new A("invalid-cordova-configuration");n(f)}else{if("function"!=typeof(n=Sr("cordova.InAppBrowser.open",u)))throw new A("invalid-cordova-configuration");e=Nr(),t.a=n(f,e.match(/(iPad|iPhone|iPod).*OS 7_\d/i)||e.match(/(iPad|iPhone|iPod).*OS 8_\d/i)?"_blank":"_system","location=yes")}}))}))}(i,t,e,n,r)})).then((function(){return new we((function(t,e){a=function(){var e=Sr("cordova.plugins.browsertab.close",u);return t(),"function"==typeof e&&e(),i.a&&"function"==typeof i.a.close&&(i.a.close(),i.a=null),!1},i.Ca(a),c=function(){s||(s=An(2e3).then((function(){e(new A("redirect-cancelled-by-user"))})))},h=function(){Fr()&&c()},o.addEventListener("resume",c,!1),Nr().toLowerCase().match(/android/)||o.addEventListener("visibilitychange",h,!1)})).o((function(t){return wc(i).then((function(){throw t}))}))})).ma((function(){c&&o.removeEventListener("resume",c,!1),h&&o.removeEventListener("visibilitychange",h,!1),s&&s.cancel(),a&&i.Qa(a),i.c=null}))},e.Ca=function(t){this.b.push(t),bc(this).o((function(e){"auth/invalid-cordova-configuration"===e.code&&(e=new Vo("unknown",null,null,null,new A("no-auth-event")),t(e))}))},e.Qa=function(t){X(this.b,(function(e){return e==t}))};var _c={name:"pendingRedirect",F:"session"};function Ic(t){return Qu(t.b,_c,t.a)}function Tc(t,e,n){this.i={},this.w=0,this.D=t,this.u=e,this.m=n,this.h=[],this.f=!1,this.l=E(this.s,this),this.b=new Vc,this.B=new Gc,this.g=new Ec(this.u+":"+this.m),this.c={},this.c.unknown=this.b,this.c.signInViaRedirect=this.b,this.c.linkViaRedirect=this.b,this.c.reauthViaRedirect=this.b,this.c.signInViaPopup=this.B,this.c.linkViaPopup=this.B,this.c.reauthViaPopup=this.B,this.a=Ac(this.D,this.u,this.m,S)}function Ac(t,e,n,i){var o=r.a.SDK_VERSION||null;return yr()?new vc(t,e,n,o,i):new cu(t,e,n,o,i)}function Nc(t){t.f||(t.f=!0,t.a.Ca(t.l));var e=t.a;return t.a.ka().o((function(n){throw t.a==e&&t.reset(),n}))}function Sc(t){t.a.Ub()&&Nc(t).o((function(e){var n=new Vo("unknown",null,null,null,new A("operation-not-supported-in-this-environment"));xc(e)&&t.s(n)})),t.a.Qb()||Uc(t.b)}function kc(t,e){H(t.h,e)||t.h.push(e),t.f||function(t){return t.b.get(_c,t.a).then((function(t){return"pending"==t}))}(t.g).then((function(e){e?Ic(t.g).then((function(){Nc(t).o((function(e){var n=new Vo("unknown",null,null,null,new A("operation-not-supported-in-this-environment"));xc(e)&&t.s(n)}))})):Sc(t)})).o((function(){Sc(t)}))}function Oc(t,e){X(t.h,(function(t){return t==e}))}Tc.prototype.reset=function(){this.f=!1,this.a.Qa(this.l),this.a=Ac(this.D,this.u,this.m),this.i={}},Tc.prototype.s=function(t){if(!t)throw new A("invalid-auth-event");if(6e5<=I()-this.w&&(this.i={},this.w=0),t&&t.getUid()&&this.i.hasOwnProperty(t.getUid()))return!1;for(var e=!1,n=0;n<this.h.length;n++){var r=this.h[n];if(r.Cb(t.c,t.b)){(e=this.c[t.c])&&(e.h(t,r),t&&(t.f||t.b)&&(this.i[t.getUid()]=!0,this.w=I())),e=!0;break}}return Uc(this.b),e};var Dc=new Ur(2e3,1e4),Pc=new Ur(3e4,6e4);function Cc(t,e,n,r,i,o,s){return t.a.Jb(e,n,r,(function(){t.f||(t.f=!0,t.a.Ca(t.l))}),(function(){t.reset()}),i,o,s)}function xc(t){return!(!t||"auth/cordova-not-ready"!=t.code)}function Rc(t,e,n,r,i){var o;return function(t){return t.b.set(_c,"pending",t.a)}(t.g).then((function(){return t.a.Kb(e,n,r,i).o((function(e){if(xc(e))throw new A("operation-not-supported-in-this-environment");return o=e,Ic(t.g).then((function(){throw o}))})).then((function(){return t.a.Xb()?new we((function(){})):Ic(t.g).then((function(){return t.pa()})).then((function(){})).o((function(){}))}))}))}function Lc(t,e,n,r,i){return t.a.Lb(r,(function(t){e.la(n,null,t,i)}),Dc.get())}Tc.prototype.pa=function(){return this.b.pa()};var jc={};function Mc(t,e,n){var r=e+":"+n;return jc[r]||(jc[r]=new Tc(t,e,n)),jc[r]}function Vc(){this.b=null,this.f=[],this.c=[],this.a=null,this.i=this.g=!1}function Uc(t){t.g||(t.g=!0,Bc(t,!1,null,null))}function Fc(t){t.g&&!t.i&&Bc(t,!1,null,null)}function qc(t,e){if(t.b=function(){return Se(e)},t.f.length)for(var n=0;n<t.f.length;n++)t.f[n](e)}function Bc(t,e,n,r){e?r?function(t,e){if(t.b=function(){return ke(e)},t.c.length)for(var n=0;n<t.c.length;n++)t.c[n](e)}(t,r):qc(t,n):qc(t,{user:null}),t.f=[],t.c=[]}function Gc(){}function Wc(){this.Bb=!1,Object.defineProperty(this,"appVerificationDisabled",{get:function(){return this.Bb},set:function(t){this.Bb=t},enumerable:!1})}function zc(t,e){this.a=e,Hr(this,"verificationId",t)}function Kc(t,e,n,r){return new Ro(t).cb(e,n).then((function(t){return new zc(t,r)}))}function Hc(t){var e=Bi(t);if(!(e&&e.exp&&e.auth_time&&e.iat))throw new A("internal-error","An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");Yr(this,{token:t,expirationTime:qr(1e3*e.exp),authTime:qr(1e3*e.auth_time),issuedAtTime:qr(1e3*e.iat),signInProvider:e.firebase&&e.firebase.sign_in_provider?e.firebase.sign_in_provider:null,signInSecondFactor:e.firebase&&e.firebase.sign_in_second_factor?e.firebase.sign_in_second_factor:null,claims:e})}function Yc(t,e,n){var r=e&&e[Jc];if(!r)throw new A("argument-error","Internal assert: Invalid MultiFactorResolver");this.a=t,this.f=dt(e),this.g=n,this.c=new ro(null,r),this.b=[];var i=this;G(e[Xc]||[],(function(t){(t=Qr(t))&&i.b.push(t)})),Hr(this,"auth",this.a),Hr(this,"session",this.c),Hr(this,"hints",this.b)}Vc.prototype.reset=function(){this.b=null,this.a&&(this.a.cancel(),this.a=null)},Vc.prototype.h=function(t,e){if(t){this.reset(),this.g=!0;var n=t.c,r=t.b,i=t.a&&"auth/web-storage-unsupported"==t.a.code,o=t.a&&"auth/operation-not-supported-in-this-environment"==t.a.code;this.i=!(!i&&!o),"unknown"!=n||i||o?t.a?(Bc(this,!0,null,t.a),Se()):e.Da(n,r)?function(t,e,n){n=n.Da(e.c,e.b);var r=e.g,i=e.f,o=e.i,s=e.S(),a=!!e.c.match(/Redirect$/);n(r,i,s,o).then((function(e){Bc(t,a,e,null)})).o((function(e){Bc(t,a,null,e)}))}(this,t,e):ke(new A("invalid-auth-event")):(Bc(this,!1,null,null),Se())}else ke(new A("invalid-auth-event"))},Vc.prototype.pa=function(){var t=this;return new we((function(e,n){t.b?t.b().then(e,n):(t.f.push(e),t.c.push(n),function(t){var e=new A("timeout");t.a&&t.a.cancel(),t.a=An(Pc.get()).then((function(){t.b||(t.g=!0,Bc(t,!0,null,e))}))}(t))}))},Gc.prototype.h=function(t,e){if(t){var n=t.c,r=t.b;t.a?(e.la(t.c,null,t.a,t.b),Se()):e.Da(n,r)?function(t,e){var n=t.b,r=t.c;e.Da(r,n)(t.g,t.f,t.S(),t.i).then((function(t){e.la(r,t,null,n)})).o((function(t){e.la(r,null,t,n)}))}(t,e):ke(new A("invalid-auth-event"))}else ke(new A("invalid-auth-event"))},zc.prototype.confirm=function(t){return t=Lo(this.verificationId,t),this.a(t)};var Xc="mfaInfo",Jc="mfaPendingCredential";function $c(t,e,n,r){A.call(this,"multi-factor-auth-required",r,e),this.b=new Yc(t,e,n),Hr(this,"resolver",this.b)}function Qc(t,e,n){if(t&&v(t.serverResponse)&&"auth/multi-factor-auth-required"===t.code)try{return new $c(e,t.serverResponse,n,t.message)}catch(t){}return null}function Zc(){}function th(t){Hr(this,"factorId",t.ea),this.a=t}function eh(t){if(th.call(this,t),this.a.ea!=Ro.PROVIDER_ID)throw new A("argument-error","firebase.auth.PhoneMultiFactorAssertion requires a valid firebase.auth.PhoneAuthCredential")}function nh(t,e){for(var n in Xe.call(this,t),e)this[n]=e[n]}function rh(t,e){this.a=t,this.b=[],this.c=E(this.wc,this),un(this.a,"userReloaded",this.c);var n=[];e&&e.multiFactor&&e.multiFactor.enrolledFactors&&G(e.multiFactor.enrolledFactors,(function(t){var e=null,r={};if(t){t.uid&&(r[ei]=t.uid),t.displayName&&(r[Zr]=t.displayName),t.enrollmentTime&&(r[ti]=new Date(t.enrollmentTime).toISOString()),t.phoneNumber&&(r[ni]=t.phoneNumber);try{e=new ri(r)}catch(t){}t=e}else t=null;t&&n.push(t)})),ih(this,n)}function ih(t,e){t.b=e,Hr(t,"enrolledFactors",e)}function oh(t,e,n){if(this.h=t,this.i=e,this.g=n,this.c=3e4,this.f=96e4,this.b=null,this.a=this.c,this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!")}function sh(t){this.c=t,this.b=this.a=null}function ah(t){return t.b&&1e3*t.b.c||0}function uh(t,e){var n=e.refreshToken;t.b=qi(e[Xs]||""),t.a=n}function ch(t,e){return function(t,e){return new we((function(n,r){"refresh_token"==e.grant_type&&e.refresh_token||"authorization_code"==e.grant_type&&e.code?na(t,t.u+"?key="+encodeURIComponent(t.c),(function(t){t?t.error?r(tu(t)):t.access_token&&t.refresh_token?n(t):r(new A("internal-error")):r(new A("network-request-failed"))}),"POST",Jn(e).toString(),t.g,t.m.get()):r(new A("internal-error"))}))}(t.c,e).then((function(e){return t.b=qi(e.access_token),t.a=e.refresh_token,{accessToken:t.b.toString(),refreshToken:t.a}})).o((function(e){throw"auth/user-token-expired"==e.code&&(t.a=null),e}))}function hh(t,e){this.a=t||null,this.b=e||null,Yr(this,{lastSignInTime:qr(e||null),creationTime:qr(t||null)})}function fh(t,e,n,r,i,o){Yr(this,{uid:t,displayName:r||null,photoURL:i||null,email:n||null,phoneNumber:o||null,providerId:e})}function lh(t,e,n){this.N=[],this.l=t.apiKey,this.m=t.appName,this.s=t.authDomain||null,t=r.a.SDK_VERSION?Ar(r.a.SDK_VERSION):null,this.a=new Hs(this.l,P(S),t),this.b=new sh(this.a),bh(this,e[Xs]),uh(this.b,e),Hr(this,"refreshToken",this.b.a),_h(this,n||{}),wn.call(this),this.P=!1,this.s&&Or()&&(this.i=Mc(this.s,this.l,this.m)),this.R=[],this.h=null,this.B=function(t){return new oh((function(){return t.I(!0)}),(function(t){return!(!t||"auth/network-request-failed"!=t.code)}),(function(){var e=ah(t.b)-I()-3e5;return 0<e?e:0}))}(this),this.Z=E(this.Ma,this);var i=this;this.oa=null,this.za=function(t){i.va(t.g)},this.aa=null,this.W=[],this.ya=function(t){dh(i,t.c)},this.$=null,this.O=new rh(this,n),Hr(this,"multiFactor",this.O)}function ph(t,e){t.aa&&fn(t.aa,"languageCodeChanged",t.za),(t.aa=e)&&un(e,"languageCodeChanged",t.za)}function dh(t,e){t.W=e,ea(t.a,r.a.SDK_VERSION?Ar(r.a.SDK_VERSION,t.W):null)}function vh(t,e){t.$&&fn(t.$,"frameworkChanged",t.ya),(t.$=e)&&un(e,"frameworkChanged",t.ya)}function yh(t){try{return r.a.app(t.m).auth()}catch(e){throw new A("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+t.m+"'!")}}function gh(t){t.D||t.B.b||(t.B.start(),fn(t,"tokenChanged",t.Z),un(t,"tokenChanged",t.Z))}function mh(t){fn(t,"tokenChanged",t.Z),t.B.stop()}function bh(t,e){t.xa=e,Hr(t,"_lat",e)}function wh(t){for(var e=[],n=0;n<t.R.length;n++)e.push(t.R[n](t));return De(e).then((function(){return t}))}function Eh(t){t.i&&!t.P&&(t.P=!0,kc(t.i,t))}function _h(t,e){Yr(t,{uid:e.uid,displayName:e.displayName||null,photoURL:e.photoURL||null,email:e.email||null,emailVerified:e.emailVerified||!1,phoneNumber:e.phoneNumber||null,isAnonymous:e.isAnonymous||!1,tenantId:e.tenantId||null,metadata:new hh(e.createdAt,e.lastLoginAt),providerData:[]}),t.a.b=t.tenantId}function Ih(){}function Th(t){return Se().then((function(){if(t.D)throw new A("app-deleted")}))}function Ah(t){return z(t.providerData,(function(t){return t.providerId}))}function Nh(t,e){e&&(Sh(t,e.providerId),t.providerData.push(e))}function Sh(t,e){X(t.providerData,(function(t){return t.providerId==e}))}function kh(t,e,n){("uid"!=e||n)&&t.hasOwnProperty(e)&&Hr(t,e,n)}function Oh(t,e){t!=e&&(Yr(t,{uid:e.uid,displayName:e.displayName,photoURL:e.photoURL,email:e.email,emailVerified:e.emailVerified,phoneNumber:e.phoneNumber,isAnonymous:e.isAnonymous,tenantId:e.tenantId,providerData:[]}),e.metadata?Hr(t,"metadata",function(t){return new hh(t.a,t.b)}(e.metadata)):Hr(t,"metadata",new hh),G(e.providerData,(function(e){Nh(t,e)})),function(t,e){t.b=e.b,t.a=e.a}(t.b,e.b),Hr(t,"refreshToken",t.b.a),ih(t.O,e.O.b))}function Dh(t){return t.I().then((function(e){var n=t.isAnonymous;return function(t,e){return Qa(t.a,Oa,{idToken:e}).then(E(t.Ic,t))}(t,e).then((function(){return n||kh(t,"isAnonymous",!1),e}))}))}function Ph(t,e){e[Xs]&&t.xa!=e[Xs]&&(uh(t.b,e),t.dispatchEvent(new nh("tokenChanged")),bh(t,e[Xs]),kh(t,"refreshToken",t.b.a))}function Ch(t,e){return Dh(t).then((function(){if(H(Ah(t),e))return wh(t).then((function(){throw new A("provider-already-linked")}))}))}function xh(t,e,n){return Xr({user:t,credential:jo(e),additionalUserInfo:e=Hi(e),operationType:n})}function Rh(t,e){return Ph(t,e),t.reload().then((function(){return t}))}function Lh(t,e,n,i,o){if(!Or())return ke(new A("operation-not-supported-in-this-environment"));if(t.h&&!o)return ke(t.h);var s=Ki(n.providerId),a=jr(t.uid+":::"),u=null;(!Cr()||gr())&&t.s&&n.isOAuthProvider&&(u=pu(t.s,t.l,t.m,e,n,null,a,r.a.SDK_VERSION||null,null,null,t.tenantId));var c=lr(u,s&&s.ta,s&&s.sa);return i=i().then((function(){if(Mh(t),!o)return t.I().then((function(){}))})).then((function(){return Cc(t.i,c,e,n,a,!!u,t.tenantId)})).then((function(){return new we((function(n,r){t.la(e,null,new A("cancelled-popup-request"),t.g||null),t.f=n,t.w=r,t.g=a,t.c=Lc(t.i,t,e,c,a)}))})).then((function(t){return c&&fr(c),t?Xr(t):null})).o((function(t){throw c&&fr(c),t})),Vh(t,i,o)}function jh(t,e,n,r,i){if(!Or())return ke(new A("operation-not-supported-in-this-environment"));if(t.h&&!i)return ke(t.h);var o=null,s=jr(t.uid+":::");return r=r().then((function(){if(Mh(t),!i)return t.I().then((function(){}))})).then((function(){return t.fa=s,wh(t)})).then((function(e){return t.ga&&(e=(e=t.ga).b.set(qh,t.v(),e.a)),e})).then((function(){return Rc(t.i,e,n,s,t.tenantId)})).o((function(e){if(o=e,t.ga)return Bh(t.ga);throw o})).then((function(){if(o)throw o})),Vh(t,r,i)}function Mh(t){if(!t.i||!t.P){if(t.i&&!t.P)throw new A("internal-error");throw new A("auth-domain-config-required")}}function Vh(t,e,n){var r=function(t,e,n){return t.h&&!n?(e.cancel(),ke(t.h)):e.o((function(e){throw!e||"auth/user-disabled"!=e.code&&"auth/user-token-expired"!=e.code||(t.h||t.dispatchEvent(new nh("userInvalidated")),t.h=e),e}))}(t,e,n);return t.N.push(r),r.ma((function(){Y(t.N,r)})),r.o((function(e){var n=null;throw e&&"auth/multi-factor-auth-required"===e.code&&(n=Qc(e.v(),yh(t),E(t.hc,t))),n||e}))}function Uh(t){if(!t.apiKey)return null;var e={apiKey:t.apiKey,authDomain:t.authDomain,appName:t.appName},n={};if(!t.stsTokenManager||!t.stsTokenManager.accessToken)return null;n[Xs]=t.stsTokenManager.accessToken,n.refreshToken=t.stsTokenManager.refreshToken||null;var r=new lh(e,n,t);return t.providerData&&G(t.providerData,(function(t){t&&Nh(r,Xr(t))})),t.redirectEventId&&(r.fa=t.redirectEventId),r}function Fh(t){this.a=t,this.b=Xu()}Yc.prototype.Pc=function(t){var e=this;return t.ob(this.a.b,this.c).then((function(t){var n=dt(e.f);return delete n[Xc],delete n[Jc],yt(n,t),e.g(n)}))},T($c,A),Zc.prototype.ob=function(t,e,n){return e.type==io?function(t,e,n,r){return n.Fa().then((function(n){return n={idToken:n},void 0!==r&&(n.displayName=r),yt(n,{phoneVerificationInfo:xo(t.a)}),Qa(e,Sa,n)}))}(this,t,e,n):function(t,e,n){return n.Fa().then((function(n){return yt(n={mfaPendingCredential:n},{phoneVerificationInfo:xo(t.a)}),Qa(e,ka,n)}))}(this,t,e)},T(th,Zc),T(eh,th),T(nh,Xe),(e=rh.prototype).wc=function(t){ih(this,function(t){var e=[];return G(t.mfaInfo||[],(function(t){(t=Qr(t))&&e.push(t)})),e}(t.ed))},e.Ob=function(){return this.a.I().then((function(t){return new ro(t,null)}))},e.dc=function(t,e){var n=this,r=this.a.a;return this.Ob().then((function(n){return t.ob(r,n,e)})).then((function(t){return Ph(n.a,t),n.a.reload()}))},e.$c=function(t){var e=this,n="string"==typeof t?t:t.uid,r=this.a.a;return this.a.I().then((function(t){return Qa(r,$a,{idToken:t,mfaEnrollmentId:n})})).then((function(t){var r=W(e.b,(function(t){return t.uid!=n}));return ih(e,r),Ph(e.a,t),e.a.reload().o((function(t){if("auth/user-token-expired"!=t.code)throw t}))}))},e.v=function(){return{multiFactor:{enrolledFactors:z(this.b,(function(t){return t.v()}))}}},oh.prototype.start=function(){this.a=this.c,function t(e,n){e.stop(),e.b=An(function(t,e){return e?(t.a=t.c,t.g()):(e=t.a,t.a*=2,t.a>t.f&&(t.a=t.f),e)}(e,n)).then((function(){return function(){var t=u.document,e=null;return Fr()||!t?Se():new we((function(n){e=function(){Fr()&&(t.removeEventListener("visibilitychange",e,!1),n())},t.addEventListener("visibilitychange",e,!1)})).o((function(n){throw t.removeEventListener("visibilitychange",e,!1),n}))}()})).then((function(){return e.h()})).then((function(){t(e,!0)})).o((function(n){e.i(n)&&t(e,!1)}))}(this,!0)},oh.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null)},sh.prototype.v=function(){return{apiKey:this.c.c,refreshToken:this.a,accessToken:this.b&&this.b.toString(),expirationTime:ah(this)}},sh.prototype.getToken=function(t){return t=!!t,this.b&&!this.a?ke(new A("user-token-expired")):t||!this.b||I()>ah(this)-3e4?this.a?ch(this,{grant_type:"refresh_token",refresh_token:this.a}):Se(null):Se({accessToken:this.b.toString(),refreshToken:this.a})},hh.prototype.v=function(){return{lastLoginAt:this.b,createdAt:this.a}},T(lh,wn),lh.prototype.va=function(t){this.oa=t,ta(this.a,t)},lh.prototype.ja=function(){return this.oa},lh.prototype.Ea=function(){return $(this.W)},lh.prototype.Ma=function(){this.B.b&&(this.B.stop(),this.B.start())},Hr(lh.prototype,"providerId","firebase"),(e=lh.prototype).reload=function(){var t=this;return Vh(this,Th(this).then((function(){return Dh(t).then((function(){return wh(t)})).then(Ih)})))},e.mc=function(t){return this.I(t).then((function(t){return new Hc(t)}))},e.I=function(t){var e=this;return Vh(this,Th(this).then((function(){return e.b.getToken(t)})).then((function(t){if(!t)throw new A("internal-error");return t.accessToken!=e.xa&&(bh(e,t.accessToken),e.dispatchEvent(new nh("tokenChanged"))),kh(e,"refreshToken",t.refreshToken),t.accessToken})))},e.Ic=function(t){if(!(t=t.users)||!t.length)throw new A("internal-error");_h(this,{uid:(t=t[0]).localId,displayName:t.displayName,photoURL:t.photoUrl,email:t.email,emailVerified:!!t.emailVerified,phoneNumber:t.phoneNumber,lastLoginAt:t.lastLoginAt,createdAt:t.createdAt,tenantId:t.tenantId});for(var e=function(t){return(t=t.providerUserInfo)&&t.length?z(t,(function(t){return new fh(t.rawId,t.providerId,t.email,t.displayName,t.photoUrl,t.phoneNumber)})):[]}(t),n=0;n<e.length;n++)Nh(this,e[n]);kh(this,"isAnonymous",!(this.email&&t.passwordHash||this.providerData&&this.providerData.length)),this.dispatchEvent(new nh("userReloaded",{ed:t}))},e.Jc=function(t){return zr("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead."),this.pb(t)},e.pb=function(t){var e=this,n=null;return Vh(this,t.c(this.a,this.uid).then((function(t){return Ph(e,t),n=xh(e,t,"reauthenticate"),e.h=null,e.reload()})).then((function(){return n})),!0)},e.Ac=function(t){return zr("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead."),this.mb(t)},e.mb=function(t){var e=this,n=null;return Vh(this,Ch(this,t.providerId).then((function(){return e.I()})).then((function(n){return t.b(e.a,n)})).then((function(t){return n=xh(e,t,"link"),Rh(e,t)})).then((function(){return n})))},e.Bc=function(t,e){var n=this;return Vh(this,Ch(this,"phone").then((function(){return Kc(yh(n),t,e,E(n.mb,n))})))},e.Kc=function(t,e){var n=this;return Vh(this,Se().then((function(){return Kc(yh(n),t,e,E(n.pb,n))})),!0)},e.xb=function(t){var e=this;return Vh(this,this.I().then((function(n){return e.a.xb(n,t)})).then((function(t){return Ph(e,t),e.reload()})))},e.cd=function(t){var e=this;return Vh(this,this.I().then((function(n){return t.b(e.a,n)})).then((function(t){return Ph(e,t),e.reload()})))},e.yb=function(t){var e=this;return Vh(this,this.I().then((function(n){return e.a.yb(n,t)})).then((function(t){return Ph(e,t),e.reload()})))},e.zb=function(t){if(void 0===t.displayName&&void 0===t.photoURL)return Th(this);var e=this;return Vh(this,this.I().then((function(n){return e.a.zb(n,{displayName:t.displayName,photoUrl:t.photoURL})})).then((function(t){return Ph(e,t),kh(e,"displayName",t.displayName||null),kh(e,"photoURL",t.photoUrl||null),G(e.providerData,(function(t){"password"===t.providerId&&(Hr(t,"displayName",e.displayName),Hr(t,"photoURL",e.photoURL))})),wh(e)})).then(Ih))},e.ad=function(t){var e=this;return Vh(this,Dh(this).then((function(n){return H(Ah(e),t)?function(t,e,n){return Qa(t,Ta,{idToken:e,deleteProvider:n})}(e.a,n,[t]).then((function(t){var n={};return G(t.providerUserInfo||[],(function(t){n[t.providerId]=!0})),G(Ah(e),(function(t){n[t]||Sh(e,t)})),n[Ro.PROVIDER_ID]||Hr(e,"phoneNumber",null),wh(e)})):wh(e).then((function(){throw new A("no-such-provider")}))})))},e.delete=function(){var t=this;return Vh(this,this.I().then((function(e){return Qa(t.a,Ia,{idToken:e})})).then((function(){t.dispatchEvent(new nh("userDeleted"))}))).then((function(){for(var e=0;e<t.N.length;e++)t.N[e].cancel("app-deleted");ph(t,null),vh(t,null),t.N=[],t.D=!0,mh(t),Hr(t,"refreshToken",null),t.i&&Oc(t.i,t)}))},e.Cb=function(t,e){return!!("linkViaPopup"==t&&(this.g||null)==e&&this.f||"reauthViaPopup"==t&&(this.g||null)==e&&this.f||"linkViaRedirect"==t&&(this.fa||null)==e||"reauthViaRedirect"==t&&(this.fa||null)==e)},e.la=function(t,e,n,r){"linkViaPopup"!=t&&"reauthViaPopup"!=t||r!=(this.g||null)||(n&&this.w?this.w(n):e&&!n&&this.f&&this.f(e),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.w)},e.Da=function(t,e){return"linkViaPopup"==t&&e==(this.g||null)?E(this.Hb,this):"reauthViaPopup"==t&&e==(this.g||null)?E(this.Ib,this):"linkViaRedirect"==t&&(this.fa||null)==e?E(this.Hb,this):"reauthViaRedirect"==t&&(this.fa||null)==e?E(this.Ib,this):null},e.Cc=function(t){var e=this;return Lh(this,"linkViaPopup",t,(function(){return Ch(e,t.providerId).then((function(){return wh(e)}))}),!1)},e.Lc=function(t){return Lh(this,"reauthViaPopup",t,(function(){return Se()}),!0)},e.Dc=function(t){var e=this;return jh(this,"linkViaRedirect",t,(function(){return Ch(e,t.providerId)}),!1)},e.Mc=function(t){return jh(this,"reauthViaRedirect",t,(function(){return Se()}),!0)},e.Hb=function(t,e,n,r){var i=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return Vh(this,this.I().then((function(n){return ya(i.a,{requestUri:t,postBody:r,sessionId:e,idToken:n})})).then((function(t){return o=xh(i,t,"link"),Rh(i,t)})).then((function(){return o})))},e.Ib=function(t,e,n,r){var i=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return Vh(this,Se().then((function(){return ao(ga(i.a,{requestUri:t,sessionId:e,postBody:r,tenantId:n}),i.uid)})).then((function(t){return o=xh(i,t,"reauthenticate"),Ph(i,t),i.h=null,i.reload()})).then((function(){return o})),!0)},e.qb=function(t){var e=this,n=null;return Vh(this,this.I().then((function(e){return n=e,void 0===t||pt(t)?{}:Mi(new Si(t))})).then((function(t){return e.a.qb(n,t)})).then((function(t){if(e.email!=t)return e.reload()})).then((function(){})))},e.Ab=function(t,e){var n=this,r=null;return Vh(this,this.I().then((function(t){return r=t,void 0===e||pt(e)?{}:Mi(new Si(e))})).then((function(e){return n.a.Ab(r,t,e)})).then((function(t){if(n.email!=t)return n.reload()})).then((function(){})))},e.hc=function(t){var e=null,n=this;return Vh(this,t=ao(Se(t),n.uid).then((function(t){return e=xh(n,t,"reauthenticate"),Ph(n,t),n.h=null,n.reload()})).then((function(){return e})),!0)},e.toJSON=function(){return this.v()},e.v=function(){var t={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,tenantId:this.tenantId,providerData:[],apiKey:this.l,appName:this.m,authDomain:this.s,stsTokenManager:this.b.v(),redirectEventId:this.fa||null};return this.metadata&&yt(t,this.metadata.v()),G(this.providerData,(function(e){t.providerData.push(function(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&(n[e]=t[e]);return n}(e))})),yt(t,this.O.v()),t};var qh={name:"redirectUser",F:"session"};function Bh(t){return Qu(t.b,qh,t.a)}function Gh(t){this.a=t,this.b=Xu(),this.c=null,this.f=function(t){var e=Kh("local"),n=Kh("session"),r=Kh("none");return function(t,e,n){var r=$u(e,n),i=Ju(t,e.F);return t.get(e,n).then((function(o){var s=null;try{s=Lr(u.localStorage.getItem(r))}catch(t){}if(s&&!o)return u.localStorage.removeItem(r),t.set(e,s,n);s&&o&&"localStorage"!=i.type&&u.localStorage.removeItem(r)}))}(t.b,e,t.a).then((function(){return t.b.get(n,t.a)})).then((function(i){return i?n:t.b.get(r,t.a).then((function(n){return n?r:t.b.get(e,t.a).then((function(n){return n?e:t.b.get(zh,t.a).then((function(t){return t?Kh(t):e}))}))}))})).then((function(e){return t.c=e,Wh(t,e.F)})).o((function(){t.c||(t.c=e)}))}(this),this.b.addListener(Kh("local"),this.a,E(this.g,this))}function Wh(t,e){var n,r=[];for(n in Hu)Hu[n]!==e&&r.push(Qu(t.b,Kh(Hu[n]),t.a));return r.push(Qu(t.b,zh,t.a)),function(t){return new we((function(e,n){var r=t.length,i=[];if(r)for(var o=function(t,n){r--,i[t]=n,0==r&&e(i)},s=function(t){n(t)},a=0;a<t.length;a++)Oe(t[a],_(o,a),s);else e(i)}))}(r)}Gh.prototype.g=function(){var t=this,e=Kh("local");Jh(this,(function(){return Se().then((function(){return t.c&&"local"!=t.c.F?t.b.get(e,t.a):null})).then((function(n){if(n)return Wh(t,"local").then((function(){t.c=e}))}))}))};var zh={name:"persistence",F:"session"};function Kh(t){return{name:"authUser",F:t}}function Hh(t,e){return Jh(t,(function(){return t.b.set(t.c,e.v(),t.a)}))}function Yh(t){return Jh(t,(function(){return Qu(t.b,t.c,t.a)}))}function Xh(t,e){return Jh(t,(function(){return t.b.get(t.c,t.a).then((function(t){return t&&e&&(t.authDomain=e),Uh(t||{})}))}))}function Jh(t,e){return t.f=t.f.then(e,e),t.f}function $h(t){if(this.l=!1,Hr(this,"settings",new Wc),Hr(this,"app",t),!sf(this).options||!sf(this).options.apiKey)throw new A("invalid-api-key");t=r.a.SDK_VERSION?Ar(r.a.SDK_VERSION):null,this.b=new Hs(sf(this).options&&sf(this).options.apiKey,P(S),t),this.P=[],this.m=[],this.O=[],this.$b=r.a.INTERNAL.createSubscribe(E(this.xc,this)),this.W=void 0,this.ac=r.a.INTERNAL.createSubscribe(E(this.yc,this)),rf(this,null),this.i=new Gh(sf(this).options.apiKey+":"+sf(this).name),this.B=new Fh(sf(this).options.apiKey+":"+sf(this).name),this.Z=hf(this,function(t){var e=sf(t).options.authDomain,n=function(t){var e=function(t,e){return t.b.get(qh,t.a).then((function(t){return t&&e&&(t.authDomain=e),Uh(t||{})}))}(t.B,sf(t).options.authDomain).then((function(e){return(t.D=e)&&(e.ga=t.B),Bh(t.B)}));return hf(t,e)}(t).then((function(){return Xh(t.i,e)})).then((function(e){return e?(e.ga=t.B,t.D&&(t.D.fa||null)==(e.fa||null)?e:e.reload().then((function(){return Hh(t.i,e).then((function(){return e}))})).o((function(n){return"auth/network-request-failed"==n.code?e:Yh(t.i)}))):null})).then((function(e){rf(t,e||null)}));return hf(t,n)}(this)),this.h=hf(this,function(t){return t.Z.then((function(){return ef(t)})).o((function(){})).then((function(){if(!t.l)return t.oa()})).o((function(){})).then((function(){if(!t.l){t.aa=!0;var e=t.i;e.b.addListener(Kh("local"),e.a,t.oa)}}))}(this)),this.aa=!1,this.oa=E(this.Xc,this),this.Ma=E(this.ca,this),this.xa=E(this.jc,this),this.ya=E(this.uc,this),this.za=E(this.vc,this),this.a=null,function(t){var e=sf(t).options.authDomain,n=sf(t).options.apiKey;e&&Or()&&(t.Zb=t.Z.then((function(){if(!t.l){if(t.a=Mc(e,n,sf(t).name),kc(t.a,t),af(t)&&Eh(af(t)),t.D){Eh(t.D);var r=t.D;r.va(t.ja()),ph(r,t),dh(r=t.D,t.N),vh(r,t),t.D=null}return t.a}})))}(this),this.INTERNAL={},this.INTERNAL.delete=E(this.delete,this),this.INTERNAL.logFramework=E(this.Ec,this),this.s=0,wn.call(this),function(t){Object.defineProperty(t,"lc",{get:function(){return this.ja()},set:function(t){this.va(t)},enumerable:!1}),t.$=null,Object.defineProperty(t,"ti",{get:function(){return this.S()},set:function(t){this.ub(t)},enumerable:!1}),t.R=null}(this),this.N=[]}function Qh(t){Xe.call(this,"languageCodeChanged"),this.g=t}function Zh(t){Xe.call(this,"frameworkChanged"),this.c=t}function tf(t){return t.Zb||ke(new A("auth-domain-config-required"))}function ef(t){if(!Or())return ke(new A("operation-not-supported-in-this-environment"));var e=tf(t).then((function(){return t.a.pa()})).then((function(t){return t?Xr(t):null}));return hf(t,e)}function nf(t,e){var n={};return n.apiKey=sf(t).options.apiKey,n.authDomain=sf(t).options.authDomain,n.appName=sf(t).name,t.Z.then((function(){return function(t,e,n,r){var i=new lh(t,e);return n&&(i.ga=n),r&&dh(i,r),i.reload().then((function(){return i}))}(n,e,t.B,t.Ea())})).then((function(e){return af(t)&&e.uid==af(t).uid?(Oh(af(t),e),t.ca(e)):(rf(t,e),Eh(e),t.ca(e))})).then((function(){cf(t)}))}function rf(t,e){af(t)&&(function(t,e){X(t.R,(function(t){return t==e}))}(af(t),t.Ma),fn(af(t),"tokenChanged",t.xa),fn(af(t),"userDeleted",t.ya),fn(af(t),"userInvalidated",t.za),mh(af(t))),e&&(e.R.push(t.Ma),un(e,"tokenChanged",t.xa),un(e,"userDeleted",t.ya),un(e,"userInvalidated",t.za),0<t.s&&gh(e)),Hr(t,"currentUser",e),e&&(e.va(t.ja()),ph(e,t),dh(e,t.N),vh(e,t))}function of(t,e){var n=null,r=null;return hf(t,e.then((function(e){return n=jo(e),r=Hi(e),nf(t,e)}),(function(e){var n=null;throw e&&"auth/multi-factor-auth-required"===e.code&&(n=Qc(e.v(),t,E(t.ic,t))),n||e})).then((function(){return Xr({user:af(t),credential:n,additionalUserInfo:r,operationType:"signIn"})})))}function sf(t){return t.app}function af(t){return t.currentUser}function uf(t){return af(t)&&af(t)._lat||null}function cf(t){if(t.aa){for(var e=0;e<t.m.length;e++)t.m[e]&&t.m[e](uf(t));if(t.W!==t.getUid()&&t.O.length)for(t.W=t.getUid(),e=0;e<t.O.length;e++)t.O[e]&&t.O[e](uf(t))}}function hf(t,e){return t.P.push(e),e.ma((function(){Y(t.P,e)})),e}function ff(){}function lf(){this.a={},this.b=1e12}Gh.prototype.tb=function(t){var e=null,n=this;return function(t){var e=new A("invalid-persistence-type"),n=new A("unsupported-persistence-type");t:{for(r in Hu)if(Hu[r]==t){var r=!0;break t}r=!1}if(!r||"string"!=typeof t)throw e;switch(br()){case"ReactNative":if("session"===t)throw n;break;case"Node":if("none"!==t)throw n;break;case"Worker":if("session"===t||!Nu()&&"none"!==t)throw n;break;default:if(!kr()&&"none"!==t)throw n}}(t),Jh(this,(function(){return t!=n.c.F?n.b.get(n.c,n.a).then((function(r){return e=r,Wh(n,t)})).then((function(){if(n.c=Kh(t),e)return n.b.set(n.c,e,n.a)})):Se()}))},T($h,wn),T(Qh,Xe),T(Zh,Xe),(e=$h.prototype).tb=function(t){return hf(this,t=this.i.tb(t))},e.va=function(t){this.$===t||this.l||(this.$=t,ta(this.b,this.$),this.dispatchEvent(new Qh(this.ja())))},e.ja=function(){return this.$},e.dd=function(){var t=u.navigator;this.va(t&&(t.languages&&t.languages[0]||t.language||t.userLanguage)||null)},e.Ec=function(t){this.N.push(t),ea(this.b,r.a.SDK_VERSION?Ar(r.a.SDK_VERSION,this.N):null),this.dispatchEvent(new Zh(this.N))},e.Ea=function(){return $(this.N)},e.ub=function(t){this.R===t||this.l||(this.R=t,this.b.b=this.R)},e.S=function(){return this.R},e.toJSON=function(){return{apiKey:sf(this).options.apiKey,authDomain:sf(this).options.authDomain,appName:sf(this).name,currentUser:af(this)&&af(this).v()}},e.Cb=function(t,e){switch(t){case"unknown":case"signInViaRedirect":return!0;case"signInViaPopup":return this.g==e&&!!this.f;default:return!1}},e.la=function(t,e,n,r){"signInViaPopup"==t&&this.g==r&&(n&&this.w?this.w(n):e&&!n&&this.f&&this.f(e),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.w)},e.Da=function(t,e){return"signInViaRedirect"==t||"signInViaPopup"==t&&this.g==e&&this.f?E(this.gc,this):null},e.gc=function(t,e,n,r){var i=this,o={requestUri:t,postBody:r,sessionId:e,tenantId:n};return this.c&&(this.c.cancel(),this.c=null),i.Z.then((function(){return of(i,va(i.b,o))}))},e.Vc=function(t){if(!Or())return ke(new A("operation-not-supported-in-this-environment"));var e=this,n=Ki(t.providerId),i=jr(),o=null;(!Cr()||gr())&&sf(this).options.authDomain&&t.isOAuthProvider&&(o=pu(sf(this).options.authDomain,sf(this).options.apiKey,sf(this).name,"signInViaPopup",t,null,i,r.a.SDK_VERSION||null,null,null,this.S()));var s=lr(o,n&&n.ta,n&&n.sa);return hf(this,n=tf(this).then((function(n){return Cc(n,s,"signInViaPopup",t,i,!!o,e.S())})).then((function(){return new we((function(t,n){e.la("signInViaPopup",null,new A("cancelled-popup-request"),e.g),e.f=t,e.w=n,e.g=i,e.c=Lc(e.a,e,"signInViaPopup",s,i)}))})).then((function(t){return s&&fr(s),t?Xr(t):null})).o((function(t){throw s&&fr(s),t})))},e.Wc=function(t){if(!Or())return ke(new A("operation-not-supported-in-this-environment"));var e=this;return hf(this,tf(this).then((function(){return function(t){return Jh(t,(function(){return t.b.set(zh,t.c.F,t.a)}))}(e.i)})).then((function(){return Rc(e.a,"signInViaRedirect",t,void 0,e.S())})))},e.pa=function(){var t=this;return ef(this).then((function(e){return t.a&&Fc(t.a.b),e})).o((function(e){throw t.a&&Fc(t.a.b),e}))},e.bd=function(t){if(!t)return ke(new A("null-user"));if(this.R!=t.tenantId)return ke(new A("tenant-id-mismatch"));var e=this,n={};n.apiKey=sf(this).options.apiKey,n.authDomain=sf(this).options.authDomain,n.appName=sf(this).name;var r=function(t,e,n,r){var i=t.b,o={};return o[Xs]=i.b&&i.b.toString(),o.refreshToken=i.a,e=new lh(e||{apiKey:t.l,authDomain:t.s,appName:t.m},o),n&&(e.ga=n),r&&dh(e,r),Oh(e,t),e}(t,n,e.B,e.Ea());return hf(this,this.h.then((function(){if(sf(e).options.apiKey!=t.l)return r.reload()})).then((function(){return af(e)&&t.uid==af(e).uid?(Oh(af(e),t),e.ca(t)):(rf(e,r),Eh(r),e.ca(r))})).then((function(){cf(e)})))},e.wb=function(){var t=this;return hf(this,this.h.then((function(){return t.a&&Fc(t.a.b),af(t)?(rf(t,null),Yh(t.i).then((function(){cf(t)}))):Se()})))},e.Xc=function(){var t=this;return Xh(this.i,sf(this).options.authDomain).then((function(e){if(!t.l){var n;if(n=af(t)&&e){n=af(t).uid;var r=e.uid;n=null!=n&&""!==n&&null!=r&&""!==r&&n==r}if(n)return Oh(af(t),e),af(t).I();(af(t)||e)&&(rf(t,e),e&&(Eh(e),e.ga=t.B),t.a&&kc(t.a,t),cf(t))}}))},e.ca=function(t){return Hh(this.i,t)},e.jc=function(){cf(this),this.ca(af(this))},e.uc=function(){this.wb()},e.vc=function(){this.wb()},e.ic=function(t){var e=this;return this.h.then((function(){return of(e,Se(t))}))},e.xc=function(t){var e=this;this.addAuthTokenListener((function(){t.next(af(e))}))},e.yc=function(t){var e=this;!function(t,e){t.O.push(e),hf(t,t.h.then((function(){!t.l&&H(t.O,e)&&t.W!==t.getUid()&&(t.W=t.getUid(),e(uf(t)))})))}(this,(function(){t.next(af(e))}))},e.Gc=function(t,e,n){var r=this;return this.aa&&Promise.resolve().then((function(){d(t)?t(af(r)):d(t.next)&&t.next(af(r))})),this.$b(t,e,n)},e.Fc=function(t,e,n){var r=this;return this.aa&&Promise.resolve().then((function(){r.W=r.getUid(),d(t)?t(af(r)):d(t.next)&&t.next(af(r))})),this.ac(t,e,n)},e.kc=function(t){var e=this;return hf(this,this.h.then((function(){return af(e)?af(e).I(t).then((function(t){return{accessToken:t}})):null})))},e.Rc=function(t){var e=this;return this.h.then((function(){return of(e,Qa(e.b,Ka,{token:t}))})).then((function(t){var n=t.user;return kh(n,"isAnonymous",!1),e.ca(n),t}))},e.Sc=function(t,e){var n=this;return this.h.then((function(){return of(n,Qa(n.b,Ha,{email:t,password:e}))}))},e.cc=function(t,e){var n=this;return this.h.then((function(){return of(n,Qa(n.b,Ea,{email:t,password:e}))}))},e.Ya=function(t){var e=this;return this.h.then((function(){return of(e,t.ia(e.b))}))},e.Qc=function(t){return zr("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead."),this.Ya(t)},e.vb=function(){var t=this;return this.h.then((function(){var e=af(t);if(e&&e.isAnonymous){var n=Xr({providerId:null,isNewUser:!1});return Xr({user:e,credential:null,additionalUserInfo:n,operationType:"signIn"})}return of(t,t.b.vb()).then((function(e){var n=e.user;return kh(n,"isAnonymous",!0),t.ca(n),e}))}))},e.getUid=function(){return af(this)&&af(this).uid||null},e.bc=function(t){this.addAuthTokenListener(t),this.s++,0<this.s&&af(this)&&gh(af(this))},e.Nc=function(t){var e=this;G(this.m,(function(n){n==t&&e.s--})),0>this.s&&(this.s=0),0==this.s&&af(this)&&mh(af(this)),this.removeAuthTokenListener(t)},e.addAuthTokenListener=function(t){var e=this;this.m.push(t),hf(this,this.h.then((function(){e.l||H(e.m,t)&&t(uf(e))})))},e.removeAuthTokenListener=function(t){X(this.m,(function(e){return e==t}))},e.delete=function(){this.l=!0;for(var t=0;t<this.P.length;t++)this.P[t].cancel("app-deleted");return this.P=[],this.i&&(t=this.i).b.removeListener(Kh("local"),t.a,this.oa),this.a&&(Oc(this.a,this),Fc(this.a.b)),Promise.resolve()},e.fc=function(t){return hf(this,function(t,e){return Qa(t,_a,{identifier:e,continueUri:Dr()?ur():"http://localhost"}).then((function(t){return t.signinMethods||[]}))}(this.b,t))},e.zc=function(t){return!!Do(t)},e.sb=function(t,e){var n=this;return hf(this,Se().then((function(){var t=new Si(e);if(!t.c)throw new A("argument-error",Di+" must be true when sending sign in link to email");return Mi(t)})).then((function(e){return n.b.sb(t,e)})).then((function(){})))},e.fd=function(t){return this.Pa(t).then((function(t){return t.data.email}))},e.jb=function(t,e){return hf(this,this.b.jb(t,e).then((function(){})))},e.Pa=function(t){return hf(this,this.b.Pa(t).then((function(t){return new ii(t)})))},e.fb=function(t){return hf(this,this.b.fb(t).then((function(){})))},e.rb=function(t,e){var n=this;return hf(this,Se().then((function(){return void 0===e||pt(e)?{}:Mi(new Si(e))})).then((function(e){return n.b.rb(t,e)})).then((function(){})))},e.Uc=function(t,e){return hf(this,Kc(this,t,e,E(this.Ya,this)))},e.Tc=function(t,e){var n=this;return hf(this,Se().then((function(){var r=e||ur(),i=Oo(t,r);if(!(r=Do(r)))throw new A("argument-error","Invalid email link!");if(r.tenantId!==n.S())throw new A("tenant-id-mismatch");return n.Ya(i)})))},ff.prototype.render=function(){},ff.prototype.reset=function(){},ff.prototype.getResponse=function(){},ff.prototype.execute=function(){};var pf=null;function df(t,e){return(e=vf(e))&&t.a[e]||null}function vf(t){return(t=void 0===t?1e12:t)?t.toString():null}function yf(t,e){this.g=!1,this.c=e,this.a=this.b=null,this.h="invisible"!==this.c.size,this.f=se(t);var n=this;this.i=function(){n.execute()},this.h?this.execute():un(this.f,"click",this.i)}function gf(t){if(t.g)throw Error("reCAPTCHA mock was already deleted!")}function mf(){}function bf(){}lf.prototype.render=function(t,e){return this.a[this.b.toString()]=new yf(t,e),this.b++},lf.prototype.reset=function(t){var e=df(this,t);t=vf(t),e&&t&&(e.delete(),delete this.a[t])},lf.prototype.getResponse=function(t){return(t=df(this,t))?t.getResponse():null},lf.prototype.execute=function(t){(t=df(this,t))&&t.execute()},yf.prototype.getResponse=function(){return gf(this),this.b},yf.prototype.execute=function(){gf(this);var t=this;this.a||(this.a=setTimeout((function(){t.b=function(){for(var t=50,e=[];0<t;)e.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),t--;return e.join("")}();var e=t.c.callback,n=t.c["expired-callback"];if(e)try{e(t.b)}catch(t){}t.a=setTimeout((function(){if(t.a=null,t.b=null,n)try{n()}catch(t){}t.h&&t.execute()}),6e4)}),500))},yf.prototype.delete=function(){gf(this),this.g=!0,clearTimeout(this.a),this.a=null,fn(this.f,"click",this.i)},Hr(mf,"FACTOR_ID","phone"),bf.prototype.g=function(){return pf||(pf=new lf),Se(pf)},bf.prototype.c=function(){};var wf=null;function Ef(){this.b=u.grecaptcha?1/0:0,this.f=null,this.a="__rcb"+Math.floor(1e6*Math.random()).toString()}var _f=new mt(Et,"https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),If=new Ur(3e4,6e4);Ef.prototype.g=function(t){var e=this;return new we((function(n,r){var i=setTimeout((function(){r(new A("network-request-failed"))}),If.get());!u.grecaptcha||t!==e.f&&!e.b?(u[e.a]=function(){if(u.grecaptcha){e.f=t;var o=u.grecaptcha.render;u.grecaptcha.render=function(t,n){return t=o(t,n),e.b++,t},clearTimeout(i),n(u.grecaptcha)}else clearTimeout(i),r(new A("internal-error"));delete u[e.a]},Se(Fs(At(_f,{onload:e.a,hl:t||""}))).o((function(){clearTimeout(i),r(new A("internal-error","Unable to load external reCAPTCHA dependencies!"))}))):(clearTimeout(i),n(u.grecaptcha))}))},Ef.prototype.c=function(){this.b--};var Tf=null;function Af(t,e,n,r,i,o,s){if(Hr(this,"type","recaptcha"),this.c=this.f=null,this.D=!1,this.u=e,this.g=null,s?(wf||(wf=new bf),s=wf):(Tf||(Tf=new Ef),s=Tf),this.m=s,this.a=n||{theme:"light",type:"image"},this.h=[],this.a[kf])throw new A("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");if(this.i="invisible"===this.a[Of],!u.document)throw new A("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");if(!se(e)||!this.i&&se(e).hasChildNodes())throw new A("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.s=new Hs(t,o||null,i||null),this.w=r||function(){return null};var a=this;this.l=[];var c=this.a[Nf];this.a[Nf]=function(t){if(Df(a,t),"function"==typeof c)c(t);else if("string"==typeof c){var e=Sr(c,u);"function"==typeof e&&e(t)}};var h=this.a[Sf];this.a[Sf]=function(){if(Df(a,null),"function"==typeof h)h();else if("string"==typeof h){var t=Sr(h,u);"function"==typeof t&&t()}}}var Nf="callback",Sf="expired-callback",kf="sitekey",Of="size";function Df(t,e){for(var n=0;n<t.l.length;n++)try{t.l[n](e)}catch(t){}}function Pf(t,e){return t.h.push(e),e.ma((function(){Y(t.h,e)})),e}function Cf(t){if(t.D)throw new A("internal-error","RecaptchaVerifier instance has been destroyed.")}function xf(t,e,n){var i=!1;try{this.b=n||r.a.app()}catch(t){throw new A("argument-error","No firebase.app.App instance is currently initialized.")}if(!this.b.options||!this.b.options.apiKey)throw new A("invalid-api-key");n=this.b.options.apiKey;var o=this,s=null;try{s=this.b.auth().Ea()}catch(t){}try{i=this.b.auth().settings.appVerificationDisabledForTesting}catch(t){}s=r.a.SDK_VERSION?Ar(r.a.SDK_VERSION,s):null,Af.call(this,n,t,e,(function(){try{var t=o.b.auth().ja()}catch(e){t=null}return t}),s,P(S),i)}function Rf(t,e,n,r){t:{n=Array.prototype.slice.call(n);for(var i=0,o=!1,s=0;s<e.length;s++)if(e[s].optional)o=!0;else{if(o)throw new A("internal-error","Argument validator encountered a required argument after an optional argument.");i++}if(o=e.length,n.length<i||o<n.length)r="Expected "+(i==o?1==i?"1 argument":i+" arguments":i+"-"+o+" arguments")+" but got "+n.length+".";else{for(i=0;i<n.length;i++)if(o=e[i].optional&&void 0===n[i],!e[i].K(n[i])&&!o){if(e=e[i],0>i||i>=Lf.length)throw new A("internal-error","Argument validator received an unsupported number of arguments.");n=Lf[i],r=(r?"":n+" argument ")+(e.name?'"'+e.name+'" ':"")+"must be "+e.J+".";break t}r=null}}if(r)throw new A("argument-error",t+" failed: "+r)}(e=Af.prototype).Ga=function(){var t=this;return this.f?this.f:this.f=Pf(this,Se().then((function(){if(Dr()&&!mr())return vr();throw new A("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.")})).then((function(){return t.m.g(t.w())})).then((function(e){return t.g=e,Qa(t.s,La,{})})).then((function(e){t.a[kf]=e.recaptchaSiteKey})).o((function(e){throw t.f=null,e})))},e.render=function(){Cf(this);var t=this;return Pf(this,this.Ga().then((function(){if(null===t.c){var e=t.u;if(!t.i){var n=se(e);e=function(t,e,n){var r=arguments,i=document,o=String(r[0]),s=r[1];if(!oe&&s&&(s.name||s.type)){if(o=["<",o],s.name&&o.push(' name="',Bt(s.name),'"'),s.type){o.push(' type="',Bt(s.type),'"');var a={};yt(a,s),delete a.type,s=a}o.push(">"),o=o.join("")}return o=le(i,o),s&&("string"==typeof s?o.className=s:Array.isArray(s)?o.className=s.join(" "):ae(o,s)),2<r.length&&fe(i,o,r),o}("DIV"),n.appendChild(e)}t.c=t.g.render(e,t.a)}return t.c})))},e.verify=function(){Cf(this);var t=this;return Pf(this,this.render().then((function(e){return new we((function(n){var r=t.g.getResponse(e);if(r)n(r);else{var i=function(e){e&&(function(t,e){X(t.l,(function(t){return t==e}))}(t,i),n(e))};t.l.push(i),t.i&&t.g.execute(t.c)}}))})))},e.reset=function(){Cf(this),null!==this.c&&this.g.reset(this.c)},e.clear=function(){Cf(this),this.D=!0,this.m.c();for(var t=0;t<this.h.length;t++)this.h[t].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.i){t=se(this.u);for(var e;e=t.firstChild;)t.removeChild(e)}},T(xf,Af);var Lf="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function jf(t,e){return{name:t||"",J:"a valid string",optional:!!e,K:function(t){return"string"==typeof t}}}function Mf(t,e){return{name:t||"",J:"a boolean",optional:!!e,K:function(t){return"boolean"==typeof t}}}function Vf(t,e){return{name:t||"",J:"a valid object",optional:!!e,K:v}}function Uf(t,e){return{name:t||"",J:"a function",optional:!!e,K:d}}function Ff(t,e){return{name:t||"",J:"null",optional:!!e,K:function(t){return null===t}}}function qf(t){return{name:t?t+"Credential":"credential",J:t?"a valid "+t+" credential":"a valid credential",optional:!1,K:function(e){if(!e)return!1;var n=!t||e.providerId===t;return!(!e.ia||!n)}}}function Bf(t,e){return v(t)&&"string"==typeof t.type&&t.type===e&&d(t.Fa)}function Gf(t){return v(t)&&"string"==typeof t.uid}function Wf(){return{name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(t){return!(!t||"string"!=typeof t.type||!d(t.verify))}}}function zf(t,e,n,r){return{name:n||"",J:t.J+" or "+e.J,optional:!!r,K:function(n){return t.K(n)||e.K(n)}}}function Kf(t,e){for(var n in e){var r=e[n].name;t[r]=Xf(r,t[n],e[n].j)}}function Hf(t,e){for(var n in e){var r=e[n].name;r!==n&&Object.defineProperty(t,r,{get:_((function(t){return this[t]}),n),set:_((function(t,e,n,r){Rf(t,[n],[r],!0),this[e]=r}),r,n,e[n].gb),enumerable:!0})}}function Yf(t,e,n,r){t[e]=Xf(e,n,r)}function Xf(t,e,n){function r(){var t=Array.prototype.slice.call(arguments);return Rf(o,n,t),e.apply(this,t)}if(!n)return e;var i,o=function(t){return(t=t.split("."))[t.length-1]}(t);for(i in e)r[i]=e[i];for(i in e.prototype)r.prototype[i]=e.prototype[i];return r}Kf($h.prototype,{fb:{name:"applyActionCode",j:[jf("code")]},Pa:{name:"checkActionCode",j:[jf("code")]},jb:{name:"confirmPasswordReset",j:[jf("code"),jf("newPassword")]},cc:{name:"createUserWithEmailAndPassword",j:[jf("email"),jf("password")]},fc:{name:"fetchSignInMethodsForEmail",j:[jf("email")]},pa:{name:"getRedirectResult",j:[]},zc:{name:"isSignInWithEmailLink",j:[jf("emailLink")]},Fc:{name:"onAuthStateChanged",j:[zf(Vf(),Uf(),"nextOrObserver"),Uf("opt_error",!0),Uf("opt_completed",!0)]},Gc:{name:"onIdTokenChanged",j:[zf(Vf(),Uf(),"nextOrObserver"),Uf("opt_error",!0),Uf("opt_completed",!0)]},rb:{name:"sendPasswordResetEmail",j:[jf("email"),zf(Vf("opt_actionCodeSettings",!0),Ff(null,!0),"opt_actionCodeSettings",!0)]},sb:{name:"sendSignInLinkToEmail",j:[jf("email"),Vf("actionCodeSettings")]},tb:{name:"setPersistence",j:[jf("persistence")]},Qc:{name:"signInAndRetrieveDataWithCredential",j:[qf()]},vb:{name:"signInAnonymously",j:[]},Ya:{name:"signInWithCredential",j:[qf()]},Rc:{name:"signInWithCustomToken",j:[jf("token")]},Sc:{name:"signInWithEmailAndPassword",j:[jf("email"),jf("password")]},Tc:{name:"signInWithEmailLink",j:[jf("email"),jf("emailLink",!0)]},Uc:{name:"signInWithPhoneNumber",j:[jf("phoneNumber"),Wf()]},Vc:{name:"signInWithPopup",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Wc:{name:"signInWithRedirect",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},bd:{name:"updateCurrentUser",j:[zf({name:"user",J:"an instance of Firebase User",optional:!1,K:function(t){return!!(t&&t instanceof lh)}},Ff(),"user")]},wb:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[jf(null,!0)]},dd:{name:"useDeviceLanguage",j:[]},fd:{name:"verifyPasswordResetCode",j:[jf("code")]}}),Hf($h.prototype,{lc:{name:"languageCode",gb:zf(jf(),Ff(),"languageCode")},ti:{name:"tenantId",gb:zf(jf(),Ff(),"tenantId")}}),$h.Persistence=Hu,$h.Persistence.LOCAL="local",$h.Persistence.SESSION="session",$h.Persistence.NONE="none",Kf(lh.prototype,{delete:{name:"delete",j:[]},mc:{name:"getIdTokenResult",j:[Mf("opt_forceRefresh",!0)]},I:{name:"getIdToken",j:[Mf("opt_forceRefresh",!0)]},Ac:{name:"linkAndRetrieveDataWithCredential",j:[qf()]},mb:{name:"linkWithCredential",j:[qf()]},Bc:{name:"linkWithPhoneNumber",j:[jf("phoneNumber"),Wf()]},Cc:{name:"linkWithPopup",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Dc:{name:"linkWithRedirect",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Jc:{name:"reauthenticateAndRetrieveDataWithCredential",j:[qf()]},pb:{name:"reauthenticateWithCredential",j:[qf()]},Kc:{name:"reauthenticateWithPhoneNumber",j:[jf("phoneNumber"),Wf()]},Lc:{name:"reauthenticateWithPopup",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Mc:{name:"reauthenticateWithRedirect",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},reload:{name:"reload",j:[]},qb:{name:"sendEmailVerification",j:[zf(Vf("opt_actionCodeSettings",!0),Ff(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[jf(null,!0)]},ad:{name:"unlink",j:[jf("provider")]},xb:{name:"updateEmail",j:[jf("email")]},yb:{name:"updatePassword",j:[jf("password")]},cd:{name:"updatePhoneNumber",j:[qf("phone")]},zb:{name:"updateProfile",j:[Vf("profile")]},Ab:{name:"verifyBeforeUpdateEmail",j:[jf("email"),zf(Vf("opt_actionCodeSettings",!0),Ff(null,!0),"opt_actionCodeSettings",!0)]}}),Kf(lf.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),Kf(ff.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),Kf(we.prototype,{ma:{name:"finally"},o:{name:"catch"},then:{name:"then"}}),Hf(Wc.prototype,{appVerificationDisabled:{name:"appVerificationDisabledForTesting",gb:Mf("appVerificationDisabledForTesting")}}),Kf(zc.prototype,{confirm:{name:"confirm",j:[jf("verificationCode")]}}),Yf(so,"fromJSON",(function(t){t="string"==typeof t?JSON.parse(t):t;for(var e,n=[po,So,Co,ho],r=0;r<n.length;r++)if(e=n[r](t))return e;return null}),[zf(jf(),Vf(),"json")]),Yf(ko,"credential",(function(t,e){return new No(t,e)}),[jf("email"),jf("password")]),Kf(No.prototype,{v:{name:"toJSON",j:[jf(null,!0)]}}),Kf(mo.prototype,{Aa:{name:"addScope",j:[jf("scope")]},Ia:{name:"setCustomParameters",j:[Vf("customOAuthParameters")]}}),Yf(mo,"credential",bo,[zf(jf(),Vf(),"token")]),Yf(ko,"credentialWithLink",Oo,[jf("email"),jf("emailLink")]),Kf(wo.prototype,{Aa:{name:"addScope",j:[jf("scope")]},Ia:{name:"setCustomParameters",j:[Vf("customOAuthParameters")]}}),Yf(wo,"credential",Eo,[zf(jf(),Vf(),"token")]),Kf(_o.prototype,{Aa:{name:"addScope",j:[jf("scope")]},Ia:{name:"setCustomParameters",j:[Vf("customOAuthParameters")]}}),Yf(_o,"credential",Io,[zf(jf(),zf(Vf(),Ff()),"idToken"),zf(jf(),Ff(),"accessToken",!0)]),Kf(To.prototype,{Ia:{name:"setCustomParameters",j:[Vf("customOAuthParameters")]}}),Yf(To,"credential",Ao,[zf(jf(),Vf(),"token"),jf("secret",!0)]),Kf(go.prototype,{Aa:{name:"addScope",j:[jf("scope")]},credential:{name:"credential",j:[zf(jf(),zf(Vf(),Ff()),"optionsOrIdToken"),zf(jf(),Ff(),"accessToken",!0)]},Ia:{name:"setCustomParameters",j:[Vf("customOAuthParameters")]}}),Kf(fo.prototype,{v:{name:"toJSON",j:[jf(null,!0)]}}),Kf(uo.prototype,{v:{name:"toJSON",j:[jf(null,!0)]}}),Yf(Ro,"credential",Lo,[jf("verificationId"),jf("verificationCode")]),Kf(Ro.prototype,{cb:{name:"verifyPhoneNumber",j:[zf(jf(),{name:"phoneInfoOptions",J:"valid phone info options",optional:!1,K:function(t){return!!t&&(t.session&&t.phoneNumber?Bf(t.session,io)&&"string"==typeof t.phoneNumber:t.session&&t.multiFactorHint?Bf(t.session,oo)&&Gf(t.multiFactorHint):t.session&&t.multiFactorUid?Bf(t.session,oo)&&"string"==typeof t.multiFactorUid:!!t.phoneNumber&&"string"==typeof t.phoneNumber)}},"phoneInfoOptions"),Wf()]}}),Kf(Po.prototype,{v:{name:"toJSON",j:[jf(null,!0)]}}),Kf(A.prototype,{toJSON:{name:"toJSON",j:[jf(null,!0)]}}),Kf(Wo.prototype,{toJSON:{name:"toJSON",j:[jf(null,!0)]}}),Kf(Go.prototype,{toJSON:{name:"toJSON",j:[jf(null,!0)]}}),Kf($c.prototype,{toJSON:{name:"toJSON",j:[jf(null,!0)]}}),Kf(Yc.prototype,{Pc:{name:"resolveSignIn",j:[{name:"multiFactorAssertion",J:"a valid multiFactorAssertion",optional:!1,K:function(t){return!!t&&!!t.ob}}]}}),Kf(rh.prototype,{Ob:{name:"getSession",j:[]},dc:{name:"enroll",j:[{name:"multiFactorAssertion",J:"a valid multiFactorAssertion",optional:!1,K:function(t){return!!t&&!!t.ob}},jf("displayName",!0)]},$c:{name:"unenroll",j:[zf({name:"multiFactorInfo",J:"a valid multiFactorInfo",optional:!1,K:Gf},jf(),"multiFactorInfoIdentifier")]}}),Kf(xf.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}}),Yf(mi,"parseLink",Ni,[jf("link")]),Yf(mf,"assertion",(function(t){return new eh(t)}),[qf("phone")]),function(){if(void 0===r.a||!r.a.INTERNAL||!r.a.INTERNAL.registerComponent)throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");var t={ActionCodeInfo:{Operation:{EMAIL_SIGNIN:si,PASSWORD_RESET:"PASSWORD_RESET",RECOVER_EMAIL:"RECOVER_EMAIL",REVERT_SECOND_FACTOR_ADDITION:oi,VERIFY_AND_CHANGE_EMAIL:ai,VERIFY_EMAIL:"VERIFY_EMAIL"}},Auth:$h,AuthCredential:so,Error:A};Yf(t,"EmailAuthProvider",ko,[]),Yf(t,"FacebookAuthProvider",mo,[]),Yf(t,"GithubAuthProvider",wo,[]),Yf(t,"GoogleAuthProvider",_o,[]),Yf(t,"TwitterAuthProvider",To,[]),Yf(t,"OAuthProvider",go,[jf("providerId")]),Yf(t,"SAMLAuthProvider",yo,[jf("providerId")]),Yf(t,"PhoneAuthProvider",Ro,[{name:"auth",J:"an instance of Firebase Auth",optional:!0,K:function(t){return!!(t&&t instanceof $h)}}]),Yf(t,"RecaptchaVerifier",xf,[zf(jf(),{name:"",J:"an HTML element",optional:!1,K:function(t){return!!(t&&t instanceof Element)}},"recaptchaContainer"),Vf("recaptchaParameters",!0),{name:"app",J:"an instance of Firebase App",optional:!0,K:function(t){return!!(t&&t instanceof r.a.app.App)}}]),Yf(t,"ActionCodeURL",mi,[]),Yf(t,"PhoneMultiFactorGenerator",mf,[]),r.a.INTERNAL.registerComponent({name:"auth",instanceFactory:function(t){return new $h(t=t.getProvider("app").getImmediate())},multipleInstances:!1,serviceProps:t,instantiationMode:"LAZY",type:"PUBLIC"}),r.a.INTERNAL.registerComponent({name:"auth-internal",instanceFactory:function(t){return{getUid:E((t=t.getProvider("auth").getImmediate()).getUid,t),getToken:E(t.kc,t),addAuthTokenListener:E(t.bc,t),removeAuthTokenListener:E(t.Nc,t)}},multipleInstances:!1,instantiationMode:"LAZY",type:"PRIVATE"}),r.a.registerVersion("@firebase/auth","0.14.6"),r.a.INTERNAL.extendNamespace({User:lh})}()}).apply(void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})}).call(this,n(5))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=n(12),o=(r=n(0))&&"object"==typeof r&&"default"in r?r.default:r,s=n(4),a=n(1),u=n(2),c=n(13),h=o.SDK_VERSION,f=function(){function t(t){this.uid=t}return t.prototype.t=function(){return null!=this.uid},t.prototype.s=function(){return this.t()?"uid:"+this.uid:"anonymous-user"},t.prototype.isEqual=function(t){return t.uid===this.uid},t}();f.UNAUTHENTICATED=new f(null),f.i=new f("google-credentials-uid"),f.h=new f("first-party-uid");
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var l={OK:"ok",CANCELLED:"cancelled",UNKNOWN:"unknown",INVALID_ARGUMENT:"invalid-argument",DEADLINE_EXCEEDED:"deadline-exceeded",NOT_FOUND:"not-found",ALREADY_EXISTS:"already-exists",PERMISSION_DENIED:"permission-denied",UNAUTHENTICATED:"unauthenticated",RESOURCE_EXHAUSTED:"resource-exhausted",FAILED_PRECONDITION:"failed-precondition",ABORTED:"aborted",OUT_OF_RANGE:"out-of-range",UNIMPLEMENTED:"unimplemented",INTERNAL:"internal",UNAVAILABLE:"unavailable",DATA_LOSS:"data-loss"},p=function(t){function e(e,n){var r=this;return(r=t.call(this,n)||this).code=e,r.message=n,r.name="FirebaseError",r.toString=function(){return r.name+": [code="+r.code+"]: "+r.message},r}return i.__extends(e,t),e}(Error),d=function(t,e){this.user=e,this.type="OAuth",this.o={},this.o.Authorization="Bearer "+t},v=function(){function t(){this.u=null}return t.prototype.getToken=function(){return Promise.resolve(null)},t.prototype._=function(){},t.prototype.l=function(t){this.u=t,t(f.UNAUTHENTICATED)},t.prototype.T=function(){this.u=null},t}(),y=function(){function t(t){var e=this;this.I=null,this.currentUser=f.UNAUTHENTICATED,this.R=!1,this.A=0,this.u=null,this.forceRefresh=!1,this.I=function(){e.A++,e.currentUser=e.m(),e.R=!0,e.u&&e.u(e.currentUser)},this.A=0,this.auth=t.getImmediate({optional:!0}),this.auth?this.auth.addAuthTokenListener(this.I):(this.I(null),t.get().then((function(t){e.auth=t,e.I&&e.auth.addAuthTokenListener(e.I)}),(function(){})))}return t.prototype.getToken=function(){var t=this,e=this.A,n=this.forceRefresh;return this.forceRefresh=!1,this.auth?this.auth.getToken(n).then((function(n){if(t.A!==e)throw new p(l.ABORTED,"getToken aborted due to token change.");return n?(Ee("string"==typeof n.accessToken),new d(n.accessToken,t.currentUser)):null})):Promise.resolve(null)},t.prototype._=function(){this.forceRefresh=!0},t.prototype.l=function(t){this.u=t,this.R&&t(this.currentUser)},t.prototype.T=function(){this.auth&&this.auth.removeAuthTokenListener(this.I),this.I=null,this.u=null},t.prototype.m=function(){var t=this.auth&&this.auth.getUid();return Ee(null===t||"string"==typeof t),new f(t)},t}(),g=function(){function t(t,e){this.P=t,this.V=e,this.type="FirstParty",this.user=f.h}return Object.defineProperty(t.prototype,"o",{get:function(){var t={"X-Goog-AuthUser":this.V},e=this.P.auth.g([]);return e&&(t.Authorization=e),t},enumerable:!0,configurable:!0}),t}(),m=function(){function t(t,e){this.P=t,this.V=e}return t.prototype.getToken=function(){return Promise.resolve(new g(this.P,this.V))},t.prototype.l=function(t){t(f.h)},t.prototype.T=function(){},t.prototype._=function(){},t}(),b=function(){function t(t,e){if(this.seconds=t,this.nanoseconds=e,e<0)throw new p(l.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(e>=1e9)throw new p(l.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(t<-62135596800)throw new p(l.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t);if(t>=253402300800)throw new p(l.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t)}return t.now=function(){return t.fromMillis(Date.now())},t.fromDate=function(e){return t.fromMillis(e.getTime())},t.fromMillis=function(e){var n=Math.floor(e/1e3);return new t(n,1e6*(e-1e3*n))},t.prototype.toDate=function(){return new Date(this.toMillis())},t.prototype.toMillis=function(){return 1e3*this.seconds+this.nanoseconds/1e6},t.prototype.p=function(t){return this.seconds===t.seconds?Te(this.nanoseconds,t.nanoseconds):Te(this.seconds,t.seconds)},t.prototype.isEqual=function(t){return t.seconds===this.seconds&&t.nanoseconds===this.nanoseconds},t.prototype.toString=function(){return"Timestamp(seconds="+this.seconds+", nanoseconds="+this.nanoseconds+")"},t.prototype.valueOf=function(){var t=this.seconds- -62135596800;return String(t).padStart(12,"0")+"."+String(this.nanoseconds).padStart(9,"0")},t}(),w=function(){function t(t){this.timestamp=t}return t.v=function(e){return new t(e)},t.min=function(){return new t(new b(0,0))},t.prototype.S=function(t){return this.timestamp.p(t.timestamp)},t.prototype.isEqual=function(t){return this.timestamp.isEqual(t.timestamp)},t.prototype.D=function(){return 1e6*this.timestamp.seconds+this.timestamp.nanoseconds/1e3},t.prototype.toString=function(){return"SnapshotVersion("+this.timestamp.toString()+")"},t.prototype.C=function(){return this.timestamp},t}(),E=function(){function t(t,e,n){void 0===e?e=0:e>t.length&&we(),void 0===n?n=t.length-e:n>t.length-e&&we(),this.segments=t,this.offset=e,this.F=n}return Object.defineProperty(t.prototype,"length",{get:function(){return this.F},enumerable:!0,configurable:!0}),t.prototype.isEqual=function(e){return 0===t.N(this,e)},t.prototype.child=function(e){var n=this.segments.slice(this.offset,this.limit());return e instanceof t?e.forEach((function(t){n.push(t)})):n.push(e),this.$(n)},t.prototype.limit=function(){return this.offset+this.length},t.prototype.k=function(t){return t=void 0===t?1:t,this.$(this.segments,this.offset+t,this.length-t)},t.prototype.L=function(){return this.$(this.segments,this.offset,this.length-1)},t.prototype.M=function(){return this.segments[this.offset]},t.prototype.O=function(){return this.get(this.length-1)},t.prototype.get=function(t){return this.segments[this.offset+t]},t.prototype.B=function(){return 0===this.length},t.prototype.q=function(t){if(t.length<this.length)return!1;for(var e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0},t.prototype.U=function(t){if(this.length+1!==t.length)return!1;for(var e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0},t.prototype.forEach=function(t){for(var e=this.offset,n=this.limit();e<n;e++)t(this.segments[e])},t.prototype.W=function(){return this.segments.slice(this.offset,this.limit())},t.N=function(t,e){for(var n=Math.min(t.length,e.length),r=0;r<n;r++){var i=t.get(r),o=e.get(r);if(i<o)return-1;if(i>o)return 1}return t.length<e.length?-1:t.length>e.length?1:0},t}(),_=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i.__extends(e,t),e.prototype.$=function(t,n,r){return new e(t,n,r)},e.prototype.j=function(){return this.W().join("/")},e.prototype.toString=function(){return this.j()},e.K=function(t){if(t.indexOf("//")>=0)throw new p(l.INVALID_ARGUMENT,"Invalid path ("+t+"). Paths must not contain // in them.");return new e(t.split("/").filter((function(t){return t.length>0})))},e}(E);_.G=new _([]);var I=/^[_a-zA-Z][_a-zA-Z0-9]*$/,T=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i.__extends(e,t),e.prototype.$=function(t,n,r){return new e(t,n,r)},e.H=function(t){return I.test(t)},e.prototype.j=function(){return this.W().map((function(t){return t=t.replace("\\","\\\\").replace("`","\\`"),e.H(t)||(t="`"+t+"`"),t})).join(".")},e.prototype.toString=function(){return this.j()},e.prototype.Y=function(){return 1===this.length&&"__name__"===this.get(0)},e.J=function(){return new e(["__name__"])},e.X=function(t){for(var n=[],r="",i=0,o=function(){if(0===r.length)throw new p(l.INVALID_ARGUMENT,"Invalid field path ("+t+"). Paths must not be empty, begin with '.', end with '.', or contain '..'");n.push(r),r=""},s=!1;i<t.length;){var a=t[i];if("\\"===a){if(i+1===t.length)throw new p(l.INVALID_ARGUMENT,"Path has trailing escape character: "+t);var u=t[i+1];if("\\"!==u&&"."!==u&&"`"!==u)throw new p(l.INVALID_ARGUMENT,"Path has invalid escape sequence: "+t);r+=u,i+=2}else"`"===a?(s=!s,i++):"."!==a||s?(r+=a,i++):(o(),i++)}if(o(),s)throw new p(l.INVALID_ARGUMENT,"Unterminated ` in path: "+t);return new e(n)},e}(E);T.G=new T([]);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var A=function(){function t(t){this.path=t}return t.Z=function(e){return new t(_.K(e).k(5))},t.prototype.tt=function(t){return this.path.length>=2&&this.path.get(this.path.length-2)===t},t.prototype.isEqual=function(t){return null!==t&&0===_.N(this.path,t.path)},t.prototype.toString=function(){return this.path.toString()},t.N=function(t,e){return _.N(t.path,e.path)},t.et=function(t){return t.length%2==0},t.st=function(e){return new t(new _(e.slice()))},t}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function N(t){var e=0;for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e++;return e}function S(t,e){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(n,t[n])}function k(t){for(var e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */A.EMPTY=new A(new _([]));var O=function(){function t(t){this.it=t}return t.fromBase64String=function(e){return new t(pe.nt().atob(e))},t.fromUint8Array=function(e){return new t(function(t){for(var e="",n=0;n<t.length;++n)e+=String.fromCharCode(t[n]);return e}(e))},t.prototype.toBase64=function(){return pe.nt().btoa(this.it)},t.prototype.toUint8Array=function(){return function(t){for(var e=new Uint8Array(t.length),n=0;n<t.length;n++)e[n]=t.charCodeAt(n);return e}(this.it)},t.prototype.rt=function(){return 2*this.it.length},t.prototype.S=function(t){return Te(this.it,t.it)},t.prototype.isEqual=function(t){return this.it===t.it},t}();function D(t){return null==t}function P(t){return-0===t&&1/t==-1/0}function C(t){return"number"==typeof t&&Number.isInteger(t)&&!P(t)&&t<=Number.MAX_SAFE_INTEGER&&t>=Number.MIN_SAFE_INTEGER}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function x(t){var e,n;return"server_timestamp"===(null===(n=((null===(e=null==t?void 0:t.mapValue)||void 0===e?void 0:e.fields)||{}).__type__)||void 0===n?void 0:n.stringValue)}function R(t){var e=B(t.mapValue.fields.__local_write_time__.timestampValue);return new b(e.seconds,e.nanos)}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */O.ht=new O("");var L=new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);function j(t){return"nullValue"in t?0:"booleanValue"in t?1:"integerValue"in t||"doubleValue"in t?2:"timestampValue"in t?3:"stringValue"in t?5:"bytesValue"in t?6:"referenceValue"in t?7:"geoPointValue"in t?8:"arrayValue"in t?9:"mapValue"in t?x(t)?4:10:we()}function M(t,e){var n=j(t);if(n!==j(e))return!1;switch(n){case 0:return!0;case 1:return t.booleanValue===e.booleanValue;case 4:return R(t).isEqual(R(e));case 3:return function(t,e){if("string"==typeof t.timestampValue&&"string"==typeof e.timestampValue&&t.timestampValue.length===e.timestampValue.length)return t.timestampValue===e.timestampValue;var n=B(t.timestampValue),r=B(e.timestampValue);return n.seconds===r.seconds&&n.nanos===r.nanos}(t,e);case 5:return t.stringValue===e.stringValue;case 6:return function(t,e){return W(t.bytesValue).isEqual(W(e.bytesValue))}(t,e);case 7:return t.referenceValue===e.referenceValue;case 8:return function(t,e){return G(t.geoPointValue.latitude)===G(e.geoPointValue.latitude)&&G(t.geoPointValue.longitude)===G(e.geoPointValue.longitude)}(t,e);case 2:return function(t,e){if("integerValue"in t&&"integerValue"in e)return G(t.integerValue)===G(e.integerValue);if("doubleValue"in t&&"doubleValue"in e){var n=G(t.doubleValue),r=G(e.doubleValue);return n===r?P(n)===P(r):isNaN(n)&&isNaN(r)}return!1}(t,e);case 9:return Ae(t.arrayValue.values||[],e.arrayValue.values||[],M);case 10:return function(t,e){var n=t.mapValue.fields||{},r=e.mapValue.fields||{};if(N(n)!==N(r))return!1;for(var i in n)if(n.hasOwnProperty(i)&&(void 0===r[i]||!M(n[i],r[i])))return!1;return!0}(t,e);default:return we()}}function V(t,e){return void 0!==(t.values||[]).find((function(t){return M(t,e)}))}function U(t,e){var n=j(t),r=j(e);if(n!==r)return Te(n,r);switch(n){case 0:return 0;case 1:return Te(t.booleanValue,e.booleanValue);case 2:return function(t,e){var n=G(t.integerValue||t.doubleValue),r=G(e.integerValue||e.doubleValue);return n<r?-1:n>r?1:n===r?0:isNaN(n)?isNaN(r)?0:-1:1}(t,e);case 3:return F(t.timestampValue,e.timestampValue);case 4:return F(R(t),R(e));case 5:return Te(t.stringValue,e.stringValue);case 6:return function(t,e){var n=W(t),r=W(e);return n.S(r)}(t.bytesValue,e.bytesValue);case 7:return function(t,e){for(var n=t.split("/"),r=e.split("/"),i=0;i<n.length&&i<r.length;i++){var o=Te(n[i],r[i]);if(0!==o)return o}return Te(n.length,r.length)}(t.referenceValue,e.referenceValue);case 8:return function(t,e){var n=Te(G(t.latitude),G(e.latitude));return 0!==n?n:Te(G(t.longitude),G(e.longitude))}(t.geoPointValue,e.geoPointValue);case 9:return function(t,e){for(var n=t.values||[],r=e.values||[],i=0;i<n.length&&i<r.length;++i){var o=U(n[i],r[i]);if(o)return o}return Te(n.length,r.length)}(t.arrayValue,e.arrayValue);case 10:return function(t,e){var n=t.fields||{},r=Object.keys(n),i=e.fields||{},o=Object.keys(i);r.sort(),o.sort();for(var s=0;s<r.length&&s<o.length;++s){var a=Te(r[s],o[s]);if(0!==a)return a;var u=U(n[r[s]],i[o[s]]);if(0!==u)return u}return Te(r.length,o.length)}(t.mapValue,e.mapValue);default:throw we()}}function F(t,e){if("string"==typeof t&&"string"==typeof e&&t.length===e.length)return Te(t,e);var n=B(t),r=B(e),i=Te(n.seconds,r.seconds);return 0!==i?i:Te(n.nanos,r.nanos)}function q(t){return function t(e){return"nullValue"in e?"null":"booleanValue"in e?""+e.booleanValue:"integerValue"in e?""+e.integerValue:"doubleValue"in e?""+e.doubleValue:"timestampValue"in e?function(t){var e=B(t);return"time("+e.seconds+","+e.nanos+")"}(e.timestampValue):"stringValue"in e?e.stringValue:"bytesValue"in e?W(e.bytesValue).toBase64():"referenceValue"in e?(r=e.referenceValue,A.Z(r).toString()):"geoPointValue"in e?"geo("+(n=e.geoPointValue).latitude+","+n.longitude+")":"arrayValue"in e?function(e){for(var n="[",r=!0,i=0,o=e.values||[];i<o.length;i++){var s=o[i];r?r=!1:n+=",",n+=t(s)}return n+"]"}(e.arrayValue):"mapValue"in e?function(e){for(var n="{",r=!0,i=0,o=Object.keys(e.fields||{}).sort();i<o.length;i++){var s=o[i];r?r=!1:n+=",",n+=s+":"+t(e.fields[s])}return n+"}"}(e.mapValue):we();var n,r}(t)}function B(t){if(Ee(!!t),"string"==typeof t){var e=0,n=L.exec(t);if(Ee(!!n),n[1]){var r=n[1];r=(r+"000000000").substr(0,9),e=Number(r)}var i=new Date(t);return{seconds:Math.floor(i.getTime()/1e3),nanos:e}}return{seconds:G(t.seconds),nanos:G(t.nanos)}}function G(t){return"number"==typeof t?t:"string"==typeof t?Number(t):0}function W(t){return"string"==typeof t?O.fromBase64String(t):O.fromUint8Array(t)}function z(t,e){return{referenceValue:"projects/"+t.projectId+"/databases/"+t.database+"/documents/"+e.path.j()}}function K(t){return!!t&&"integerValue"in t}function H(t){return!!t&&"arrayValue"in t}function Y(t){return!!t&&"nullValue"in t}function X(t){return!!t&&"doubleValue"in t&&isNaN(Number(t.doubleValue))}function J(t){return!!t&&"mapValue"in t}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var $=function(){function t(){}return t.prototype.ot=function(t,e){return function(t,e){var n={fields:{__type__:{stringValue:"server_timestamp"},__local_write_time__:{timestampValue:{seconds:t.seconds,nanos:t.nanoseconds}}}};return e&&(n.fields.__previous_value__=e),{mapValue:n}}(e,t)},t.prototype.at=function(t,e){return e},t.prototype.ut=function(t){return null},t.prototype.isEqual=function(e){return e instanceof t},t}();$.instance=new $;var Q=function(){function t(t){this.elements=t}return t.prototype.ot=function(t,e){return this.apply(t)},t.prototype.at=function(t,e){return this.apply(t)},t.prototype.apply=function(t){for(var e=et(t),n=function(t){e.some((function(e){return M(e,t)}))||e.push(t)},r=0,i=this.elements;r<i.length;r++)n(i[r]);return{arrayValue:{values:e}}},t.prototype.ut=function(t){return null},t.prototype.isEqual=function(e){return e instanceof t&&Ae(this.elements,e.elements,M)},t}(),Z=function(){function t(t){this.elements=t}return t.prototype.ot=function(t,e){return this.apply(t)},t.prototype.at=function(t,e){return this.apply(t)},t.prototype.apply=function(t){for(var e=et(t),n=function(t){e=e.filter((function(e){return!M(e,t)}))},r=0,i=this.elements;r<i.length;r++)n(i[r]);return{arrayValue:{values:e}}},t.prototype.ut=function(t){return null},t.prototype.isEqual=function(e){return e instanceof t&&Ae(this.elements,e.elements,M)},t}(),tt=function(){function t(t,e){this.serializer=t,this.ct=e}return t.prototype.ot=function(t,e){var n=this.ut(t),r=this.asNumber(n)+this.asNumber(this.ct);return K(n)&&K(this.ct)?this.serializer._t(r):this.serializer.lt(r)},t.prototype.at=function(t,e){return e},t.prototype.ut=function(t){return K(e=t)||function(t){return!!t&&"doubleValue"in t}(e)?t:{integerValue:0};var e},t.prototype.isEqual=function(e){return e instanceof t&&M(this.ct,e.ct)},t.prototype.asNumber=function(t){return G(t.integerValue||t.doubleValue)},t}();function et(t){return H(t)&&t.arrayValue.values?t.arrayValue.values.slice():[]}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var nt=function(){function t(t){this.fields=t,t.sort(T.N)}return t.prototype.dt=function(t){for(var e=0,n=this.fields;e<n.length;e++)if(n[e].q(t))return!0;return!1},t.prototype.isEqual=function(t){return Ae(this.fields,t.fields,(function(t,e){return t.isEqual(e)}))},t}(),rt=function(){function t(t,e){this.field=t,this.transform=e}return t.prototype.isEqual=function(t){return this.field.isEqual(t.field)&&this.transform.isEqual(t.transform)},t}(),it=function(t,e){this.version=t,this.transformResults=e},ot=function(){function t(t,e){this.updateTime=t,this.exists=e}return t.ft=function(){return new t},t.exists=function(e){return new t(void 0,e)},t.updateTime=function(e){return new t(e)},Object.defineProperty(t.prototype,"Tt",{get:function(){return void 0===this.updateTime&&void 0===this.exists},enumerable:!0,configurable:!0}),t.prototype.Et=function(t){return void 0!==this.updateTime?t instanceof mt&&t.version.isEqual(this.updateTime):void 0===this.exists||this.exists===t instanceof mt},t.prototype.isEqual=function(t){return this.exists===t.exists&&(this.updateTime?!!t.updateTime&&this.updateTime.isEqual(t.updateTime):!t.updateTime)},t}(),st=function(){function t(){}return t.prototype.It=function(t){},t.wt=function(t){return t instanceof mt?t.version:w.min()},t}(),at=function(t){function e(e,n,r){var i=this;return(i=t.call(this)||this).key=e,i.value=n,i.Rt=r,i.type=0,i}return i.__extends(e,t),e.prototype.at=function(t,e){this.It(t);var n=e.version;return new mt(this.key,n,this.value,{hasCommittedMutations:!0})},e.prototype.ot=function(t,e,n){if(this.It(t),!this.Rt.Et(t))return t;var r=st.wt(t);return new mt(this.key,r,this.value,{At:!0})},e.prototype.Pt=function(t){return null},e.prototype.isEqual=function(t){return t instanceof e&&this.key.isEqual(t.key)&&this.value.isEqual(t.value)&&this.Rt.isEqual(t.Rt)},e}(st),ut=function(t){function e(e,n,r,i){var o=this;return(o=t.call(this)||this).key=e,o.data=n,o.Vt=r,o.Rt=i,o.type=1,o}return i.__extends(e,t),e.prototype.at=function(t,e){if(this.It(t),!this.Rt.Et(t))return new wt(this.key,e.version);var n=this.gt(t);return new mt(this.key,e.version,n,{hasCommittedMutations:!0})},e.prototype.ot=function(t,e,n){if(this.It(t),!this.Rt.Et(t))return t;var r=st.wt(t),i=this.gt(t);return new mt(this.key,r,i,{At:!0})},e.prototype.Pt=function(t){return null},e.prototype.isEqual=function(t){return t instanceof e&&this.key.isEqual(t.key)&&this.Vt.isEqual(t.Vt)&&this.Rt.isEqual(t.Rt)},e.prototype.gt=function(t){var e;return e=t instanceof mt?t.data():lt.empty(),this.pt(e)},e.prototype.pt=function(t){var e=this,n=new pt(t);return this.Vt.fields.forEach((function(t){if(!t.B()){var r=e.data.field(t);null!==r?n.set(t,r):n.delete(t)}})),n.yt()},e}(st),ct=function(t){function e(e,n){var r=this;return(r=t.call(this)||this).key=e,r.fieldTransforms=n,r.type=2,r.Rt=ot.exists(!0),r}return i.__extends(e,t),e.prototype.at=function(t,e){if(this.It(t),Ee(null!=e.transformResults),!this.Rt.Et(t))return new wt(this.key,e.version);var n=this.bt(t),r=this.vt(t,e.transformResults),i=e.version,o=this.St(n.data(),r);return new mt(this.key,i,o,{hasCommittedMutations:!0})},e.prototype.ot=function(t,e,n){if(this.It(t),!this.Rt.Et(t))return t;var r=this.bt(t),i=this.Dt(n,t,e),o=this.St(r.data(),i);return new mt(this.key,r.version,o,{At:!0})},e.prototype.Pt=function(t){for(var e=null,n=0,r=this.fieldTransforms;n<r.length;n++){var i=r[n],o=t instanceof mt?t.field(i.field):void 0,s=i.transform.ut(o||null);null!=s&&(e=null==e?(new pt).set(i.field,s):e.set(i.field,s))}return e?e.yt():null},e.prototype.isEqual=function(t){return t instanceof e&&this.key.isEqual(t.key)&&Ae(this.fieldTransforms,t.fieldTransforms,(function(t,e){return t.isEqual(e)}))&&this.Rt.isEqual(t.Rt)},e.prototype.bt=function(t){return t},e.prototype.vt=function(t,e){var n=[];Ee(this.fieldTransforms.length===e.length);for(var r=0;r<e.length;r++){var i=this.fieldTransforms[r],o=i.transform,s=null;t instanceof mt&&(s=t.field(i.field)),n.push(o.at(s,e[r]))}return n},e.prototype.Dt=function(t,e,n){for(var r=[],i=0,o=this.fieldTransforms;i<o.length;i++){var s=o[i],a=s.transform,u=null;e instanceof mt&&(u=e.field(s.field)),null===u&&n instanceof mt&&(u=n.field(s.field)),r.push(a.ot(u,t))}return r},e.prototype.St=function(t,e){for(var n=new pt(t),r=0;r<this.fieldTransforms.length;r++){var i=this.fieldTransforms[r].field;n.set(i,e[r])}return n.yt()},e}(st),ht=function(t){function e(e,n){var r=this;return(r=t.call(this)||this).key=e,r.Rt=n,r.type=3,r}return i.__extends(e,t),e.prototype.at=function(t,e){return this.It(t),new bt(this.key,e.version,{hasCommittedMutations:!0})},e.prototype.ot=function(t,e,n){return this.It(t),this.Rt.Et(t)?new bt(this.key,w.min()):t},e.prototype.Pt=function(t){return null},e.prototype.isEqual=function(t){return t instanceof e&&this.key.isEqual(t.key)&&this.Rt.isEqual(t.Rt)},e}(st),ft=function(t){function e(e,n){var r=this;return(r=t.call(this)||this).key=e,r.Rt=n,r.type=4,r}return i.__extends(e,t),e.prototype.at=function(t,e){we()},e.prototype.ot=function(t,e,n){we()},e.prototype.Pt=function(t){we()},e.prototype.isEqual=function(t){return t instanceof e&&this.key.isEqual(t.key)&&this.Rt.isEqual(t.Rt)},e}(st),lt=function(){function t(t){this.proto=t}return t.empty=function(){return new t({mapValue:{}})},t.prototype.field=function(t){if(t.B())return this.proto;for(var e=this.proto,n=0;n<t.length-1;++n){if(!e.mapValue.fields)return null;if(!J(e=e.mapValue.fields[t.get(n)]))return null}return(e=(e.mapValue.fields||{})[t.O()])||null},t.prototype.isEqual=function(t){return M(this.proto,t.proto)},t}(),pt=function(){function t(t){void 0===t&&(t=lt.empty()),this.Ct=t,this.Ft=new Map}return t.prototype.set=function(t,e){return this.Nt(t,e),this},t.prototype.delete=function(t){return this.Nt(t,null),this},t.prototype.Nt=function(t,e){for(var n=this.Ft,r=0;r<t.length-1;++r){var i=t.get(r),o=n.get(i);o instanceof Map?n=o:o&&10===j(o)?(o=new Map(Object.entries(o.mapValue.fields||{})),n.set(i,o),n=o):(o=new Map,n.set(i,o),n=o)}n.set(t.O(),e)},t.prototype.yt=function(){var t=this.$t(T.G,this.Ft);return null!=t?new lt(t):this.Ct},t.prototype.$t=function(t,e){var n=this,r=!1,i=this.Ct.field(t),o=J(i)?Object.assign({},i.mapValue.fields):{};return e.forEach((function(e,i){if(e instanceof Map){var s=n.$t(t.child(i),e);null!=s&&(o[i]=s,r=!0)}else null!==e?(o[i]=e,r=!0):o.hasOwnProperty(i)&&(delete o[i],r=!0)})),r?{mapValue:{fields:o}}:null},t}();function dt(t){var e=[];return S(t.fields||{},(function(t,n){var r=new T([t]);if(J(n)){var i=dt(n.mapValue).fields;if(0===i.length)e.push(r);else for(var o=0,s=i;o<s.length;o++){var a=s[o];e.push(r.child(a))}}else e.push(r)})),new nt(e)
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */}var vt,yt,gt=function(t,e){this.key=t,this.version=e},mt=function(t){function e(e,n,r,i){var o=this;return(o=t.call(this,e,n)||this).kt=r,o.At=!!i.At,o.hasCommittedMutations=!!i.hasCommittedMutations,o}return i.__extends(e,t),e.prototype.field=function(t){return this.kt.field(t)},e.prototype.data=function(){return this.kt},e.prototype.Lt=function(){return this.kt.proto},e.prototype.isEqual=function(t){return t instanceof e&&this.key.isEqual(t.key)&&this.version.isEqual(t.version)&&this.At===t.At&&this.hasCommittedMutations===t.hasCommittedMutations&&this.kt.isEqual(t.kt)},e.prototype.toString=function(){return"Document("+this.key+", "+this.version+", "+this.kt.toString()+", {hasLocalMutations: "+this.At+"}), {hasCommittedMutations: "+this.hasCommittedMutations+"})"},Object.defineProperty(e.prototype,"hasPendingWrites",{get:function(){return this.At||this.hasCommittedMutations},enumerable:!0,configurable:!0}),e}(gt),bt=function(t){function e(e,n,r){var i=this;return(i=t.call(this,e,n)||this).hasCommittedMutations=!(!r||!r.hasCommittedMutations),i}return i.__extends(e,t),e.prototype.toString=function(){return"NoDocument("+this.key+", "+this.version+")"},Object.defineProperty(e.prototype,"hasPendingWrites",{get:function(){return this.hasCommittedMutations},enumerable:!0,configurable:!0}),e.prototype.isEqual=function(t){return t instanceof e&&t.hasCommittedMutations===this.hasCommittedMutations&&t.version.isEqual(this.version)&&t.key.isEqual(this.key)},e}(gt),wt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i.__extends(e,t),e.prototype.toString=function(){return"UnknownDocument("+this.key+", "+this.version+")"},Object.defineProperty(e.prototype,"hasPendingWrites",{get:function(){return!0},enumerable:!0,configurable:!0}),e.prototype.isEqual=function(t){return t instanceof e&&t.version.isEqual(this.version)&&t.key.isEqual(this.key)},e}(gt),Et=function(){function t(t,e,n,r,i,o,s){void 0===e&&(e=null),void 0===n&&(n=[]),void 0===r&&(r=[]),void 0===i&&(i=null),void 0===o&&(o=null),void 0===s&&(s=null),this.path=t,this.collectionGroup=e,this.orderBy=n,this.filters=r,this.limit=i,this.startAt=o,this.endAt=s,this.Mt=null}return t.prototype.canonicalId=function(){if(null===this.Mt){var t=this.path.j();null!==this.collectionGroup&&(t+="|cg:"+this.collectionGroup),t+="|f:",t+=this.filters.map((function(t){return t.canonicalId()})).join(","),t+="|ob:",t+=this.orderBy.map((function(t){return t.canonicalId()})).join(","),D(this.limit)||(t+="|l:",t+=this.limit),this.startAt&&(t+="|lb:",t+=this.startAt.canonicalId()),this.endAt&&(t+="|ub:",t+=this.endAt.canonicalId()),this.Mt=t}return this.Mt},t.prototype.toString=function(){var t=this.path.j();return null!==this.collectionGroup&&(t+=" collectionGroup="+this.collectionGroup),this.filters.length>0&&(t+=", filters: ["+this.filters.join(", ")+"]"),D(this.limit)||(t+=", limit: "+this.limit),this.orderBy.length>0&&(t+=", orderBy: ["+this.orderBy.join(", ")+"]"),this.startAt&&(t+=", startAt: "+this.startAt.canonicalId()),this.endAt&&(t+=", endAt: "+this.endAt.canonicalId()),"Target("+t+")"},t.prototype.isEqual=function(t){if(this.limit!==t.limit)return!1;if(this.orderBy.length!==t.orderBy.length)return!1;for(var e=0;e<this.orderBy.length;e++)if(!this.orderBy[e].isEqual(t.orderBy[e]))return!1;if(this.filters.length!==t.filters.length)return!1;for(var n=0;n<this.filters.length;n++)if(!this.filters[n].isEqual(t.filters[n]))return!1;return this.collectionGroup===t.collectionGroup&&!!this.path.isEqual(t.path)&&!!(null!==this.startAt?this.startAt.isEqual(t.startAt):null===t.startAt)&&(null!==this.endAt?this.endAt.isEqual(t.endAt):null===t.endAt)},t.prototype.Ot=function(){return A.et(this.path)&&null===this.collectionGroup&&0===this.filters.length},t}(),_t=function(){function t(t,e,n,r,i,o,s,a){void 0===e&&(e=null),void 0===n&&(n=[]),void 0===r&&(r=[]),void 0===i&&(i=null),void 0===o&&(o="F"),void 0===s&&(s=null),void 0===a&&(a=null),this.path=t,this.collectionGroup=e,this.xt=n,this.filters=r,this.limit=i,this.Bt=o,this.startAt=s,this.endAt=a,this.qt=null,this.Ut=null,this.startAt&&this.Qt(this.startAt),this.endAt&&this.Qt(this.endAt)}return t.Wt=function(e){return new t(e)},Object.defineProperty(t.prototype,"orderBy",{get:function(){if(null===this.qt){this.qt=[];var t=this.jt(),e=this.Kt();if(null!==t&&null===e)t.Y()||this.qt.push(new Dt(t)),this.qt.push(new Dt(T.J(),"asc"));else{for(var n=!1,r=0,i=this.xt;r<i.length;r++){var o=i[r];this.qt.push(o),o.field.Y()&&(n=!0)}if(!n){var s=this.xt.length>0?this.xt[this.xt.length-1].dir:"asc";this.qt.push(new Dt(T.J(),s))}}}return this.qt},enumerable:!0,configurable:!0}),t.prototype.Gt=function(e){var n=this.filters.concat([e]);return new t(this.path,this.collectionGroup,this.xt.slice(),n,this.limit,this.Bt,this.startAt,this.endAt)},t.prototype.zt=function(e){var n=this.xt.concat([e]);return new t(this.path,this.collectionGroup,n,this.filters.slice(),this.limit,this.Bt,this.startAt,this.endAt)},t.prototype.Ht=function(e){return new t(this.path,this.collectionGroup,this.xt.slice(),this.filters.slice(),e,"F",this.startAt,this.endAt)},t.prototype.Yt=function(e){return new t(this.path,this.collectionGroup,this.xt.slice(),this.filters.slice(),e,"L",this.startAt,this.endAt)},t.prototype.Jt=function(e){return new t(this.path,this.collectionGroup,this.xt.slice(),this.filters.slice(),this.limit,this.Bt,e,this.endAt)},t.prototype.Xt=function(e){return new t(this.path,this.collectionGroup,this.xt.slice(),this.filters.slice(),this.limit,this.Bt,this.startAt,e)},t.prototype.Zt=function(e){return new t(e,null,this.xt.slice(),this.filters.slice(),this.limit,this.Bt,this.startAt,this.endAt)},t.prototype.te=function(){return 0===this.filters.length&&null===this.limit&&null==this.startAt&&null==this.endAt&&(0===this.xt.length||1===this.xt.length&&this.xt[0].field.Y())},t.prototype.canonicalId=function(){return this.ee().canonicalId()+"|lt:"+this.Bt},t.prototype.toString=function(){return"Query(target="+this.ee().toString()+"; limitType="+this.Bt+")"},t.prototype.isEqual=function(t){return this.ee().isEqual(t.ee())&&this.Bt===t.Bt},t.prototype.se=function(t,e){for(var n=!1,r=0,i=this.orderBy;r<i.length;r++){var o=i[r],s=o.compare(t,e);if(0!==s)return s;n=n||o.field.Y()}return 0},t.prototype.matches=function(t){return this.ie(t)&&this.ne(t)&&this.re(t)&&this.he(t)},t.prototype.oe=function(){return!D(this.limit)&&"F"===this.Bt},t.prototype.ae=function(){return!D(this.limit)&&"L"===this.Bt},t.prototype.Kt=function(){return this.xt.length>0?this.xt[0].field:null},t.prototype.jt=function(){for(var t=0,e=this.filters;t<e.length;t++){var n=e[t];if(n instanceof It&&n.ue())return n.field}return null},t.prototype.ce=function(t){for(var e=0,n=this.filters;e<n.length;e++){var r=n[e];if(r instanceof It&&t.indexOf(r.op)>=0)return r.op}return null},t.prototype.Ot=function(){return this.ee().Ot()},t.prototype._e=function(){return null!==this.collectionGroup},t.prototype.ee=function(){if(!this.Ut)if("F"===this.Bt)this.Ut=new Et(this.path,this.collectionGroup,this.orderBy,this.filters,this.limit,this.startAt,this.endAt);else{for(var t=[],e=0,n=this.orderBy;e<n.length;e++){var r=n[e],i="desc"===r.dir?"asc":"desc";t.push(new Dt(r.field,i))}var o=this.endAt?new Ot(this.endAt.position,!this.endAt.before):null,s=this.startAt?new Ot(this.startAt.position,!this.startAt.before):null;this.Ut=new Et(this.path,this.collectionGroup,t,this.filters,this.limit,o,s)}return this.Ut},t.prototype.ie=function(t){var e=t.key.path;return null!==this.collectionGroup?t.key.tt(this.collectionGroup)&&this.path.q(e):A.et(this.path)?this.path.isEqual(e):this.path.U(e)},t.prototype.ne=function(t){for(var e=0,n=this.xt;e<n.length;e++){var r=n[e];if(!r.field.Y()&&null===t.field(r.field))return!1}return!0},t.prototype.re=function(t){for(var e=0,n=this.filters;e<n.length;e++)if(!n[e].matches(t))return!1;return!0},t.prototype.he=function(t){return!(this.startAt&&!this.startAt.le(this.orderBy,t)||this.endAt&&this.endAt.le(this.orderBy,t))},t.prototype.Qt=function(t){},t}(),It=function(t){function e(e,n,r){var i=this;return(i=t.call(this)||this).field=e,i.op=n,i.value=r,i}return i.__extends(e,t),e.create=function(t,n,r){if(t.Y())return"in"===n?new At(t,r):new Tt(t,n,r);if(Y(r)){if("=="!==n)throw new p(l.INVALID_ARGUMENT,"Invalid query. Null supports only equality comparisons.");return new e(t,n,r)}if(X(r)){if("=="!==n)throw new p(l.INVALID_ARGUMENT,"Invalid query. NaN supports only equality comparisons.");return new e(t,n,r)}return"array-contains"===n?new Nt(t,r):"in"===n?new St(t,r):"array-contains-any"===n?new kt(t,r):new e(t,n,r)},e.prototype.matches=function(t){var e=t.field(this.field);return null!==e&&j(this.value)===j(e)&&this.de(U(e,this.value))},e.prototype.de=function(t){switch(this.op){case"<":return t<0;case"<=":return t<=0;case"==":return 0===t;case">":return t>0;case">=":return t>=0;default:return we()}},e.prototype.ue=function(){return["<","<=",">",">="].indexOf(this.op)>=0},e.prototype.canonicalId=function(){return this.field.j()+this.op.toString()+q(this.value)},e.prototype.isEqual=function(t){return t instanceof e&&this.op===t.op&&this.field.isEqual(t.field)&&M(this.value,t.value)},e.prototype.toString=function(){return this.field.j()+" "+this.op+" "+q(this.value)},e}((function(){})),Tt=function(t){function e(e,n,r){var i=this;return(i=t.call(this,e,n,r)||this).key=A.Z(r.referenceValue),i}return i.__extends(e,t),e.prototype.matches=function(t){var e=A.N(t.key,this.key);return this.de(e)},e}(It),At=function(t){function e(e,n){var r=this;return(r=t.call(this,e,"in",n)||this).keys=(n.arrayValue.values||[]).map((function(t){return A.Z(t.referenceValue)})),r}return i.__extends(e,t),e.prototype.matches=function(t){return this.keys.some((function(e){return e.isEqual(t.key)}))},e}(It),Nt=function(t){function e(e,n){return t.call(this,e,"array-contains",n)||this}return i.__extends(e,t),e.prototype.matches=function(t){var e=t.field(this.field);return H(e)&&V(e.arrayValue,this.value)},e}(It),St=function(t){function e(e,n){return t.call(this,e,"in",n)||this}return i.__extends(e,t),e.prototype.matches=function(t){var e=t.field(this.field);return null!==e&&V(this.value.arrayValue,e)},e}(It),kt=function(t){function e(e,n){return t.call(this,e,"array-contains-any",n)||this}return i.__extends(e,t),e.prototype.matches=function(t){var e=this,n=t.field(this.field);return!(!H(n)||!n.arrayValue.values)&&n.arrayValue.values.some((function(t){return V(e.value.arrayValue,t)}))},e}(It),Ot=function(){function t(t,e){this.position=t,this.before=e}return t.prototype.canonicalId=function(){return(this.before?"b":"a")+":"+this.position.map((function(t){return q(t)})).join(",")},t.prototype.le=function(t,e){for(var n=0,r=0;r<this.position.length;r++){var i=t[r],o=this.position[r];if(n=i.field.Y()?A.N(A.Z(o.referenceValue),e.key):U(o,e.field(i.field)),"desc"===i.dir&&(n*=-1),0!==n)break}return this.before?n<=0:n<0},t.prototype.isEqual=function(t){if(null===t)return!1;if(this.before!==t.before||this.position.length!==t.position.length)return!1;for(var e=0;e<this.position.length;e++)if(!M(this.position[e],t.position[e]))return!1;return!0},t}(),Dt=function(){function t(t,e){this.field=t,void 0===e&&(e="asc"),this.dir=e,this.fe=t.Y()}return t.prototype.compare=function(t,e){var n=this.fe?A.N(t.key,e.key):function(t,e,n){var r=e.field(t),i=n.field(t);return null!==r&&null!==i?U(r,i):we()}(this.field,t,e);switch(this.dir){case"asc":return n;case"desc":return-1*n;default:return we()}},t.prototype.canonicalId=function(){return this.field.j()+this.dir.toString()},t.prototype.toString=function(){return this.field.j()+" ("+this.dir+")"},t.prototype.isEqual=function(t){return this.dir===t.dir&&this.field.isEqual(t.field)},t}(),Pt=function(){function t(t,e,n,r,i,o,s){void 0===i&&(i=w.min()),void 0===o&&(o=w.min()),void 0===s&&(s=O.ht),this.target=t,this.targetId=e,this.Te=n,this.sequenceNumber=r,this.Ee=i,this.lastLimboFreeSnapshotVersion=o,this.resumeToken=s}return t.prototype.Ie=function(e){return new t(this.target,this.targetId,this.Te,e,this.Ee,this.lastLimboFreeSnapshotVersion,this.resumeToken)},t.prototype.we=function(e,n){return new t(this.target,this.targetId,this.Te,this.sequenceNumber,n,this.lastLimboFreeSnapshotVersion,e)},t.prototype.Re=function(e){return new t(this.target,this.targetId,this.Te,this.sequenceNumber,this.Ee,e,this.resumeToken)},t}(),Ct=function(t){this.count=t};function xt(t){switch(t){case l.OK:return we();case l.CANCELLED:case l.UNKNOWN:case l.DEADLINE_EXCEEDED:case l.RESOURCE_EXHAUSTED:case l.INTERNAL:case l.UNAVAILABLE:case l.UNAUTHENTICATED:return!1;case l.INVALID_ARGUMENT:case l.NOT_FOUND:case l.ALREADY_EXISTS:case l.PERMISSION_DENIED:case l.FAILED_PRECONDITION:case l.ABORTED:case l.OUT_OF_RANGE:case l.UNIMPLEMENTED:case l.DATA_LOSS:return!0;default:return we()}}function Rt(t){if(void 0===t)return me("GRPC error has no .code"),l.UNKNOWN;switch(t){case vt.OK:return l.OK;case vt.CANCELLED:return l.CANCELLED;case vt.UNKNOWN:return l.UNKNOWN;case vt.DEADLINE_EXCEEDED:return l.DEADLINE_EXCEEDED;case vt.RESOURCE_EXHAUSTED:return l.RESOURCE_EXHAUSTED;case vt.INTERNAL:return l.INTERNAL;case vt.UNAVAILABLE:return l.UNAVAILABLE;case vt.UNAUTHENTICATED:return l.UNAUTHENTICATED;case vt.INVALID_ARGUMENT:return l.INVALID_ARGUMENT;case vt.NOT_FOUND:return l.NOT_FOUND;case vt.ALREADY_EXISTS:return l.ALREADY_EXISTS;case vt.PERMISSION_DENIED:return l.PERMISSION_DENIED;case vt.FAILED_PRECONDITION:return l.FAILED_PRECONDITION;case vt.ABORTED:return l.ABORTED;case vt.OUT_OF_RANGE:return l.OUT_OF_RANGE;case vt.UNIMPLEMENTED:return l.UNIMPLEMENTED;case vt.DATA_LOSS:return l.DATA_LOSS;default:return we()}}(yt=vt||(vt={}))[yt.OK=0]="OK",yt[yt.CANCELLED=1]="CANCELLED",yt[yt.UNKNOWN=2]="UNKNOWN",yt[yt.INVALID_ARGUMENT=3]="INVALID_ARGUMENT",yt[yt.DEADLINE_EXCEEDED=4]="DEADLINE_EXCEEDED",yt[yt.NOT_FOUND=5]="NOT_FOUND",yt[yt.ALREADY_EXISTS=6]="ALREADY_EXISTS",yt[yt.PERMISSION_DENIED=7]="PERMISSION_DENIED",yt[yt.UNAUTHENTICATED=16]="UNAUTHENTICATED",yt[yt.RESOURCE_EXHAUSTED=8]="RESOURCE_EXHAUSTED",yt[yt.FAILED_PRECONDITION=9]="FAILED_PRECONDITION",yt[yt.ABORTED=10]="ABORTED",yt[yt.OUT_OF_RANGE=11]="OUT_OF_RANGE",yt[yt.UNIMPLEMENTED=12]="UNIMPLEMENTED",yt[yt.INTERNAL=13]="INTERNAL",yt[yt.UNAVAILABLE=14]="UNAVAILABLE",yt[yt.DATA_LOSS=15]="DATA_LOSS";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Lt=function(){function t(t,e){this.N=t,this.root=e||Mt.EMPTY}return t.prototype.Ae=function(e,n){return new t(this.N,this.root.Ae(e,n,this.N).me(null,null,Mt.Pe,null,null))},t.prototype.remove=function(e){return new t(this.N,this.root.remove(e,this.N).me(null,null,Mt.Pe,null,null))},t.prototype.get=function(t){for(var e=this.root;!e.B();){var n=this.N(t,e.key);if(0===n)return e.value;n<0?e=e.left:n>0&&(e=e.right)}return null},t.prototype.indexOf=function(t){for(var e=0,n=this.root;!n.B();){var r=this.N(t,n.key);if(0===r)return e+n.left.size;r<0?n=n.left:(e+=n.left.size+1,n=n.right)}return-1},t.prototype.B=function(){return this.root.B()},Object.defineProperty(t.prototype,"size",{get:function(){return this.root.size},enumerable:!0,configurable:!0}),t.prototype.Ve=function(){return this.root.Ve()},t.prototype.ge=function(){return this.root.ge()},t.prototype.pe=function(t){return this.root.pe(t)},t.prototype.forEach=function(t){this.pe((function(e,n){return t(e,n),!1}))},t.prototype.toString=function(){var t=[];return this.pe((function(e,n){return t.push(e+":"+n),!1})),"{"+t.join(", ")+"}"},t.prototype.ye=function(t){return this.root.ye(t)},t.prototype.be=function(){return new jt(this.root,null,this.N,!1)},t.prototype.ve=function(t){return new jt(this.root,t,this.N,!1)},t.prototype.Se=function(){return new jt(this.root,null,this.N,!0)},t.prototype.De=function(t){return new jt(this.root,t,this.N,!0)},t}(),jt=function(){function t(t,e,n,r){this.Ce=r,this.Fe=[];for(var i=1;!t.B();)if(i=e?n(t.key,e):1,r&&(i*=-1),i<0)t=this.Ce?t.left:t.right;else{if(0===i){this.Fe.push(t);break}this.Fe.push(t),t=this.Ce?t.right:t.left}}return t.prototype.Ne=function(){var t=this.Fe.pop(),e={key:t.key,value:t.value};if(this.Ce)for(t=t.left;!t.B();)this.Fe.push(t),t=t.right;else for(t=t.right;!t.B();)this.Fe.push(t),t=t.left;return e},t.prototype.$e=function(){return this.Fe.length>0},t.prototype.ke=function(){if(0===this.Fe.length)return null;var t=this.Fe[this.Fe.length-1];return{key:t.key,value:t.value}},t}(),Mt=function(){function t(e,n,r,i,o){this.key=e,this.value=n,this.color=null!=r?r:t.RED,this.left=null!=i?i:t.EMPTY,this.right=null!=o?o:t.EMPTY,this.size=this.left.size+1+this.right.size}return t.prototype.me=function(e,n,r,i,o){return new t(null!=e?e:this.key,null!=n?n:this.value,null!=r?r:this.color,null!=i?i:this.left,null!=o?o:this.right)},t.prototype.B=function(){return!1},t.prototype.pe=function(t){return this.left.pe(t)||t(this.key,this.value)||this.right.pe(t)},t.prototype.ye=function(t){return this.right.ye(t)||t(this.key,this.value)||this.left.ye(t)},t.prototype.min=function(){return this.left.B()?this:this.left.min()},t.prototype.Ve=function(){return this.min().key},t.prototype.ge=function(){return this.right.B()?this.key:this.right.ge()},t.prototype.Ae=function(t,e,n){var r=this,i=n(t,r.key);return(r=i<0?r.me(null,null,null,r.left.Ae(t,e,n),null):0===i?r.me(null,e,null,null,null):r.me(null,null,null,null,r.right.Ae(t,e,n))).Le()},t.prototype.Me=function(){if(this.left.B())return t.EMPTY;var e=this;return e.left.Oe()||e.left.left.Oe()||(e=e.xe()),(e=e.me(null,null,null,e.left.Me(),null)).Le()},t.prototype.remove=function(e,n){var r,i=this;if(n(e,i.key)<0)i.left.B()||i.left.Oe()||i.left.left.Oe()||(i=i.xe()),i=i.me(null,null,null,i.left.remove(e,n),null);else{if(i.left.Oe()&&(i=i.Be()),i.right.B()||i.right.Oe()||i.right.left.Oe()||(i=i.qe()),0===n(e,i.key)){if(i.right.B())return t.EMPTY;r=i.right.min(),i=i.me(r.key,r.value,null,null,i.right.Me())}i=i.me(null,null,null,null,i.right.remove(e,n))}return i.Le()},t.prototype.Oe=function(){return this.color},t.prototype.Le=function(){var t=this;return t.right.Oe()&&!t.left.Oe()&&(t=t.Ue()),t.left.Oe()&&t.left.left.Oe()&&(t=t.Be()),t.left.Oe()&&t.right.Oe()&&(t=t.Qe()),t},t.prototype.xe=function(){var t=this.Qe();return t.right.left.Oe()&&(t=(t=(t=t.me(null,null,null,null,t.right.Be())).Ue()).Qe()),t},t.prototype.qe=function(){var t=this.Qe();return t.left.left.Oe()&&(t=(t=t.Be()).Qe()),t},t.prototype.Ue=function(){var e=this.me(null,null,t.RED,null,this.right.left);return this.right.me(null,null,this.color,e,null)},t.prototype.Be=function(){var e=this.me(null,null,t.RED,this.left.right,null);return this.left.me(null,null,this.color,null,e)},t.prototype.Qe=function(){var t=this.left.me(null,null,!this.left.color,null,null),e=this.right.me(null,null,!this.right.color,null,null);return this.me(null,null,!this.color,t,e)},t.prototype.We=function(){var t=this.je();return Math.pow(2,t)<=this.size+1},t.prototype.je=function(){if(this.Oe()&&this.left.Oe())throw we();if(this.right.Oe())throw we();var t=this.left.je();if(t!==this.right.je())throw we();return t+(this.Oe()?0:1)},t}();Mt.EMPTY=null,Mt.RED=!0,Mt.Pe=!1,Mt.EMPTY=new(function(){function t(){this.size=0}return Object.defineProperty(t.prototype,"key",{get:function(){throw we()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"value",{get:function(){throw we()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"color",{get:function(){throw we()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"left",{get:function(){throw we()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"right",{get:function(){throw we()},enumerable:!0,configurable:!0}),t.prototype.me=function(t,e,n,r,i){return this},t.prototype.Ae=function(t,e,n){return new Mt(t,e)},t.prototype.remove=function(t,e){return this},t.prototype.B=function(){return!0},t.prototype.pe=function(t){return!1},t.prototype.ye=function(t){return!1},t.prototype.Ve=function(){return null},t.prototype.ge=function(){return null},t.prototype.Oe=function(){return!1},t.prototype.We=function(){return!0},t.prototype.je=function(){return 0},t}());
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Vt=function(){function t(t){this.N=t,this.data=new Lt(this.N)}return t.prototype.has=function(t){return null!==this.data.get(t)},t.prototype.first=function(){return this.data.Ve()},t.prototype.last=function(){return this.data.ge()},Object.defineProperty(t.prototype,"size",{get:function(){return this.data.size},enumerable:!0,configurable:!0}),t.prototype.indexOf=function(t){return this.data.indexOf(t)},t.prototype.forEach=function(t){this.data.pe((function(e,n){return t(e),!1}))},t.prototype.Ke=function(t,e){for(var n=this.data.ve(t[0]);n.$e();){var r=n.Ne();if(this.N(r.key,t[1])>=0)return;e(r.key)}},t.prototype.Ge=function(t,e){var n;for(n=void 0!==e?this.data.ve(e):this.data.be();n.$e();)if(!t(n.Ne().key))return},t.prototype.ze=function(t){var e=this.data.ve(t);return e.$e()?e.Ne().key:null},t.prototype.be=function(){return new Ut(this.data.be())},t.prototype.ve=function(t){return new Ut(this.data.ve(t))},t.prototype.add=function(t){return this.me(this.data.remove(t).Ae(t,!0))},t.prototype.delete=function(t){return this.has(t)?this.me(this.data.remove(t)):this},t.prototype.B=function(){return this.data.B()},t.prototype.He=function(t){var e=this;return e.size<t.size&&(e=t,t=this),t.forEach((function(t){e=e.add(t)})),e},t.prototype.isEqual=function(e){if(!(e instanceof t))return!1;if(this.size!==e.size)return!1;for(var n=this.data.be(),r=e.data.be();n.$e();){var i=n.Ne().key,o=r.Ne().key;if(0!==this.N(i,o))return!1}return!0},t.prototype.W=function(){var t=[];return this.forEach((function(e){t.push(e)})),t},t.prototype.toString=function(){var t=[];return this.forEach((function(e){return t.push(e)})),"SortedSet("+t.toString()+")"},t.prototype.me=function(e){var n=new t(this.N);return n.data=e,n},t}(),Ut=function(){function t(t){this.Ye=t}return t.prototype.Ne=function(){return this.Ye.Ne().key},t.prototype.$e=function(){return this.Ye.$e()},t}(),Ft=new Lt(A.N);function qt(){return Ft}function Bt(){return qt()}var Gt=new Lt(A.N);function Wt(){return Gt}var zt=new Lt(A.N);function Kt(){return zt}var Ht=new Vt(A.N);function Yt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var n=Ht,r=0,i=t;r<i.length;r++){var o=i[r];n=n.add(o)}return n}var Xt=new Vt(Te);function Jt(){return Xt}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var $t=function(){function t(t){this.N=t?function(e,n){return t(e,n)||A.N(e.key,n.key)}:function(t,e){return A.N(t.key,e.key)},this.Je=Wt(),this.Xe=new Lt(this.N)}return t.Ze=function(e){return new t(e.N)},t.prototype.has=function(t){return null!=this.Je.get(t)},t.prototype.get=function(t){return this.Je.get(t)},t.prototype.first=function(){return this.Xe.Ve()},t.prototype.last=function(){return this.Xe.ge()},t.prototype.B=function(){return this.Xe.B()},t.prototype.indexOf=function(t){var e=this.Je.get(t);return e?this.Xe.indexOf(e):-1},Object.defineProperty(t.prototype,"size",{get:function(){return this.Xe.size},enumerable:!0,configurable:!0}),t.prototype.forEach=function(t){this.Xe.pe((function(e,n){return t(e),!1}))},t.prototype.add=function(t){var e=this.delete(t.key);return e.me(e.Je.Ae(t.key,t),e.Xe.Ae(t,null))},t.prototype.delete=function(t){var e=this.get(t);return e?this.me(this.Je.remove(t),this.Xe.remove(e)):this},t.prototype.isEqual=function(e){if(!(e instanceof t))return!1;if(this.size!==e.size)return!1;for(var n=this.Xe.be(),r=e.Xe.be();n.$e();){var i=n.Ne().key,o=r.Ne().key;if(!i.isEqual(o))return!1}return!0},t.prototype.toString=function(){var t=[];return this.forEach((function(e){t.push(e.toString())})),0===t.length?"DocumentSet ()":"DocumentSet (\n  "+t.join("  \n")+"\n)"},t.prototype.me=function(e,n){var r=new t;return r.N=this.N,r.Je=e,r.Xe=n,r},t}(),Qt=function(){function t(){this.ts=new Lt(A.N)}return t.prototype.track=function(t){var e=t.doc.key,n=this.ts.get(e);n?0!==t.type&&3===n.type?this.ts=this.ts.Ae(e,t):3===t.type&&1!==n.type?this.ts=this.ts.Ae(e,{type:n.type,doc:t.doc}):2===t.type&&2===n.type?this.ts=this.ts.Ae(e,{type:2,doc:t.doc}):2===t.type&&0===n.type?this.ts=this.ts.Ae(e,{type:0,doc:t.doc}):1===t.type&&0===n.type?this.ts=this.ts.remove(e):1===t.type&&2===n.type?this.ts=this.ts.Ae(e,{type:1,doc:n.doc}):0===t.type&&1===n.type?this.ts=this.ts.Ae(e,{type:2,doc:t.doc}):we():this.ts=this.ts.Ae(e,t)},t.prototype.es=function(){var t=[];return this.ts.pe((function(e,n){t.push(n)})),t},t}(),Zt=function(){function t(t,e,n,r,i,o,s,a){this.query=t,this.docs=e,this.ss=n,this.docChanges=r,this.ns=i,this.fromCache=o,this.rs=s,this.hs=a}return t.os=function(e,n,r,i){var o=[];return n.forEach((function(t){o.push({type:0,doc:t})})),new t(e,n,$t.Ze(n),o,r,i,!0,!1)},Object.defineProperty(t.prototype,"hasPendingWrites",{get:function(){return!this.ns.B()},enumerable:!0,configurable:!0}),t.prototype.isEqual=function(t){if(!(this.fromCache===t.fromCache&&this.rs===t.rs&&this.ns.isEqual(t.ns)&&this.query.isEqual(t.query)&&this.docs.isEqual(t.docs)&&this.ss.isEqual(t.ss)))return!1;var e=this.docChanges,n=t.docChanges;if(e.length!==n.length)return!1;for(var r=0;r<e.length;r++)if(e[r].type!==n[r].type||!e[r].doc.isEqual(n[r].doc))return!1;return!0},t}(),te=function(){function t(t,e,n,r,i){this.Ee=t,this.as=e,this.us=n,this.cs=r,this._s=i}return t.ls=function(e,n){var r=new Map;return r.set(e,ee.ds(e,n)),new t(w.min(),r,Jt(),qt(),Yt())},t}(),ee=function(){function t(t,e,n,r,i){this.resumeToken=t,this.fs=e,this.Ts=n,this.Es=r,this.Is=i}return t.ds=function(e,n){return new t(O.ht,n,Yt(),Yt(),Yt())},t}(),ne=function(t,e,n,r){this.ws=t,this.removedTargetIds=e,this.key=n,this.Rs=r},re=function(t,e){this.targetId=t,this.As=e},ie=function(t,e,n,r){void 0===n&&(n=O.ht),void 0===r&&(r=null),this.state=t,this.targetIds=e,this.resumeToken=n,this.cause=r},oe=function(){function t(){this.ms=0,this.Ps=ue(),this.Vs=O.ht,this.gs=!1,this.ps=!0}return Object.defineProperty(t.prototype,"fs",{get:function(){return this.gs},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"resumeToken",{get:function(){return this.Vs},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"ys",{get:function(){return 0!==this.ms},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"bs",{get:function(){return this.ps},enumerable:!0,configurable:!0}),t.prototype.vs=function(t){t.rt()>0&&(this.ps=!0,this.Vs=t)},t.prototype.Ss=function(){var t=Yt(),e=Yt(),n=Yt();return this.Ps.forEach((function(r,i){switch(i){case 0:t=t.add(r);break;case 2:e=e.add(r);break;case 1:n=n.add(r);break;default:we()}})),new ee(this.Vs,this.gs,t,e,n)},t.prototype.Ds=function(){this.ps=!1,this.Ps=ue()},t.prototype.Cs=function(t,e){this.ps=!0,this.Ps=this.Ps.Ae(t,e)},t.prototype.Fs=function(t){this.ps=!0,this.Ps=this.Ps.remove(t)},t.prototype.Ns=function(){this.ms+=1},t.prototype.$s=function(){this.ms-=1},t.prototype.ks=function(){this.ps=!0,this.gs=!0},t}(),se=function(){function t(t){this.Ls=t,this.Ms=new Map,this.Os=qt(),this.xs=ae(),this.Bs=new Vt(Te)}return t.prototype.qs=function(t){for(var e=0,n=t.ws;e<n.length;e++){var r=n[e];t.Rs instanceof mt?this.Us(r,t.Rs):t.Rs instanceof bt&&this.Qs(r,t.key,t.Rs)}for(var i=0,o=t.removedTargetIds;i<o.length;i++){var s=o[i];this.Qs(s,t.key,t.Rs)}},t.prototype.Ws=function(t){var e=this;this.js(t,(function(n){var r=e.Ks(n);switch(t.state){case 0:e.Gs(n)&&r.vs(t.resumeToken);break;case 1:r.$s(),r.ys||r.Ds(),r.vs(t.resumeToken);break;case 2:r.$s(),r.ys||e.removeTarget(n);break;case 3:e.Gs(n)&&(r.ks(),r.vs(t.resumeToken));break;case 4:e.Gs(n)&&(e.zs(n),r.vs(t.resumeToken));break;default:we()}}))},t.prototype.js=function(t,e){var n=this;t.targetIds.length>0?t.targetIds.forEach(e):this.Ms.forEach((function(t,r){n.Gs(r)&&e(r)}))},t.prototype.Hs=function(t){var e=t.targetId,n=t.As.count,r=this.Ys(e);if(r){var i=r.target;if(i.Ot())if(0===n){var o=new A(i.path);this.Qs(e,o,new bt(o,w.min()))}else Ee(1===n);else this.Js(e)!==n&&(this.zs(e),this.Bs=this.Bs.add(e))}},t.prototype.Xs=function(t){var e=this,n=new Map;this.Ms.forEach((function(r,i){var o=e.Ys(i);if(o){if(r.fs&&o.target.Ot()){var s=new A(o.target.path);null!==e.Os.get(s)||e.Zs(i,s)||e.Qs(i,s,new bt(s,t))}r.bs&&(n.set(i,r.Ss()),r.Ds())}}));var r=Yt();this.xs.forEach((function(t,n){var i=!0;n.Ge((function(t){var n=e.Ys(t);return!n||2===n.Te||(i=!1,!1)})),i&&(r=r.add(t))}));var i=new te(t,n,this.Bs,this.Os,r);return this.Os=qt(),this.xs=ae(),this.Bs=new Vt(Te),i},t.prototype.Us=function(t,e){if(this.Gs(t)){var n=this.Zs(t,e.key)?2:0;this.Ks(t).Cs(e.key,n),this.Os=this.Os.Ae(e.key,e),this.xs=this.xs.Ae(e.key,this.ti(e.key).add(t))}},t.prototype.Qs=function(t,e,n){if(this.Gs(t)){var r=this.Ks(t);this.Zs(t,e)?r.Cs(e,1):r.Fs(e),this.xs=this.xs.Ae(e,this.ti(e).delete(t)),n&&(this.Os=this.Os.Ae(e,n))}},t.prototype.removeTarget=function(t){this.Ms.delete(t)},t.prototype.Js=function(t){var e=this.Ks(t).Ss();return this.Ls.ei(t).size+e.Ts.size-e.Is.size},t.prototype.Ns=function(t){this.Ks(t).Ns()},t.prototype.Ks=function(t){var e=this.Ms.get(t);return e||(e=new oe,this.Ms.set(t,e)),e},t.prototype.ti=function(t){var e=this.xs.get(t);return e||(e=new Vt(Te),this.xs=this.xs.Ae(t,e)),e},t.prototype.Gs=function(t){var e=null!==this.Ys(t);return e||ge("WatchChangeAggregator","Detected inactive target",t),e},t.prototype.Ys=function(t){var e=this.Ms.get(t);return e&&e.ys?null:this.Ls.si(t)},t.prototype.zs=function(t){var e=this;this.Ms.set(t,new oe),this.Ls.ei(t).forEach((function(n){e.Qs(t,n,null)}))},t.prototype.Zs=function(t,e){return this.Ls.ei(t).has(e)},t}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function ae(){return new Lt(A.N)}function ue(){return new Lt(A.N)}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var ce={asc:"ASCENDING",desc:"DESCENDING"},he={"<":"LESS_THAN","<=":"LESS_THAN_OR_EQUAL",">":"GREATER_THAN",">=":"GREATER_THAN_OR_EQUAL","==":"EQUAL","array-contains":"ARRAY_CONTAINS",in:"IN","array-contains-any":"ARRAY_CONTAINS_ANY"},fe=function(){function t(t,e){this.ii=t,this.options=e}return t.prototype.ni=function(t){var e=void 0===t.code?l.UNKNOWN:Rt(t.code);return new p(e,t.message||"")},t.prototype.ri=function(t){return this.options.hi||D(t)?t:{value:t}},t.prototype.oi=function(t){var e;return D(e="object"==typeof t?t.value:t)?null:e},t.prototype._t=function(t){return{integerValue:""+t}},t.prototype.lt=function(t){if(this.options.hi){if(isNaN(t))return{doubleValue:"NaN"};if(t===1/0)return{doubleValue:"Infinity"};if(t===-1/0)return{doubleValue:"-Infinity"}}return{doubleValue:P(t)?"-0":t}},t.prototype.ai=function(t){return C(t)?this._t(t):this.lt(t)},t.prototype.C=function(t){return this.options.hi?new Date(1e3*t.seconds).toISOString().replace(/\.\d*/,"").replace("Z","")+"."+("000000000"+t.nanoseconds).slice(-9)+"Z":{seconds:""+t.seconds,nanos:t.nanoseconds}},t.prototype.v=function(t){var e=B(t);return new b(e.seconds,e.nanos)},t.prototype.ui=function(t){return this.options.hi?t.toBase64():t.toUint8Array()},t.prototype.ci=function(t){return this.options.hi?(Ee(void 0===t||"string"==typeof t),O.fromBase64String(t||"")):(Ee(void 0===t||t instanceof Uint8Array),O.fromUint8Array(t||new Uint8Array))},t.prototype.toVersion=function(t){return this.C(t.C())},t.prototype.fromVersion=function(t){return Ee(!!t),w.v(this.v(t))},t.prototype._i=function(t,e){return this.li(e||this.ii).child("documents").child(t).j()},t.prototype.di=function(t){var e=_.K(t);return Ee(le(e)),e},t.prototype.fi=function(t){return this._i(t.path)},t.prototype.Z=function(t){var e=this.di(t);return Ee(e.get(1)===this.ii.projectId),Ee(!e.get(3)&&!this.ii.database||e.get(3)===this.ii.database),new A(this.Ti(e))},t.prototype.Ei=function(t){return this._i(t)},t.prototype.Ii=function(t){var e=this.di(t);return 4===e.length?_.G:this.Ti(e)},Object.defineProperty(t.prototype,"wi",{get:function(){return new _(["projects",this.ii.projectId,"databases",this.ii.database]).j()},enumerable:!0,configurable:!0}),t.prototype.li=function(t){return new _(["projects",t.projectId,"databases",t.database])},t.prototype.Ti=function(t){return Ee(t.length>4&&"documents"===t.get(4)),t.k(5)},t.prototype.Ri=function(t,e){return{name:this.fi(t),fields:e.proto.mapValue.fields}},t.prototype.Ai=function(t){return{name:this.fi(t.key),fields:t.Lt().mapValue.fields,updateTime:this.C(t.version.C())}},t.prototype.mi=function(t,e){var n=this.Z(t.name),r=this.fromVersion(t.updateTime),i=new lt({mapValue:{fields:t.fields}});return new mt(n,r,i,{hasCommittedMutations:!!e})},t.prototype.Pi=function(t){Ee(!!t.found),t.found.name,t.found.updateTime;var e=this.Z(t.found.name),n=this.fromVersion(t.found.updateTime),r=new lt({mapValue:{fields:t.found.fields}});return new mt(e,n,r,{})},t.prototype.Vi=function(t){Ee(!!t.missing),Ee(!!t.readTime);var e=this.Z(t.missing),n=this.fromVersion(t.readTime);return new bt(e,n)},t.prototype.gi=function(t){return"found"in t?this.Pi(t):"missing"in t?this.Vi(t):we()},t.prototype.pi=function(t){var e;if("targetChange"in t){t.targetChange;var n=this.yi(t.targetChange.targetChangeType||"NO_CHANGE"),r=t.targetChange.targetIds||[],i=this.ci(t.targetChange.resumeToken),o=t.targetChange.cause,s=o&&this.ni(o);e=new ie(n,r,i,s||null)}else if("documentChange"in t){t.documentChange;var a=t.documentChange;a.document,a.document.name,a.document.updateTime;var u=this.Z(a.document.name),c=this.fromVersion(a.document.updateTime),h=new lt({mapValue:{fields:a.document.fields}}),f=new mt(u,c,h,{}),l=a.targetIds||[],p=a.removedTargetIds||[];e=new ne(l,p,f.key,f)}else if("documentDelete"in t){t.documentDelete;var d=t.documentDelete;d.document;var v=this.Z(d.document),y=d.readTime?this.fromVersion(d.readTime):w.min(),g=new bt(v,y),m=d.removedTargetIds||[];e=new ne([],m,g.key,g)}else if("documentRemove"in t){t.documentRemove;var b=t.documentRemove;b.document;var E=this.Z(b.document),_=b.removedTargetIds||[];e=new ne([],_,E,null)}else{if(!("filter"in t))return we();t.filter;var I=t.filter;I.targetId;var T=I.count||0,A=new Ct(T),N=I.targetId;e=new re(N,A)}return e},t.prototype.yi=function(t){return"NO_CHANGE"===t?0:"ADD"===t?1:"REMOVE"===t?2:"CURRENT"===t?3:"RESET"===t?4:we()},t.prototype.bi=function(t){if(!("targetChange"in t))return w.min();var e=t.targetChange;return e.targetIds&&e.targetIds.length?w.min():e.readTime?this.fromVersion(e.readTime):w.min()},t.prototype.vi=function(t){var e,n=this;if(t instanceof at)e={update:this.Ri(t.key,t.value)};else if(t instanceof ht)e={delete:this.fi(t.key)};else if(t instanceof ut)e={update:this.Ri(t.key,t.data),updateMask:this.Si(t.Vt)};else if(t instanceof ct)e={transform:{document:this.fi(t.key),fieldTransforms:t.fieldTransforms.map((function(t){return n.Di(t)}))}};else{if(!(t instanceof ft))return we();e={verify:this.fi(t.key)}}return t.Rt.Tt||(e.currentDocument=this.Ci(t.Rt)),e},t.prototype.Fi=function(t){var e=this,n=t.currentDocument?this.Ni(t.currentDocument):ot.ft();if(t.update){t.update.name;var r=this.Z(t.update.name),i=new lt({mapValue:{fields:t.update.fields}});if(t.updateMask){var o=this.$i(t.updateMask);return new ut(r,i,o,n)}return new at(r,i,n)}if(t.delete){var s=this.Z(t.delete);return new ht(s,n)}if(t.transform){var a=this.Z(t.transform.document),u=t.transform.fieldTransforms.map((function(t){return e.ki(t)}));return Ee(!0===n.exists),new ct(a,u)}if(t.verify){var c=this.Z(t.verify);return new ft(c,n)}return we()},t.prototype.Ci=function(t){return void 0!==t.updateTime?{updateTime:this.toVersion(t.updateTime)}:void 0!==t.exists?{exists:t.exists}:we()},t.prototype.Ni=function(t){return void 0!==t.updateTime?ot.updateTime(this.fromVersion(t.updateTime)):void 0!==t.exists?ot.exists(t.exists):ot.ft()},t.prototype.Li=function(t,e){var n=t.updateTime?this.fromVersion(t.updateTime):this.fromVersion(e);n.isEqual(w.min())&&(n=this.fromVersion(e));var r=null;return t.transformResults&&t.transformResults.length>0&&(r=t.transformResults),new it(n,r)},t.prototype.Mi=function(t,e){var n=this;return t&&t.length>0?(Ee(void 0!==e),t.map((function(t){return n.Li(t,e)}))):[]},t.prototype.Di=function(t){var e=t.transform;if(e instanceof $)return{fieldPath:t.field.j(),setToServerValue:"REQUEST_TIME"};if(e instanceof Q)return{fieldPath:t.field.j(),appendMissingElements:{values:e.elements}};if(e instanceof Z)return{fieldPath:t.field.j(),removeAllFromArray:{values:e.elements}};if(e instanceof tt)return{fieldPath:t.field.j(),increment:e.ct};throw we()},t.prototype.ki=function(t){var e=null;if("setToServerValue"in t)Ee("REQUEST_TIME"===t.setToServerValue),e=$.instance;else if("appendMissingElements"in t){var n=t.appendMissingElements.values||[];e=new Q(n)}else if("removeAllFromArray"in t){var r=t.removeAllFromArray.values||[];e=new Z(r)}else"increment"in t?e=new tt(this,t.increment):we();var i=T.X(t.fieldPath);return new rt(i,e)},t.prototype.Oi=function(t){return{documents:[this.Ei(t.path)]}},t.prototype.xi=function(t){Ee(1===t.documents.length);var e=t.documents[0];return _t.Wt(this.Ii(e)).ee()},t.prototype.Bi=function(t){var e={structuredQuery:{}},n=t.path;null!==t.collectionGroup?(e.parent=this.Ei(n),e.structuredQuery.from=[{collectionId:t.collectionGroup,allDescendants:!0}]):(e.parent=this.Ei(n.L()),e.structuredQuery.from=[{collectionId:n.O()}]);var r=this.qi(t.filters);r&&(e.structuredQuery.where=r);var i=this.Ui(t.orderBy);i&&(e.structuredQuery.orderBy=i);var o=this.ri(t.limit);return null!==o&&(e.structuredQuery.limit=o),t.startAt&&(e.structuredQuery.startAt=this.Qi(t.startAt)),t.endAt&&(e.structuredQuery.endAt=this.Qi(t.endAt)),e},t.prototype.Wi=function(t){var e=this.Ii(t.parent),n=t.structuredQuery,r=n.from?n.from.length:0,i=null;if(r>0){Ee(1===r);var o=n.from[0];o.allDescendants?i=o.collectionId:e=e.child(o.collectionId)}var s=[];n.where&&(s=this.ji(n.where));var a=[];n.orderBy&&(a=this.Ki(n.orderBy));var u=null;n.limit&&(u=this.oi(n.limit));var c=null;n.startAt&&(c=this.Gi(n.startAt));var h=null;return n.endAt&&(h=this.Gi(n.endAt)),new _t(e,i,a,s,u,"F",c,h).ee()},t.prototype.zi=function(t){var e=this.Hi(t.Te);return null==e?null:{"goog-listen-tags":e}},t.prototype.Hi=function(t){switch(t){case 0:return null;case 1:return"existence-filter-mismatch";case 2:return"limbo-document";default:return we()}},t.prototype.ee=function(t){var e,n=t.target;return(e=n.Ot()?{documents:this.Oi(n)}:{query:this.Bi(n)}).targetId=t.targetId,t.resumeToken.rt()>0&&(e.resumeToken=this.ui(t.resumeToken)),e},t.prototype.qi=function(t){var e=this;if(0!==t.length){var n=t.map((function(t){return t instanceof It?e.Yi(t):we()}));return 1===n.length?n[0]:{compositeFilter:{op:"AND",filters:n}}}},t.prototype.ji=function(t){var e=this;return t?void 0!==t.unaryFilter?[this.Ji(t)]:void 0!==t.fieldFilter?[this.Xi(t)]:void 0!==t.compositeFilter?t.compositeFilter.filters.map((function(t){return e.ji(t)})).reduce((function(t,e){return t.concat(e)})):we():[]},t.prototype.Ui=function(t){var e=this;if(0!==t.length)return t.map((function(t){return e.Zi(t)}))},t.prototype.Ki=function(t){var e=this;return t.map((function(t){return e.tn(t)}))},t.prototype.Qi=function(t){return{before:t.before,values:t.position}},t.prototype.Gi=function(t){var e=!!t.before,n=t.values||[];return new Ot(n,e)},t.prototype.en=function(t){return ce[t]},t.prototype.sn=function(t){switch(t){case"ASCENDING":return"asc";case"DESCENDING":return"desc";default:return}},t.prototype.nn=function(t){return he[t]},t.prototype.rn=function(t){switch(t){case"EQUAL":return"==";case"GREATER_THAN":return">";case"GREATER_THAN_OR_EQUAL":return">=";case"LESS_THAN":return"<";case"LESS_THAN_OR_EQUAL":return"<=";case"ARRAY_CONTAINS":return"array-contains";case"IN":return"in";case"ARRAY_CONTAINS_ANY":return"array-contains-any";case"OPERATOR_UNSPECIFIED":default:return we()}},t.prototype.hn=function(t){return{fieldPath:t.j()}},t.prototype.on=function(t){return T.X(t.fieldPath)},t.prototype.Zi=function(t){return{field:this.hn(t.field),direction:this.en(t.dir)}},t.prototype.tn=function(t){return new Dt(this.on(t.field),this.sn(t.direction))},t.prototype.Xi=function(t){return It.create(this.on(t.fieldFilter.field),this.rn(t.fieldFilter.op),t.fieldFilter.value)},t.prototype.Yi=function(t){if("=="===t.op){if(X(t.value))return{unaryFilter:{field:this.hn(t.field),op:"IS_NAN"}};if(Y(t.value))return{unaryFilter:{field:this.hn(t.field),op:"IS_NULL"}}}return{fieldFilter:{field:this.hn(t.field),op:this.nn(t.op),value:t.value}}},t.prototype.Ji=function(t){switch(t.unaryFilter.op){case"IS_NAN":var e=this.on(t.unaryFilter.field);return It.create(e,"==",{doubleValue:NaN});case"IS_NULL":var n=this.on(t.unaryFilter.field);return It.create(n,"==",{nullValue:"NULL_VALUE"});case"OPERATOR_UNSPECIFIED":default:return we()}},t.prototype.Si=function(t){var e=[];return t.fields.forEach((function(t){return e.push(t.j())})),{fieldPaths:e}},t.prototype.$i=function(t){var e=t.fieldPaths||[];return new nt(e.map((function(t){return T.X(t)})))},t}();function le(t){return t.length>=4&&"projects"===t.get(0)&&"databases"===t.get(2)}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var pe=function(){function t(){}return t.an=function(e){t.platform&&we(),t.platform=e},t.nt=function(){return t.platform||we(),t.platform},t}(),de=new s.Logger("@firebase/firestore");
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function ve(){return de.logLevel}function ye(t){de.logLevel=t}function ge(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(de.logLevel<=s.LogLevel.DEBUG){var r=e.map(be);de.debug.apply(de,i.__spreadArrays(["Firestore ("+h+"): "+t],r))}}function me(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(de.logLevel<=s.LogLevel.ERROR){var r=e.map(be);de.error.apply(de,i.__spreadArrays(["Firestore ("+h+"): "+t],r))}}function be(t){if("string"==typeof t)return t;var e=pe.nt();try{return e.un(t)}catch(e){return t}}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function we(t){void 0===t&&(t="Unexpected state");var e="FIRESTORE ("+h+") INTERNAL ASSERTION FAILED: "+t;throw me(e),new Error(e)}function Ee(t,e){t||we()}function _e(t,e){return t}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Ie=function(){function t(){}return t.cn=function(){for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",e=Math.floor(256/t.length)*t.length,n="";n.length<20;)for(var r=pe.nt()._n(40),i=0;i<r.length;++i)n.length<20&&r[i]<e&&(n+=t.charAt(r[i]%t.length));return n},t}();function Te(t,e){return t<e?-1:t>e?1:0}function Ae(t,e,n){return t.length===e.length&&t.every((function(t,r){return n(t,e[r])}))}function Ne(t){return t+"\0"}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Se=function(t,e,n,r,i){this.ii=t,this.persistenceKey=e,this.host=n,this.ssl=r,this.forceLongPolling=i},ke=function(){function t(t,e){this.projectId=t,this.database=e||"(default)"}return Object.defineProperty(t.prototype,"ln",{get:function(){return"(default)"===this.database},enumerable:!0,configurable:!0}),t.prototype.isEqual=function(e){return e instanceof t&&e.projectId===this.projectId&&e.database===this.database},t.prototype.S=function(t){return Te(this.projectId,t.projectId)||Te(this.database,t.database)},t}(),Oe=function(){function t(t){this.dn=t,this.fn={}}return t.prototype.get=function(t){var e=this.dn(t),n=this.fn[e];if(void 0!==n)for(var r=0,i=n;r<i.length;r++){var o=i[r],s=o[0],a=o[1];if(s.isEqual(t))return a}},t.prototype.has=function(t){return void 0!==this.get(t)},t.prototype.set=function(t,e){var n=this.dn(t),r=this.fn[n];if(void 0!==r){for(var i=0;i<r.length;i++)if(r[i][0].isEqual(t))return void(r[i]=[t,e]);r.push([t,e])}else this.fn[n]=[[t,e]]},t.prototype.delete=function(t){var e=this.dn(t),n=this.fn[e];if(void 0===n)return!1;for(var r=0;r<n.length;r++)if(n[r][0].isEqual(t))return 1===n.length?delete this.fn[e]:n.splice(r,1),!0;return!1},t.prototype.forEach=function(t){S(this.fn,(function(e,n){for(var r=0,i=n;r<i.length;r++){var o=i[r],s=o[0],a=o[1];t(s,a)}}))},t.prototype.B=function(){return k(this.fn)},t}(),De=function(){function t(t,e,n,r){this.batchId=t,this.Tn=e,this.baseMutations=n,this.mutations=r}return t.prototype.at=function(t,e,n){for(var r=n.En,i=0;i<this.mutations.length;i++){var o=this.mutations[i];if(o.key.isEqual(t)){var s=r[i];e=o.at(e,s)}}return e},t.prototype.ot=function(t,e){for(var n=0,r=this.baseMutations;n<r.length;n++){var i=r[n];i.key.isEqual(t)&&(e=i.ot(e,e,this.Tn))}for(var o=e,s=0,a=this.mutations;s<a.length;s++){var u=a[s];u.key.isEqual(t)&&(e=u.ot(e,o,this.Tn))}return e},t.prototype.In=function(t){var e=this,n=t;return this.mutations.forEach((function(r){var i=e.ot(r.key,t.get(r.key));i&&(n=n.Ae(r.key,i))})),n},t.prototype.keys=function(){return this.mutations.reduce((function(t,e){return t.add(e.key)}),Yt())},t.prototype.isEqual=function(t){return this.batchId===t.batchId&&Ae(this.mutations,t.mutations,(function(t,e){return t.isEqual(e)}))&&Ae(this.baseMutations,t.baseMutations,(function(t,e){return t.isEqual(e)}))},t}(),Pe=function(){function t(t,e,n,r,i){this.batch=t,this.wn=e,this.En=n,this.streamToken=r,this.Rn=i}return t.from=function(e,n,r,i){Ee(e.mutations.length===r.length);for(var o=Kt(),s=e.mutations,a=0;a<s.length;a++)o=o.Ae(s[a].key,r[a].version);return new t(e,n,r,i,o)},t}(),Ce=function(){function t(t){var e=this;this.An=null,this.mn=null,this.result=void 0,this.error=void 0,this.Pn=!1,this.Vn=!1,t((function(t){e.Pn=!0,e.result=t,e.An&&e.An(t)}),(function(t){e.Pn=!0,e.error=t,e.mn&&e.mn(t)}))}return t.prototype.catch=function(t){return this.next(void 0,t)},t.prototype.next=function(e,n){var r=this;return this.Vn&&we(),this.Vn=!0,this.Pn?this.error?this.gn(n,this.error):this.pn(e,this.result):new t((function(t,i){r.An=function(n){r.pn(e,n).next(t,i)},r.mn=function(e){r.gn(n,e).next(t,i)}}))},t.prototype.yn=function(){var t=this;return new Promise((function(e,n){t.next(e,n)}))},t.prototype.bn=function(e){try{var n=e();return n instanceof t?n:t.resolve(n)}catch(e){return t.reject(e)}},t.prototype.pn=function(e,n){return e?this.bn((function(){return e(n)})):t.resolve(n)},t.prototype.gn=function(e,n){return e?this.bn((function(){return e(n)})):t.reject(n)},t.resolve=function(e){return new t((function(t,n){t(e)}))},t.reject=function(e){return new t((function(t,n){n(e)}))},t.vn=function(e){return new t((function(t,n){var r=0,i=0,o=!1;e.forEach((function(e){++r,e.next((function(){++i,o&&i===r&&t()}),(function(t){return n(t)}))})),o=!0,i===r&&t()}))},t.Sn=function(e){for(var n=t.resolve(!1),r=function(e){n=n.next((function(n){return n?t.resolve(n):e()}))},i=0,o=e;i<o.length;i++)r(o[i]);return n},t.forEach=function(t,e){var n=this,r=[];return t.forEach((function(t,i){r.push(e.call(n,t,i))})),this.vn(r)},t}(),xe=function(){function t(){this.Dn=new Oe((function(t){return t.toString()})),this.Cn=!1}return Object.defineProperty(t.prototype,"readTime",{get:function(){return this.Fn},set:function(t){this.Fn=t},enumerable:!0,configurable:!0}),t.prototype.Nn=function(t,e){this.$n(),this.readTime=e,this.Dn.set(t.key,t)},t.prototype.kn=function(t,e){this.$n(),e&&(this.readTime=e),this.Dn.set(t,null)},t.prototype.Ln=function(t,e){this.$n();var n=this.Dn.get(e);return void 0!==n?Ce.resolve(n):this.Mn(t,e)},t.prototype.getEntries=function(t,e){return this.On(t,e)},t.prototype.apply=function(t){return this.$n(),this.Cn=!0,this.xn(t)},t.prototype.$n=function(){},t}(),Re="The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.",Le=function(){function t(){this.Bn=[]}return t.prototype.qn=function(t){this.Bn.push(t)},t.prototype.Un=function(){this.Bn.forEach((function(t){return t()}))},t}(),je=function(){function t(t,e,n){this.Qn=t,this.Wn=e,this.jn=n}return t.prototype.Kn=function(t,e){var n=this;return this.Wn.Gn(t,e).next((function(r){return n.zn(t,e,r)}))},t.prototype.zn=function(t,e,n){return this.Qn.Ln(t,e).next((function(t){for(var r=0,i=n;r<i.length;r++)t=i[r].ot(e,t);return t}))},t.prototype.Hn=function(t,e,n){var r=Bt();return e.forEach((function(t,e){for(var i=0,o=n;i<o.length;i++)e=o[i].ot(t,e);r=r.Ae(t,e)})),r},t.prototype.Yn=function(t,e){var n=this;return this.Qn.getEntries(t,e).next((function(e){return n.Jn(t,e)}))},t.prototype.Jn=function(t,e){var n=this;return this.Wn.Xn(t,e).next((function(r){var i=n.Hn(t,e,r),o=qt();return i.forEach((function(t,e){e||(e=new bt(t,w.min())),o=o.Ae(t,e)})),o}))},t.prototype.Zn=function(t,e,n){return e.Ot()?this.tr(t,e.path):e._e()?this.er(t,e,n):this.sr(t,e,n)},t.prototype.tr=function(t,e){return this.Kn(t,new A(e)).next((function(t){var e=Wt();return t instanceof mt&&(e=e.Ae(t.key,t)),e}))},t.prototype.er=function(t,e,n){var r=this,i=e.collectionGroup,o=Wt();return this.jn.ir(t,i).next((function(s){return Ce.forEach(s,(function(s){var a=e.Zt(s.child(i));return r.sr(t,a,n).next((function(t){t.forEach((function(t,e){o=o.Ae(t,e)}))}))})).next((function(){return o}))}))},t.prototype.sr=function(t,e,n){var r,i,o=this;return this.Qn.Zn(t,e,n).next((function(n){return r=n,o.Wn.nr(t,e)})).next((function(e){return i=e,o.rr(t,i,r).next((function(t){r=t;for(var e=0,n=i;e<n.length;e++)for(var o=n[e],s=0,a=o.mutations;s<a.length;s++){var u=a[s],c=u.key,h=r.get(c),f=u.ot(h,h,o.Tn);r=f instanceof mt?r.Ae(c,f):r.remove(c)}}))})).next((function(){return r.forEach((function(t,n){e.matches(n)||(r=r.remove(t))})),r}))},t.prototype.rr=function(t,e,n){for(var r=Yt(),i=0,o=e;i<o.length;i++)for(var s=0,a=o[i].mutations;s<a.length;s++){var u=a[s];u instanceof ut&&null===n.get(u.key)&&(r=r.add(u.key))}var c=n;return this.Qn.getEntries(t,r).next((function(t){return t.forEach((function(t,e){null!==e&&e instanceof mt&&(c=c.Ae(t,e))})),c}))},t}(),Me=function(){function t(t,e,n,r){this.targetId=t,this.fromCache=e,this.hr=n,this.or=r}return t.ar=function(e,n){for(var r=Yt(),i=Yt(),o=0,s=n.docChanges;o<s.length;o++){var a=s[o];switch(a.type){case 0:r=r.add(a.doc.key);break;case 1:i=i.add(a.doc.key)}}return new t(e,n.fromCache,r,i)},t}(),Ve=function(){function t(t,e){var n=this;this.previousValue=t,e&&(e.ur=function(t){return n.cr(t)},this._r=function(t){return e.lr(t)})}return t.prototype.cr=function(t){return this.previousValue=Math.max(t,this.previousValue),this.previousValue},t.prototype.next=function(){var t=++this.previousValue;return this._r&&this._r(t),t},t}();Ve.dr=-1;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Ue=function(){var t=this;this.promise=new Promise((function(e,n){t.resolve=e,t.reject=n}))},Fe=function(){function t(t,e,n,r,i){void 0===n&&(n=1e3),void 0===r&&(r=1.5),void 0===i&&(i=6e4),this.Tr=t,this.Er=e,this.Ir=n,this.wr=r,this.Rr=i,this.Ar=0,this.mr=null,this.Pr=Date.now(),this.reset()}return t.prototype.reset=function(){this.Ar=0},t.prototype.Vr=function(){this.Ar=this.Rr},t.prototype.gr=function(t){var e=this;this.cancel();var n=Math.floor(this.Ar+this.pr()),r=Math.max(0,Date.now()-this.Pr),i=Math.max(0,n-r);i>0&&ge("ExponentialBackoff","Backing off for "+i+" ms (base delay: "+this.Ar+" ms, delay with jitter: "+n+" ms, last attempt: "+r+" ms ago)"),this.mr=this.Tr.yr(this.Er,i,(function(){return e.Pr=Date.now(),t()})),this.Ar*=this.wr,this.Ar<this.Ir&&(this.Ar=this.Ir),this.Ar>this.Rr&&(this.Ar=this.Rr)},t.prototype.br=function(){null!==this.mr&&(this.mr.vr(),this.mr=null)},t.prototype.cancel=function(){null!==this.mr&&(this.mr.cancel(),this.mr=null)},t.prototype.pr=function(){return(Math.random()-.5)*this.Ar},t}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function qe(t){for(var e="",n=0;n<t.length;n++)e.length>0&&(e=Ge(e)),e=Be(t.get(n),e);return Ge(e)}function Be(t,e){for(var n=e,r=t.length,i=0;i<r;i++){var o=t.charAt(i);switch(o){case"\0":n+="";break;case"":n+="";break;default:n+=o}}return n}function Ge(t){return t+""}function We(t){var e=t.length;if(Ee(e>=2),2===e)return Ee(""===t.charAt(0)&&""===t.charAt(1)),_.G;for(var n=e-2,r=[],i="",o=0;o<e;){var s=t.indexOf("",o);switch((s<0||s>n)&&we(),t.charAt(s+1)){case"":var a=t.substring(o,s),u=void 0;0===i.length?u=a:(u=i+=a,i=""),r.push(u);break;case"":i+=t.substring(o,s),i+="\0";break;case"":i+=t.substring(o,s+1);break;default:we()}o=s+2}return new _(r)}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var ze=function(){function t(){this.Sr=new Ke}return t.prototype.Dr=function(t,e){return this.Sr.add(e),Ce.resolve()},t.prototype.ir=function(t,e){return Ce.resolve(this.Sr.getEntries(e))},t}(),Ke=function(){function t(){this.index={}}return t.prototype.add=function(t){var e=t.O(),n=t.L(),r=this.index[e]||new Vt(_.N),i=!r.has(n);return this.index[e]=r.add(n),i},t.prototype.has=function(t){var e=t.O(),n=t.L(),r=this.index[e];return r&&r.has(n)},t.prototype.getEntries=function(t){return(this.index[t]||new Vt(_.N)).W()},t}(),He=function(){function t(){this.Cr=new Ke}return t.prototype.Dr=function(t,e){var n=this;if(!this.Cr.has(e)){var r=e.O(),i=e.L();t.qn((function(){n.Cr.add(e)}));var o={collectionId:r,parent:qe(i)};return Ye(t).put(o)}return Ce.resolve()},t.prototype.ir=function(t,e){var n=[],r=IDBKeyRange.bound([e,""],[Ne(e),""],!1,!0);return Ye(t).Fr(r).next((function(t){for(var r=0,i=t;r<i.length;r++){var o=i[r];if(o.collectionId!==e)break;n.push(We(o.parent))}return n}))},t}();function Ye(t){return cn.Nr(t,Rn.store)}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Xe=function(){function t(t,e){this.serializer=t,this.jn=e}return t.prototype.Nn=function(t,e,n){return $e(t).put(Qe(e),n)},t.prototype.kn=function(t,e){var n=$e(t),r=Qe(e);return n.delete(r)},t.prototype.updateMetadata=function(t,e){var n=this;return this.getMetadata(t).next((function(r){return r.byteSize+=e,n.$r(t,r)}))},t.prototype.Ln=function(t,e){var n=this;return $e(t).get(Qe(e)).next((function(t){return n.kr(t)}))},t.prototype.Lr=function(t,e){var n=this;return $e(t).get(Qe(e)).next((function(t){var e=n.kr(t);return e?{Mr:e,size:Ze(t)}:null}))},t.prototype.getEntries=function(t,e){var n=this,r=Bt();return this.Or(t,e,(function(t,e){var i=n.kr(e);r=r.Ae(t,i)})).next((function(){return r}))},t.prototype.xr=function(t,e){var n=this,r=Bt(),i=new Lt(A.N);return this.Or(t,e,(function(t,e){var o=n.kr(e);o?(r=r.Ae(t,o),i=i.Ae(t,Ze(e))):(r=r.Ae(t,null),i=i.Ae(t,0))})).next((function(){return{Br:r,qr:i}}))},t.prototype.Or=function(t,e,n){if(e.B())return Ce.resolve();var r=IDBKeyRange.bound(e.first().path.W(),e.last().path.W()),i=e.be(),o=i.Ne();return $e(t).Ur({range:r},(function(t,e,r){for(var s=A.st(t);o&&A.N(o,s)<0;)n(o,null),o=i.Ne();o&&o.isEqual(s)&&(n(o,e),o=i.$e()?i.Ne():null),o?r.Qr(o.path.W()):r.done()})).next((function(){for(;o;)n(o,null),o=i.$e()?i.Ne():null}))},t.prototype.Zn=function(t,e,n){var r=this,i=Wt(),o=e.path.length+1,s={};if(n.isEqual(w.min())){var a=e.path.W();s.range=IDBKeyRange.lowerBound(a)}else{var u=e.path.W(),c=this.serializer.Wr(n);s.range=IDBKeyRange.lowerBound([u,c],!0),s.index=On.collectionReadTimeIndex}return $e(t).Ur(s,(function(t,n,s){if(t.length===o){var a=r.serializer.jr(n);e.path.q(a.key.path)?a instanceof mt&&e.matches(a)&&(i=i.Ae(a.key,a)):s.done()}})).next((function(){return i}))},t.prototype.Kr=function(t,e){var n=this,r=qt(),i=this.serializer.Wr(e),o=$e(t),s=IDBKeyRange.lowerBound(i,!0);return o.Ur({index:On.readTimeIndex,range:s},(function(t,e){var o=n.serializer.jr(e);r=r.Ae(o.key,o),i=e.readTime})).next((function(){return{Gr:r,readTime:n.serializer.zr(i)}}))},t.prototype.Hr=function(t){var e=this,n=$e(t),r=w.min();return n.Ur({index:On.readTimeIndex,reverse:!0},(function(t,n,i){n.readTime&&(r=e.serializer.zr(n.readTime)),i.done()})).next((function(){return r}))},t.prototype.Yr=function(e){return new t.Jr(this,!!e&&e.Xr)},t.prototype.Zr=function(t){return this.getMetadata(t).next((function(t){return t.byteSize}))},t.prototype.getMetadata=function(t){return Je(t).get(Dn.key).next((function(t){return Ee(!!t),t}))},t.prototype.$r=function(t,e){return Je(t).put(Dn.key,e)},t.prototype.kr=function(t){if(t){var e=this.serializer.jr(t);return e instanceof bt&&e.version.isEqual(w.min())?null:e}return null},t}();function Je(t){return cn.Nr(t,Dn.store)}function $e(t){return cn.Nr(t,On.store)}function Qe(t){return t.path.W()}function Ze(t){var e;if(t.document)e=t.document;else if(t.unknownDocument)e=t.unknownDocument;else{if(!t.noDocument)throw we();e=t.noDocument}return JSON.stringify(e).length}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */Xe.Jr=function(t){function e(e,n){var r=this;return(r=t.call(this)||this).th=e,r.Xr=n,r.eh=new Oe((function(t){return t.toString()})),r}return i.__extends(e,t),e.prototype.xn=function(t){var e=this,n=[],r=0,i=new Vt((function(t,e){return Te(t.j(),e.j())}));return this.Dn.forEach((function(o,s){var a=e.eh.get(o);if(s){var u=e.th.serializer.sh(s,e.readTime);i=i.add(o.path.L());var c=Ze(u);r+=c-a,n.push(e.th.Nn(t,o,u))}else if(r-=a,e.Xr){var h=e.th.serializer.sh(new bt(o,w.min()),e.readTime);n.push(e.th.Nn(t,o,h))}else n.push(e.th.kn(t,o))})),i.forEach((function(r){n.push(e.th.jn.Dr(t,r))})),n.push(this.th.updateMetadata(t,r)),Ce.vn(n)},e.prototype.Mn=function(t,e){var n=this;return this.th.Lr(t,e).next((function(t){return null===t?(n.eh.set(e,0),null):(n.eh.set(e,t.size),t.Mr)}))},e.prototype.On=function(t,e){var n=this;return this.th.xr(t,e).next((function(t){var e=t.Br;return t.qr.forEach((function(t,e){n.eh.set(t,e)})),e}))},e}(xe);var tn=function(){function t(t){this.ih=t}return t.prototype.next=function(){return this.ih+=2,this.ih},t.nh=function(){return new t(0)},t.rh=function(){return new t(-1)},t}(),en=function(){function t(t,e){this.hh=t,this.serializer=e}return t.prototype.oh=function(t){var e=this;return this.ah(t).next((function(n){var r=new tn(n.highestTargetId);return n.highestTargetId=r.next(),e.uh(t,n).next((function(){return n.highestTargetId}))}))},t.prototype._h=function(t){return this.ah(t).next((function(t){return w.v(new b(t.lastRemoteSnapshotVersion.seconds,t.lastRemoteSnapshotVersion.nanoseconds))}))},t.prototype.lh=function(t){return this.ah(t).next((function(t){return t.highestListenSequenceNumber}))},t.prototype.dh=function(t,e,n){var r=this;return this.ah(t).next((function(i){return i.highestListenSequenceNumber=e,n&&(i.lastRemoteSnapshotVersion=n.C()),e>i.highestListenSequenceNumber&&(i.highestListenSequenceNumber=e),r.uh(t,i)}))},t.prototype.fh=function(t,e){var n=this;return this.Th(t,e).next((function(){return n.ah(t).next((function(r){return r.targetCount+=1,n.Eh(e,r),n.uh(t,r)}))}))},t.prototype.Ih=function(t,e){return this.Th(t,e)},t.prototype.wh=function(t,e){var n=this;return this.Rh(t,e.targetId).next((function(){return nn(t).delete(e.targetId)})).next((function(){return n.ah(t)})).next((function(e){return Ee(e.targetCount>0),e.targetCount-=1,n.uh(t,e)}))},t.prototype.Ah=function(t,e,n){var r=this,i=0,o=[];return nn(t).Ur((function(s,a){var u=r.serializer.mh(a);u.sequenceNumber<=e&&null===n.get(u.targetId)&&(i++,o.push(r.wh(t,u)))})).next((function(){return Ce.vn(o)})).next((function(){return i}))},t.prototype.js=function(t,e){var n=this;return nn(t).Ur((function(t,r){var i=n.serializer.mh(r);e(i)}))},t.prototype.ah=function(t){return rn(t).get(xn.key).next((function(t){return Ee(null!==t),t}))},t.prototype.uh=function(t,e){return rn(t).put(xn.key,e)},t.prototype.Th=function(t,e){return nn(t).put(this.serializer.Ph(e))},t.prototype.Eh=function(t,e){var n=!1;return t.targetId>e.highestTargetId&&(e.highestTargetId=t.targetId,n=!0),t.sequenceNumber>e.highestListenSequenceNumber&&(e.highestListenSequenceNumber=t.sequenceNumber,n=!0),n},t.prototype.Vh=function(t){return this.ah(t).next((function(t){return t.targetCount}))},t.prototype.gh=function(t,e){var n=this,r=e.canonicalId(),i=IDBKeyRange.bound([r,Number.NEGATIVE_INFINITY],[r,Number.POSITIVE_INFINITY]),o=null;return nn(t).Ur({range:i,index:Pn.queryTargetsIndexName},(function(t,r,i){var s=n.serializer.mh(r);e.isEqual(s.target)&&(o=s,i.done())})).next((function(){return o}))},t.prototype.ph=function(t,e,n){var r=this,i=[],o=on(t);return e.forEach((function(e){var s=qe(e.path);i.push(o.put(new Cn(n,s))),i.push(r.hh.yh(t,n,e))})),Ce.vn(i)},t.prototype.bh=function(t,e,n){var r=this,i=on(t);return Ce.forEach(e,(function(e){var o=qe(e.path);return Ce.vn([i.delete([n,o]),r.hh.vh(t,n,e)])}))},t.prototype.Rh=function(t,e){var n=on(t),r=IDBKeyRange.bound([e],[e+1],!1,!0);return n.delete(r)},t.prototype.Sh=function(t,e){var n=IDBKeyRange.bound([e],[e+1],!1,!0),r=on(t),i=Yt();return r.Ur({range:n,Dh:!0},(function(t,e,n){var r=We(t[1]),o=new A(r);i=i.add(o)})).next((function(){return i}))},t.prototype.Ch=function(t,e){var n=qe(e.path),r=IDBKeyRange.bound([n],[Ne(n)],!1,!0),i=0;return on(t).Ur({index:Cn.documentTargetsIndex,Dh:!0,range:r},(function(t,e,n){var r=t[0];t[1],0!==r&&(i++,n.done())})).next((function(){return i>0}))},t.prototype.si=function(t,e){var n=this;return nn(t).get(e).next((function(t){return t?n.serializer.mh(t):null}))},t}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function nn(t){return cn.Nr(t,Pn.store)}function rn(t){return cn.Nr(t,xn.store)}function on(t){return cn.Nr(t,Cn.store)}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var sn=function(){function t(t){this.Fh=t}return t.prototype.jr=function(t){if(t.document)return this.Fh.mi(t.document,!!t.hasCommittedMutations);if(t.noDocument){var e=A.st(t.noDocument.path),n=this.Nh(t.noDocument.readTime);return new bt(e,n,{hasCommittedMutations:!!t.hasCommittedMutations})}if(t.unknownDocument){var r=A.st(t.unknownDocument.path),i=this.Nh(t.unknownDocument.version);return new wt(r,i)}return we()},t.prototype.sh=function(t,e){var n=this.Wr(e),r=t.key.path.L().W();if(t instanceof mt){var i=this.Fh.Ai(t),o=t.hasCommittedMutations;return new On(null,null,i,o,n,r)}if(t instanceof bt){var s=t.key.path.W(),a=this.$h(t.version),u=t.hasCommittedMutations;return new On(null,new Sn(s,a),null,u,n,r)}if(t instanceof wt){var c=t.key.path.W(),h=this.$h(t.version);return new On(new kn(c,h),null,null,!0,n,r)}return we()},t.prototype.Wr=function(t){var e=t.C();return[e.seconds,e.nanoseconds]},t.prototype.zr=function(t){var e=new b(t[0],t[1]);return w.v(e)},t.prototype.$h=function(t){var e=t.C();return new _n(e.seconds,e.nanoseconds)},t.prototype.Nh=function(t){var e=new b(t.seconds,t.nanoseconds);return w.v(e)},t.prototype.kh=function(t,e){var n=this,r=e.baseMutations.map((function(t){return n.Fh.vi(t)})),i=e.mutations.map((function(t){return n.Fh.vi(t)}));return new An(t,e.batchId,e.Tn.toMillis(),r,i)},t.prototype.Lh=function(t){var e=this,n=(t.baseMutations||[]).map((function(t){return e.Fh.Fi(t)})),r=t.mutations.map((function(t){return e.Fh.Fi(t)})),i=b.fromMillis(t.localWriteTimeMs);return new De(t.batchId,i,n,r)},t.prototype.mh=function(t){var e,n=this.Nh(t.readTime),r=void 0!==t.lastLimboFreeSnapshotVersion?this.Nh(t.lastLimboFreeSnapshotVersion):w.min();return e=void 0!==t.query.documents?this.Fh.xi(t.query):this.Fh.Wi(t.query),new Pt(e,t.targetId,0,t.lastListenSequenceNumber,n,r,O.fromBase64String(t.resumeToken))},t.prototype.Ph=function(t){var e,n=this.$h(t.Ee),r=this.$h(t.lastLimboFreeSnapshotVersion);e=t.target.Ot()?this.Fh.Oi(t.target):this.Fh.Bi(t.target);var i=t.resumeToken.toBase64();return new Pn(t.targetId,t.target.canonicalId(),n,i,t.sequenceNumber,r,e)},t}(),an="Failed to obtain exclusive access to the persistence layer. To allow shared access, make sure to invoke `enablePersistence()` with `synchronizeTabs:true` in all tabs.",un=function(t){function e(e,n){var r=this;return(r=t.call(this)||this).Mh=e,r.Oh=n,r}return i.__extends(e,t),e}(Le),cn=function(){function t(e,n,r,i,o,s,a,u){if(this.allowTabSynchronization=e,this.persistenceKey=n,this.clientId=r,this.Tr=s,this.xh=u,this.Bh=null,this.qh=!1,this.isPrimary=!1,this.networkEnabled=!0,this.Uh=null,this.inForeground=!1,this.Qh=null,this.Wh=null,this.jh=Number.NEGATIVE_INFINITY,this.Kh=function(t){return Promise.resolve()},!t.Gh())throw new p(l.UNIMPLEMENTED,"This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");if(this.hh=new ln(this,o),this.zh=n+t.Hh,this.serializer=new sn(a),this.document=i.document,this.Yh=new en(this.hh,this.serializer),this.jn=new He,this.Qn=new Xe(this.serializer,this.jn),!i.window||!i.window.localStorage)throw new p(l.UNIMPLEMENTED,"IndexedDB persistence is only available on platforms that support LocalStorage.");this.window=i.window,this.Jh=this.window.localStorage}return t.Nr=function(t,e){if(t instanceof un)return Vn.Nr(t.Mh,e);throw we()},t.prototype.start=function(){var t=this;return Vn.Xh(this.zh,wn,new En(this.serializer)).then((function(e){return t.Zh=e,t.to()})).then((function(){if(!t.isPrimary&&!t.allowTabSynchronization)throw new p(l.FAILED_PRECONDITION,an);return t.eo(),t.so(),t.io(),t.runTransaction("getHighestListenSequenceNumber","readonly",(function(e){return t.Yh.lh(e)}))})).then((function(e){t.Bh=new Ve(e,t.xh)})).then((function(){t.qh=!0})).catch((function(e){return t.Zh&&t.Zh.close(),Promise.reject(e)}))},t.prototype.no=function(t){var e=this;return this.Kh=function(n){return i.__awaiter(e,void 0,void 0,(function(){return i.__generator(this,(function(e){return this.ro?[2,t(n)]:[2]}))}))},t(this.isPrimary)},t.prototype.ho=function(t){var e=this;this.Zh.oo((function(n){return i.__awaiter(e,void 0,void 0,(function(){return i.__generator(this,(function(e){switch(e.label){case 0:return null===n.newVersion?[4,t()]:[3,2];case 1:e.sent(),e.label=2;case 2:return[2]}}))}))}))},t.prototype.ao=function(t){var e=this;this.networkEnabled!==t&&(this.networkEnabled=t,this.Tr.uo((function(){return i.__awaiter(e,void 0,void 0,(function(){return i.__generator(this,(function(t){switch(t.label){case 0:return this.ro?[4,this.to()]:[3,2];case 1:t.sent(),t.label=2;case 2:return[2]}}))}))})))},t.prototype.to=function(){var t=this;return this.runTransaction("updateClientMetadataAndTryBecomePrimary","readwrite",(function(e){return fn(e).put(new jn(t.clientId,Date.now(),t.networkEnabled,t.inForeground)).next((function(){if(t.isPrimary)return t.co(e).next((function(e){e||(t.isPrimary=!1,t.Tr.uo((function(){return t.Kh(!1)})))}))})).next((function(){return t._o(e)})).next((function(n){return t.isPrimary&&!n?t.lo(e).next((function(){return!1})):!!n&&t.do(e).next((function(){return!0}))}))})).catch((function(e){if(!t.allowTabSynchronization){if(qn(e))return ge("IndexedDbPersistence","Failed to extend owner lease: ",e),t.isPrimary;throw e}return ge("IndexedDbPersistence","Releasing owner lease after error during lease refresh",e),!1})).then((function(e){t.isPrimary!==e&&t.Tr.uo((function(){return t.Kh(e)})),t.isPrimary=e}))},t.prototype.co=function(t){var e=this;return hn(t).get(In.key).next((function(t){return Ce.resolve(e.fo(t))}))},t.prototype.To=function(t){return fn(t).delete(this.clientId)},t.prototype.Eo=function(){return i.__awaiter(this,void 0,void 0,(function(){var e=this;return i.__generator(this,(function(n){switch(n.label){case 0:return!this.isPrimary||this.Io(this.jh,18e5)?[3,2]:(this.jh=Date.now(),[4,this.runTransaction("maybeGarbageCollectMultiClientState","readwrite-primary",(function(n){var r=t.Nr(n,jn.store);return r.Fr().next((function(t){var n=e.wo(t,18e5),i=t.filter((function(t){return-1===n.indexOf(t)}));return Ce.forEach(i,(function(t){return r.delete(t.clientId)})).next((function(){return i}))}))})).catch((function(){return[]}))]);case 1:n.sent().forEach((function(t){e.window.localStorage.removeItem(e.Ro(t.clientId))})),n.label=2;case 2:return[2]}}))}))},t.prototype.io=function(){var t=this;this.Wh=this.Tr.yr("client_metadata_refresh",4e3,(function(){return t.to().then((function(){return t.Eo()})).then((function(){return t.io()}))}))},t.prototype.fo=function(t){return!!t&&t.ownerId===this.clientId},t.prototype._o=function(t){var e=this;return hn(t).get(In.key).next((function(n){if(null!==n&&e.Io(n.leaseTimestampMs,5e3)&&!e.Ao(n.ownerId)){if(e.fo(n)&&e.networkEnabled)return!0;if(!e.fo(n)){if(!n.allowTabSynchronization)throw new p(l.FAILED_PRECONDITION,an);return!1}}return!(!e.networkEnabled||!e.inForeground)||fn(t).Fr().next((function(t){return void 0===e.wo(t,5e3).find((function(t){if(e.clientId!==t.clientId){var n=!e.networkEnabled&&t.networkEnabled,r=!e.inForeground&&t.inForeground,i=e.networkEnabled===t.networkEnabled;if(n||r&&i)return!0}return!1}))}))})).next((function(t){return e.isPrimary!==t&&ge("IndexedDbPersistence","Client "+(t?"is":"is not")+" eligible for a primary lease."),t}))},t.prototype.mo=function(){return i.__awaiter(this,void 0,void 0,(function(){var t=this;return i.__generator(this,(function(e){switch(e.label){case 0:return this.qh=!1,this.Po(),this.Wh&&(this.Wh.cancel(),this.Wh=null),this.Vo(),this.po(),[4,this.runTransaction("shutdown","readwrite",(function(e){return t.lo(e).next((function(){return t.To(e)}))})).catch((function(t){ge("IndexedDbPersistence","Proceeding with shutdown despite failure: ",t)}))];case 1:return e.sent(),this.Zh.close(),this.yo(),[2]}}))}))},t.prototype.wo=function(t,e){var n=this;return t.filter((function(t){return n.Io(t.updateTimeMs,e)&&!n.Ao(t.clientId)}))},t.prototype.bo=function(){var t=this;return this.runTransaction("getActiveClients","readonly",(function(e){return fn(e).Fr().next((function(e){return t.wo(e,18e5).map((function(t){return t.clientId}))}))}))},t.clearPersistence=function(e){return i.__awaiter(this,void 0,void 0,(function(){var n;return i.__generator(this,(function(r){switch(r.label){case 0:return t.Gh()?(n=e+t.Hh,[4,Vn.delete(n)]):[2,Promise.resolve()];case 1:return r.sent(),[2]}}))}))},Object.defineProperty(t.prototype,"ro",{get:function(){return this.qh},enumerable:!0,configurable:!0}),t.prototype.vo=function(t){return dn.So(t,this.serializer,this.jn,this.hh)},t.prototype.Do=function(){return this.Yh},t.prototype.Co=function(){return this.Qn},t.prototype.Fo=function(){return this.jn},t.prototype.runTransaction=function(t,e,n){var r=this;ge("IndexedDbPersistence","Starting transaction:",t);var i,o="readonly"===e?"readonly":"readwrite";return this.Zh.runTransaction(o,Mn,(function(o){return i=new un(o,r.Bh?r.Bh.next():Ve.dr),"readwrite-primary"===e?r.co(i).next((function(t){return!!t||r._o(i)})).next((function(e){if(!e)throw me("Failed to obtain primary lease for action '"+t+"'."),r.isPrimary=!1,r.Tr.uo((function(){return r.Kh(!1)})),new p(l.FAILED_PRECONDITION,Re);return n(i)})).next((function(t){return r.do(i).next((function(){return t}))})):r.No(i).next((function(){return n(i)}))})).then((function(t){return i.Un(),t}))},t.prototype.No=function(t){var e=this;return hn(t).get(In.key).next((function(t){if(null!==t&&e.Io(t.leaseTimestampMs,5e3)&&!e.Ao(t.ownerId)&&!e.fo(t)&&(!e.allowTabSynchronization||!t.allowTabSynchronization))throw new p(l.FAILED_PRECONDITION,an)}))},t.prototype.do=function(t){var e=new In(this.clientId,this.allowTabSynchronization,Date.now());return hn(t).put(In.key,e)},t.Gh=function(){return Vn.Gh()},t.$o=function(t){var e=t.ii.projectId;return t.ii.ln||(e+="."+t.ii.database),"firestore/"+t.persistenceKey+"/"+e+"/"},t.prototype.lo=function(t){var e=this,n=hn(t);return n.get(In.key).next((function(t){return e.fo(t)?(ge("IndexedDbPersistence","Releasing primary lease."),n.delete(In.key)):Ce.resolve()}))},t.prototype.Io=function(t,e){var n=Date.now();return!(t<n-e||t>n&&(me("Detected an update time that is in the future: "+t+" > "+n),1))},t.prototype.eo=function(){var t=this;null!==this.document&&"function"==typeof this.document.addEventListener&&(this.Qh=function(){t.Tr.uo((function(){return t.inForeground="visible"===t.document.visibilityState,t.to()}))},this.document.addEventListener("visibilitychange",this.Qh),this.inForeground="visible"===this.document.visibilityState)},t.prototype.Vo=function(){this.Qh&&(this.document.removeEventListener("visibilitychange",this.Qh),this.Qh=null)},t.prototype.so=function(){var t=this;"function"==typeof this.window.addEventListener&&(this.Uh=function(){t.Po(),t.Tr.uo((function(){return t.mo()}))},this.window.addEventListener("unload",this.Uh))},t.prototype.po=function(){this.Uh&&(this.window.removeEventListener("unload",this.Uh),this.Uh=null)},t.prototype.Ao=function(t){try{var e=null!==this.Jh.getItem(this.Ro(t));return ge("IndexedDbPersistence","Client '"+t+"' "+(e?"is":"is not")+" zombied in LocalStorage"),e}catch(t){return me("IndexedDbPersistence","Failed to get zombied client id.",t),!1}},t.prototype.Po=function(){try{this.Jh.setItem(this.Ro(this.clientId),String(Date.now()))}catch(t){me("Failed to set zombie client id.",t)}},t.prototype.yo=function(){try{this.Jh.removeItem(this.Ro(this.clientId))}catch(t){}},t.prototype.Ro=function(t){return"firestore_zombie_"+this.persistenceKey+"_"+t},t}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function hn(t){return cn.Nr(t,In.store)}function fn(t){return cn.Nr(t,jn.store)}cn.Hh="main";var ln=function(){function t(t,e){this.db=t,this.ko=new er(this,e)}return t.prototype.Lo=function(t){var e=this.Mo(t);return this.db.Do().Vh(t).next((function(t){return e.next((function(e){return t+e}))}))},t.prototype.Mo=function(t){var e=0;return this.Oo(t,(function(t){e++})).next((function(){return e}))},t.prototype.js=function(t,e){return this.db.Do().js(t,e)},t.prototype.Oo=function(t,e){return this.xo(t,(function(t,n){return e(n)}))},t.prototype.yh=function(t,e,n){return pn(t,n)},t.prototype.vh=function(t,e,n){return pn(t,n)},t.prototype.Ah=function(t,e,n){return this.db.Do().Ah(t,e,n)},t.prototype.Bo=function(t,e){return pn(t,e)},t.prototype.qo=function(t,e){return function(t,e){var n=!1;return bn(t).Uo((function(r){return vn(t,r,e).next((function(t){return t&&(n=!0),Ce.resolve(!t)}))})).next((function(){return n}))}(t,e)},t.prototype.Qo=function(t,e){var n=this,r=this.db.Co().Yr(),i=[],o=0;return this.xo(t,(function(s,a){if(a<=e){var u=n.qo(t,s).next((function(e){if(!e)return o++,r.Ln(t,s).next((function(){return r.kn(s),on(t).delete([0,qe(s.path)])}))}));i.push(u)}})).next((function(){return Ce.vn(i)})).next((function(){return r.apply(t)})).next((function(){return o}))},t.prototype.removeTarget=function(t,e){var n=e.Ie(t.Oh);return this.db.Do().Ih(t,n)},t.prototype.Wo=function(t,e){return pn(t,e)},t.prototype.xo=function(t,e){var n,r=on(t),i=Ve.dr;return r.Ur({index:Cn.documentTargetsIndex},(function(t,r){var o=t[0],s=(t[1],r.path),a=r.sequenceNumber;0===o?(i!==Ve.dr&&e(new A(We(n)),i),i=a,n=s):i=Ve.dr})).next((function(){i!==Ve.dr&&e(new A(We(n)),i)}))},t.prototype.jo=function(t){return this.db.Co().Zr(t)},t}();function pn(t,e){return on(t).put(function(t,e){return new Cn(0,qe(t.path),e)}(e,t.Oh))}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var dn=function(){function t(t,e,n,r){this.userId=t,this.serializer=e,this.jn=n,this.hh=r,this.Ko={}}return t.So=function(e,n,r,i){return Ee(""!==e.uid),new t(e.t()?e.uid:"",n,r,i)},t.prototype.Go=function(t){var e=!0,n=IDBKeyRange.bound([this.userId,Number.NEGATIVE_INFINITY],[this.userId,Number.POSITIVE_INFINITY]);return gn(t).Ur({index:An.userMutationsIndex,range:n},(function(t,n,r){e=!1,r.done()})).next((function(){return e}))},t.prototype.zo=function(t,e,n){return this.Ho(t).next((function(e){return e.lastStreamToken=n.toBase64(),bn(t).put(e)}))},t.prototype.Yo=function(t){return this.Ho(t).next((function(t){return O.fromBase64String(t.lastStreamToken)}))},t.prototype.Jo=function(t,e){return this.Ho(t).next((function(n){return n.lastStreamToken=e.toBase64(),bn(t).put(n)}))},t.prototype.Xo=function(t,e,n,r){var i=this,o=mn(t),s=gn(t);return s.add({}).next((function(a){Ee("number"==typeof a);for(var u=new De(a,e,n,r),c=i.serializer.kh(i.userId,u),h=[],f=new Vt((function(t,e){return Te(t.j(),e.j())})),l=0,p=r;l<p.length;l++){var d=p[l],v=Nn.key(i.userId,d.key.path,a);f=f.add(d.key.path.L()),h.push(s.put(c)),h.push(o.put(v,Nn.PLACEHOLDER))}return f.forEach((function(e){h.push(i.jn.Dr(t,e))})),t.qn((function(){i.Ko[a]=u.keys()})),Ce.vn(h).next((function(){return u}))}))},t.prototype.Zo=function(t,e){var n=this;return gn(t).get(e).next((function(t){return t?(Ee(t.userId===n.userId),n.serializer.Lh(t)):null}))},t.prototype.ta=function(t,e){var n=this;return this.Ko[e]?Ce.resolve(this.Ko[e]):this.Zo(t,e).next((function(t){if(t){var r=t.keys();return n.Ko[e]=r,r}return null}))},t.prototype.ea=function(t,e){var n=this,r=e+1,i=IDBKeyRange.lowerBound([this.userId,r]),o=null;return gn(t).Ur({index:An.userMutationsIndex,range:i},(function(t,e,i){e.userId===n.userId&&(Ee(e.batchId>=r),o=n.serializer.Lh(e)),i.done()})).next((function(){return o}))},t.prototype.sa=function(t){var e=IDBKeyRange.upperBound([this.userId,Number.POSITIVE_INFINITY]),n=-1;return gn(t).Ur({index:An.userMutationsIndex,range:e,reverse:!0},(function(t,e,r){n=e.batchId,r.done()})).next((function(){return n}))},t.prototype.ia=function(t){var e=this,n=IDBKeyRange.bound([this.userId,-1],[this.userId,Number.POSITIVE_INFINITY]);return gn(t).Fr(An.userMutationsIndex,n).next((function(t){return t.map((function(t){return e.serializer.Lh(t)}))}))},t.prototype.Gn=function(t,e){var n=this,r=Nn.prefixForPath(this.userId,e.path),i=IDBKeyRange.lowerBound(r),o=[];return mn(t).Ur({range:i},(function(r,i,s){var a=r[0],u=r[1],c=r[2],h=We(u);if(a===n.userId&&e.path.isEqual(h))return gn(t).get(c).next((function(t){if(!t)throw we();Ee(t.userId===n.userId),o.push(n.serializer.Lh(t))}));s.done()})).next((function(){return o}))},t.prototype.Xn=function(t,e){var n=this,r=new Vt(Te),i=[];return e.forEach((function(e){var o=Nn.prefixForPath(n.userId,e.path),s=IDBKeyRange.lowerBound(o),a=mn(t).Ur({range:s},(function(t,i,o){var s=t[0],a=t[1],u=t[2],c=We(a);s===n.userId&&e.path.isEqual(c)?r=r.add(u):o.done()}));i.push(a)})),Ce.vn(i).next((function(){return n.na(t,r)}))},t.prototype.nr=function(t,e){var n=this,r=e.path,i=r.length+1,o=Nn.prefixForPath(this.userId,r),s=IDBKeyRange.lowerBound(o),a=new Vt(Te);return mn(t).Ur({range:s},(function(t,e,o){var s=t[0],u=t[1],c=t[2],h=We(u);s===n.userId&&r.q(h)?h.length===i&&(a=a.add(c)):o.done()})).next((function(){return n.na(t,a)}))},t.prototype.na=function(t,e){var n=this,r=[],i=[];return e.forEach((function(e){i.push(gn(t).get(e).next((function(t){if(null===t)throw we();Ee(t.userId===n.userId),r.push(n.serializer.Lh(t))})))})),Ce.vn(i).next((function(){return r}))},t.prototype.ra=function(t,e){var n=this;return yn(t.Mh,this.userId,e).next((function(r){return t.qn((function(){n.ha(e.batchId)})),Ce.forEach(r,(function(e){return n.hh.Bo(t,e)}))}))},t.prototype.ha=function(t){delete this.Ko[t]},t.prototype.oa=function(t){var e=this;return this.Go(t).next((function(n){if(!n)return Ce.resolve();var r=IDBKeyRange.lowerBound(Nn.prefixForUser(e.userId)),i=[];return mn(t).Ur({range:r},(function(t,n,r){if(t[0]===e.userId){var o=We(t[1]);i.push(o)}else r.done()})).next((function(){Ee(0===i.length)}))}))},t.prototype.Ch=function(t,e){return vn(t,this.userId,e)},t.prototype.Ho=function(t){var e=this;return bn(t).get(this.userId).next((function(t){return t||new Tn(e.userId,-1,"")}))},t}();function vn(t,e,n){var r=Nn.prefixForPath(e,n.path),i=r[1],o=IDBKeyRange.lowerBound(r),s=!1;return mn(t).Ur({range:o,Dh:!0},(function(t,n,r){var o=t[0],a=t[1];t[2],o===e&&a===i&&(s=!0),r.done()})).next((function(){return s}))}function yn(t,e,n){var r=t.store(An.store),i=t.store(Nn.store),o=[],s=IDBKeyRange.only(n.batchId),a=0,u=r.Ur({range:s},(function(t,e,n){return a++,n.delete()}));o.push(u.next((function(){Ee(1===a)})));for(var c=[],h=0,f=n.mutations;h<f.length;h++){var l=f[h],p=Nn.key(e,l.key.path,n.batchId);o.push(i.delete(p)),c.push(l.key)}return Ce.vn(o).next((function(){return c}))}function gn(t){return cn.Nr(t,An.store)}function mn(t){return cn.Nr(t,Nn.store)}function bn(t){return cn.Nr(t,Tn.store)}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var wn=10,En=function(){function t(t){this.serializer=t}return t.prototype.createOrUpgrade=function(t,e,n,r){var i=this;Ee(n<r&&n>=0&&r<=wn);var o=new Bn(e);n<1&&r>=1&&(function(t){t.createObjectStore(In.store)}(t),function(t){t.createObjectStore(Tn.store,{keyPath:Tn.keyPath}),t.createObjectStore(An.store,{keyPath:An.keyPath,autoIncrement:!0}).createIndex(An.userMutationsIndex,An.userMutationsKeyPath,{unique:!0}),t.createObjectStore(Nn.store)}(t),Ln(t),function(t){t.createObjectStore(On.store)}(t));var s=Ce.resolve();return n<3&&r>=3&&(0!==n&&(function(t){t.deleteObjectStore(Cn.store),t.deleteObjectStore(Pn.store),t.deleteObjectStore(xn.store)}(t),Ln(t)),s=s.next((function(){return function(t){var e=t.store(xn.store),n=new xn(0,0,w.min().C(),0);return e.put(xn.key,n)}(o)}))),n<4&&r>=4&&(0!==n&&(s=s.next((function(){return function(t,e){return e.store(An.store).Fr().next((function(n){t.deleteObjectStore(An.store),t.createObjectStore(An.store,{keyPath:An.keyPath,autoIncrement:!0}).createIndex(An.userMutationsIndex,An.userMutationsKeyPath,{unique:!0});var r=e.store(An.store),i=n.map((function(t){return r.put(t)}));return Ce.vn(i)}))}(t,o)}))),s=s.next((function(){!function(t){t.createObjectStore(jn.store,{keyPath:jn.keyPath})}(t)}))),n<5&&r>=5&&(s=s.next((function(){return i.removeAcknowledgedMutations(o)}))),n<6&&r>=6&&(s=s.next((function(){return function(t){t.createObjectStore(Dn.store)}(t),i.addDocumentGlobal(o)}))),n<7&&r>=7&&(s=s.next((function(){return i.ensureSequenceNumbers(o)}))),n<8&&r>=8&&(s=s.next((function(){return i.createCollectionParentIndex(t,o)}))),n<9&&r>=9&&(s=s.next((function(){!function(t){t.objectStoreNames.contains("remoteDocumentChanges")&&t.deleteObjectStore("remoteDocumentChanges")}(t),function(t){var e=t.objectStore(On.store);e.createIndex(On.readTimeIndex,On.readTimeIndexPath,{unique:!1}),e.createIndex(On.collectionReadTimeIndex,On.collectionReadTimeIndexPath,{unique:!1})}(e)}))),n<10&&r>=10&&(s=s.next((function(){return i.rewriteCanonicalIds(o)}))),s},t.prototype.addDocumentGlobal=function(t){var e=0;return t.store(On.store).Ur((function(t,n){e+=Ze(n)})).next((function(){var n=new Dn(e);return t.store(Dn.store).put(Dn.key,n)}))},t.prototype.removeAcknowledgedMutations=function(t){var e=this,n=t.store(Tn.store),r=t.store(An.store);return n.Fr().next((function(n){return Ce.forEach(n,(function(n){var i=IDBKeyRange.bound([n.userId,-1],[n.userId,n.lastAcknowledgedBatchId]);return r.Fr(An.userMutationsIndex,i).next((function(r){return Ce.forEach(r,(function(r){Ee(r.userId===n.userId);var i=e.serializer.Lh(r);return yn(t,n.userId,i).next((function(){}))}))}))}))}))},t.prototype.ensureSequenceNumbers=function(t){var e=t.store(Cn.store),n=t.store(On.store);return t.store(xn.store).get(xn.key).next((function(t){var r=[];return n.Ur((function(n,i){var o=new _(n),s=function(t){return[0,qe(t)]}(o);r.push(e.get(s).next((function(n){return n?Ce.resolve():function(n){return e.put(new Cn(0,qe(n),t.highestListenSequenceNumber))}(o)})))})).next((function(){return Ce.vn(r)}))}))},t.prototype.createCollectionParentIndex=function(t,e){t.createObjectStore(Rn.store,{keyPath:Rn.keyPath});var n=e.store(Rn.store),r=new Ke,i=function(t){if(r.add(t)){var e=t.O(),i=t.L();return n.put({collectionId:e,parent:qe(i)})}};return e.store(On.store).Ur({Dh:!0},(function(t,e){var n=new _(t);return i(n.L())})).next((function(){return e.store(Nn.store).Ur({Dh:!0},(function(t,e){t[0];var n=t[1],r=(t[2],We(n));return i(r.L())}))}))},t.prototype.rewriteCanonicalIds=function(t){var e=this,n=t.store(Pn.store);return n.Ur((function(t,r){var i=e.serializer.mh(r),o=e.serializer.Ph(i);return n.put(o)}))},t}(),_n=function(t,e){this.seconds=t,this.nanoseconds=e},In=function(t,e,n){this.ownerId=t,this.allowTabSynchronization=e,this.leaseTimestampMs=n};In.store="owner",In.key="owner";var Tn=function(t,e,n){this.userId=t,this.lastAcknowledgedBatchId=e,this.lastStreamToken=n};Tn.store="mutationQueues",Tn.keyPath="userId";var An=function(t,e,n,r,i){this.userId=t,this.batchId=e,this.localWriteTimeMs=n,this.baseMutations=r,this.mutations=i};An.store="mutations",An.keyPath="batchId",An.userMutationsIndex="userMutationsIndex",An.userMutationsKeyPath=["userId","batchId"];var Nn=function(){function t(){}return t.prefixForUser=function(t){return[t]},t.prefixForPath=function(t,e){return[t,qe(e)]},t.key=function(t,e,n){return[t,qe(e),n]},t}();Nn.store="documentMutations",Nn.PLACEHOLDER=new Nn;var Sn=function(t,e){this.path=t,this.readTime=e},kn=function(t,e){this.path=t,this.version=e},On=function(t,e,n,r,i,o){this.unknownDocument=t,this.noDocument=e,this.document=n,this.hasCommittedMutations=r,this.readTime=i,this.parentPath=o};On.store="remoteDocuments",On.readTimeIndex="readTimeIndex",On.readTimeIndexPath="readTime",On.collectionReadTimeIndex="collectionReadTimeIndex",On.collectionReadTimeIndexPath=["parentPath","readTime"];var Dn=function(t){this.byteSize=t};Dn.store="remoteDocumentGlobal",Dn.key="remoteDocumentGlobalKey";var Pn=function(t,e,n,r,i,o,s){this.targetId=t,this.canonicalId=e,this.readTime=n,this.resumeToken=r,this.lastListenSequenceNumber=i,this.lastLimboFreeSnapshotVersion=o,this.query=s};Pn.store="targets",Pn.keyPath="targetId",Pn.queryTargetsIndexName="queryTargetsIndex",Pn.queryTargetsKeyPath=["canonicalId","targetId"];var Cn=function(t,e,n){this.targetId=t,this.path=e,this.sequenceNumber=n};Cn.store="targetDocuments",Cn.keyPath=["targetId","path"],Cn.documentTargetsIndex="documentTargetsIndex",Cn.documentTargetsKeyPath=["path","targetId"];var xn=function(t,e,n,r){this.highestTargetId=t,this.highestListenSequenceNumber=e,this.lastRemoteSnapshotVersion=n,this.targetCount=r};xn.key="targetGlobalKey",xn.store="targetGlobal";var Rn=function(t,e){this.collectionId=t,this.parent=e};function Ln(t){t.createObjectStore(Cn.store,{keyPath:Cn.keyPath}).createIndex(Cn.documentTargetsIndex,Cn.documentTargetsKeyPath,{unique:!0}),t.createObjectStore(Pn.store,{keyPath:Pn.keyPath}).createIndex(Pn.queryTargetsIndexName,Pn.queryTargetsKeyPath,{unique:!0}),t.createObjectStore(xn.store)}Rn.store="collectionParents",Rn.keyPath=["collectionId","parent"];var jn=function(t,e,n,r){this.clientId=t,this.updateTimeMs=e,this.networkEnabled=n,this.inForeground=r};jn.store="clientMetadata",jn.keyPath="clientId";var Mn=i.__spreadArrays(i.__spreadArrays(i.__spreadArrays([Tn.store,An.store,Nn.store,On.store,Pn.store,In.store,xn.store,Cn.store],[jn.store]),[Dn.store]),[Rn.store]),Vn=function(){function t(e){this.db=e,12.2===t.aa(a.getUA())&&me("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.")}return t.Xh=function(e,n,r){return ge("SimpleDb","Opening database:",e),new Ce((function(i,o){var s=window.indexedDB.open(e,n);s.onsuccess=function(e){var n=e.target.result;i(new t(n))},s.onblocked=function(){o(new p(l.FAILED_PRECONDITION,"Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."))},s.onerror=function(t){var e=t.target.error;"VersionError"===e.name?o(new p(l.FAILED_PRECONDITION,"A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")):o(e)},s.onupgradeneeded=function(t){ge("SimpleDb",'Database "'+e+'" requires upgrade from version:',t.oldVersion);var n=t.target.result;r.createOrUpgrade(n,s.transaction,t.oldVersion,wn).next((function(){ge("SimpleDb","Database upgrade to version "+wn+" complete")}))}})).yn()},t.delete=function(t){return ge("SimpleDb","Removing database:",t),Wn(window.indexedDB.deleteDatabase(t)).yn()},t.Gh=function(){if("undefined"==typeof window||null==window.indexedDB)return!1;if(t.ua())return!0;if(void 0===window.navigator)return!1;var e=a.getUA(),n=t.aa(e),r=0<n&&n<10,i=t.ca(e),o=0<i&&i<4.5;return!(e.indexOf("MSIE ")>0||e.indexOf("Trident/")>0||e.indexOf("Edge/")>0||r||o)},t.ua=function(){var t;return"undefined"!=typeof __PRIVATE_process&&"YES"===(null===(t=__PRIVATE_process.__PRIVATE_env)||void 0===t?void 0:t._a)},t.Nr=function(t,e){return t.store(e)},t.aa=function(t){var e=t.match(/i(?:phone|pad|pod) os ([\d_]+)/i),n=e?e[1].split("_").slice(0,2).join("."):"-1";return Number(n)},t.ca=function(t){var e=t.match(/Android ([\d.]+)/i),n=e?e[1].split(".").slice(0,2).join("."):"-1";return Number(n)},t.prototype.oo=function(t){this.db.onversionchange=function(e){return t(e)}},t.prototype.runTransaction=function(t,e,n){return i.__awaiter(this,void 0,void 0,(function(){var r,o,s,a,u;return i.__generator(this,(function(c){switch(c.label){case 0:r="readonly"===t,o=0,s=function(){var t,s,u,c,h;return i.__generator(this,(function(i){switch(i.label){case 0:++o,t=Bn.open(a.db,r?"readonly":"readwrite",e),i.label=1;case 1:return i.trys.push([1,3,,4]),s=n(t).catch((function(e){return t.abort(e),Ce.reject(e)})).yn(),u={},s.catch((function(){})),[4,t.la];case 2:return[2,(u.value=(i.sent(),s),u)];case 3:return c=i.sent(),h="FirebaseError"!==c.name&&o<3,ge("SimpleDb","Transaction failed with error: %s. Retrying: %s.",c.message,h),h?[3,4]:[2,{value:Promise.reject(c)}];case 4:return[2]}}))},a=this,c.label=1;case 1:return[5,s()];case 2:if("object"==typeof(u=c.sent()))return[2,u.value];c.label=3;case 3:return[3,1];case 4:return[2]}}))}))},t.prototype.close=function(){this.db.close()},t}(),Un=function(){function t(t){this.da=t,this.fa=!1,this.Ta=null}return Object.defineProperty(t.prototype,"Pn",{get:function(){return this.fa},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Ea",{get:function(){return this.Ta},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"cursor",{set:function(t){this.da=t},enumerable:!0,configurable:!0}),t.prototype.done=function(){this.fa=!0},t.prototype.Qr=function(t){this.Ta=t},t.prototype.delete=function(){return Wn(this.da.delete())},t}(),Fn=function(t){function e(e){var n=this;return(n=t.call(this,l.UNAVAILABLE,"IndexedDB transaction failed: "+e)||this).name="IndexedDbTransactionError",n}return i.__extends(e,t),e}(p);function qn(t){return"IndexedDbTransactionError"===t.name}var Bn=function(){function t(t){var e=this;this.transaction=t,this.aborted=!1,this.Ia=new Ue,this.transaction.oncomplete=function(){e.Ia.resolve()},this.transaction.onabort=function(){t.error?e.Ia.reject(new Fn(t.error)):e.Ia.resolve()},this.transaction.onerror=function(t){var n=Kn(t.target.error);e.Ia.reject(new Fn(n))}}return t.open=function(e,n,r){return new t(e.transaction(r,n))},Object.defineProperty(t.prototype,"la",{get:function(){return this.Ia.promise},enumerable:!0,configurable:!0}),t.prototype.abort=function(t){t&&this.Ia.reject(t),this.aborted||(ge("SimpleDb","Aborting transaction:",t?t.message:"Client-initiated abort"),this.aborted=!0,this.transaction.abort())},t.prototype.store=function(t){var e=this.transaction.objectStore(t);return new Gn(e)},t}(),Gn=function(){function t(t){this.store=t}return t.prototype.put=function(t,e){var n;return void 0!==e?(ge("SimpleDb","PUT",this.store.name,t,e),n=this.store.put(e,t)):(ge("SimpleDb","PUT",this.store.name,"<auto-key>",t),n=this.store.put(t)),Wn(n)},t.prototype.add=function(t){return ge("SimpleDb","ADD",this.store.name,t,t),Wn(this.store.add(t))},t.prototype.get=function(t){var e=this;return Wn(this.store.get(t)).next((function(n){return void 0===n&&(n=null),ge("SimpleDb","GET",e.store.name,t,n),n}))},t.prototype.delete=function(t){return ge("SimpleDb","DELETE",this.store.name,t),Wn(this.store.delete(t))},t.prototype.count=function(){return ge("SimpleDb","COUNT",this.store.name),Wn(this.store.count())},t.prototype.Fr=function(t,e){var n=this.cursor(this.options(t,e)),r=[];return this.wa(n,(function(t,e){r.push(e)})).next((function(){return r}))},t.prototype.Ra=function(t,e){ge("SimpleDb","DELETE ALL",this.store.name);var n=this.options(t,e);n.Dh=!1;var r=this.cursor(n);return this.wa(r,(function(t,e,n){return n.delete()}))},t.prototype.Ur=function(t,e){var n;e?n=t:(n={},e=t);var r=this.cursor(n);return this.wa(r,e)},t.prototype.Uo=function(t){var e=this.cursor({});return new Ce((function(n,r){e.onerror=function(t){var e=Kn(t.target.error);r(e)},e.onsuccess=function(e){var r=e.target.result;r?t(r.primaryKey,r.value).next((function(t){t?r.continue():n()})):n()}}))},t.prototype.wa=function(t,e){var n=[];return new Ce((function(r,i){t.onerror=function(t){i(t.target.error)},t.onsuccess=function(t){var i=t.target.result;if(i){var o=new Un(i),s=e(i.primaryKey,i.value,o);if(s instanceof Ce){var a=s.catch((function(t){return o.done(),Ce.reject(t)}));n.push(a)}o.Pn?r():null===o.Ea?i.continue():i.continue(o.Ea)}else r()}})).next((function(){return Ce.vn(n)}))},t.prototype.options=function(t,e){var n=void 0;return void 0!==t&&("string"==typeof t?n=t:e=t),{index:n,range:e}},t.prototype.cursor=function(t){var e="next";if(t.reverse&&(e="prev"),t.index){var n=this.store.index(t.index);return t.Dh?n.openKeyCursor(t.range,e):n.openCursor(t.range,e)}return this.store.openCursor(t.range,e)},t}();function Wn(t){return new Ce((function(e,n){t.onsuccess=function(t){var n=t.target.result;e(n)},t.onerror=function(t){var e=Kn(t.target.error);n(e)}}))}var zn=!1;function Kn(t){var e=Vn.aa(a.getUA());if(e>=12.2&&e<13){var n="An internal error was encountered in the Indexed Database server";if(t.message.indexOf(n)>=0){var r=new p("internal","IOS_INDEXEDDB_BUG1: IndexedDb has thrown '"+n+"'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");return zn||(zn=!0,setTimeout((function(){throw r}),0)),r}}return t}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Hn=function(){function t(t,e,n,r,i){this.Aa=t,this.Er=e,this.ma=n,this.op=r,this.Pa=i,this.Va=new Ue,this.then=this.Va.promise.then.bind(this.Va.promise),this.Va.promise.catch((function(t){}))}return t.ga=function(e,n,r,i,o){var s=new t(e,n,Date.now()+r,i,o);return s.start(r),s},t.prototype.start=function(t){var e=this;this.pa=setTimeout((function(){return e.ya()}),t)},t.prototype.vr=function(){return this.ya()},t.prototype.cancel=function(t){null!==this.pa&&(this.clearTimeout(),this.Va.reject(new p(l.CANCELLED,"Operation cancelled"+(t?": "+t:""))))},t.prototype.ya=function(){var t=this;this.Aa.uo((function(){return null!==t.pa?(t.clearTimeout(),t.op().then((function(e){return t.Va.resolve(e)}))):Promise.resolve()}))},t.prototype.clearTimeout=function(){null!==this.pa&&(this.Pa(this),clearTimeout(this.pa),this.pa=null)},t}(),Yn=function(){function t(){var t=this;this.ba=Promise.resolve(),this.va=Promise.resolve(),this.Sa=!1,this.Da=[],this.Ca=null,this.Fa=!1,this.Na=[],this.$a=new Fe(this,"async_queue_retry"),this.ka=function(){return t.$a.br()};var e=pe.nt().window;e&&"function"==typeof e.addEventListener&&e.addEventListener("visibilitychange",this.ka)}return Object.defineProperty(t.prototype,"La",{get:function(){return this.Sa},enumerable:!0,configurable:!0}),t.prototype.uo=function(t){this.enqueue(t)},t.prototype.Ma=function(t){this.Oa(),this.xa(t)},t.prototype.Ba=function(t){return this.Oa(),this.xa(t)},t.prototype.qa=function(t){return i.__awaiter(this,void 0,void 0,(function(){var e;return i.__generator(this,(function(n){switch(n.label){case 0:return this.Oa(),this.Sa?[3,2]:(this.Sa=!0,(e=pe.nt().window)&&e.removeEventListener("visibilitychange",this.ka),[4,this.Ba(t)]);case 1:n.sent(),n.label=2;case 2:return[2]}}))}))},t.prototype.enqueue=function(t){return this.Oa(),this.Sa?new Promise((function(t){})):this.xa(t)},t.prototype.Ua=function(t){var e=this;this.Oa(),this.Sa||(this.va=this.va.then((function(){var n=new Ue,r=function(){return i.__awaiter(e,void 0,void 0,(function(){var e;return i.__generator(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),[4,t()];case 1:return i.sent(),n.resolve(),this.$a.reset(),[3,3];case 2:if(!qn(e=i.sent()))throw n.resolve(),e;return ge("AsyncQueue","Operation failed with retryable error: "+e),this.$a.gr(r),[3,3];case 3:return[2]}}))}))};return e.uo(r),n.promise})))},t.prototype.xa=function(t){var e=this,n=this.ba.then((function(){return e.Fa=!0,t().catch((function(t){throw e.Ca=t,e.Fa=!1,me("INTERNAL UNHANDLED ERROR: ",t.stack||t.message||""),t})).then((function(t){return e.Fa=!1,t}))}));return this.ba=n,n},t.prototype.yr=function(t,e,n){var r=this;this.Oa(),this.Na.indexOf(t)>-1&&(e=0);var i=Hn.ga(this,t,e,n,(function(t){return r.Qa(t)}));return this.Da.push(i),i},t.prototype.Oa=function(){this.Ca&&we()},t.prototype.Wa=function(){},t.prototype.ja=function(){return i.__awaiter(this,void 0,void 0,(function(){var t;return i.__generator(this,(function(e){switch(e.label){case 0:return[4,t=this.ba];case 1:e.sent(),e.label=2;case 2:if(t!==this.ba)return[3,0];e.label=3;case 3:return[2]}}))}))},t.prototype.Ka=function(t){for(var e=0,n=this.Da;e<n.length;e++)if(n[e].Er===t)return!0;return!1},t.prototype.Ga=function(t){var e=this;return this.ja().then((function(){e.Da.sort((function(t,e){return t.ma-e.ma}));for(var n=0,r=e.Da;n<r.length;n++){var i=r[n];if(i.vr(),"all"!==t&&i.Er===t)break}return e.ja()}))},t.prototype.za=function(t){this.Na.push(t)},t.prototype.Qa=function(t){var e=this.Da.indexOf(t);this.Da.splice(e,1)},t}();function Xn(t,e){if(me("AsyncQueue",e+": "+t),qn(t))return new p(l.UNAVAILABLE,e+": "+t);throw t}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function Jn(t,e){var n=t[0],r=t[1],i=e[0],o=e[1],s=Te(n,i);return 0===s?Te(r,o):s}var $n=function(){function t(t){this.Ha=t,this.buffer=new Vt(Jn),this.Ya=0}return t.prototype.Ja=function(){return++this.Ya},t.prototype.Xa=function(t){var e=[t,this.Ja()];if(this.buffer.size<this.Ha)this.buffer=this.buffer.add(e);else{var n=this.buffer.last();Jn(e,n)<0&&(this.buffer=this.buffer.delete(n).add(e))}},Object.defineProperty(t.prototype,"maxValue",{get:function(){return this.buffer.last()[0]},enumerable:!0,configurable:!0}),t}(),Qn={Za:!1,tu:0,eu:0,su:0},Zn=function(){function t(t,e,n){this.iu=t,this.nu=e,this.ru=n}return t.hu=function(e){return new t(e,t.ou,t.au)},t}();Zn.uu=-1,Zn.cu=1048576,Zn._u=41943040,Zn.ou=10,Zn.au=1e3,Zn.lu=new Zn(Zn._u,Zn.ou,Zn.au),Zn.DISABLED=new Zn(Zn.uu,0,0);var tr=function(){function t(t,e){this.ko=t,this.Aa=e,this.du=!1,this.fu=null}return t.prototype.start=function(t){this.ko.Tu.iu!==Zn.uu&&this.Eu(t)},t.prototype.stop=function(){this.fu&&(this.fu.cancel(),this.fu=null)},Object.defineProperty(t.prototype,"ro",{get:function(){return null!==this.fu},enumerable:!0,configurable:!0}),t.prototype.Eu=function(t){var e=this,n=this.du?3e5:6e4;ge("LruGarbageCollector","Garbage collection scheduled in "+n+"ms"),this.fu=this.Aa.yr("lru_garbage_collection",n,(function(){return i.__awaiter(e,void 0,void 0,(function(){var e;return i.__generator(this,(function(n){switch(n.label){case 0:this.fu=null,this.du=!0,n.label=1;case 1:return n.trys.push([1,3,,7]),[4,t.Iu(this.ko)];case 2:return n.sent(),[3,7];case 3:return qn(e=n.sent())?(ge("LruGarbageCollector","Ignoring IndexedDB error during garbage collection: ",e),[3,6]):[3,4];case 4:return[4,ir(e)];case 5:n.sent(),n.label=6;case 6:return[3,7];case 7:return[4,this.Eu(t)];case 8:return n.sent(),[2]}}))}))}))},t}(),er=function(){function t(t,e){this.wu=t,this.Tu=e}return t.prototype.Ru=function(t,e){return this.wu.Lo(t).next((function(t){return Math.floor(e/100*t)}))},t.prototype.Au=function(t,e){var n=this;if(0===e)return Ce.resolve(Ve.dr);var r=new $n(e);return this.wu.js(t,(function(t){return r.Xa(t.sequenceNumber)})).next((function(){return n.wu.Oo(t,(function(t){return r.Xa(t)}))})).next((function(){return r.maxValue}))},t.prototype.Ah=function(t,e,n){return this.wu.Ah(t,e,n)},t.prototype.Qo=function(t,e){return this.wu.Qo(t,e)},t.prototype.mu=function(t,e){var n=this;return this.Tu.iu===Zn.uu?(ge("LruGarbageCollector","Garbage collection skipped; disabled"),Ce.resolve(Qn)):this.jo(t).next((function(r){return r<n.Tu.iu?(ge("LruGarbageCollector","Garbage collection skipped; Cache size "+r+" is lower than threshold "+n.Tu.iu),Qn):n.Pu(t,e)}))},t.prototype.jo=function(t){return this.wu.jo(t)},t.prototype.Pu=function(t,e){var n,r,i,o,a,u,c,h=this,f=Date.now();return this.Ru(t,this.Tu.nu).next((function(e){return e>h.Tu.ru?(ge("LruGarbageCollector","Capping sequence numbers to collect down to the maximum of "+h.Tu.ru+" from "+e),r=h.Tu.ru):r=e,o=Date.now(),h.Au(t,r)})).next((function(r){return n=r,a=Date.now(),h.Ah(t,n,e)})).next((function(e){return i=e,u=Date.now(),h.Qo(t,n)})).next((function(t){return c=Date.now(),ve()<=s.LogLevel.DEBUG&&ge("LruGarbageCollector","LRU Garbage Collection\n\tCounted targets in "+(o-f)+"ms\n\tDetermined least recently used "+r+" in "+(a-o)+"ms\n\tRemoved "+i+" targets in "+(u-a)+"ms\n\tRemoved "+t+" documents in "+(c-u)+"ms\nTotal Duration: "+(c-f)+"ms"),Ce.resolve({Za:!0,tu:r,eu:i,su:t})}))},t}(),nr=function(){function t(t,e,n){this.persistence=t,this.Vu=e,this.gu=new Lt(Te),this.pu=new Oe((function(t){return t.canonicalId()})),this.yu=w.min(),this.Wn=t.vo(n),this.bu=t.Co(),this.Yh=t.Do(),this.vu=new je(this.bu,this.Wn,this.persistence.Fo()),this.Vu.Su(this.vu)}return t.prototype.start=function(){return Promise.resolve()},t.prototype.Du=function(t){return i.__awaiter(this,void 0,void 0,(function(){var e,n,r,o=this;return i.__generator(this,(function(i){switch(i.label){case 0:return e=this.Wn,n=this.vu,[4,this.persistence.runTransaction("Handle user change","readonly",(function(r){var i;return o.Wn.ia(r).next((function(s){return i=s,e=o.persistence.vo(t),n=new je(o.bu,e,o.persistence.Fo()),e.ia(r)})).next((function(t){for(var e=[],o=[],s=Yt(),a=0,u=i;a<u.length;a++){var c=u[a];e.push(c.batchId);for(var h=0,f=c.mutations;h<f.length;h++){var l=f[h];s=s.add(l.key)}}for(var p=0,d=t;p<d.length;p++){var v=d[p];o.push(v.batchId);for(var y=0,g=v.mutations;y<g.length;y++){var m=g[y];s=s.add(m.key)}}return n.Yn(r,s).next((function(t){return{Cu:t,Fu:e,Nu:o}}))}))}))];case 1:return r=i.sent(),[2,(this.Wn=e,this.vu=n,this.Vu.Su(this.vu),r)]}}))}))},t.prototype.$u=function(t){var e,n=this,r=b.now(),i=t.reduce((function(t,e){return t.add(e.key)}),Yt());return this.persistence.runTransaction("Locally write mutations","readwrite",(function(o){return n.vu.Yn(o,i).next((function(i){e=i;for(var s=[],a=0,u=t;a<u.length;a++){var c=u[a],h=c.Pt(e.get(c.key));null!=h&&s.push(new ut(c.key,h,dt(h.proto.mapValue),ot.exists(!0)))}return n.Wn.Xo(o,r,s,t)}))})).then((function(t){var n=t.In(e);return{batchId:t.batchId,Dn:n}}))},t.prototype.zo=function(t){var e=this;return this.persistence.runTransaction("Acknowledge batch","readwrite-primary",(function(n){var r=t.batch.keys(),i=e.bu.Yr({Xr:!0});return e.Wn.zo(n,t.batch,t.streamToken).next((function(){return e.ku(n,t,i)})).next((function(){return i.apply(n)})).next((function(){return e.Wn.oa(n)})).next((function(){return e.vu.Yn(n,r)}))}))},t.prototype.Lu=function(t){var e=this;return this.persistence.runTransaction("Reject batch","readwrite-primary",(function(n){var r;return e.Wn.Zo(n,t).next((function(t){return Ee(null!==t),r=t.keys(),e.Wn.ra(n,t)})).next((function(){return e.Wn.oa(n)})).next((function(){return e.vu.Yn(n,r)}))}))},t.prototype.sa=function(){var t=this;return this.persistence.runTransaction("Get highest unacknowledged batch id","readonly",(function(e){return t.Wn.sa(e)}))},t.prototype.Yo=function(){var t=this;return this.persistence.runTransaction("Get last stream token","readonly",(function(e){return t.Wn.Yo(e)}))},t.prototype.Jo=function(t){var e=this;return this.persistence.runTransaction("Set last stream token","readwrite-primary",(function(n){return e.Wn.Jo(n,t)}))},t.prototype._h=function(){var t=this;return this.persistence.runTransaction("Get last remote snapshot version","readonly",(function(e){return t.Yh._h(e)}))},t.prototype.Mu=function(e){var n=this,r=e.Ee,i=this.gu;return this.persistence.runTransaction("Apply remote event","readwrite-primary",(function(o){var s=n.bu.Yr({Xr:!0});i=n.gu;var a=[];e.as.forEach((function(e,s){var u=i.get(s);if(u){a.push(n.Yh.bh(o,e.Is,s).next((function(){return n.Yh.ph(o,e.Ts,s)})));var c=e.resumeToken;if(c.rt()>0){var h=u.we(c,r).Ie(o.Oh);i=i.Ae(s,h),t.Ou(u,h,e)&&a.push(n.Yh.Ih(o,h))}}}));var u=qt(),c=Yt();if(e.cs.forEach((function(t,e){c=c.add(t)})),a.push(s.getEntries(o,c).next((function(t){e.cs.forEach((function(i,c){var h=t.get(i);c instanceof bt&&c.version.isEqual(w.min())?(s.kn(i,r),u=u.Ae(i,c)):null==h||c.version.S(h.version)>0||0===c.version.S(h.version)&&h.hasPendingWrites?(s.Nn(c,r),u=u.Ae(i,c)):ge("LocalStore","Ignoring outdated watch update for ",i,". Current version:",h.version," Watch version:",c.version),e._s.has(i)&&a.push(n.persistence.hh.Wo(o,i))}))}))),!r.isEqual(w.min())){var h=n.Yh._h(o).next((function(t){return n.Yh.dh(o,o.Oh,r)}));a.push(h)}return Ce.vn(a).next((function(){return s.apply(o)})).next((function(){return n.vu.Jn(o,u)}))})).then((function(t){return n.gu=i,t}))},t.Ou=function(t,e,n){return Ee(e.resumeToken.rt()>0),0===t.resumeToken.rt()||e.Ee.D()-t.Ee.D()>=this.xu||n.Ts.size+n.Es.size+n.Is.size>0},t.prototype.Bu=function(t){return i.__awaiter(this,void 0,void 0,(function(){var e,n,r,o,s,a,u,c,h=this;return i.__generator(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),[4,this.persistence.runTransaction("notifyLocalViewChanges","readwrite",(function(e){return Ce.forEach(t,(function(t){return Ce.forEach(t.hr,(function(n){return h.persistence.hh.yh(e,t.targetId,n)})).next((function(){return Ce.forEach(t.or,(function(n){return h.persistence.hh.vh(e,t.targetId,n)}))}))}))}))];case 1:return i.sent(),[3,3];case 2:if(!qn(e=i.sent()))throw e;return ge("LocalStore","Failed to update sequence numbers: "+e),[3,3];case 3:for(n=0,r=t;n<r.length;n++)o=r[n],s=o.targetId,o.fromCache||(a=this.gu.get(s),u=a.Ee,c=a.Re(u),this.gu=this.gu.Ae(s,c));return[2]}}))}))},t.prototype.qu=function(t){var e=this;return this.persistence.runTransaction("Get next mutation batch","readonly",(function(n){return void 0===t&&(t=-1),e.Wn.ea(n,t)}))},t.prototype.Uu=function(t){var e=this;return this.persistence.runTransaction("read document","readonly",(function(n){return e.vu.Kn(n,t)}))},t.prototype.Qu=function(t){var e=this;return this.persistence.runTransaction("Allocate target","readwrite",(function(n){var r;return e.Yh.gh(n,t).next((function(i){return i?(r=i,Ce.resolve(r)):e.Yh.oh(n).next((function(i){return r=new Pt(t,i,0,n.Oh),e.Yh.fh(n,r).next((function(){return r}))}))}))})).then((function(n){return null===e.gu.get(n.targetId)&&(e.gu=e.gu.Ae(n.targetId,n),e.pu.set(t,n.targetId)),n}))},t.prototype.gh=function(t,e){var n=this.pu.get(e);return void 0!==n?Ce.resolve(this.gu.get(n)):this.Yh.gh(t,e)},t.prototype.Wu=function(t,e){var n=this,r=this.gu.get(t),i=e?"readwrite":"readwrite-primary";return this.persistence.runTransaction("Release target",i,(function(t){return e?Ce.resolve():n.persistence.hh.removeTarget(t,r)})).then((function(){n.gu=n.gu.remove(t),n.pu.delete(r.target)}))},t.prototype.ju=function(t,e){var n=this,r=w.min(),i=Yt();return this.persistence.runTransaction("Execute query","readonly",(function(o){return n.gh(o,t.ee()).next((function(t){if(t)return r=t.lastLimboFreeSnapshotVersion,n.Yh.Sh(o,t.targetId).next((function(t){i=t}))})).next((function(){return n.Vu.Zn(o,t,e?r:w.min(),e?i:Yt())})).next((function(t){return{documents:t,Ku:i}}))}))},t.prototype.ku=function(t,e,n){var r=this,i=e.batch,o=i.keys(),s=Ce.resolve();return o.forEach((function(r){s=s.next((function(){return n.Ln(t,r)})).next((function(t){var o=t,s=e.Rn.get(r);Ee(null!==s),(!o||o.version.S(s)<0)&&(o=i.at(r,o,e))&&n.Nn(o,e.wn)}))})),s.next((function(){return r.Wn.ra(t,i)}))},t.prototype.Iu=function(t){var e=this;return this.persistence.runTransaction("Collect garbage","readwrite-primary",(function(n){return t.mu(n,e.gu)}))},t}();nr.xu=3e8;var rr=function(t){function e(e,n,r){var i=this;return(i=t.call(this,e,n,r)||this).persistence=e,i.Wn=e.vo(r),i.bu=e.Co(),i.Yh=e.Do(),i}return i.__extends(e,t),e.prototype.start=function(){return this.Gu()},e.prototype.zu=function(t){var e=this;return this.persistence.runTransaction("Lookup mutation documents","readonly",(function(n){return e.Wn.ta(n,t).next((function(t){return t?e.vu.Yn(n,t):Ce.resolve(null)}))}))},e.prototype.Hu=function(t){this.Wn.ha(t)},e.prototype.ao=function(t){this.persistence.ao(t)},e.prototype.bo=function(){return this.persistence.bo()},e.prototype.Yu=function(t){var e=this,n=this.gu.get(t);return n?Promise.resolve(n.target):this.persistence.runTransaction("Get target data","readonly",(function(n){return e.Yh.si(n,t).next((function(t){return t?t.target:null}))}))},e.prototype.Kr=function(){var t=this;return this.persistence.runTransaction("Get new document changes","readonly",(function(e){return t.bu.Kr(e,t.yu)})).then((function(e){var n=e.Gr,r=e.readTime;return t.yu=r,n}))},e.prototype.Gu=function(){return i.__awaiter(this,void 0,void 0,(function(){var t,e=this;return i.__generator(this,(function(n){switch(n.label){case 0:return t=this,[4,this.persistence.runTransaction("Synchronize last document change read time","readonly",(function(t){return e.bu.Hr(t)}))];case 1:return t.yu=n.sent(),[2]}}))}))},e}(nr);function ir(t){return i.__awaiter(this,void 0,void 0,(function(){return i.__generator(this,(function(e){if(t.code!==l.FAILED_PRECONDITION||t.message!==Re)throw t;return ge("LocalStore","Unexpectedly lost primary lease"),[2]}))}))}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var or=function(){function t(){this.Ju=new Vt(sr.Xu),this.Zu=new Vt(sr.tc)}return t.prototype.B=function(){return this.Ju.B()},t.prototype.yh=function(t,e){var n=new sr(t,e);this.Ju=this.Ju.add(n),this.Zu=this.Zu.add(n)},t.prototype.ec=function(t,e){var n=this;t.forEach((function(t){return n.yh(t,e)}))},t.prototype.vh=function(t,e){this.sc(new sr(t,e))},t.prototype.ic=function(t,e){var n=this;t.forEach((function(t){return n.vh(t,e)}))},t.prototype.nc=function(t){var e=this,n=A.EMPTY,r=new sr(n,t),i=new sr(n,t+1),o=[];return this.Zu.Ke([r,i],(function(t){e.sc(t),o.push(t.key)})),o},t.prototype.rc=function(){var t=this;this.Ju.forEach((function(e){return t.sc(e)}))},t.prototype.sc=function(t){this.Ju=this.Ju.delete(t),this.Zu=this.Zu.delete(t)},t.prototype.hc=function(t){var e=A.EMPTY,n=new sr(e,t),r=new sr(e,t+1),i=Yt();return this.Zu.Ke([n,r],(function(t){i=i.add(t.key)})),i},t.prototype.Ch=function(t){var e=new sr(t,0),n=this.Ju.ze(e);return null!==n&&t.isEqual(n.key)},t}(),sr=function(){function t(t,e){this.key=t,this.oc=e}return t.Xu=function(t,e){return A.N(t.key,e.key)||Te(t.oc,e.oc)},t.tc=function(t,e){return Te(t.oc,e.oc)||A.N(t.key,e.key)},t}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function ar(t,e){if(0!==e.length)throw new p(l.INVALID_ARGUMENT,"Function "+t+"() does not support arguments, but was called with "+Tr(e.length,"argument")+".")}function ur(t,e,n){if(e.length!==n)throw new p(l.INVALID_ARGUMENT,"Function "+t+"() requires "+Tr(n,"argument")+", but was called with "+Tr(e.length,"argument")+".")}function cr(t,e,n){if(e.length<n)throw new p(l.INVALID_ARGUMENT,"Function "+t+"() requires at least "+Tr(n,"argument")+", but was called with "+Tr(e.length,"argument")+".")}function hr(t,e,n,r){if(e.length<n||e.length>r)throw new p(l.INVALID_ARGUMENT,"Function "+t+"() requires between "+n+" and "+r+" arguments, but was called with "+Tr(e.length,"argument")+".")}function fr(t,e,n,r){yr(t,e,Ir(n)+" argument",r)}function lr(t,e,n,r){void 0!==r&&fr(t,e,n,r)}function pr(t,e,n,r){yr(t,e,n+" option",r)}function dr(t,e,n,r){void 0!==r&&pr(t,e,n,r)}function vr(t,e,n,r,i){void 0!==r&&function(t,e,n,r,i){for(var o=[],s=0,a=i;s<a.length;s++){var u=a[s];if(u===r)return;o.push(mr(u))}var c=mr(r);throw new p(l.INVALID_ARGUMENT,"Invalid value "+c+" provided to function "+t+'() for option "'+n+'". Acceptable values: '+o.join(", "))}(t,0,n,r,i)}function yr(t,e,n,r){if(!("object"===e?gr(r):"non-empty string"===e?"string"==typeof r&&""!==r:typeof r===e)){var i=mr(r);throw new p(l.INVALID_ARGUMENT,"Function "+t+"() requires its "+n+" to be of type "+e+", but it was: "+i)}}function gr(t){return"object"==typeof t&&null!==t&&(Object.getPrototypeOf(t)===Object.prototype||null===Object.getPrototypeOf(t))}function mr(t){if(void 0===t)return"undefined";if(null===t)return"null";if("string"==typeof t)return t.length>20&&(t=t.substring(0,20)+"..."),JSON.stringify(t);if("number"==typeof t||"boolean"==typeof t)return""+t;if("object"==typeof t){if(t instanceof Array)return"an array";var e=function(t){if(t.constructor){var e=/function\s+([^\s(]+)\s*\(/.exec(t.constructor.toString());if(e&&e.length>1)return e[1]}return null}(t);return e?"a custom "+e+" object":"an object"}return"function"==typeof t?"a function":we()}function br(t,e,n){if(void 0===n)throw new p(l.INVALID_ARGUMENT,"Function "+t+"() requires a valid "+Ir(e)+" argument, but it was undefined.")}function wr(t,e,n){S(e,(function(e,r){if(n.indexOf(e)<0)throw new p(l.INVALID_ARGUMENT,"Unknown option '"+e+"' passed to function "+t+"(). Available options: "+n.join(", "))}))}function Er(t,e,n,r){var i=mr(r);return new p(l.INVALID_ARGUMENT,"Function "+t+"() requires its "+Ir(n)+" argument to be a "+e+", but it was: "+i)}function _r(t,e,n){if(n<=0)throw new p(l.INVALID_ARGUMENT,"Function "+t+"() requires its "+Ir(e)+" argument to be a positive number, but it was: "+n+".")}function Ir(t){switch(t){case 1:return"first";case 2:return"second";case 3:return"third";default:return t+"th"}}function Tr(t,e){return t+" "+e+(1===t?"":"s")}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function Ar(){if("undefined"==typeof Uint8Array)throw new p(l.UNIMPLEMENTED,"Uint8Arrays are not available in this environment.")}function Nr(){if(!pe.nt().ac)throw new p(l.UNIMPLEMENTED,"Blobs are unavailable in Firestore in this environment.")}var Sr=function(){function t(t){Nr(),this.uc=t}return t.fromBase64String=function(e){ur("Blob.fromBase64String",arguments,1),fr("Blob.fromBase64String","string",1,e),Nr();try{return new t(O.fromBase64String(e))}catch(e){throw new p(l.INVALID_ARGUMENT,"Failed to construct Blob from Base64 string: "+e)}},t.fromUint8Array=function(e){if(ur("Blob.fromUint8Array",arguments,1),Ar(),!(e instanceof Uint8Array))throw Er("Blob.fromUint8Array","Uint8Array",1,e);return new t(O.fromUint8Array(e))},t.prototype.toBase64=function(){return ur("Blob.toBase64",arguments,0),Nr(),this.uc.toBase64()},t.prototype.toUint8Array=function(){return ur("Blob.toUint8Array",arguments,0),Ar(),this.uc.toUint8Array()},t.prototype.toString=function(){return"Blob(base64: "+this.toBase64()+")"},t.prototype.isEqual=function(t){return this.uc.isEqual(t.uc)},t}(),kr=function(){function t(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];!function(t,e,n,r){if(!(e instanceof Array)||e.length<1)throw new p(l.INVALID_ARGUMENT,"Function FieldPath() requires its fieldNames argument to be an array with at least "+Tr(1,"element")+".")}(0,t);for(var n=0;n<t.length;++n)if(fr("FieldPath","string",n,t[n]),0===t[n].length)throw new p(l.INVALID_ARGUMENT,"Invalid field name at argument $(i + 1). Field names must not be empty.");this.cc=new T(t)}return t.documentId=function(){return t._c},t.prototype.isEqual=function(e){if(!(e instanceof t))throw Er("isEqual","FieldPath",1,e);return this.cc.isEqual(e.cc)},t}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */kr._c=new kr(T.J().j());var Or=new RegExp("[~\\*/\\[\\]]"),Dr=function(t){this.lc=t},Pr=function(t){function e(){return t.call(this,"FieldValue.delete")||this}return i.__extends(e,t),e.prototype.Di=function(t){if(2!==t.dc)throw 1===t.dc?t.fc("FieldValue.delete() can only appear at the top level of your update data"):t.fc("FieldValue.delete() cannot be used with set() unless you pass {merge:true}");return t.Vt.push(t.path),null},e.prototype.isEqual=function(t){return t instanceof e},e}(Dr),Cr=function(t){function e(){return t.call(this,"FieldValue.serverTimestamp")||this}return i.__extends(e,t),e.prototype.Di=function(t){return new rt(t.path,$.instance)},e.prototype.isEqual=function(t){return t instanceof e},e}(Dr),xr=function(t){function e(e){var n=this;return(n=t.call(this,"FieldValue.arrayUnion")||this).Tc=e,n}return i.__extends(e,t),e.prototype.Di=function(t){var e=new qr({dc:3,methodName:this.lc,Ec:!0},t.ii,t.serializer,t.ignoreUndefinedProperties),n=this.Tc.map((function(t){return Gr(t,e)})),r=new Q(n);return new rt(t.path,r)},e.prototype.isEqual=function(t){return this===t},e}(Dr),Rr=function(t){function e(e){var n=this;return(n=t.call(this,"FieldValue.arrayRemove")||this).Tc=e,n}return i.__extends(e,t),e.prototype.Di=function(t){var e=new qr({dc:3,methodName:this.lc,Ec:!0},t.ii,t.serializer,t.ignoreUndefinedProperties),n=this.Tc.map((function(t){return Gr(t,e)})),r=new Z(n);return new rt(t.path,r)},e.prototype.isEqual=function(t){return this===t},e}(Dr),Lr=function(t){function e(e){var n=this;return(n=t.call(this,"FieldValue.increment")||this).Ic=e,n}return i.__extends(e,t),e.prototype.Di=function(t){var e=new qr({dc:3,methodName:this.lc},t.ii,t.serializer,t.ignoreUndefinedProperties),n=Gr(this.Ic,e),r=new tt(t.serializer,n);return new rt(t.path,r)},e.prototype.isEqual=function(t){return this===t},e}(Dr),jr=function(){function t(t,e){if(ur("GeoPoint",arguments,2),fr("GeoPoint","number",1,t),fr("GeoPoint","number",2,e),!isFinite(t)||t<-90||t>90)throw new p(l.INVALID_ARGUMENT,"Latitude must be a number between -90 and 90, but was: "+t);if(!isFinite(e)||e<-180||e>180)throw new p(l.INVALID_ARGUMENT,"Longitude must be a number between -180 and 180, but was: "+e);this.wc=t,this.Rc=e}return Object.defineProperty(t.prototype,"latitude",{get:function(){return this.wc},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"longitude",{get:function(){return this.Rc},enumerable:!0,configurable:!0}),t.prototype.isEqual=function(t){return this.wc===t.wc&&this.Rc===t.Rc},t.prototype.p=function(t){return Te(this.wc,t.wc)||Te(this.Rc,t.Rc)},t}(),Mr=/^__.*__$/,Vr=function(){function t(t,e,n){this.data=t,this.Vt=e,this.fieldTransforms=n}return t.prototype.Ac=function(t,e){var n=[];return null!==this.Vt?n.push(new ut(t,this.data,this.Vt,e)):n.push(new at(t,this.data,e)),this.fieldTransforms.length>0&&n.push(new ct(t,this.fieldTransforms)),n},t}(),Ur=function(){function t(t,e,n){this.data=t,this.Vt=e,this.fieldTransforms=n}return t.prototype.Ac=function(t,e){var n=[new ut(t,this.data,this.Vt,e)];return this.fieldTransforms.length>0&&n.push(new ct(t,this.fieldTransforms)),n},t}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function Fr(t){switch(t){case 0:case 2:case 1:return!0;case 3:case 4:return!1;default:throw we()}}var qr=function(){function t(t,e,n,r,i,o){this.settings=t,this.ii=e,this.serializer=n,this.ignoreUndefinedProperties=r,void 0===i&&this.mc(),this.fieldTransforms=i||[],this.Vt=o||[]}return Object.defineProperty(t.prototype,"path",{get:function(){return this.settings.path},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"dc",{get:function(){return this.settings.dc},enumerable:!0,configurable:!0}),t.prototype.Pc=function(e){return new t(Object.assign(Object.assign({},this.settings),e),this.ii,this.serializer,this.ignoreUndefinedProperties,this.fieldTransforms,this.Vt)},t.prototype.Vc=function(t){var e,n=null===(e=this.path)||void 0===e?void 0:e.child(t),r=this.Pc({path:n,Ec:!1});return r.gc(t),r},t.prototype.pc=function(t){var e,n=null===(e=this.path)||void 0===e?void 0:e.child(t),r=this.Pc({path:n,Ec:!1});return r.mc(),r},t.prototype.yc=function(t){return this.Pc({path:void 0,Ec:!0})},t.prototype.fc=function(t){var e=!this.path||this.path.B()?"":" (found in field "+this.path.toString()+")";return new p(l.INVALID_ARGUMENT,"Function "+this.settings.methodName+"() called with invalid data. "+t+e)},t.prototype.contains=function(t){return void 0!==this.Vt.find((function(e){return t.q(e)}))||void 0!==this.fieldTransforms.find((function(e){return t.q(e.field)}))},t.prototype.mc=function(){if(this.path)for(var t=0;t<this.path.length;t++)this.gc(this.path.get(t))},t.prototype.gc=function(t){if(0===t.length)throw this.fc("Document fields must not be empty");if(Fr(this.dc)&&Mr.test(t))throw this.fc('Document fields cannot begin and end with "__"')},t}(),Br=function(){function t(t,e,n){this.ii=t,this.ignoreUndefinedProperties=e,this.serializer=n||pe.nt().bc(t)}return t.prototype.vc=function(t,e){var n=this.Sc(0,t);Kr("Data must be an object, but it was:",n,e);var r=Wr(e,n);return new Vr(new lt(r),null,n.fieldTransforms)},t.prototype.Dc=function(t,e,n){var r=this.Sc(2,t);Kr("Data must be an object, but it was:",r,e);var i,o,s=Wr(e,r);if(n){for(var a=[],u=0,c=n;u<c.length;u++){var h=c[u],f=void 0;if(h instanceof kr)f=h.cc;else{if("string"!=typeof h)throw we();f=Yr(t,h)}if(!r.contains(f))throw new p(l.INVALID_ARGUMENT,"Field '"+f+"' is specified in your field mask but missing from your input data.");Xr(a,f)||a.push(f)}i=new nt(a),o=r.fieldTransforms.filter((function(t){return i.dt(t.field)}))}else i=new nt(r.Vt),o=r.fieldTransforms;return new Vr(new lt(s),i,o)},t.prototype.Cc=function(t,e){var n=this.Sc(1,t);Kr("Data must be an object, but it was:",n,e);var r=[],i=new pt;S(e,(function(e,o){var s=Yr(t,e),a=n.pc(s);if(o instanceof Pr)r.push(s);else{var u=Gr(o,a);null!=u&&(r.push(s),i.set(s,u))}}));var o=new nt(r);return new Ur(i.yt(),o,n.fieldTransforms)},t.prototype.Fc=function(t,e,n,r){var i=this.Sc(1,t),o=[Hr(t,e)],s=[n];if(r.length%2!=0)throw new p(l.INVALID_ARGUMENT,"Function "+t+"() needs to be called with an even number of arguments that alternate between field names and values.");for(var a=0;a<r.length;a+=2)o.push(Hr(t,r[a])),s.push(r[a+1]);for(var u=[],c=new pt,h=o.length-1;h>=0;--h)if(!Xr(u,o[h])){var f=o[h],d=s[h],v=i.pc(f);if(d instanceof Pr)u.push(f);else{var y=Gr(d,v);null!=y&&(u.push(f),c.set(f,y))}}var g=new nt(u);return new Ur(c.yt(),g,i.fieldTransforms)},t.prototype.Sc=function(t,e){return new qr({dc:t,methodName:e,path:T.G,Ec:!1},this.ii,this.serializer,this.ignoreUndefinedProperties)},t.prototype.Nc=function(t,e,n){return void 0===n&&(n=!1),Gr(e,this.Sc(n?4:3,t))},t}();function Gr(t,e){if(zr(t))return Kr("Unsupported field value:",e,t),Wr(t,e);if(t instanceof Dr)return function(t,e){if(!Fr(e.dc))throw e.fc(t.lc+"() can only be used with update() and set()");if(null===e.path)throw e.fc(t.lc+"() is not currently supported inside arrays");var n=t.Di(e);n&&e.fieldTransforms.push(n)}(t,e),null;if(e.path&&e.Vt.push(e.path),t instanceof Array){if(e.settings.Ec&&4!==e.dc)throw e.fc("Nested arrays are not supported");return function(t,e){for(var n=[],r=0,i=0,o=t;i<o.length;i++){var s=Gr(o[i],e.yc(r));null==s&&(s={nullValue:"NULL_VALUE"}),n.push(s),r++}return{arrayValue:{values:n}}}(t,e)}return function(t,e){if(null===t)return{nullValue:"NULL_VALUE"};if("number"==typeof t)return e.serializer.ai(t);if("boolean"==typeof t)return{booleanValue:t};if("string"==typeof t)return{stringValue:t};if(t instanceof Date){var n=b.fromDate(t);return{timestampValue:e.serializer.C(n)}}if(t instanceof b){var r=new b(t.seconds,1e3*Math.floor(t.nanoseconds/1e3));return{timestampValue:e.serializer.C(r)}}if(t instanceof jr)return{geoPointValue:{latitude:t.latitude,longitude:t.longitude}};if(t instanceof Sr)return{bytesValue:e.serializer.ui(t)};if(t instanceof Bi){var i=e.ii,o=t.firestore.$c;if(!o.isEqual(i))throw e.fc("Document reference is for database "+o.projectId+"/"+o.database+" but should be for database "+i.projectId+"/"+i.database);return{referenceValue:e.serializer._i(t.kc.path,t.firestore.$c)}}if(void 0===t&&e.ignoreUndefinedProperties)return null;throw e.fc("Unsupported field value: "+mr(t))}(t,e)}function Wr(t,e){var n={};return k(t)?e.path&&e.path.length>0&&e.Vt.push(e.path):S(t,(function(t,r){var i=Gr(r,e.Vc(t));null!=i&&(n[t]=i)})),{mapValue:{fields:n}}}function zr(t){return!("object"!=typeof t||null===t||t instanceof Array||t instanceof Date||t instanceof b||t instanceof jr||t instanceof Sr||t instanceof Bi||t instanceof Dr)}function Kr(t,e,n){if(!zr(n)||!gr(n)){var r=mr(n);throw"an object"===r?e.fc(t+" a custom object"):e.fc(t+" "+r)}}function Hr(t,e){if(e instanceof kr)return e.cc;if("string"==typeof e)return Yr(t,e);throw new p(l.INVALID_ARGUMENT,"Function "+t+"() called with invalid data. Field path arguments must be of type string or FieldPath.")}function Yr(t,e){try{return function(t){if(t.search(Or)>=0)throw new p(l.INVALID_ARGUMENT,"Invalid field path ("+t+"). Paths must not contain '~', '*', '/', '[', or ']'");try{return new(kr.bind.apply(kr,i.__spreadArrays([void 0],t.split("."))))}catch(e){throw new p(l.INVALID_ARGUMENT,"Invalid field path ("+t+"). Paths must not be empty, begin with '.', end with '.', or contain '..'")}}(e).cc}catch(e){var n=(r=e)instanceof Error?r.message:r.toString();throw new p(l.INVALID_ARGUMENT,"Function "+t+"() called with invalid data. "+n)}var r}function Xr(t,e){return t.some((function(t){return t.isEqual(e)}))}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Jr=function(){function t(t,e,n,r,i,o){this.Tr=t,this.Lc=n,this.Mc=r,this.Oc=i,this.listener=o,this.state=0,this.xc=0,this.Bc=null,this.stream=null,this.$a=new Fe(t,e)}return t.prototype.qc=function(){return 1===this.state||2===this.state||4===this.state},t.prototype.Uc=function(){return 2===this.state},t.prototype.start=function(){3!==this.state?this.auth():this.Qc()},t.prototype.stop=function(){return i.__awaiter(this,void 0,void 0,(function(){return i.__generator(this,(function(t){switch(t.label){case 0:return this.qc()?[4,this.close(0)]:[3,2];case 1:t.sent(),t.label=2;case 2:return[2]}}))}))},t.prototype.Wc=function(){this.state=0,this.$a.reset()},t.prototype.jc=function(){var t=this;this.Uc()&&null===this.Bc&&(this.Bc=this.Tr.yr(this.Lc,6e4,(function(){return t.Kc()})))},t.prototype.Gc=function(t){this.zc(),this.stream.send(t)},t.prototype.Kc=function(){return i.__awaiter(this,void 0,void 0,(function(){return i.__generator(this,(function(t){return this.Uc()?[2,this.close(0)]:[2]}))}))},t.prototype.zc=function(){this.Bc&&(this.Bc.cancel(),this.Bc=null)},t.prototype.close=function(t,e){return i.__awaiter(this,void 0,void 0,(function(){return i.__generator(this,(function(n){switch(n.label){case 0:return this.zc(),this.$a.cancel(),this.xc++,3!==t?this.$a.reset():e&&e.code===l.RESOURCE_EXHAUSTED?(me(e.toString()),me("Using maximum backoff delay to prevent overloading the backend."),this.$a.Vr()):e&&e.code===l.UNAUTHENTICATED&&this.Oc._(),null!==this.stream&&(this.Hc(),this.stream.close(),this.stream=null),this.state=t,[4,this.listener.Yc(e)];case 1:return n.sent(),[2]}}))}))},t.prototype.Hc=function(){},t.prototype.auth=function(){var t=this;this.state=1;var e=this.Jc(this.xc),n=this.xc;this.Oc.getToken().then((function(e){t.xc===n&&t.Xc(e)}),(function(n){e((function(){var e=new p(l.UNKNOWN,"Fetching auth token failed: "+n.message);return t.Zc(e)}))}))},t.prototype.Xc=function(t){var e=this,n=this.Jc(this.xc);this.stream=this.t_(t),this.stream.e_((function(){n((function(){return e.state=2,e.listener.e_()}))})),this.stream.Yc((function(t){n((function(){return e.Zc(t)}))})),this.stream.onMessage((function(t){n((function(){return e.onMessage(t)}))}))},t.prototype.Qc=function(){var t=this;this.state=4,this.$a.gr((function(){return i.__awaiter(t,void 0,void 0,(function(){return i.__generator(this,(function(t){return this.state=0,this.start(),[2]}))}))}))},t.prototype.Zc=function(t){return ge("PersistentStream","close with error: "+t),this.stream=null,this.close(3,t)},t.prototype.Jc=function(t){var e=this;return function(n){e.Tr.uo((function(){return e.xc===t?n():(ge("PersistentStream","stream callback skipped by getCloseGuardedDispatcher."),Promise.resolve())}))}},t}(),$r=function(t){function e(e,n,r,i,o){var s=this;return(s=t.call(this,e,"listen_stream_connection_backoff","listen_stream_idle",n,r,o)||this).serializer=i,s}return i.__extends(e,t),e.prototype.t_=function(t){return this.Mc.s_("Listen",t)},e.prototype.onMessage=function(t){this.$a.reset();var e=this.serializer.pi(t),n=this.serializer.bi(t);return this.listener.i_(e,n)},e.prototype.n_=function(t){var e={};e.database=this.serializer.wi,e.addTarget=this.serializer.ee(t);var n=this.serializer.zi(t);n&&(e.labels=n),this.Gc(e)},e.prototype.r_=function(t){var e={};e.database=this.serializer.wi,e.removeTarget=t,this.Gc(e)},e}(Jr),Qr=function(t){function e(e,n,r,i,o){var s=this;return(s=t.call(this,e,"write_stream_connection_backoff","write_stream_idle",n,r,o)||this).serializer=i,s.h_=!1,s.lastStreamToken=O.ht,s}return i.__extends(e,t),Object.defineProperty(e.prototype,"o_",{get:function(){return this.h_},enumerable:!0,configurable:!0}),e.prototype.start=function(){this.h_=!1,t.prototype.start.call(this)},e.prototype.Hc=function(){this.h_&&this.a_([])},e.prototype.t_=function(t){return this.Mc.s_("Write",t)},e.prototype.onMessage=function(t){if(Ee(!!t.streamToken),this.lastStreamToken=this.serializer.ci(t.streamToken),this.h_){this.$a.reset();var e=this.serializer.Mi(t.writeResults,t.commitTime),n=this.serializer.fromVersion(t.commitTime);return this.listener.u_(n,e)}return Ee(!t.writeResults||0===t.writeResults.length),this.h_=!0,this.listener.c_()},e.prototype.__=function(){var t={};t.database=this.serializer.wi,this.Gc(t)},e.prototype.a_=function(t){var e=this,n={streamToken:this.serializer.ui(this.lastStreamToken),writes:t.map((function(t){return e.serializer.vi(t)}))};this.Gc(n)},e}(Jr),Zr=function(t){function e(e,n,r){var i=this;return(i=t.call(this)||this).Mc=e,i.credentials=n,i.serializer=r,i}return i.__extends(e,t),e.prototype.d_=function(t,e){var n=this;return this.credentials.getToken().then((function(r){return n.Mc.d_(t,e,r)})).catch((function(t){throw t.code===l.UNAUTHENTICATED&&n.credentials._(),t}))},e.prototype.f_=function(t,e){var n=this;return this.credentials.getToken().then((function(r){return n.Mc.f_(t,e,r)})).catch((function(t){throw t.code===l.UNAUTHENTICATED&&n.credentials._(),t}))},e}((function(){this.l_=void 0})),ti=function(){function t(t){this.T_=t,this.E_=Kt(),this.mutations=[],this.I_=!1,this.w_=null,this.R_=new Set}return t.prototype.A_=function(t){return i.__awaiter(this,void 0,void 0,(function(){var e,n=this;return i.__generator(this,(function(r){switch(r.label){case 0:if(this.m_(),this.mutations.length>0)throw new p(l.INVALID_ARGUMENT,"Firestore transactions require all reads to be executed before all writes.");return[4,function(t,e){return i.__awaiter(this,void 0,void 0,(function(){var n,r,o,s,a;return i.__generator(this,(function(i){switch(i.label){case 0:return n=_e(t),r={database:n.serializer.wi,documents:e.map((function(t){return n.serializer.fi(t)}))},[4,n.f_("BatchGetDocuments",r)];case 1:return o=i.sent(),s=new Map,o.forEach((function(t){var e=n.serializer.gi(t);s.set(e.key.toString(),e)})),a=[],[2,(e.forEach((function(t){var e=s.get(t.toString());Ee(!!e),a.push(e)})),a)]}}))}))}(this.T_,t)];case 1:return[2,((e=r.sent()).forEach((function(t){t instanceof bt||t instanceof mt?n.P_(t):we()})),e)]}}))}))},t.prototype.set=function(t,e){this.write(e.Ac(t,this.Rt(t))),this.R_.add(t)},t.prototype.update=function(t,e){try{this.write(e.Ac(t,this.V_(t)))}catch(t){this.w_=t}this.R_.add(t)},t.prototype.delete=function(t){this.write([new ht(t,this.Rt(t))]),this.R_.add(t)},t.prototype.commit=function(){return i.__awaiter(this,void 0,void 0,(function(){var t,e=this;return i.__generator(this,(function(n){switch(n.label){case 0:if(this.m_(),this.w_)throw this.w_;return t=this.E_,this.mutations.forEach((function(e){t=t.remove(e.key)})),t.forEach((function(t,n){e.mutations.push(new ft(t,e.Rt(t)))})),[4,function(t,e){return i.__awaiter(this,void 0,void 0,(function(){var n,r,o;return i.__generator(this,(function(i){switch(i.label){case 0:return n=_e(t),r={database:n.serializer.wi,writes:e.map((function(t){return n.serializer.vi(t)}))},[4,n.d_("Commit",r)];case 1:return o=i.sent(),[2,n.serializer.Mi(o.writeResults,o.commitTime)]}}))}))}(this.T_,this.mutations)];case 1:return n.sent(),this.I_=!0,[2]}}))}))},t.prototype.P_=function(t){var e;if(t instanceof mt)e=t.version;else{if(!(t instanceof bt))throw we();e=w.min()}var n=this.E_.get(t.key);if(null!==n){if(!e.isEqual(n))throw new p(l.ABORTED,"Document version changed between two reads.")}else this.E_=this.E_.Ae(t.key,e)},t.prototype.Rt=function(t){var e=this.E_.get(t);return!this.R_.has(t)&&e?ot.updateTime(e):ot.ft()},t.prototype.V_=function(t){var e=this.E_.get(t);if(!this.R_.has(t)&&e){if(e.isEqual(w.min()))throw new p(l.INVALID_ARGUMENT,"Can't update a document that doesn't exist.");return ot.updateTime(e)}return ot.exists(!0)},t.prototype.write=function(t){this.m_(),this.mutations=this.mutations.concat(t)},t.prototype.m_=function(){},t}(),ei=function(){function t(t,e){this.Aa=t,this.g_=e,this.state="Unknown",this.p_=0,this.y_=null,this.b_=!0}return t.prototype.v_=function(){var t=this;0===this.p_&&(this.S_("Unknown"),this.y_=this.Aa.yr("online_state_timeout",1e4,(function(){return t.y_=null,t.D_("Backend didn't respond within 10 seconds."),t.S_("Offline"),Promise.resolve()})))},t.prototype.C_=function(t){"Online"===this.state?this.S_("Unknown"):(this.p_++,this.p_>=1&&(this.F_(),this.D_("Connection failed 1 times. Most recent error: "+t.toString()),this.S_("Offline")))},t.prototype.set=function(t){this.F_(),this.p_=0,"Online"===t&&(this.b_=!1),this.S_(t)},t.prototype.S_=function(t){t!==this.state&&(this.state=t,this.g_(t))},t.prototype.D_=function(t){var e="Could not reach Cloud Firestore backend. "+t+"\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.";this.b_?(me(e),this.b_=!1):ge("OnlineStateTracker",e)},t.prototype.F_=function(){null!==this.y_&&(this.y_.cancel(),this.y_=null)},t}(),ni=function(){function t(t,e,n,r,o){var s=this;this.N_=t,this.T_=e,this.Aa=n,this.k_=[],this.L_=new Map,this.M_=null,this.networkEnabled=!1,this.isPrimary=!1,this.O_=!1,this.x_=o,this.x_.B_((function(t){n.uo((function(){return i.__awaiter(s,void 0,void 0,(function(){return i.__generator(this,(function(t){switch(t.label){case 0:return this.q_()?(ge("RemoteStore","Restarting streams for network reachability change."),[4,this.U_()]):[3,2];case 1:t.sent(),t.label=2;case 2:return[2]}}))}))}))})),this.Q_=new ei(n,r),this.W_=function(t,e,n){var r=_e(t);return new $r(e,r.Mc,r.credentials,r.serializer,n)}(this.T_,n,{e_:this.j_.bind(this),Yc:this.K_.bind(this),i_:this.G_.bind(this)}),this.z_=function(t,e,n){var r=_e(t);return new Qr(e,r.Mc,r.credentials,r.serializer,n)}(this.T_,n,{e_:this.H_.bind(this),Yc:this.Y_.bind(this),c_:this.J_.bind(this),u_:this.u_.bind(this)})}return t.prototype.start=function(){return this.enableNetwork()},t.prototype.enableNetwork=function(){return this.networkEnabled=!0,this.X_()},t.prototype.X_=function(){return i.__awaiter(this,void 0,void 0,(function(){var t;return i.__generator(this,(function(e){switch(e.label){case 0:return this.q_()?(t=this.z_,[4,this.N_.Yo()]):[3,3];case 1:return t.lastStreamToken=e.sent(),this.Z_()?this.tl():this.Q_.set("Unknown"),[4,this.el()];case 2:e.sent(),e.label=3;case 3:return[2]}}))}))},t.prototype.disableNetwork=function(){return i.__awaiter(this,void 0,void 0,(function(){return i.__generator(this,(function(t){switch(t.label){case 0:return this.networkEnabled=!1,[4,this.sl()];case 1:return t.sent(),this.Q_.set("Offline"),[2]}}))}))},t.prototype.sl=function(){return i.__awaiter(this,void 0,void 0,(function(){return i.__generator(this,(function(t){switch(t.label){case 0:return[4,this.z_.stop()];case 1:return t.sent(),[4,this.W_.stop()];case 2:return t.sent(),this.k_.length>0&&(ge("RemoteStore","Stopping write stream with "+this.k_.length+" pending writes"),this.k_=[]),this.il(),[2]}}))}))},t.prototype.mo=function(){return i.__awaiter(this,void 0,void 0,(function(){return i.__generator(this,(function(t){switch(t.label){case 0:return ge("RemoteStore","RemoteStore shutting down."),this.networkEnabled=!1,[4,this.sl()];case 1:return t.sent(),this.x_.mo(),this.Q_.set("Unknown"),[2]}}))}))},t.prototype.listen=function(t){this.L_.has(t.targetId)||(this.L_.set(t.targetId,t),this.Z_()?this.tl():this.W_.Uc()&&this.nl(t))},t.prototype.rl=function(t){this.L_.delete(t),this.W_.Uc()&&this.hl(t),0===this.L_.size&&(this.W_.Uc()?this.W_.jc():this.q_()&&this.Q_.set("Unknown"))},t.prototype.si=function(t){return this.L_.get(t)||null},t.prototype.ei=function(t){return this.ol.ei(t)},t.prototype.nl=function(t){this.M_.Ns(t.targetId),this.W_.n_(t)},t.prototype.hl=function(t){this.M_.Ns(t),this.W_.r_(t)},t.prototype.tl=function(){this.M_=new se(this),this.W_.start(),this.Q_.v_()},t.prototype.Z_=function(){return this.q_()&&!this.W_.qc()&&this.L_.size>0},t.prototype.q_=function(){return!this.O_&&this.isPrimary&&this.networkEnabled},t.prototype.il=function(){this.M_=null},t.prototype.j_=function(){return i.__awaiter(this,void 0,void 0,(function(){var t=this;return i.__generator(this,(function(e){return this.L_.forEach((function(e,n){t.nl(e)})),[2]}))}))},t.prototype.K_=function(t){return i.__awaiter(this,void 0,void 0,(function(){return i.__generator(this,(function(e){return this.il(),this.Z_()?(this.Q_.C_(t),this.tl()):this.Q_.set("Unknown"),[2]}))}))},t.prototype.G_=function(t,e){return i.__awaiter(this,void 0,void 0,(function(){var n,r,o;return i.__generator(this,(function(i){switch(i.label){case 0:if(this.Q_.set("Online"),!(t instanceof ie&&2===t.state&&t.cause))return[3,6];i.label=1;case 1:return i.trys.push([1,3,,5]),[4,this.al(t)];case 2:return i.sent(),[3,5];case 3:return n=i.sent(),ge("RemoteStore","Failed to remove targets %s: %s ",t.targetIds.join(","),n),[4,this.ul(n)];case 4:return i.sent(),[3,5];case 5:return[3,13];case 6:if(t instanceof ne?this.M_.qs(t):t instanceof re?this.M_.Hs(t):this.M_.Ws(t),e.isEqual(w.min()))return[3,13];i.label=7;case 7:return i.trys.push([7,11,,13]),[4,this.N_._h()];case 8:return r=i.sent(),e.S(r)>=0?[4,this.cl(e)]:[3,10];case 9:i.sent(),i.label=10;case 10:return[3,13];case 11:return ge("RemoteStore","Failed to raise snapshot:",o=i.sent()),[4,this.ul(o)];case 12:return i.sent(),[3,13];case 13:return[2]}}))}))},t.prototype.ul=function(t){return i.__awaiter(this,void 0,void 0,(function(){var e=this;return i.__generator(this,(function(n){switch(n.label){case 0:if(!qn(t))throw t;return this.O_=!0,[4,this.sl()];case 1:return n.sent(),this.Q_.set("Offline"),this.Aa.Ua((function(){return i.__awaiter(e,void 0,void 0,(function(){return i.__generator(this,(function(t){switch(t.label){case 0:return ge("RemoteStore","Retrying IndexedDB access"),[4,this.N_._h()];case 1:return t.sent(),this.O_=!1,[4,this.X_()];case 2:return t.sent(),[2]}}))}))})),[2]}}))}))},t.prototype.cl=function(t){var e=this,n=this.M_.Xs(t);return n.as.forEach((function(n,r){if(n.resumeToken.rt()>0){var i=e.L_.get(r);i&&e.L_.set(r,i.we(n.resumeToken,t))}})),n.us.forEach((function(t){var n=e.L_.get(t);if(n){e.L_.set(t,n.we(O.ht,n.Ee)),e.hl(t);var r=new Pt(n.target,t,1,n.sequenceNumber);e.nl(r)}})),this.ol.Mu(n)},t.prototype.al=function(t){return i.__awaiter(this,void 0,void 0,(function(){var e,n,r,o;return i.__generator(this,(function(i){switch(i.label){case 0:e=t.cause,n=0,r=t.targetIds,i.label=1;case 1:return n<r.length?(o=r[n],this.L_.has(o)?[4,this.ol._l(o,e)]:[3,3]):[3,5];case 2:i.sent(),this.L_.delete(o),this.M_.removeTarget(o),i.label=3;case 3:i.label=4;case 4:return n++,[3,1];case 5:return[2]}}))}))},t.prototype.el=function(){return i.__awaiter(this,void 0,void 0,(function(){var t,e;return i.__generator(this,(function(n){switch(n.label){case 0:return this.ll()?(t=this.k_.length>0?this.k_[this.k_.length-1].batchId:-1,[4,this.N_.qu(t)]):[3,5];case 1:return null!==(e=n.sent())?[3,2]:(0===this.k_.length&&this.z_.jc(),[3,4]);case 2:return this.dl(e),[4,this.el()];case 3:n.sent(),n.label=4;case 4:n.label=5;case 5:return this.fl()&&this.Tl(),[2]}}))}))},t.prototype.ll=function(){return this.q_()&&this.k_.length<10},t.prototype.El=function(){return this.k_.length},t.prototype.dl=function(t){this.k_.push(t),this.z_.Uc()&&this.z_.o_&&this.z_.a_(t.mutations)},t.prototype.fl=function(){return this.q_()&&!this.z_.qc()&&this.k_.length>0},t.prototype.Tl=function(){this.z_.start()},t.prototype.H_=function(){return i.__awaiter(this,void 0,void 0,(function(){return i.__generator(this,(function(t){return this.z_.__(),[2]}))}))},t.prototype.J_=function(){var t=this;return this.N_.Jo(this.z_.lastStreamToken).then((function(){for(var e=0,n=t.k_;e<n.length;e++){var r=n[e];t.z_.a_(r.mutations)}})).catch(ir)},t.prototype.u_=function(t,e){var n=this,r=this.k_.shift(),i=Pe.from(r,t,e,this.z_.lastStreamToken);return this.ol.Il(i).then((function(){return n.el()}))},t.prototype.Y_=function(t){return i.__awaiter(this,void 0,void 0,(function(){return i.__generator(this,(function(e){switch(e.label){case 0:return t&&this.k_.length>0?this.z_.o_?[4,this.wl(t)]:[3,2]:[3,5];case 1:return e.sent(),[3,4];case 2:return[4,this.Rl(t)];case 3:e.sent(),e.label=4;case 4:this.fl()&&this.Tl(),e.label=5;case 5:return[2]}}))}))},t.prototype.Rl=function(t){return i.__awaiter(this,void 0,void 0,(function(){return i.__generator(this,(function(e){return xt(t.code)?[2,(ge("RemoteStore","RemoteStore error before completed handshake; resetting stream token: ",this.z_.lastStreamToken),this.z_.lastStreamToken=O.ht,this.N_.Jo(O.ht).catch(ir))]:[2]}))}))},t.prototype.wl=function(t){return i.__awaiter(this,void 0,void 0,(function(){var e,n,r=this;return i.__generator(this,(function(i){return xt(n=t.code)&&n!==l.ABORTED?(e=this.k_.shift(),[2,(this.z_.Wc(),this.ol.Al(e.batchId,t).then((function(){return r.el()})))]):[2]}))}))},t.prototype.ml=function(){return new ti(this.T_)},t.prototype.U_=function(){return i.__awaiter(this,void 0,void 0,(function(){return i.__generator(this,(function(t){switch(t.label){case 0:return this.networkEnabled=!1,[4,this.sl()];case 1:return t.sent(),this.Q_.set("Unknown"),[4,this.enableNetwork()];case 2:return t.sent(),[2]}}))}))},t.prototype.Pl=function(){return i.__awaiter(this,void 0,void 0,(function(){return i.__generator(this,(function(t){switch(t.label){case 0:return this.q_()?(ge("RemoteStore","RemoteStore restarting streams for new credential"),[4,this.U_()]):[3,2];case 1:t.sent(),t.label=2;case 2:return[2]}}))}))},t.prototype.Vl=function(t){return i.__awaiter(this,void 0,void 0,(function(){return i.__generator(this,(function(e){switch(e.label){case 0:return this.isPrimary=t,t&&this.networkEnabled?[4,this.enableNetwork()]:[3,2];case 1:return e.sent(),[3,5];case 2:return t?[3,4]:[4,this.sl()];case 3:e.sent(),this.Q_.set("Unknown"),e.label=4;case 4:e.label=5;case 5:return[2]}}))}))},t}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function ri(t,e){return"firestore_clients_"+t+"_"+e}function ii(t,e,n){var r="firestore_mutations_"+t+"_"+n;return e.t()&&(r+="_"+e.uid),r}function oi(t,e){return"firestore_targets_"+t+"_"+e}var si=function(){function t(t,e,n,r){this.user=t,this.batchId=e,this.state=n,this.error=r}return t.gl=function(e,n,r){var i=JSON.parse(r),o="object"==typeof i&&-1!==["pending","acknowledged","rejected"].indexOf(i.state)&&(void 0===i.error||"object"==typeof i.error),s=void 0;return o&&i.error&&(o="string"==typeof i.error.message&&"string"==typeof i.error.code)&&(s=new p(i.error.code,i.error.message)),o?new t(e,n,i.state,s):(me("SharedClientState","Failed to parse mutation state for ID '"+n+"': "+r),null)},t.prototype.pl=function(){var t={state:this.state,updateTimeMs:Date.now()};return this.error&&(t.error={code:this.error.code,message:this.error.message}),JSON.stringify(t)},t}(),ai=function(){function t(t,e,n){this.targetId=t,this.state=e,this.error=n}return t.gl=function(e,n){var r=JSON.parse(n),i="object"==typeof r&&-1!==["not-current","current","rejected"].indexOf(r.state)&&(void 0===r.error||"object"==typeof r.error),o=void 0;return i&&r.error&&(i="string"==typeof r.error.message&&"string"==typeof r.error.code)&&(o=new p(r.error.code,r.error.message)),i?new t(e,r.state,o):(me("SharedClientState","Failed to parse target state for ID '"+e+"': "+n),null)},t.prototype.pl=function(){var t={state:this.state,updateTimeMs:Date.now()};return this.error&&(t.error={code:this.error.code,message:this.error.message}),JSON.stringify(t)},t}(),ui=function(){function t(t,e){this.clientId=t,this.activeTargetIds=e}return t.gl=function(e,n){for(var r=JSON.parse(n),i="object"==typeof r&&r.activeTargetIds instanceof Array,o=Jt(),s=0;i&&s<r.activeTargetIds.length;++s)i=C(r.activeTargetIds[s]),o=o.add(r.activeTargetIds[s]);return i?new t(e,o):(me("SharedClientState","Failed to parse client data for instance '"+e+"': "+n),null)},t}(),ci=function(){function t(t,e){this.clientId=t,this.onlineState=e}return t.gl=function(e){var n=JSON.parse(e);return"object"==typeof n&&-1!==["Unknown","Online","Offline"].indexOf(n.onlineState)&&"string"==typeof n.clientId?new t(n.clientId,n.onlineState):(me("SharedClientState","Failed to parse online state: "+e),null)},t}(),hi=function(){function t(){this.activeTargetIds=Jt()}return t.prototype.yl=function(t){this.activeTargetIds=this.activeTargetIds.add(t)},t.prototype.bl=function(t){this.activeTargetIds=this.activeTargetIds.delete(t)},t.prototype.pl=function(){var t={activeTargetIds:this.activeTargetIds.W(),updateTimeMs:Date.now()};return JSON.stringify(t)},t}(),fi=function(){function t(e,n,r,i,o){if(this.Tr=e,this.platform=n,this.persistenceKey=r,this.vl=i,this.ol=null,this.g_=null,this.ur=null,this.Sl=this.Dl.bind(this),this.Cl=new Lt(Te),this.ro=!1,this.Fl=[],!t.Gh(this.platform))throw new p(l.UNIMPLEMENTED,"LocalStorage is not available on this platform.");var s=r.replace(/[.*+?^${}()|[\]\\]/g,"\\$&");this.storage=this.platform.window.localStorage,this.currentUser=o,this.Nl=ri(this.persistenceKey,this.vl),this.$l=function(t){return"firestore_sequence_number_"+t}(this.persistenceKey),this.Cl=this.Cl.Ae(this.vl,new hi),this.kl=new RegExp("^firestore_clients_"+s+"_([^_]*)$"),this.Ll=new RegExp("^firestore_mutations_"+s+"_(\\d+)(?:_(.*))?$"),this.Ml=new RegExp("^firestore_targets_"+s+"_(\\d+)$"),this.Ol=function(t){return"firestore_online_state_"+t}(this.persistenceKey),this.platform.window.addEventListener("storage",this.Sl)}return t.Gh=function(t){return!(!t.window||null==t.window.localStorage)},t.prototype.start=function(){return i.__awaiter(this,void 0,void 0,(function(){var t,e,n,r,o,s,a,u,c,h,f,l=this;return i.__generator(this,(function(i){switch(i.label){case 0:return[4,this.ol.bo()];case 1:for(t=i.sent(),e=0,n=t;e<n.length;e++)(r=n[e])!==this.vl&&(o=this.getItem(ri(this.persistenceKey,r)))&&(s=ui.gl(r,o))&&(this.Cl=this.Cl.Ae(s.clientId,s));for(this.xl(),(a=this.storage.getItem(this.Ol))&&(u=this.Bl(a))&&this.ql(u),c=0,h=this.Fl;c<h.length;c++)f=h[c],this.Dl(f);return this.Fl=[],this.platform.window.addEventListener("unload",(function(){return l.mo()})),this.ro=!0,[2]}}))}))},t.prototype.lr=function(t){this.setItem(this.$l,JSON.stringify(t))},t.prototype.Ul=function(){return this.Ql(this.Cl)},t.prototype.Wl=function(t){var e=!1;return this.Cl.forEach((function(n,r){r.activeTargetIds.has(t)&&(e=!0)})),e},t.prototype.jl=function(t){this.Kl(t,"pending")},t.prototype.Gl=function(t,e,n){this.Kl(t,e,n),this.zl(t)},t.prototype.Hl=function(t){var e="not-current";if(this.Wl(t)){var n=this.storage.getItem(oi(this.persistenceKey,t));if(n){var r=ai.gl(t,n);r&&(e=r.state)}}return this.Yl.yl(t),this.xl(),e},t.prototype.Jl=function(t){this.Yl.bl(t),this.xl()},t.prototype.Xl=function(t){return this.Yl.activeTargetIds.has(t)},t.prototype.Zl=function(t){this.removeItem(oi(this.persistenceKey,t))},t.prototype.td=function(t,e,n){this.ed(t,e,n)},t.prototype.Du=function(t,e,n){var r=this;e.forEach((function(t){r.zl(t)})),this.currentUser=t,n.forEach((function(t){r.jl(t)}))},t.prototype.sd=function(t){this.nd(t)},t.prototype.mo=function(){this.ro&&(this.platform.window.removeEventListener("storage",this.Sl),this.removeItem(this.Nl),this.ro=!1)},t.prototype.getItem=function(t){var e=this.storage.getItem(t);return ge("SharedClientState","READ",t,e),e},t.prototype.setItem=function(t,e){ge("SharedClientState","SET",t,e),this.storage.setItem(t,e)},t.prototype.removeItem=function(t){ge("SharedClientState","REMOVE",t),this.storage.removeItem(t)},t.prototype.Dl=function(t){var e=this;if(t.storageArea===this.storage){if(ge("SharedClientState","EVENT",t.key,t.newValue),t.key===this.Nl)return void me("Received WebStorage notification for local change. Another client might have garbage-collected our state");this.Tr.Ua((function(){return i.__awaiter(e,void 0,void 0,(function(){var e,n,r,o,s,a;return i.__generator(this,(function(i){if(this.ro){if(null!==t.key)if(this.kl.test(t.key)){if(null==t.newValue)return e=this.rd(t.key),[2,this.hd(e,null)];if(n=this.od(t.key,t.newValue))return[2,this.hd(n.clientId,n)]}else if(this.Ll.test(t.key)){if(null!==t.newValue&&(r=this.ad(t.key,t.newValue)))return[2,this.ud(r)]}else if(this.Ml.test(t.key)){if(null!==t.newValue&&(o=this._d(t.key,t.newValue)))return[2,this.ld(o)]}else if(t.key===this.Ol){if(null!==t.newValue&&(s=this.Bl(t.newValue)))return[2,this.ql(s)]}else t.key===this.$l&&(a=function(t){var e=Ve.dr;if(null!=t)try{var n=JSON.parse(t);Ee("number"==typeof n),e=n}catch(t){me("SharedClientState","Failed to read sequence number from WebStorage",t)}return e}(t.newValue))!==Ve.dr&&this.ur(a)}else this.Fl.push(t);return[2]}))}))}))}},Object.defineProperty(t.prototype,"Yl",{get:function(){return this.Cl.get(this.vl)},enumerable:!0,configurable:!0}),t.prototype.xl=function(){this.setItem(this.Nl,this.Yl.pl())},t.prototype.Kl=function(t,e,n){var r=new si(this.currentUser,t,e,n),i=ii(this.persistenceKey,this.currentUser,t);this.setItem(i,r.pl())},t.prototype.zl=function(t){var e=ii(this.persistenceKey,this.currentUser,t);this.removeItem(e)},t.prototype.nd=function(t){var e={clientId:this.vl,onlineState:t};this.storage.setItem(this.Ol,JSON.stringify(e))},t.prototype.ed=function(t,e,n){var r=oi(this.persistenceKey,t),i=new ai(t,e,n);this.setItem(r,i.pl())},t.prototype.rd=function(t){var e=this.kl.exec(t);return e?e[1]:null},t.prototype.od=function(t,e){var n=this.rd(t);return ui.gl(n,e)},t.prototype.ad=function(t,e){var n=this.Ll.exec(t),r=Number(n[1]),i=void 0!==n[2]?n[2]:null;return si.gl(new f(i),r,e)},t.prototype._d=function(t,e){var n=this.Ml.exec(t),r=Number(n[1]);return ai.gl(r,e)},t.prototype.Bl=function(t){return ci.gl(t)},t.prototype.ud=function(t){return i.__awaiter(this,void 0,void 0,(function(){return i.__generator(this,(function(e){return t.user.uid===this.currentUser.uid?[2,this.ol.dd(t.batchId,t.state,t.error)]:(ge("SharedClientState","Ignoring mutation for non-active user "+t.user.uid),[2])}))}))},t.prototype.ld=function(t){return this.ol.fd(t.targetId,t.state,t.error)},t.prototype.hd=function(t,e){var n=this,r=e?this.Cl.Ae(t,e):this.Cl.remove(t),i=this.Ql(this.Cl),o=this.Ql(r),s=[],a=[];return o.forEach((function(t){i.has(t)||s.push(t)})),i.forEach((function(t){o.has(t)||a.push(t)})),this.ol.Td(s,a).then((function(){n.Cl=r}))},t.prototype.ql=function(t){this.Cl.get(t.clientId)&&this.g_(t.onlineState)},t.prototype.Ql=function(t){var e=Jt();return t.forEach((function(t,n){e=e.He(n.activeTargetIds)})),e},t}(),li=function(){function t(){this.Ed=new hi,this.Id={},this.ol=null,this.g_=null,this.ur=null}return t.prototype.jl=function(t){},t.prototype.Gl=function(t,e,n){},t.prototype.Hl=function(t){return this.Ed.yl(t),this.Id[t]||"not-current"},t.prototype.td=function(t,e,n){this.Id[t]=e},t.prototype.Jl=function(t){this.Ed.bl(t)},t.prototype.Xl=function(t){return this.Ed.activeTargetIds.has(t)},t.prototype.Zl=function(t){delete this.Id[t]},t.prototype.Ul=function(){return this.Ed.activeTargetIds},t.prototype.Wl=function(t){return this.Ed.activeTargetIds.has(t)},t.prototype.start=function(){return this.Ed=new hi,Promise.resolve()},t.prototype.Du=function(t,e,n){},t.prototype.sd=function(t){},t.prototype.mo=function(){},t.prototype.lr=function(t){},t}(),pi=function(t){this.key=t},di=function(t){this.key=t},vi=function(){function t(t,e){this.query=t,this.wd=e,this.Rd=null,this.fs=!1,this.Ad=Yt(),this.ns=Yt(),this.md=new $t(t.se.bind(t))}return Object.defineProperty(t.prototype,"Pd",{get:function(){return this.wd},enumerable:!0,configurable:!0}),t.prototype.Vd=function(t,e){var n=this,r=e?e.gd:new Qt,i=e?e.md:this.md,o=e?e.ns:this.ns,s=i,a=!1,u=this.query.oe()&&i.size===this.query.limit?i.last():null,c=this.query.ae()&&i.size===this.query.limit?i.first():null;if(t.pe((function(t,e){var h=i.get(t),f=e instanceof mt?e:null;f&&(f=n.query.matches(f)?f:null);var l=!!h&&n.ns.has(h.key),p=!!f&&(f.At||n.ns.has(f.key)&&f.hasCommittedMutations),d=!1;h&&f?h.data().isEqual(f.data())?l!==p&&(r.track({type:3,doc:f}),d=!0):n.pd(h,f)||(r.track({type:2,doc:f}),d=!0,(u&&n.query.se(f,u)>0||c&&n.query.se(f,c)<0)&&(a=!0)):!h&&f?(r.track({type:0,doc:f}),d=!0):h&&!f&&(r.track({type:1,doc:h}),d=!0,(u||c)&&(a=!0)),d&&(f?(s=s.add(f),o=p?o.add(t):o.delete(t)):(s=s.delete(t),o=o.delete(t)))})),this.query.oe()||this.query.ae())for(;s.size>this.query.limit;){var h=this.query.oe()?s.last():s.first();s=s.delete(h.key),o=o.delete(h.key),r.track({type:1,doc:h})}return{md:s,gd:r,yd:a,ns:o}},t.prototype.pd=function(t,e){return t.At&&e.hasCommittedMutations&&!e.At},t.prototype.xn=function(t,e,n){var r=this,i=this.md;this.md=t.md,this.ns=t.ns;var o=t.gd.es();o.sort((function(t,e){return function(t,e){var n=function(t){switch(t){case 0:return 1;case 2:case 3:return 2;case 1:return 0;default:return we()}};return n(t)-n(e)}(t.type,e.type)||r.query.se(t.doc,e.doc)})),this.bd(n);var s=e?this.vd():[],a=0===this.Ad.size&&this.fs?1:0,u=a!==this.Rd;return this.Rd=a,0!==o.length||u?{snapshot:new Zt(this.query,t.md,i,o,t.ns,0===a,u,!1),Sd:s}:{Sd:s}},t.prototype.Dd=function(t){return this.fs&&"Offline"===t?(this.fs=!1,this.xn({md:this.md,gd:new Qt,ns:this.ns,yd:!1},!1)):{Sd:[]}},t.prototype.Cd=function(t){return!this.wd.has(t)&&!!this.md.has(t)&&!this.md.get(t).At},t.prototype.bd=function(t){var e=this;t&&(t.Ts.forEach((function(t){return e.wd=e.wd.add(t)})),t.Es.forEach((function(t){})),t.Is.forEach((function(t){return e.wd=e.wd.delete(t)})),this.fs=t.fs)},t.prototype.vd=function(){var t=this;if(!this.fs)return[];var e=this.Ad;this.Ad=Yt(),this.md.forEach((function(e){t.Cd(e.key)&&(t.Ad=t.Ad.add(e.key))}));var n=[];return e.forEach((function(e){t.Ad.has(e)||n.push(new di(e))})),this.Ad.forEach((function(t){e.has(t)||n.push(new pi(t))})),n},t.prototype.Fd=function(t){this.wd=t.Ku,this.Ad=Yt();var e=this.Vd(t.documents);return this.xn(e,!0)},t.prototype.Nd=function(){return Zt.os(this.query,this.md,this.ns,0===this.Rd)},t}(),yi=function(){function t(t,e,n,r){this.Aa=t,this.$d=e,this.updateFunction=n,this.Va=r,this.kd=5,this.$a=new Fe(this.Aa,"transaction_retry")}return t.prototype.Ld=function(){this.Md()},t.prototype.Md=function(){var t=this;this.$a.gr((function(){return i.__awaiter(t,void 0,void 0,(function(){var t,e,n=this;return i.__generator(this,(function(r){return t=this.$d.ml(),(e=this.Od(t))&&e.then((function(e){n.Aa.uo((function(){return t.commit().then((function(){n.Va.resolve(e)})).catch((function(t){n.xd(t)}))}))})).catch((function(t){n.xd(t)})),[2]}))}))}))},t.prototype.Od=function(t){try{var e=this.updateFunction(t);return!D(e)&&e.catch&&e.then?e:(this.Va.reject(Error("Transaction callback must return a Promise")),null)}catch(t){return this.Va.reject(t),null}},t.prototype.xd=function(t){var e=this;this.kd>0&&this.Bd(t)?(this.kd-=1,this.Aa.uo((function(){return e.Md(),Promise.resolve()}))):this.Va.reject(t)},t.prototype.Bd=function(t){if("FirebaseError"===t.name){var e=t.code;return"aborted"===e||"failed-precondition"===e||!xt(e)}return!1},t}(),gi=function(t,e,n){this.query=t,this.targetId=e,this.view=n},mi=function(t){this.key=t,this.qd=!1},bi=function(){function t(t,e,n,r,i){this.N_=t,this.$d=e,this.Ud=n,this.currentUser=r,this.Qd=i,this.Wd=null,this.jd=new Oe((function(t){return t.canonicalId()})),this.Kd=new Map,this.Gd=[],this.zd=new Lt(A.N),this.Hd=new Map,this.Yd=new or,this.Jd={},this.Xd=new Map,this.Zd=tn.rh(),this.onlineState="Unknown"}return Object.defineProperty(t.prototype,"tf",{get:function(){return!0},enumerable:!0,configurable:!0}),t.prototype.subscribe=function(t){this.Wd=t},t.prototype.listen=function(t){return i.__awaiter(this,void 0,void 0,(function(){var e,n,r,o,s;return i.__generator(this,(function(i){switch(i.label){case 0:return this.ef("listen()"),(r=this.jd.get(t))?(e=r.targetId,this.Ud.Hl(e),n=r.view.Nd(),[3,4]):[3,1];case 1:return[4,this.N_.Qu(t.ee())];case 2:return o=i.sent(),s=this.Ud.Hl(o.targetId),e=o.targetId,[4,this.sf(t,e,"current"===s)];case 3:n=i.sent(),this.tf&&this.$d.listen(o),i.label=4;case 4:return[2,n]}}))}))},t.prototype.sf=function(t,e,n){return i.__awaiter(this,void 0,void 0,(function(){var r,o,s,a,u,c;return i.__generator(this,(function(i){switch(i.label){case 0:return[4,this.N_.ju(t,!0)];case 1:return r=i.sent(),o=new vi(t,r.Ku),s=o.Vd(r.documents),a=ee.ds(e,n&&"Offline"!==this.onlineState),u=o.xn(s,this.tf,a),this.if(e,u.Sd),c=new gi(t,e,o),[2,(this.jd.set(t,c),this.Kd.has(e)?this.Kd.get(e).push(t):this.Kd.set(e,[t]),u.snapshot)]}}))}))},t.prototype.rl=function(t){return i.__awaiter(this,void 0,void 0,(function(){var e,n,r=this;return i.__generator(this,(function(i){switch(i.label){case 0:return this.ef("unlisten()"),e=this.jd.get(t),(n=this.Kd.get(e.targetId)).length>1?[2,(this.Kd.set(e.targetId,n.filter((function(e){return!e.isEqual(t)}))),void this.jd.delete(t))]:this.tf?(this.Ud.Jl(e.targetId),this.Ud.Wl(e.targetId)?[3,2]:[4,this.N_.Wu(e.targetId,!1).then((function(){r.Ud.Zl(e.targetId),r.$d.rl(e.targetId),r.nf(e.targetId)})).catch(ir)]):[3,3];case 1:i.sent(),i.label=2;case 2:return[3,5];case 3:return this.nf(e.targetId),[4,this.N_.Wu(e.targetId,!0)];case 4:i.sent(),i.label=5;case 5:return[2]}}))}))},t.prototype.write=function(t,e){return i.__awaiter(this,void 0,void 0,(function(){var n,r,o;return i.__generator(this,(function(i){switch(i.label){case 0:this.ef("write()"),i.label=1;case 1:return i.trys.push([1,5,,6]),[4,this.N_.$u(t)];case 2:return n=i.sent(),this.Ud.jl(n.batchId),this.rf(n.batchId,e),[4,this.hf(n.Dn)];case 3:return i.sent(),[4,this.$d.el()];case 4:return i.sent(),[3,6];case 5:return r=i.sent(),o=Xn(r,"Failed to persist write"),e.reject(o),[3,6];case 6:return[2]}}))}))},t.prototype.runTransaction=function(t,e,n){new yi(t,this.$d,e,n).Ld()},t.prototype.Mu=function(t){return i.__awaiter(this,void 0,void 0,(function(){var e,n=this;return i.__generator(this,(function(r){switch(r.label){case 0:this.ef("applyRemoteEvent()"),r.label=1;case 1:return r.trys.push([1,4,,6]),[4,this.N_.Mu(t)];case 2:return e=r.sent(),t.as.forEach((function(t,e){var r=n.Hd.get(e);r&&(Ee(t.Ts.size+t.Es.size+t.Is.size<=1),t.Ts.size>0?r.qd=!0:t.Es.size>0?Ee(r.qd):t.Is.size>0&&(Ee(r.qd),r.qd=!1))})),[4,this.hf(e,t)];case 3:return r.sent(),[3,6];case 4:return[4,ir(r.sent())];case 5:return r.sent(),[3,6];case 6:return[2]}}))}))},t.prototype.Dd=function(t,e){this.ef("applyOnlineStateChange()");var n=[];this.jd.forEach((function(e,r){var i=r.view.Dd(t);i.snapshot&&n.push(i.snapshot)})),this.Wd.af(t),this.Wd.i_(n),this.onlineState=t},t.prototype._l=function(t,e){return i.__awaiter(this,void 0,void 0,(function(){var n,r,o,s,a,u=this;return i.__generator(this,(function(i){switch(i.label){case 0:return this.ef("rejectListens()"),this.Ud.td(t,"rejected",e),n=this.Hd.get(t),(r=n&&n.key)?(o=(o=new Lt(A.N)).Ae(r,new bt(r,w.min())),s=Yt().add(r),a=new te(w.min(),new Map,new Vt(Te),o,s),[4,this.Mu(a)]):[3,2];case 1:return i.sent(),this.zd=this.zd.remove(r),this.Hd.delete(t),this.uf(),[3,4];case 2:return[4,this.N_.Wu(t,!1).then((function(){return u.nf(t,e)})).catch(ir)];case 3:i.sent(),i.label=4;case 4:return[2]}}))}))},t.prototype.Il=function(t){return i.__awaiter(this,void 0,void 0,(function(){var e,n;return i.__generator(this,(function(r){switch(r.label){case 0:this.ef("applySuccessfulWrite()"),e=t.batch.batchId,this.cf(e,null),this._f(e),r.label=1;case 1:return r.trys.push([1,4,,6]),[4,this.N_.zo(t)];case 2:return n=r.sent(),this.Ud.Gl(e,"acknowledged"),[4,this.hf(n)];case 3:return r.sent(),[3,6];case 4:return[4,ir(r.sent())];case 5:return r.sent(),[3,6];case 6:return[2]}}))}))},t.prototype.Al=function(t,e){return i.__awaiter(this,void 0,void 0,(function(){var n;return i.__generator(this,(function(r){switch(r.label){case 0:this.ef("rejectFailedWrite()"),this.cf(t,e),this._f(t),r.label=1;case 1:return r.trys.push([1,4,,6]),[4,this.N_.Lu(t)];case 2:return n=r.sent(),this.Ud.Gl(t,"rejected",e),[4,this.hf(n)];case 3:return r.sent(),[3,6];case 4:return[4,ir(r.sent())];case 5:return r.sent(),[3,6];case 6:return[2]}}))}))},t.prototype.lf=function(t){return i.__awaiter(this,void 0,void 0,(function(){var e,n,r,o;return i.__generator(this,(function(i){switch(i.label){case 0:this.$d.q_()||ge("SyncEngine","The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled."),i.label=1;case 1:return i.trys.push([1,3,,4]),[4,this.N_.sa()];case 2:return-1===(e=i.sent())?[2,void t.resolve()]:((n=this.Xd.get(e)||[]).push(t),this.Xd.set(e,n),[3,4]);case 3:return r=i.sent(),o=Xn(r,"Initialization of waitForPendingWrites() operation failed"),t.reject(o),[3,4];case 4:return[2]}}))}))},t.prototype._f=function(t){(this.Xd.get(t)||[]).forEach((function(t){t.resolve()})),this.Xd.delete(t)},t.prototype.df=function(t){this.Xd.forEach((function(e){e.forEach((function(e){e.reject(new p(l.CANCELLED,t))}))})),this.Xd.clear()},t.prototype.rf=function(t,e){var n=this.Jd[this.currentUser.s()];n||(n=new Lt(Te)),n=n.Ae(t,e),this.Jd[this.currentUser.s()]=n},t.prototype.cf=function(t,e){var n=this.Jd[this.currentUser.s()];if(n){var r=n.get(t);r&&(e?r.reject(e):r.resolve(),n=n.remove(t)),this.Jd[this.currentUser.s()]=n}},t.prototype.nf=function(t,e){var n=this;void 0===e&&(e=null),this.Ud.Jl(t);for(var r=0,i=this.Kd.get(t);r<i.length;r++){var o=i[r];this.jd.delete(o),e&&this.Wd.ff(o,e)}this.Kd.delete(t),this.tf&&this.Yd.nc(t).forEach((function(t){n.Yd.Ch(t)||n.Tf(t)}))},t.prototype.Tf=function(t){var e=this.zd.get(t);null!==e&&(this.$d.rl(e),this.zd=this.zd.remove(t),this.Hd.delete(e),this.uf())},t.prototype.if=function(t,e){for(var n=0,r=e;n<r.length;n++){var i=r[n];i instanceof pi?(this.Yd.yh(i.key,t),this.Ef(i)):i instanceof di?(ge("SyncEngine","Document no longer in limbo: "+i.key),this.Yd.vh(i.key,t),this.Yd.Ch(i.key)||this.Tf(i.key)):we()}},t.prototype.Ef=function(t){var e=t.key;this.zd.get(e)||(ge("SyncEngine","New document in limbo: "+e),this.Gd.push(e),this.uf())},t.prototype.uf=function(){for(;this.Gd.length>0&&this.zd.size<this.Qd;){var t=this.Gd.shift(),e=this.Zd.next();this.Hd.set(e,new mi(t)),this.zd=this.zd.Ae(t,e),this.$d.listen(new Pt(_t.Wt(t.path).ee(),e,2,Ve.dr))}},t.prototype.If=function(){return this.zd},t.prototype.wf=function(){return this.Gd},t.prototype.hf=function(t,e){return i.__awaiter(this,void 0,void 0,(function(){var n,r,o,s=this;return i.__generator(this,(function(i){switch(i.label){case 0:return n=[],r=[],o=[],this.jd.forEach((function(i,a){o.push(Promise.resolve().then((function(){var e=a.view.Vd(t);return e.yd?s.N_.ju(a.query,!1).then((function(t){var n=t.documents;return a.view.Vd(n,e)})):e})).then((function(t){var i=e&&e.as.get(a.targetId),o=a.view.xn(t,s.tf,i);if(s.if(a.targetId,o.Sd),o.snapshot){s.tf&&s.Ud.td(a.targetId,o.snapshot.fromCache?"not-current":"current"),n.push(o.snapshot);var u=Me.ar(a.targetId,o.snapshot);r.push(u)}})))})),[4,Promise.all(o)];case 1:return i.sent(),this.Wd.i_(n),[4,this.N_.Bu(r)];case 2:return i.sent(),[2]}}))}))},t.prototype.ef=function(t){},t.prototype.Pl=function(t){return i.__awaiter(this,void 0,void 0,(function(){var e;return i.__generator(this,(function(n){switch(n.label){case 0:return this.currentUser.isEqual(t)?[3,3]:[4,this.N_.Du(t)];case 1:return e=n.sent(),this.currentUser=t,this.df("'waitForPendingWrites' promise is rejected due to a user change."),this.Ud.Du(t,e.Fu,e.Nu),[4,this.hf(e.Cu)];case 2:n.sent(),n.label=3;case 3:return[4,this.$d.Pl()];case 4:return n.sent(),[2]}}))}))},t.prototype.enableNetwork=function(){return this.$d.enableNetwork()},t.prototype.disableNetwork=function(){return this.$d.disableNetwork()},t.prototype.ei=function(t){var e=this.Hd.get(t);if(e&&e.qd)return Yt().add(e.key);var n=Yt(),r=this.Kd.get(t);if(!r)return n;for(var i=0,o=r;i<o.length;i++){var s=o[i],a=this.jd.get(s);n=n.He(a.view.Pd)}return n},t}(),wi=function(t){function e(e,n,r,i,o){var s=this;return(s=t.call(this,e,n,r,i,o)||this).N_=e,s.Rf=void 0,s}return i.__extends(e,t),Object.defineProperty(e.prototype,"tf",{get:function(){return!0===this.Rf},enumerable:!0,configurable:!0}),e.prototype.enableNetwork=function(){return this.N_.ao(!0),t.prototype.enableNetwork.call(this)},e.prototype.disableNetwork=function(){return this.N_.ao(!1),t.prototype.disableNetwork.call(this)},e.prototype.Af=function(t){return i.__awaiter(this,void 0,void 0,(function(){var e,n;return i.__generator(this,(function(r){switch(r.label){case 0:return[4,this.N_.ju(t.query,!0)];case 1:return e=r.sent(),n=t.view.Fd(e),[2,(this.Rf&&this.if(t.targetId,n.Sd),n)]}}))}))},e.prototype.Dd=function(e,n){this.tf&&0===n&&(t.prototype.Dd.call(this,e,n),this.Ud.sd(e)),this.tf||1!==n||t.prototype.Dd.call(this,e,n)},e.prototype.dd=function(t,e,n){return i.__awaiter(this,void 0,void 0,(function(){var r;return i.__generator(this,(function(i){switch(i.label){case 0:return this.ef("applyBatchState()"),[4,this.N_.zu(t)];case 1:return null===(r=i.sent())?[3,6]:"pending"!==e?[3,3]:[4,this.$d.el()];case 2:return i.sent(),[3,4];case 3:"acknowledged"===e||"rejected"===e?(this.cf(t,n||null),this.N_.Hu(t)):we(),i.label=4;case 4:return[4,this.hf(r)];case 5:return i.sent(),[3,7];case 6:ge("SyncEngine","Cannot apply mutation batch with id: "+t),i.label=7;case 7:return[2]}}))}))},e.prototype.Vl=function(t){return i.__awaiter(this,void 0,void 0,(function(){var e,n,r,o,s,a,u,c=this;return i.__generator(this,(function(i){switch(i.label){case 0:return!0!==t||!0===this.Rf?[3,3]:(e=this.Ud.Ul(),[4,this.mf(e.W(),!0)]);case 1:return n=i.sent(),this.Rf=!0,[4,this.$d.Vl(!0)];case 2:for(i.sent(),r=0,o=n;r<o.length;r++)s=o[r],this.$d.listen(s);return[3,7];case 3:return!1!==t||!1===this.Rf?[3,7]:(a=[],u=Promise.resolve(),this.Kd.forEach((function(t,e){c.Ud.Xl(e)?a.push(e):u=u.then((function(){return c.nf(e),c.N_.Wu(e,!0)})),c.$d.rl(e)})),[4,u]);case 4:return i.sent(),[4,this.mf(a,!1)];case 5:return i.sent(),this.Pf(),this.Rf=!1,[4,this.$d.Vl(!1)];case 6:i.sent(),i.label=7;case 7:return[2]}}))}))},e.prototype.Pf=function(){var t=this;this.Hd.forEach((function(e,n){t.$d.rl(n)})),this.Yd.rc(),this.Hd=new Map,this.zd=new Lt(A.N)},e.prototype.mf=function(t,e){return i.__awaiter(this,void 0,void 0,(function(){var e,n,r,o,s,a,u,c,h,f,l,p,d;return i.__generator(this,(function(i){switch(i.label){case 0:e=[],n=[],r=0,o=t,i.label=1;case 1:return r<o.length?(s=o[r],a=void 0,(u=this.Kd.get(s))&&0!==u.length?[4,this.N_.Wu(s,!0)]:[3,8]):[3,14];case 2:return i.sent(),[4,this.N_.Qu(u[0].ee())];case 3:a=i.sent(),c=0,h=u,i.label=4;case 4:return c<h.length?(f=h[c],l=this.jd.get(f),[4,this.Af(l)]):[3,7];case 5:(p=i.sent()).snapshot&&n.push(p.snapshot),i.label=6;case 6:return c++,[3,4];case 7:return[3,12];case 8:return[4,this.N_.Yu(s)];case 9:return d=i.sent(),[4,this.N_.Qu(d)];case 10:return a=i.sent(),[4,this.sf(this.Vf(d),s,!1)];case 11:i.sent(),i.label=12;case 12:e.push(a),i.label=13;case 13:return r++,[3,1];case 14:return[2,(this.Wd.i_(n),e)]}}))}))},e.prototype.Vf=function(t){return new _t(t.path,t.collectionGroup,t.orderBy,t.filters,t.limit,"F",t.startAt,t.endAt)},e.prototype.bo=function(){return this.N_.bo()},e.prototype.fd=function(t,e,n){return i.__awaiter(this,void 0,void 0,(function(){var r,o;return i.__generator(this,(function(i){switch(i.label){case 0:return this.Rf?(ge("SyncEngine","Ignoring unexpected query state notification."),[3,8]):[3,1];case 1:if(!this.Kd.has(t))return[3,8];switch(e){case"current":case"not-current":return[3,2];case"rejected":return[3,5]}return[3,7];case 2:return[4,this.N_.Kr()];case 3:return r=i.sent(),o=te.ls(t,"current"===e),[4,this.hf(r,o)];case 4:return i.sent(),[3,8];case 5:return[4,this.N_.Wu(t,!0)];case 6:return i.sent(),this.nf(t,n),[3,8];case 7:we(),i.label=8;case 8:return[2]}}))}))},e.prototype.Td=function(t,e){return i.__awaiter(this,void 0,void 0,(function(){var n,r,o,s,a,u,c,h,f,l,p=this;return i.__generator(this,(function(d){switch(d.label){case 0:if(!this.Rf)return[3,10];n=0,r=t,d.label=1;case 1:return n<r.length?(o=r[n],this.Kd.has(o)?(ge("SyncEngine","Adding an already active target "+o),[3,5]):[4,this.N_.Yu(o)]):[3,6];case 2:return s=d.sent(),[4,this.N_.Qu(s)];case 3:return a=d.sent(),[4,this.sf(this.Vf(s),a.targetId,!1)];case 4:d.sent(),this.$d.listen(a),d.label=5;case 5:return n++,[3,1];case 6:u=function(t){return i.__generator(this,(function(e){switch(e.label){case 0:return c.Kd.has(t)?[4,c.N_.Wu(t,!1).then((function(){p.$d.rl(t),p.nf(t)})).catch(ir)]:[3,2];case 1:e.sent(),e.label=2;case 2:return[2]}}))},c=this,h=0,f=e,d.label=7;case 7:return h<f.length?(l=f[h],[5,u(l)]):[3,10];case 8:d.sent(),d.label=9;case 9:return h++,[3,7];case 10:return[2]}}))}))},e}(bi),Ei=function(){this.gf=void 0,this.pf=[]},_i=function(){function t(t){this.ol=t,this.yf=new Oe((function(t){return t.canonicalId()})),this.onlineState="Unknown",this.bf=new Set,this.ol.subscribe(this)}return t.prototype.listen=function(t){return i.__awaiter(this,void 0,void 0,(function(){var e,n,r,o,s,a;return i.__generator(this,(function(i){switch(i.label){case 0:if(e=t.query,n=!1,(r=this.yf.get(e))||(n=!0,r=new Ei),!n)return[3,4];i.label=1;case 1:return i.trys.push([1,3,,4]),o=r,[4,this.ol.listen(e)];case 2:return o.gf=i.sent(),[3,4];case 3:return s=i.sent(),a=Xn(s,"Initialization of query '"+t.query+"' failed"),[2,void t.onError(a)];case 4:return this.yf.set(e,r),r.pf.push(t),t.Dd(this.onlineState),r.gf&&t.vf(r.gf)&&this.Sf(),[2]}}))}))},t.prototype.rl=function(t){return i.__awaiter(this,void 0,void 0,(function(){var e,n,r,o;return i.__generator(this,(function(i){return e=t.query,n=!1,(r=this.yf.get(e))&&(o=r.pf.indexOf(t))>=0&&(r.pf.splice(o,1),n=0===r.pf.length),n?[2,(this.yf.delete(e),this.ol.rl(e))]:[2]}))}))},t.prototype.i_=function(t){for(var e=!1,n=0,r=t;n<r.length;n++){var i=r[n],o=i.query,s=this.yf.get(o);if(s){for(var a=0,u=s.pf;a<u.length;a++)u[a].vf(i)&&(e=!0);s.gf=i}}e&&this.Sf()},t.prototype.ff=function(t,e){var n=this.yf.get(t);if(n)for(var r=0,i=n.pf;r<i.length;r++)i[r].onError(e);this.yf.delete(t)},t.prototype.af=function(t){this.onlineState=t;var e=!1;this.yf.forEach((function(n,r){for(var i=0,o=r.pf;i<o.length;i++)o[i].Dd(t)&&(e=!0)})),e&&this.Sf()},t.prototype.Df=function(t){this.bf.add(t),t.next()},t.prototype.Cf=function(t){this.bf.delete(t)},t.prototype.Sf=function(){this.bf.forEach((function(t){t.next()}))},t}(),Ii=function(){function t(t,e,n){this.query=t,this.Ff=e,this.Nf=!1,this.$f=null,this.onlineState="Unknown",this.options=n||{}}return t.prototype.vf=function(t){if(!this.options.includeMetadataChanges){for(var e=[],n=0,r=t.docChanges;n<r.length;n++){var i=r[n];3!==i.type&&e.push(i)}t=new Zt(t.query,t.docs,t.ss,e,t.ns,t.fromCache,t.rs,!0)}var o=!1;return this.Nf?this.kf(t)&&(this.Ff.next(t),o=!0):this.Lf(t,this.onlineState)&&(this.Mf(t),o=!0),this.$f=t,o},t.prototype.onError=function(t){this.Ff.error(t)},t.prototype.Dd=function(t){this.onlineState=t;var e=!1;return this.$f&&!this.Nf&&this.Lf(this.$f,t)&&(this.Mf(this.$f),e=!0),e},t.prototype.Lf=function(t,e){if(!t.fromCache)return!0;var n="Offline"!==e;return!(this.options.Of&&n||t.docs.B()&&"Offline"!==e)},t.prototype.kf=function(t){if(t.docChanges.length>0)return!0;var e=this.$f&&this.$f.hasPendingWrites!==t.hasPendingWrites;return!(!t.rs&&!e)&&!0===this.options.includeMetadataChanges},t.prototype.Mf=function(t){t=Zt.os(t.query,t.docs,t.ns,t.fromCache),this.Nf=!0,this.Ff.next(t)},t}(),Ti=function(){function t(){}return t.prototype.Su=function(t){this.xf=t},t.prototype.Zn=function(t,e,n,r){var i=this;return e.te()||n.isEqual(w.min())?this.Bf(t,e):this.xf.Yn(t,r).next((function(o){var a=i.qf(e,o);return(e.oe()||e.ae())&&i.yd(e.Bt,a,r,n)?i.Bf(t,e):(ve()<=s.LogLevel.DEBUG&&ge("IndexFreeQueryEngine","Re-using previous result from %s to execute query: %s",n.toString(),e.toString()),i.xf.Zn(t,e,n).next((function(t){return a.forEach((function(e){t=t.Ae(e.key,e)})),t})))}))},t.prototype.qf=function(t,e){var n=new Vt((function(e,n){return t.se(e,n)}));return e.forEach((function(e,r){r instanceof mt&&t.matches(r)&&(n=n.add(r))})),n},t.prototype.yd=function(t,e,n,r){if(n.size!==e.size)return!0;var i="F"===t?e.last():e.first();return!!i&&(i.hasPendingWrites||i.version.S(r)>0)},t.prototype.Bf=function(t,e){return ve()<=s.LogLevel.DEBUG&&ge("IndexFreeQueryEngine","Using full collection scan to execute query:",e.toString()),this.xf.Zn(t,e,w.min())},t}(),Ai=function(){function t(t,e){this.jn=t,this.hh=e,this.Wn=[],this.Uf=1,this.lastStreamToken=O.ht,this.Qf=new Vt(sr.Xu)}return t.prototype.Go=function(t){return Ce.resolve(0===this.Wn.length)},t.prototype.zo=function(t,e,n){var r=e.batchId,i=this.Wf(r,"acknowledged");return Ee(0===i),this.Wn[i],this.lastStreamToken=n,Ce.resolve()},t.prototype.Yo=function(t){return Ce.resolve(this.lastStreamToken)},t.prototype.Jo=function(t,e){return this.lastStreamToken=e,Ce.resolve()},t.prototype.Xo=function(t,e,n,r){var i=this.Uf;this.Uf++,this.Wn.length>0&&this.Wn[this.Wn.length-1];var o=new De(i,e,n,r);this.Wn.push(o);for(var s=0,a=r;s<a.length;s++){var u=a[s];this.Qf=this.Qf.add(new sr(u.key,i)),this.jn.Dr(t,u.key.path.L())}return Ce.resolve(o)},t.prototype.Zo=function(t,e){return Ce.resolve(this.jf(e))},t.prototype.ea=function(t,e){var n=e+1,r=this.Kf(n),i=r<0?0:r;return Ce.resolve(this.Wn.length>i?this.Wn[i]:null)},t.prototype.sa=function(){return Ce.resolve(0===this.Wn.length?-1:this.Uf-1)},t.prototype.ia=function(t){return Ce.resolve(this.Wn.slice())},t.prototype.Gn=function(t,e){var n=this,r=new sr(e,0),i=new sr(e,Number.POSITIVE_INFINITY),o=[];return this.Qf.Ke([r,i],(function(t){var e=n.jf(t.oc);o.push(e)})),Ce.resolve(o)},t.prototype.Xn=function(t,e){var n=this,r=new Vt(Te);return e.forEach((function(t){var e=new sr(t,0),i=new sr(t,Number.POSITIVE_INFINITY);n.Qf.Ke([e,i],(function(t){r=r.add(t.oc)}))})),Ce.resolve(this.Gf(r))},t.prototype.nr=function(t,e){var n=e.path,r=n.length+1,i=n;A.et(i)||(i=i.child(""));var o=new sr(new A(i),0),s=new Vt(Te);return this.Qf.Ge((function(t){var e=t.key.path;return!!n.q(e)&&(e.length===r&&(s=s.add(t.oc)),!0)}),o),Ce.resolve(this.Gf(s))},t.prototype.Gf=function(t){var e=this,n=[];return t.forEach((function(t){var r=e.jf(t);null!==r&&n.push(r)})),n},t.prototype.ra=function(t,e){var n=this;Ee(0===this.Wf(e.batchId,"removed")),this.Wn.shift();var r=this.Qf;return Ce.forEach(e.mutations,(function(i){var o=new sr(i.key,e.batchId);return r=r.delete(o),n.hh.Bo(t,i.key)})).next((function(){n.Qf=r}))},t.prototype.ha=function(t){},t.prototype.Ch=function(t,e){var n=new sr(e,0),r=this.Qf.ze(n);return Ce.resolve(e.isEqual(r&&r.key))},t.prototype.oa=function(t){return this.Wn.length,Ce.resolve()},t.prototype.Wf=function(t,e){return this.Kf(t)},t.prototype.Kf=function(t){return 0===this.Wn.length?0:t-this.Wn[0].batchId},t.prototype.jf=function(t){var e=this.Kf(t);return e<0||e>=this.Wn.length?null:this.Wn[e]},t}(),Ni=function(){function t(t,e){this.jn=t,this.zf=e,this.docs=new Lt(A.N),this.size=0}return t.prototype.Nn=function(t,e,n){var r=e.key,i=this.docs.get(r),o=i?i.size:0,s=this.zf(e);return this.docs=this.docs.Ae(r,{Mr:e,size:s,readTime:n}),this.size+=s-o,this.jn.Dr(t,r.path.L())},t.prototype.kn=function(t){var e=this.docs.get(t);e&&(this.docs=this.docs.remove(t),this.size-=e.size)},t.prototype.Ln=function(t,e){var n=this.docs.get(e);return Ce.resolve(n?n.Mr:null)},t.prototype.getEntries=function(t,e){var n=this,r=Bt();return e.forEach((function(t){var e=n.docs.get(t);r=r.Ae(t,e?e.Mr:null)})),Ce.resolve(r)},t.prototype.Zn=function(t,e,n){for(var r=Wt(),i=new A(e.path.child("")),o=this.docs.ve(i);o.$e();){var s=o.Ne(),a=s.key,u=s.value,c=u.Mr,h=u.readTime;if(!e.path.q(a.path))break;h.S(n)<=0||c instanceof mt&&e.matches(c)&&(r=r.Ae(c.key,c))}return Ce.resolve(r)},t.prototype.Hf=function(t,e){return Ce.forEach(this.docs,(function(t){return e(t)}))},t.prototype.Yr=function(e){return new t.Jr(this)},t.prototype.Zr=function(t){return Ce.resolve(this.size)},t}();Ni.Jr=function(t){function e(e){var n=this;return(n=t.call(this)||this).th=e,n}return i.__extends(e,t),e.prototype.xn=function(t){var e=this,n=[];return this.Dn.forEach((function(r,i){i?n.push(e.th.Nn(t,i,e.readTime)):e.th.kn(r)})),Ce.vn(n)},e.prototype.Mn=function(t,e){return this.th.Ln(t,e)},e.prototype.On=function(t,e){return this.th.getEntries(t,e)},e}(xe);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Si=function(){function t(t){this.persistence=t,this.Yf=new Oe((function(t){return t.canonicalId()})),this.lastRemoteSnapshotVersion=w.min(),this.highestTargetId=0,this.Jf=0,this.Xf=new or,this.targetCount=0,this.Zf=tn.nh()}return t.prototype.js=function(t,e){return this.Yf.forEach((function(t,n){return e(n)})),Ce.resolve()},t.prototype._h=function(t){return Ce.resolve(this.lastRemoteSnapshotVersion)},t.prototype.lh=function(t){return Ce.resolve(this.Jf)},t.prototype.oh=function(t){return this.highestTargetId=this.Zf.next(),Ce.resolve(this.highestTargetId)},t.prototype.dh=function(t,e,n){return n&&(this.lastRemoteSnapshotVersion=n),e>this.Jf&&(this.Jf=e),Ce.resolve()},t.prototype.Th=function(t){this.Yf.set(t.target,t);var e=t.targetId;e>this.highestTargetId&&(this.Zf=new tn(e),this.highestTargetId=e),t.sequenceNumber>this.Jf&&(this.Jf=t.sequenceNumber)},t.prototype.fh=function(t,e){return this.Th(e),this.targetCount+=1,Ce.resolve()},t.prototype.Ih=function(t,e){return this.Th(e),Ce.resolve()},t.prototype.wh=function(t,e){return this.Yf.delete(e.target),this.Xf.nc(e.targetId),this.targetCount-=1,Ce.resolve()},t.prototype.Ah=function(t,e,n){var r=this,i=0,o=[];return this.Yf.forEach((function(s,a){a.sequenceNumber<=e&&null===n.get(a.targetId)&&(r.Yf.delete(s),o.push(r.Rh(t,a.targetId)),i++)})),Ce.vn(o).next((function(){return i}))},t.prototype.Vh=function(t){return Ce.resolve(this.targetCount)},t.prototype.gh=function(t,e){var n=this.Yf.get(e)||null;return Ce.resolve(n)},t.prototype.ph=function(t,e,n){return this.Xf.ec(e,n),Ce.resolve()},t.prototype.bh=function(t,e,n){this.Xf.ic(e,n);var r=this.persistence.hh,i=[];return r&&e.forEach((function(e){i.push(r.Bo(t,e))})),Ce.vn(i)},t.prototype.Rh=function(t,e){return this.Xf.nc(e),Ce.resolve()},t.prototype.Sh=function(t,e){var n=this.Xf.hc(e);return Ce.resolve(n)},t.prototype.Ch=function(t,e){return Ce.resolve(this.Xf.Ch(e))},t}(),ki=function(){function t(t){var e=this;this.tT={},this.Bh=new Ve(0),this.qh=!1,this.qh=!0,this.hh=t(this),this.Yh=new Si(this),this.jn=new ze,this.Qn=new Ni(this.jn,(function(t){return e.hh.eT(t)}))}return t.prototype.start=function(){return Promise.resolve()},t.prototype.mo=function(){return this.qh=!1,Promise.resolve()},Object.defineProperty(t.prototype,"ro",{get:function(){return this.qh},enumerable:!0,configurable:!0}),t.prototype.ho=function(){},t.prototype.Fo=function(){return this.jn},t.prototype.vo=function(t){var e=this.tT[t.s()];return e||(e=new Ai(this.jn,this.hh),this.tT[t.s()]=e),e},t.prototype.Do=function(){return this.Yh},t.prototype.Co=function(){return this.Qn},t.prototype.runTransaction=function(t,e,n){var r=this;ge("MemoryPersistence","Starting transaction:",t);var i=new Oi(this.Bh.next());return this.hh.sT(),n(i).next((function(t){return r.hh.iT(i).next((function(){return t}))})).yn().then((function(t){return i.Un(),t}))},t.prototype.nT=function(t,e){return Ce.Sn(Object.values(this.tT).map((function(n){return function(){return n.Ch(t,e)}})))},t}(),Oi=function(t){function e(e){var n=this;return(n=t.call(this)||this).Oh=e,n}return i.__extends(e,t),e}(Le),Di=function(){function t(t){this.persistence=t,this.rT=new or,this.hT=null}return t.oT=function(e){return new t(e)},Object.defineProperty(t.prototype,"aT",{get:function(){if(this.hT)return this.hT;throw we()},enumerable:!0,configurable:!0}),t.prototype.yh=function(t,e,n){return this.rT.yh(n,e),this.aT.delete(n),Ce.resolve()},t.prototype.vh=function(t,e,n){return this.rT.vh(n,e),this.aT.add(n),Ce.resolve()},t.prototype.Bo=function(t,e){return this.aT.add(e),Ce.resolve()},t.prototype.removeTarget=function(t,e){var n=this;this.rT.nc(e.targetId).forEach((function(t){return n.aT.add(t)}));var r=this.persistence.Do();return r.Sh(t,e.targetId).next((function(t){t.forEach((function(t){return n.aT.add(t)}))})).next((function(){return r.wh(t,e)}))},t.prototype.sT=function(){this.hT=new Set},t.prototype.iT=function(t){var e=this,n=this.persistence.Co().Yr();return Ce.forEach(this.aT,(function(r){return e.uT(t,r).next((function(t){t||n.kn(r)}))})).next((function(){return e.hT=null,n.apply(t)}))},t.prototype.Wo=function(t,e){var n=this;return this.uT(t,e).next((function(t){t?n.aT.delete(e):n.aT.add(e)}))},t.prototype.eT=function(t){return 0},t.prototype.uT=function(t,e){var n=this;return Ce.Sn([function(){return Ce.resolve(n.rT.Ch(e))},function(){return n.persistence.Do().Ch(t,e)},function(){return n.persistence.nT(t,e)}])},t}(),Pi=function(){function t(){}return t.prototype.initialize=function(t){return i.__awaiter(this,void 0,void 0,(function(){var e=this;return i.__generator(this,(function(n){switch(n.label){case 0:return this.Ud=this.cT(t),this.persistence=this._T(t),[4,this.persistence.start()];case 1:return n.sent(),this.lT=this.dT(t),this.N_=this.fT(t),this.$d=this.TT(t),this.ol=this.ET(t),this.IT=this.wT(t),this.Ud.g_=function(t){return e.ol.Dd(t,1)},this.$d.ol=this.ol,[4,this.N_.start()];case 2:return n.sent(),[4,this.Ud.start()];case 3:return n.sent(),[4,this.$d.start()];case 4:return n.sent(),[4,this.$d.Vl(this.ol.tf)];case 5:return n.sent(),[2]}}))}))},t.prototype.wT=function(t){return new _i(this.ol)},t.prototype.dT=function(t){return null},t.prototype.fT=function(t){return new nr(this.persistence,new Ti,t.RT)},t.prototype._T=function(t){return new ki(Di.oT)},t.prototype.TT=function(t){var e=this;return new ni(this.N_,t.T_,t.Aa,(function(t){return e.ol.Dd(t,0)}),t.platform.AT())},t.prototype.cT=function(t){return new li},t.prototype.ET=function(t){return new bi(this.N_,this.$d,this.Ud,t.RT,t.Qd)},t.prototype.clearPersistence=function(t){throw new p(l.FAILED_PRECONDITION,"You are using the memory-only build of Firestore. Persistence support is only available via the @firebase/firestore bundle or the firebase-firestore.js build.")},t}(),Ci=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i.__extends(e,t),e.prototype.initialize=function(e){return i.__awaiter(this,void 0,void 0,(function(){var n=this;return i.__generator(this,(function(r){switch(r.label){case 0:return[4,t.prototype.initialize.call(this,e)];case 1:return r.sent(),[4,this.persistence.no((function(t){return i.__awaiter(n,void 0,void 0,(function(){return i.__generator(this,(function(e){switch(e.label){case 0:return[4,this.ol.Vl(t)];case 1:return e.sent(),this.lT&&(t&&!this.lT.ro?this.lT.start(this.N_):t||this.lT.stop()),[2]}}))}))}))];case 2:return r.sent(),[2]}}))}))},e.prototype.fT=function(t){return new rr(this.persistence,new Ti,t.RT)},e.prototype.ET=function(t){var e=new wi(this.N_,this.$d,this.Ud,t.RT,t.Qd);return this.Ud instanceof fi&&(this.Ud.ol=e),e},e.prototype.dT=function(t){var e=this.persistence.hh.ko;return new tr(e,t.Aa)},e.prototype._T=function(t){var e=cn.$o(t.mT),n=t.platform.bc(t.mT.ii);return new cn(t.PT.synchronizeTabs,e,t.clientId,t.platform,Zn.hu(t.PT.cacheSizeBytes),t.Aa,n,this.Ud)},e.prototype.cT=function(t){if(t.PT.VT&&t.PT.synchronizeTabs){if(!fi.Gh(t.platform))throw new p(l.UNIMPLEMENTED,"IndexedDB persistence is only available on platforms that support LocalStorage.");var e=cn.$o(t.mT);return new fi(t.Aa,t.platform,e,t.clientId,t.RT)}return new li},e.prototype.clearPersistence=function(t){var e=cn.$o(t);return cn.clearPersistence(e)},e}(Pi),xi=function(){function t(t,e,n,r){this.platform=t,this.mT=e,this.credentials=n,this.Aa=r,this.clientId=Ie.cn()}return t.prototype.start=function(t,e){var n=this;this.gT();var r=new Ue,i=new Ue,o=!1;return this.credentials.l((function(s){if(!o)return o=!0,ge("FirestoreClient","Initializing. user=",s.uid),n.pT(t,e,s,i).then(r.resolve,r.reject);n.Aa.Ua((function(){return n.Pl(s)}))})),this.Aa.uo((function(){return r.promise})),i.promise},t.prototype.enableNetwork=function(){var t=this;return this.gT(),this.Aa.enqueue((function(){return t.ol.enableNetwork()}))},t.prototype.pT=function(t,e,n,r){return i.__awaiter(this,void 0,void 0,(function(){var o,s,a,u,c=this;return i.__generator(this,(function(h){switch(h.label){case 0:return h.trys.push([0,3,,4]),[4,this.platform.yT(this.mT)];case 1:return o=h.sent(),s=this.platform.bc(this.mT.ii),a=function(t,e,n){return new Zr(t,e,n)}(o,this.credentials,s),[4,t.initialize({Aa:this.Aa,mT:this.mT,platform:this.platform,T_:a,clientId:this.clientId,RT:n,Qd:100,PT:e})];case 2:return h.sent(),this.persistence=t.persistence,this.Ud=t.Ud,this.N_=t.N_,this.$d=t.$d,this.ol=t.ol,this.lT=t.lT,this.bT=t.IT,this.persistence.ho((function(){return i.__awaiter(c,void 0,void 0,(function(){return i.__generator(this,(function(t){switch(t.label){case 0:return[4,this.terminate()];case 1:return t.sent(),[2]}}))}))})),r.resolve(),[3,4];case 3:if(u=h.sent(),r.reject(u),!this.vT(u))throw u;return[2,(console.warn("Error enabling offline persistence. Falling back to persistence disabled: "+u),this.pT(new Pi,{VT:!1},n,r))];case 4:return[2]}}))}))},t.prototype.vT=function(t){return"FirebaseError"===t.name?t.code===l.FAILED_PRECONDITION||t.code===l.UNIMPLEMENTED:!("undefined"!=typeof DOMException&&t instanceof DOMException)||22===t.code||20===t.code||11===t.code},t.prototype.gT=function(){if(this.Aa.La)throw new p(l.FAILED_PRECONDITION,"The client has already been terminated.")},t.prototype.Pl=function(t){return this.Aa.Wa(),ge("FirestoreClient","Credential Changed. Current user: "+t.uid),this.ol.Pl(t)},t.prototype.disableNetwork=function(){var t=this;return this.gT(),this.Aa.enqueue((function(){return t.ol.disableNetwork()}))},t.prototype.terminate=function(){var t=this;return this.Aa.qa((function(){return i.__awaiter(t,void 0,void 0,(function(){return i.__generator(this,(function(t){switch(t.label){case 0:return this.lT&&this.lT.stop(),[4,this.$d.mo()];case 1:return t.sent(),[4,this.Ud.mo()];case 2:return t.sent(),[4,this.persistence.mo()];case 3:return t.sent(),this.credentials.T(),[2]}}))}))}))},t.prototype.waitForPendingWrites=function(){var t=this;this.gT();var e=new Ue;return this.Aa.uo((function(){return t.ol.lf(e)})),e.promise},t.prototype.listen=function(t,e,n){var r=this;this.gT();var i=new Ii(t,e,n);return this.Aa.uo((function(){return r.bT.listen(i)})),i},t.prototype.rl=function(t){var e=this;this.ST||this.Aa.uo((function(){return e.bT.rl(t)}))},t.prototype.DT=function(t){return i.__awaiter(this,void 0,void 0,(function(){var e,n=this;return i.__generator(this,(function(r){switch(r.label){case 0:return this.gT(),e=new Ue,[4,this.Aa.enqueue((function(){return i.__awaiter(n,void 0,void 0,(function(){var n,r,o;return i.__generator(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),[4,this.N_.Uu(t)];case 1:return(n=i.sent())instanceof mt?e.resolve(n):n instanceof bt?e.resolve(null):e.reject(new p(l.UNAVAILABLE,"Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)")),[3,3];case 2:return r=i.sent(),o=Xn(r,"Failed to get document '"+t+" from cache"),e.reject(o),[3,3];case 3:return[2]}}))}))}))];case 1:return[2,(r.sent(),e.promise)]}}))}))},t.prototype.CT=function(t){return i.__awaiter(this,void 0,void 0,(function(){var e,n=this;return i.__generator(this,(function(r){switch(r.label){case 0:return this.gT(),e=new Ue,[4,this.Aa.enqueue((function(){return i.__awaiter(n,void 0,void 0,(function(){var n,r,o,s,a,u;return i.__generator(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),[4,this.N_.ju(t,!0)];case 1:return n=i.sent(),r=new vi(t,n.Ku),o=r.Vd(n.documents),s=r.xn(o,!1),e.resolve(s.snapshot),[3,3];case 2:return a=i.sent(),u=Xn(a,"Failed to execute query '"+t+" against cache"),e.reject(u),[3,3];case 3:return[2]}}))}))}))];case 1:return[2,(r.sent(),e.promise)]}}))}))},t.prototype.write=function(t){var e=this;this.gT();var n=new Ue;return this.Aa.uo((function(){return e.ol.write(t,n)})),n.promise},t.prototype.ii=function(){return this.mT.ii},t.prototype.Df=function(t){var e=this;this.gT(),this.Aa.uo((function(){return e.bT.Df(t),Promise.resolve()}))},t.prototype.Cf=function(t){var e=this;this.ST||this.Aa.uo((function(){return e.bT.Cf(t),Promise.resolve()}))},Object.defineProperty(t.prototype,"ST",{get:function(){return this.Aa.La},enumerable:!0,configurable:!0}),t.prototype.transaction=function(t){var e=this;this.gT();var n=new Ue;return this.Aa.uo((function(){return e.ol.runTransaction(e.Aa,t,n),Promise.resolve()})),n.promise},t}(),Ri=function(){function t(t){this.observer=t,this.muted=!1}return t.prototype.next=function(t){this.FT(this.observer.next,t)},t.prototype.error=function(t){this.FT(this.observer.error,t)},t.prototype.NT=function(){this.muted=!0},t.prototype.FT=function(t,e){var n=this;this.muted||setTimeout((function(){n.muted||t(e)}),0)},t}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function Li(t){return function(t,e){if("object"!=typeof t||null===t)return!1;for(var n=t,r=0,i=["next","error","complete"];r<i.length;r++){var o=i[r];if(o in n&&"function"==typeof n[o])return!0}return!1}(t)}var ji=function(){function t(t,e,n,r){this.firestore=t,this.timestampsInSnapshots=e,this.$T=n,this.converter=r}return t.prototype.kT=function(t){switch(j(t)){case 0:return null;case 1:return t.booleanValue;case 2:return G(t.integerValue||t.doubleValue);case 3:return this.LT(t.timestampValue);case 4:return this.MT(t);case 5:return t.stringValue;case 6:return new Sr(W(t.bytesValue));case 7:return this.OT(t.referenceValue);case 8:return this.xT(t.geoPointValue);case 9:return this.BT(t.arrayValue);case 10:return this.qT(t.mapValue);default:throw we()}},t.prototype.qT=function(t){var e=this,n={};return S(t.fields||{},(function(t,r){n[t]=e.kT(r)})),n},t.prototype.xT=function(t){return new jr(G(t.latitude),G(t.longitude))},t.prototype.BT=function(t){var e=this;return(t.values||[]).map((function(t){return e.kT(t)}))},t.prototype.MT=function(t){switch(this.$T){case"previous":var e=function t(e){var n=e.mapValue.fields.__previous_value__;return x(n)?t(n):n}(t);return null==e?null:this.kT(e);case"estimate":return this.LT(R(t));default:return null}},t.prototype.LT=function(t){var e=B(t),n=new b(e.seconds,e.nanos);return this.timestampsInSnapshots?n:n.toDate()},t.prototype.OT=function(t){var e=_.K(t);Ee(le(e));var n=new ke(e.get(1),e.get(3)),r=new A(e.k(5));return n.isEqual(this.firestore.$c)||me("Document "+r+" contains a document reference within a different database ("+n.projectId+"/"+n.database+") which is not supported. It will be treated as a reference in the current database ("+this.firestore.$c.projectId+"/"+this.firestore.$c.database+") instead."),new Bi(r,this.firestore,this.converter)},t}(),Mi=Zn.uu,Vi=function(){function t(t){var e,n,r,i;if(void 0===t.host){if(void 0!==t.ssl)throw new p(l.INVALID_ARGUMENT,"Can't provide ssl option if host option is not set");this.host="firestore.googleapis.com",this.ssl=!0}else pr("settings","non-empty string","host",t.host),this.host=t.host,dr("settings","boolean","ssl",t.ssl),this.ssl=null===(e=t.ssl)||void 0===e||e;if(wr("settings",t,["host","ssl","credentials","timestampsInSnapshots","cacheSizeBytes","experimentalForceLongPolling","ignoreUndefinedProperties"]),dr("settings","object","credentials",t.credentials),this.credentials=t.credentials,dr("settings","boolean","timestampsInSnapshots",t.timestampsInSnapshots),dr("settings","boolean","ignoreUndefinedProperties",t.ignoreUndefinedProperties),!0===t.timestampsInSnapshots?me("The setting 'timestampsInSnapshots: true' is no longer required and should be removed."):!1===t.timestampsInSnapshots&&me("Support for 'timestampsInSnapshots: false' will be removed soon. You must update your code to handle Timestamp objects."),this.timestampsInSnapshots=null===(n=t.timestampsInSnapshots)||void 0===n||n,this.ignoreUndefinedProperties=null!==(r=t.ignoreUndefinedProperties)&&void 0!==r&&r,dr("settings","number","cacheSizeBytes",t.cacheSizeBytes),void 0===t.cacheSizeBytes)this.cacheSizeBytes=Zn._u;else{if(t.cacheSizeBytes!==Mi&&t.cacheSizeBytes<Zn.cu)throw new p(l.INVALID_ARGUMENT,"cacheSizeBytes must be at least "+Zn.cu);this.cacheSizeBytes=t.cacheSizeBytes}dr("settings","boolean","experimentalForceLongPolling",t.experimentalForceLongPolling),this.forceLongPolling=null!==(i=t.experimentalForceLongPolling)&&void 0!==i&&i}return t.prototype.isEqual=function(t){return this.host===t.host&&this.ssl===t.ssl&&this.timestampsInSnapshots===t.timestampsInSnapshots&&this.credentials===t.credentials&&this.cacheSizeBytes===t.cacheSizeBytes&&this.forceLongPolling===t.forceLongPolling&&this.ignoreUndefinedProperties===t.ignoreUndefinedProperties},t}(),Ui=function(){function t(e,n,r){var o=this;if(void 0===r&&(r=new Pi),this.UT=null,this.QT=new Yn,this.INTERNAL={delete:function(){return i.__awaiter(o,void 0,void 0,(function(){return i.__generator(this,(function(t){switch(t.label){case 0:return this.WT(),[4,this.jT.terminate()];case 1:return t.sent(),[2]}}))}))}},"object"==typeof e.options){var s=e;this.UT=s,this.$c=t.KT(s),this.GT=s.name,this.zT=new y(n)}else{var a=e;if(!a.projectId)throw new p(l.INVALID_ARGUMENT,"Must provide projectId");this.$c=new ke(a.projectId,a.database),this.GT="[DEFAULT]",this.zT=new v}this.HT=r,this.YT=new Vi({})}return Object.defineProperty(t.prototype,"JT",{get:function(){return this.XT||(this.XT=new Br(this.$c,this.YT.ignoreUndefinedProperties)),this.XT},enumerable:!0,configurable:!0}),t.prototype.settings=function(t){ur("Firestore.settings",arguments,1),fr("Firestore.settings","object",1,t);var e=new Vi(t);if(this.jT&&!this.YT.isEqual(e))throw new p(l.FAILED_PRECONDITION,"Firestore has already been started and its settings can no longer be changed. You can only call settings() before calling any other methods on a Firestore object.");this.YT=e,void 0!==e.credentials&&(this.zT=function(t){if(!t)return new v;switch(t.type){case"gapi":var e=t.ZT;return Ee(!("object"!=typeof e||null===e||!e.auth||!e.auth.getAuthHeaderValueForFirstParty)),new m(e,t.V||"0");case"provider":return t.ZT;default:throw new p(l.INVALID_ARGUMENT,"makeCredentialsProvider failed due to invalid credential type")}}(e.credentials))},t.prototype.enableNetwork=function(){return this.WT(),this.jT.enableNetwork()},t.prototype.disableNetwork=function(){return this.WT(),this.jT.disableNetwork()},t.prototype.enablePersistence=function(t){var e,n;if(this.jT)throw new p(l.FAILED_PRECONDITION,"Firestore has already been started and persistence can no longer be enabled. You can only call enablePersistence() before calling any other methods on a Firestore object.");var r=!1;return t&&(void 0!==t.experimentalTabSynchronization&&me("The 'experimentalTabSynchronization' setting will be removed. Use 'synchronizeTabs' instead."),r=null!==(n=null!==(e=t.synchronizeTabs)&&void 0!==e?e:t.experimentalTabSynchronization)&&void 0!==n&&n),this.tE(this.HT,{VT:!0,cacheSizeBytes:this.YT.cacheSizeBytes,synchronizeTabs:r})},t.prototype.clearPersistence=function(){return i.__awaiter(this,void 0,void 0,(function(){var t,e=this;return i.__generator(this,(function(n){if(void 0!==this.jT&&!this.jT.ST)throw new p(l.FAILED_PRECONDITION,"Persistence cannot be cleared after this Firestore instance is initialized.");return t=new Ue,[2,(this.QT.Ma((function(){return i.__awaiter(e,void 0,void 0,(function(){var e,n;return i.__generator(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),e=this.eE(),[4,this.HT.clearPersistence(e)];case 1:return r.sent(),t.resolve(),[3,3];case 2:return n=r.sent(),t.reject(n),[3,3];case 3:return[2]}}))}))})),t.promise)]}))}))},t.prototype.terminate=function(){return this.app._removeServiceInstance("firestore"),this.INTERNAL.delete()},Object.defineProperty(t.prototype,"sE",{get:function(){return this.WT(),this.jT.ST},enumerable:!0,configurable:!0}),t.prototype.waitForPendingWrites=function(){return this.WT(),this.jT.waitForPendingWrites()},t.prototype.onSnapshotsInSync=function(t){if(this.WT(),Li(t))return this.iE(t);fr("Firestore.onSnapshotsInSync","function",1,t);var e={next:t};return this.iE(e)},t.prototype.iE=function(t){var e=this,n=new Ri({next:function(){t.next&&t.next()},error:function(t){throw we()}});return this.jT.Df(n),function(){n.NT(),e.jT.Cf(n)}},t.prototype.WT=function(){return this.jT||this.tE(new Pi,{VT:!1}),this.jT},t.prototype.eE=function(){return new Se(this.$c,this.GT,this.YT.host,this.YT.ssl,this.YT.forceLongPolling)},t.prototype.tE=function(t,e){var n=this.eE();return this.jT=new xi(pe.nt(),n,this.zT,this.QT),this.jT.start(t,e)},t.KT=function(t){if(e=t.options,!Object.prototype.hasOwnProperty.call(e,"projectId"))throw new p(l.INVALID_ARGUMENT,'"projectId" not provided in firebase.initializeApp.');var e,n=t.options.projectId;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */if(!n||"string"!=typeof n)throw new p(l.INVALID_ARGUMENT,"projectId must be a string in FirebaseApp.options");return new ke(n)},Object.defineProperty(t.prototype,"app",{get:function(){if(!this.UT)throw new p(l.FAILED_PRECONDITION,"Firestore was not initialized using the Firebase SDK. 'app' is not available");return this.UT},enumerable:!0,configurable:!0}),t.prototype.collection=function(t){return ur("Firestore.collection",arguments,1),fr("Firestore.collection","non-empty string",1,t),this.WT(),new Yi(_.K(t),this)},t.prototype.doc=function(t){return ur("Firestore.doc",arguments,1),fr("Firestore.doc","non-empty string",1,t),this.WT(),Bi.nE(_.K(t),this)},t.prototype.collectionGroup=function(t){if(ur("Firestore.collectionGroup",arguments,1),fr("Firestore.collectionGroup","non-empty string",1,t),t.indexOf("/")>=0)throw new p(l.INVALID_ARGUMENT,"Invalid collection ID '"+t+"' passed to function Firestore.collectionGroup(). Collection IDs must not contain '/'.");return this.WT(),new Ki(new _t(_.G,t),this)},t.prototype.runTransaction=function(t){var e=this;return ur("Firestore.runTransaction",arguments,1),fr("Firestore.runTransaction","function",1,t),this.WT().transaction((function(n){return t(new Fi(e,n))}))},t.prototype.batch=function(){return this.WT(),new qi(this)},Object.defineProperty(t,"logLevel",{get:function(){switch(ve()){case s.LogLevel.DEBUG:return"debug";case s.LogLevel.SILENT:return"silent";default:return"error"}},enumerable:!0,configurable:!0}),t.setLogLevel=function(t){switch(ur("Firestore.setLogLevel",arguments,1),fr("Firestore.setLogLevel","non-empty string",1,t),t){case"debug":ye(s.LogLevel.DEBUG);break;case"error":ye(s.LogLevel.ERROR);break;case"silent":ye(s.LogLevel.SILENT);break;default:throw new p(l.INVALID_ARGUMENT,"Invalid log level: "+t)}},t.prototype.rE=function(){return this.YT.timestampsInSnapshots},t}(),Fi=function(){function t(t,e){this.hE=t,this.oE=e}return t.prototype.get=function(t){var e=this;ur("Transaction.get",arguments,1);var n=Qi("Transaction.get",t,this.hE);return this.oE.A_([n.kc]).then((function(t){if(!t||1!==t.length)return we();var r=t[0];if(r instanceof bt)return new Wi(e.hE,n.kc,null,!1,!1,n.aE);if(r instanceof mt)return new Wi(e.hE,n.kc,r,!1,!1,n.aE);throw we()}))},t.prototype.set=function(t,e,n){hr("Transaction.set",arguments,2,3);var r=Qi("Transaction.set",t,this.hE);n=Xi("Transaction.set",n);var i=to(r.aE,e,"Transaction.set"),o=i[0],s=i[1],a=n.merge||n.mergeFields?this.hE.JT.Dc(s,o,n.mergeFields):this.hE.JT.vc(s,o);return this.oE.set(r.kc,a),this},t.prototype.update=function(t,e,n){for(var r,i,o=[],s=3;s<arguments.length;s++)o[s-3]=arguments[s];return"string"==typeof e||e instanceof kr?(cr("Transaction.update",arguments,3),r=Qi("Transaction.update",t,this.hE),i=this.hE.JT.Fc("Transaction.update",e,n,o)):(ur("Transaction.update",arguments,2),r=Qi("Transaction.update",t,this.hE),i=this.hE.JT.Cc("Transaction.update",e)),this.oE.update(r.kc,i),this},t.prototype.delete=function(t){ur("Transaction.delete",arguments,1);var e=Qi("Transaction.delete",t,this.hE);return this.oE.delete(e.kc),this},t}(),qi=function(){function t(t){this.hE=t,this.uE=[],this.cE=!1}return t.prototype.set=function(t,e,n){hr("WriteBatch.set",arguments,2,3),this._E();var r=Qi("WriteBatch.set",t,this.hE);n=Xi("WriteBatch.set",n);var i=to(r.aE,e,"WriteBatch.set"),o=i[0],s=i[1],a=n.merge||n.mergeFields?this.hE.JT.Dc(s,o,n.mergeFields):this.hE.JT.vc(s,o);return this.uE=this.uE.concat(a.Ac(r.kc,ot.ft())),this},t.prototype.update=function(t,e,n){for(var r,i,o=[],s=3;s<arguments.length;s++)o[s-3]=arguments[s];return this._E(),"string"==typeof e||e instanceof kr?(cr("WriteBatch.update",arguments,3),r=Qi("WriteBatch.update",t,this.hE),i=this.hE.JT.Fc("WriteBatch.update",e,n,o)):(ur("WriteBatch.update",arguments,2),r=Qi("WriteBatch.update",t,this.hE),i=this.hE.JT.Cc("WriteBatch.update",e)),this.uE=this.uE.concat(i.Ac(r.kc,ot.exists(!0))),this},t.prototype.delete=function(t){ur("WriteBatch.delete",arguments,1),this._E();var e=Qi("WriteBatch.delete",t,this.hE);return this.uE=this.uE.concat(new ht(e.kc,ot.ft())),this},t.prototype.commit=function(){return this._E(),this.cE=!0,this.uE.length>0?this.hE.WT().write(this.uE):Promise.resolve()},t.prototype._E=function(){if(this.cE)throw new p(l.FAILED_PRECONDITION,"A write batch can no longer be used after commit() has been called.")},t}(),Bi=function(){function t(t,e,n){this.kc=t,this.firestore=e,this.aE=n,this.jT=this.firestore.WT()}return t.nE=function(e,n,r){if(e.length%2!=0)throw new p(l.INVALID_ARGUMENT,"Invalid document reference. Document references must have an even number of segments, but "+e.j()+" has "+e.length);return new t(new A(e),n,r)},Object.defineProperty(t.prototype,"id",{get:function(){return this.kc.path.O()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"parent",{get:function(){return new Yi(this.kc.path.L(),this.firestore,this.aE)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"path",{get:function(){return this.kc.path.j()},enumerable:!0,configurable:!0}),t.prototype.collection=function(t){if(ur("DocumentReference.collection",arguments,1),fr("DocumentReference.collection","non-empty string",1,t),!t)throw new p(l.INVALID_ARGUMENT,"Must provide a non-empty collection name to collection()");var e=_.K(t);return new Yi(this.kc.path.child(e),this.firestore)},t.prototype.isEqual=function(e){if(!(e instanceof t))throw Er("isEqual","DocumentReference",1,e);return this.firestore===e.firestore&&this.kc.isEqual(e.kc)&&this.aE===e.aE},t.prototype.set=function(t,e){hr("DocumentReference.set",arguments,1,2),e=Xi("DocumentReference.set",e);var n=to(this.aE,t,"DocumentReference.set"),r=n[0],i=n[1],o=e.merge||e.mergeFields?this.firestore.JT.Dc(i,r,e.mergeFields):this.firestore.JT.vc(i,r);return this.jT.write(o.Ac(this.kc,ot.ft()))},t.prototype.update=function(t,e){for(var n,r=[],i=2;i<arguments.length;i++)r[i-2]=arguments[i];return"string"==typeof t||t instanceof kr?(cr("DocumentReference.update",arguments,2),n=this.firestore.JT.Fc("DocumentReference.update",t,e,r)):(ur("DocumentReference.update",arguments,1),n=this.firestore.JT.Cc("DocumentReference.update",t)),this.jT.write(n.Ac(this.kc,ot.exists(!0)))},t.prototype.delete=function(){return ur("DocumentReference.delete",arguments,0),this.jT.write([new ht(this.kc,ot.ft())])},t.prototype.onSnapshot=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];hr("DocumentReference.onSnapshot",arguments,1,4);var n,r={includeMetadataChanges:!1},i=0;"object"!=typeof t[i]||Li(t[i])||(wr("DocumentReference.onSnapshot",r=t[i],["includeMetadataChanges"]),dr("DocumentReference.onSnapshot","boolean","includeMetadataChanges",r.includeMetadataChanges),i++);var o={includeMetadataChanges:r.includeMetadataChanges};return Li(t[i])?n=t[i]:(fr("DocumentReference.onSnapshot","function",i,t[i]),lr("DocumentReference.onSnapshot","function",i+1,t[i+1]),lr("DocumentReference.onSnapshot","function",i+2,t[i+2]),n={next:t[i],error:t[i+1],complete:t[i+2]}),this.lE(o,n)},t.prototype.lE=function(t,e){var n=this,r=function(t){console.error("Uncaught Error in onSnapshot:",t)};e.error&&(r=e.error.bind(e));var i=new Ri({next:function(t){if(e.next){var r=t.docs.get(n.kc);e.next(new Wi(n.firestore,n.kc,r,t.fromCache,t.hasPendingWrites,n.aE))}},error:r}),o=this.jT.listen(_t.Wt(this.kc.path),i,t);return function(){i.NT(),n.jT.rl(o)}},t.prototype.get=function(t){var e=this;return hr("DocumentReference.get",arguments,0,1),$i("DocumentReference.get",t),new Promise((function(n,r){t&&"cache"===t.source?e.firestore.WT().DT(e.kc).then((function(t){n(new Wi(e.firestore,e.kc,t,!0,t instanceof mt&&t.At,e.aE))}),r):e.dE(n,r,t)}))},t.prototype.dE=function(t,e,n){var r=this.lE({includeMetadataChanges:!0,Of:!0},{next:function(i){r(),!i.exists&&i.metadata.fromCache?e(new p(l.UNAVAILABLE,"Failed to get document because the client is offline.")):i.exists&&i.metadata.fromCache&&n&&"server"===n.source?e(new p(l.UNAVAILABLE,'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')):t(i)},error:e})},t.prototype.withConverter=function(e){return new t(this.kc,this.firestore,e)},t}(),Gi=function(){function t(t,e){this.hasPendingWrites=t,this.fromCache=e}return t.prototype.isEqual=function(t){return this.hasPendingWrites===t.hasPendingWrites&&this.fromCache===t.fromCache},t}(),Wi=function(){function t(t,e,n,r,i,o){this.hE=t,this.kc=e,this.fE=n,this.TE=r,this.EE=i,this.aE=o}return t.prototype.data=function(t){if(hr("DocumentSnapshot.data",arguments,0,1),t=Ji("DocumentSnapshot.data",t),this.fE){if(this.aE){var e=new zi(this.hE,this.kc,this.fE,this.TE,this.EE);return this.aE.fromFirestore(e,t)}return new ji(this.hE,this.hE.rE(),t.serverTimestamps,void 0).kT(this.fE.Lt())}},t.prototype.get=function(t,e){if(hr("DocumentSnapshot.get",arguments,1,2),e=Ji("DocumentSnapshot.get",e),this.fE){var n=this.fE.data().field(Hr("DocumentSnapshot.get",t));if(null!==n)return new ji(this.hE,this.hE.rE(),e.serverTimestamps,this.aE).kT(n)}},Object.defineProperty(t.prototype,"id",{get:function(){return this.kc.path.O()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"ref",{get:function(){return new Bi(this.kc,this.hE,this.aE)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"exists",{get:function(){return null!==this.fE},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"metadata",{get:function(){return new Gi(this.EE,this.TE)},enumerable:!0,configurable:!0}),t.prototype.isEqual=function(e){if(!(e instanceof t))throw Er("isEqual","DocumentSnapshot",1,e);return this.hE===e.hE&&this.TE===e.TE&&this.kc.isEqual(e.kc)&&(null===this.fE?null===e.fE:this.fE.isEqual(e.fE))&&this.aE===e.aE},t}(),zi=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i.__extends(e,t),e.prototype.data=function(e){return t.prototype.data.call(this,e)},e}(Wi),Ki=function(){function t(t,e,n){this.IE=t,this.firestore=e,this.aE=n}return t.prototype.where=function(e,n,r){ur("Query.where",arguments,3),br("Query.where",3,r);var i,o=function(t,e,n,r){if(!e.some((function(t){return t===r})))throw new p(l.INVALID_ARGUMENT,"Invalid value "+mr(r)+" provided to function Query.where() for its "+Ir(2)+" argument. Acceptable values: "+e.join(", "));return r}(0,["<","<=","==",">=",">","array-contains","in","array-contains-any"],0,n),s=Hr("Query.where",e);if(s.Y()){if("array-contains"===o||"array-contains-any"===o)throw new p(l.INVALID_ARGUMENT,"Invalid Query. You can't perform '"+o+"' queries on FieldPath.documentId().");if("in"===o){this.wE(r,o);for(var a=[],u=0,c=r;u<c.length;u++){var h=c[u];a.push(this.RE(h))}i={arrayValue:{values:a}}}else i=this.RE(r)}else"in"!==o&&"array-contains-any"!==o||this.wE(r,o),i=this.firestore.JT.Nc("Query.where",r,"in"===o);var f=It.create(s,o,i);return this.AE(f),new t(this.IE.Gt(f),this.firestore,this.aE)},t.prototype.orderBy=function(e,n){var r;if(hr("Query.orderBy",arguments,1,2),lr("Query.orderBy","non-empty string",2,n),void 0===n||"asc"===n)r="asc";else{if("desc"!==n)throw new p(l.INVALID_ARGUMENT,"Function Query.orderBy() has unknown direction '"+n+"', expected 'asc' or 'desc'.");r="desc"}if(null!==this.IE.startAt)throw new p(l.INVALID_ARGUMENT,"Invalid query. You must not call Query.startAt() or Query.startAfter() before calling Query.orderBy().");if(null!==this.IE.endAt)throw new p(l.INVALID_ARGUMENT,"Invalid query. You must not call Query.endAt() or Query.endBefore() before calling Query.orderBy().");var i=Hr("Query.orderBy",e),o=new Dt(i,r);return this.mE(o),new t(this.IE.zt(o),this.firestore,this.aE)},t.prototype.limit=function(e){return ur("Query.limit",arguments,1),fr("Query.limit","number",1,e),_r("Query.limit",1,e),new t(this.IE.Ht(e),this.firestore,this.aE)},t.prototype.limitToLast=function(e){return ur("Query.limitToLast",arguments,1),fr("Query.limitToLast","number",1,e),_r("Query.limitToLast",1,e),new t(this.IE.Yt(e),this.firestore,this.aE)},t.prototype.startAt=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];cr("Query.startAt",arguments,1);var i=this.PE("Query.startAt",e,n,!0);return new t(this.IE.Jt(i),this.firestore,this.aE)},t.prototype.startAfter=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];cr("Query.startAfter",arguments,1);var i=this.PE("Query.startAfter",e,n,!1);return new t(this.IE.Jt(i),this.firestore,this.aE)},t.prototype.endBefore=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];cr("Query.endBefore",arguments,1);var i=this.PE("Query.endBefore",e,n,!0);return new t(this.IE.Xt(i),this.firestore,this.aE)},t.prototype.endAt=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];cr("Query.endAt",arguments,1);var i=this.PE("Query.endAt",e,n,!1);return new t(this.IE.Xt(i),this.firestore,this.aE)},t.prototype.isEqual=function(e){if(!(e instanceof t))throw Er("isEqual","Query",1,e);return this.firestore===e.firestore&&this.IE.isEqual(e.IE)},t.prototype.withConverter=function(e){return new t(this.IE,this.firestore,e)},t.prototype.PE=function(t,e,n,r){if(br(t,1,e),e instanceof Wi){if(n.length>0)throw new p(l.INVALID_ARGUMENT,"Too many arguments provided to "+t+"().");var i=e;if(!i.exists)throw new p(l.NOT_FOUND,"Can't use a DocumentSnapshot that doesn't exist for "+t+"().");return this.VE(i.fE,r)}var o=[e].concat(n);return this.gE(t,o,r)},t.prototype.VE=function(t,e){for(var n=[],r=0,i=this.IE.orderBy;r<i.length;r++){var o=i[r];if(o.field.Y())n.push(z(this.firestore.$c,t.key));else{var s=t.field(o.field);if(x(s))throw new p(l.INVALID_ARGUMENT,'Invalid query. You are trying to start or end a query using a document for which the field "'+o.field+'" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');if(null===s){var a=o.field.j();throw new p(l.INVALID_ARGUMENT,"Invalid query. You are trying to start or end a query using a document for which the field '"+a+"' (used as the orderBy) does not exist.")}n.push(s)}}return new Ot(n,e)},t.prototype.gE=function(t,e,n){var r=this.IE.xt;if(e.length>r.length)throw new p(l.INVALID_ARGUMENT,"Too many arguments provided to "+t+"(). The number of arguments must be less than or equal to the number of Query.orderBy() clauses");for(var i=[],o=0;o<e.length;o++){var s=e[o];if(r[o].field.Y()){if("string"!=typeof s)throw new p(l.INVALID_ARGUMENT,"Invalid query. Expected a string for document ID in "+t+"(), but got a "+typeof s);if(!this.IE._e()&&-1!==s.indexOf("/"))throw new p(l.INVALID_ARGUMENT,"Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to "+t+"() must be a plain document ID, but '"+s+"' contains a slash.");var a=this.IE.path.child(_.K(s));if(!A.et(a))throw new p(l.INVALID_ARGUMENT,"Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to "+t+"() must result in a valid document path, but '"+a+"' is not because it contains an odd number of segments.");var u=new A(a);i.push(z(this.firestore.$c,u))}else{var c=this.firestore.JT.Nc(t,s);i.push(c)}}return new Ot(i,n)},t.prototype.onSnapshot=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];hr("Query.onSnapshot",arguments,1,4);var n,r={},i=0;return"object"!=typeof t[i]||Li(t[i])||(wr("Query.onSnapshot",r=t[i],["includeMetadataChanges"]),dr("Query.onSnapshot","boolean","includeMetadataChanges",r.includeMetadataChanges),i++),Li(t[i])?n=t[i]:(fr("Query.onSnapshot","function",i,t[i]),lr("Query.onSnapshot","function",i+1,t[i+1]),lr("Query.onSnapshot","function",i+2,t[i+2]),n={next:t[i],error:t[i+1],complete:t[i+2]}),this.pE(this.IE),this.lE(r,n)},t.prototype.lE=function(t,e){var n=this,r=function(t){console.error("Uncaught Error in onSnapshot:",t)};e.error&&(r=e.error.bind(e));var i=new Ri({next:function(t){e.next&&e.next(new Hi(n.firestore,n.IE,t,n.aE))},error:r}),o=this.firestore.WT(),s=o.listen(this.IE,i,t);return function(){i.NT(),o.rl(s)}},t.prototype.pE=function(t){if(t.ae()&&0===t.xt.length)throw new p(l.UNIMPLEMENTED,"limitToLast() queries require specifying at least one orderBy() clause")},t.prototype.get=function(t){var e=this;return hr("Query.get",arguments,0,1),$i("Query.get",t),this.pE(this.IE),new Promise((function(n,r){t&&"cache"===t.source?e.firestore.WT().CT(e.IE).then((function(t){n(new Hi(e.firestore,e.IE,t,e.aE))}),r):e.dE(n,r,t)}))},t.prototype.dE=function(t,e,n){var r=this.lE({includeMetadataChanges:!0,Of:!0},{next:function(i){r(),i.metadata.fromCache&&n&&"server"===n.source?e(new p(l.UNAVAILABLE,'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')):t(i)},error:e})},t.prototype.RE=function(t){if("string"==typeof t){if(""===t)throw new p(l.INVALID_ARGUMENT,"Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");if(!this.IE._e()&&-1!==t.indexOf("/"))throw new p(l.INVALID_ARGUMENT,"Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '"+t+"' contains a '/' character.");var e=this.IE.path.child(_.K(t));if(!A.et(e))throw new p(l.INVALID_ARGUMENT,"Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '"+e+"' is not because it has an odd number of segments ("+e.length+").");return z(this.firestore.$c,new A(e))}if(t instanceof Bi){var n=t;return z(this.firestore.$c,n.kc)}throw new p(l.INVALID_ARGUMENT,"Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: "+mr(t)+".")},t.prototype.wE=function(t,e){if(!Array.isArray(t)||0===t.length)throw new p(l.INVALID_ARGUMENT,"Invalid Query. A non-empty array is required for '"+e.toString()+"' filters.");if(t.length>10)throw new p(l.INVALID_ARGUMENT,"Invalid Query. '"+e.toString()+"' filters support a maximum of 10 elements in the value array.");if(t.indexOf(null)>=0)throw new p(l.INVALID_ARGUMENT,"Invalid Query. '"+e.toString()+"' filters cannot contain 'null' in the value array.");if(t.filter((function(t){return Number.isNaN(t)})).length>0)throw new p(l.INVALID_ARGUMENT,"Invalid Query. '"+e.toString()+"' filters cannot contain 'NaN' in the value array.")},t.prototype.AE=function(t){if(t instanceof It){var e=["array-contains","array-contains-any"],n=["in","array-contains-any"],r=e.indexOf(t.op)>=0,i=n.indexOf(t.op)>=0;if(t.ue()){var o=this.IE.jt();if(null!==o&&!o.isEqual(t.field))throw new p(l.INVALID_ARGUMENT,"Invalid query. All where filters with an inequality (<, <=, >, or >=) must be on the same field. But you have inequality filters on '"+o.toString()+"' and '"+t.field.toString()+"'");var s=this.IE.Kt();null!==s&&this.yE(t.field,s)}else if(i||r){var a=null;if(i&&(a=this.IE.ce(n)),null===a&&r&&(a=this.IE.ce(e)),null!=a)throw a===t.op?new p(l.INVALID_ARGUMENT,"Invalid query. You cannot use more than one '"+t.op.toString()+"' filter."):new p(l.INVALID_ARGUMENT,"Invalid query. You cannot use '"+t.op.toString()+"' filters with '"+a.toString()+"' filters.")}}},t.prototype.mE=function(t){if(null===this.IE.Kt()){var e=this.IE.jt();null!==e&&this.yE(e,t.field)}},t.prototype.yE=function(t,e){if(!e.isEqual(t))throw new p(l.INVALID_ARGUMENT,"Invalid query. You have a where filter with an inequality (<, <=, >, or >=) on field '"+t.toString()+"' and so you must also use '"+t.toString()+"' as your first Query.orderBy(), but your first Query.orderBy() is on field '"+e.toString()+"' instead.")},t}(),Hi=function(){function t(t,e,n,r){this.hE=t,this.bE=e,this.vE=n,this.aE=r,this.SE=null,this.DE=null,this.metadata=new Gi(n.hasPendingWrites,n.fromCache)}return Object.defineProperty(t.prototype,"docs",{get:function(){var t=[];return this.forEach((function(e){return t.push(e)})),t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"empty",{get:function(){return this.vE.docs.B()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"size",{get:function(){return this.vE.docs.size},enumerable:!0,configurable:!0}),t.prototype.forEach=function(t,e){var n=this;hr("QuerySnapshot.forEach",arguments,1,2),fr("QuerySnapshot.forEach","function",1,t),this.vE.docs.forEach((function(r){t.call(e,n.CE(r))}))},Object.defineProperty(t.prototype,"query",{get:function(){return new Ki(this.bE,this.hE,this.aE)},enumerable:!0,configurable:!0}),t.prototype.docChanges=function(t){t&&(wr("QuerySnapshot.docChanges",t,["includeMetadataChanges"]),dr("QuerySnapshot.docChanges","boolean","includeMetadataChanges",t.includeMetadataChanges));var e=!(!t||!t.includeMetadataChanges);if(e&&this.vE.hs)throw new p(l.INVALID_ARGUMENT,"To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");return this.SE&&this.DE===e||(this.SE=function(t,e,n,r){if(n.ss.B()){var i=0;return n.docChanges.map((function(e){var o=new zi(t,e.doc.key,e.doc,n.fromCache,n.ns.has(e.doc.key),r);return e.doc,{type:"added",doc:o,oldIndex:-1,newIndex:i++}}))}var o=n.ss;return n.docChanges.filter((function(t){return e||3!==t.type})).map((function(e){var i=new zi(t,e.doc.key,e.doc,n.fromCache,n.ns.has(e.doc.key),r),s=-1,a=-1;return 0!==e.type&&(s=o.indexOf(e.doc.key),o=o.delete(e.doc.key)),1!==e.type&&(a=(o=o.add(e.doc)).indexOf(e.doc.key)),{type:Zi(e.type),doc:i,oldIndex:s,newIndex:a}}))}(this.hE,e,this.vE,this.aE),this.DE=e),this.SE},t.prototype.isEqual=function(e){if(!(e instanceof t))throw Er("isEqual","QuerySnapshot",1,e);return this.hE===e.hE&&this.bE.isEqual(e.bE)&&this.vE.isEqual(e.vE)&&this.aE===e.aE},t.prototype.CE=function(t){return new zi(this.hE,t.key,t,this.metadata.fromCache,this.vE.ns.has(t.key),this.aE)},t}(),Yi=function(t){function e(e,n,r){var i=this;if((i=t.call(this,_t.Wt(e),n,r)||this).FE=e,e.length%2!=1)throw new p(l.INVALID_ARGUMENT,"Invalid collection reference. Collection references must have an odd number of segments, but "+e.j()+" has "+e.length);return i}return i.__extends(e,t),Object.defineProperty(e.prototype,"id",{get:function(){return this.IE.path.O()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"parent",{get:function(){var t=this.IE.path.L();return t.B()?null:new Bi(new A(t),this.firestore)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"path",{get:function(){return this.IE.path.j()},enumerable:!0,configurable:!0}),e.prototype.doc=function(t){if(hr("CollectionReference.doc",arguments,0,1),0===arguments.length&&(t=Ie.cn()),fr("CollectionReference.doc","non-empty string",1,t),""===t)throw new p(l.INVALID_ARGUMENT,"Document path must be a non-empty string");var e=_.K(t);return Bi.nE(this.IE.path.child(e),this.firestore,this.aE)},e.prototype.add=function(t){ur("CollectionReference.add",arguments,1),fr("CollectionReference.add","object",1,this.aE?this.aE.toFirestore(t):t);var e=this.doc();return e.set(t).then((function(){return e}))},e.prototype.withConverter=function(t){return new e(this.FE,this.firestore,t)},e}(Ki);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function Xi(t,e){if(void 0===e)return{merge:!1};if(wr(t,e,["merge","mergeFields"]),dr(t,"boolean","merge",e.merge),function(t,e,n,r,i){void 0!==r&&function(t,e,n,r,i){if(!(r instanceof Array))throw new p(l.INVALID_ARGUMENT,"Function "+t+"() requires its "+e+" option to be an array, but it was: "+mr(r));for(var o=0;o<r.length;++o)if(!i(r[o]))throw new p(l.INVALID_ARGUMENT,"Function "+t+"() requires all "+e+" elements to be a string or a FieldPath, but the value at index "+o+" was: "+mr(r[o]))}(t,"mergeFields",0,r,(function(t){return"string"==typeof t||t instanceof kr}))}(t,0,0,e.mergeFields),void 0!==e.mergeFields&&void 0!==e.merge)throw new p(l.INVALID_ARGUMENT,"Invalid options passed to function "+t+'(): You cannot specify both "merge" and "mergeFields".');return e}function Ji(t,e){return void 0===e?{}:(wr(t,e,["serverTimestamps"]),vr(t,0,"serverTimestamps",e.serverTimestamps,["estimate","previous","none"]),e)}function $i(t,e){lr(t,"object",1,e),e&&(wr(t,e,["source"]),vr(t,0,"source",e.source,["default","server","cache"]))}function Qi(t,e,n){if(e instanceof Bi){if(e.firestore!==n)throw new p(l.INVALID_ARGUMENT,"Provided document reference is from a different Firestore instance.");return e}throw Er(t,"DocumentReference",1,e)}function Zi(t){switch(t){case 0:return"added";case 2:case 3:return"modified";case 1:return"removed";default:return we()}}function to(t,e,n){var r;return t?(r=t.toFirestore(e),n="toFirestore() in "+n):r=e,[r,n]}function eo(t,e){function n(){var t="This constructor is private.";throw e&&(t+=" ",t+=e),new p(l.INVALID_ARGUMENT,t)}return n.prototype=t.prototype,Object.assign(n,t),n}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var no=eo(Ui,"Use firebase.firestore() instead."),ro=eo(Fi,"Use firebase.firestore().runTransaction() instead."),io=eo(qi,"Use firebase.firestore().batch() instead."),oo=eo(Bi,"Use firebase.firestore().doc() instead."),so=eo(Wi),ao=eo(zi),uo=eo(Ki),co=eo(Hi),ho=eo(Yi,"Use firebase.firestore().collection() instead."),fo=eo(function(){function t(){}return t.delete=function(){return ar("FieldValue.delete",arguments),new Pr},t.serverTimestamp=function(){return ar("FieldValue.serverTimestamp",arguments),new Cr},t.arrayUnion=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return cr("FieldValue.arrayUnion",arguments,1),new xr(t)},t.arrayRemove=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return cr("FieldValue.arrayRemove",arguments,1),new Rr(t)},t.increment=function(t){return fr("FieldValue.increment","number",1,t),ur("FieldValue.increment",arguments,1),new Lr(t)},t.prototype.isEqual=function(t){return this===t},t}(),"Use FieldValue.<field>() instead."),lo=eo(Sr,"Use Blob.fromUint8Array() or Blob.fromBase64String() instead."),po={Firestore:no,GeoPoint:jr,Timestamp:b,Blob:lo,Transaction:ro,WriteBatch:io,DocumentReference:oo,DocumentSnapshot:so,Query:uo,QueryDocumentSnapshot:ao,QuerySnapshot:co,CollectionReference:ho,FieldPath:kr,FieldValue:fo,setLogLevel:Ui.setLogLevel,CACHE_SIZE_UNLIMITED:Mi},vo=function(){function t(){}return t.prototype.B_=function(t){},t.prototype.mo=function(){},t}(),yo=function(){function t(){var t=this;this.NE=function(){return t.$E()},this.kE=function(){return t.LE()},this.ME=[],this.OE()}return t.prototype.B_=function(t){this.ME.push(t)},t.prototype.mo=function(){window.removeEventListener("online",this.NE),window.removeEventListener("offline",this.kE)},t.prototype.OE=function(){window.addEventListener("online",this.NE),window.addEventListener("offline",this.kE)},t.prototype.$E=function(){ge("ConnectivityMonitor","Network connectivity changed: AVAILABLE");for(var t=0,e=this.ME;t<e.length;t++)(0,e[t])(0)},t.prototype.LE=function(){ge("ConnectivityMonitor","Network connectivity changed: UNAVAILABLE");for(var t=0,e=this.ME;t<e.length;t++)(0,e[t])(1)},t.Gh=function(){return"undefined"!=typeof window&&void 0!==window.addEventListener&&void 0!==window.removeEventListener},t}(),go=function(){function t(t){this.xE=t.xE,this.BE=t.BE}return t.prototype.e_=function(t){this.qE=t},t.prototype.Yc=function(t){this.UE=t},t.prototype.onMessage=function(t){this.QE=t},t.prototype.close=function(){this.BE()},t.prototype.send=function(t){this.xE(t)},t.prototype.WE=function(){this.qE()},t.prototype.jE=function(t){this.UE(t)},t.prototype.KE=function(t){this.QE(t)},t}(),mo={BatchGetDocuments:"batchGet",Commit:"commit"},bo="gl-js/ fire/"+h,wo=function(){function t(t){this.ii=t.ii;var e=t.ssl?"https":"http";this.GE=e+"://"+t.host,this.forceLongPolling=t.forceLongPolling}return t.prototype.zE=function(t,e){if(e)for(var n in e.o)e.o.hasOwnProperty(n)&&(t[n]=e.o[n]);t["X-Goog-Api-Client"]=bo},t.prototype.d_=function(t,e,n){var r=this,i=this.HE(t);return new Promise((function(o,s){var a=new c.XhrIo;a.listenOnce(c.EventType.COMPLETE,(function(){try{switch(a.getLastErrorCode()){case c.ErrorCode.NO_ERROR:var e=a.getResponseJson();ge("Connection","XHR received:",JSON.stringify(e)),o(e);break;case c.ErrorCode.TIMEOUT:ge("Connection",'RPC "'+t+'" timed out'),s(new p(l.DEADLINE_EXCEEDED,"Request time out"));break;case c.ErrorCode.HTTP_ERROR:var n=a.getStatus();if(ge("Connection",'RPC "'+t+'" failed with status:',n,"response text:",a.getResponseText()),n>0){var r=a.getResponseJson().error;if(r&&r.status&&r.message){var i=function(t){var e=t.toLowerCase().replace("_","-");return Object.values(l).indexOf(e)>=0?e:l.UNKNOWN}(r.status);s(new p(i,r.message))}else s(new p(l.UNKNOWN,"Server responded with status "+a.getStatus()))}else ge("Connection",'RPC "'+t+'" failed'),s(new p(l.UNAVAILABLE,"Connection failed."));break;default:we()}}finally{ge("Connection",'RPC "'+t+'" completed.')}}));var u=Object.assign({},e);delete u.database;var h=JSON.stringify(u);ge("Connection","XHR sending: ",i+" "+h);var f={"Content-Type":"text/plain"};r.zE(f,n),a.send(i,"POST",h,f,15)}))},t.prototype.f_=function(t,e,n){return this.d_(t,e,n)},t.prototype.s_=function(t,e){var n=[this.GE,"/","google.firestore.v1.Firestore","/",t,"/channel"],r=c.createWebChannelTransport(),i={httpSessionIdParam:"gsessionid",initMessageHeaders:{},messageUrlParams:{database:"projects/"+this.ii.projectId+"/databases/"+this.ii.database},sendRawJson:!0,supportsCrossDomainXhr:!0,internalChannelParams:{forwardChannelRequestTimeoutMs:6e5},forceLongPolling:this.forceLongPolling};this.zE(i.initMessageHeaders,e),a.isMobileCordova()||a.isReactNative()||a.isElectron()||a.isIE()||a.isUWP()||a.isBrowserExtension()||(i.httpHeadersOverwriteParam="$httpHeaders");var o=n.join("");ge("Connection","Creating WebChannel: "+o+" "+i);var s=r.createWebChannel(o,i),u=!1,h=!1,f=new go({xE:function(t){h?ge("Connection","Not sending because WebChannel is closed:",t):(u||(ge("Connection","Opening WebChannel transport."),s.open(),u=!0),ge("Connection","WebChannel sending:",t),s.send(t))},BE:function(){return s.close()}}),d=function(t,e){s.listen(t,(function(t){try{e(t)}catch(t){setTimeout((function(){throw t}),0)}}))};return d(c.WebChannel.EventType.OPEN,(function(){h||ge("Connection","WebChannel transport opened.")})),d(c.WebChannel.EventType.CLOSE,(function(){h||(h=!0,ge("Connection","WebChannel transport closed"),f.jE())})),d(c.WebChannel.EventType.ERROR,(function(t){h||(h=!0,ge("Connection","WebChannel transport errored:",t),f.jE(new p(l.UNAVAILABLE,"The operation could not be completed")))})),d(c.WebChannel.EventType.MESSAGE,(function(t){var e;if(!h){var n=t.data[0];Ee(!!n);var r=n,i=r.error||(null===(e=r[0])||void 0===e?void 0:e.error);if(i){ge("Connection","WebChannel received error:",i);var o=i.status,a=function(t){var e=vt[t];if(void 0!==e)return Rt(e)}(o),u=i.message;void 0===a&&(a=l.INTERNAL,u="Unknown error status: "+o+" with message "+i.message),h=!0,f.jE(new p(a,u)),s.close()}else ge("Connection","WebChannel received:",n),f.KE(n)}})),setTimeout((function(){f.WE()}),0),f},t.prototype.HE=function(t){var e=mo[t];return this.GE+"/v1/projects/"+this.ii.projectId+"/databases/"+this.ii.database+"/documents:"+e},t}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function Eo(t){!function(t,e){t.INTERNAL.registerComponent(new u.Component("firestore",(function(t){return function(t,e){return new Ui(t,e,new Ci)}(t.getProvider("app").getImmediate(),t.getProvider("auth-internal"))}),"PUBLIC").setServiceProps(Object.assign({},po)))}(t),t.registerVersion("@firebase/firestore","1.14.6")
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */}pe.an(new(function(){function t(){this.ac="undefined"!=typeof atob}return Object.defineProperty(t.prototype,"document",{get:function(){return"undefined"!=typeof document?document:null},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"window",{get:function(){return"undefined"!=typeof window?window:null},enumerable:!0,configurable:!0}),t.prototype.yT=function(t){return Promise.resolve(new wo(t))},t.prototype.AT=function(){return yo.Gh()?new yo:new vo},t.prototype.bc=function(t){return new fe(t,{hi:!0})},t.prototype.un=function(t){return JSON.stringify(t)},t.prototype.atob=function(t){return atob(t)},t.prototype.btoa=function(t){return btoa(t)},t.prototype._n=function(t){var e="undefined"!=typeof self&&(self.crypto||self.msCrypto),n=new Uint8Array(t);if(e)e.getRandomValues(n);else for(var r=0;r<t;r++)n[r]=Math.floor(256*Math.random());return n},t}())),Eo(o),e.__PRIVATE_registerFirestore=Eo},function(t,e,n){"use strict";n.r(e),n.d(e,"__extends",(function(){return i})),n.d(e,"__assign",(function(){return o})),n.d(e,"__rest",(function(){return s})),n.d(e,"__decorate",(function(){return a})),n.d(e,"__param",(function(){return u})),n.d(e,"__metadata",(function(){return c})),n.d(e,"__awaiter",(function(){return h})),n.d(e,"__generator",(function(){return f})),n.d(e,"__exportStar",(function(){return l})),n.d(e,"__values",(function(){return p})),n.d(e,"__read",(function(){return d})),n.d(e,"__spread",(function(){return v})),n.d(e,"__spreadArrays",(function(){return y})),n.d(e,"__await",(function(){return g})),n.d(e,"__asyncGenerator",(function(){return m})),n.d(e,"__asyncDelegator",(function(){return b})),n.d(e,"__asyncValues",(function(){return w})),n.d(e,"__makeTemplateObject",(function(){return E})),n.d(e,"__importStar",(function(){return _})),n.d(e,"__importDefault",(function(){return I})),n.d(e,"__classPrivateFieldGet",(function(){return T})),n.d(e,"__classPrivateFieldSet",(function(){return A}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var o=function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};function s(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n}function a(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s}function u(t,e){return function(n,r){e(n,r,t)}}function c(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function h(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}u((r=r.apply(t,e||[])).next())}))}function f(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}function l(t,e){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}function p(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function d(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s}function v(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(d(arguments[e]));return t}function y(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,i++)r[i]=o[s];return r}function g(t){return this instanceof g?(this.v=t,this):new g(t)}function m(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},s("next"),s("throw"),s("return"),r[Symbol.asyncIterator]=function(){return this},r;function s(t){i[t]&&(r[t]=function(e){return new Promise((function(n,r){o.push([t,e,n,r])>1||a(t,e)}))})}function a(t,e){try{(n=i[t](e)).value instanceof g?Promise.resolve(n.value.v).then(u,c):h(o[0][2],n)}catch(t){h(o[0][3],t)}var n}function u(t){a("next",t)}function c(t){a("throw",t)}function h(t,e){t(e),o.shift(),o.length&&a(o[0][0],o[0][1])}}function b(t){var e,n;return e={},r("next"),r("throw",(function(t){throw t})),r("return"),e[Symbol.iterator]=function(){return this},e;function r(r,i){e[r]=t[r]?function(e){return(n=!n)?{value:g(t[r](e)),done:"return"===r}:i?i(e):e}:i}}function w(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=p(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,i){(function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)})(r,i,(e=t[n](e)).done,e.value)}))}}}function E(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}function _(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}function I(t){return t&&t.__esModule?t:{default:t}}function T(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)}function A(t,e,n){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,n),n}},function(t,e,n){"use strict";n.r(e),function(t){
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
function r(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}n.d(e,"ErrorCode",(function(){return $n})),n.d(e,"EventType",(function(){return Qn})),n.d(e,"WebChannel",(function(){return Zn})),n.d(e,"XhrIo",(function(){return tr})),n.d(e,"createWebChannelTransport",(function(){return Jn}));var i,o="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==t?t:"undefined"!=typeof self?self:{},s=s||{},a=o||self;function u(){}function c(t){var e=typeof t;if("object"==e){if(!t)return"null";if(t instanceof Array)return"array";if(t instanceof Object)return e;var n=Object.prototype.toString.call(t);if("[object Window]"==n)return"object";if("[object Array]"==n||"number"==typeof t.length&&void 0!==t.splice&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("splice"))return"array";if("[object Function]"==n||void 0!==t.call&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("call"))return"function"}else if("function"==e&&void 0===t.call)return"object";return e}function h(t){var e=c(t);return"array"==e||"object"==e&&"number"==typeof t.length}function f(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}var l="closure_uid_"+(1e9*Math.random()>>>0),p=0;function d(t,e,n){return t.call.apply(t.bind,arguments)}function v(t,e,n){if(!t)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function y(t,e,n){return(y=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?d:v).apply(null,arguments)}function g(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}var m=Date.now||function(){return+new Date};function b(t,e){function n(){}n.prototype=e.prototype,t.M=e.prototype,t.prototype=new n,t.prototype.constructor=t}function w(){this.j=this.j,this.i=this.i}w.prototype.j=!1,w.prototype.da=function(){if(!this.j&&(this.j=!0,this.C(),0))(function(t){Object.prototype.hasOwnProperty.call(t,l)&&t[l]||(t[l]=++p)})(this)},w.prototype.C=function(){if(this.i)for(;this.i.length;)this.i.shift()()};var E=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if("string"==typeof t)return"string"!=typeof e||1!=e.length?-1:t.indexOf(e,0);for(var n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},_=Array.prototype.forEach?function(t,e,n){Array.prototype.forEach.call(t,e,n)}:function(t,e,n){for(var r=t.length,i="string"==typeof t?t.split(""):t,o=0;o<r;o++)o in i&&e.call(n,i[o],o,t)};function I(t){return Array.prototype.concat.apply([],arguments)}function T(t){var e=t.length;if(0<e){for(var n=Array(e),r=0;r<e;r++)n[r]=t[r];return n}return[]}function A(t){return/^[\s\xa0]*$/.test(t)}var N,S=String.prototype.trim?function(t){return t.trim()}:function(t){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(t)[1]};function k(t,e){return-1!=t.indexOf(e)}function O(t,e){return t<e?-1:t>e?1:0}t:{var D=a.navigator;if(D){var P=D.userAgent;if(P){N=P;break t}}N=""}function C(t,e,n){for(var r in t)e.call(n,t[r],r,t)}function x(t){var e={};for(var n in t)e[n]=t[n];return e}var R="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function L(t,e){for(var n,r,i=1;i<arguments.length;i++){for(n in r=arguments[i])t[n]=r[n];for(var o=0;o<R.length;o++)n=R[o],Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}}function j(t){return j[" "](t),t}j[" "]=u;var M,V,U=k(N,"Opera"),F=k(N,"Trident")||k(N,"MSIE"),q=k(N,"Edge"),B=q||F,G=k(N,"Gecko")&&!(k(N.toLowerCase(),"webkit")&&!k(N,"Edge"))&&!(k(N,"Trident")||k(N,"MSIE"))&&!k(N,"Edge"),W=k(N.toLowerCase(),"webkit")&&!k(N,"Edge");function z(){var t=a.document;return t?t.documentMode:void 0}t:{var K="",H=(V=N,G?/rv:([^\);]+)(\)|;)/.exec(V):q?/Edge\/([\d\.]+)/.exec(V):F?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(V):W?/WebKit\/(\S+)/.exec(V):U?/(?:Version)[ \/]?(\S+)/.exec(V):void 0);if(H&&(K=H?H[1]:""),F){var Y=z();if(null!=Y&&Y>parseFloat(K)){M=String(Y);break t}}M=K}var X,J={};function $(t){return function(t,e){var n=J;return Object.prototype.hasOwnProperty.call(n,t)?n[t]:n[t]=e(t)}(t,(function(){for(var e=0,n=S(String(M)).split("."),r=S(String(t)).split("."),i=Math.max(n.length,r.length),o=0;0==e&&o<i;o++){var s=n[o]||"",a=r[o]||"";do{if(s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],0==s[0].length&&0==a[0].length)break;e=O(0==s[1].length?0:parseInt(s[1],10),0==a[1].length?0:parseInt(a[1],10))||O(0==s[2].length,0==a[2].length)||O(s[2],a[2]),s=s[3],a=a[3]}while(0==e)}return 0<=e}))}if(a.document&&F){var Q=z();X=Q||(parseInt(M,10)||void 0)}else X=void 0;var Z=X,tt=!F||9<=Number(Z),et=F&&!$("9"),nt=function(){if(!a.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});try{a.addEventListener("test",u,e),a.removeEventListener("test",u,e)}catch(t){}return t}();function rt(t,e){this.type=t,this.a=this.target=e,this.defaultPrevented=!1}function it(t,e){if(rt.call(this,t?t.type:""),this.relatedTarget=this.a=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.pointerId=0,this.pointerType="",this.c=null,t){var n=this.type=t.type,r=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.a=e,e=t.relatedTarget){if(G){t:{try{j(e.nodeName);var i=!0;break t}catch(t){}i=!1}i||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,r?(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0):(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType="string"==typeof t.pointerType?t.pointerType:ot[t.pointerType]||"",this.c=t,t.defaultPrevented&&this.b()}}rt.prototype.b=function(){this.defaultPrevented=!0},b(it,rt);var ot={2:"touch",3:"pen",4:"mouse"};it.prototype.b=function(){it.M.b.call(this);var t=this.c;if(t.preventDefault)t.preventDefault();else if(t.returnValue=!1,et)try{(t.ctrlKey||112<=t.keyCode&&123>=t.keyCode)&&(t.keyCode=-1)}catch(t){}};var st="closure_listenable_"+(1e6*Math.random()|0),at=0;function ut(t,e,n,r,i){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!r,this.aa=i,this.key=++at,this.V=this.X=!1}function ct(t){t.V=!0,t.listener=null,t.proxy=null,t.src=null,t.aa=null}function ht(t){this.src=t,this.a={},this.b=0}function ft(t,e){var n=e.type;if(n in t.a){var r,i=t.a[n],o=E(i,e);(r=0<=o)&&Array.prototype.splice.call(i,o,1),r&&(ct(e),0==t.a[n].length&&(delete t.a[n],t.b--))}}function lt(t,e,n,r){for(var i=0;i<t.length;++i){var o=t[i];if(!o.V&&o.listener==e&&o.capture==!!n&&o.aa==r)return i}return-1}ht.prototype.add=function(t,e,n,r,i){var o=t.toString();(t=this.a[o])||(t=this.a[o]=[],this.b++);var s=lt(t,e,r,i);return-1<s?(e=t[s],n||(e.X=!1)):((e=new ut(e,this.src,o,!!r,i)).X=n,t.push(e)),e};var pt="closure_lm_"+(1e6*Math.random()|0),dt={};function vt(t,e,n,r,i){if(r&&r.once)return function t(e,n,r,i,o){if(Array.isArray(n)){for(var s=0;s<n.length;s++)t(e,n[s],r,i,o);return null}return r=It(r),e&&e[st]?e.sa(n,r,f(i)?!!i.capture:!!i,o):yt(e,n,r,!0,i,o)}(t,e,n,r,i);if(Array.isArray(e)){for(var o=0;o<e.length;o++)vt(t,e[o],n,r,i);return null}return n=It(n),t&&t[st]?t.ra(e,n,f(r)?!!r.capture:!!r,i):yt(t,e,n,!1,r,i)}function yt(t,e,n,r,i,o){if(!e)throw Error("Invalid event type");var s=f(i)?!!i.capture:!!i;if(s&&!tt)return null;var a=Et(t);if(a||(t[pt]=a=new ht(t)),(n=a.add(e,n,r,s,o)).proxy)return n;if(r=function(){var t=wt,e=tt?function(n){return t.call(e.src,e.listener,n)}:function(n){if(!(n=t.call(e.src,e.listener,n)))return n};return e}(),n.proxy=r,r.src=t,r.listener=n,t.addEventListener)nt||(i=s),void 0===i&&(i=!1),t.addEventListener(e.toString(),r,i);else if(t.attachEvent)t.attachEvent(mt(e.toString()),r);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(r)}return n}function gt(t){if("number"!=typeof t&&t&&!t.V){var e=t.src;if(e&&e[st])ft(e.c,t);else{var n=t.type,r=t.proxy;e.removeEventListener?e.removeEventListener(n,r,t.capture):e.detachEvent?e.detachEvent(mt(n),r):e.addListener&&e.removeListener&&e.removeListener(r),(n=Et(e))?(ft(n,t),0==n.b&&(n.src=null,e[pt]=null)):ct(t)}}}function mt(t){return t in dt?dt[t]:dt[t]="on"+t}function bt(t,e){var n=t.listener,r=t.aa||t.src;return t.X&&gt(t),n.call(r,e)}function wt(t,e){if(t.V)return!0;if(!tt){if(!e)t:{e=["window","event"];for(var n=a,r=0;r<e.length;r++)if(null==(n=n[e[r]])){e=null;break t}e=n}return bt(t,e=new it(e,this))}return bt(t,new it(e,this))}function Et(t){return(t=t[pt])instanceof ht?t:null}var _t="__closure_events_fn_"+(1e9*Math.random()>>>0);function It(t){return"function"==c(t)?t:(t[_t]||(t[_t]=function(e){return t.handleEvent(e)}),t[_t])}function Tt(){w.call(this),this.c=new ht(this),this.J=this,this.A=null}function At(t,e,n,r){if(!(e=t.c.a[String(e)]))return!0;e=e.concat();for(var i=!0,o=0;o<e.length;++o){var s=e[o];if(s&&!s.V&&s.capture==n){var a=s.listener,u=s.aa||s.src;s.X&&ft(t.c,s),i=!1!==a.call(u,r)&&i}}return i&&!r.defaultPrevented}b(Tt,w),Tt.prototype[st]=!0,(i=Tt.prototype).addEventListener=function(t,e,n,r){vt(this,t,e,n,r)},i.removeEventListener=function(t,e,n,r){!function t(e,n,r,i,o){if(Array.isArray(n))for(var s=0;s<n.length;s++)t(e,n[s],r,i,o);else i=f(i)?!!i.capture:!!i,r=It(r),e&&e[st]?(e=e.c,(n=String(n).toString())in e.a&&(-1<(r=lt(s=e.a[n],r,i,o))&&(ct(s[r]),Array.prototype.splice.call(s,r,1),0==s.length&&(delete e.a[n],e.b--)))):e&&(e=Et(e))&&(n=e.a[n.toString()],e=-1,n&&(e=lt(n,r,i,o)),(r=-1<e?n[e]:null)&&gt(r))}(this,t,e,n,r)},i.dispatchEvent=function(t){var e,n=this.A;if(n)for(e=[];n;n=n.A)e.push(n);n=this.J;var r=t.type||t;if("string"==typeof t)t=new rt(t,n);else if(t instanceof rt)t.target=t.target||n;else{var i=t;L(t=new rt(r,n),i)}if(i=!0,e)for(var o=e.length-1;0<=o;o--){var s=t.a=e[o];i=At(s,r,!0,t)&&i}if(i=At(s=t.a=n,r,!0,t)&&i,i=At(s,r,!1,t)&&i,e)for(o=0;o<e.length;o++)i=At(s=t.a=e[o],r,!1,t)&&i;return i},i.C=function(){if(Tt.M.C.call(this),this.c){var t,e=this.c;for(t in e.a){for(var n=e.a[t],r=0;r<n.length;r++)ct(n[r]);delete e.a[t],e.b--}}this.A=null},i.ra=function(t,e,n,r){return this.c.add(String(t),e,!1,n,r)},i.sa=function(t,e,n,r){return this.c.add(String(t),e,!0,n,r)};var Nt=a.JSON.stringify;function St(){this.b=this.a=null}var kt,Ot=new(function(){function t(t,e,n){this.f=n,this.c=t,this.g=e,this.b=0,this.a=null}return t.prototype.get=function(){var t;return 0<this.b?(this.b--,t=this.a,this.a=t.next,t.next=null):t=this.c(),t},t}())((function(){return new Pt}),(function(t){t.reset()}),100);function Dt(){var t=Lt,e=null;return t.a&&(e=t.a,t.a=t.a.next,t.a||(t.b=null),e.next=null),e}function Pt(){this.next=this.b=this.a=null}function Ct(t){a.setTimeout((function(){throw t}),0)}function xt(t,e){kt||function(){var t=a.Promise.resolve(void 0);kt=function(){t.then(jt)}}(),Rt||(kt(),Rt=!0),Lt.add(t,e)}St.prototype.add=function(t,e){var n=Ot.get();n.set(t,e),this.b?this.b.next=n:this.a=n,this.b=n},Pt.prototype.set=function(t,e){this.a=t,this.b=e,this.next=null},Pt.prototype.reset=function(){this.next=this.b=this.a=null};var Rt=!1,Lt=new St;function jt(){for(var t;t=Dt();){try{t.a.call(t.b)}catch(t){Ct(t)}var e=Ot;e.g(t),e.b<e.f&&(e.b++,t.next=e.a,e.a=t)}Rt=!1}function Mt(t,e){Tt.call(this),this.b=t||1,this.a=e||a,this.f=y(this.Ua,this),this.g=m()}function Vt(t){t.Z=!1,t.L&&(t.a.clearTimeout(t.L),t.L=null)}function Ut(t,e,n){if("function"==c(t))n&&(t=y(t,n));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=y(t.handleEvent,t)}return 2147483647<Number(e)?-1:a.setTimeout(t,e||0)}function Ft(t,e,n){w.call(this),this.f=null!=n?y(t,n):t,this.c=e,this.b=y(this.Pa,this),this.a=[]}function qt(t){t.T=Ut(t.b,t.c),t.f.apply(null,t.a)}function Bt(t){w.call(this),this.b=t,this.a={}}b(Mt,Tt),(i=Mt.prototype).Z=!1,i.L=null,i.Ua=function(){if(this.Z){var t=m()-this.g;0<t&&t<.8*this.b?this.L=this.a.setTimeout(this.f,this.b-t):(this.L&&(this.a.clearTimeout(this.L),this.L=null),this.dispatchEvent("tick"),this.Z&&(Vt(this),this.start()))}},i.start=function(){this.Z=!0,this.L||(this.L=this.a.setTimeout(this.f,this.b),this.g=m())},i.C=function(){Mt.M.C.call(this),Vt(this),delete this.a},b(Ft,w),(i=Ft.prototype).ba=!1,i.T=null,i.Ia=function(t){this.a=arguments,this.T?this.ba=!0:qt(this)},i.C=function(){Ft.M.C.call(this),this.T&&(a.clearTimeout(this.T),this.T=null,this.ba=!1,this.a=[])},i.Pa=function(){this.T=null,this.ba&&(this.ba=!1,qt(this))},b(Bt,w);var Gt=[];function Wt(t,e,n,r){Array.isArray(n)||(n&&(Gt[0]=n.toString()),n=Gt);for(var i=0;i<n.length;i++){var o=vt(e,n[i],r||t.handleEvent,!1,t.b||t);if(!o)break;t.a[o.key]=o}}function zt(t){C(t.a,(function(t,e){this.a.hasOwnProperty(e)&&gt(t)}),t),t.a={}}function Kt(){}Bt.prototype.C=function(){Bt.M.C.call(this),zt(this)},Bt.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented")};var Ht=null;function Yt(){return Ht=Ht||new Tt}function Xt(t){rt.call(this,"serverreachability",t)}function Jt(t){var e=Yt();e.dispatchEvent(new Xt(e,t))}function $t(t){rt.call(this,"statevent",t)}function Qt(t){var e=Yt();e.dispatchEvent(new $t(e,t))}function Zt(t){rt.call(this,"timingevent",t)}function te(t,e){if("function"!=c(t))throw Error("Fn must not be null and must be a function");return a.setTimeout((function(){t()}),e)}b(Xt,rt),b($t,rt),b(Zt,rt);var ee={NO_ERROR:0,Va:1,bb:2,ab:3,Ya:4,$a:5,cb:6,za:7,TIMEOUT:8,gb:9},ne={Xa:"complete",kb:"success",Aa:"error",za:"abort",ib:"ready",jb:"readystatechange",TIMEOUT:"timeout",eb:"incrementaldata",hb:"progress",Za:"downloadprogress",lb:"uploadprogress"};function re(){}function ie(t){var e;return(e=t.a)||(e=t.a={}),e}function oe(){}re.prototype.a=null;var se,ae={OPEN:"a",Wa:"b",Aa:"c",fb:"d"};function ue(){rt.call(this,"d")}function ce(){rt.call(this,"c")}function he(){}function fe(t,e,n){this.g=t,this.W=e,this.U=n||1,this.G=new Bt(this),this.N=le,t=B?125:void 0,this.O=new Mt(t),this.m=null,this.b=!1,this.j=this.A=this.f=this.B=this.s=this.P=this.h=null,this.i=[],this.a=null,this.w=0,this.c=this.v=null,this.H=-1,this.l=!1,this.J=0,this.D=null,this.o=this.R=this.F=!1}b(ue,rt),b(ce,rt),b(he,re),se=new he;var le=45e3,pe={},de={};function ve(t,e,n){t.B=1,t.f=Me(Pe(e)),t.j=n,t.F=!0,ye(t,null)}function ye(t,e){t.s=m(),be(t),t.A=Pe(t.f);var n=t.A,r=t.U;Array.isArray(r)||(r=[String(r)]),Je(n.b,"t",r),t.w=0,t.a=Bn(t.g,t.g.w?e:null),0<t.J&&(t.D=new Ft(y(t.ya,t,t.a),t.J)),Wt(t.G,t.a,"readystatechange",t.Sa),e=t.m?x(t.m):{},t.j?(t.v||(t.v="POST"),e["Content-Type"]="application/x-www-form-urlencoded",t.a.$(t.A,t.v,t.j,e)):(t.v="GET",t.a.$(t.A,t.v,null,e)),Jt(1)}function ge(t,e,n){for(var r=!0;!t.l&&t.w<n.length;){var i=me(t,n);if(i==de){4==e&&(t.c=4,Qt(14),r=!1);break}if(i==pe){t.c=4,Qt(15),r=!1;break}Te(t,i)}4==e&&0==n.length&&(t.c=1,Qt(16),r=!1),t.b=t.b&&r,r||(Ie(t),_e(t))}function me(t,e){var n=t.w,r=e.indexOf("\n",n);return-1==r?de:(n=Number(e.substring(n,r)),isNaN(n)?pe:(r+=1)+n>e.length?de:(e=e.substr(r,n),t.w=r+n,e))}function be(t){t.P=m()+t.N,we(t,t.N)}function we(t,e){if(null!=t.h)throw Error("WatchDog timer not null");t.h=te(y(t.Qa,t),e)}function Ee(t){t.h&&(a.clearTimeout(t.h),t.h=null)}function _e(t){0==t.g.u||t.l||Mn(t.g,t)}function Ie(t){Ee(t);var e=t.D;e&&"function"==typeof e.da&&e.da(),t.D=null,Vt(t.O),zt(t.G),t.a&&(e=t.a,t.a=null,e.abort(),e.da())}function Te(t,e){try{var n=t.g;if(0!=n.u&&(n.a==t||rn(n.b,t)))if(n.A=t.H,!t.o&&rn(n.b,t)&&3==n.u){try{var r=n.ja.a.parse(e)}catch(t){r=null}if(Array.isArray(r)&&3==r.length){var i=r;if(0==i[0]){t:if(!n.i){if(n.a){if(!(n.a.s+3e3<t.s))break t;jn(n),n.a.cancel(),n.a=null}Ln(n),Qt(18)}}else n.ia=i[1],0<n.ia-n.G&&37500>i[2]&&n.U&&0==n.m&&!n.l&&(n.l=te(y(n.Na,n),6e3));if(1>=nn(n.b)&&n.O){try{n.O()}catch(t){}n.O=void 0}}else Un(n,11)}else if((t.o||n.a==t)&&jn(n),!A(e))for(e=r=n.ja.a.parse(e),r=0;r<e.length;r++)if(i=e[r],n.G=i[0],i=i[1],2==n.u)if("c"==i[0]){n.B=i[1],n.R=i[2];var o=i[3];null!=o&&(n.oa=o);var s=i[5];null!=s&&"number"==typeof s&&0<s&&(n.D=1.5*s);var a=n,u=t.a;if(u){var c=u.a?u.a.getResponseHeader("X-Client-Wire-Protocol"):null;if(c){var h=a.b;!h.a&&(k(c,"spdy")||k(c,"quic")||k(c,"h2"))&&(h.f=h.g,h.a=new Set,h.b&&(on(h,h.b),h.b=null))}if(a.s){var f=u.a?u.a.getResponseHeader("X-HTTP-Session-Id"):null;f&&(a.ha=f,je(a.v,a.s,f))}}n.u=3,n.c&&n.c.na();var l=t;if((a=n).ea=qn(a,a.w?a.R:null,a.P),l.o){sn(a.b,l);var p=l,d=a.D;d&&p.setTimeout(d),p.h&&(Ee(p),be(p)),a.a=l}else Rn(a);0<n.f.length&&Dn(n)}else"stop"!=i[0]&&"close"!=i[0]||Un(n,7);else 3==n.u&&("stop"==i[0]||"close"==i[0]?"stop"==i[0]?Un(n,7):Sn(n):"noop"!=i[0]&&n.c&&n.c.ma(i),n.m=0);Jt(4)}catch(t){}}function Ae(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(h(t)||"string"==typeof t)_(t,e,void 0);else{if(t.K&&"function"==typeof t.K)var n=t.K();else if(t.I&&"function"==typeof t.I)n=void 0;else if(h(t)||"string"==typeof t){n=[];for(var r=t.length,i=0;i<r;i++)n.push(i)}else for(i in n=[],r=0,t)n[r++]=i;i=(r=function(t){if(t.I&&"function"==typeof t.I)return t.I();if("string"==typeof t)return t.split("");if(h(t)){for(var e=[],n=t.length,r=0;r<n;r++)e.push(t[r]);return e}for(r in e=[],n=0,t)e[n++]=t[r];return e}(t)).length;for(var o=0;o<i;o++)e.call(void 0,r[o],n&&n[o],t)}}function Ne(t,e){this.b={},this.a=[],this.c=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else if(t)if(t instanceof Ne)for(n=t.K(),r=0;r<n.length;r++)this.set(n[r],t.get(n[r]));else for(r in t)this.set(r,t[r])}function Se(t){if(t.c!=t.a.length){for(var e=0,n=0;e<t.a.length;){var r=t.a[e];ke(t.b,r)&&(t.a[n++]=r),e++}t.a.length=n}if(t.c!=t.a.length){var i={};for(n=e=0;e<t.a.length;)ke(i,r=t.a[e])||(t.a[n++]=r,i[r]=1),e++;t.a.length=n}}function ke(t,e){return Object.prototype.hasOwnProperty.call(t,e)}(i=fe.prototype).setTimeout=function(t){this.N=t},i.Sa=function(t){t=t.target;var e=this.D;e&&3==In(t)?e.Ia():this.ya(t)},i.ya=function(t){try{if(t==this.a)t:{var e=In(this.a),n=this.a.qa(),r=this.a.S();if(!(3>e||3==e&&!B&&!this.a.Y())){this.l||4!=e||7==n||Jt(8==n||0>=r?3:2),Ee(this);var i=this.a.S();this.H=i;var o=this.a.Y();if(this.b=200==i){if(this.R&&!this.o){e:{if(this.a){var s,a=this.a;if((s=a.a?a.a.getResponseHeader("X-HTTP-Initial-Response"):null)&&!A(s)){var u=s;break e}}u=null}if(!u){this.b=!1,this.c=3,Qt(12),Ie(this),_e(this);break t}this.o=!0,Te(this,u)}this.F?(ge(this,e,o),B&&this.b&&3==e&&(Wt(this.G,this.O,"tick",this.Ra),this.O.start())):Te(this,o),4==e&&Ie(this),this.b&&!this.l&&(4==e?Mn(this.g,this):(this.b=!1,be(this)))}else 400==i&&0<o.indexOf("Unknown SID")?(this.c=3,Qt(12)):(this.c=0,Qt(13)),Ie(this),_e(this)}}}catch(t){}},i.Ra=function(){if(this.a){var t=In(this.a),e=this.a.Y();this.w<e.length&&(Ee(this),ge(this,t,e),this.b&&4!=t&&be(this))}},i.cancel=function(){this.l=!0,Ie(this)},i.Qa=function(){this.h=null;var t=m();0<=t-this.P?(2!=this.B&&(Jt(3),Qt(17)),Ie(this),this.c=2,_e(this)):we(this,this.P-t)},(i=Ne.prototype).I=function(){Se(this);for(var t=[],e=0;e<this.a.length;e++)t.push(this.b[this.a[e]]);return t},i.K=function(){return Se(this),this.a.concat()},i.get=function(t,e){return ke(this.b,t)?this.b[t]:e},i.set=function(t,e){ke(this.b,t)||(this.c++,this.a.push(t)),this.b[t]=e},i.forEach=function(t,e){for(var n=this.K(),r=0;r<n.length;r++){var i=n[r],o=this.get(i);t.call(e,o,i,this)}};var Oe=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function De(t,e){if(this.c=this.j=this.f="",this.h=null,this.i=this.g="",this.a=!1,t instanceof De){this.a=void 0!==e?e:t.a,Ce(this,t.f),this.j=t.j,xe(this,t.c),Re(this,t.h),this.g=t.g,e=t.b;var n=new Ke;n.c=e.c,e.a&&(n.a=new Ne(e.a),n.b=e.b),Le(this,n),this.i=t.i}else t&&(n=String(t).match(Oe))?(this.a=!!e,Ce(this,n[1]||"",!0),this.j=Ve(n[2]||""),xe(this,n[3]||"",!0),Re(this,n[4]),this.g=Ve(n[5]||"",!0),Le(this,n[6]||"",!0),this.i=Ve(n[7]||"")):(this.a=!!e,this.b=new Ke(null,this.a))}function Pe(t){return new De(t)}function Ce(t,e,n){t.f=n?Ve(e,!0):e,t.f&&(t.f=t.f.replace(/:$/,""))}function xe(t,e,n){t.c=n?Ve(e,!0):e}function Re(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.h=e}else t.h=null}function Le(t,e,n){e instanceof Ke?(t.b=e,function(t,e){e&&!t.f&&(He(t),t.c=null,t.a.forEach((function(t,e){var n=e.toLowerCase();e!=n&&(Ye(this,e),Je(this,n,t))}),t)),t.f=e}(t.b,t.a)):(n||(e=Ue(e,We)),t.b=new Ke(e,t.a))}function je(t,e,n){t.b.set(e,n)}function Me(t){return je(t,"zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^m()).toString(36)),t}function Ve(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function Ue(t,e,n){return"string"==typeof t?(t=encodeURI(t).replace(e,Fe),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function Fe(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}De.prototype.toString=function(){var t=[],e=this.f;e&&t.push(Ue(e,qe,!0),":");var n=this.c;return(n||"file"==e)&&(t.push("//"),(e=this.j)&&t.push(Ue(e,qe,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.h)&&t.push(":",String(n))),(n=this.g)&&(this.c&&"/"!=n.charAt(0)&&t.push("/"),t.push(Ue(n,"/"==n.charAt(0)?Ge:Be,!0))),(n=this.b.toString())&&t.push("?",n),(n=this.i)&&t.push("#",Ue(n,ze)),t.join("")};var qe=/[#\/\?@]/g,Be=/[#\?:]/g,Ge=/[#\?]/g,We=/[#\?@]/g,ze=/#/g;function Ke(t,e){this.b=this.a=null,this.c=t||null,this.f=!!e}function He(t){t.a||(t.a=new Ne,t.b=0,t.c&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var r=t[n].indexOf("="),i=null;if(0<=r){var o=t[n].substring(0,r);i=t[n].substring(r+1)}else o=t[n];e(o,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(t.c,(function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)})))}function Ye(t,e){He(t),e=$e(t,e),ke(t.a.b,e)&&(t.c=null,t.b-=t.a.get(e).length,ke((t=t.a).b,e)&&(delete t.b[e],t.c--,t.a.length>2*t.c&&Se(t)))}function Xe(t,e){return He(t),e=$e(t,e),ke(t.a.b,e)}function Je(t,e,n){Ye(t,e),0<n.length&&(t.c=null,t.a.set($e(t,e),T(n)),t.b+=n.length)}function $e(t,e){return e=String(e),t.f&&(e=e.toLowerCase()),e}function Qe(t,e){this.b=t,this.a=e}function Ze(t){this.g=t||tn,a.PerformanceNavigationTiming?t=0<(t=a.performance.getEntriesByType("navigation")).length&&("hq"==t[0].nextHopProtocol||"h2"==t[0].nextHopProtocol):t=!!(a.ca&&a.ca.ua&&a.ca.ua()&&a.ca.ua().mb),this.f=t?this.g:1,this.a=null,1<this.f&&(this.a=new Set),this.b=null,this.c=[]}(i=Ke.prototype).add=function(t,e){He(this),this.c=null,t=$e(this,t);var n=this.a.get(t);return n||this.a.set(t,n=[]),n.push(e),this.b+=1,this},i.forEach=function(t,e){He(this),this.a.forEach((function(n,r){_(n,(function(n){t.call(e,n,r,this)}),this)}),this)},i.K=function(){He(this);for(var t=this.a.I(),e=this.a.K(),n=[],r=0;r<e.length;r++)for(var i=t[r],o=0;o<i.length;o++)n.push(e[r]);return n},i.I=function(t){He(this);var e=[];if("string"==typeof t)Xe(this,t)&&(e=I(e,this.a.get($e(this,t))));else{t=this.a.I();for(var n=0;n<t.length;n++)e=I(e,t[n])}return e},i.set=function(t,e){return He(this),this.c=null,Xe(this,t=$e(this,t))&&(this.b-=this.a.get(t).length),this.a.set(t,[e]),this.b+=1,this},i.get=function(t,e){return t&&0<(t=this.I(t)).length?String(t[0]):e},i.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var t=[],e=this.a.K(),n=0;n<e.length;n++){var r=e[n],i=encodeURIComponent(String(r));r=this.I(r);for(var o=0;o<r.length;o++){var s=i;""!==r[o]&&(s+="="+encodeURIComponent(String(r[o]))),t.push(s)}}return this.c=t.join("&")};var tn=10;function en(t){return!!t.b||!!t.a&&t.a.size>=t.f}function nn(t){return t.b?1:t.a?t.a.size:0}function rn(t,e){return t.b?t.b==e:!!t.a&&t.a.has(e)}function on(t,e){t.a?t.a.add(e):t.b=e}function sn(t,e){t.b&&t.b==e?t.b=null:t.a&&t.a.has(e)&&t.a.delete(e)}function an(t){var e,n;if(null!=t.b)return t.c.concat(t.b.i);if(null!=t.a&&0!==t.a.size){var i=t.c;try{for(var o=r(t.a.values()),s=o.next();!s.done;s=o.next()){var a=s.value;i=i.concat(a.i)}}catch(t){e={error:t}}finally{try{s&&!s.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}return i}return T(t.c)}function un(){}function cn(){this.a=new un}function hn(t,e,n){var r=n||"";try{Ae(t,(function(t,n){var i=t;f(t)&&(i=Nt(t)),e.push(r+n+"="+encodeURIComponent(i))}))}catch(t){throw e.push(r+"type="+encodeURIComponent("_badmap")),t}}function fn(t,e,n,r,i){try{e.onload=null,e.onerror=null,e.onabort=null,e.ontimeout=null,i(r)}catch(t){}}Ze.prototype.cancel=function(){var t,e;if(this.c=an(this),this.b)this.b.cancel(),this.b=null;else if(this.a&&0!==this.a.size){try{for(var n=r(this.a.values()),i=n.next();!i.done;i=n.next()){i.value.cancel()}}catch(e){t={error:e}}finally{try{i&&!i.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}this.a.clear()}},un.prototype.stringify=function(t){return a.JSON.stringify(t,void 0)},un.prototype.parse=function(t){return a.JSON.parse(t,void 0)};var ln=a.JSON.parse;function pn(t){Tt.call(this),this.headers=new Ne,this.G=t||null,this.b=!1,this.s=this.a=null,this.D="",this.h=0,this.f="",this.g=this.w=this.l=this.v=!1,this.o=0,this.m=null,this.H=dn,this.B=this.F=!1}b(pn,Tt);var dn="",vn=/^https?$/i,yn=["POST","PUT"];function gn(t){return"content-type"==t.toLowerCase()}function mn(t,e){t.b=!1,t.a&&(t.g=!0,t.a.abort(),t.g=!1),t.f=e,t.h=5,bn(t),En(t)}function bn(t){t.v||(t.v=!0,t.dispatchEvent("complete"),t.dispatchEvent("error"))}function wn(t){if(t.b&&void 0!==s&&(!t.s[1]||4!=In(t)||2!=t.S()))if(t.l&&4==In(t))Ut(t.va,0,t);else if(t.dispatchEvent("readystatechange"),4==In(t)){t.b=!1;try{var e,n=t.S();t:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var r=!0;break t;default:r=!1}if(!(e=r)){var i;if(i=0===n){var o=String(t.D).match(Oe)[1]||null;if(!o&&a.self&&a.self.location){var u=a.self.location.protocol;o=u.substr(0,u.length-1)}i=!vn.test(o?o.toLowerCase():"")}e=i}if(e)t.dispatchEvent("complete"),t.dispatchEvent("success");else{t.h=6;try{var c=2<In(t)?t.a.statusText:""}catch(t){c=""}t.f=c+" ["+t.S()+"]",bn(t)}}finally{En(t)}}}function En(t,e){if(t.a){_n(t);var n=t.a,r=t.s[0]?u:null;t.a=null,t.s=null,e||t.dispatchEvent("ready");try{n.onreadystatechange=r}catch(t){}}}function _n(t){t.a&&t.B&&(t.a.ontimeout=null),t.m&&(a.clearTimeout(t.m),t.m=null)}function In(t){return t.a?t.a.readyState:0}function Tn(t,e,n){t:{for(r in n){var r=!1;break t}r=!0}r||(n=function(t){var e="";return C(t,(function(t,n){e+=n,e+=":",e+=t,e+="\r\n"})),e}(n),"string"==typeof t?null!=n&&encodeURIComponent(String(n)):je(t,e,n))}function An(t,e,n){return n&&n.internalChannelParams&&n.internalChannelParams[t]||e}function Nn(t){this.f=[],this.R=this.ea=this.v=this.P=this.a=this.ha=this.s=this.N=this.h=this.F=this.j=null,this.Fa=this.H=0,this.Ca=An("failFast",!1,t),this.U=this.l=this.i=this.g=this.c=null,this.W=!0,this.A=this.ia=this.G=-1,this.J=this.m=this.o=0,this.Ba=An("baseRetryDelayMs",5e3,t),this.Ga=An("retryDelaySeedMs",1e4,t),this.Da=An("forwardChannelMaxRetries",2,t),this.ga=An("forwardChannelRequestTimeoutMs",2e4,t),this.Ea=t&&t.nb||void 0,this.D=void 0,this.w=t&&t.supportsCrossDomainXhr||!1,this.B="",this.b=new Ze(t&&t.concurrentRequestLimit),this.ja=new cn,this.fa=t&&t.fastHandshake||!1,t&&t.forceLongPolling&&(this.W=!1),this.O=void 0}function Sn(t){if(kn(t),3==t.u){var e=t.H++,n=Pe(t.v);je(n,"SID",t.B),je(n,"RID",e),je(n,"TYPE","terminate"),Cn(t,n),(e=new fe(t,e,void 0)).B=2,e.f=Me(Pe(n)),n=!1,a.navigator&&a.navigator.sendBeacon&&(n=a.navigator.sendBeacon(e.f.toString(),"")),!n&&a.Image&&((new Image).src=e.f,n=!0),n||(e.a=Bn(e.g,null),e.a.$(e.f)),e.s=m(),be(e)}Fn(t)}function kn(t){t.a&&(t.a.cancel(),t.a=null),t.i&&(a.clearTimeout(t.i),t.i=null),jn(t),t.b.cancel(),t.g&&("number"==typeof t.g&&a.clearTimeout(t.g),t.g=null)}function On(t,e){t.f.push(new Qe(t.Fa++,e)),3==t.u&&Dn(t)}function Dn(t){en(t.b)||t.g||(t.g=!0,xt(t.xa,t),t.o=0)}function Pn(t,e){var n;n=e?e.W:t.H++;var r=Pe(t.v);je(r,"SID",t.B),je(r,"RID",n),je(r,"AID",t.G),Cn(t,r),t.h&&t.j&&Tn(r,t.h,t.j),n=new fe(t,n,t.o+1),null===t.h&&(n.m=t.j),e&&(t.f=e.i.concat(t.f)),e=xn(t,n,1e3),n.setTimeout(Math.round(.5*t.ga)+Math.round(.5*t.ga*Math.random())),on(t.b,n),ve(n,r,e)}function Cn(t,e){t.c&&Ae({},(function(t,n){je(e,n,t)}))}function xn(t,e,n){n=Math.min(t.f.length,n);var r=t.c?y(t.c.Ha,t.c,t):null;t:for(var i=t.f,o=-1;;){var s=["count="+n];-1==o?0<n?(o=i[0].b,s.push("ofs="+o)):o=0:s.push("ofs="+o);for(var a=!0,u=0;u<n;u++){var c=i[u].b,h=i[u].a;if(0>(c-=o))o=Math.max(0,i[u].b-100),a=!1;else try{hn(h,s,"req"+c+"_")}catch(t){r&&r(h)}}if(a){r=s.join("&");break t}}return t=t.f.splice(0,n),e.i=t,r}function Rn(t){t.a||t.i||(t.J=1,xt(t.wa,t),t.m=0)}function Ln(t){return!(t.a||t.i||3<=t.m)&&(t.J++,t.i=te(y(t.wa,t),Vn(t,t.m)),t.m++,!0)}function jn(t){null!=t.l&&(a.clearTimeout(t.l),t.l=null)}function Mn(t,e){var n=null;if(t.a==e){jn(t),t.a=null;var r=2}else{if(!rn(t.b,e))return;n=e.i,sn(t.b,e),r=1}if(t.A=e.H,0!=t.u)if(e.b)if(1==r){n=e.j?e.j.length:0,e=m()-e.s;var i=t.o;(r=Yt()).dispatchEvent(new Zt(r,n,e,i)),Dn(t)}else Rn(t);else if(3==(i=e.c)||0==i&&0<t.A||!(1==r&&function(t,e){return!(nn(t.b)>=t.b.f-(t.g?1:0))&&(t.g?(t.f=e.i.concat(t.f),!0):!(1==t.u||2==t.u||t.o>=(t.Ca?0:t.Da))&&(t.g=te(y(t.xa,t,e),Vn(t,t.o)),t.o++,!0))}(t,e)||2==r&&Ln(t)))switch(n&&0<n.length&&(e=t.b,e.c=e.c.concat(n)),i){case 1:Un(t,5);break;case 4:Un(t,10);break;case 3:Un(t,6);break;default:Un(t,2)}}function Vn(t,e){var n=t.Ba+Math.floor(Math.random()*t.Ga);return t.c||(n*=2),n*e}function Un(t,e){if(2==e){var n=null;t.c&&(n=null);var r=y(t.Ta,t);n||(n=new De("//www.google.com/images/cleardot.gif"),a.location&&"http"==a.location.protocol||Ce(n,"https"),Me(n)),function(t,e){var n=new Kt;if(a.Image){var r=new Image;r.onload=g(fn,n,r,"TestLoadImage: loaded",!0,e),r.onerror=g(fn,n,r,"TestLoadImage: error",!1,e),r.onabort=g(fn,n,r,"TestLoadImage: abort",!1,e),r.ontimeout=g(fn,n,r,"TestLoadImage: timeout",!1,e),a.setTimeout((function(){r.ontimeout&&r.ontimeout()}),1e4),r.src=t}else e(!1)}(n.toString(),r)}else Qt(2);t.u=0,t.c&&t.c.la(e),Fn(t),kn(t)}function Fn(t){t.u=0,t.A=-1,t.c&&(0==an(t.b).length&&0==t.f.length||(t.b.c.length=0,T(t.f),t.f.length=0),t.c.ka())}function qn(t,e,n){var r=function(t){return t instanceof De?Pe(t):new De(t,void 0)}(n);if(""!=r.c)e&&xe(r,e+"."+r.c),Re(r,r.h);else{var i=a.location;r=function(t,e,n,r){var i=new De(null,void 0);return t&&Ce(i,t),e&&xe(i,e),n&&Re(i,n),r&&(i.g=r),i}(i.protocol,e?e+"."+i.hostname:i.hostname,+i.port,n)}return t.N&&C(t.N,(function(t,e){je(r,e,t)})),e=t.s,n=t.ha,e&&n&&je(r,e,n),je(r,"VER",t.oa),Cn(t,r),r}function Bn(t,e){if(e&&!t.w)throw Error("Can't create secondary domain capable XhrIo object.");return(e=new pn(t.Ea)).F=t.w,e}function Gn(){}function Wn(){if(F&&!(10<=Number(Z)))throw Error("Environmental error: no available transport.")}function zn(t,e){Tt.call(this),this.a=new Nn(e),this.l=t,this.b=e&&e.messageUrlParams||null,t=e&&e.messageHeaders||null,e&&e.clientProtocolHeaderRequired&&(t?t["X-Client-Protocol"]="webchannel":t={"X-Client-Protocol":"webchannel"}),this.a.j=t,t=e&&e.initMessageHeaders||null,e&&e.messageContentType&&(t?t["X-WebChannel-Content-Type"]=e.messageContentType:t={"X-WebChannel-Content-Type":e.messageContentType}),e&&e.pa&&(t?t["X-WebChannel-Client-Profile"]=e.pa:t={"X-WebChannel-Client-Profile":e.pa}),this.a.F=t,(t=e&&e.httpHeadersOverwriteParam)&&!A(t)&&(this.a.h=t),this.h=e&&e.supportsCrossDomainXhr||!1,this.g=e&&e.sendRawJson||!1,(e=e&&e.httpSessionIdParam)&&!A(e)&&(this.a.s=e,null!==(t=this.b)&&e in t&&(e in(t=this.b)&&delete t[e])),this.f=new Yn(this)}function Kn(t){ue.call(this);var e=t.__sm__;if(e){t:{for(var n in e){t=n;break t}t=void 0}(this.c=t)?(t=this.c,this.data=null!==e&&t in e?e[t]:void 0):this.data=e}else this.data=t}function Hn(){ce.call(this),this.status=1}function Yn(t){this.a=t}(i=pn.prototype).$=function(t,e,n,r){if(this.a)throw Error("[goog.net.XhrIo] Object is active with another request="+this.D+"; newUri="+t);e=e?e.toUpperCase():"GET",this.D=t,this.f="",this.h=0,this.v=!1,this.b=!0,this.a=new XMLHttpRequest,this.s=this.G?ie(this.G):ie(se),this.a.onreadystatechange=y(this.va,this);try{this.w=!0,this.a.open(e,String(t),!0),this.w=!1}catch(t){return void mn(this,t)}t=n||"";var i=new Ne(this.headers);r&&Ae(r,(function(t,e){i.set(e,t)})),r=function(t){t:{for(var e=gn,n=t.length,r="string"==typeof t?t.split(""):t,i=0;i<n;i++)if(i in r&&e.call(void 0,r[i],i,t)){e=i;break t}e=-1}return 0>e?null:"string"==typeof t?t.charAt(e):t[e]}(i.K()),n=a.FormData&&t instanceof a.FormData,!(0<=E(yn,e))||r||n||i.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),i.forEach((function(t,e){this.a.setRequestHeader(e,t)}),this),this.H&&(this.a.responseType=this.H),"withCredentials"in this.a&&this.a.withCredentials!==this.F&&(this.a.withCredentials=this.F);try{_n(this),0<this.o&&((this.B=function(t){return F&&$(9)&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(this.a))?(this.a.timeout=this.o,this.a.ontimeout=y(this.ta,this)):this.m=Ut(this.ta,this.o,this)),this.l=!0,this.a.send(t),this.l=!1}catch(t){mn(this,t)}},i.ta=function(){void 0!==s&&this.a&&(this.f="Timed out after "+this.o+"ms, aborting",this.h=8,this.dispatchEvent("timeout"),this.abort(8))},i.abort=function(t){this.a&&this.b&&(this.b=!1,this.g=!0,this.a.abort(),this.g=!1,this.h=t||7,this.dispatchEvent("complete"),this.dispatchEvent("abort"),En(this))},i.C=function(){this.a&&(this.b&&(this.b=!1,this.g=!0,this.a.abort(),this.g=!1),En(this,!0)),pn.M.C.call(this)},i.va=function(){this.j||(this.w||this.l||this.g?wn(this):this.Oa())},i.Oa=function(){wn(this)},i.S=function(){try{return 2<In(this)?this.a.status:-1}catch(t){return-1}},i.Y=function(){try{return this.a?this.a.responseText:""}catch(t){return""}},i.Ja=function(t){if(this.a){var e=this.a.responseText;return t&&0==e.indexOf(t)&&(e=e.substring(t.length)),ln(e)}},i.qa=function(){return this.h},i.Ma=function(){return"string"==typeof this.f?this.f:String(this.f)},(i=Nn.prototype).oa=8,i.u=1,i.xa=function(t){if(this.g)if(this.g=null,1==this.u){if(!t){this.H=Math.floor(1e5*Math.random());var e,n=new fe(this,t=this.H++,void 0),r=this.j;if(this.F&&(r?L(r=x(r),this.F):r=this.F),null===this.h&&(n.m=r),this.fa)t:{for(var i=e=0;i<this.f.length;i++){var o=this.f[i];if(void 0===(o="__data__"in o.a&&"string"==typeof(o=o.a.__data__)?o.length:void 0))break;if(4096<(e+=o)){e=i;break t}if(4096===e||i===this.f.length-1){e=i+1;break t}}e=1e3}else e=1e3;e=xn(this,n,e),je(i=Pe(this.v),"RID",t),je(i,"CVER",22),this.s&&je(i,"X-HTTP-Session-Id",this.s),Cn(this,i),this.h&&r&&Tn(i,this.h,r),on(this.b,n),this.fa?(je(i,"$req",e),je(i,"SID","null"),n.R=!0,ve(n,i,null)):ve(n,i,e),this.u=2}}else 3==this.u&&(t?Pn(this,t):0==this.f.length||en(this.b)||Pn(this))},i.wa=function(){this.i=null,this.a=new fe(this,"rpc",this.J),null===this.h&&(this.a.m=this.j),this.a.J=0;var t=Pe(this.ea);je(t,"RID","rpc"),je(t,"SID",this.B),je(t,"CI",this.U?"0":"1"),je(t,"AID",this.G),Cn(this,t),je(t,"TYPE","xmlhttp"),this.h&&this.j&&Tn(t,this.h,this.j),this.D&&this.a.setTimeout(this.D);var e=this.a,n=this.R;e.B=1,e.f=Me(Pe(t)),e.j=null,e.F=!0,ye(e,n)},i.Na=function(){null!=this.l&&(this.l=null,this.a.cancel(),this.a=null,Ln(this),Qt(19))},i.Ta=function(t){Qt(t?2:1)},(i=Gn.prototype).na=function(){},i.ma=function(){},i.la=function(){},i.ka=function(){},i.Ha=function(){},Wn.prototype.a=function(t,e){return new zn(t,e)},b(zn,Tt),(i=zn.prototype).addEventListener=function(t,e,n,r){zn.M.addEventListener.call(this,t,e,n,r)},i.removeEventListener=function(t,e,n,r){zn.M.removeEventListener.call(this,t,e,n,r)},i.Ka=function(){this.a.c=this.f,this.h&&(this.a.w=!0);var t=this.a,e=this.l,n=this.b||void 0;Qt(0),t.P=e,t.N=n||{},t.U=t.W,t.v=qn(t,null,t.P),Dn(t)},i.close=function(){Sn(this.a)},i.La=function(t){if("string"==typeof t){var e={};e.__data__=t,On(this.a,e)}else this.g?((e={}).__data__=Nt(t),On(this.a,e)):On(this.a,t)},i.C=function(){this.a.c=null,delete this.f,Sn(this.a),delete this.a,zn.M.C.call(this)},b(Kn,ue),b(Hn,ce),b(Yn,Gn),Yn.prototype.na=function(){this.a.dispatchEvent("a")},Yn.prototype.ma=function(t){this.a.dispatchEvent(new Kn(t))},Yn.prototype.la=function(t){this.a.dispatchEvent(new Hn(t))},Yn.prototype.ka=function(){this.a.dispatchEvent("b")},Wn.prototype.createWebChannel=Wn.prototype.a,zn.prototype.send=zn.prototype.La,zn.prototype.open=zn.prototype.Ka,zn.prototype.close=zn.prototype.close,ee.NO_ERROR=0,ee.TIMEOUT=8,ee.HTTP_ERROR=6,ne.COMPLETE="complete",oe.EventType=ae,ae.OPEN="a",ae.CLOSE="b",ae.ERROR="c",ae.MESSAGE="d",Tt.prototype.listen=Tt.prototype.ra,pn.prototype.listenOnce=pn.prototype.sa,pn.prototype.getLastError=pn.prototype.Ma,pn.prototype.getLastErrorCode=pn.prototype.qa,pn.prototype.getStatus=pn.prototype.S,pn.prototype.getResponseJson=pn.prototype.Ja,pn.prototype.getResponseText=pn.prototype.Y,pn.prototype.send=pn.prototype.$;var Xn={createWebChannelTransport:function(){return new Wn},ErrorCode:ee,EventType:ne,WebChannel:oe,XhrIo:pn},Jn=Xn.createWebChannelTransport,$n=Xn.ErrorCode,Qn=Xn.EventType,Zn=Xn.WebChannel,tr=Xn.XhrIo;e.default=Xn}.call(this,n(5))},function(t,e,n){"use strict";n.r(e);const r=(()=>{const t=document.querySelector("#LogInWarning"),e=document.querySelector("#logout"),n=document.querySelector("#login"),r=document.querySelector("#signUp"),i=document.querySelector("#Account"),o=document.querySelector("#mainContainer");let s=[t,n,r],a=[e,i,o],u=document.querySelector("#menuContainer"),c=document.querySelector("#navButton"),h=(document.querySelector("#contentContainer"),document.querySelector("#underlayer"));function f(t){for(;t.firstChild;)f(t.firstChild);t.remove()}return{logOut:function(){for(let t=0;t<s.length;t++)s[t].classList.remove("hidden");for(let t=0;t<a.length;t++)a[t].classList.add("hidden")},logIn:function(){for(let t=0;t<s.length;t++)s[t].classList.add("hidden");for(let t=0;t<a.length;t++)a[t].classList.remove("hidden")},toggleMenu:function(){u.classList.contains("hidden")?(u.animate([{transform:"translateX(-305px)"},{transform:"translateX(0px)"}],{duration:300,easing:"ease-out"}),h.animate([{width:"0px"},{width:"305px"}],{duration:300,easing:"ease-out",fill:"forwards"})):(u.animate([{transform:"translateX(0px)"},{transform:"translateX(-305px)"}],{duration:300,easing:"ease-in"}),h.animate([{width:"305px"},{width:"0px"}],{duration:300,easing:"ease-in",fill:"forwards"}),setTimeout(()=>{f()},300))},menu:u,menuButton:c,removeNode:f}})();var i=n(3),o=n(0),s=n.n(o),a=n(2);var u=function(){return(u=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};function c(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}u((r=r.apply(t,e||[])).next())}))}function h(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}function f(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function l(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s}var p,d=n(1),v=n(6),y=((p={})["missing-app-config-values"]='Missing App configuration value: "{$valueName}"',p["not-registered"]="Firebase Installation is not registered.",p["installation-not-found"]="Firebase Installation not found.",p["request-failed"]='{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',p["app-offline"]="Could not process request. Application offline.",p["delete-pending-registration"]="Can't delete installation while there is a pending registration request.",p),g=new d.ErrorFactory("installations","Installations",y);function m(t){return t instanceof d.FirebaseError&&t.code.includes("request-failed")}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function b(t){return"https://firebaseinstallations.googleapis.com/v1/projects/"+t.projectId+"/installations"}function w(t){return{token:t.token,requestStatus:2,expiresIn:(e=t.expiresIn,Number(e.replace("s","000"))),creationTime:Date.now()};var e}function E(t,e){return c(this,void 0,void 0,(function(){var n,r;return h(this,(function(i){switch(i.label){case 0:return[4,e.json()];case 1:return n=i.sent(),r=n.error,[2,g.create("request-failed",{requestName:t,serverCode:r.code,serverMessage:r.message,serverStatus:r.status})]}}))}))}function _(t){var e=t.apiKey;return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":e})}function I(t,e){var n=e.refreshToken,r=_(t);return r.append("Authorization",function(t){return"FIS_v2 "+t}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(n)),r}function T(t){return c(this,void 0,void 0,(function(){var e;return h(this,(function(n){switch(n.label){case 0:return[4,t()];case 1:return(e=n.sent()).status>=500&&e.status<600?[2,t()]:[2,e]}}))}))}function A(t,e){var n=e.fid;return c(this,void 0,void 0,(function(){var e,r,i,o,s,a;return h(this,(function(u){switch(u.label){case 0:return e=b(t),r=_(t),i={fid:n,authVersion:"FIS_v2",appId:t.appId,sdkVersion:"w:0.4.10"},o={method:"POST",headers:r,body:JSON.stringify(i)},[4,T((function(){return fetch(e,o)}))];case 1:return(s=u.sent()).ok?[4,s.json()]:[3,3];case 2:return a=u.sent(),[2,{fid:a.fid||n,registrationStatus:2,refreshToken:a.refreshToken,authToken:w(a.authToken)}];case 3:return[4,E("Create Installation",s)];case 4:throw u.sent()}}))}))}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function N(t){return new Promise((function(e){setTimeout(e,t)}))}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function S(t){return btoa(String.fromCharCode.apply(String,function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(l(arguments[e]));return t}(t))).replace(/\+/g,"-").replace(/\//g,"_")}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var k=/^[cdef][\w-]{21}$/;function O(){try{var t=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(t),t[0]=112+t[0]%16;var e=function(t){return S(t).substr(0,22)}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(t);return k.test(e)?e:""}catch(t){return""}}function D(t){return t.appName+"!"+t.appId}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var P=new Map;function C(t,e){var n=D(t);x(n,e),function(t,e){var n=L();n&&n.postMessage({key:t,fid:e});j()}(n,e)}function x(t,e){var n,r,i=P.get(t);if(i)try{for(var o=f(i),s=o.next();!s.done;s=o.next()){(0,s.value)(e)}}catch(t){n={error:t}}finally{try{s&&!s.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}}var R=null;function L(){return!R&&"BroadcastChannel"in self&&((R=new BroadcastChannel("[Firebase] FID Change")).onmessage=function(t){x(t.data.key,t.data.fid)}),R}function j(){0===P.size&&R&&(R.close(),R=null)}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var V,U="firebase-installations-store",F=null;function q(){return F||(F=Object(v.openDb)("firebase-installations-database",1,(function(t){switch(t.oldVersion){case 0:t.createObjectStore(U)}}))),F}function B(t,e){return c(this,void 0,void 0,(function(){var n,r,i,o,s;return h(this,(function(a){switch(a.label){case 0:return n=D(t),[4,q()];case 1:return r=a.sent(),i=r.transaction(U,"readwrite"),[4,(o=i.objectStore(U)).get(n)];case 2:return s=a.sent(),[4,o.put(e,n)];case 3:return a.sent(),[4,i.complete];case 4:return a.sent(),s&&s.fid===e.fid||C(t,e.fid),[2,e]}}))}))}function G(t){return c(this,void 0,void 0,(function(){var e,n,r;return h(this,(function(i){switch(i.label){case 0:return e=D(t),[4,q()];case 1:return n=i.sent(),[4,(r=n.transaction(U,"readwrite")).objectStore(U).delete(e)];case 2:return i.sent(),[4,r.complete];case 3:return i.sent(),[2]}}))}))}function W(t,e){return c(this,void 0,void 0,(function(){var n,r,i,o,s,a;return h(this,(function(u){switch(u.label){case 0:return n=D(t),[4,q()];case 1:return r=u.sent(),i=r.transaction(U,"readwrite"),[4,(o=i.objectStore(U)).get(n)];case 2:return s=u.sent(),void 0!==(a=e(s))?[3,4]:[4,o.delete(n)];case 3:return u.sent(),[3,6];case 4:return[4,o.put(a,n)];case 5:u.sent(),u.label=6;case 6:return[4,i.complete];case 7:return u.sent(),!a||s&&s.fid===a.fid||C(t,a.fid),[2,a]}}))}))}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function z(t){return c(this,void 0,void 0,(function(){var e,n,r;return h(this,(function(i){switch(i.label){case 0:return[4,W(t,(function(n){var r=function(t){return Y(t||{fid:O(),registrationStatus:0})}(n),i=function(t,e){if(0===e.registrationStatus){if(!navigator.onLine){var n=Promise.reject(g.create("app-offline"));return{installationEntry:e,registrationPromise:n}}var r={fid:e.fid,registrationStatus:1,registrationTime:Date.now()},i=function(t,e){return c(this,void 0,void 0,(function(){var n,r;return h(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,7]),[4,A(t,e)];case 1:return n=i.sent(),[2,B(t,n)];case 2:return m(r=i.sent())&&409===r.serverCode?[4,G(t)]:[3,4];case 3:return i.sent(),[3,6];case 4:return[4,B(t,{fid:e.fid,registrationStatus:0})];case 5:i.sent(),i.label=6;case 6:throw r;case 7:return[2]}}))}))}(t,r);return{installationEntry:r,registrationPromise:i}}return 1===e.registrationStatus?{installationEntry:e,registrationPromise:K(t)}:{installationEntry:e}}(t,r);return e=i.registrationPromise,i.installationEntry}))];case 1:return""!==(n=i.sent()).fid?[3,3]:(r={},[4,e]);case 2:return[2,(r.installationEntry=i.sent(),r)];case 3:return[2,{installationEntry:n,registrationPromise:e}]}}))}))}function K(t){return c(this,void 0,void 0,(function(){var e,n,r,i;return h(this,(function(o){switch(o.label){case 0:return[4,H(t)];case 1:e=o.sent(),o.label=2;case 2:return 1!==e.registrationStatus?[3,5]:[4,N(100)];case 3:return o.sent(),[4,H(t)];case 4:return e=o.sent(),[3,2];case 5:return 0!==e.registrationStatus?[3,7]:[4,z(t)];case 6:return n=o.sent(),r=n.installationEntry,(i=n.registrationPromise)?[2,i]:[2,r];case 7:return[2,e]}}))}))}function H(t){return W(t,(function(t){if(!t)throw g.create("installation-not-found");return Y(t)}))}function Y(t){return 1===(e=t).registrationStatus&&e.registrationTime+1e4<Date.now()?{fid:t.fid,registrationStatus:0}:t;var e;
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */}function X(t,e){var n=t.appConfig,r=t.platformLoggerProvider;return c(this,void 0,void 0,(function(){var t,i,o,s,a,u,c;return h(this,(function(h){switch(h.label){case 0:return t=function(t,e){var n=e.fid;return b(t)+"/"+n+"/authTokens:generate"}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(n,e),i=I(n,e),(o=r.getImmediate({optional:!0}))&&i.append("x-firebase-client",o.getPlatformInfoString()),s={installation:{sdkVersion:"w:0.4.10"}},a={method:"POST",headers:i,body:JSON.stringify(s)},[4,T((function(){return fetch(t,a)}))];case 1:return(u=h.sent()).ok?[4,u.json()]:[3,3];case 2:return c=h.sent(),[2,w(c)];case 3:return[4,E("Generate Auth Token",u)];case 4:throw h.sent()}}))}))}function J(t,e){return void 0===e&&(e=!1),c(this,void 0,void 0,(function(){var n,r,i;return h(this,(function(o){switch(o.label){case 0:return[4,W(t.appConfig,(function(r){if(!Q(r))throw g.create("not-registered");var i=r.authToken;if(!e&&function(t){return 2===t.requestStatus&&!function(t){var e=Date.now();return e<t.creationTime||t.creationTime+t.expiresIn<e+36e5}(t)}(i))return r;if(1===i.requestStatus)return n=function(t,e){return c(this,void 0,void 0,(function(){var n,r;return h(this,(function(i){switch(i.label){case 0:return[4,$(t.appConfig)];case 1:n=i.sent(),i.label=2;case 2:return 1!==n.authToken.requestStatus?[3,5]:[4,N(100)];case 3:return i.sent(),[4,$(t.appConfig)];case 4:return n=i.sent(),[3,2];case 5:return 0===(r=n.authToken).requestStatus?[2,J(t,e)]:[2,r]}}))}))}(t,e),r;if(!navigator.onLine)throw g.create("app-offline");var o=function(t){var e={requestStatus:1,requestTime:Date.now()};return u(u({},t),{authToken:e})}(r);return n=function(t,e){return c(this,void 0,void 0,(function(){var n,r,i;return h(this,(function(o){switch(o.label){case 0:return o.trys.push([0,3,,8]),[4,X(t,e)];case 1:return n=o.sent(),i=u(u({},e),{authToken:n}),[4,B(t.appConfig,i)];case 2:return o.sent(),[2,n];case 3:return!m(r=o.sent())||401!==r.serverCode&&404!==r.serverCode?[3,5]:[4,G(t.appConfig)];case 4:return o.sent(),[3,7];case 5:return i=u(u({},e),{authToken:{requestStatus:0}}),[4,B(t.appConfig,i)];case 6:o.sent(),o.label=7;case 7:throw r;case 8:return[2]}}))}))}(t,o),o}))];case 1:return r=o.sent(),n?[4,n]:[3,3];case 2:return i=o.sent(),[3,4];case 3:i=r.authToken,o.label=4;case 4:return[2,i]}}))}))}function $(t){return W(t,(function(t){if(!Q(t))throw g.create("not-registered");var e,n=t.authToken;return 1===(e=n).requestStatus&&e.requestTime+1e4<Date.now()?u(u({},t),{authToken:{requestStatus:0}}):t}))}function Q(t){return void 0!==t&&2===t.registrationStatus}function Z(t){return c(this,void 0,void 0,(function(){var e;return h(this,(function(n){switch(n.label){case 0:return[4,z(t)];case 1:return(e=n.sent().registrationPromise)?[4,e]:[3,3];case 2:n.sent(),n.label=3;case 3:return[2]}}))}))}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function tt(t,e){return c(this,void 0,void 0,(function(){var n,r,i,o;return h(this,(function(s){switch(s.label){case 0:return n=function(t,e){var n=e.fid;return b(t)+"/"+n}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(t,e),r=I(t,e),i={method:"DELETE",headers:r},[4,T((function(){return fetch(n,i)}))];case 1:return(o=s.sent()).ok?[3,3]:[4,E("Delete Installation",o)];case 2:throw s.sent();case 3:return[2]}}))}))}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function et(t,e){var n=t.appConfig;return function(t,e){L();var n=D(t),r=P.get(n);r||(r=new Set,P.set(n,r)),r.add(e)}(n,e),function(){!function(t,e){var n=D(t),r=P.get(n);r&&(r.delete(e),0===r.size&&P.delete(n),j())}(n,e)}}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function nt(t){return g.create("missing-app-config-values",{valueName:t})}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(V=s.a).INTERNAL.registerComponent(new a.Component("installations",(function(t){var e=t.getProvider("app").getImmediate(),n={appConfig:function(t){var e,n;if(!t||!t.options)throw nt("App Configuration");if(!t.name)throw nt("App Name");try{for(var r=f(["projectId","apiKey","appId"]),i=r.next();!i.done;i=r.next()){var o=i.value;if(!t.options[o])throw nt(o)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}return{appName:t.name,projectId:t.options.projectId,apiKey:t.options.apiKey,appId:t.options.appId}}(e),platformLoggerProvider:t.getProvider("platform-logger")};return{app:e,getId:function(){
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */return function(t){return c(this,void 0,void 0,(function(){var e,n,r;return h(this,(function(i){switch(i.label){case 0:return[4,z(t.appConfig)];case 1:return e=i.sent(),n=e.installationEntry,(r=e.registrationPromise)?r.catch(console.error):J(t).catch(console.error),[2,n.fid]}}))}))}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(n)},getToken:function(t){return function(t,e){return void 0===e&&(e=!1),c(this,void 0,void 0,(function(){return h(this,(function(n){switch(n.label){case 0:return[4,Z(t.appConfig)];case 1:return n.sent(),[4,J(t,e)];case 2:return[2,n.sent().token]}}))}))}(n,t)},delete:function(){return function(t){return c(this,void 0,void 0,(function(){var e,n;return h(this,(function(r){switch(r.label){case 0:return[4,W(e=t.appConfig,(function(t){if(!t||0!==t.registrationStatus)return t}))];case 1:if(!(n=r.sent()))return[3,6];if(1!==n.registrationStatus)return[3,2];throw g.create("delete-pending-registration");case 2:if(2!==n.registrationStatus)return[3,6];if(navigator.onLine)return[3,3];throw g.create("app-offline");case 3:return[4,tt(e,n)];case 4:return r.sent(),[4,G(e)];case 5:r.sent(),r.label=6;case 6:return[2]}}))}))}(n)},onIdChange:function(t){return et(n,t)}}}),"PUBLIC")),V.registerVersion("@firebase/installations","0.4.10");var rt=function(){return(rt=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};function it(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}u((r=r.apply(t,e||[])).next())}))}function ot(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}var st,at,ut=n(4),ct="https://www.googletagmanager.com/gtag/js";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */!function(t){t.EVENT="event",t.SET="set",t.CONFIG="config"}(st||(st={})),function(t){t.ADD_SHIPPING_INFO="add_shipping_info",t.ADD_PAYMENT_INFO="add_payment_info",t.ADD_TO_CART="add_to_cart",t.ADD_TO_WISHLIST="add_to_wishlist",t.BEGIN_CHECKOUT="begin_checkout",t.CHECKOUT_PROGRESS="checkout_progress",t.EXCEPTION="exception",t.GENERATE_LEAD="generate_lead",t.LOGIN="login",t.PAGE_VIEW="page_view",t.PURCHASE="purchase",t.REFUND="refund",t.REMOVE_FROM_CART="remove_from_cart",t.SCREEN_VIEW="screen_view",t.SEARCH="search",t.SELECT_CONTENT="select_content",t.SELECT_ITEM="select_item",t.SELECT_PROMOTION="select_promotion",t.SET_CHECKOUT_OPTION="set_checkout_option",t.SHARE="share",t.SIGN_UP="sign_up",t.TIMING_COMPLETE="timing_complete",t.VIEW_CART="view_cart",t.VIEW_ITEM="view_item",t.VIEW_ITEM_LIST="view_item_list",t.VIEW_PROMOTION="view_promotion",t.VIEW_SEARCH_RESULTS="view_search_results"}(at||(at={}));
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ht,ft=new ut.Logger("@firebase/analytics");
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function lt(t,e,n){var r=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];window[e].push(arguments)};return window[n]&&"function"==typeof window[n]&&(r=window[n]),window[n]=function(t,e){return function(n,r,i){if(n===st.EVENT){var o=[];if(i&&i.send_to){var s=i.send_to;Array.isArray(s)||(s=[s]);for(var a=0,u=s;a<u.length;a++){var c=u[a],h=e[c];if(!h){o=[];break}o.push(h)}}if(0===o.length)for(var f=0,l=Object.values(e);f<l.length;f++){var p=l[f];o.push(p)}Promise.all(o).then((function(){return t(st.EVENT,r,i||{})})).catch((function(t){return ft.error(t)}))}else if(n===st.CONFIG){(e[r]||Promise.resolve()).then((function(){t(st.CONFIG,r,i)})).catch((function(t){return ft.error(t)}))}else t(st.SET,r)}}(r,t),{gtagCore:r,wrappedGtag:window[n]}}var pt,dt,vt=((ht={})["no-ga-id"]='"measurementId" field is empty in Firebase config. Firebase Analytics requires this field to contain a valid measurement ID.',ht["already-exists"]="A Firebase Analytics instance with the measurement ID ${id}  already exists. Only one Firebase Analytics instance can be created for each measurement ID.",ht["already-initialized"]="Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.",ht["interop-component-reg-failed"]="Firebase Analytics Interop Component failed to instantiate",ht),yt=new d.ErrorFactory("analytics","Analytics",vt),gt={},mt="dataLayer",bt="gtag",wt=!1;function Et(t){if(wt)throw yt.create("already-initialized");t.dataLayerName&&(mt=t.dataLayerName),t.gtagName&&(bt=t.gtagName)}function _t(t,e){var n=t.options.measurementId;if(!n)throw yt.create("no-ga-id");if(null!=gt[n])throw yt.create("already-exists",{id:n});if(!wt){(function(){for(var t=window.document.getElementsByTagName("script"),e=0,n=Object.values(t);e<n.length;e++){var r=n[e];if(r.src&&r.src.includes(ct))return r}return null}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */)()||function(t){var e=document.createElement("script");e.src=ct+"?l="+t,e.async=!0,document.head.appendChild(e)}(mt),function(t){var e=[];Array.isArray(window[t])?e=window[t]:window[t]=e}(mt);var r=lt(gt,mt,bt),i=r.wrappedGtag,o=r.gtagCore;dt=i,pt=o,wt=!0}return gt[n]=function(t,e,n){return it(this,void 0,void 0,(function(){var r,i;return ot(this,(function(o){switch(o.label){case 0:return[4,e.getId()];case 1:return r=o.sent(),n("js",new Date),n(st.CONFIG,t.options.measurementId,((i={}).firebase_id=r,i.origin="firebase",i.update=!0,i)),[2]}}))}))}(t,e,pt),{app:t,logEvent:function(t,e,r){
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
return function(t,e,n,r,i){var o=r||{};i&&i.global||(o=rt(rt({},r),{send_to:e})),t(st.EVENT,n,o||{})}(dt,n,t,e,r)},setCurrentScreen:function(t,e){return function(t,e,n,r){r&&r.global?t(st.SET,{screen_name:n}):t(st.CONFIG,e,{update:!0,screen_name:n})}(dt,n,t,e)},setUserId:function(t,e){return function(t,e,n,r){r&&r.global?t(st.SET,{user_id:n}):t(st.CONFIG,e,{update:!0,user_id:n})}(dt,n,t,e)},setUserProperties:function(t,e){return function(t,e,n,r){if(r&&r.global){for(var i={},o=0,s=Object.keys(n);o<s.length;o++){var a=s[o];i["user_properties."+a]=n[a]}t(st.SET,i)}else t(st.CONFIG,e,{update:!0,user_properties:n})}(dt,n,t,e)},setAnalyticsCollectionEnabled:function(t){return function(t,e){window["ga-disable-"+t]=!e}(n,t)}}}!function(t){t.INTERNAL.registerComponent(new a.Component("analytics",(function(t){return _t(t.getProvider("app").getImmediate(),t.getProvider("installations").getImmediate())}),"PUBLIC").setServiceProps({settings:Et,EventName:at})),t.INTERNAL.registerComponent(new a.Component("analytics-internal",(function(t){try{return{logEvent:t.getProvider("analytics").getImmediate().logEvent}}catch(t){throw yt.create("interop-component-reg-failed",{reason:t})}}),"PRIVATE")),t.registerVersion("@firebase/analytics","0.3.5")}(s.a);n(10),n(11);i.initializeApp({apiKey:"AIzaSyDDDFUIdqsGiv_v2t8LJuHw3H_cuEjUa-E",authDomain:"todolist-24e2e.firebaseapp.com",databaseURL:"https://todolist-24e2e.firebaseio.com",projectId:"todolist-24e2e",storageBucket:"todolist-24e2e.appspot.com",messagingSenderId:"651841956764",appId:"1:651841956764:web:df93ffa241b84a38b8f659",measurementId:"G-36QX7ZFGQW"}),i.analytics();const It=i.auth();i.firestore();cosnloe.log("hi"),r.menuButton.addEventListener("click",()=>{console.log("working"),r.toggleMenu()}),document.addEventListener("DOMContentLoaded",(function(){var t=document.querySelectorAll(".modal");M.Modal.init(t)})),It.onAuthStateChanged(t=>{t?r.logIn():r.logOut()});const Tt=document.querySelector("#signup-form");Tt.addEventListener("submit",t=>{t.preventDefault();const e=Tt["signup-email"].value,n=Tt["signup-password"].value;It.createUserWithEmailAndPassword(e,n).then(t=>{const e=document.querySelector("#modal-signup");M.Modal.getInstance(e).close(),Tt.reset()})});document.querySelector("#logout").addEventListener("click",t=>{t.preventDefault(),It.signOut()});const At=document.querySelector("#login-form");At.addEventListener("submit",t=>{t.preventDefault();const e=At["login-email"].value,n=At["login-password"].value;It.signInWithEmailAndPassword(e,n).then(t=>{console.log(t.user);const e=document.querySelector("#modal-login");M.Modal.getInstance(e).close(),At.reset()})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hcHAvZGlzdC9pbmRleC5janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS91dGlsL2Rpc3QvaW5kZXguY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvY29tcG9uZW50L2Rpc3QvaW5kZXguY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9maXJlYmFzZS9hcHAvZGlzdC9pbmRleC5janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9sb2dnZXIvZGlzdC9pbmRleC5lc20uanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWRiL2J1aWxkL2lkYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2FwcC9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvdXRpbC9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvY29tcG9uZW50L25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL2Rpc3QvYXV0aC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9maXJlc3RvcmUvZGlzdC9pbmRleC5janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9maXJlc3RvcmUvbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3dlYmNoYW5uZWwtd3JhcHBlci9kaXN0L2luZGV4LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRG9tTWFuaXB1bGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvaW5zdGFsbGF0aW9ucy9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvaW5zdGFsbGF0aW9ucy9kaXN0L2luZGV4LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2FuYWx5dGljcy9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYW5hbHl0aWNzL2Rpc3QvaW5kZXguZXNtLmpzIiwid2VicGFjazovLy8uL3NyYy9hdXRoLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9hIiwiX2EkMSIsInRzbGliIiwidXRpbCIsImNvbXBvbmVudCIsImxvZ2dlciQxIiwiRVJST1JTIiwiRVJST1JfRkFDVE9SWSIsIkVycm9yRmFjdG9yeSIsIlBMQVRGT1JNX0xPR19TVFJJTkciLCJsb2dnZXIiLCJMb2dnZXIiLCJGaXJlYmFzZUFwcEltcGwiLCJvcHRpb25zIiwiY29uZmlnIiwiZmlyZWJhc2VfIiwiZV8xIiwiX3RoaXMiLCJ0aGlzIiwiaXNEZWxldGVkXyIsIm5hbWVfIiwiYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkXyIsImF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCIsIm9wdGlvbnNfIiwiZGVlcENvcHkiLCJjb250YWluZXIiLCJDb21wb25lbnRDb250YWluZXIiLCJfYWRkQ29tcG9uZW50IiwiQ29tcG9uZW50IiwiX2IiLCJfX3ZhbHVlcyIsIklOVEVSTkFMIiwiY29tcG9uZW50cyIsInZhbHVlcyIsIl9jIiwibmV4dCIsImRvbmUiLCJjb21wb25lbnQkMSIsImVfMV8xIiwiZXJyb3IiLCJyZXR1cm4iLCJjaGVja0Rlc3Ryb3llZF8iLCJzZXQiLCJ2YWwiLCJjb25maWd1cmFibGUiLCJkZWxldGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJyZW1vdmVBcHAiLCJhbGwiLCJnZXRQcm92aWRlcnMiLCJtYXAiLCJwcm92aWRlciIsIl9nZXRTZXJ2aWNlIiwiaW5zdGFuY2VJZGVudGlmaWVyIiwiZ2V0UHJvdmlkZXIiLCJnZXRJbW1lZGlhdGUiLCJpZGVudGlmaWVyIiwiX3JlbW92ZVNlcnZpY2VJbnN0YW5jZSIsImNsZWFySW5zdGFuY2UiLCJhZGRDb21wb25lbnQiLCJlIiwiZGVidWciLCJfYWRkT3JPdmVyd3JpdGVDb21wb25lbnQiLCJhZGRPck92ZXJ3cml0ZUNvbXBvbmVudCIsImFwcE5hbWUiLCJjb25zb2xlIiwibG9nIiwiZmlyZWJhc2UiLCJjcmVhdGVGaXJlYmFzZU5hbWVzcGFjZSIsIm5hbWVzcGFjZSIsImZpcmViYXNlQXBwSW1wbCIsImFwcHMiLCJNYXAiLCJpbml0aWFsaXplQXBwIiwicmF3Q29uZmlnIiwidW5kZWZpbmVkIiwiU3RyaW5nIiwiY29udGFpbnMiLCJhcHAiLCJyZWdpc3RlclZlcnNpb24iLCJsaWJyYXJ5S2V5T3JOYW1lIiwidmVyc2lvbiIsInZhcmlhbnQiLCJsaWJyYXJ5IiwibGlicmFyeU1pc21hdGNoIiwibWF0Y2giLCJ2ZXJzaW9uTWlzbWF0Y2giLCJ3YXJuaW5nIiwicHVzaCIsIndhcm4iLCJqb2luIiwicmVnaXN0ZXJDb21wb25lbnQiLCJzZXRMb2dMZXZlbCIsIm9uTG9nIiwibG9nQ2FsbGJhY2siLCJzZXRVc2VyTG9nSGFuZGxlciIsIlNES19WRVJTSU9OIiwidXNlQXNTZXJ2aWNlIiwiY29tcG9uZW50TmFtZSIsImhhcyIsInR5cGUiLCJzZXJ2aWNlTmFtZXNwYWNlIiwiYXBwQXJnIiwic2VydmljZVByb3BzIiwiZGVlcEV4dGVuZCIsImFyZ3MiLCJfaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNlcnZpY2VGeG4iLCJhcHBseSIsIm11bHRpcGxlSW5zdGFuY2VzIiwia2V5cyIsImNyZWF0ZUZpcmViYXNlTmFtZXNwYWNlQ29yZSIsIl9fYXNzaWduIiwiZXh0ZW5kTmFtZXNwYWNlIiwicHJvcHMiLCJjcmVhdGVTdWJzY3JpYmUiLCJQbGF0Zm9ybUxvZ2dlclNlcnZpY2UiLCJnZXRQbGF0Zm9ybUluZm9TdHJpbmciLCJnZXRDb21wb25lbnQiLCJpc1ZlcnNpb25TZXJ2aWNlUHJvdmlkZXIiLCJzZXJ2aWNlIiwiZmlsdGVyIiwibG9nU3RyaW5nIiwiaXNCcm93c2VyIiwic2VsZiIsInNka1ZlcnNpb24iLCJpbmRleE9mIiwiaXNOb2RlIiwiZmlyZWJhc2UkMSIsInJlZ2lzdGVyQ29yZUNvbXBvbmVudHMiLCJkZWZhdWx0IiwiQ09OU1RBTlRTIiwiTk9ERV9DTElFTlQiLCJOT0RFX0FETUlOIiwiYXNzZXJ0IiwiYXNzZXJ0aW9uIiwibWVzc2FnZSIsImFzc2VydGlvbkVycm9yIiwiRXJyb3IiLCJzdHJpbmdUb0J5dGVBcnJheSIsInN0ciIsIm91dCIsImNoYXJDb2RlQXQiLCJiYXNlNjQiLCJieXRlVG9DaGFyTWFwXyIsImNoYXJUb0J5dGVNYXBfIiwiYnl0ZVRvQ2hhck1hcFdlYlNhZmVfIiwiY2hhclRvQnl0ZU1hcFdlYlNhZmVfIiwiRU5DT0RFRF9WQUxTX0JBU0UiLCJIQVNfTkFUSVZFX1NVUFBPUlQiLCJhdG9iIiwiZW5jb2RlQnl0ZUFycmF5IiwiaW5wdXQiLCJ3ZWJTYWZlIiwiQXJyYXkiLCJpc0FycmF5IiwiaW5pdF8iLCJieXRlVG9DaGFyTWFwIiwib3V0cHV0IiwiYnl0ZTEiLCJoYXZlQnl0ZTIiLCJieXRlMiIsImhhdmVCeXRlMyIsImJ5dGUzIiwib3V0Qnl0ZTEiLCJvdXRCeXRlMiIsIm91dEJ5dGUzIiwib3V0Qnl0ZTQiLCJlbmNvZGVTdHJpbmciLCJidG9hIiwiZGVjb2RlU3RyaW5nIiwiYnl0ZXMiLCJwb3MiLCJjMSIsImZyb21DaGFyQ29kZSIsImMyIiwidSIsImMzIiwiYnl0ZUFycmF5VG9TdHJpbmciLCJkZWNvZGVTdHJpbmdUb0J5dGVBcnJheSIsImNoYXJUb0J5dGVNYXAiLCJjaGFyQXQiLCJieXRlNCIsIkVOQ09ERURfVkFMUyIsIkVOQ09ERURfVkFMU19XRUJTQUZFIiwiYmFzZTY0RGVjb2RlIiwidGFyZ2V0Iiwic291cmNlIiwiY29uc3RydWN0b3IiLCJEYXRlIiwiZ2V0VGltZSIsInByb3AiLCJEZWZlcnJlZCIsInJlamVjdCIsInByb21pc2UiLCJ3cmFwQ2FsbGJhY2siLCJjYWxsYmFjayIsImNhdGNoIiwiZ2V0VUEiLCJuYXZpZ2F0b3IiLCJGaXJlYmFzZUVycm9yIiwiX3N1cGVyIiwiY29kZSIsInNldFByb3RvdHlwZU9mIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJfX2V4dGVuZHMiLCJzZXJ2aWNlTmFtZSIsImVycm9ycyIsImRhdGEiLCJjdXN0b21EYXRhIiwiZnVsbENvZGUiLCJ0ZW1wbGF0ZSIsInJlcGxhY2VUZW1wbGF0ZSIsImZ1bGxNZXNzYWdlIiwic2xpY2UiLCJyZXBsYWNlIiwiUEFUVEVSTiIsIl8iLCJ0b1N0cmluZyIsImpzb25FdmFsIiwiSlNPTiIsInBhcnNlIiwiZGVjb2RlIiwidG9rZW4iLCJoZWFkZXIiLCJjbGFpbXMiLCJzaWduYXR1cmUiLCJwYXJ0cyIsInNwbGl0IiwiU2hhMSIsImNoYWluXyIsImJ1Zl8iLCJXXyIsInBhZF8iLCJpbmJ1Zl8iLCJ0b3RhbF8iLCJibG9ja1NpemUiLCJyZXNldCIsImNvbXByZXNzXyIsImJ1ZiIsIm9mZnNldCIsIlciLCJmIiwiayIsImEiLCJiIiwidXBkYXRlIiwibGVuZ3RoTWludXNCbG9jayIsImluYnVmIiwiZGlnZXN0IiwidG90YWxCaXRzIiwiaiIsIk9ic2VydmVyUHJveHkiLCJleGVjdXRvciIsIm9uTm9PYnNlcnZlcnMiLCJvYnNlcnZlcnMiLCJ1bnN1YnNjcmliZXMiLCJvYnNlcnZlckNvdW50IiwidGFzayIsImZpbmFsaXplZCIsImZvckVhY2hPYnNlcnZlciIsIm9ic2VydmVyIiwiY2xvc2UiLCJjb21wbGV0ZSIsInN1YnNjcmliZSIsIm5leHRPck9ic2VydmVyIiwib2JqIiwibWV0aG9kcyIsIm1ldGhvZHNfMSIsIm1ldGhvZCIsImltcGxlbWVudHNBbnlNZXRob2RzIiwibm9vcCIsInVuc3ViIiwidW5zdWJzY3JpYmVPbmUiLCJmaW5hbEVycm9yIiwiZm4iLCJzZW5kT25lIiwiZXJyIiwiZXJyb3JQcmVmaXgiLCJmbk5hbWUiLCJhcmd1bWVudE51bWJlciIsIm9wdGlvbmFsIiwiYXJnTmFtZSIsImFzeW5jIiwib25FcnJvciIsImJhc2U2NEVuY29kZSIsInV0ZjhCeXRlcyIsInByb3h5IiwiaXNBZG1pbiIsImlzQnJvd3NlckV4dGVuc2lvbiIsInJ1bnRpbWUiLCJjaHJvbWUiLCJicm93c2VyIiwiaWQiLCJpc0VsZWN0cm9uIiwiaXNFbXB0eSIsImlzSUUiLCJ1YSIsImlzTW9iaWxlQ29yZG92YSIsIndpbmRvdyIsInRlc3QiLCJnbG9iYWwiLCJwcm9jZXNzIiwiaXNOb2RlU2RrIiwiaXNSZWFjdE5hdGl2ZSIsImlzVVdQIiwiaXNWYWxpZEZvcm1hdCIsImlzVmFsaWRUaW1lc3RhbXAiLCJub3ciLCJNYXRoIiwiZmxvb3IiLCJ2YWxpZFNpbmNlIiwidmFsaWRVbnRpbCIsImlzc3VlZEF0VGltZSIsImNvbnRleHRPYmoiLCJyZXMiLCJxdWVyeXN0cmluZyIsInF1ZXJ5c3RyaW5nUGFyYW1zIiwicGFyYW1zIiwiX2xvb3BfMSIsImZvckVhY2giLCJhcnJheVZhbCIsImVuY29kZVVSSUNvbXBvbmVudCIsImVudHJpZXMiLCJxdWVyeXN0cmluZ0RlY29kZSIsInNhZmVHZXQiLCJzdHJpbmdMZW5ndGgiLCJoaWdoIiwic3RyaW5naWZ5IiwidmFsaWRhdGVBcmdDb3VudCIsIm1pbkNvdW50IiwibWF4Q291bnQiLCJhcmdDb3VudCIsImFyZ0Vycm9yIiwidmFsaWRhdGVDYWxsYmFjayIsInZhbGlkYXRlQ29udGV4dE9iamVjdCIsImNvbnRleHQiLCJ2YWxpZGF0ZU5hbWVzcGFjZSIsImluc3RhbmNlRmFjdG9yeSIsImluc3RhbnRpYXRpb25Nb2RlIiwic2V0SW5zdGFudGlhdGlvbk1vZGUiLCJzZXRNdWx0aXBsZUluc3RhbmNlcyIsInNldFNlcnZpY2VQcm9wcyIsIlByb3ZpZGVyIiwiaW5zdGFuY2VzIiwiaW5zdGFuY2VzRGVmZXJyZWQiLCJub3JtYWxpemVkSWRlbnRpZmllciIsIm5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllciIsImRlZmVycmVkIiwiaW5zdGFuY2UiLCJnZXRPckluaXRpYWxpemVTZXJ2aWNlIiwic2V0Q29tcG9uZW50IiwiaXNDb21wb25lbnRFYWdlciIsIl9kIiwiX19yZWFkIiwiaW5zdGFuY2VEZWZlcnJlZCIsIl9fYXdhaXRlciIsInNlcnZpY2VzIiwiX19nZW5lcmF0b3IiLCJsYWJlbCIsImZyb20iLCJzZW50IiwiaXNDb21wb25lbnRTZXQiLCJub3JtYWxpemVJZGVudGlmaWVyRm9yRmFjdG9yeSIsInByb3ZpZGVycyIsImV4IiwiX19zcHJlYWRBcnJheXMiLCJpbCIsImpsIiwiTG9nTGV2ZWwiLCJsZXZlbFN0cmluZ1RvRW51bSIsIkRFQlVHIiwiVkVSQk9TRSIsIklORk8iLCJXQVJOIiwiRVJST1IiLCJTSUxFTlQiLCJkZWZhdWx0TG9nTGV2ZWwiLCJDb25zb2xlTWV0aG9kIiwiZGVmYXVsdExvZ0hhbmRsZXIiLCJsb2dUeXBlIiwibG9nTGV2ZWwiLCJ0b0lTT1N0cmluZyIsIl9sb2dMZXZlbCIsIl9sb2dIYW5kbGVyIiwiX3VzZXJMb2dIYW5kbGVyIiwiVHlwZUVycm9yIiwiaW5mbyIsImxldmVsIiwibmV3TGV2ZWwiLCJpbnN0IiwiY3VzdG9tTG9nTGV2ZWwiLCJ1c2VyTG9nSGFuZGxlciIsImFyZyIsImlnbm9yZWQiLCJ0b0xvd2VyQ2FzZSIsImluc3RhbmNlc18xIiwiZyIsIkZ1bmN0aW9uIiwidG9BcnJheSIsImFyciIsInByb21pc2lmeVJlcXVlc3QiLCJyZXF1ZXN0Iiwib25zdWNjZXNzIiwicmVzdWx0Iiwib25lcnJvciIsInByb21pc2lmeVJlcXVlc3RDYWxsIiwicHJvbWlzaWZ5Q3Vyc29yUmVxdWVzdENhbGwiLCJDdXJzb3IiLCJwcm94eVByb3BlcnRpZXMiLCJQcm94eUNsYXNzIiwidGFyZ2V0UHJvcCIsInByb3BlcnRpZXMiLCJwcm94eVJlcXVlc3RNZXRob2RzIiwiQ29uc3RydWN0b3IiLCJwcm94eU1ldGhvZHMiLCJwcm94eUN1cnNvclJlcXVlc3RNZXRob2RzIiwiSW5kZXgiLCJpbmRleCIsIl9pbmRleCIsImN1cnNvciIsIl9jdXJzb3IiLCJfcmVxdWVzdCIsIk9iamVjdFN0b3JlIiwic3RvcmUiLCJfc3RvcmUiLCJUcmFuc2FjdGlvbiIsImlkYlRyYW5zYWN0aW9uIiwiX3R4Iiwib25jb21wbGV0ZSIsIm9uYWJvcnQiLCJVcGdyYWRlREIiLCJkYiIsIm9sZFZlcnNpb24iLCJ0cmFuc2FjdGlvbiIsIl9kYiIsIkRCIiwiSURCSW5kZXgiLCJJREJDdXJzb3IiLCJtZXRob2ROYW1lIiwiY3JlYXRlSW5kZXgiLCJJREJPYmplY3RTdG9yZSIsIm9iamVjdFN0b3JlIiwiSURCVHJhbnNhY3Rpb24iLCJjcmVhdGVPYmplY3RTdG9yZSIsIklEQkRhdGFiYXNlIiwiZnVuY05hbWUiLCJuYXRpdmVPYmplY3QiLCJnZXRBbGwiLCJxdWVyeSIsImNvdW50IiwiaXRlbXMiLCJpdGVyYXRlQ3Vyc29yIiwiY29udGludWUiLCJvcGVuRGIiLCJ1cGdyYWRlQ2FsbGJhY2siLCJpbmRleGVkREIiLCJvbnVwZ3JhZGVuZWVkZWQiLCJldmVudCIsImRlbGV0ZURiIiwiZmFjdG9yeSIsImV4dGVuZFN0YXRpY3MiLCJfX3Byb3RvX18iLCJfXyIsImFzc2lnbiIsIl9fcmVzdCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiX19kZWNvcmF0ZSIsImRlY29yYXRvcnMiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiUmVmbGVjdCIsImRlY29yYXRlIiwiX19wYXJhbSIsInBhcmFtSW5kZXgiLCJkZWNvcmF0b3IiLCJfX21ldGFkYXRhIiwibWV0YWRhdGFLZXkiLCJtZXRhZGF0YVZhbHVlIiwibWV0YWRhdGEiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJmdWxmaWxsZWQiLCJzdGVwIiwicmVqZWN0ZWQiLCJib2R5IiwieSIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwiaXRlcmF0b3IiLCJ2Iiwib3AiLCJwb3AiLCJfX2V4cG9ydFN0YXIiLCJhciIsIl9fc3ByZWFkIiwiY29uY2F0IiwiX19hd2FpdCIsIl9fYXN5bmNHZW5lcmF0b3IiLCJhc3luY0l0ZXJhdG9yIiwicSIsInJlc3VtZSIsImZ1bGZpbGwiLCJzZXR0bGUiLCJzaGlmdCIsIl9fYXN5bmNEZWxlZ2F0b3IiLCJfX2FzeW5jVmFsdWVzIiwiX19tYWtlVGVtcGxhdGVPYmplY3QiLCJjb29rZWQiLCJyYXciLCJfX2ltcG9ydFN0YXIiLCJtb2QiLCJfX2ltcG9ydERlZmF1bHQiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0IiwicmVjZWl2ZXIiLCJwcml2YXRlTWFwIiwiX19jbGFzc1ByaXZhdGVGaWVsZFNldCIsImFhIiwiZGVmaW5lUHJvcGVydGllcyIsImNhIiwiZ2xvYmFsVGhpcyIsImJhIiwiZWEiLCJmYSIsIndyaXRhYmxlIiwiZGEiLCJoIiwic2V0VGltZW91dCIsInciLCJPYSIsIkEiLCJRIiwieGEiLCJ1ZCIsIkMiLCJyYWNlIiwiaGEiLCJpYSIsImphIiwia2EiLCJsYSIsInNwbGljZSIsIm1hIiwibmEiLCJvYSIsInBhIiwicmFuZG9tIiwicWEiLCJyYSIsInVuc2hpZnQiLCJzYSIsInRhIiwiWmEiLCJ2YSIsIndhIiwic3Vic3RyaW5nIiwic2VydmVyUmVzcG9uc2UiLCJ0b0pTT04iLCJBYSIsInRpbWVvdXQiLCJ5YSIsImhkIiwiUmEiLCJYYSIsIlVhIiwicGQiLCJyZCIsInNkIiwiemEiLCJmaXJlYmFzZUVuZHBvaW50Iiwic2VjdXJlVG9rZW5FbmRwb2ludCIsImlkZW50aXR5UGxhdGZvcm1FbmRwb2ludCIsIkJhIiwiJGdvb2dfVGhlbmFibGUiLCJzdGFjayIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJJYSIsIkhhIiwiSmEiLCJLYSIsImFkZCIsIkxhIiwieCIsIk5hIiwiUGEiLCJzb21lIiwiU2EiLCJUYSIsIk1hIiwiVmEiLCJXYSIsImZiIiwidHJpbSIsImV4ZWMiLCJZYSIsIiRhIiwiYWIiLCJiYiIsImNiIiwiZWIiLCJnYiIsImhiIiwidXNlckFnZW50IiwieiIsImliIiwiamIiLCJrYiIsImxiIiwiQiIsIm1iIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwicGFyZW50V2luZG93IiwiRWxlbWVudCIsIkxvY2F0aW9uIiwiZGlzcGxheU5hbWUiLCJuYiIsIm9iIiwicGIiLCJxYiIsInJiIiwic2IiLCJ0YiIsInViIiwidmIiLCJ3YiIsInhiIiwieWIiLCJ6YiIsIkFiIiwiQmIiLCJDYiIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiTWIiLCJOYiIsIk9iIiwiWWIiLCJSYiIsIlNiIiwiVGIiLCJVYiIsIlZiIiwiV2IiLCJYYiIsImRvY3VtZW50IiwiZG9jdW1lbnRNb2RlIiwiWmIiLCIkYiIsImFjIiwicGFyc2VGbG9hdCIsImNjIiwiUWIiLCJiYyIsIlBiIiwibWF4IiwicGFyc2VJbnQiLCJPZmZzY3JlZW5DYW52YXMiLCJnZXRDb250ZXh0IiwiZGMiLCJOdW1iZXIiLCJlYyIsImdldEVsZW1lbnRCeUlkIiwiZmMiLCJzdHlsZSIsImNzc1RleHQiLCJjbGFzc05hbWUiLCJodG1sRm9yIiwiZ2MiLCJzZXRBdHRyaWJ1dGUiLCJsYXN0SW5kZXhPZiIsIm1jIiwicGMiLCJjZWxscGFkZGluZyIsImNlbGxzcGFjaW5nIiwiY29sc3BhbiIsImZyYW1lYm9yZGVyIiwiaGVpZ2h0IiwibWF4bGVuZ3RoIiwibm9uY2UiLCJyb2xlIiwicm93c3BhbiIsInVzZW1hcCIsInZhbGlnbiIsIndpZHRoIiwiamMiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwibm9kZVR5cGUiLCJrYyIsImljIiwiY29udGVudFR5cGUiLCJjcmVhdGVFbGVtZW50IiwiaXRlbSIsImxjIiwibmMiLCJNZXNzYWdlQ2hhbm5lbCIsInBvc3RNZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRpc3BsYXkiLCJzcmMiLCJLYiIsImRvY3VtZW50RWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwid3JpdGUiLCJsb2NhdGlvbiIsInByb3RvY29sIiwiaG9zdCIsIm9yaWdpbiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9ydDIiLCJvYyIsInNjIiwic2V0SW1tZWRpYXRlIiwiV2luZG93IiwicWMiLCJyYyIsIkQiLCJ0YyIsInVjIiwidmMiLCJ3YyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiRSIsIkYiLCJCYyIsIkNjIiwiRWMiLCJyZWFzb24iLCJHYyIsIktjIiwiRmMiLCJZYyIsIlpjIiwiT2MiLCJMYyIsIk1jIiwiSWMiLCJKYyIsIk5jIiwiY2FuY2VsIiwiSGMiLCJQYyIsIlFjIiwiUmMiLCJTYyIsIlRjIiwiZnJlZXplIiwiVWMiLCJWYyIsIldjIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIlhjIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJidXR0b24iLCJzY3JlZW5ZIiwic2NyZWVuWCIsImNsaWVudFkiLCJjbGllbnRYIiwibWV0YUtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwiY3RybEtleSIsInBvaW50ZXJJZCIsInBvaW50ZXJUeXBlIiwiY2hhbmdlZFRvdWNoZXMiLCJzcmNFbGVtZW50Iiwibm9kZU5hbWUiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsInBhZ2VYIiwicGFnZVkiLCJwcmV2ZW50RGVmYXVsdCIsIjIiLCIzIiwiNCIsInJldHVyblZhbHVlIiwia2V5Q29kZSIsIiRjIiwiYWQiLCJiZCIsImxpc3RlbmVyIiwiY2FwdHVyZSIsImNkIiwiZGQiLCJmZCIsImVkIiwiZ2QiLCJqZCIsIm9uY2UiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwiYXR0YWNoRXZlbnQiLCJxZCIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJ0ZCIsInZkIiwiZGV0YWNoRXZlbnQiLCJ3ZCIsInhkIiwicGFyZW50Tm9kZSIsInlkIiwiaGFuZGxlRXZlbnQiLCJHIiwiemQiLCJBZCIsIkJkIiwiY2xlYXJUaW1lb3V0IiwiQ2QiLCJWIiwiRGQiLCJYIiwiRmQiLCJHZCIsIkhkIiwiZGlzcGF0Y2hFdmVudCIsImNsZWFyIiwiSWQiLCJLZCIsIkxkIiwiTWQiLCJOZCIsIk9kIiwiUGQiLCJRZCIsImlzTmFOIiwiYmUiLCJmZSIsImRlIiwiV2QiLCJSZCIsIlhkIiwiSCIsIllkIiwiWmQiLCIkZCIsImRlY29kZVVSSSIsImRlY29kZVVSSUNvbXBvbmVudCIsImVuY29kZVVSSSIsImFlIiwiU2QiLCJUZCIsIlVkIiwiVmQiLCJzdWJzdHIiLCJKZCIsImNlIiwiZWUiLCJnZSIsImhlIiwiaWUiLCJCb29sZWFuIiwia2UiLCJ2YWx1ZU9mIiwiaXNGaW5pdGUiLCJqZSIsImxlIiwibWUiLCJuZSIsIkkiLCJvZSIsImhyZWYiLCJwZSIsInVlIiwidmUiLCJ3ZSIsInNjcmVlbiIsImF2YWlsSGVpZ2h0IiwiYXZhaWxXaWR0aCIsInRvcCIsImxlZnQiLCJyZXNpemFibGUiLCJzdGF0dXNiYXIiLCJ0b29sYmFyIiwic2UiLCJ4ZSIsInNjcm9sbGJhcnMiLCJzdGFuZGFsb25lIiwibm9yZWZlcnJlciIsImNyZWF0ZUV2ZW50IiwiaW5pdE1vdXNlRXZlbnQiLCJvcGVuZXIiLCJub29wZW5lciIsImZvY3VzIiwiemUiLCJBZSIsIkJlIiwicmVhZHlTdGF0ZSIsIkRlIiwiRWUiLCJGZSIsIkdlIiwiV29ya2VyR2xvYmFsU2NvcGUiLCJpbXBvcnRTY3JpcHRzIiwiSGUiLCJJZSIsInRlIiwiS2UiLCJMZSIsInNvcnQiLCJKIiwiTWUiLCJsb2NhbFN0b3JhZ2UiLCJOZSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwiT2UiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsIl9fX2pzbCIsIkwiLCJDUCIsIldlIiwiWGUiLCJ2aXNpYmlsaXR5U3RhdGUiLCJaZSIsInRvVVRDU3RyaW5nIiwiJGUiLCJvbkxpbmUiLCJjb25uZWN0aW9uIiwibWluIiwiZWYiLCJjZiIsImRmIiwiZmYiLCJhYmNkIiwiSyIsImdmIiwia2YiLCJsZiIsIm1mIiwibmYiLCJvZiIsInBmIiwicWYiLCJyZiIsInVpZCIsImZhY3RvcklkIiwiZW5yb2xsbWVudFRpbWUiLCJzZiIsInRmIiwidWYiLCJ2ZiIsIndmIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiRGYiLCJFZiIsIkZmIiwicGhvbmVOdW1iZXIiLCJHZiIsIkhmIiwiSWYiLCJKZiIsIktmIiwiYXBpS2V5Iiwib3BlcmF0aW9uIiwiY29udGludWVVcmwiLCJMZiIsImxhbmd1YWdlQ29kZSIsIk1mIiwidGVuYW50SWQiLCJOZiIsInJlY292ZXJFbWFpbCIsInJlc2V0UGFzc3dvcmQiLCJyZXZlcnRTZWNvbmRGYWN0b3JBZGRpdGlvbiIsInNpZ25JbiIsInZlcmlmeUFuZENoYW5nZUVtYWlsIiwidmVyaWZ5RW1haWwiLCJPZiIsIlBmIiwiUWYiLCJSZiIsIlNmIiwiVGYiLCJVZiIsIlZmIiwiV2YiLCJYZiIsIllmIiwiWmYiLCJjYW5IYW5kbGVDb2RlSW5BcHAiLCJhbmRyb2lkUGFja2FnZU5hbWUiLCJhbmRyb2lkTWluaW11bVZlcnNpb24iLCJhbmRyb2lkSW5zdGFsbEFwcCIsImlPU0J1bmRsZUlkIiwiZHluYW1pY0xpbmtEb21haW4iLCJhZyIsImJnIiwiZGciLCJjZyIsImVnIiwiZmciLCJzdWIiLCJpc3MiLCJhdWQiLCJleHAiLCJwcm92aWRlcl9pZCIsInNpZ25faW5fcHJvdmlkZXIiLCJ0ZW5hbnQiLCJpc19hbm9ueW1vdXMiLCJnZyIsIlMiLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwic2ciLCJ0ZyIsImlzTmV3VXNlciIsImtpbmQiLCJyYXdVc2VySW5mbyIsInByb3ZpZGVySWQiLCJwcm9maWxlIiwibG9naW4iLCJzY3JlZW5OYW1lIiwidWciLCJ2ZyIsIndnIiwieGciLCJ5ZyIsInpnIiwiQWciLCJCZyIsIkRnIiwicGVuZGluZ1Rva2VuIiwicmVxdWVzdFVyaSIsIkdnIiwic2lnbkluTWV0aG9kIiwiSGciLCJpZFRva2VuIiwiYWNjZXNzVG9rZW4iLCJvYXV0aFRva2VuIiwib2F1dGhUb2tlblNlY3JldCIsIklnIiwiaWRfdG9rZW4iLCJhY2Nlc3NfdG9rZW4iLCJzZWNyZXQiLCJvYXV0aF90b2tlbl9zZWNyZXQiLCJwb3N0Qm9keSIsIkpnIiwib2F1dGhJZFRva2VuIiwib2F1dGhBY2Nlc3NUb2tlbiIsIktnIiwiaXNPQXV0aFByb3ZpZGVyIiwiTGciLCJNIiwiTWciLCJOZyIsImNyZWRlbnRpYWwiLCJPZyIsIlBnIiwiUWciLCJSZyIsIlNnIiwiVGciLCJVZyIsIlZnIiwiRU1BSUxfTElOS19TSUdOX0lOX01FVEhPRCIsIkVNQUlMX1BBU1NXT1JEX1NJR05fSU5fTUVUSE9EIiwiJGciLCJlbWFpbCIsInBhc3N3b3JkIiwiYWgiLCJiaCIsImNoIiwiZ2giLCJ2ZXJpZmljYXRpb25JZCIsInZlcmlmaWNhdGlvbkNvZGUiLCJ0ZW1wb3JhcnlQcm9vZiIsImRoIiwic2Vzc2lvbkluZm8iLCJoaCIsImF1dGgiLCJsaCIsIm1oIiwicmF3Tm9uY2UiLCJuaCIsIm9oIiwicGgiLCJldmVudElkIiwidXJsUmVzcG9uc2UiLCJzZXNzaW9uSWQiLCJxaCIsIm11bHRpRmFjdG9yU2Vzc2lvbiIsInBlbmRpbmdDcmVkZW50aWFsIiwiQ2ciLCJFZyIsIkZnIiwiTiIsIldnIiwib29iQ29kZSIsIlhnIiwiWWciLCJaZyIsIlBST1ZJREVSX0lEIiwiZWgiLCJmaCIsInZlcmlmeSIsInNlc3Npb24iLCJpaiIsInBob25lU2Vzc2lvbkluZm8iLCJpaCIsInBob25lRW5yb2xsbWVudEluZm8iLCJyZWNhcHRjaGFUb2tlbiIsImtqIiwicGhvbmVSZXNwb25zZUluZm8iLCJqaCIsIm1mYVBlbmRpbmdDcmVkZW50aWFsIiwibWZhRW5yb2xsbWVudElkIiwibXVsdGlGYWN0b3JIaW50IiwibXVsdGlGYWN0b3JVaWQiLCJwaG9uZVNpZ25JbkluZm8iLCJnaiIsImtoIiwiUEhPTkVfU0lHTl9JTl9NRVRIT0QiLCJnZXRVaWQiLCJ5aCIsInJoIiwidGgiLCJ1aCIsInZoIiwid2giLCJ4aCIsInpoIiwiQWgiLCJYTUxIdHRwUmVxdWVzdCIsIkFjdGl2ZVhPYmplY3QiLCJCaCIsIkNoIiwiWERvbWFpblJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJyZXNwb25zZSIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJvbmxvYWQiLCJvbnByb2dyZXNzIiwib250aW1lb3V0IiwiRGgiLCJFaCIsInNlbmQiLCJhYm9ydCIsInNldFJlcXVlc3RIZWFkZXIiLCJnZXRSZXNwb25zZUhlYWRlciIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsIkdoIiwiSGgiLCJGaCIsIkloIiwiSmgiLCJLaCIsIkxoIiwiTWgiLCJOaCIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiU2giLCJUaCIsIkhlYWRlcnMiLCJXaCIsInJlYWQiLCJWaCIsIlVoIiwiWGgiLCJoZWFkZXJzIiwiTyIsIlloIiwiUiIsImNyZWRlbnRpYWxzIiwiY2FjaGUiLCJmZXRjaCIsIlJlcXVlc3QiLCJhcnJheUJ1ZmZlciIsIlJlYWRhYmxlU3RyZWFtIiwiZ2V0UmVhZGVyIiwiVGV4dERlY29kZXIiLCJ0ZXh0IiwiVWludDhBcnJheSIsInN0cmVhbSIsImFwcGVuZCIsIlpoIiwiJGgiLCJhaSIsInRvVXBwZXJDYXNlIiwiYmkiLCJjaSIsIkVkIiwiUWEiLCJGb3JtRGF0YSIsIndpdGhDcmVkZW50aWFscyIsImRpIiwiZWkiLCJmaSIsImdpIiwiaGkiLCJpaSIsImppIiwibGkiLCJtaSIsInBpIiwicWkiLCJvaSIsInJpIiwidGkiLCJ1aSIsInZpIiwid2kiLCJuaSIsImdldFJlc3BvbnNlIiwibW96UmVzcG9uc2VBcnJheUJ1ZmZlciIsInhpIiwieWkiLCJ6aSIsIkFpIiwiQmkiLCJhdHRyaWJ1dGVzIiwiY2hhcnNldCIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRBdHRyaWJ1dGUiLCJMYiIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiQ2kiLCJ0YWdOYW1lIiwicmVtb3ZlQ2hpbGQiLCJEaSIsIkVpIiwic2VjdXJlVG9rZW5UaW1lb3V0IiwiRmkiLCJzZWN1cmVUb2tlbkhlYWRlcnMiLCJHaSIsImZpcmViYXNlVGltZW91dCIsIkhpIiwiZmlyZWJhc2VIZWFkZXJzIiwiSWkiLCJub2RlIiwiSmkiLCJLaSIsIkxpIiwiTWkiLCJyZSIsImdhcGkiLCJjbGllbnQiLCJQaSIsInNpIiwiT2kiLCJOaSIsImtpIiwiU2kiLCJSaSIsIlRpIiwiVWkiLCJaaSIsInNldEFwaUtleSIsImdldFRva2VuIiwic2V0VG9rZW4iLCJwYXRoIiwiYXV0aFR5cGUiLCIkaSIsImFqIiwiYmoiLCJwaG90b1VybCIsImpqIiwicGhvbmVWZXJpZmljYXRpb25JbmZvIiwibmoiLCJvaiIsInBqIiwibmVlZENvbmZpcm1hdGlvbiIsImVycm9yTWVzc2FnZSIsInFqIiwicmV0dXJuSWRwQ3JlZGVudGlhbCIsInJqIiwic2oiLCJhdXRvQ3JlYXRlIiwidGoiLCJ1aiIsImRlbGV0ZUF0dHJpYnV0ZSIsInJlcXVlc3RUeXBlIiwiY2oiLCJkaiIsImVqIiwibmV3RW1haWwiLCJmaiIsImhqIiwidmoiLCJuZXdQYXNzd29yZCIsIndqIiwieGoiLCJlbmRwb2ludCIsIlkiLCJ5aiIsIlUiLCJXaSIsInpqIiwibWoiLCJkZWxldGVQcm92aWRlciIsIkFqIiwiQmoiLCJDaiIsIllpIiwiRGoiLCJyZWNhcHRjaGFTaXRlS2V5IiwiRWoiLCJVU0VSX05PVF9GT1VORCIsIkZqIiwicmVmcmVzaFRva2VuIiwiamYiLCJyZXR1cm5TZWN1cmVUb2tlbiIsImtleUludmFsaWQiLCJpcFJlZmVyZXJCbG9ja2VkIiwiSU5WQUxJRF9DVVNUT01fVE9LRU4iLCJDUkVERU5USUFMX01JU01BVENIIiwiTUlTU0lOR19DVVNUT01fVE9LRU4iLCJJTlZBTElEX0lERU5USUZJRVIiLCJNSVNTSU5HX0NPTlRJTlVFX1VSSSIsIklOVkFMSURfRU1BSUwiLCJJTlZBTElEX1BBU1NXT1JEIiwiVVNFUl9ESVNBQkxFRCIsIk1JU1NJTkdfUEFTU1dPUkQiLCJFTUFJTF9FWElTVFMiLCJQQVNTV09SRF9MT0dJTl9ESVNBQkxFRCIsIklOVkFMSURfSURQX1JFU1BPTlNFIiwiSU5WQUxJRF9QRU5ESU5HX1RPS0VOIiwiRkVERVJBVEVEX1VTRVJfSURfQUxSRUFEWV9MSU5LRUQiLCJNSVNTSU5HX09SX0lOVkFMSURfTk9OQ0UiLCJJTlZBTElEX01FU1NBR0VfUEFZTE9BRCIsIklOVkFMSURfUkVDSVBJRU5UX0VNQUlMIiwiSU5WQUxJRF9TRU5ERVIiLCJFTUFJTF9OT1RfRk9VTkQiLCJSRVNFVF9QQVNTV09SRF9FWENFRURfTElNSVQiLCJFWFBJUkVEX09PQl9DT0RFIiwiSU5WQUxJRF9PT0JfQ09ERSIsIk1JU1NJTkdfT09CX0NPREUiLCJJTlZBTElEX1BST1ZJREVSX0lEIiwiQ1JFREVOVElBTF9UT09fT0xEX0xPR0lOX0FHQUlOIiwiSU5WQUxJRF9JRF9UT0tFTiIsIlRPS0VOX0VYUElSRUQiLCJDT1JTX1VOU1VQUE9SVEVEIiwiRFlOQU1JQ19MSU5LX05PVF9BQ1RJVkFURUQiLCJJTlZBTElEX0FQUF9JRCIsIlRPT19NQU5ZX0FUVEVNUFRTX1RSWV9MQVRFUiIsIldFQUtfUEFTU1dPUkQiLCJPUEVSQVRJT05fTk9UX0FMTE9XRUQiLCJVU0VSX0NBTkNFTExFRCIsIkNBUFRDSEFfQ0hFQ0tfRkFJTEVEIiwiSU5WQUxJRF9BUFBfQ1JFREVOVElBTCIsIklOVkFMSURfQ09ERSIsIklOVkFMSURfUEhPTkVfTlVNQkVSIiwiSU5WQUxJRF9TRVNTSU9OX0lORk8iLCJJTlZBTElEX1RFTVBPUkFSWV9QUk9PRiIsIk1JU1NJTkdfQVBQX0NSRURFTlRJQUwiLCJNSVNTSU5HX0NPREUiLCJNSVNTSU5HX1BIT05FX05VTUJFUiIsIk1JU1NJTkdfU0VTU0lPTl9JTkZPIiwiUVVPVEFfRVhDRUVERUQiLCJTRVNTSU9OX0VYUElSRUQiLCJSRUpFQ1RFRF9DUkVERU5USUFMIiwiSU5WQUxJRF9DT05USU5VRV9VUkkiLCJNSVNTSU5HX0FORFJPSURfUEFDS0FHRV9OQU1FIiwiTUlTU0lOR19JT1NfQlVORExFX0lEIiwiVU5BVVRIT1JJWkVEX0RPTUFJTiIsIklOVkFMSURfRFlOQU1JQ19MSU5LX0RPTUFJTiIsIklOVkFMSURfT0FVVEhfQ0xJRU5UX0lEIiwiSU5WQUxJRF9DRVJUX0hBU0giLCJVTlNVUFBPUlRFRF9URU5BTlRfT1BFUkFUSU9OIiwiSU5WQUxJRF9URU5BTlRfSUQiLCJURU5BTlRfSURfTUlTTUFUQ0giLCJBRE1JTl9PTkxZX09QRVJBVElPTiIsIklOVkFMSURfTUZBX1BFTkRJTkdfQ1JFREVOVElBTCIsIk1GQV9FTlJPTExNRU5UX05PVF9GT1VORCIsIk1JU1NJTkdfTUZBX1BFTkRJTkdfQ1JFREVOVElBTCIsIk1JU1NJTkdfTUZBX0VOUk9MTE1FTlRfSUQiLCJFTUFJTF9DSEFOR0VfTkVFRFNfVkVSSUZJQ0FUSU9OIiwiU0VDT05EX0ZBQ1RPUl9FWElTVFMiLCJTRUNPTkRfRkFDVE9SX0xJTUlUX0VYQ0VFREVEIiwiVU5TVVBQT1JURURfRklSU1RfRkFDVE9SIiwiVU5WRVJJRklFRF9FTUFJTCIsIkdqIiwiT2oiLCJOaiIsIk1qIiwid2hlcmUiLCJ1cmwiLCJtZXNzYWdlSGFuZGxlcnNGaWx0ZXIiLCJwb3NpdGlvbiIsImRvbnRjbGVhciIsInJlc3R5bGUiLCJzZXRIaWRlT25MZWF2ZSIsIkpqIiwicGluZyIsIkhqIiwiUGoiLCJRaiIsIlJqIiwiU2oiLCJUaiIsImF1dGhvcml6ZWREb21haW5zIiwiWGkiLCJSZWdFeHAiLCJVaiIsInJlZ2lzdGVyIiwiTGoiLCJhdXRoRXZlbnQiLCJWaiIsIlhqIiwiWWoiLCJaaiIsInJlYWN0TmF0aXZlIiwiQXN5bmNTdG9yYWdlIiwiYWsiLCJLaiIsIndlYlN0b3JhZ2VTdXBwb3J0IiwiV2oiLCJjbG9zZWQiLCJ5ZSIsImdldEl0ZW0iLCJUIiwibGsiLCJiayIsImRrIiwiZWsiLCJmayIsImdrIiwicG93Iiwic3RhcnQiLCJtZXNzYWdlQ2hhbm5lbCIsIm9uTWVzc2FnZSIsImV2ZW50VHlwZSIsImhrIiwiaWsiLCJqayIsImNrIiwia2siLCJrZXlQcm9jZXNzZWQiLCJzZXJ2aWNlV29ya2VyIiwicmVhZHkiLCJhY3RpdmUiLCJiZiIsIm5rIiwia2V5UGF0aCIsIm9iamVjdFN0b3JlTmFtZXMiLCJkZWxldGVEYXRhYmFzZSIsIm1rIiwib2siLCJwayIsInFrIiwicmsiLCJzayIsImNvbnRyb2xsZXIiLCJhZiIsIm9wZW5DdXJzb3IiLCJmYmFzZV9rZXkiLCJxZSIsInVrIiwidmsiLCJ3ayIsInhrIiwiemsiLCJ5ayIsIkFrIiwiQmsiLCJEayIsInNlc3Npb25TdG9yYWdlIiwiQ2siLCJFayIsIkJyb3dzZXIiLCJGayIsIk5vZGUiLCJHayIsIlJlYWN0TmF0aXZlIiwiSGsiLCJXb3JrZXIiLCJJayIsInBvcnRzIiwicHV0IiwidGsiLCJKayIsIk5rIiwiS2siLCJOT05FIiwiTWsiLCJPayIsIlBrIiwiUWsiLCJTayIsIlVrIiwiY2xlYXJJbnRlcnZhbCIsIlZrIiwic2V0SW50ZXJ2YWwiLCJvbGRWYWx1ZSIsIm5ld1ZhbHVlIiwiVGsiLCJibCIsIldrIiwiWWsiLCIkayIsImFsIiwiSW50MzJBcnJheSIsImNsIiwiZGwiLCJlbCIsImZsIiwiZ2wiLCJobCIsImtsIiwibGwiLCJtbCIsIm9sIiwiJGYiLCJzbCIsInBsIiwicmwiLCJoYW5kbGVPcGVuVVJMIiwic2giLCJ0bCIsIlhrIiwidWwiLCJubCIsImliaSIsImFwbiIsImFwcERpc3BsYXlOYW1lIiwicWwiLCJ2bCIsInhsIiwiemwiLCJBbCIsIkJsIiwidW5rbm93biIsInNpZ25JblZpYVJlZGlyZWN0IiwibGlua1ZpYVJlZGlyZWN0IiwicmVhdXRoVmlhUmVkaXJlY3QiLCJzaWduSW5WaWFQb3B1cCIsImxpbmtWaWFQb3B1cCIsInJlYXV0aFZpYVBvcHVwIiwiQ2wiLCJEbCIsIkVsIiwiRmwiLCJHbCIsIkhsIiwieWwiLCJJbCIsIkpsIiwiS2wiLCJMbCIsIk1sIiwid2wiLCJObCIsIk9sIiwiUGwiLCJRbCIsIlNsIiwiVWwiLCJUbCIsInVzZXIiLCJYbCIsIllsIiwiWmwiLCIkbCIsImF1dGhfdGltZSIsImlhdCIsImV4cGlyYXRpb25UaW1lIiwiYXV0aFRpbWUiLCJzaWduSW5Qcm92aWRlciIsInNpZ25JblNlY29uZEZhY3RvciIsInNpZ25faW5fc2Vjb25kX2ZhY3RvciIsImFtIiwiYm0iLCJjbSIsIlJsIiwiVmwiLCJXbCIsImNvbmZpcm0iLCJkbSIsImVtIiwiZm0iLCJpbSIsImptIiwia20iLCJsbSIsIm11bHRpRmFjdG9yIiwiZW5yb2xsZWRGYWN0b3JzIiwibW0iLCJwbSIsInNtIiwidG0iLCJ1bSIsIndtIiwiZ3JhbnRfdHlwZSIsInJlZnJlc2hfdG9rZW4iLCJRaSIsInhtIiwibGFzdFNpZ25JblRpbWUiLCJjcmVhdGlvblRpbWUiLCJ6bSIsInBob3RvVVJMIiwiYXV0aERvbWFpbiIsIkFtIiwiQm0iLCJDbSIsIloiLCJEbSIsIiQiLCJFbSIsIkZtIiwiR20iLCJIbSIsIkltIiwic3RvcCIsIkttIiwiTG0iLCJlbWFpbFZlcmlmaWVkIiwiaXNBbm9ueW1vdXMiLCJjcmVhdGVkQXQiLCJsYXN0TG9naW5BdCIsInByb3ZpZGVyRGF0YSIsIk1tIiwiTm0iLCJPbSIsIlBtIiwiUW0iLCJSbSIsIlNtIiwieW0iLCJ2bSIsIlRtIiwiVW0iLCJvbSIsIlhtIiwiV20iLCJhZGRpdGlvbmFsVXNlckluZm8iLCJvcGVyYXRpb25UeXBlIiwiWW0iLCJyZWxvYWQiLCJabSIsIiRtIiwiYW4iLCJnYSIsImJuIiwiY24iLCJkbiIsImhjIiwiZW4iLCJzdHNUb2tlbk1hbmFnZXIiLCJyZWRpcmVjdEV2ZW50SWQiLCJobiIsImdtIiwiaG0iLCJtZmFJbmZvIiwibm0iLCJxbSIsInJtIiwiWWUiLCJ1c2VycyIsImxvY2FsSWQiLCJwcm92aWRlclVzZXJJbmZvIiwicmF3SWQiLCJWbSIsInBhc3N3b3JkSGFzaCIsImxqIiwiRGMiLCJoZiIsImtuIiwibW4iLCJSayIsInBuIiwib24iLCJsbiIsIm5uIiwicm4iLCJzbiIsInRuIiwidW4iLCJ2biIsImpuIiwiSG4iLCJ3biIsIkVuIiwieG4iLCJ5biIsImxvZ0ZyYW1ld29yayIsInpuIiwiQW4iLCJCbiIsIkNuIiwiR24iLCJGbiIsIkptIiwiRG4iLCJjdXJyZW50VXNlciIsIkpuIiwiX2xhdCIsIktuIiwiTG4iLCJMayIsImxhbmd1YWdlcyIsImxhbmd1YWdlIiwidXNlckxhbmd1YWdlIiwicW4iLCJnbiIsImFkZEF1dGhUb2tlbkxpc3RlbmVyIiwiSW4iLCJyZW1vdmVBdXRoVG9rZW5MaXN0ZW5lciIsImNvbnRpbnVlVXJpIiwic2lnbmluTWV0aG9kcyIsIlZpIiwicmVuZGVyIiwiZXhlY3V0ZSIsIk1uIiwiT24iLCJQbiIsIk5uIiwic2l6ZSIsIlFuIiwiUm4iLCJTbiIsIkplIiwiVG4iLCJVbiIsImdyZWNhcHRjaGEiLCJJbmZpbml0eSIsIlZuIiwiV24iLCJYbiIsIlluIiwidGhlbWUiLCJabiIsIiRuIiwiaGFzQ2hpbGROb2RlcyIsImFvIiwiYm8iLCJjbyIsImZvIiwiZ28iLCJobyIsInNldHRpbmdzIiwiYXBwVmVyaWZpY2F0aW9uRGlzYWJsZWRGb3JUZXN0aW5nIiwiaW8iLCJqbyIsImVvIiwiZmlyc3RDaGlsZCIsImtvIiwibG8iLCJtbyIsInFvIiwidG8iLCJ1byIsInZvIiwid28iLCJ4byIsInlvIiwiUGVyc2lzdGVuY2UiLCJMT0NBTCIsIlNFU1NJT04iLCJhcHBWZXJpZmljYXRpb25EaXNhYmxlZCIsIkFjdGlvbkNvZGVJbmZvIiwiT3BlcmF0aW9uIiwiRU1BSUxfU0lHTklOIiwiUEFTU1dPUkRfUkVTRVQiLCJSRUNPVkVSX0VNQUlMIiwiUkVWRVJUX1NFQ09ORF9GQUNUT1JfQURESVRJT04iLCJWRVJJRllfQU5EX0NIQU5HRV9FTUFJTCIsIlZFUklGWV9FTUFJTCIsIkF1dGgiLCJBdXRoQ3JlZGVudGlhbCIsIkFwcCIsIlVzZXIiLCJpc0VxdWFsIiwiVU5BVVRIRU5USUNBVEVEIiwiT0siLCJDQU5DRUxMRUQiLCJVTktOT1dOIiwiSU5WQUxJRF9BUkdVTUVOVCIsIkRFQURMSU5FX0VYQ0VFREVEIiwiTk9UX0ZPVU5EIiwiQUxSRUFEWV9FWElTVFMiLCJQRVJNSVNTSU9OX0RFTklFRCIsIlJFU09VUkNFX0VYSEFVU1RFRCIsIkZBSUxFRF9QUkVDT05ESVRJT04iLCJBQk9SVEVEIiwiT1VUX09GX1JBTkdFIiwiVU5JTVBMRU1FTlRFRCIsIlVOQVZBSUxBQkxFIiwiREFUQV9MT1NTIiwiQXV0aG9yaXphdGlvbiIsImZvcmNlUmVmcmVzaCIsInNlY29uZHMiLCJuYW5vc2Vjb25kcyIsImZyb21NaWxsaXMiLCJmcm9tRGF0ZSIsInRvRGF0ZSIsInRvTWlsbGlzIiwicGFkU3RhcnQiLCJ0aW1lc3RhbXAiLCJzZWdtZW50cyIsImNoaWxkIiwibGltaXQiLCJ0dCIsImV0Iiwic3QiLCJFTVBUWSIsIml0IiwiZnJvbUJhc2U2NFN0cmluZyIsIm50IiwiZnJvbVVpbnQ4QXJyYXkiLCJ0b0Jhc2U2NCIsInRvVWludDhBcnJheSIsInJ0IiwiaXNJbnRlZ2VyIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJtYXBWYWx1ZSIsImZpZWxkcyIsIl9fdHlwZV9fIiwic3RyaW5nVmFsdWUiLCJfX2xvY2FsX3dyaXRlX3RpbWVfXyIsInRpbWVzdGFtcFZhbHVlIiwibmFub3MiLCJodCIsImJvb2xlYW5WYWx1ZSIsImJ5dGVzVmFsdWUiLCJyZWZlcmVuY2VWYWx1ZSIsImdlb1BvaW50VmFsdWUiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsImludGVnZXJWYWx1ZSIsImRvdWJsZVZhbHVlIiwiX2UiLCJhcnJheVZhbHVlIiwiZmluZCIsInByb2plY3RJZCIsImRhdGFiYXNlIiwib3QiLCJfX3ByZXZpb3VzX3ZhbHVlX18iLCJhdCIsInV0IiwiZWxlbWVudHMiLCJzZXJpYWxpemVyIiwiY3QiLCJhc051bWJlciIsIl90IiwibHQiLCJkdCIsImZpZWxkIiwidHJhbnNmb3JtIiwidHJhbnNmb3JtUmVzdWx0cyIsInVwZGF0ZVRpbWUiLCJleGlzdHMiLCJmdCIsIkV0IiwieXQiLCJJdCIsInd0IiwiUnQiLCJoYXNDb21taXR0ZWRNdXRhdGlvbnMiLCJBdCIsIlB0IiwiVnQiLCJndCIsImVtcHR5IiwicHQiLCJmaWVsZFRyYW5zZm9ybXMiLCJidCIsInZ0IiwiU3QiLCJEdCIsInByb3RvIiwiQ3QiLCJGdCIsIk50IiwiJHQiLCJrdCIsIkx0IiwibXQiLCJjb2xsZWN0aW9uR3JvdXAiLCJvcmRlckJ5IiwiZmlsdGVycyIsInN0YXJ0QXQiLCJlbmRBdCIsIk10IiwiY2Fub25pY2FsSWQiLCJPdCIsInh0IiwiQnQiLCJxdCIsIlV0IiwiUXQiLCJXdCIsImp0IiwiS3QiLCJkaXIiLCJHdCIsInp0IiwiSHQiLCJZdCIsIkp0IiwiWHQiLCJadCIsImNvbXBhcmUiLCJtYXRjaGVzIiwiYmVmb3JlIiwiVHQiLCJ0YXJnZXRJZCIsInNlcXVlbmNlTnVtYmVyIiwibGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbiIsInJlc3VtZVRva2VuIiwicm9vdCIsInJlbW92ZSIsInJpZ2h0IiwiQ2UiLCJjb2xvciIsIlJFRCIsImZpcnN0IiwibGFzdCIsInRzIiwidHJhY2siLCJkb2MiLCJlcyIsImRvY3MiLCJzcyIsImRvY0NoYW5nZXMiLCJmcm9tQ2FjaGUiLCJycyIsImhzIiwib3MiLCJhcyIsInVzIiwiY3MiLCJfcyIsImxzIiwiZHMiLCJmcyIsIlRzIiwiRXMiLCJJcyIsIndzIiwicmVtb3ZlZFRhcmdldElkcyIsIlJzIiwiQXMiLCJzdGF0ZSIsInRhcmdldElkcyIsImNhdXNlIiwibXMiLCJQcyIsIlZzIiwiZ3MiLCJwcyIsInZzIiwiU3MiLCJEcyIsIkNzIiwiRnMiLCJOcyIsIiRzIiwia3MiLCJMcyIsIk1zIiwiT3MiLCJ4cyIsIkJzIiwicXMiLCJVcyIsIlFzIiwiV3MiLCJqcyIsIktzIiwiR3MiLCJ5cyIsInJlbW92ZVRhcmdldCIsInpzIiwiSHMiLCJZcyIsIkpzIiwiWHMiLCJacyIsImJzIiwiYXNjIiwiaW4iLCJ0b1ZlcnNpb24iLCJmcm9tVmVyc2lvbiIsImZvdW5kIiwibWlzc2luZyIsInJlYWRUaW1lIiwidGFyZ2V0Q2hhbmdlIiwidGFyZ2V0Q2hhbmdlVHlwZSIsImRvY3VtZW50Q2hhbmdlIiwiZG9jdW1lbnREZWxldGUiLCJkb2N1bWVudFJlbW92ZSIsInVwZGF0ZU1hc2siLCJjdXJyZW50RG9jdW1lbnQiLCJmaWVsZFBhdGgiLCJzZXRUb1NlcnZlclZhbHVlIiwiYXBwZW5kTWlzc2luZ0VsZW1lbnRzIiwicmVtb3ZlQWxsRnJvbUFycmF5IiwiaW5jcmVtZW50IiwiZG9jdW1lbnRzIiwic3RydWN0dXJlZFF1ZXJ5IiwicGFyZW50IiwiY29sbGVjdGlvbklkIiwiYWxsRGVzY2VuZGFudHMiLCJjb21wb3NpdGVGaWx0ZXIiLCJ1bmFyeUZpbHRlciIsImZpZWxkRmlsdGVyIiwicmVkdWNlIiwiZGlyZWN0aW9uIiwiTmFOIiwibnVsbFZhbHVlIiwiZmllbGRQYXRocyIsInBsYXRmb3JtIiwiX24iLCJldmVyeSIsInBlcnNpc3RlbmNlS2V5Iiwic3NsIiwiZm9yY2VMb25nUG9sbGluZyIsImJhdGNoSWQiLCJiYXNlTXV0YXRpb25zIiwibXV0YXRpb25zIiwiYmF0Y2giLCJzdHJlYW1Ub2tlbiIsImdldEVudHJpZXMiLCJ0ciIsImVyIiwic3IiLCJpciIsIm5yIiwicnIiLCJociIsIm9yIiwicHJldmlvdXNWYWx1ZSIsInVyIiwiY3IiLCJfciIsImxyIiwiZHIiLCJUciIsIkVyIiwiSXIiLCJ3ciIsIlJyIiwiQXIiLCJtciIsIlByIiwiVnIiLCJnciIsInByIiwieXIiLCJiciIsInZyIiwiU3IiLCJEciIsIkNyIiwiSURCS2V5UmFuZ2UiLCJib3VuZCIsIkZyIiwiTnIiLCJ1cGRhdGVNZXRhZGF0YSIsImdldE1ldGFkYXRhIiwiYnl0ZVNpemUiLCIkciIsImtyIiwiTHIiLCJNciIsIk9yIiwieHIiLCJCciIsInFyIiwiVXIiLCJyYW5nZSIsIlFyIiwibG93ZXJCb3VuZCIsIldyIiwiY29sbGVjdGlvblJlYWRUaW1lSW5kZXgiLCJqciIsIktyIiwicmVhZFRpbWVJbmRleCIsIkdyIiwienIiLCJIciIsInJldmVyc2UiLCJZciIsIkpyIiwiWHIiLCJaciIsInVua25vd25Eb2N1bWVudCIsIm5vRG9jdW1lbnQiLCJoaWdoZXN0VGFyZ2V0SWQiLCJfaCIsImxhc3RSZW1vdGVTbmFwc2hvdFZlcnNpb24iLCJoaWdoZXN0TGlzdGVuU2VxdWVuY2VOdW1iZXIiLCJ0YXJnZXRDb3VudCIsIk5FR0FUSVZFX0lORklOSVRZIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJxdWVyeVRhcmdldHNJbmRleE5hbWUiLCJkb2N1bWVudFRhcmdldHNJbmRleCIsImxvY2FsV3JpdGVUaW1lTXMiLCJsYXN0TGlzdGVuU2VxdWVuY2VOdW1iZXIiLCJhbGxvd1RhYlN5bmNocm9uaXphdGlvbiIsImNsaWVudElkIiwiaXNQcmltYXJ5IiwibmV0d29ya0VuYWJsZWQiLCJpbkZvcmVncm91bmQiLCJzbyIsInJ1blRyYW5zYWN0aW9uIiwibm8iLCJybyIsIm9vIiwibmV3VmVyc2lvbiIsIl9vIiwiZG8iLCJUbyIsIkVvIiwiSW8iLCJSbyIsIm93bmVySWQiLCJsZWFzZVRpbWVzdGFtcE1zIiwiQW8iLCJQbyIsIlZvIiwicG8iLCJ1cGRhdGVUaW1lTXMiLCJjbGVhclBlcnNpc3RlbmNlIiwiU28iLCJEbyIsIkNvIiwiRm8iLCJObyIsIiRvIiwiTG8iLCJNbyIsIk9vIiwiQm8iLCJVbyIsIlFvIiwiV28iLCJ1c2VySWQiLCJLbyIsIkdvIiwidXNlck11dGF0aW9uc0luZGV4Iiwiem8iLCJIbyIsImxhc3RTdHJlYW1Ub2tlbiIsIllvIiwiSm8iLCJYbyIsIlBMQUNFSE9MREVSIiwiWm8iLCJ1cHBlckJvdW5kIiwicHJlZml4Rm9yUGF0aCIsInByZWZpeEZvclVzZXIiLCJvbmx5IiwiY3JlYXRlT3JVcGdyYWRlIiwiYXV0b0luY3JlbWVudCIsInVzZXJNdXRhdGlvbnNLZXlQYXRoIiwidW5pcXVlIiwiZGVsZXRlT2JqZWN0U3RvcmUiLCJyZW1vdmVBY2tub3dsZWRnZWRNdXRhdGlvbnMiLCJhZGREb2N1bWVudEdsb2JhbCIsImVuc3VyZVNlcXVlbmNlTnVtYmVycyIsImNyZWF0ZUNvbGxlY3Rpb25QYXJlbnRJbmRleCIsInJlYWRUaW1lSW5kZXhQYXRoIiwiY29sbGVjdGlvblJlYWRUaW1lSW5kZXhQYXRoIiwicmV3cml0ZUNhbm9uaWNhbElkcyIsImxhc3RBY2tub3dsZWRnZWRCYXRjaElkIiwicGFyZW50UGF0aCIsInF1ZXJ5VGFyZ2V0c0tleVBhdGgiLCJkb2N1bWVudFRhcmdldHNLZXlQYXRoIiwib25ibG9ja2VkIiwiX19QUklWQVRFX3Byb2Nlc3MiLCJfX1BSSVZBVEVfZW52Iiwib252ZXJzaW9uY2hhbmdlIiwiYWJvcnRlZCIsInByaW1hcnlLZXkiLCJvcGVuS2V5Q3Vyc29yIiwiZW5xdWV1ZSIsImJ1ZmZlciIsInR1IiwiZXUiLCJzdSIsIml1IiwibnUiLCJydSIsImh1Iiwib3UiLCJhdSIsInV1IiwiY3UiLCJfdSIsImx1IiwiRElTQUJMRUQiLCJkdSIsImZ1IiwiVHUiLCJFdSIsIkl1Iiwid3UiLCJSdSIsIkF1IiwibWF4VmFsdWUiLCJtdSIsIlB1IiwicGVyc2lzdGVuY2UiLCJWdSIsImd1IiwicHUiLCJ5dSIsImJ1IiwidnUiLCJTdSIsIkR1IiwiQ3UiLCJGdSIsIk51IiwiJHUiLCJrdSIsIkx1IiwiTXUiLCJPdSIsImhhc1BlbmRpbmdXcml0ZXMiLCJ4dSIsIkJ1IiwicXUiLCJVdSIsIlF1IiwiV3UiLCJqdSIsIkt1IiwiR3UiLCJ6dSIsIkh1IiwiWXUiLCJKdSIsIlh1IiwiWnUiLCJmciIsImdldFByb3RvdHlwZU9mIiwiZG9jdW1lbnRJZCIsImlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMiLCJmaXJlc3RvcmUiLCJzZWFyY2giLCJ0XyIsImVfIiwic18iLCJpXyIsIm5fIiwiYWRkVGFyZ2V0IiwibGFiZWxzIiwicl8iLCJoXyIsImFfIiwid3JpdGVSZXN1bHRzIiwiY29tbWl0VGltZSIsInVfIiwiY18iLCJ3cml0ZXMiLCJkXyIsImZfIiwibF8iLCJUXyIsIkVfIiwiSV8iLCJ3XyIsIlJfIiwiU2V0IiwiQV8iLCJtXyIsIlBfIiwiVl8iLCJjb21taXQiLCJnXyIsInBfIiwieV8iLCJiXyIsInZfIiwiU18iLCJEXyIsIkNfIiwiRl8iLCJOXyIsImtfIiwiTF8iLCJNXyIsIk9fIiwieF8iLCJCXyIsInFfIiwiVV8iLCJRXyIsImpfIiwiS18iLCJHXyIsInpfIiwiSF8iLCJZXyIsIkpfIiwiZW5hYmxlTmV0d29yayIsIlhfIiwiWl8iLCJkaXNhYmxlTmV0d29yayIsImxpc3RlbiIsIl9sIiwib18iLCJhY3RpdmVUYXJnZXRJZHMiLCJvbmxpbmVTdGF0ZSIsInN0b3JhZ2UiLCJzdG9yYWdlQXJlYSIsInNuYXBzaG90IiwidXBkYXRlRnVuY3Rpb24iLCJ2aWV3IiwiaWYiLCJfZiIsImluY2x1ZGVNZXRhZGF0YUNoYW5nZXMiLCJ0VCIsImVUIiwic1QiLCJpVCIsIm5UIiwiclQiLCJoVCIsIm9UIiwiYVQiLCJ1VCIsImluaXRpYWxpemUiLCJjVCIsIl9UIiwibFQiLCJkVCIsImZUIiwiVFQiLCJFVCIsIklUIiwid1QiLCJSVCIsIkFUIiwibVQiLCJQVCIsInN5bmNocm9uaXplVGFicyIsImNhY2hlU2l6ZUJ5dGVzIiwiVlQiLCJnVCIsInBUIiwieVQiLCJiVCIsInRlcm1pbmF0ZSIsInZUIiwiRE9NRXhjZXB0aW9uIiwid2FpdEZvclBlbmRpbmdXcml0ZXMiLCJTVCIsIkRUIiwiQ1QiLCJtdXRlZCIsIkZUIiwiTlQiLCJ0aW1lc3RhbXBzSW5TbmFwc2hvdHMiLCIkVCIsImNvbnZlcnRlciIsImtUIiwiTFQiLCJNVCIsIk9UIiwieFQiLCJCVCIsInFUIiwiZXhwZXJpbWVudGFsRm9yY2VMb25nUG9sbGluZyIsIlVUIiwiUVQiLCJXVCIsImpUIiwiS1QiLCJHVCIsInpUIiwiSFQiLCJZVCIsIlhUIiwiWlQiLCJnZXRBdXRoSGVhZGVyVmFsdWVGb3JGaXJzdFBhcnR5IiwiZW5hYmxlUGVyc2lzdGVuY2UiLCJleHBlcmltZW50YWxUYWJTeW5jaHJvbml6YXRpb24iLCJ0RSIsImVFIiwib25TbmFwc2hvdHNJblN5bmMiLCJpRSIsImNvbGxlY3Rpb24iLCJuRSIsInJFIiwiaEUiLCJvRSIsImFFIiwibWVyZ2UiLCJtZXJnZUZpZWxkcyIsIkpUIiwidUUiLCJjRSIsIl9FIiwib25TbmFwc2hvdCIsImxFIiwiZEUiLCJ3aXRoQ29udmVydGVyIiwiZkUiLCJURSIsIkVFIiwiZnJvbUZpcmVzdG9yZSIsInNlcnZlclRpbWVzdGFtcHMiLCJJRSIsIndFIiwiUkUiLCJBRSIsIm1FIiwibGltaXRUb0xhc3QiLCJQRSIsInN0YXJ0QWZ0ZXIiLCJlbmRCZWZvcmUiLCJWRSIsImdFIiwicEUiLCJ5RSIsImJFIiwidkUiLCJTRSIsIkRFIiwiQ0UiLCJvbGRJbmRleCIsIm5ld0luZGV4IiwiRkUiLCJ0b0ZpcmVzdG9yZSIsInNlcnZlclRpbWVzdGFtcCIsImFycmF5VW5pb24iLCJhcnJheVJlbW92ZSIsIkZpcmVzdG9yZSIsIkdlb1BvaW50IiwiVGltZXN0YW1wIiwiQmxvYiIsIldyaXRlQmF0Y2giLCJEb2N1bWVudFJlZmVyZW5jZSIsIkRvY3VtZW50U25hcHNob3QiLCJRdWVyeSIsIlF1ZXJ5RG9jdW1lbnRTbmFwc2hvdCIsIlF1ZXJ5U25hcHNob3QiLCJDb2xsZWN0aW9uUmVmZXJlbmNlIiwiRmllbGRQYXRoIiwiRmllbGRWYWx1ZSIsIkNBQ0hFX1NJWkVfVU5MSU1JVEVEIiwiTkUiLCIkRSIsImtFIiwiTEUiLCJNRSIsIk9FIiwieEUiLCJCRSIsInFFIiwiVUUiLCJRRSIsIldFIiwiakUiLCJLRSIsIkJhdGNoR2V0RG9jdW1lbnRzIiwiQ29tbWl0IiwiR0UiLCJ6RSIsIkhFIiwiWGhySW8iLCJsaXN0ZW5PbmNlIiwiRXZlbnRUeXBlIiwiQ09NUExFVEUiLCJnZXRMYXN0RXJyb3JDb2RlIiwiRXJyb3JDb2RlIiwiTk9fRVJST1IiLCJnZXRSZXNwb25zZUpzb24iLCJUSU1FT1VUIiwiSFRUUF9FUlJPUiIsImdldFN0YXR1cyIsImdldFJlc3BvbnNlVGV4dCIsImNyZWF0ZVdlYkNoYW5uZWxUcmFuc3BvcnQiLCJodHRwU2Vzc2lvbklkUGFyYW0iLCJpbml0TWVzc2FnZUhlYWRlcnMiLCJtZXNzYWdlVXJsUGFyYW1zIiwic2VuZFJhd0pzb24iLCJzdXBwb3J0c0Nyb3NzRG9tYWluWGhyIiwiaW50ZXJuYWxDaGFubmVsUGFyYW1zIiwiZm9yd2FyZENoYW5uZWxSZXF1ZXN0VGltZW91dE1zIiwiaHR0cEhlYWRlcnNPdmVyd3JpdGVQYXJhbSIsImNyZWF0ZVdlYkNoYW5uZWwiLCJXZWJDaGFubmVsIiwiT1BFTiIsIkNMT1NFIiwiTUVTU0FHRSIsImNyeXB0byIsIm1zQ3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwiX19QUklWQVRFX3JlZ2lzdGVyRmlyZXN0b3JlIiwiY29tbW9uanNHbG9iYWwiLCJnb29nIiwiY2xhc3NfMSIsImFicyIsIlBlcmZvcm1hbmNlTmF2aWdhdGlvblRpbWluZyIsInBlcmZvcm1hbmNlIiwiZ2V0RW50cmllc0J5VHlwZSIsIm5leHRIb3BQcm90b2NvbCIsImVfMiIsImVfMl8xIiwiY29uY3VycmVudFJlcXVlc3RMaW1pdCIsImZhc3RIYW5kc2hha2UiLCJzZW5kQmVhY29uIiwiSW1hZ2UiLCJyb3VuZCIsImhvc3RuYW1lIiwicG9ydCIsIm1lc3NhZ2VIZWFkZXJzIiwiY2xpZW50UHJvdG9jb2xIZWFkZXJSZXF1aXJlZCIsIm1lc3NhZ2VDb250ZW50VHlwZSIsIl9fc21fXyIsIl9fZGF0YV9fIiwiZ2V0TGFzdEVycm9yIiwiZXNtIiwiZXNtXzEiLCJlc21fMiIsImVzbV8zIiwiZXNtXzQiLCJlc21fNSIsImRvbU1hbmlwdWxhdGlvbiIsImxvZ0luV2FybmluZyIsImxvZ091dEJ1dHRvbiIsImxvZ0luQnV0dG9uIiwic2lnblVwQnV0dG9uIiwiQWNjb3VudEJ1dHRvbiIsIk1haW5Db250YWluZXIiLCJsb2dJbkxpc3QiLCJsb2dPdXRMaXN0IiwibWVudSIsIm1lbnVCdXR0b24iLCJ1bmRlcmxheWVyIiwicmVtb3ZlTm9kZSIsImxvZ091dCIsImNsYXNzTGlzdCIsImxvZ0luIiwidG9nZ2xlTWVudSIsImFuaW1hdGUiLCJkdXJhdGlvbiIsImVhc2luZyIsImZpbGwiLCJFUlJPUl9ERVNDUklQVElPTl9NQVAiLCJpc1NlcnZlckVycm9yIiwiaW5jbHVkZXMiLCJnZXRJbnN0YWxsYXRpb25zRW5kcG9pbnQiLCJJTlNUQUxMQVRJT05TX0FQSV9VUkwiLCJleHRyYWN0QXV0aFRva2VuSW5mb0Zyb21SZXNwb25zZSIsInJlcXVlc3RTdGF0dXMiLCJleHBpcmVzSW4iLCJyZXNwb25zZUV4cGlyZXNJbiIsImdldEVycm9yRnJvbVJlc3BvbnNlIiwicmVxdWVzdE5hbWUiLCJyZXNwb25zZUpzb24iLCJlcnJvckRhdGEiLCJqc29uIiwic2VydmVyQ29kZSIsInNlcnZlck1lc3NhZ2UiLCJzZXJ2ZXJTdGF0dXMiLCJnZXRIZWFkZXJzIiwiQWNjZXB0IiwiZ2V0SGVhZGVyc1dpdGhBdXRoIiwiYXBwQ29uZmlnIiwiSU5URVJOQUxfQVVUSF9WRVJTSU9OIiwiZ2V0QXV0aG9yaXphdGlvbkhlYWRlciIsInJldHJ5SWZTZXJ2ZXJFcnJvciIsImNyZWF0ZUluc3RhbGxhdGlvblJlcXVlc3QiLCJmaWQiLCJyZXNwb25zZVZhbHVlIiwiYXV0aFZlcnNpb24iLCJhcHBJZCIsInJlZ2lzdHJhdGlvblN0YXR1cyIsImF1dGhUb2tlbiIsInNsZWVwIiwiYnVmZmVyVG9CYXNlNjRVcmxTYWZlIiwiYXJyYXkiLCJWQUxJRF9GSURfUEFUVEVSTiIsImdlbmVyYXRlRmlkIiwiZmlkQnl0ZUFycmF5IiwiZW5jb2RlIiwiZ2V0S2V5IiwiZmlkQ2hhbmdlQ2FsbGJhY2tzIiwiZmlkQ2hhbmdlZCIsImNhbGxGaWRDaGFuZ2VDYWxsYmFja3MiLCJjaGFubmVsIiwiZ2V0QnJvYWRjYXN0Q2hhbm5lbCIsImNsb3NlQnJvYWRjYXN0Q2hhbm5lbCIsImJyb2FkY2FzdEZpZENoYW5nZSIsImNhbGxiYWNrcyIsImNhbGxiYWNrc18xIiwiY2FsbGJhY2tzXzFfMSIsImJyb2FkY2FzdENoYW5uZWwiLCJCcm9hZGNhc3RDaGFubmVsIiwiT0JKRUNUX1NUT1JFX05BTUUiLCJkYlByb21pc2UiLCJnZXREYlByb21pc2UiLCJ1cGdyYWRlREIiLCJ0eCIsInVwZGF0ZUZuIiwiZ2V0SW5zdGFsbGF0aW9uRW50cnkiLCJyZWdpc3RyYXRpb25Qcm9taXNlIiwiaW5zdGFsbGF0aW9uRW50cnkiLCJvbGRFbnRyeSIsImNsZWFyVGltZWRPdXRSZXF1ZXN0IiwidXBkYXRlT3JDcmVhdGVJbnN0YWxsYXRpb25FbnRyeSIsImVudHJ5V2l0aFByb21pc2UiLCJyZWdpc3RyYXRpb25Qcm9taXNlV2l0aEVycm9yIiwiaW5Qcm9ncmVzc0VudHJ5IiwicmVnaXN0cmF0aW9uVGltZSIsInJlZ2lzdGVyZWRJbnN0YWxsYXRpb25FbnRyeSIsInJlZ2lzdGVySW5zdGFsbGF0aW9uIiwid2FpdFVudGlsRmlkUmVnaXN0cmF0aW9uIiwidHJpZ2dlclJlZ2lzdHJhdGlvbklmTmVjZXNzYXJ5IiwiZW50cnkiLCJ1cGRhdGVJbnN0YWxsYXRpb25SZXF1ZXN0IiwiZ2VuZXJhdGVBdXRoVG9rZW5SZXF1ZXN0IiwicGxhdGZvcm1Mb2dnZXJQcm92aWRlciIsInBsYXRmb3JtTG9nZ2VyIiwiZ2V0R2VuZXJhdGVBdXRoVG9rZW5FbmRwb2ludCIsImluc3RhbGxhdGlvbiIsInJlZnJlc2hBdXRoVG9rZW4iLCJkZXBlbmRlbmNpZXMiLCJ0b2tlblByb21pc2UiLCJpc0VudHJ5UmVnaXN0ZXJlZCIsIm9sZEF1dGhUb2tlbiIsImlzQXV0aFRva2VuRXhwaXJlZCIsImlzQXV0aFRva2VuVmFsaWQiLCJ1cGRhdGVBdXRoVG9rZW5SZXF1ZXN0Iiwid2FpdFVudGlsQXV0aFRva2VuUmVxdWVzdCIsImluUHJvZ3Jlc3NBdXRoVG9rZW4iLCJyZXF1ZXN0VGltZSIsIm1ha2VBdXRoVG9rZW5SZXF1ZXN0SW5Qcm9ncmVzc0VudHJ5IiwidXBkYXRlZEluc3RhbGxhdGlvbkVudHJ5IiwiZmV0Y2hBdXRoVG9rZW5Gcm9tU2VydmVyIiwiY29tcGxldGVJbnN0YWxsYXRpb25SZWdpc3RyYXRpb24iLCJkZWxldGVJbnN0YWxsYXRpb25SZXF1ZXN0IiwiZ2V0RGVsZXRlRW5kcG9pbnQiLCJvbklkQ2hhbmdlIiwiY2FsbGJhY2tTZXQiLCJhZGRDYWxsYmFjayIsInJlbW92ZUNhbGxiYWNrIiwiZ2V0TWlzc2luZ1ZhbHVlRXJyb3IiLCJ2YWx1ZU5hbWUiLCJjb25maWdLZXlzXzEiLCJjb25maWdLZXlzXzFfMSIsImtleU5hbWUiLCJleHRyYWN0QXBwQ29uZmlnIiwiZ2V0SWQiLCJkZWxldGVJbnN0YWxsYXRpb24iLCJHdGFnQ29tbWFuZCIsIkV2ZW50TmFtZSIsIkdUQUdfVVJMIiwid3JhcE9yQ3JlYXRlR3RhZyIsImluaXRpYWxpemVkSWRQcm9taXNlc01hcCIsImRhdGFMYXllck5hbWUiLCJndGFnRnVuY3Rpb25OYW1lIiwiZ3RhZ0NvcmUiLCJfYXJncyIsImNvbW1hbmQiLCJpZE9yTmFtZU9yUGFyYW1zIiwiZ3RhZ1BhcmFtcyIsIkVWRU5UIiwiaW5pdGlhbGl6YXRpb25Qcm9taXNlc1RvV2FpdEZvciIsImdhU2VuZFRvTGlzdCIsImdhU2VuZFRvTGlzdF8xIiwic2VuZFRvSWQiLCJpbml0aWFsaXphdGlvblByb21pc2UiLCJpZFByb21pc2UiLCJDT05GSUciLCJTRVQiLCJ3cmFwR3RhZyIsIndyYXBwZWRHdGFnIiwiZ3RhZ0NvcmVGdW5jdGlvbiIsIndyYXBwZWRHdGFnRnVuY3Rpb24iLCJndGFnTmFtZSIsImdsb2JhbEluaXREb25lIiwiaW5zdGFsbGF0aW9ucyIsImFuYWx5dGljc0lkIiwic2NyaXB0VGFncyIsInRhZyIsImZpbmRHdGFnU2NyaXB0T25QYWdlIiwic2NyaXB0IiwiaGVhZCIsImluc2VydFNjcmlwdFRhZyIsImRhdGFMYXllciIsImdldE9yQ3JlYXRlRGF0YUxheWVyIiwiaW5pdGlhbGl6ZUdBSWQiLCJsb2dFdmVudCIsImV2ZW50TmFtZSIsImV2ZW50UGFyYW1zIiwiZ3RhZ0Z1bmN0aW9uIiwic2V0Q3VycmVudFNjcmVlbiIsInNldFVzZXJJZCIsInNldFVzZXJQcm9wZXJ0aWVzIiwiZmxhdFByb3BlcnRpZXMiLCJzZXRBbmFseXRpY3NDb2xsZWN0aW9uRW5hYmxlZCIsImVuYWJsZWQiLCJyZWdpc3RlckFuYWx5dGljcyIsImRhdGFiYXNlVVJMIiwic3RvcmFnZUJ1Y2tldCIsIm1lc3NhZ2luZ1NlbmRlcklkIiwibWVhc3VyZW1lbnRJZCIsImNvc25sb2UiLCJtb2RhbHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiTW9kYWwiLCJpbml0Iiwib25BdXRoU3RhdGVDaGFuZ2VkIiwic2lnblVwRm9ybSIsImNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZCIsImNyZWQiLCJtb2RhbCIsImdldEluc3RhbmNlIiwic2lnbk91dCIsImxvZ2luRm9ybSIsInNpZ25JbldpdGhFbWFpbEFuZFBhc3N3b3JkIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6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LFVBQ3ZDM25ELEVBQUU0bkQsTUFBTUMsS0FBS0gsTUFPakIvbEQsR0FBS21tRCxtQkFBbUIvbkMsSUFDaEJBLEVBQ0FxOEIsRUFBZ0JlLFFBRWhCZixFQUFnQmEsV0FNeEIsTUFBTThLLEdBQWExaUUsU0FBUzBsQixjQUFjLGdCQUMxQ2c5QyxHQUFXci9ELGlCQUFpQixTQUFXN29CLElBQ25DQSxFQUFFNnRCLGlCQUlGLE1BQU1xVCxFQUFRZ25ELEdBQVcsZ0JBQWdCL3NGLE1BQ25DZ21DLEVBQVcrbUQsR0FBVyxtQkFBbUIvc0YsTUFHL0MybUMsR0FBS3FtRCwrQkFBK0JqbkQsRUFBT0MsR0FBVWppQyxLQUFLa3BGLElBQ3RELE1BQU1DLEVBQVE3aUUsU0FBUzBsQixjQUFjLGlCQUNyQy9LLEVBQUU0bkQsTUFBTU8sWUFBWUQsR0FBT3o3RSxRQUMzQnM3RSxHQUFXLzhFLFlBTUpxYSxTQUFTMGxCLGNBQWMsV0FDL0JyaUIsaUJBQWlCLFFBQVU3b0IsSUFDOUJBLEVBQUU2dEIsaUJBQ0ZpVSxHQUFLeW1ELFlBTVQsTUFBTUMsR0FBWWhqRSxTQUFTMGxCLGNBQWMsZUFDekNzOUMsR0FBVTMvRCxpQkFBaUIsU0FBVzdvQixJQUNsQ0EsRUFBRTZ0QixpQkFDRixNQUFNcVQsRUFBUXNuRCxHQUFVLGVBQWVydEYsTUFDakNnbUMsRUFBV3FuRCxHQUFVLGtCQUFrQnJ0RixNQUM3QzJtQyxHQUFLMm1ELDJCQUEyQnZuRCxFQUFPQyxHQUFVamlDLEtBQUtrcEYsSUFDbEQvbkYsUUFBUUMsSUFBSThuRixFQUFLbG9DLE1BQ2pCLE1BQU1tb0MsRUFBUTdpRSxTQUFTMGxCLGNBQWMsZ0JBQ3JDL0ssRUFBRTRuRCxNQUFNTyxZQUFZRCxHQUFPejdFLFFBQzNCNDdFLEdBQVVyOUUiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxNCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciB0c2xpYiA9IHJlcXVpcmUoJ3RzbGliJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ0BmaXJlYmFzZS91dGlsJyk7XG52YXIgY29tcG9uZW50ID0gcmVxdWlyZSgnQGZpcmViYXNlL2NvbXBvbmVudCcpO1xudmFyIGxvZ2dlciQxID0gcmVxdWlyZSgnQGZpcmViYXNlL2xvZ2dlcicpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgX2E7XHJcbnZhciBFUlJPUlMgPSAoX2EgPSB7fSxcclxuICAgIF9hW1wibm8tYXBwXCIgLyogTk9fQVBQICovXSA9IFwiTm8gRmlyZWJhc2UgQXBwICd7JGFwcE5hbWV9JyBoYXMgYmVlbiBjcmVhdGVkIC0gXCIgK1xyXG4gICAgICAgICdjYWxsIEZpcmViYXNlIEFwcC5pbml0aWFsaXplQXBwKCknLFxyXG4gICAgX2FbXCJiYWQtYXBwLW5hbWVcIiAvKiBCQURfQVBQX05BTUUgKi9dID0gXCJJbGxlZ2FsIEFwcCBuYW1lOiAneyRhcHBOYW1lfVwiLFxyXG4gICAgX2FbXCJkdXBsaWNhdGUtYXBwXCIgLyogRFVQTElDQVRFX0FQUCAqL10gPSBcIkZpcmViYXNlIEFwcCBuYW1lZCAneyRhcHBOYW1lfScgYWxyZWFkeSBleGlzdHNcIixcclxuICAgIF9hW1wiYXBwLWRlbGV0ZWRcIiAvKiBBUFBfREVMRVRFRCAqL10gPSBcIkZpcmViYXNlIEFwcCBuYW1lZCAneyRhcHBOYW1lfScgYWxyZWFkeSBkZWxldGVkXCIsXHJcbiAgICBfYVtcImludmFsaWQtYXBwLWFyZ3VtZW50XCIgLyogSU5WQUxJRF9BUFBfQVJHVU1FTlQgKi9dID0gJ2ZpcmViYXNlLnskYXBwTmFtZX0oKSB0YWtlcyBlaXRoZXIgbm8gYXJndW1lbnQgb3IgYSAnICtcclxuICAgICAgICAnRmlyZWJhc2UgQXBwIGluc3RhbmNlLicsXHJcbiAgICBfYVtcImludmFsaWQtbG9nLWFyZ3VtZW50XCIgLyogSU5WQUxJRF9MT0dfQVJHVU1FTlQgKi9dID0gJ0ZpcnN0IGFyZ3VtZW50IHRvIGBvbkxvZ2AgbXVzdCBiZSBudWxsIG9yIGEgZnVuY3Rpb24uJyxcclxuICAgIF9hKTtcclxudmFyIEVSUk9SX0ZBQ1RPUlkgPSBuZXcgdXRpbC5FcnJvckZhY3RvcnkoJ2FwcCcsICdGaXJlYmFzZScsIEVSUk9SUyk7XG5cbnZhciBuYW1lJDEgPSBcIkBmaXJlYmFzZS9hcHBcIjtcbnZhciB2ZXJzaW9uID0gXCIwLjYuNFwiO1xuXG52YXIgbmFtZSQyID0gXCJAZmlyZWJhc2UvYW5hbHl0aWNzXCI7XG5cbnZhciBuYW1lJDMgPSBcIkBmaXJlYmFzZS9hdXRoXCI7XG5cbnZhciBuYW1lJDQgPSBcIkBmaXJlYmFzZS9kYXRhYmFzZVwiO1xuXG52YXIgbmFtZSQ1ID0gXCJAZmlyZWJhc2UvZnVuY3Rpb25zXCI7XG5cbnZhciBuYW1lJDYgPSBcIkBmaXJlYmFzZS9pbnN0YWxsYXRpb25zXCI7XG5cbnZhciBuYW1lJDcgPSBcIkBmaXJlYmFzZS9tZXNzYWdpbmdcIjtcblxudmFyIG5hbWUkOCA9IFwiQGZpcmViYXNlL3BlcmZvcm1hbmNlXCI7XG5cbnZhciBuYW1lJDkgPSBcIkBmaXJlYmFzZS9yZW1vdGUtY29uZmlnXCI7XG5cbnZhciBuYW1lJGEgPSBcIkBmaXJlYmFzZS9zdG9yYWdlXCI7XG5cbnZhciBuYW1lJGIgPSBcIkBmaXJlYmFzZS9maXJlc3RvcmVcIjtcblxudmFyIG5hbWUkYyA9IFwiZmlyZWJhc2Utd3JhcHBlclwiO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgX2EkMTtcclxudmFyIERFRkFVTFRfRU5UUllfTkFNRSA9ICdbREVGQVVMVF0nO1xyXG52YXIgUExBVEZPUk1fTE9HX1NUUklORyA9IChfYSQxID0ge30sXHJcbiAgICBfYSQxW25hbWUkMV0gPSAnZmlyZS1jb3JlJyxcclxuICAgIF9hJDFbbmFtZSQyXSA9ICdmaXJlLWFuYWx5dGljcycsXHJcbiAgICBfYSQxW25hbWUkM10gPSAnZmlyZS1hdXRoJyxcclxuICAgIF9hJDFbbmFtZSQ0XSA9ICdmaXJlLXJ0ZGInLFxyXG4gICAgX2EkMVtuYW1lJDVdID0gJ2ZpcmUtZm4nLFxyXG4gICAgX2EkMVtuYW1lJDZdID0gJ2ZpcmUtaWlkJyxcclxuICAgIF9hJDFbbmFtZSQ3XSA9ICdmaXJlLWZjbScsXHJcbiAgICBfYSQxW25hbWUkOF0gPSAnZmlyZS1wZXJmJyxcclxuICAgIF9hJDFbbmFtZSQ5XSA9ICdmaXJlLXJjJyxcclxuICAgIF9hJDFbbmFtZSRhXSA9ICdmaXJlLWdjcycsXHJcbiAgICBfYSQxW25hbWUkYl0gPSAnZmlyZS1mc3QnLFxyXG4gICAgX2EkMVsnZmlyZS1qcyddID0gJ2ZpcmUtanMnLFxyXG4gICAgX2EkMVtuYW1lJGNdID0gJ2ZpcmUtanMtYWxsJyxcclxuICAgIF9hJDEpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgbG9nZ2VyID0gbmV3IGxvZ2dlciQxLkxvZ2dlcignQGZpcmViYXNlL2FwcCcpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogR2xvYmFsIGNvbnRleHQgb2JqZWN0IGZvciBhIGNvbGxlY3Rpb24gb2Ygc2VydmljZXMgdXNpbmdcclxuICogYSBzaGFyZWQgYXV0aGVudGljYXRpb24gc3RhdGUuXHJcbiAqL1xyXG52YXIgRmlyZWJhc2VBcHBJbXBsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmlyZWJhc2VBcHBJbXBsKG9wdGlvbnMsIGNvbmZpZywgZmlyZWJhc2VfKSB7XHJcbiAgICAgICAgdmFyIGVfMSwgX2E7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmZpcmViYXNlXyA9IGZpcmViYXNlXztcclxuICAgICAgICB0aGlzLmlzRGVsZXRlZF8gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm5hbWVfID0gY29uZmlnLm5hbWU7XHJcbiAgICAgICAgdGhpcy5hdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWRfID1cclxuICAgICAgICAgICAgY29uZmlnLmF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCB8fCBmYWxzZTtcclxuICAgICAgICB0aGlzLm9wdGlvbnNfID0gdXRpbC5kZWVwQ29weShvcHRpb25zKTtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IG5ldyBjb21wb25lbnQuQ29tcG9uZW50Q29udGFpbmVyKGNvbmZpZy5uYW1lKTtcclxuICAgICAgICAvLyBhZGQgaXRzZWxmIHRvIGNvbnRhaW5lclxyXG4gICAgICAgIHRoaXMuX2FkZENvbXBvbmVudChuZXcgY29tcG9uZW50LkNvbXBvbmVudCgnYXBwJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXM7IH0sIFwiUFVCTElDXCIgLyogUFVCTElDICovKSk7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gcG9wdWxhdGUgQ29tcG9uZW50Q29udGFpbmVyIHdpdGggZXhpc3RpbmcgY29tcG9uZW50c1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfYiA9IHRzbGliLl9fdmFsdWVzKHRoaXMuZmlyZWJhc2VfLklOVEVSTkFMLmNvbXBvbmVudHMudmFsdWVzKCkpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29tcG9uZW50JDEgPSBfYy52YWx1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FkZENvbXBvbmVudChjb21wb25lbnQkMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUsIFwiYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja0Rlc3Ryb3llZF8oKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkXztcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrRGVzdHJveWVkXygpO1xyXG4gICAgICAgICAgICB0aGlzLmF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZF8gPSB2YWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmlyZWJhc2VBcHBJbXBsLnByb3RvdHlwZSwgXCJuYW1lXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja0Rlc3Ryb3llZF8oKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmFtZV87XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmlyZWJhc2VBcHBJbXBsLnByb3RvdHlwZSwgXCJvcHRpb25zXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja0Rlc3Ryb3llZF8oKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc187XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBGaXJlYmFzZUFwcEltcGwucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgICAgICBfdGhpcy5jaGVja0Rlc3Ryb3llZF8oKTtcclxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuZmlyZWJhc2VfLklOVEVSTkFMLnJlbW92ZUFwcChfdGhpcy5uYW1lXyk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChfdGhpcy5jb250YWluZXIuZ2V0UHJvdmlkZXJzKCkubWFwKGZ1bmN0aW9uIChwcm92aWRlcikgeyByZXR1cm4gcHJvdmlkZXIuZGVsZXRlKCk7IH0pKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmlzRGVsZXRlZF8gPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIGEgc2VydmljZSBpbnN0YW5jZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBhcHAgKGNyZWF0aW5nIGl0XHJcbiAgICAgKiBvbiBkZW1hbmQpLCBpZGVudGlmaWVkIGJ5IHRoZSBwYXNzZWQgaW5zdGFuY2VJZGVudGlmaWVyLlxyXG4gICAgICpcclxuICAgICAqIE5PVEU6IEN1cnJlbnRseSBzdG9yYWdlIGFuZCBmdW5jdGlvbnMgYXJlIHRoZSBvbmx5IG9uZXMgdGhhdCBhcmUgbGV2ZXJhZ2luZyB0aGlzXHJcbiAgICAgKiBmdW5jdGlvbmFsaXR5LiBUaGV5IGludm9rZSBpdCBieSBjYWxsaW5nOlxyXG4gICAgICpcclxuICAgICAqIGBgYGphdmFzY3JpcHRcclxuICAgICAqIGZpcmViYXNlLmFwcCgpLnN0b3JhZ2UoJ1NUT1JBR0UgQlVDS0VUIElEJylcclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIFRoZSBzZXJ2aWNlIG5hbWUgaXMgcGFzc2VkIHRvIHRoaXMgYWxyZWFkeVxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUuX2dldFNlcnZpY2UgPSBmdW5jdGlvbiAobmFtZSwgaW5zdGFuY2VJZGVudGlmaWVyKSB7XHJcbiAgICAgICAgaWYgKGluc3RhbmNlSWRlbnRpZmllciA9PT0gdm9pZCAwKSB7IGluc3RhbmNlSWRlbnRpZmllciA9IERFRkFVTFRfRU5UUllfTkFNRTsgfVxyXG4gICAgICAgIHRoaXMuY2hlY2tEZXN0cm95ZWRfKCk7XHJcbiAgICAgICAgLy8gZ2V0SW1tZWRpYXRlIHdpbGwgYWx3YXlzIHN1Y2NlZWQgYmVjYXVzZSBfZ2V0U2VydmljZSBpcyBvbmx5IGNhbGxlZCBmb3IgcmVnaXN0ZXJlZCBjb21wb25lbnRzLlxyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lci5nZXRQcm92aWRlcihuYW1lKS5nZXRJbW1lZGlhdGUoe1xyXG4gICAgICAgICAgICBpZGVudGlmaWVyOiBpbnN0YW5jZUlkZW50aWZpZXJcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBhIHNlcnZpY2UgaW5zdGFuY2UgZnJvbSB0aGUgY2FjaGUsIHNvIHdlIHdpbGwgY3JlYXRlIGEgbmV3IGluc3RhbmNlIGZvciB0aGlzIHNlcnZpY2VcclxuICAgICAqIHdoZW4gcGVvcGxlIHRyeSB0byBnZXQgdGhpcyBzZXJ2aWNlIGFnYWluLlxyXG4gICAgICpcclxuICAgICAqIE5PVEU6IGN1cnJlbnRseSBvbmx5IGZpcmVzdG9yZSBpcyB1c2luZyB0aGlzIGZ1bmN0aW9uYWxpdHkgdG8gc3VwcG9ydCBmaXJlc3RvcmUgc2h1dGRvd24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIHNlcnZpY2UgbmFtZVxyXG4gICAgICogQHBhcmFtIGluc3RhbmNlSWRlbnRpZmllciBpbnN0YW5jZSBpZGVudGlmaWVyIGluIGNhc2UgbXVsdGlwbGUgaW5zdGFuY2VzIGFyZSBhbGxvd2VkXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgRmlyZWJhc2VBcHBJbXBsLnByb3RvdHlwZS5fcmVtb3ZlU2VydmljZUluc3RhbmNlID0gZnVuY3Rpb24gKG5hbWUsIGluc3RhbmNlSWRlbnRpZmllcikge1xyXG4gICAgICAgIGlmIChpbnN0YW5jZUlkZW50aWZpZXIgPT09IHZvaWQgMCkgeyBpbnN0YW5jZUlkZW50aWZpZXIgPSBERUZBVUxUX0VOVFJZX05BTUU7IH1cclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmdldFByb3ZpZGVyKG5hbWUpLmNsZWFySW5zdGFuY2UoaW5zdGFuY2VJZGVudGlmaWVyKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBjb21wb25lbnQgdGhlIGNvbXBvbmVudCBiZWluZyBhZGRlZCB0byB0aGlzIGFwcCdzIGNvbnRhaW5lclxyXG4gICAgICovXHJcbiAgICBGaXJlYmFzZUFwcEltcGwucHJvdG90eXBlLl9hZGRDb21wb25lbnQgPSBmdW5jdGlvbiAoY29tcG9uZW50KSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYWRkQ29tcG9uZW50KGNvbXBvbmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhcIkNvbXBvbmVudCBcIiArIGNvbXBvbmVudC5uYW1lICsgXCIgZmFpbGVkIHRvIHJlZ2lzdGVyIHdpdGggRmlyZWJhc2VBcHAgXCIgKyB0aGlzLm5hbWUsIGUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBGaXJlYmFzZUFwcEltcGwucHJvdG90eXBlLl9hZGRPck92ZXJ3cml0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChjb21wb25lbnQpIHtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGRPck92ZXJ3cml0ZUNvbXBvbmVudChjb21wb25lbnQpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBmdW5jdGlvbiB3aWxsIHRocm93IGFuIEVycm9yIGlmIHRoZSBBcHAgaGFzIGFscmVhZHkgYmVlbiBkZWxldGVkIC1cclxuICAgICAqIHVzZSBiZWZvcmUgcGVyZm9ybWluZyBBUEkgYWN0aW9ucyBvbiB0aGUgQXBwLlxyXG4gICAgICovXHJcbiAgICBGaXJlYmFzZUFwcEltcGwucHJvdG90eXBlLmNoZWNrRGVzdHJveWVkXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0RlbGV0ZWRfKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiYXBwLWRlbGV0ZWRcIiAvKiBBUFBfREVMRVRFRCAqLywgeyBhcHBOYW1lOiB0aGlzLm5hbWVfIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gRmlyZWJhc2VBcHBJbXBsO1xyXG59KCkpO1xyXG4vLyBQcmV2ZW50IGRlYWQtY29kZSBlbGltaW5hdGlvbiBvZiB0aGVzZSBtZXRob2RzIHcvbyBpbnZhbGlkIHByb3BlcnR5XHJcbi8vIGNvcHlpbmcuXHJcbihGaXJlYmFzZUFwcEltcGwucHJvdG90eXBlLm5hbWUgJiYgRmlyZWJhc2VBcHBJbXBsLnByb3RvdHlwZS5vcHRpb25zKSB8fFxyXG4gICAgRmlyZWJhc2VBcHBJbXBsLnByb3RvdHlwZS5kZWxldGUgfHxcclxuICAgIGNvbnNvbGUubG9nKCdkYycpO1xuXG52YXIgdmVyc2lvbiQxID0gXCI3LjE0LjVcIjtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEJlY2F1c2UgYXV0aCBjYW4ndCBzaGFyZSBjb2RlIHdpdGggb3RoZXIgY29tcG9uZW50cywgd2UgYXR0YWNoIHRoZSB1dGlsaXR5IGZ1bmN0aW9uc1xyXG4gKiBpbiBhbiBpbnRlcm5hbCBuYW1lc3BhY2UgdG8gc2hhcmUgY29kZS5cclxuICogVGhpcyBmdW5jdGlvbiByZXR1cm4gYSBmaXJlYmFzZSBuYW1lc3BhY2Ugb2JqZWN0IHdpdGhvdXRcclxuICogYW55IHV0aWxpdHkgZnVuY3Rpb25zLCBzbyBpdCBjYW4gYmUgc2hhcmVkIGJldHdlZW4gdGhlIHJlZ3VsYXIgZmlyZWJhc2VOYW1lc3BhY2UgYW5kXHJcbiAqIHRoZSBsaXRlIHZlcnNpb24uXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVGaXJlYmFzZU5hbWVzcGFjZUNvcmUoZmlyZWJhc2VBcHBJbXBsKSB7XHJcbiAgICB2YXIgYXBwcyA9IHt9O1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgIHZhciBjb21wb25lbnRzID0gbmV3IE1hcCgpO1xyXG4gICAgLy8gQSBuYW1lc3BhY2UgaXMgYSBwbGFpbiBKYXZhU2NyaXB0IE9iamVjdC5cclxuICAgIHZhciBuYW1lc3BhY2UgPSB7XHJcbiAgICAgICAgLy8gSGFjayB0byBwcmV2ZW50IEJhYmVsIGZyb20gbW9kaWZ5aW5nIHRoZSBvYmplY3QgcmV0dXJuZWRcclxuICAgICAgICAvLyBhcyB0aGUgZmlyZWJhc2UgbmFtZXNwYWNlLlxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBfX2VzTW9kdWxlOiB0cnVlLFxyXG4gICAgICAgIGluaXRpYWxpemVBcHA6IGluaXRpYWxpemVBcHAsXHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGFwcDogYXBwLFxyXG4gICAgICAgIHJlZ2lzdGVyVmVyc2lvbjogcmVnaXN0ZXJWZXJzaW9uLFxyXG4gICAgICAgIHNldExvZ0xldmVsOiBsb2dnZXIkMS5zZXRMb2dMZXZlbCxcclxuICAgICAgICBvbkxvZzogb25Mb2csXHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGFwcHM6IG51bGwsXHJcbiAgICAgICAgU0RLX1ZFUlNJT046IHZlcnNpb24kMSxcclxuICAgICAgICBJTlRFUk5BTDoge1xyXG4gICAgICAgICAgICByZWdpc3RlckNvbXBvbmVudDogcmVnaXN0ZXJDb21wb25lbnQsXHJcbiAgICAgICAgICAgIHJlbW92ZUFwcDogcmVtb3ZlQXBwLFxyXG4gICAgICAgICAgICBjb21wb25lbnRzOiBjb21wb25lbnRzLFxyXG4gICAgICAgICAgICB1c2VBc1NlcnZpY2U6IHVzZUFzU2VydmljZVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyBJbmplY3QgYSBjaXJjdWxhciBkZWZhdWx0IGV4cG9ydCB0byBhbGxvdyBCYWJlbCB1c2VycyB3aG8gd2VyZSBwcmV2aW91c2x5XHJcbiAgICAvLyB1c2luZzpcclxuICAgIC8vXHJcbiAgICAvLyAgIGltcG9ydCBmaXJlYmFzZSBmcm9tICdmaXJlYmFzZSc7XHJcbiAgICAvLyAgIHdoaWNoIGJlY29tZXM6IHZhciBmaXJlYmFzZSA9IHJlcXVpcmUoJ2ZpcmViYXNlJykuZGVmYXVsdDtcclxuICAgIC8vXHJcbiAgICAvLyBpbnN0ZWFkIG9mXHJcbiAgICAvL1xyXG4gICAgLy8gICBpbXBvcnQgKiBhcyBmaXJlYmFzZSBmcm9tICdmaXJlYmFzZSc7XHJcbiAgICAvLyAgIHdoaWNoIGJlY29tZXM6IHZhciBmaXJlYmFzZSA9IHJlcXVpcmUoJ2ZpcmViYXNlJyk7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgbmFtZXNwYWNlWydkZWZhdWx0J10gPSBuYW1lc3BhY2U7XHJcbiAgICAvLyBmaXJlYmFzZS5hcHBzIGlzIGEgcmVhZC1vbmx5IGdldHRlci5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuYW1lc3BhY2UsICdhcHBzJywge1xyXG4gICAgICAgIGdldDogZ2V0QXBwc1xyXG4gICAgfSk7XHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCBieSBBcHAuZGVsZXRlKCkgLSBidXQgYmVmb3JlIGFueSBzZXJ2aWNlcyBhc3NvY2lhdGVkIHdpdGggdGhlIEFwcFxyXG4gICAgICogYXJlIGRlbGV0ZWQuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHJlbW92ZUFwcChuYW1lKSB7XHJcbiAgICAgICAgZGVsZXRlIGFwcHNbbmFtZV07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgQXBwIG9iamVjdCBmb3IgYSBnaXZlbiBuYW1lIChvciBERUZBVUxUKS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gYXBwKG5hbWUpIHtcclxuICAgICAgICBuYW1lID0gbmFtZSB8fCBERUZBVUxUX0VOVFJZX05BTUU7XHJcbiAgICAgICAgaWYgKCF1dGlsLmNvbnRhaW5zKGFwcHMsIG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwibm8tYXBwXCIgLyogTk9fQVBQICovLCB7IGFwcE5hbWU6IG5hbWUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhcHBzW25hbWVdO1xyXG4gICAgfVxyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgYXBwWydBcHAnXSA9IGZpcmViYXNlQXBwSW1wbDtcclxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemVBcHAob3B0aW9ucywgcmF3Q29uZmlnKSB7XHJcbiAgICAgICAgaWYgKHJhd0NvbmZpZyA9PT0gdm9pZCAwKSB7IHJhd0NvbmZpZyA9IHt9OyB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiByYXdDb25maWcgIT09ICdvYmplY3QnIHx8IHJhd0NvbmZpZyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB2YXIgbmFtZV8xID0gcmF3Q29uZmlnO1xyXG4gICAgICAgICAgICByYXdDb25maWcgPSB7IG5hbWU6IG5hbWVfMSB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY29uZmlnID0gcmF3Q29uZmlnO1xyXG4gICAgICAgIGlmIChjb25maWcubmFtZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGNvbmZpZy5uYW1lID0gREVGQVVMVF9FTlRSWV9OQU1FO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbmFtZSA9IGNvbmZpZy5uYW1lO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycgfHwgIW5hbWUpIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJiYWQtYXBwLW5hbWVcIiAvKiBCQURfQVBQX05BTUUgKi8sIHtcclxuICAgICAgICAgICAgICAgIGFwcE5hbWU6IFN0cmluZyhuYW1lKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHV0aWwuY29udGFpbnMoYXBwcywgbmFtZSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJkdXBsaWNhdGUtYXBwXCIgLyogRFVQTElDQVRFX0FQUCAqLywgeyBhcHBOYW1lOiBuYW1lIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYXBwID0gbmV3IGZpcmViYXNlQXBwSW1wbChvcHRpb25zLCBjb25maWcsIG5hbWVzcGFjZSk7XHJcbiAgICAgICAgYXBwc1tuYW1lXSA9IGFwcDtcclxuICAgICAgICByZXR1cm4gYXBwO1xyXG4gICAgfVxyXG4gICAgLypcclxuICAgICAqIFJldHVybiBhbiBhcnJheSBvZiBhbGwgdGhlIG5vbi1kZWxldGVkIEZpcmViYXNlQXBwcy5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZ2V0QXBwcygpIHtcclxuICAgICAgICAvLyBNYWtlIGEgY29weSBzbyBjYWxsZXIgY2Fubm90IG11dGF0ZSB0aGUgYXBwcyBsaXN0LlxyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhhcHBzKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIGFwcHNbbmFtZV07IH0pO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXJDb21wb25lbnQoY29tcG9uZW50KSB7XHJcbiAgICAgICAgdmFyIGVfMSwgX2E7XHJcbiAgICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQubmFtZTtcclxuICAgICAgICBpZiAoY29tcG9uZW50cy5oYXMoY29tcG9uZW50TmFtZSkpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKFwiVGhlcmUgd2VyZSBtdWx0aXBsZSBhdHRlbXB0cyB0byByZWdpc3RlciBjb21wb25lbnQgXCIgKyBjb21wb25lbnROYW1lICsgXCIuXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gY29tcG9uZW50LnR5cGUgPT09IFwiUFVCTElDXCIgLyogUFVCTElDICovXHJcbiAgICAgICAgICAgICAgICA/IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlW2NvbXBvbmVudE5hbWVdXHJcbiAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbXBvbmVudHMuc2V0KGNvbXBvbmVudE5hbWUsIGNvbXBvbmVudCk7XHJcbiAgICAgICAgLy8gY3JlYXRlIHNlcnZpY2UgbmFtZXNwYWNlIGZvciBwdWJsaWMgY29tcG9uZW50c1xyXG4gICAgICAgIGlmIChjb21wb25lbnQudHlwZSA9PT0gXCJQVUJMSUNcIiAvKiBQVUJMSUMgKi8pIHtcclxuICAgICAgICAgICAgLy8gVGhlIFNlcnZpY2UgbmFtZXNwYWNlIGlzIGFuIGFjY2Vzc29yIGZ1bmN0aW9uIC4uLlxyXG4gICAgICAgICAgICB2YXIgc2VydmljZU5hbWVzcGFjZSA9IGZ1bmN0aW9uIChhcHBBcmcpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcHBBcmcgPT09IHZvaWQgMCkgeyBhcHBBcmcgPSBhcHAoKTsgfVxyXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXBwQXJnW2NvbXBvbmVudE5hbWVdICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSW52YWxpZCBhcmd1bWVudC5cclxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGhhcHBlbnMgaW4gdGhlIGZvbGxvd2luZyBjYXNlOiBmaXJlYmFzZS5zdG9yYWdlKCdnczovJylcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImludmFsaWQtYXBwLWFyZ3VtZW50XCIgLyogSU5WQUxJRF9BUFBfQVJHVU1FTlQgKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwTmFtZTogY29tcG9uZW50TmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gRm9yd2FyZCBzZXJ2aWNlIGluc3RhbmNlIGxvb2t1cCB0byB0aGUgRmlyZWJhc2VBcHAuXHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcEFyZ1tjb21wb25lbnROYW1lXSgpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyAuLi4gYW5kIGEgY29udGFpbmVyIGZvciBzZXJ2aWNlLWxldmVsIHByb3BlcnRpZXMuXHJcbiAgICAgICAgICAgIGlmIChjb21wb25lbnQuc2VydmljZVByb3BzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHV0aWwuZGVlcEV4dGVuZChzZXJ2aWNlTmFtZXNwYWNlLCBjb21wb25lbnQuc2VydmljZVByb3BzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgICAgICBuYW1lc3BhY2VbY29tcG9uZW50TmFtZV0gPSBzZXJ2aWNlTmFtZXNwYWNlO1xyXG4gICAgICAgICAgICAvLyBQYXRjaCB0aGUgRmlyZWJhc2VBcHBJbXBsIHByb3RvdHlwZVxyXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgICAgICBmaXJlYmFzZUFwcEltcGwucHJvdG90eXBlW2NvbXBvbmVudE5hbWVdID1cclxuICAgICAgICAgICAgICAgIC8vIFRPRE86IFRoZSBlc2xpbnQgZGlzYWJsZSBjYW4gYmUgcmVtb3ZlZCBhbmQgdGhlICdpZ25vcmVSZXN0QXJncydcclxuICAgICAgICAgICAgICAgIC8vIG9wdGlvbiBhZGRlZCB0byB0aGUgbm8tZXhwbGljaXQtYW55IHJ1bGUgd2hlbiBFU2xpbnQgcmVsZWFzZXMgaXQuXHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VydmljZUZ4biA9IHRoaXMuX2dldFNlcnZpY2UuYmluZCh0aGlzLCBjb21wb25lbnROYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VydmljZUZ4bi5hcHBseSh0aGlzLCBjb21wb25lbnQubXVsdGlwbGVJbnN0YW5jZXMgPyBhcmdzIDogW10pO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gYWRkIHRoZSBjb21wb25lbnQgdG8gZXhpc3RpbmcgYXBwIGluc3RhbmNlc1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfYiA9IHRzbGliLl9fdmFsdWVzKE9iamVjdC5rZXlzKGFwcHMpKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFwcE5hbWUgPSBfYy52YWx1ZTtcclxuICAgICAgICAgICAgICAgIGFwcHNbYXBwTmFtZV0uX2FkZENvbXBvbmVudChjb21wb25lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29tcG9uZW50LnR5cGUgPT09IFwiUFVCTElDXCIgLyogUFVCTElDICovXHJcbiAgICAgICAgICAgID8gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgICAgIG5hbWVzcGFjZVtjb21wb25lbnROYW1lXVxyXG4gICAgICAgICAgICA6IG51bGw7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZWdpc3RlclZlcnNpb24obGlicmFyeUtleU9yTmFtZSwgdmVyc2lvbiwgdmFyaWFudCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICAvLyBUT0RPOiBXZSBjYW4gdXNlIHRoaXMgY2hlY2sgdG8gd2hpdGVsaXN0IHN0cmluZ3Mgd2hlbi9pZiB3ZSBzZXQgdXBcclxuICAgICAgICAvLyBhIGdvb2Qgd2hpdGVsaXN0IHN5c3RlbS5cclxuICAgICAgICB2YXIgbGlicmFyeSA9IChfYSA9IFBMQVRGT1JNX0xPR19TVFJJTkdbbGlicmFyeUtleU9yTmFtZV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGxpYnJhcnlLZXlPck5hbWU7XHJcbiAgICAgICAgaWYgKHZhcmlhbnQpIHtcclxuICAgICAgICAgICAgbGlicmFyeSArPSBcIi1cIiArIHZhcmlhbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBsaWJyYXJ5TWlzbWF0Y2ggPSBsaWJyYXJ5Lm1hdGNoKC9cXHN8XFwvLyk7XHJcbiAgICAgICAgdmFyIHZlcnNpb25NaXNtYXRjaCA9IHZlcnNpb24ubWF0Y2goL1xcc3xcXC8vKTtcclxuICAgICAgICBpZiAobGlicmFyeU1pc21hdGNoIHx8IHZlcnNpb25NaXNtYXRjaCkge1xyXG4gICAgICAgICAgICB2YXIgd2FybmluZyA9IFtcclxuICAgICAgICAgICAgICAgIFwiVW5hYmxlIHRvIHJlZ2lzdGVyIGxpYnJhcnkgXFxcIlwiICsgbGlicmFyeSArIFwiXFxcIiB3aXRoIHZlcnNpb24gXFxcIlwiICsgdmVyc2lvbiArIFwiXFxcIjpcIlxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICBpZiAobGlicmFyeU1pc21hdGNoKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuaW5nLnB1c2goXCJsaWJyYXJ5IG5hbWUgXFxcIlwiICsgbGlicmFyeSArIFwiXFxcIiBjb250YWlucyBpbGxlZ2FsIGNoYXJhY3RlcnMgKHdoaXRlc3BhY2Ugb3IgXFxcIi9cXFwiKVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobGlicmFyeU1pc21hdGNoICYmIHZlcnNpb25NaXNtYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgd2FybmluZy5wdXNoKCdhbmQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodmVyc2lvbk1pc21hdGNoKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuaW5nLnB1c2goXCJ2ZXJzaW9uIG5hbWUgXFxcIlwiICsgdmVyc2lvbiArIFwiXFxcIiBjb250YWlucyBpbGxlZ2FsIGNoYXJhY3RlcnMgKHdoaXRlc3BhY2Ugb3IgXFxcIi9cXFwiKVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsb2dnZXIud2Fybih3YXJuaW5nLmpvaW4oJyAnKSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVnaXN0ZXJDb21wb25lbnQobmV3IGNvbXBvbmVudC5Db21wb25lbnQobGlicmFyeSArIFwiLXZlcnNpb25cIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gKHsgbGlicmFyeTogbGlicmFyeSwgdmVyc2lvbjogdmVyc2lvbiB9KTsgfSwgXCJWRVJTSU9OXCIgLyogVkVSU0lPTiAqLykpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gb25Mb2cobG9nQ2FsbGJhY2ssIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAobG9nQ2FsbGJhY2sgIT09IG51bGwgJiYgdHlwZW9mIGxvZ0NhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiaW52YWxpZC1sb2ctYXJndW1lbnRcIiAvKiBJTlZBTElEX0xPR19BUkdVTUVOVCAqLywge1xyXG4gICAgICAgICAgICAgICAgYXBwTmFtZTogbmFtZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbG9nZ2VyJDEuc2V0VXNlckxvZ0hhbmRsZXIobG9nQ2FsbGJhY2ssIG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgLy8gTWFwIHRoZSByZXF1ZXN0ZWQgc2VydmljZSB0byBhIHJlZ2lzdGVyZWQgc2VydmljZSBuYW1lXHJcbiAgICAvLyAodXNlZCB0byBtYXAgYXV0aCB0byBzZXJ2ZXJBdXRoIHNlcnZpY2Ugd2hlbiBuZWVkZWQpLlxyXG4gICAgZnVuY3Rpb24gdXNlQXNTZXJ2aWNlKGFwcCwgbmFtZSkge1xyXG4gICAgICAgIGlmIChuYW1lID09PSAnc2VydmVyQXV0aCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB1c2VTZXJ2aWNlID0gbmFtZTtcclxuICAgICAgICByZXR1cm4gdXNlU2VydmljZTtcclxuICAgIH1cclxuICAgIHJldHVybiBuYW1lc3BhY2U7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFJldHVybiBhIGZpcmViYXNlIG5hbWVzcGFjZSBvYmplY3QuXHJcbiAqXHJcbiAqIEluIHByb2R1Y3Rpb24sIHRoaXMgd2lsbCBiZSBjYWxsZWQgZXhhY3RseSBvbmNlIGFuZCB0aGUgcmVzdWx0XHJcbiAqIGFzc2lnbmVkIHRvIHRoZSAnZmlyZWJhc2UnIGdsb2JhbC4gIEl0IG1heSBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXNcclxuICogaW4gdW5pdCB0ZXN0cy5cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUZpcmViYXNlTmFtZXNwYWNlKCkge1xyXG4gICAgdmFyIG5hbWVzcGFjZSA9IGNyZWF0ZUZpcmViYXNlTmFtZXNwYWNlQ29yZShGaXJlYmFzZUFwcEltcGwpO1xyXG4gICAgbmFtZXNwYWNlLklOVEVSTkFMID0gdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIG5hbWVzcGFjZS5JTlRFUk5BTCksIHsgY3JlYXRlRmlyZWJhc2VOYW1lc3BhY2U6IGNyZWF0ZUZpcmViYXNlTmFtZXNwYWNlLFxyXG4gICAgICAgIGV4dGVuZE5hbWVzcGFjZTogZXh0ZW5kTmFtZXNwYWNlLFxyXG4gICAgICAgIGNyZWF0ZVN1YnNjcmliZTogdXRpbC5jcmVhdGVTdWJzY3JpYmUsXHJcbiAgICAgICAgRXJyb3JGYWN0b3J5OiB1dGlsLkVycm9yRmFjdG9yeSxcclxuICAgICAgICBkZWVwRXh0ZW5kOiB1dGlsLmRlZXBFeHRlbmQgfSk7XHJcbiAgICAvKipcclxuICAgICAqIFBhdGNoIHRoZSB0b3AtbGV2ZWwgZmlyZWJhc2UgbmFtZXNwYWNlIHdpdGggYWRkaXRpb25hbCBwcm9wZXJ0aWVzLlxyXG4gICAgICpcclxuICAgICAqIGZpcmViYXNlLklOVEVSTkFMLmV4dGVuZE5hbWVzcGFjZSgpXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGV4dGVuZE5hbWVzcGFjZShwcm9wcykge1xyXG4gICAgICAgIHV0aWwuZGVlcEV4dGVuZChuYW1lc3BhY2UsIHByb3BzKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuYW1lc3BhY2U7XHJcbn1cclxudmFyIGZpcmViYXNlID0gY3JlYXRlRmlyZWJhc2VOYW1lc3BhY2UoKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIFBsYXRmb3JtTG9nZ2VyU2VydmljZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFBsYXRmb3JtTG9nZ2VyU2VydmljZShjb250YWluZXIpIHtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgIH1cclxuICAgIC8vIEluIGluaXRpYWwgaW1wbGVtZW50YXRpb24sIHRoaXMgd2lsbCBiZSBjYWxsZWQgYnkgaW5zdGFsbGF0aW9ucyBvblxyXG4gICAgLy8gYXV0aCB0b2tlbiByZWZyZXNoLCBhbmQgaW5zdGFsbGF0aW9ucyB3aWxsIHNlbmQgdGhpcyBzdHJpbmcuXHJcbiAgICBQbGF0Zm9ybUxvZ2dlclNlcnZpY2UucHJvdG90eXBlLmdldFBsYXRmb3JtSW5mb1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcHJvdmlkZXJzID0gdGhpcy5jb250YWluZXIuZ2V0UHJvdmlkZXJzKCk7XHJcbiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIHByb3ZpZGVycyBhbmQgZ2V0IGxpYnJhcnkvdmVyc2lvbiBwYWlycyBmcm9tIGFueSB0aGF0IGFyZVxyXG4gICAgICAgIC8vIHZlcnNpb24gY29tcG9uZW50cy5cclxuICAgICAgICByZXR1cm4gcHJvdmlkZXJzXHJcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHByb3ZpZGVyKSB7XHJcbiAgICAgICAgICAgIGlmIChpc1ZlcnNpb25TZXJ2aWNlUHJvdmlkZXIocHJvdmlkZXIpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2VydmljZSA9IHByb3ZpZGVyLmdldEltbWVkaWF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2UubGlicmFyeSArIFwiL1wiICsgc2VydmljZS52ZXJzaW9uO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChsb2dTdHJpbmcpIHsgcmV0dXJuIGxvZ1N0cmluZzsgfSlcclxuICAgICAgICAgICAgLmpvaW4oJyAnKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUGxhdGZvcm1Mb2dnZXJTZXJ2aWNlO1xyXG59KCkpO1xyXG4vKipcclxuICpcclxuICogQHBhcmFtIHByb3ZpZGVyIGNoZWNrIGlmIHRoaXMgcHJvdmlkZXIgcHJvdmlkZXMgYSBWZXJzaW9uU2VydmljZVxyXG4gKlxyXG4gKiBOT1RFOiBVc2luZyBQcm92aWRlcjwnYXBwLXZlcnNpb24nPiBpcyBhIGhhY2sgdG8gaW5kaWNhdGUgdGhhdCB0aGUgcHJvdmlkZXJcclxuICogcHJvdmlkZXMgVmVyc2lvblNlcnZpY2UuIFRoZSBwcm92aWRlciBpcyBub3QgbmVjZXNzYXJpbHkgYSAnYXBwLXZlcnNpb24nXHJcbiAqIHByb3ZpZGVyLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNWZXJzaW9uU2VydmljZVByb3ZpZGVyKHByb3ZpZGVyKSB7XHJcbiAgICB2YXIgY29tcG9uZW50ID0gcHJvdmlkZXIuZ2V0Q29tcG9uZW50KCk7XHJcbiAgICByZXR1cm4gKGNvbXBvbmVudCA9PT0gbnVsbCB8fCBjb21wb25lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbXBvbmVudC50eXBlKSA9PT0gXCJWRVJTSU9OXCIgLyogVkVSU0lPTiAqLztcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiByZWdpc3RlckNvcmVDb21wb25lbnRzKGZpcmViYXNlLCB2YXJpYW50KSB7XHJcbiAgICBmaXJlYmFzZS5JTlRFUk5BTC5yZWdpc3RlckNvbXBvbmVudChuZXcgY29tcG9uZW50LkNvbXBvbmVudCgncGxhdGZvcm0tbG9nZ2VyJywgZnVuY3Rpb24gKGNvbnRhaW5lcikgeyByZXR1cm4gbmV3IFBsYXRmb3JtTG9nZ2VyU2VydmljZShjb250YWluZXIpOyB9LCBcIlBSSVZBVEVcIiAvKiBQUklWQVRFICovKSk7XHJcbiAgICAvLyBSZWdpc3RlciBgYXBwYCBwYWNrYWdlLlxyXG4gICAgZmlyZWJhc2UucmVnaXN0ZXJWZXJzaW9uKG5hbWUkMSwgdmVyc2lvbiwgdmFyaWFudCk7XHJcbiAgICAvLyBSZWdpc3RlciBwbGF0Zm9ybSBTREsgaWRlbnRpZmllciAobm8gdmVyc2lvbikuXHJcbiAgICBmaXJlYmFzZS5yZWdpc3RlclZlcnNpb24oJ2ZpcmUtanMnLCAnJyk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLy8gRmlyZWJhc2UgTGl0ZSBkZXRlY3Rpb24gdGVzdFxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG5pZiAodXRpbC5pc0Jyb3dzZXIoKSAmJiBzZWxmLmZpcmViYXNlICE9PSB1bmRlZmluZWQpIHtcclxuICAgIGxvZ2dlci53YXJuKFwiXFxuICAgIFdhcm5pbmc6IEZpcmViYXNlIGlzIGFscmVhZHkgZGVmaW5lZCBpbiB0aGUgZ2xvYmFsIHNjb3BlLiBQbGVhc2UgbWFrZSBzdXJlXFxuICAgIEZpcmViYXNlIGxpYnJhcnkgaXMgb25seSBsb2FkZWQgb25jZS5cXG4gIFwiKTtcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4gICAgdmFyIHNka1ZlcnNpb24gPSBzZWxmLmZpcmViYXNlLlNES19WRVJTSU9OO1xyXG4gICAgaWYgKHNka1ZlcnNpb24gJiYgc2RrVmVyc2lvbi5pbmRleE9mKCdMSVRFJykgPj0gMCkge1xyXG4gICAgICAgIGxvZ2dlci53YXJuKFwiXFxuICAgIFdhcm5pbmc6IFlvdSBhcmUgdHJ5aW5nIHRvIGxvYWQgRmlyZWJhc2Ugd2hpbGUgdXNpbmcgRmlyZWJhc2UgUGVyZm9ybWFuY2Ugc3RhbmRhbG9uZSBzY3JpcHQuXFxuICAgIFlvdSBzaG91bGQgbG9hZCBGaXJlYmFzZSBQZXJmb3JtYW5jZSB3aXRoIHRoaXMgaW5zdGFuY2Ugb2YgRmlyZWJhc2UgdG8gYXZvaWQgbG9hZGluZyBkdXBsaWNhdGUgY29kZS5cXG4gICAgXCIpO1xyXG4gICAgfVxyXG59XHJcbnZhciBpbml0aWFsaXplQXBwID0gZmlyZWJhc2UuaW5pdGlhbGl6ZUFwcDtcclxuLy8gVE9ETzogVGhpcyBkaXNhYmxlIGNhbiBiZSByZW1vdmVkIGFuZCB0aGUgJ2lnbm9yZVJlc3RBcmdzJyBvcHRpb24gYWRkZWQgdG9cclxuLy8gdGhlIG5vLWV4cGxpY2l0LWFueSBydWxlIHdoZW4gRVNsaW50IHJlbGVhc2VzIGl0LlxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG5maXJlYmFzZS5pbml0aWFsaXplQXBwID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgLy8gRW52aXJvbm1lbnQgY2hlY2sgYmVmb3JlIGluaXRpYWxpemluZyBhcHBcclxuICAgIC8vIERvIHRoZSBjaGVjayBpbiBpbml0aWFsaXplQXBwLCBzbyBwZW9wbGUgaGF2ZSBhIGNoYW5jZSB0byBkaXNhYmxlIGl0IGJ5IHNldHRpbmcgbG9nTGV2ZWxcclxuICAgIC8vIGluIEBmaXJlYmFzZS9sb2dnZXJcclxuICAgIGlmICh1dGlsLmlzTm9kZSgpKSB7XHJcbiAgICAgICAgbG9nZ2VyLndhcm4oXCJcXG4gICAgICBXYXJuaW5nOiBUaGlzIGlzIGEgYnJvd3Nlci10YXJnZXRlZCBGaXJlYmFzZSBidW5kbGUgYnV0IGl0IGFwcGVhcnMgaXQgaXMgYmVpbmdcXG4gICAgICBydW4gaW4gYSBOb2RlIGVudmlyb25tZW50LiAgSWYgcnVubmluZyBpbiBhIE5vZGUgZW52aXJvbm1lbnQsIG1ha2Ugc3VyZSB5b3VcXG4gICAgICBhcmUgdXNpbmcgdGhlIGJ1bmRsZSBzcGVjaWZpZWQgYnkgdGhlIFxcXCJtYWluXFxcIiBmaWVsZCBpbiBwYWNrYWdlLmpzb24uXFxuICAgICAgXFxuICAgICAgSWYgeW91IGFyZSB1c2luZyBXZWJwYWNrLCB5b3UgY2FuIHNwZWNpZnkgXFxcIm1haW5cXFwiIGFzIHRoZSBmaXJzdCBpdGVtIGluXFxuICAgICAgXFxcInJlc29sdmUubWFpbkZpZWxkc1xcXCI6XFxuICAgICAgaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25maWd1cmF0aW9uL3Jlc29sdmUvI3Jlc29sdmVtYWluZmllbGRzXFxuICAgICAgXFxuICAgICAgSWYgdXNpbmcgUm9sbHVwLCB1c2UgdGhlIHJvbGx1cC1wbHVnaW4tbm9kZS1yZXNvbHZlIHBsdWdpbiBhbmQgc3BlY2lmeSBcXFwibWFpblxcXCJcXG4gICAgICBhcyB0aGUgZmlyc3QgaXRlbSBpbiBcXFwibWFpbkZpZWxkc1xcXCIsIGUuZy4gWydtYWluJywgJ21vZHVsZSddLlxcbiAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2xsdXAvcm9sbHVwLXBsdWdpbi1ub2RlLXJlc29sdmVcXG4gICAgICBcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaW5pdGlhbGl6ZUFwcC5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xyXG59O1xyXG52YXIgZmlyZWJhc2UkMSA9IGZpcmViYXNlO1xyXG5yZWdpc3RlckNvcmVDb21wb25lbnRzKGZpcmViYXNlJDEpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmaXJlYmFzZSQxO1xuZXhwb3J0cy5maXJlYmFzZSA9IGZpcmViYXNlJDE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5janMuanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciB0c2xpYiA9IHJlcXVpcmUoJ3RzbGliJyk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBAZmlsZW92ZXJ2aWV3IEZpcmViYXNlIGNvbnN0YW50cy4gIFNvbWUgb2YgdGhlc2UgKEBkZWZpbmVzKSBjYW4gYmUgb3ZlcnJpZGRlbiBhdCBjb21waWxlLXRpbWUuXHJcbiAqL1xyXG52YXIgQ09OU1RBTlRTID0ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRoaXMgaXMgdGhlIGNsaWVudCBOb2RlLmpzIFNESy5cclxuICAgICAqL1xyXG4gICAgTk9ERV9DTElFTlQ6IGZhbHNlLFxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRoaXMgaXMgdGhlIEFkbWluIE5vZGUuanMgU0RLLlxyXG4gICAgICovXHJcbiAgICBOT0RFX0FETUlOOiBmYWxzZSxcclxuICAgIC8qKlxyXG4gICAgICogRmlyZWJhc2UgU0RLIFZlcnNpb25cclxuICAgICAqL1xyXG4gICAgU0RLX1ZFUlNJT046ICcke0pTQ09SRV9WRVJTSU9OfSdcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFRocm93cyBhbiBlcnJvciBpZiB0aGUgcHJvdmlkZWQgYXNzZXJ0aW9uIGlzIGZhbHN5XHJcbiAqL1xyXG52YXIgYXNzZXJ0ID0gZnVuY3Rpb24gKGFzc2VydGlvbiwgbWVzc2FnZSkge1xyXG4gICAgaWYgKCFhc3NlcnRpb24pIHtcclxuICAgICAgICB0aHJvdyBhc3NlcnRpb25FcnJvcihtZXNzYWdlKTtcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIFJldHVybnMgYW4gRXJyb3Igb2JqZWN0IHN1aXRhYmxlIGZvciB0aHJvd2luZy5cclxuICovXHJcbnZhciBhc3NlcnRpb25FcnJvciA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICByZXR1cm4gbmV3IEVycm9yKCdGaXJlYmFzZSBEYXRhYmFzZSAoJyArXHJcbiAgICAgICAgQ09OU1RBTlRTLlNES19WRVJTSU9OICtcclxuICAgICAgICAnKSBJTlRFUk5BTCBBU1NFUlQgRkFJTEVEOiAnICtcclxuICAgICAgICBtZXNzYWdlKTtcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIHN0cmluZ1RvQnl0ZUFycmF5ID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgLy8gVE9ETyh1c2VyKTogVXNlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnMgaWYvd2hlbiBhdmFpbGFibGVcclxuICAgIHZhciBvdXQgPSBbXTtcclxuICAgIHZhciBwID0gMDtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcclxuICAgICAgICBpZiAoYyA8IDEyOCkge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IGM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGMgPCAyMDQ4KSB7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgPj4gNikgfCAxOTI7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKChjICYgMHhmYzAwKSA9PT0gMHhkODAwICYmXHJcbiAgICAgICAgICAgIGkgKyAxIDwgc3RyLmxlbmd0aCAmJlxyXG4gICAgICAgICAgICAoc3RyLmNoYXJDb2RlQXQoaSArIDEpICYgMHhmYzAwKSA9PT0gMHhkYzAwKSB7XHJcbiAgICAgICAgICAgIC8vIFN1cnJvZ2F0ZSBQYWlyXHJcbiAgICAgICAgICAgIGMgPSAweDEwMDAwICsgKChjICYgMHgwM2ZmKSA8PCAxMCkgKyAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4MDNmZik7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgPj4gMTgpIHwgMjQwO1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9ICgoYyA+PiAxMikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiAxMikgfCAyMjQ7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvdXQ7XHJcbn07XHJcbi8qKlxyXG4gKiBUdXJucyBhbiBhcnJheSBvZiBudW1iZXJzIGludG8gdGhlIHN0cmluZyBnaXZlbiBieSB0aGUgY29uY2F0ZW5hdGlvbiBvZiB0aGVcclxuICogY2hhcmFjdGVycyB0byB3aGljaCB0aGUgbnVtYmVycyBjb3JyZXNwb25kLlxyXG4gKiBAcGFyYW0gYnl0ZXMgQXJyYXkgb2YgbnVtYmVycyByZXByZXNlbnRpbmcgY2hhcmFjdGVycy5cclxuICogQHJldHVybiBTdHJpbmdpZmljYXRpb24gb2YgdGhlIGFycmF5LlxyXG4gKi9cclxudmFyIGJ5dGVBcnJheVRvU3RyaW5nID0gZnVuY3Rpb24gKGJ5dGVzKSB7XHJcbiAgICAvLyBUT0RPKHVzZXIpOiBVc2UgbmF0aXZlIGltcGxlbWVudGF0aW9ucyBpZi93aGVuIGF2YWlsYWJsZVxyXG4gICAgdmFyIG91dCA9IFtdO1xyXG4gICAgdmFyIHBvcyA9IDAsIGMgPSAwO1xyXG4gICAgd2hpbGUgKHBvcyA8IGJ5dGVzLmxlbmd0aCkge1xyXG4gICAgICAgIHZhciBjMSA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICBpZiAoYzEgPCAxMjgpIHtcclxuICAgICAgICAgICAgb3V0W2MrK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYzEgPiAxOTEgJiYgYzEgPCAyMjQpIHtcclxuICAgICAgICAgICAgdmFyIGMyID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjMSAmIDMxKSA8PCA2KSB8IChjMiAmIDYzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGMxID4gMjM5ICYmIGMxIDwgMzY1KSB7XHJcbiAgICAgICAgICAgIC8vIFN1cnJvZ2F0ZSBQYWlyXHJcbiAgICAgICAgICAgIHZhciBjMiA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgdmFyIGMzID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgICAgICB2YXIgYzQgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIHZhciB1ID0gKCgoYzEgJiA3KSA8PCAxOCkgfCAoKGMyICYgNjMpIDw8IDEyKSB8ICgoYzMgJiA2MykgPDwgNikgfCAoYzQgJiA2MykpIC1cclxuICAgICAgICAgICAgICAgIDB4MTAwMDA7XHJcbiAgICAgICAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweGQ4MDAgKyAodSA+PiAxMCkpO1xyXG4gICAgICAgICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhkYzAwICsgKHUgJiAxMDIzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgYzIgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIHZhciBjMyA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgb3V0W2MrK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYzEgJiAxNSkgPDwgMTIpIHwgKChjMiAmIDYzKSA8PCA2KSB8IChjMyAmIDYzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG91dC5qb2luKCcnKTtcclxufTtcclxuLy8gV2UgZGVmaW5lIGl0IGFzIGFuIG9iamVjdCBsaXRlcmFsIGluc3RlYWQgb2YgYSBjbGFzcyBiZWNhdXNlIGEgY2xhc3MgY29tcGlsZWQgZG93biB0byBlczUgY2FuJ3RcclxuLy8gYmUgdHJlZXNoYWtlZC4gaHR0cHM6Ly9naXRodWIuY29tL3JvbGx1cC9yb2xsdXAvaXNzdWVzLzE2OTFcclxuLy8gU3RhdGljIGxvb2t1cCBtYXBzLCBsYXppbHkgcG9wdWxhdGVkIGJ5IGluaXRfKClcclxudmFyIGJhc2U2NCA9IHtcclxuICAgIC8qKlxyXG4gICAgICogTWFwcyBieXRlcyB0byBjaGFyYWN0ZXJzLlxyXG4gICAgICovXHJcbiAgICBieXRlVG9DaGFyTWFwXzogbnVsbCxcclxuICAgIC8qKlxyXG4gICAgICogTWFwcyBjaGFyYWN0ZXJzIHRvIGJ5dGVzLlxyXG4gICAgICovXHJcbiAgICBjaGFyVG9CeXRlTWFwXzogbnVsbCxcclxuICAgIC8qKlxyXG4gICAgICogTWFwcyBieXRlcyB0byB3ZWJzYWZlIGNoYXJhY3RlcnMuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBieXRlVG9DaGFyTWFwV2ViU2FmZV86IG51bGwsXHJcbiAgICAvKipcclxuICAgICAqIE1hcHMgd2Vic2FmZSBjaGFyYWN0ZXJzIHRvIGJ5dGVzLlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgY2hhclRvQnl0ZU1hcFdlYlNhZmVfOiBudWxsLFxyXG4gICAgLyoqXHJcbiAgICAgKiBPdXIgZGVmYXVsdCBhbHBoYWJldCwgc2hhcmVkIGJldHdlZW5cclxuICAgICAqIEVOQ09ERURfVkFMUyBhbmQgRU5DT0RFRF9WQUxTX1dFQlNBRkVcclxuICAgICAqL1xyXG4gICAgRU5DT0RFRF9WQUxTX0JBU0U6ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWicgKyAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonICsgJzAxMjM0NTY3ODknLFxyXG4gICAgLyoqXHJcbiAgICAgKiBPdXIgZGVmYXVsdCBhbHBoYWJldC4gVmFsdWUgNjQgKD0pIGlzIHNwZWNpYWw7IGl0IG1lYW5zIFwibm90aGluZy5cIlxyXG4gICAgICovXHJcbiAgICBnZXQgRU5DT0RFRF9WQUxTKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkVOQ09ERURfVkFMU19CQVNFICsgJysvPSc7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBPdXIgd2Vic2FmZSBhbHBoYWJldC5cclxuICAgICAqL1xyXG4gICAgZ2V0IEVOQ09ERURfVkFMU19XRUJTQUZFKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkVOQ09ERURfVkFMU19CQVNFICsgJy1fLic7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBXaGV0aGVyIHRoaXMgYnJvd3NlciBzdXBwb3J0cyB0aGUgYXRvYiBhbmQgYnRvYSBmdW5jdGlvbnMuIFRoaXMgZXh0ZW5zaW9uXHJcbiAgICAgKiBzdGFydGVkIGF0IE1vemlsbGEgYnV0IGlzIG5vdyBpbXBsZW1lbnRlZCBieSBtYW55IGJyb3dzZXJzLiBXZSB1c2UgdGhlXHJcbiAgICAgKiBBU1NVTUVfKiB2YXJpYWJsZXMgdG8gYXZvaWQgcHVsbGluZyBpbiB0aGUgZnVsbCB1c2VyYWdlbnQgZGV0ZWN0aW9uIGxpYnJhcnlcclxuICAgICAqIGJ1dCBzdGlsbCBhbGxvd2luZyB0aGUgc3RhbmRhcmQgcGVyLWJyb3dzZXIgY29tcGlsYXRpb25zLlxyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgSEFTX05BVElWRV9TVVBQT1JUOiB0eXBlb2YgYXRvYiA9PT0gJ2Z1bmN0aW9uJyxcclxuICAgIC8qKlxyXG4gICAgICogQmFzZTY0LWVuY29kZSBhbiBhcnJheSBvZiBieXRlcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaW5wdXQgQW4gYXJyYXkgb2YgYnl0ZXMgKG51bWJlcnMgd2l0aFxyXG4gICAgICogICAgIHZhbHVlIGluIFswLCAyNTVdKSB0byBlbmNvZGUuXHJcbiAgICAgKiBAcGFyYW0gd2ViU2FmZSBCb29sZWFuIGluZGljYXRpbmcgd2Ugc2hvdWxkIHVzZSB0aGVcclxuICAgICAqICAgICBhbHRlcm5hdGl2ZSBhbHBoYWJldC5cclxuICAgICAqIEByZXR1cm4gVGhlIGJhc2U2NCBlbmNvZGVkIHN0cmluZy5cclxuICAgICAqL1xyXG4gICAgZW5jb2RlQnl0ZUFycmF5OiBmdW5jdGlvbiAoaW5wdXQsIHdlYlNhZmUpIHtcclxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdlbmNvZGVCeXRlQXJyYXkgdGFrZXMgYW4gYXJyYXkgYXMgYSBwYXJhbWV0ZXInKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pbml0XygpO1xyXG4gICAgICAgIHZhciBieXRlVG9DaGFyTWFwID0gd2ViU2FmZVxyXG4gICAgICAgICAgICA/IHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfXHJcbiAgICAgICAgICAgIDogdGhpcy5ieXRlVG9DaGFyTWFwXztcclxuICAgICAgICB2YXIgb3V0cHV0ID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkgKz0gMykge1xyXG4gICAgICAgICAgICB2YXIgYnl0ZTEgPSBpbnB1dFtpXTtcclxuICAgICAgICAgICAgdmFyIGhhdmVCeXRlMiA9IGkgKyAxIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgYnl0ZTIgPSBoYXZlQnl0ZTIgPyBpbnB1dFtpICsgMV0gOiAwO1xyXG4gICAgICAgICAgICB2YXIgaGF2ZUJ5dGUzID0gaSArIDIgPCBpbnB1dC5sZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciBieXRlMyA9IGhhdmVCeXRlMyA/IGlucHV0W2kgKyAyXSA6IDA7XHJcbiAgICAgICAgICAgIHZhciBvdXRCeXRlMSA9IGJ5dGUxID4+IDI7XHJcbiAgICAgICAgICAgIHZhciBvdXRCeXRlMiA9ICgoYnl0ZTEgJiAweDAzKSA8PCA0KSB8IChieXRlMiA+PiA0KTtcclxuICAgICAgICAgICAgdmFyIG91dEJ5dGUzID0gKChieXRlMiAmIDB4MGYpIDw8IDIpIHwgKGJ5dGUzID4+IDYpO1xyXG4gICAgICAgICAgICB2YXIgb3V0Qnl0ZTQgPSBieXRlMyAmIDB4M2Y7XHJcbiAgICAgICAgICAgIGlmICghaGF2ZUJ5dGUzKSB7XHJcbiAgICAgICAgICAgICAgICBvdXRCeXRlNCA9IDY0O1xyXG4gICAgICAgICAgICAgICAgaWYgKCFoYXZlQnl0ZTIpIHtcclxuICAgICAgICAgICAgICAgICAgICBvdXRCeXRlMyA9IDY0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG91dHB1dC5wdXNoKGJ5dGVUb0NoYXJNYXBbb3V0Qnl0ZTFdLCBieXRlVG9DaGFyTWFwW291dEJ5dGUyXSwgYnl0ZVRvQ2hhck1hcFtvdXRCeXRlM10sIGJ5dGVUb0NoYXJNYXBbb3V0Qnl0ZTRdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dC5qb2luKCcnKTtcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIEJhc2U2NC1lbmNvZGUgYSBzdHJpbmcuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGlucHV0IEEgc3RyaW5nIHRvIGVuY29kZS5cclxuICAgICAqIEBwYXJhbSB3ZWJTYWZlIElmIHRydWUsIHdlIHNob3VsZCB1c2UgdGhlXHJcbiAgICAgKiAgICAgYWx0ZXJuYXRpdmUgYWxwaGFiZXQuXHJcbiAgICAgKiBAcmV0dXJuIFRoZSBiYXNlNjQgZW5jb2RlZCBzdHJpbmcuXHJcbiAgICAgKi9cclxuICAgIGVuY29kZVN0cmluZzogZnVuY3Rpb24gKGlucHV0LCB3ZWJTYWZlKSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXQgZm9yIE1vemlsbGEgYnJvd3NlcnMgdGhhdCBpbXBsZW1lbnRcclxuICAgICAgICAvLyBhIG5hdGl2ZSBiYXNlNjQgZW5jb2RlciBpbiB0aGUgZm9ybSBvZiBcImJ0b2EvYXRvYlwiXHJcbiAgICAgICAgaWYgKHRoaXMuSEFTX05BVElWRV9TVVBQT1JUICYmICF3ZWJTYWZlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBidG9hKGlucHV0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5jb2RlQnl0ZUFycmF5KHN0cmluZ1RvQnl0ZUFycmF5KGlucHV0KSwgd2ViU2FmZSk7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBCYXNlNjQtZGVjb2RlIGEgc3RyaW5nLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpbnB1dCB0byBkZWNvZGUuXHJcbiAgICAgKiBAcGFyYW0gd2ViU2FmZSBUcnVlIGlmIHdlIHNob3VsZCB1c2UgdGhlXHJcbiAgICAgKiAgICAgYWx0ZXJuYXRpdmUgYWxwaGFiZXQuXHJcbiAgICAgKiBAcmV0dXJuIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGRlY29kZWQgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIGRlY29kZVN0cmluZzogZnVuY3Rpb24gKGlucHV0LCB3ZWJTYWZlKSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXQgZm9yIE1vemlsbGEgYnJvd3NlcnMgdGhhdCBpbXBsZW1lbnRcclxuICAgICAgICAvLyBhIG5hdGl2ZSBiYXNlNjQgZW5jb2RlciBpbiB0aGUgZm9ybSBvZiBcImJ0b2EvYXRvYlwiXHJcbiAgICAgICAgaWYgKHRoaXMuSEFTX05BVElWRV9TVVBQT1JUICYmICF3ZWJTYWZlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhdG9iKGlucHV0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGJ5dGVBcnJheVRvU3RyaW5nKHRoaXMuZGVjb2RlU3RyaW5nVG9CeXRlQXJyYXkoaW5wdXQsIHdlYlNhZmUpKTtcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIEJhc2U2NC1kZWNvZGUgYSBzdHJpbmcuXHJcbiAgICAgKlxyXG4gICAgICogSW4gYmFzZS02NCBkZWNvZGluZywgZ3JvdXBzIG9mIGZvdXIgY2hhcmFjdGVycyBhcmUgY29udmVydGVkIGludG8gdGhyZWVcclxuICAgICAqIGJ5dGVzLiAgSWYgdGhlIGVuY29kZXIgZGlkIG5vdCBhcHBseSBwYWRkaW5nLCB0aGUgaW5wdXQgbGVuZ3RoIG1heSBub3RcclxuICAgICAqIGJlIGEgbXVsdGlwbGUgb2YgNC5cclxuICAgICAqXHJcbiAgICAgKiBJbiB0aGlzIGNhc2UsIHRoZSBsYXN0IGdyb3VwIHdpbGwgaGF2ZSBmZXdlciB0aGFuIDQgY2hhcmFjdGVycywgYW5kXHJcbiAgICAgKiBwYWRkaW5nIHdpbGwgYmUgaW5mZXJyZWQuICBJZiB0aGUgZ3JvdXAgaGFzIG9uZSBvciB0d28gY2hhcmFjdGVycywgaXQgZGVjb2Rlc1xyXG4gICAgICogdG8gb25lIGJ5dGUuICBJZiB0aGUgZ3JvdXAgaGFzIHRocmVlIGNoYXJhY3RlcnMsIGl0IGRlY29kZXMgdG8gdHdvIGJ5dGVzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpbnB1dCBJbnB1dCB0byBkZWNvZGUuXHJcbiAgICAgKiBAcGFyYW0gd2ViU2FmZSBUcnVlIGlmIHdlIHNob3VsZCB1c2UgdGhlIHdlYi1zYWZlIGFscGhhYmV0LlxyXG4gICAgICogQHJldHVybiBieXRlcyByZXByZXNlbnRpbmcgdGhlIGRlY29kZWQgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIGRlY29kZVN0cmluZ1RvQnl0ZUFycmF5OiBmdW5jdGlvbiAoaW5wdXQsIHdlYlNhZmUpIHtcclxuICAgICAgICB0aGlzLmluaXRfKCk7XHJcbiAgICAgICAgdmFyIGNoYXJUb0J5dGVNYXAgPSB3ZWJTYWZlXHJcbiAgICAgICAgICAgID8gdGhpcy5jaGFyVG9CeXRlTWFwV2ViU2FmZV9cclxuICAgICAgICAgICAgOiB0aGlzLmNoYXJUb0J5dGVNYXBfO1xyXG4gICAgICAgIHZhciBvdXRwdXQgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDspIHtcclxuICAgICAgICAgICAgdmFyIGJ5dGUxID0gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSsrKV07XHJcbiAgICAgICAgICAgIHZhciBoYXZlQnl0ZTIgPSBpIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgYnl0ZTIgPSBoYXZlQnl0ZTIgPyBjaGFyVG9CeXRlTWFwW2lucHV0LmNoYXJBdChpKV0gOiAwO1xyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgIHZhciBoYXZlQnl0ZTMgPSBpIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgYnl0ZTMgPSBoYXZlQnl0ZTMgPyBjaGFyVG9CeXRlTWFwW2lucHV0LmNoYXJBdChpKV0gOiA2NDtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICB2YXIgaGF2ZUJ5dGU0ID0gaSA8IGlucHV0Lmxlbmd0aDtcclxuICAgICAgICAgICAgdmFyIGJ5dGU0ID0gaGF2ZUJ5dGU0ID8gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSldIDogNjQ7XHJcbiAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgaWYgKGJ5dGUxID09IG51bGwgfHwgYnl0ZTIgPT0gbnVsbCB8fCBieXRlMyA9PSBudWxsIHx8IGJ5dGU0ID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIG91dEJ5dGUxID0gKGJ5dGUxIDw8IDIpIHwgKGJ5dGUyID4+IDQpO1xyXG4gICAgICAgICAgICBvdXRwdXQucHVzaChvdXRCeXRlMSk7XHJcbiAgICAgICAgICAgIGlmIChieXRlMyAhPT0gNjQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBvdXRCeXRlMiA9ICgoYnl0ZTIgPDwgNCkgJiAweGYwKSB8IChieXRlMyA+PiAyKTtcclxuICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKG91dEJ5dGUyKTtcclxuICAgICAgICAgICAgICAgIGlmIChieXRlNCAhPT0gNjQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgb3V0Qnl0ZTMgPSAoKGJ5dGUzIDw8IDYpICYgMHhjMCkgfCBieXRlNDtcclxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQucHVzaChvdXRCeXRlMyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIExhenkgc3RhdGljIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9uLiBDYWxsZWQgYmVmb3JlXHJcbiAgICAgKiBhY2Nlc3NpbmcgYW55IG9mIHRoZSBzdGF0aWMgbWFwIHZhcmlhYmxlcy5cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGluaXRfOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmJ5dGVUb0NoYXJNYXBfKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcF8gPSB7fTtcclxuICAgICAgICAgICAgdGhpcy5jaGFyVG9CeXRlTWFwXyA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLmJ5dGVUb0NoYXJNYXBXZWJTYWZlXyA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlXyA9IHt9O1xyXG4gICAgICAgICAgICAvLyBXZSB3YW50IHF1aWNrIG1hcHBpbmdzIGJhY2sgYW5kIGZvcnRoLCBzbyB3ZSBwcmVjb21wdXRlIHR3byBtYXBzLlxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuRU5DT0RFRF9WQUxTLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ5dGVUb0NoYXJNYXBfW2ldID0gdGhpcy5FTkNPREVEX1ZBTFMuY2hhckF0KGkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyVG9CeXRlTWFwX1t0aGlzLmJ5dGVUb0NoYXJNYXBfW2ldXSA9IGk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ5dGVUb0NoYXJNYXBXZWJTYWZlX1tpXSA9IHRoaXMuRU5DT0RFRF9WQUxTX1dFQlNBRkUuY2hhckF0KGkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyVG9CeXRlTWFwV2ViU2FmZV9bdGhpcy5ieXRlVG9DaGFyTWFwV2ViU2FmZV9baV1dID0gaTtcclxuICAgICAgICAgICAgICAgIC8vIEJlIGZvcmdpdmluZyB3aGVuIGRlY29kaW5nIGFuZCBjb3JyZWN0bHkgZGVjb2RlIGJvdGggZW5jb2RpbmdzLlxyXG4gICAgICAgICAgICAgICAgaWYgKGkgPj0gdGhpcy5FTkNPREVEX1ZBTFNfQkFTRS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBfW3RoaXMuRU5DT0RFRF9WQUxTX1dFQlNBRkUuY2hhckF0KGkpXSA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyVG9CeXRlTWFwV2ViU2FmZV9bdGhpcy5FTkNPREVEX1ZBTFMuY2hhckF0KGkpXSA9IGk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBVUkwtc2FmZSBiYXNlNjQgZW5jb2RpbmdcclxuICovXHJcbnZhciBiYXNlNjRFbmNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICB2YXIgdXRmOEJ5dGVzID0gc3RyaW5nVG9CeXRlQXJyYXkoc3RyKTtcclxuICAgIHJldHVybiBiYXNlNjQuZW5jb2RlQnl0ZUFycmF5KHV0ZjhCeXRlcywgdHJ1ZSk7XHJcbn07XHJcbi8qKlxyXG4gKiBVUkwtc2FmZSBiYXNlNjQgZGVjb2RpbmdcclxuICpcclxuICogTk9URTogRE8gTk9UIHVzZSB0aGUgZ2xvYmFsIGF0b2IoKSBmdW5jdGlvbiAtIGl0IGRvZXMgTk9UIHN1cHBvcnQgdGhlXHJcbiAqIGJhc2U2NFVybCB2YXJpYW50IGVuY29kaW5nLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyIFRvIGJlIGRlY29kZWRcclxuICogQHJldHVybiBEZWNvZGVkIHJlc3VsdCwgaWYgcG9zc2libGVcclxuICovXHJcbnZhciBiYXNlNjREZWNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiBiYXNlNjQuZGVjb2RlU3RyaW5nKHN0ciwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ2Jhc2U2NERlY29kZSBmYWlsZWQ6ICcsIGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn07XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBEbyBhIGRlZXAtY29weSBvZiBiYXNpYyBKYXZhU2NyaXB0IE9iamVjdHMgb3IgQXJyYXlzLlxyXG4gKi9cclxuZnVuY3Rpb24gZGVlcENvcHkodmFsdWUpIHtcclxuICAgIHJldHVybiBkZWVwRXh0ZW5kKHVuZGVmaW5lZCwgdmFsdWUpO1xyXG59XHJcbi8qKlxyXG4gKiBDb3B5IHByb3BlcnRpZXMgZnJvbSBzb3VyY2UgdG8gdGFyZ2V0IChyZWN1cnNpdmVseSBhbGxvd3MgZXh0ZW5zaW9uXHJcbiAqIG9mIE9iamVjdHMgYW5kIEFycmF5cykuICBTY2FsYXIgdmFsdWVzIGluIHRoZSB0YXJnZXQgYXJlIG92ZXItd3JpdHRlbi5cclxuICogSWYgdGFyZ2V0IGlzIHVuZGVmaW5lZCwgYW4gb2JqZWN0IG9mIHRoZSBhcHByb3ByaWF0ZSB0eXBlIHdpbGwgYmUgY3JlYXRlZFxyXG4gKiAoYW5kIHJldHVybmVkKS5cclxuICpcclxuICogV2UgcmVjdXJzaXZlbHkgY29weSBhbGwgY2hpbGQgcHJvcGVydGllcyBvZiBwbGFpbiBPYmplY3RzIGluIHRoZSBzb3VyY2UtIHNvXHJcbiAqIHRoYXQgbmFtZXNwYWNlLSBsaWtlIGRpY3Rpb25hcmllcyBhcmUgbWVyZ2VkLlxyXG4gKlxyXG4gKiBOb3RlIHRoYXQgdGhlIHRhcmdldCBjYW4gYmUgYSBmdW5jdGlvbiwgaW4gd2hpY2ggY2FzZSB0aGUgcHJvcGVydGllcyBpblxyXG4gKiB0aGUgc291cmNlIE9iamVjdCBhcmUgY29waWVkIG9udG8gaXQgYXMgc3RhdGljIHByb3BlcnRpZXMgb2YgdGhlIEZ1bmN0aW9uLlxyXG4gKi9cclxuZnVuY3Rpb24gZGVlcEV4dGVuZCh0YXJnZXQsIHNvdXJjZSkge1xyXG4gICAgaWYgKCEoc291cmNlIGluc3RhbmNlb2YgT2JqZWN0KSkge1xyXG4gICAgICAgIHJldHVybiBzb3VyY2U7XHJcbiAgICB9XHJcbiAgICBzd2l0Y2ggKHNvdXJjZS5jb25zdHJ1Y3Rvcikge1xyXG4gICAgICAgIGNhc2UgRGF0ZTpcclxuICAgICAgICAgICAgLy8gVHJlYXQgRGF0ZXMgbGlrZSBzY2FsYXJzOyBpZiB0aGUgdGFyZ2V0IGRhdGUgb2JqZWN0IGhhZCBhbnkgY2hpbGRcclxuICAgICAgICAgICAgLy8gcHJvcGVydGllcyAtIHRoZXkgd2lsbCBiZSBsb3N0IVxyXG4gICAgICAgICAgICB2YXIgZGF0ZVZhbHVlID0gc291cmNlO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZVZhbHVlLmdldFRpbWUoKSk7XHJcbiAgICAgICAgY2FzZSBPYmplY3Q6XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0ge307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBBcnJheTpcclxuICAgICAgICAgICAgLy8gQWx3YXlzIGNvcHkgdGhlIGFycmF5IHNvdXJjZSBhbmQgb3ZlcndyaXRlIHRoZSB0YXJnZXQuXHJcbiAgICAgICAgICAgIHRhcmdldCA9IFtdO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAvLyBOb3QgYSBwbGFpbiBPYmplY3QgLSB0cmVhdCBpdCBhcyBhIHNjYWxhci5cclxuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZTtcclxuICAgIH1cclxuICAgIGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7XHJcbiAgICAgICAgaWYgKCFzb3VyY2UuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRhcmdldFtwcm9wXSA9IGRlZXBFeHRlbmQodGFyZ2V0W3Byb3BdLCBzb3VyY2VbcHJvcF0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRhcmdldDtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgRGVmZXJyZWQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEZWZlcnJlZCgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMucmVqZWN0ID0gZnVuY3Rpb24gKCkgeyB9O1xyXG4gICAgICAgIHRoaXMucmVzb2x2ZSA9IGZ1bmN0aW9uICgpIHsgfTtcclxuICAgICAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIF90aGlzLnJlc29sdmUgPSByZXNvbHZlO1xyXG4gICAgICAgICAgICBfdGhpcy5yZWplY3QgPSByZWplY3Q7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE91ciBBUEkgaW50ZXJuYWxzIGFyZSBub3QgcHJvbWlzZWlmaWVkIGFuZCBjYW5ub3QgYmVjYXVzZSBvdXIgY2FsbGJhY2sgQVBJcyBoYXZlIHN1YnRsZSBleHBlY3RhdGlvbnMgYXJvdW5kXHJcbiAgICAgKiBpbnZva2luZyBwcm9taXNlcyBpbmxpbmUsIHdoaWNoIFByb21pc2VzIGFyZSBmb3JiaWRkZW4gdG8gZG8uIFRoaXMgbWV0aG9kIGFjY2VwdHMgYW4gb3B0aW9uYWwgbm9kZS1zdHlsZSBjYWxsYmFja1xyXG4gICAgICogYW5kIHJldHVybnMgYSBub2RlLXN0eWxlIGNhbGxiYWNrIHdoaWNoIHdpbGwgcmVzb2x2ZSBvciByZWplY3QgdGhlIERlZmVycmVkJ3MgcHJvbWlzZS5cclxuICAgICAqL1xyXG4gICAgRGVmZXJyZWQucHJvdG90eXBlLndyYXBDYWxsYmFjayA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlcnJvciwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5yZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMucmVzb2x2ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgLy8gQXR0YWNoaW5nIG5vb3AgaGFuZGxlciBqdXN0IGluIGNhc2UgZGV2ZWxvcGVyIHdhc24ndCBleHBlY3RpbmdcclxuICAgICAgICAgICAgICAgIC8vIHByb21pc2VzXHJcbiAgICAgICAgICAgICAgICBfdGhpcy5wcm9taXNlLmNhdGNoKGZ1bmN0aW9uICgpIHsgfSk7XHJcbiAgICAgICAgICAgICAgICAvLyBTb21lIG9mIG91ciBjYWxsYmFja3MgZG9uJ3QgZXhwZWN0IGEgdmFsdWUgYW5kIG91ciBvd24gdGVzdHNcclxuICAgICAgICAgICAgICAgIC8vIGFzc2VydCB0aGF0IHRoZSBwYXJhbWV0ZXIgbGVuZ3RoIGlzIDFcclxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjay5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvciwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRGVmZXJyZWQ7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZXR1cm5zIG5hdmlnYXRvci51c2VyQWdlbnQgc3RyaW5nIG9yICcnIGlmIGl0J3Mgbm90IGRlZmluZWQuXHJcbiAqIEByZXR1cm4gdXNlciBhZ2VudCBzdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIGdldFVBKCkge1xyXG4gICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgdHlwZW9mIG5hdmlnYXRvclsndXNlckFnZW50J10gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRvclsndXNlckFnZW50J107XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIERldGVjdCBDb3Jkb3ZhIC8gUGhvbmVHYXAgLyBJb25pYyBmcmFtZXdvcmtzIG9uIGEgbW9iaWxlIGRldmljZS5cclxuICpcclxuICogRGVsaWJlcmF0ZWx5IGRvZXMgbm90IHJlbHkgb24gY2hlY2tpbmcgYGZpbGU6Ly9gIFVSTHMgKGFzIHRoaXMgZmFpbHMgUGhvbmVHYXBcclxuICogaW4gdGhlIFJpcHBsZSBlbXVsYXRvcikgbm9yIENvcmRvdmEgYG9uRGV2aWNlUmVhZHlgLCB3aGljaCB3b3VsZCBub3JtYWxseVxyXG4gKiB3YWl0IGZvciBhIGNhbGxiYWNrLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNNb2JpbGVDb3Jkb3ZhKCkge1xyXG4gICAgcmV0dXJuICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmUgU2V0dGluZyB1cCBhbiBicm9hZGx5IGFwcGxpY2FibGUgaW5kZXggc2lnbmF0dXJlIGZvciBXaW5kb3dcclxuICAgICAgICAvLyBqdXN0IHRvIGRlYWwgd2l0aCB0aGlzIGNhc2Ugd291bGQgcHJvYmFibHkgYmUgYSBiYWQgaWRlYS5cclxuICAgICAgICAhISh3aW5kb3dbJ2NvcmRvdmEnXSB8fCB3aW5kb3dbJ3Bob25lZ2FwJ10gfHwgd2luZG93WydQaG9uZUdhcCddKSAmJlxyXG4gICAgICAgIC9pb3N8aXBob25lfGlwb2R8aXBhZHxhbmRyb2lkfGJsYWNrYmVycnl8aWVtb2JpbGUvaS50ZXN0KGdldFVBKCkpKTtcclxufVxyXG4vKipcclxuICogRGV0ZWN0IE5vZGUuanMuXHJcbiAqXHJcbiAqIEByZXR1cm4gdHJ1ZSBpZiBOb2RlLmpzIGVudmlyb25tZW50IGlzIGRldGVjdGVkLlxyXG4gKi9cclxuLy8gTm9kZSBkZXRlY3Rpb24gbG9naWMgZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL2lsaWFrYW4vZGV0ZWN0LW5vZGUvXHJcbmZ1bmN0aW9uIGlzTm9kZSgpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIERldGVjdCBCcm93c2VyIEVudmlyb25tZW50XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0Jyb3dzZXIoKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHNlbGYgPT09ICdvYmplY3QnICYmIHNlbGYuc2VsZiA9PT0gc2VsZjtcclxufVxyXG5mdW5jdGlvbiBpc0Jyb3dzZXJFeHRlbnNpb24oKSB7XHJcbiAgICB2YXIgcnVudGltZSA9IHR5cGVvZiBjaHJvbWUgPT09ICdvYmplY3QnXHJcbiAgICAgICAgPyBjaHJvbWUucnVudGltZVxyXG4gICAgICAgIDogdHlwZW9mIGJyb3dzZXIgPT09ICdvYmplY3QnXHJcbiAgICAgICAgICAgID8gYnJvd3Nlci5ydW50aW1lXHJcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgcmV0dXJuIHR5cGVvZiBydW50aW1lID09PSAnb2JqZWN0JyAmJiBydW50aW1lLmlkICE9PSB1bmRlZmluZWQ7XHJcbn1cclxuLyoqXHJcbiAqIERldGVjdCBSZWFjdCBOYXRpdmUuXHJcbiAqXHJcbiAqIEByZXR1cm4gdHJ1ZSBpZiBSZWFjdE5hdGl2ZSBlbnZpcm9ubWVudCBpcyBkZXRlY3RlZC5cclxuICovXHJcbmZ1bmN0aW9uIGlzUmVhY3ROYXRpdmUoKSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICdvYmplY3QnICYmIG5hdmlnYXRvclsncHJvZHVjdCddID09PSAnUmVhY3ROYXRpdmUnKTtcclxufVxyXG4vKiogRGV0ZWN0cyBFbGVjdHJvbiBhcHBzLiAqL1xyXG5mdW5jdGlvbiBpc0VsZWN0cm9uKCkge1xyXG4gICAgcmV0dXJuIGdldFVBKCkuaW5kZXhPZignRWxlY3Ryb24vJykgPj0gMDtcclxufVxyXG4vKiogRGV0ZWN0cyBJbnRlcm5ldCBFeHBsb3Jlci4gKi9cclxuZnVuY3Rpb24gaXNJRSgpIHtcclxuICAgIHZhciB1YSA9IGdldFVBKCk7XHJcbiAgICByZXR1cm4gdWEuaW5kZXhPZignTVNJRSAnKSA+PSAwIHx8IHVhLmluZGV4T2YoJ1RyaWRlbnQvJykgPj0gMDtcclxufVxyXG4vKiogRGV0ZWN0cyBVbml2ZXJzYWwgV2luZG93cyBQbGF0Zm9ybSBhcHBzLiAqL1xyXG5mdW5jdGlvbiBpc1VXUCgpIHtcclxuICAgIHJldHVybiBnZXRVQSgpLmluZGV4T2YoJ01TQXBwSG9zdC8nKSA+PSAwO1xyXG59XHJcbi8qKlxyXG4gKiBEZXRlY3Qgd2hldGhlciB0aGUgY3VycmVudCBTREsgYnVpbGQgaXMgdGhlIE5vZGUgdmVyc2lvbi5cclxuICpcclxuICogQHJldHVybiB0cnVlIGlmIGl0J3MgdGhlIE5vZGUgU0RLIGJ1aWxkLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNOb2RlU2RrKCkge1xyXG4gICAgcmV0dXJuIENPTlNUQU5UUy5OT0RFX0NMSUVOVCA9PT0gdHJ1ZSB8fCBDT05TVEFOVFMuTk9ERV9BRE1JTiA9PT0gdHJ1ZTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgRVJST1JfTkFNRSA9ICdGaXJlYmFzZUVycm9yJztcclxuLy8gQmFzZWQgb24gY29kZSBmcm9tOlxyXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9FcnJvciNDdXN0b21fRXJyb3JfVHlwZXNcclxudmFyIEZpcmViYXNlRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYi5fX2V4dGVuZHMoRmlyZWJhc2VFcnJvciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEZpcmViYXNlRXJyb3IoY29kZSwgbWVzc2FnZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1lc3NhZ2UpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuY29kZSA9IGNvZGU7XHJcbiAgICAgICAgX3RoaXMubmFtZSA9IEVSUk9SX05BTUU7XHJcbiAgICAgICAgLy8gRml4IEZvciBFUzVcclxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQtd2lraS9ibG9iL21hc3Rlci9CcmVha2luZy1DaGFuZ2VzLm1kI2V4dGVuZGluZy1idWlsdC1pbnMtbGlrZS1lcnJvci1hcnJheS1hbmQtbWFwLW1heS1uby1sb25nZXItd29ya1xyXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihfdGhpcywgRmlyZWJhc2VFcnJvci5wcm90b3R5cGUpO1xyXG4gICAgICAgIC8vIE1haW50YWlucyBwcm9wZXIgc3RhY2sgdHJhY2UgZm9yIHdoZXJlIG91ciBlcnJvciB3YXMgdGhyb3duLlxyXG4gICAgICAgIC8vIE9ubHkgYXZhaWxhYmxlIG9uIFY4LlxyXG4gICAgICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xyXG4gICAgICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShfdGhpcywgRXJyb3JGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRmlyZWJhc2VFcnJvcjtcclxufShFcnJvcikpO1xyXG52YXIgRXJyb3JGYWN0b3J5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRXJyb3JGYWN0b3J5KHNlcnZpY2UsIHNlcnZpY2VOYW1lLCBlcnJvcnMpIHtcclxuICAgICAgICB0aGlzLnNlcnZpY2UgPSBzZXJ2aWNlO1xyXG4gICAgICAgIHRoaXMuc2VydmljZU5hbWUgPSBzZXJ2aWNlTmFtZTtcclxuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcclxuICAgIH1cclxuICAgIEVycm9yRmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKGNvZGUpIHtcclxuICAgICAgICB2YXIgZGF0YSA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGRhdGFbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjdXN0b21EYXRhID0gZGF0YVswXSB8fCB7fTtcclxuICAgICAgICB2YXIgZnVsbENvZGUgPSB0aGlzLnNlcnZpY2UgKyBcIi9cIiArIGNvZGU7XHJcbiAgICAgICAgdmFyIHRlbXBsYXRlID0gdGhpcy5lcnJvcnNbY29kZV07XHJcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSB0ZW1wbGF0ZSA/IHJlcGxhY2VUZW1wbGF0ZSh0ZW1wbGF0ZSwgY3VzdG9tRGF0YSkgOiAnRXJyb3InO1xyXG4gICAgICAgIC8vIFNlcnZpY2UgTmFtZTogRXJyb3IgbWVzc2FnZSAoc2VydmljZS9jb2RlKS5cclxuICAgICAgICB2YXIgZnVsbE1lc3NhZ2UgPSB0aGlzLnNlcnZpY2VOYW1lICsgXCI6IFwiICsgbWVzc2FnZSArIFwiIChcIiArIGZ1bGxDb2RlICsgXCIpLlwiO1xyXG4gICAgICAgIHZhciBlcnJvciA9IG5ldyBGaXJlYmFzZUVycm9yKGZ1bGxDb2RlLCBmdWxsTWVzc2FnZSk7XHJcbiAgICAgICAgLy8gS2V5cyB3aXRoIGFuIHVuZGVyc2NvcmUgYXQgdGhlIGVuZCBvZiB0aGVpciBuYW1lIGFyZSBub3QgaW5jbHVkZWQgaW5cclxuICAgICAgICAvLyBlcnJvci5kYXRhIGZvciBzb21lIHJlYXNvbi5cclxuICAgICAgICAvLyBUT0RPOiBSZXBsYWNlIHdpdGggT2JqZWN0LmVudHJpZXMgd2hlbiBsaWIgaXMgdXBkYXRlZCB0byBlczIwMTcuXHJcbiAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBfYiA9IE9iamVjdC5rZXlzKGN1c3RvbURhdGEpOyBfYSA8IF9iLmxlbmd0aDsgX2ErKykge1xyXG4gICAgICAgICAgICB2YXIga2V5ID0gX2JbX2FdO1xyXG4gICAgICAgICAgICBpZiAoa2V5LnNsaWNlKC0xKSAhPT0gJ18nKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5IGluIGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiT3ZlcndyaXRpbmcgRmlyZWJhc2VFcnJvciBiYXNlIGZpZWxkIFxcXCJcIiArIGtleSArIFwiXFxcIiBjYW4gY2F1c2UgdW5leHBlY3RlZCBiZWhhdmlvci5cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlcnJvcltrZXldID0gY3VzdG9tRGF0YVtrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRXJyb3JGYWN0b3J5O1xyXG59KCkpO1xyXG5mdW5jdGlvbiByZXBsYWNlVGVtcGxhdGUodGVtcGxhdGUsIGRhdGEpIHtcclxuICAgIHJldHVybiB0ZW1wbGF0ZS5yZXBsYWNlKFBBVFRFUk4sIGZ1bmN0aW9uIChfLCBrZXkpIHtcclxuICAgICAgICB2YXIgdmFsdWUgPSBkYXRhW2tleV07XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgPyB2YWx1ZS50b1N0cmluZygpIDogXCI8XCIgKyBrZXkgKyBcIj8+XCI7XHJcbiAgICB9KTtcclxufVxyXG52YXIgUEFUVEVSTiA9IC9cXHtcXCQoW159XSspfS9nO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRXZhbHVhdGVzIGEgSlNPTiBzdHJpbmcgaW50byBhIGphdmFzY3JpcHQgb2JqZWN0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIEEgc3RyaW5nIGNvbnRhaW5pbmcgSlNPTi5cclxuICogQHJldHVybiB7Kn0gVGhlIGphdmFzY3JpcHQgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgc3BlY2lmaWVkIEpTT04uXHJcbiAqL1xyXG5mdW5jdGlvbiBqc29uRXZhbChzdHIpIHtcclxuICAgIHJldHVybiBKU09OLnBhcnNlKHN0cik7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgSlNPTiByZXByZXNlbnRpbmcgYSBqYXZhc2NyaXB0IG9iamVjdC5cclxuICogQHBhcmFtIHsqfSBkYXRhIEphdmFzY3JpcHQgb2JqZWN0IHRvIGJlIHN0cmluZ2lmaWVkLlxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBKU09OIGNvbnRlbnRzIG9mIHRoZSBvYmplY3QuXHJcbiAqL1xyXG5mdW5jdGlvbiBzdHJpbmdpZnkoZGF0YSkge1xyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBEZWNvZGVzIGEgRmlyZWJhc2UgYXV0aC4gdG9rZW4gaW50byBjb25zdGl0dWVudCBwYXJ0cy5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiB3aXRoIGludmFsaWQgLyBpbmNvbXBsZXRlIGNsYWltcyBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cclxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cclxuICovXHJcbnZhciBkZWNvZGUgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIHZhciBoZWFkZXIgPSB7fSwgY2xhaW1zID0ge30sIGRhdGEgPSB7fSwgc2lnbmF0dXJlID0gJyc7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHZhciBwYXJ0cyA9IHRva2VuLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgaGVhZGVyID0ganNvbkV2YWwoYmFzZTY0RGVjb2RlKHBhcnRzWzBdKSB8fCAnJyk7XHJcbiAgICAgICAgY2xhaW1zID0ganNvbkV2YWwoYmFzZTY0RGVjb2RlKHBhcnRzWzFdKSB8fCAnJyk7XHJcbiAgICAgICAgc2lnbmF0dXJlID0gcGFydHNbMl07XHJcbiAgICAgICAgZGF0YSA9IGNsYWltc1snZCddIHx8IHt9O1xyXG4gICAgICAgIGRlbGV0ZSBjbGFpbXNbJ2QnXTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7IH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaGVhZGVyOiBoZWFkZXIsXHJcbiAgICAgICAgY2xhaW1zOiBjbGFpbXMsXHJcbiAgICAgICAgZGF0YTogZGF0YSxcclxuICAgICAgICBzaWduYXR1cmU6IHNpZ25hdHVyZVxyXG4gICAgfTtcclxufTtcclxuLyoqXHJcbiAqIERlY29kZXMgYSBGaXJlYmFzZSBhdXRoLiB0b2tlbiBhbmQgY2hlY2tzIHRoZSB2YWxpZGl0eSBvZiBpdHMgdGltZS1iYXNlZCBjbGFpbXMuIFdpbGwgcmV0dXJuIHRydWUgaWYgdGhlXHJcbiAqIHRva2VuIGlzIHdpdGhpbiB0aGUgdGltZSB3aW5kb3cgYXV0aG9yaXplZCBieSB0aGUgJ25iZicgKG5vdC1iZWZvcmUpIGFuZCAnaWF0JyAoaXNzdWVkLWF0KSBjbGFpbXMuXHJcbiAqXHJcbiAqIE5vdGVzOlxyXG4gKiAtIE1heSByZXR1cm4gYSBmYWxzZSBuZWdhdGl2ZSBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cclxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cclxuICovXHJcbnZhciBpc1ZhbGlkVGltZXN0YW1wID0gZnVuY3Rpb24gKHRva2VuKSB7XHJcbiAgICB2YXIgY2xhaW1zID0gZGVjb2RlKHRva2VuKS5jbGFpbXM7XHJcbiAgICB2YXIgbm93ID0gTWF0aC5mbG9vcihuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDApO1xyXG4gICAgdmFyIHZhbGlkU2luY2UgPSAwLCB2YWxpZFVudGlsID0gMDtcclxuICAgIGlmICh0eXBlb2YgY2xhaW1zID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIGlmIChjbGFpbXMuaGFzT3duUHJvcGVydHkoJ25iZicpKSB7XHJcbiAgICAgICAgICAgIHZhbGlkU2luY2UgPSBjbGFpbXNbJ25iZiddO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2lhdCcpKSB7XHJcbiAgICAgICAgICAgIHZhbGlkU2luY2UgPSBjbGFpbXNbJ2lhdCddO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2xhaW1zLmhhc093blByb3BlcnR5KCdleHAnKSkge1xyXG4gICAgICAgICAgICB2YWxpZFVudGlsID0gY2xhaW1zWydleHAnXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHRva2VuIHdpbGwgZXhwaXJlIGFmdGVyIDI0aCBieSBkZWZhdWx0XHJcbiAgICAgICAgICAgIHZhbGlkVW50aWwgPSB2YWxpZFNpbmNlICsgODY0MDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuICghIW5vdyAmJlxyXG4gICAgICAgICEhdmFsaWRTaW5jZSAmJlxyXG4gICAgICAgICEhdmFsaWRVbnRpbCAmJlxyXG4gICAgICAgIG5vdyA+PSB2YWxpZFNpbmNlICYmXHJcbiAgICAgICAgbm93IDw9IHZhbGlkVW50aWwpO1xyXG59O1xyXG4vKipcclxuICogRGVjb2RlcyBhIEZpcmViYXNlIGF1dGguIHRva2VuIGFuZCByZXR1cm5zIGl0cyBpc3N1ZWQgYXQgdGltZSBpZiB2YWxpZCwgbnVsbCBvdGhlcndpc2UuXHJcbiAqXHJcbiAqIE5vdGVzOlxyXG4gKiAtIE1heSByZXR1cm4gbnVsbCBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cclxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cclxuICovXHJcbnZhciBpc3N1ZWRBdFRpbWUgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIHZhciBjbGFpbXMgPSBkZWNvZGUodG9rZW4pLmNsYWltcztcclxuICAgIGlmICh0eXBlb2YgY2xhaW1zID09PSAnb2JqZWN0JyAmJiBjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2lhdCcpKSB7XHJcbiAgICAgICAgcmV0dXJuIGNsYWltc1snaWF0J107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuLyoqXHJcbiAqIERlY29kZXMgYSBGaXJlYmFzZSBhdXRoLiB0b2tlbiBhbmQgY2hlY2tzIHRoZSB2YWxpZGl0eSBvZiBpdHMgZm9ybWF0LiBFeHBlY3RzIGEgdmFsaWQgaXNzdWVkLWF0IHRpbWUuXHJcbiAqXHJcbiAqIE5vdGVzOlxyXG4gKiAtIE1heSByZXR1cm4gYSBmYWxzZSBuZWdhdGl2ZSBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cclxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cclxuICovXHJcbnZhciBpc1ZhbGlkRm9ybWF0ID0gZnVuY3Rpb24gKHRva2VuKSB7XHJcbiAgICB2YXIgZGVjb2RlZCA9IGRlY29kZSh0b2tlbiksIGNsYWltcyA9IGRlY29kZWQuY2xhaW1zO1xyXG4gICAgcmV0dXJuICEhY2xhaW1zICYmIHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnICYmIGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnaWF0Jyk7XHJcbn07XHJcbi8qKlxyXG4gKiBBdHRlbXB0cyB0byBwZWVyIGludG8gYW4gYXV0aCB0b2tlbiBhbmQgZGV0ZXJtaW5lIGlmIGl0J3MgYW4gYWRtaW4gYXV0aCB0b2tlbiBieSBsb29raW5nIGF0IHRoZSBjbGFpbXMgcG9ydGlvbi5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiBhIGZhbHNlIG5lZ2F0aXZlIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxyXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxyXG4gKi9cclxudmFyIGlzQWRtaW4gPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIHZhciBjbGFpbXMgPSBkZWNvZGUodG9rZW4pLmNsYWltcztcclxuICAgIHJldHVybiB0eXBlb2YgY2xhaW1zID09PSAnb2JqZWN0JyAmJiBjbGFpbXNbJ2FkbWluJ10gPT09IHRydWU7XHJcbn07XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGNvbnRhaW5zKG9iaiwga2V5KSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcclxufVxyXG5mdW5jdGlvbiBzYWZlR2V0KG9iaiwga2V5KSB7XHJcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xyXG4gICAgICAgIHJldHVybiBvYmpba2V5XTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaXNFbXB0eShvYmopIHtcclxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZnVuY3Rpb24gbWFwKG9iaiwgZm4sIGNvbnRleHRPYmopIHtcclxuICAgIHZhciByZXMgPSB7fTtcclxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xyXG4gICAgICAgICAgICByZXNba2V5XSA9IGZuLmNhbGwoY29udGV4dE9iaiwgb2JqW2tleV0sIGtleSwgb2JqKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgcXVlcnlzdHJpbmctZm9ybWF0dGVkIHN0cmluZyAoZS5nLiAmYXJnPXZhbCZhcmcyPXZhbDIpIGZyb20gYVxyXG4gKiBwYXJhbXMgb2JqZWN0IChlLmcuIHthcmc6ICd2YWwnLCBhcmcyOiAndmFsMid9KVxyXG4gKiBOb3RlOiBZb3UgbXVzdCBwcmVwZW5kIGl0IHdpdGggPyB3aGVuIGFkZGluZyBpdCB0byBhIFVSTC5cclxuICovXHJcbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5nKHF1ZXJ5c3RyaW5nUGFyYW1zKSB7XHJcbiAgICB2YXIgcGFyYW1zID0gW107XHJcbiAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKGFycmF5VmFsKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXMucHVzaChlbmNvZGVVUklDb21wb25lbnQoa2V5KSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChhcnJheVZhbCkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHBhcmFtcy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3QuZW50cmllcyhxdWVyeXN0cmluZ1BhcmFtcyk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIF9iID0gX2FbX2ldLCBrZXkgPSBfYlswXSwgdmFsdWUgPSBfYlsxXTtcclxuICAgICAgICBfbG9vcF8xKGtleSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhcmFtcy5sZW5ndGggPyAnJicgKyBwYXJhbXMuam9pbignJicpIDogJyc7XHJcbn1cclxuLyoqXHJcbiAqIERlY29kZXMgYSBxdWVyeXN0cmluZyAoZS5nLiA/YXJnPXZhbCZhcmcyPXZhbDIpIGludG8gYSBwYXJhbXMgb2JqZWN0XHJcbiAqIChlLmcuIHthcmc6ICd2YWwnLCBhcmcyOiAndmFsMid9KVxyXG4gKi9cclxuZnVuY3Rpb24gcXVlcnlzdHJpbmdEZWNvZGUocXVlcnlzdHJpbmcpIHtcclxuICAgIHZhciBvYmogPSB7fTtcclxuICAgIHZhciB0b2tlbnMgPSBxdWVyeXN0cmluZy5yZXBsYWNlKC9eXFw/LywgJycpLnNwbGl0KCcmJyk7XHJcbiAgICB0b2tlbnMuZm9yRWFjaChmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgICAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICAgICAgdmFyIGtleSA9IHRva2VuLnNwbGl0KCc9Jyk7XHJcbiAgICAgICAgICAgIG9ialtrZXlbMF1dID0ga2V5WzFdO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIG9iajtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQGZpbGVvdmVydmlldyBTSEEtMSBjcnlwdG9ncmFwaGljIGhhc2guXHJcbiAqIFZhcmlhYmxlIG5hbWVzIGZvbGxvdyB0aGUgbm90YXRpb24gaW4gRklQUyBQVUIgMTgwLTM6XHJcbiAqIGh0dHA6Ly9jc3JjLm5pc3QuZ292L3B1YmxpY2F0aW9ucy9maXBzL2ZpcHMxODAtMy9maXBzMTgwLTNfZmluYWwucGRmLlxyXG4gKlxyXG4gKiBVc2FnZTpcclxuICogICB2YXIgc2hhMSA9IG5ldyBzaGExKCk7XHJcbiAqICAgc2hhMS51cGRhdGUoYnl0ZXMpO1xyXG4gKiAgIHZhciBoYXNoID0gc2hhMS5kaWdlc3QoKTtcclxuICpcclxuICogUGVyZm9ybWFuY2U6XHJcbiAqICAgQ2hyb21lIDIzOiAgIH40MDAgTWJpdC9zXHJcbiAqICAgRmlyZWZveCAxNjogIH4yNTAgTWJpdC9zXHJcbiAqXHJcbiAqL1xyXG4vKipcclxuICogU0hBLTEgY3J5cHRvZ3JhcGhpYyBoYXNoIGNvbnN0cnVjdG9yLlxyXG4gKlxyXG4gKiBUaGUgcHJvcGVydGllcyBkZWNsYXJlZCBoZXJlIGFyZSBkaXNjdXNzZWQgaW4gdGhlIGFib3ZlIGFsZ29yaXRobSBkb2N1bWVudC5cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBmaW5hbFxyXG4gKiBAc3RydWN0XHJcbiAqL1xyXG52YXIgU2hhMSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNoYTEoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSG9sZHMgdGhlIHByZXZpb3VzIHZhbHVlcyBvZiBhY2N1bXVsYXRlZCB2YXJpYWJsZXMgYS1lIGluIHRoZSBjb21wcmVzc19cclxuICAgICAgICAgKiBmdW5jdGlvbi5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuY2hhaW5fID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBidWZmZXIgaG9sZGluZyB0aGUgcGFydGlhbGx5IGNvbXB1dGVkIGhhc2ggcmVzdWx0LlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5idWZfID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQW4gYXJyYXkgb2YgODAgYnl0ZXMsIGVhY2ggYSBwYXJ0IG9mIHRoZSBtZXNzYWdlIHRvIGJlIGhhc2hlZC4gIFJlZmVycmVkIHRvXHJcbiAgICAgICAgICogYXMgdGhlIG1lc3NhZ2Ugc2NoZWR1bGUgaW4gdGhlIGRvY3MuXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLldfID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29udGFpbnMgZGF0YSBuZWVkZWQgdG8gcGFkIG1lc3NhZ2VzIGxlc3MgdGhhbiA2NCBieXRlcy5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMucGFkXyA9IFtdO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5pbmJ1Zl8gPSAwO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy50b3RhbF8gPSAwO1xyXG4gICAgICAgIHRoaXMuYmxvY2tTaXplID0gNTEyIC8gODtcclxuICAgICAgICB0aGlzLnBhZF9bMF0gPSAxMjg7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgKytpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFkX1tpXSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVzZXQoKTtcclxuICAgIH1cclxuICAgIFNoYTEucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzBdID0gMHg2NzQ1MjMwMTtcclxuICAgICAgICB0aGlzLmNoYWluX1sxXSA9IDB4ZWZjZGFiODk7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMl0gPSAweDk4YmFkY2ZlO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzNdID0gMHgxMDMyNTQ3NjtcclxuICAgICAgICB0aGlzLmNoYWluX1s0XSA9IDB4YzNkMmUxZjA7XHJcbiAgICAgICAgdGhpcy5pbmJ1Zl8gPSAwO1xyXG4gICAgICAgIHRoaXMudG90YWxfID0gMDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEludGVybmFsIGNvbXByZXNzIGhlbHBlciBmdW5jdGlvbi5cclxuICAgICAqIEBwYXJhbSBidWYgQmxvY2sgdG8gY29tcHJlc3MuXHJcbiAgICAgKiBAcGFyYW0gb2Zmc2V0IE9mZnNldCBvZiB0aGUgYmxvY2sgaW4gdGhlIGJ1ZmZlci5cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFNoYTEucHJvdG90eXBlLmNvbXByZXNzXyA9IGZ1bmN0aW9uIChidWYsIG9mZnNldCkge1xyXG4gICAgICAgIGlmICghb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIG9mZnNldCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBXID0gdGhpcy5XXztcclxuICAgICAgICAvLyBnZXQgMTYgYmlnIGVuZGlhbiB3b3Jkc1xyXG4gICAgICAgIGlmICh0eXBlb2YgYnVmID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIC8vIFRPRE8odXNlcik6IFtidWcgODE0MDEyMl0gUmVjZW50IHZlcnNpb25zIG9mIFNhZmFyaSBmb3IgTWFjIE9TIGFuZCBpT1NcclxuICAgICAgICAgICAgICAgIC8vIGhhdmUgYSBidWcgdGhhdCB0dXJucyB0aGUgcG9zdC1pbmNyZW1lbnQgKysgb3BlcmF0b3IgaW50byBwcmUtaW5jcmVtZW50XHJcbiAgICAgICAgICAgICAgICAvLyBkdXJpbmcgSklUIGNvbXBpbGF0aW9uLiAgV2UgaGF2ZSBjb2RlIHRoYXQgZGVwZW5kcyBoZWF2aWx5IG9uIFNIQS0xIGZvclxyXG4gICAgICAgICAgICAgICAgLy8gY29ycmVjdG5lc3MgYW5kIHdoaWNoIGlzIGFmZmVjdGVkIGJ5IHRoaXMgYnVnLCBzbyBJJ3ZlIHJlbW92ZWQgYWxsIHVzZXNcclxuICAgICAgICAgICAgICAgIC8vIG9mIHBvc3QtaW5jcmVtZW50ICsrIGluIHdoaWNoIHRoZSByZXN1bHQgdmFsdWUgaXMgdXNlZC4gIFdlIGNhbiByZXZlcnRcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMgY2hhbmdlIG9uY2UgdGhlIFNhZmFyaSBidWdcclxuICAgICAgICAgICAgICAgIC8vIChodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTA5MDM2KSBoYXMgYmVlbiBmaXhlZCBhbmRcclxuICAgICAgICAgICAgICAgIC8vIG1vc3QgY2xpZW50cyBoYXZlIGJlZW4gdXBkYXRlZC5cclxuICAgICAgICAgICAgICAgIFdbaV0gPVxyXG4gICAgICAgICAgICAgICAgICAgIChidWYuY2hhckNvZGVBdChvZmZzZXQpIDw8IDI0KSB8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChidWYuY2hhckNvZGVBdChvZmZzZXQgKyAxKSA8PCAxNikgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoYnVmLmNoYXJDb2RlQXQob2Zmc2V0ICsgMikgPDwgOCkgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWYuY2hhckNvZGVBdChvZmZzZXQgKyAzKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldCArPSA0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIFdbaV0gPVxyXG4gICAgICAgICAgICAgICAgICAgIChidWZbb2Zmc2V0XSA8PCAyNCkgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoYnVmW29mZnNldCArIDFdIDw8IDE2KSB8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChidWZbb2Zmc2V0ICsgMl0gPDwgOCkgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWZbb2Zmc2V0ICsgM107XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gNDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBleHBhbmQgdG8gODAgd29yZHNcclxuICAgICAgICBmb3IgKHZhciBpID0gMTY7IGkgPCA4MDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciB0ID0gV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XTtcclxuICAgICAgICAgICAgV1tpXSA9ICgodCA8PCAxKSB8ICh0ID4+PiAzMSkpICYgMHhmZmZmZmZmZjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGEgPSB0aGlzLmNoYWluX1swXTtcclxuICAgICAgICB2YXIgYiA9IHRoaXMuY2hhaW5fWzFdO1xyXG4gICAgICAgIHZhciBjID0gdGhpcy5jaGFpbl9bMl07XHJcbiAgICAgICAgdmFyIGQgPSB0aGlzLmNoYWluX1szXTtcclxuICAgICAgICB2YXIgZSA9IHRoaXMuY2hhaW5fWzRdO1xyXG4gICAgICAgIHZhciBmLCBrO1xyXG4gICAgICAgIC8vIFRPRE8odXNlcik6IFRyeSB0byB1bnJvbGwgdGhpcyBsb29wIHRvIHNwZWVkIHVwIHRoZSBjb21wdXRhdGlvbi5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDgwOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGkgPCA0MCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPCAyMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGYgPSBkIF4gKGIgJiAoYyBeIGQpKTtcclxuICAgICAgICAgICAgICAgICAgICBrID0gMHg1YTgyNzk5OTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGYgPSBiIF4gYyBeIGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgayA9IDB4NmVkOWViYTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA8IDYwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IChiICYgYykgfCAoZCAmIChiIHwgYykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGsgPSAweDhmMWJiY2RjO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IGIgXiBjIF4gZDtcclxuICAgICAgICAgICAgICAgICAgICBrID0gMHhjYTYyYzFkNjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdCA9ICgoKGEgPDwgNSkgfCAoYSA+Pj4gMjcpKSArIGYgKyBlICsgayArIFdbaV0pICYgMHhmZmZmZmZmZjtcclxuICAgICAgICAgICAgZSA9IGQ7XHJcbiAgICAgICAgICAgIGQgPSBjO1xyXG4gICAgICAgICAgICBjID0gKChiIDw8IDMwKSB8IChiID4+PiAyKSkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgICAgICBiID0gYTtcclxuICAgICAgICAgICAgYSA9IHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2hhaW5fWzBdID0gKHRoaXMuY2hhaW5fWzBdICsgYSkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzFdID0gKHRoaXMuY2hhaW5fWzFdICsgYikgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzJdID0gKHRoaXMuY2hhaW5fWzJdICsgYykgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzNdID0gKHRoaXMuY2hhaW5fWzNdICsgZCkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzRdID0gKHRoaXMuY2hhaW5fWzRdICsgZSkgJiAweGZmZmZmZmZmO1xyXG4gICAgfTtcclxuICAgIFNoYTEucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChieXRlcywgbGVuZ3RoKSB7XHJcbiAgICAgICAgLy8gVE9ETyhqb2hubGVueik6IHRpZ2h0ZW4gdGhlIGZ1bmN0aW9uIHNpZ25hdHVyZSBhbmQgcmVtb3ZlIHRoaXMgY2hlY2tcclxuICAgICAgICBpZiAoYnl0ZXMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBsZW5ndGggPSBieXRlcy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBsZW5ndGhNaW51c0Jsb2NrID0gbGVuZ3RoIC0gdGhpcy5ibG9ja1NpemU7XHJcbiAgICAgICAgdmFyIG4gPSAwO1xyXG4gICAgICAgIC8vIFVzaW5nIGxvY2FsIGluc3RlYWQgb2YgbWVtYmVyIHZhcmlhYmxlcyBnaXZlcyB+NSUgc3BlZWR1cCBvbiBGaXJlZm94IDE2LlxyXG4gICAgICAgIHZhciBidWYgPSB0aGlzLmJ1Zl87XHJcbiAgICAgICAgdmFyIGluYnVmID0gdGhpcy5pbmJ1Zl87XHJcbiAgICAgICAgLy8gVGhlIG91dGVyIHdoaWxlIGxvb3Agc2hvdWxkIGV4ZWN1dGUgYXQgbW9zdCB0d2ljZS5cclxuICAgICAgICB3aGlsZSAobiA8IGxlbmd0aCkge1xyXG4gICAgICAgICAgICAvLyBXaGVuIHdlIGhhdmUgbm8gZGF0YSBpbiB0aGUgYmxvY2sgdG8gdG9wIHVwLCB3ZSBjYW4gZGlyZWN0bHkgcHJvY2VzcyB0aGVcclxuICAgICAgICAgICAgLy8gaW5wdXQgYnVmZmVyIChhc3N1bWluZyBpdCBjb250YWlucyBzdWZmaWNpZW50IGRhdGEpLiBUaGlzIGdpdmVzIH4yNSVcclxuICAgICAgICAgICAgLy8gc3BlZWR1cCBvbiBDaHJvbWUgMjMgYW5kIH4xNSUgc3BlZWR1cCBvbiBGaXJlZm94IDE2LCBidXQgcmVxdWlyZXMgdGhhdFxyXG4gICAgICAgICAgICAvLyB0aGUgZGF0YSBpcyBwcm92aWRlZCBpbiBsYXJnZSBjaHVua3MgKG9yIGluIG11bHRpcGxlcyBvZiA2NCBieXRlcykuXHJcbiAgICAgICAgICAgIGlmIChpbmJ1ZiA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG4gPD0gbGVuZ3RoTWludXNCbG9jaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcHJlc3NfKGJ5dGVzLCBuKTtcclxuICAgICAgICAgICAgICAgICAgICBuICs9IHRoaXMuYmxvY2tTaXplO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYnl0ZXMgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobiA8IGxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZltpbmJ1Zl0gPSBieXRlcy5jaGFyQ29kZUF0KG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICsraW5idWY7XHJcbiAgICAgICAgICAgICAgICAgICAgKytuO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmJ1ZiA9PT0gdGhpcy5ibG9ja1NpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wcmVzc18oYnVmKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5idWYgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBKdW1wIHRvIHRoZSBvdXRlciBsb29wIHNvIHdlIHVzZSB0aGUgZnVsbC1ibG9jayBvcHRpbWl6YXRpb24uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChuIDwgbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVmW2luYnVmXSA9IGJ5dGVzW25dO1xyXG4gICAgICAgICAgICAgICAgICAgICsraW5idWY7XHJcbiAgICAgICAgICAgICAgICAgICAgKytuO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmJ1ZiA9PT0gdGhpcy5ibG9ja1NpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wcmVzc18oYnVmKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5idWYgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBKdW1wIHRvIHRoZSBvdXRlciBsb29wIHNvIHdlIHVzZSB0aGUgZnVsbC1ibG9jayBvcHRpbWl6YXRpb24uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmluYnVmXyA9IGluYnVmO1xyXG4gICAgICAgIHRoaXMudG90YWxfICs9IGxlbmd0aDtcclxuICAgIH07XHJcbiAgICAvKiogQG92ZXJyaWRlICovXHJcbiAgICBTaGExLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGRpZ2VzdCA9IFtdO1xyXG4gICAgICAgIHZhciB0b3RhbEJpdHMgPSB0aGlzLnRvdGFsXyAqIDg7XHJcbiAgICAgICAgLy8gQWRkIHBhZCAweDgwIDB4MDAqLlxyXG4gICAgICAgIGlmICh0aGlzLmluYnVmXyA8IDU2KSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHRoaXMucGFkXywgNTYgLSB0aGlzLmluYnVmXyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSh0aGlzLnBhZF8sIHRoaXMuYmxvY2tTaXplIC0gKHRoaXMuaW5idWZfIC0gNTYpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQWRkICMgYml0cy5cclxuICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5ibG9ja1NpemUgLSAxOyBpID49IDU2OyBpLS0pIHtcclxuICAgICAgICAgICAgdGhpcy5idWZfW2ldID0gdG90YWxCaXRzICYgMjU1O1xyXG4gICAgICAgICAgICB0b3RhbEJpdHMgLz0gMjU2OyAvLyBEb24ndCB1c2UgYml0LXNoaWZ0aW5nIGhlcmUhXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29tcHJlc3NfKHRoaXMuYnVmXyk7XHJcbiAgICAgICAgdmFyIG4gPSAwO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAyNDsgaiA+PSAwOyBqIC09IDgpIHtcclxuICAgICAgICAgICAgICAgIGRpZ2VzdFtuXSA9ICh0aGlzLmNoYWluX1tpXSA+PiBqKSAmIDI1NTtcclxuICAgICAgICAgICAgICAgICsrbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGlnZXN0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBTaGExO1xyXG59KCkpO1xuXG4vKipcclxuICogSGVscGVyIHRvIG1ha2UgYSBTdWJzY3JpYmUgZnVuY3Rpb24gKGp1c3QgbGlrZSBQcm9taXNlIGhlbHBzIG1ha2UgYVxyXG4gKiBUaGVuYWJsZSkuXHJcbiAqXHJcbiAqIEBwYXJhbSBleGVjdXRvciBGdW5jdGlvbiB3aGljaCBjYW4gbWFrZSBjYWxscyB0byBhIHNpbmdsZSBPYnNlcnZlclxyXG4gKiAgICAgYXMgYSBwcm94eS5cclxuICogQHBhcmFtIG9uTm9PYnNlcnZlcnMgQ2FsbGJhY2sgd2hlbiBjb3VudCBvZiBPYnNlcnZlcnMgZ29lcyB0byB6ZXJvLlxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlU3Vic2NyaWJlKGV4ZWN1dG9yLCBvbk5vT2JzZXJ2ZXJzKSB7XHJcbiAgICB2YXIgcHJveHkgPSBuZXcgT2JzZXJ2ZXJQcm94eShleGVjdXRvciwgb25Ob09ic2VydmVycyk7XHJcbiAgICByZXR1cm4gcHJveHkuc3Vic2NyaWJlLmJpbmQocHJveHkpO1xyXG59XHJcbi8qKlxyXG4gKiBJbXBsZW1lbnQgZmFuLW91dCBmb3IgYW55IG51bWJlciBvZiBPYnNlcnZlcnMgYXR0YWNoZWQgdmlhIGEgc3Vic2NyaWJlXHJcbiAqIGZ1bmN0aW9uLlxyXG4gKi9cclxudmFyIE9ic2VydmVyUHJveHkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBleGVjdXRvciBGdW5jdGlvbiB3aGljaCBjYW4gbWFrZSBjYWxscyB0byBhIHNpbmdsZSBPYnNlcnZlclxyXG4gICAgICogICAgIGFzIGEgcHJveHkuXHJcbiAgICAgKiBAcGFyYW0gb25Ob09ic2VydmVycyBDYWxsYmFjayB3aGVuIGNvdW50IG9mIE9ic2VydmVycyBnb2VzIHRvIHplcm8uXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIE9ic2VydmVyUHJveHkoZXhlY3V0b3IsIG9uTm9PYnNlcnZlcnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gW107XHJcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZXMgPSBbXTtcclxuICAgICAgICB0aGlzLm9ic2VydmVyQ291bnQgPSAwO1xyXG4gICAgICAgIC8vIE1pY3JvLXRhc2sgc2NoZWR1bGluZyBieSBjYWxsaW5nIHRhc2sudGhlbigpLlxyXG4gICAgICAgIHRoaXMudGFzayA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIHRoaXMuZmluYWxpemVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5vbk5vT2JzZXJ2ZXJzID0gb25Ob09ic2VydmVycztcclxuICAgICAgICAvLyBDYWxsIHRoZSBleGVjdXRvciBhc3luY2hyb25vdXNseSBzbyBzdWJzY3JpYmVycyB0aGF0IGFyZSBjYWxsZWRcclxuICAgICAgICAvLyBzeW5jaHJvbm91c2x5IGFmdGVyIHRoZSBjcmVhdGlvbiBvZiB0aGUgc3Vic2NyaWJlIGZ1bmN0aW9uXHJcbiAgICAgICAgLy8gY2FuIHN0aWxsIHJlY2VpdmUgdGhlIHZlcnkgZmlyc3QgdmFsdWUgZ2VuZXJhdGVkIGluIHRoZSBleGVjdXRvci5cclxuICAgICAgICB0aGlzLnRhc2tcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBleGVjdXRvcihfdGhpcyk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmVycm9yKGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgT2JzZXJ2ZXJQcm94eS5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuZm9yRWFjaE9ic2VydmVyKGZ1bmN0aW9uIChvYnNlcnZlcikge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KHZhbHVlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZlclByb3h5LnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgIHRoaXMuZm9yRWFjaE9ic2VydmVyKGZ1bmN0aW9uIChvYnNlcnZlcikge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jbG9zZShlcnJvcik7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2ZXJQcm94eS5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5mb3JFYWNoT2JzZXJ2ZXIoZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU3Vic2NyaWJlIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gYWRkIGFuIE9ic2VydmVyIHRvIHRoZSBmYW4tb3V0IGxpc3QuXHJcbiAgICAgKlxyXG4gICAgICogLSBXZSByZXF1aXJlIHRoYXQgbm8gZXZlbnQgaXMgc2VudCB0byBhIHN1YnNjcmliZXIgc3ljaHJvbm91c2x5IHRvIHRoZWlyXHJcbiAgICAgKiAgIGNhbGwgdG8gc3Vic2NyaWJlKCkuXHJcbiAgICAgKi9cclxuICAgIE9ic2VydmVyUHJveHkucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgb2JzZXJ2ZXI7XHJcbiAgICAgICAgaWYgKG5leHRPck9ic2VydmVyID09PSB1bmRlZmluZWQgJiZcclxuICAgICAgICAgICAgZXJyb3IgPT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgICBjb21wbGV0ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBPYnNlcnZlci4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQXNzZW1ibGUgYW4gT2JzZXJ2ZXIgb2JqZWN0IHdoZW4gcGFzc2VkIGFzIGNhbGxiYWNrIGZ1bmN0aW9ucy5cclxuICAgICAgICBpZiAoaW1wbGVtZW50c0FueU1ldGhvZHMobmV4dE9yT2JzZXJ2ZXIsIFtcclxuICAgICAgICAgICAgJ25leHQnLFxyXG4gICAgICAgICAgICAnZXJyb3InLFxyXG4gICAgICAgICAgICAnY29tcGxldGUnXHJcbiAgICAgICAgXSkpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIgPSBuZXh0T3JPYnNlcnZlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyID0ge1xyXG4gICAgICAgICAgICAgICAgbmV4dDogbmV4dE9yT2JzZXJ2ZXIsXHJcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IsXHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogY29tcGxldGVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9ic2VydmVyLm5leHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0ID0gbm9vcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9ic2VydmVyLmVycm9yID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IgPSBub29wO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob2JzZXJ2ZXIuY29tcGxldGUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSA9IG5vb3A7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB1bnN1YiA9IHRoaXMudW5zdWJzY3JpYmVPbmUuYmluZCh0aGlzLCB0aGlzLm9ic2VydmVycy5sZW5ndGgpO1xyXG4gICAgICAgIC8vIEF0dGVtcHQgdG8gc3Vic2NyaWJlIHRvIGEgdGVybWluYXRlZCBPYnNlcnZhYmxlIC0gd2VcclxuICAgICAgICAvLyBqdXN0IHJlc3BvbmQgdG8gdGhlIE9ic2VydmVyIHdpdGggdGhlIGZpbmFsIGVycm9yIG9yIGNvbXBsZXRlXHJcbiAgICAgICAgLy8gZXZlbnQuXHJcbiAgICAgICAgaWYgKHRoaXMuZmluYWxpemVkKSB7XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcclxuICAgICAgICAgICAgdGhpcy50YXNrLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuZmluYWxFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5lcnJvcihfdGhpcy5maW5hbEVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBub3RoaW5nXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcclxuICAgICAgICByZXR1cm4gdW5zdWI7XHJcbiAgICB9O1xyXG4gICAgLy8gVW5zdWJzY3JpYmUgaXMgc3luY2hyb25vdXMgLSB3ZSBndWFyYW50ZWUgdGhhdCBubyBldmVudHMgYXJlIHNlbnQgdG9cclxuICAgIC8vIGFueSB1bnN1YnNjcmliZWQgT2JzZXJ2ZXIuXHJcbiAgICBPYnNlcnZlclByb3h5LnByb3RvdHlwZS51bnN1YnNjcmliZU9uZSA9IGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub2JzZXJ2ZXJzID09PSB1bmRlZmluZWQgfHwgdGhpcy5vYnNlcnZlcnNbaV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlbGV0ZSB0aGlzLm9ic2VydmVyc1tpXTtcclxuICAgICAgICB0aGlzLm9ic2VydmVyQ291bnQgLT0gMTtcclxuICAgICAgICBpZiAodGhpcy5vYnNlcnZlckNvdW50ID09PSAwICYmIHRoaXMub25Ob09ic2VydmVycyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25Ob09ic2VydmVycyh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2ZXJQcm94eS5wcm90b3R5cGUuZm9yRWFjaE9ic2VydmVyID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZmluYWxpemVkKSB7XHJcbiAgICAgICAgICAgIC8vIEFscmVhZHkgY2xvc2VkIGJ5IHByZXZpb3VzIGV2ZW50Li4uLmp1c3QgZWF0IHRoZSBhZGRpdGlvbmFsIHZhbHVlcy5cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBTaW5jZSBzZW5kT25lIGNhbGxzIGFzeW5jaHJvbm91c2x5IC0gdGhlcmUgaXMgbm8gY2hhbmNlIHRoYXRcclxuICAgICAgICAvLyB0aGlzLm9ic2VydmVycyB3aWxsIGJlY29tZSB1bmRlZmluZWQuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm9ic2VydmVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRPbmUoaSwgZm4pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyBDYWxsIHRoZSBPYnNlcnZlciB2aWEgb25lIG9mIGl0J3MgY2FsbGJhY2sgZnVuY3Rpb24uIFdlIGFyZSBjYXJlZnVsIHRvXHJcbiAgICAvLyBjb25maXJtIHRoYXQgdGhlIG9ic2VydmUgaGFzIG5vdCBiZWVuIHVuc3Vic2NyaWJlZCBzaW5jZSB0aGlzIGFzeW5jaHJvbm91c1xyXG4gICAgLy8gZnVuY3Rpb24gaGFkIGJlZW4gcXVldWVkLlxyXG4gICAgT2JzZXJ2ZXJQcm94eS5wcm90b3R5cGUuc2VuZE9uZSA9IGZ1bmN0aW9uIChpLCBmbikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgY2FsbGJhY2sgYXN5bmNocm9ub3VzbHlcclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzXHJcbiAgICAgICAgdGhpcy50YXNrLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMub2JzZXJ2ZXJzICE9PSB1bmRlZmluZWQgJiYgX3RoaXMub2JzZXJ2ZXJzW2ldICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm4oX3RoaXMub2JzZXJ2ZXJzW2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSWdub3JlIGV4Y2VwdGlvbnMgcmFpc2VkIGluIE9ic2VydmVycyBvciBtaXNzaW5nIG1ldGhvZHMgb2YgYW5cclxuICAgICAgICAgICAgICAgICAgICAvLyBPYnNlcnZlci5cclxuICAgICAgICAgICAgICAgICAgICAvLyBMb2cgZXJyb3IgdG8gY29uc29sZS4gYi8zMTQwNDgwNlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZS5lcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmVyUHJveHkucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHRoaXMuZmluYWxpemVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5maW5hbGl6ZWQgPSB0cnVlO1xyXG4gICAgICAgIGlmIChlcnIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmZpbmFsRXJyb3IgPSBlcnI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFByb3h5IGlzIG5vIGxvbmdlciBuZWVkZWQgLSBnYXJiYWdlIGNvbGxlY3QgcmVmZXJlbmNlc1xyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcclxuICAgICAgICB0aGlzLnRhc2sudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLm9ic2VydmVycyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgX3RoaXMub25Ob09ic2VydmVycyA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gT2JzZXJ2ZXJQcm94eTtcclxufSgpKTtcclxuLyoqIFR1cm4gc3luY2hyb25vdXMgZnVuY3Rpb24gaW50byBvbmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5LiAqL1xyXG5mdW5jdGlvbiBhc3luYyhmbiwgb25FcnJvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHRydWUpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZm4uYXBwbHkodm9pZCAwLCBhcmdzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGlmIChvbkVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBvbkVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogUmV0dXJuIHRydWUgaWYgdGhlIG9iamVjdCBwYXNzZWQgaW4gaW1wbGVtZW50cyBhbnkgb2YgdGhlIG5hbWVkIG1ldGhvZHMuXHJcbiAqL1xyXG5mdW5jdGlvbiBpbXBsZW1lbnRzQW55TWV0aG9kcyhvYmosIG1ldGhvZHMpIHtcclxuICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIG1ldGhvZHNfMSA9IG1ldGhvZHM7IF9pIDwgbWV0aG9kc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBtZXRob2QgPSBtZXRob2RzXzFbX2ldO1xyXG4gICAgICAgIGlmIChtZXRob2QgaW4gb2JqICYmIHR5cGVvZiBvYmpbbWV0aG9kXSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuZnVuY3Rpb24gbm9vcCgpIHtcclxuICAgIC8vIGRvIG5vdGhpbmdcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQ2hlY2sgdG8gbWFrZSBzdXJlIHRoZSBhcHByb3ByaWF0ZSBudW1iZXIgb2YgYXJndW1lbnRzIGFyZSBwcm92aWRlZCBmb3IgYSBwdWJsaWMgZnVuY3Rpb24uXHJcbiAqIFRocm93cyBhbiBlcnJvciBpZiBpdCBmYWlscy5cclxuICpcclxuICogQHBhcmFtIGZuTmFtZSBUaGUgZnVuY3Rpb24gbmFtZVxyXG4gKiBAcGFyYW0gbWluQ291bnQgVGhlIG1pbmltdW0gbnVtYmVyIG9mIGFyZ3VtZW50cyB0byBhbGxvdyBmb3IgdGhlIGZ1bmN0aW9uIGNhbGxcclxuICogQHBhcmFtIG1heENvdW50IFRoZSBtYXhpbXVtIG51bWJlciBvZiBhcmd1bWVudCB0byBhbGxvdyBmb3IgdGhlIGZ1bmN0aW9uIGNhbGxcclxuICogQHBhcmFtIGFyZ0NvdW50IFRoZSBhY3R1YWwgbnVtYmVyIG9mIGFyZ3VtZW50cyBwcm92aWRlZC5cclxuICovXHJcbnZhciB2YWxpZGF0ZUFyZ0NvdW50ID0gZnVuY3Rpb24gKGZuTmFtZSwgbWluQ291bnQsIG1heENvdW50LCBhcmdDb3VudCkge1xyXG4gICAgdmFyIGFyZ0Vycm9yO1xyXG4gICAgaWYgKGFyZ0NvdW50IDwgbWluQ291bnQpIHtcclxuICAgICAgICBhcmdFcnJvciA9ICdhdCBsZWFzdCAnICsgbWluQ291bnQ7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChhcmdDb3VudCA+IG1heENvdW50KSB7XHJcbiAgICAgICAgYXJnRXJyb3IgPSBtYXhDb3VudCA9PT0gMCA/ICdub25lJyA6ICdubyBtb3JlIHRoYW4gJyArIG1heENvdW50O1xyXG4gICAgfVxyXG4gICAgaWYgKGFyZ0Vycm9yKSB7XHJcbiAgICAgICAgdmFyIGVycm9yID0gZm5OYW1lICtcclxuICAgICAgICAgICAgJyBmYWlsZWQ6IFdhcyBjYWxsZWQgd2l0aCAnICtcclxuICAgICAgICAgICAgYXJnQ291bnQgK1xyXG4gICAgICAgICAgICAoYXJnQ291bnQgPT09IDEgPyAnIGFyZ3VtZW50LicgOiAnIGFyZ3VtZW50cy4nKSArXHJcbiAgICAgICAgICAgICcgRXhwZWN0cyAnICtcclxuICAgICAgICAgICAgYXJnRXJyb3IgK1xyXG4gICAgICAgICAgICAnLic7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHN0cmluZyB0byBwcmVmaXggYW4gZXJyb3IgbWVzc2FnZSBhYm91dCBmYWlsZWQgYXJndW1lbnQgdmFsaWRhdGlvblxyXG4gKlxyXG4gKiBAcGFyYW0gZm5OYW1lIFRoZSBmdW5jdGlvbiBuYW1lXHJcbiAqIEBwYXJhbSBhcmd1bWVudE51bWJlciBUaGUgaW5kZXggb2YgdGhlIGFyZ3VtZW50XHJcbiAqIEBwYXJhbSBvcHRpb25hbCBXaGV0aGVyIG9yIG5vdCB0aGUgYXJndW1lbnQgaXMgb3B0aW9uYWxcclxuICogQHJldHVybiBUaGUgcHJlZml4IHRvIGFkZCB0byB0aGUgZXJyb3IgdGhyb3duIGZvciB2YWxpZGF0aW9uLlxyXG4gKi9cclxuZnVuY3Rpb24gZXJyb3JQcmVmaXgoZm5OYW1lLCBhcmd1bWVudE51bWJlciwgb3B0aW9uYWwpIHtcclxuICAgIHZhciBhcmdOYW1lID0gJyc7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50TnVtYmVyKSB7XHJcbiAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICBhcmdOYW1lID0gb3B0aW9uYWwgPyAnZmlyc3QnIDogJ0ZpcnN0JztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICBhcmdOYW1lID0gb3B0aW9uYWwgPyAnc2Vjb25kJyA6ICdTZWNvbmQnO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgIGFyZ05hbWUgPSBvcHRpb25hbCA/ICd0aGlyZCcgOiAnVGhpcmQnO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgIGFyZ05hbWUgPSBvcHRpb25hbCA/ICdmb3VydGgnIDogJ0ZvdXJ0aCc7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZXJyb3JQcmVmaXggY2FsbGVkIHdpdGggYXJndW1lbnROdW1iZXIgPiA0LiAgTmVlZCB0byB1cGRhdGUgaXQ/Jyk7XHJcbiAgICB9XHJcbiAgICB2YXIgZXJyb3IgPSBmbk5hbWUgKyAnIGZhaWxlZDogJztcclxuICAgIGVycm9yICs9IGFyZ05hbWUgKyAnIGFyZ3VtZW50ICc7XHJcbiAgICByZXR1cm4gZXJyb3I7XHJcbn1cclxuLyoqXHJcbiAqIEBwYXJhbSBmbk5hbWVcclxuICogQHBhcmFtIGFyZ3VtZW50TnVtYmVyXHJcbiAqIEBwYXJhbSBuYW1lc3BhY2VcclxuICogQHBhcmFtIG9wdGlvbmFsXHJcbiAqL1xyXG5mdW5jdGlvbiB2YWxpZGF0ZU5hbWVzcGFjZShmbk5hbWUsIGFyZ3VtZW50TnVtYmVyLCBuYW1lc3BhY2UsIG9wdGlvbmFsKSB7XHJcbiAgICBpZiAob3B0aW9uYWwgJiYgIW5hbWVzcGFjZSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgIC8vVE9ETzogSSBzaG91bGQgZG8gbW9yZSB2YWxpZGF0aW9uIGhlcmUuIFdlIG9ubHkgYWxsb3cgY2VydGFpbiBjaGFycyBpbiBuYW1lc3BhY2VzLlxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeChmbk5hbWUsIGFyZ3VtZW50TnVtYmVyLCBvcHRpb25hbCkgK1xyXG4gICAgICAgICAgICAnbXVzdCBiZSBhIHZhbGlkIGZpcmViYXNlIG5hbWVzcGFjZS4nKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB2YWxpZGF0ZUNhbGxiYWNrKGZuTmFtZSwgYXJndW1lbnROdW1iZXIsIGNhbGxiYWNrLCBvcHRpb25hbCkge1xyXG4gICAgaWYgKG9wdGlvbmFsICYmICFjYWxsYmFjaykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JQcmVmaXgoZm5OYW1lLCBhcmd1bWVudE51bWJlciwgb3B0aW9uYWwpICtcclxuICAgICAgICAgICAgJ211c3QgYmUgYSB2YWxpZCBmdW5jdGlvbi4nKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB2YWxpZGF0ZUNvbnRleHRPYmplY3QoZm5OYW1lLCBhcmd1bWVudE51bWJlciwgY29udGV4dCwgb3B0aW9uYWwpIHtcclxuICAgIGlmIChvcHRpb25hbCAmJiAhY29udGV4dCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgY29udGV4dCAhPT0gJ29iamVjdCcgfHwgY29udGV4dCA9PT0gbnVsbCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeChmbk5hbWUsIGFyZ3VtZW50TnVtYmVyLCBvcHRpb25hbCkgK1xyXG4gICAgICAgICAgICAnbXVzdCBiZSBhIHZhbGlkIGNvbnRleHQgb2JqZWN0LicpO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8vIENvZGUgb3JpZ2luYWxseSBjYW1lIGZyb20gZ29vZy5jcnlwdC5zdHJpbmdUb1V0ZjhCeXRlQXJyYXksIGJ1dCBmb3Igc29tZSByZWFzb24gdGhleVxyXG4vLyBhdXRvbWF0aWNhbGx5IHJlcGxhY2VkICdcXHJcXG4nIHdpdGggJ1xcbicsIGFuZCB0aGV5IGRpZG4ndCBoYW5kbGUgc3Vycm9nYXRlIHBhaXJzLFxyXG4vLyBzbyBpdCdzIGJlZW4gbW9kaWZpZWQuXHJcbi8vIE5vdGUgdGhhdCBub3QgYWxsIFVuaWNvZGUgY2hhcmFjdGVycyBhcHBlYXIgYXMgc2luZ2xlIGNoYXJhY3RlcnMgaW4gSmF2YVNjcmlwdCBzdHJpbmdzLlxyXG4vLyBmcm9tQ2hhckNvZGUgcmV0dXJucyB0aGUgVVRGLTE2IGVuY29kaW5nIG9mIGEgY2hhcmFjdGVyIC0gc28gc29tZSBVbmljb2RlIGNoYXJhY3RlcnNcclxuLy8gdXNlIDIgY2hhcmFjdGVycyBpbiBKYXZhc2NyaXB0LiAgQWxsIDQtYnl0ZSBVVEYtOCBjaGFyYWN0ZXJzIGJlZ2luIHdpdGggYSBmaXJzdFxyXG4vLyBjaGFyYWN0ZXIgaW4gdGhlIHJhbmdlIDB4RDgwMCAtIDB4REJGRiAodGhlIGZpcnN0IGNoYXJhY3RlciBvZiBhIHNvLWNhbGxlZCBzdXJyb2dhdGVcclxuLy8gcGFpcikuXHJcbi8vIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtMTUuMS4zXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXHJcbiAqIEByZXR1cm4ge0FycmF5fVxyXG4gKi9cclxudmFyIHN0cmluZ1RvQnl0ZUFycmF5JDEgPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICB2YXIgb3V0ID0gW107XHJcbiAgICB2YXIgcCA9IDA7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgLy8gSXMgdGhpcyB0aGUgbGVhZCBzdXJyb2dhdGUgaW4gYSBzdXJyb2dhdGUgcGFpcj9cclxuICAgICAgICBpZiAoYyA+PSAweGQ4MDAgJiYgYyA8PSAweGRiZmYpIHtcclxuICAgICAgICAgICAgdmFyIGhpZ2ggPSBjIC0gMHhkODAwOyAvLyB0aGUgaGlnaCAxMCBiaXRzLlxyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgIGFzc2VydChpIDwgc3RyLmxlbmd0aCwgJ1N1cnJvZ2F0ZSBwYWlyIG1pc3NpbmcgdHJhaWwgc3Vycm9nYXRlLicpO1xyXG4gICAgICAgICAgICB2YXIgbG93ID0gc3RyLmNoYXJDb2RlQXQoaSkgLSAweGRjMDA7IC8vIHRoZSBsb3cgMTAgYml0cy5cclxuICAgICAgICAgICAgYyA9IDB4MTAwMDAgKyAoaGlnaCA8PCAxMCkgKyBsb3c7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjIDwgMTI4KSB7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gYztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYyA8IDIwNDgpIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiA2KSB8IDE5MjtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYyA8IDY1NTM2KSB7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgPj4gMTIpIHwgMjI0O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9ICgoYyA+PiA2KSAmIDYzKSB8IDEyODtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgPj4gMTgpIHwgMjQwO1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9ICgoYyA+PiAxMikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvdXQ7XHJcbn07XHJcbi8qKlxyXG4gKiBDYWxjdWxhdGUgbGVuZ3RoIHdpdGhvdXQgYWN0dWFsbHkgY29udmVydGluZzsgdXNlZnVsIGZvciBkb2luZyBjaGVhcGVyIHZhbGlkYXRpb24uXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcclxuICogQHJldHVybiB7bnVtYmVyfVxyXG4gKi9cclxudmFyIHN0cmluZ0xlbmd0aCA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIHZhciBwID0gMDtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcclxuICAgICAgICBpZiAoYyA8IDEyOCkge1xyXG4gICAgICAgICAgICBwKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGMgPCAyMDQ4KSB7XHJcbiAgICAgICAgICAgIHAgKz0gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYyA+PSAweGQ4MDAgJiYgYyA8PSAweGRiZmYpIHtcclxuICAgICAgICAgICAgLy8gTGVhZCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpci4gIFRoZSBwYWlyIHRvZ2V0aGVyIHdpbGwgdGFrZSA0IGJ5dGVzIHRvIHJlcHJlc2VudC5cclxuICAgICAgICAgICAgcCArPSA0O1xyXG4gICAgICAgICAgICBpKys7IC8vIHNraXAgdHJhaWwgc3Vycm9nYXRlLlxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcCArPSAzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBwO1xyXG59O1xuXG5leHBvcnRzLkNPTlNUQU5UUyA9IENPTlNUQU5UUztcbmV4cG9ydHMuRGVmZXJyZWQgPSBEZWZlcnJlZDtcbmV4cG9ydHMuRXJyb3JGYWN0b3J5ID0gRXJyb3JGYWN0b3J5O1xuZXhwb3J0cy5GaXJlYmFzZUVycm9yID0gRmlyZWJhc2VFcnJvcjtcbmV4cG9ydHMuU2hhMSA9IFNoYTE7XG5leHBvcnRzLmFzc2VydCA9IGFzc2VydDtcbmV4cG9ydHMuYXNzZXJ0aW9uRXJyb3IgPSBhc3NlcnRpb25FcnJvcjtcbmV4cG9ydHMuYXN5bmMgPSBhc3luYztcbmV4cG9ydHMuYmFzZTY0ID0gYmFzZTY0O1xuZXhwb3J0cy5iYXNlNjREZWNvZGUgPSBiYXNlNjREZWNvZGU7XG5leHBvcnRzLmJhc2U2NEVuY29kZSA9IGJhc2U2NEVuY29kZTtcbmV4cG9ydHMuY29udGFpbnMgPSBjb250YWlucztcbmV4cG9ydHMuY3JlYXRlU3Vic2NyaWJlID0gY3JlYXRlU3Vic2NyaWJlO1xuZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG5leHBvcnRzLmRlZXBDb3B5ID0gZGVlcENvcHk7XG5leHBvcnRzLmRlZXBFeHRlbmQgPSBkZWVwRXh0ZW5kO1xuZXhwb3J0cy5lcnJvclByZWZpeCA9IGVycm9yUHJlZml4O1xuZXhwb3J0cy5nZXRVQSA9IGdldFVBO1xuZXhwb3J0cy5pc0FkbWluID0gaXNBZG1pbjtcbmV4cG9ydHMuaXNCcm93c2VyID0gaXNCcm93c2VyO1xuZXhwb3J0cy5pc0Jyb3dzZXJFeHRlbnNpb24gPSBpc0Jyb3dzZXJFeHRlbnNpb247XG5leHBvcnRzLmlzRWxlY3Ryb24gPSBpc0VsZWN0cm9uO1xuZXhwb3J0cy5pc0VtcHR5ID0gaXNFbXB0eTtcbmV4cG9ydHMuaXNJRSA9IGlzSUU7XG5leHBvcnRzLmlzTW9iaWxlQ29yZG92YSA9IGlzTW9iaWxlQ29yZG92YTtcbmV4cG9ydHMuaXNOb2RlID0gaXNOb2RlO1xuZXhwb3J0cy5pc05vZGVTZGsgPSBpc05vZGVTZGs7XG5leHBvcnRzLmlzUmVhY3ROYXRpdmUgPSBpc1JlYWN0TmF0aXZlO1xuZXhwb3J0cy5pc1VXUCA9IGlzVVdQO1xuZXhwb3J0cy5pc1ZhbGlkRm9ybWF0ID0gaXNWYWxpZEZvcm1hdDtcbmV4cG9ydHMuaXNWYWxpZFRpbWVzdGFtcCA9IGlzVmFsaWRUaW1lc3RhbXA7XG5leHBvcnRzLmlzc3VlZEF0VGltZSA9IGlzc3VlZEF0VGltZTtcbmV4cG9ydHMuanNvbkV2YWwgPSBqc29uRXZhbDtcbmV4cG9ydHMubWFwID0gbWFwO1xuZXhwb3J0cy5xdWVyeXN0cmluZyA9IHF1ZXJ5c3RyaW5nO1xuZXhwb3J0cy5xdWVyeXN0cmluZ0RlY29kZSA9IHF1ZXJ5c3RyaW5nRGVjb2RlO1xuZXhwb3J0cy5zYWZlR2V0ID0gc2FmZUdldDtcbmV4cG9ydHMuc3RyaW5nTGVuZ3RoID0gc3RyaW5nTGVuZ3RoO1xuZXhwb3J0cy5zdHJpbmdUb0J5dGVBcnJheSA9IHN0cmluZ1RvQnl0ZUFycmF5JDE7XG5leHBvcnRzLnN0cmluZ2lmeSA9IHN0cmluZ2lmeTtcbmV4cG9ydHMudmFsaWRhdGVBcmdDb3VudCA9IHZhbGlkYXRlQXJnQ291bnQ7XG5leHBvcnRzLnZhbGlkYXRlQ2FsbGJhY2sgPSB2YWxpZGF0ZUNhbGxiYWNrO1xuZXhwb3J0cy52YWxpZGF0ZUNvbnRleHRPYmplY3QgPSB2YWxpZGF0ZUNvbnRleHRPYmplY3Q7XG5leHBvcnRzLnZhbGlkYXRlTmFtZXNwYWNlID0gdmFsaWRhdGVOYW1lc3BhY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5janMuanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciB0c2xpYiA9IHJlcXVpcmUoJ3RzbGliJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ0BmaXJlYmFzZS91dGlsJyk7XG5cbi8qKlxyXG4gKiBDb21wb25lbnQgZm9yIHNlcnZpY2UgbmFtZSBULCBlLmcuIGBhdXRoYCwgYGF1dGgtaW50ZXJuYWxgXHJcbiAqL1xyXG52YXIgQ29tcG9uZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIHB1YmxpYyBzZXJ2aWNlIG5hbWUsIGUuZy4gYXBwLCBhdXRoLCBmaXJlc3RvcmUsIGRhdGFiYXNlXHJcbiAgICAgKiBAcGFyYW0gaW5zdGFuY2VGYWN0b3J5IFNlcnZpY2UgZmFjdG9yeSByZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgdGhlIHB1YmxpYyBpbnRlcmZhY2VcclxuICAgICAqIEBwYXJhbSB0eXBlIHdoZXRoZXIgdGhlIHNlcnZpY2UgcHJvdmlkZWQgYnkgdGhlIGNvbXBvbmVudCBpcyBwdWJsaWMgb3IgcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBDb21wb25lbnQobmFtZSwgaW5zdGFuY2VGYWN0b3J5LCB0eXBlKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlRmFjdG9yeSA9IGluc3RhbmNlRmFjdG9yeTtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIHRoaXMubXVsdGlwbGVJbnN0YW5jZXMgPSBmYWxzZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBQcm9wZXJ0aWVzIHRvIGJlIGFkZGVkIHRvIHRoZSBzZXJ2aWNlIG5hbWVzcGFjZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuc2VydmljZVByb3BzID0ge307XHJcbiAgICAgICAgdGhpcy5pbnN0YW50aWF0aW9uTW9kZSA9IFwiTEFaWVwiIC8qIExBWlkgKi87XHJcbiAgICB9XHJcbiAgICBDb21wb25lbnQucHJvdG90eXBlLnNldEluc3RhbnRpYXRpb25Nb2RlID0gZnVuY3Rpb24gKG1vZGUpIHtcclxuICAgICAgICB0aGlzLmluc3RhbnRpYXRpb25Nb2RlID0gbW9kZTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBDb21wb25lbnQucHJvdG90eXBlLnNldE11bHRpcGxlSW5zdGFuY2VzID0gZnVuY3Rpb24gKG11bHRpcGxlSW5zdGFuY2VzKSB7XHJcbiAgICAgICAgdGhpcy5tdWx0aXBsZUluc3RhbmNlcyA9IG11bHRpcGxlSW5zdGFuY2VzO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIENvbXBvbmVudC5wcm90b3R5cGUuc2V0U2VydmljZVByb3BzID0gZnVuY3Rpb24gKHByb3BzKSB7XHJcbiAgICAgICAgdGhpcy5zZXJ2aWNlUHJvcHMgPSBwcm9wcztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICByZXR1cm4gQ29tcG9uZW50O1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgREVGQVVMVF9FTlRSWV9OQU1FID0gJ1tERUZBVUxUXSc7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBQcm92aWRlciBmb3IgaW5zdGFuY2UgZm9yIHNlcnZpY2UgbmFtZSBULCBlLmcuICdhdXRoJywgJ2F1dGgtaW50ZXJuYWwnXHJcbiAqIE5hbWVTZXJ2aWNlTWFwcGluZ1tUXSBpcyBhbiBhbGlhcyBmb3IgdGhlIHR5cGUgb2YgdGhlIGluc3RhbmNlXHJcbiAqL1xyXG52YXIgUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBQcm92aWRlcihuYW1lLCBjb250YWluZXIpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgICAgIHRoaXMuY29tcG9uZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmluc3RhbmNlcyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlc0RlZmVycmVkID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gaWRlbnRpZmllciBBIHByb3ZpZGVyIGNhbiBwcm92aWRlIG11bGl0cGxlIGluc3RhbmNlcyBvZiBhIHNlcnZpY2VcclxuICAgICAqIGlmIHRoaXMuY29tcG9uZW50Lm11bHRpcGxlSW5zdGFuY2VzIGlzIHRydWUuXHJcbiAgICAgKi9cclxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoaWRlbnRpZmllcikge1xyXG4gICAgICAgIGlmIChpZGVudGlmaWVyID09PSB2b2lkIDApIHsgaWRlbnRpZmllciA9IERFRkFVTFRfRU5UUllfTkFNRTsgfVxyXG4gICAgICAgIC8vIGlmIG11bHRpcGxlSW5zdGFuY2VzIGlzIG5vdCBzdXBwb3J0ZWQsIHVzZSB0aGUgZGVmYXVsdCBuYW1lXHJcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJZGVudGlmaWVyID0gdGhpcy5ub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIoaWRlbnRpZmllcik7XHJcbiAgICAgICAgaWYgKCF0aGlzLmluc3RhbmNlc0RlZmVycmVkLmhhcyhub3JtYWxpemVkSWRlbnRpZmllcikpIHtcclxuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gbmV3IHV0aWwuRGVmZXJyZWQoKTtcclxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZXNEZWZlcnJlZC5zZXQobm9ybWFsaXplZElkZW50aWZpZXIsIGRlZmVycmVkKTtcclxuICAgICAgICAgICAgLy8gSWYgdGhlIHNlcnZpY2UgaW5zdGFuY2UgaXMgYXZhaWxhYmxlLCByZXNvbHZlIHRoZSBwcm9taXNlIHdpdGggaXQgaW1tZWRpYXRlbHlcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuZ2V0T3JJbml0aWFsaXplU2VydmljZShub3JtYWxpemVkSWRlbnRpZmllcik7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgaW5zdGFuY2UgZmFjdG9yeSB0aHJvd3MgYW4gZXhjZXB0aW9uIGR1cmluZyBnZXQoKSwgaXQgc2hvdWxkIG5vdCBjYXVzZVxyXG4gICAgICAgICAgICAgICAgLy8gYSBmYXRhbCBlcnJvci4gV2UganVzdCByZXR1cm4gdGhlIHVucmVzb2x2ZWQgcHJvbWlzZSBpbiB0aGlzIGNhc2UuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VzRGVmZXJyZWQuZ2V0KG5vcm1hbGl6ZWRJZGVudGlmaWVyKS5wcm9taXNlO1xyXG4gICAgfTtcclxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5nZXRJbW1lZGlhdGUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBfYSA9IHRzbGliLl9fYXNzaWduKHsgaWRlbnRpZmllcjogREVGQVVMVF9FTlRSWV9OQU1FLCBvcHRpb25hbDogZmFsc2UgfSwgb3B0aW9ucyksIGlkZW50aWZpZXIgPSBfYS5pZGVudGlmaWVyLCBvcHRpb25hbCA9IF9hLm9wdGlvbmFsO1xyXG4gICAgICAgIC8vIGlmIG11bHRpcGxlSW5zdGFuY2VzIGlzIG5vdCBzdXBwb3J0ZWQsIHVzZSB0aGUgZGVmYXVsdCBuYW1lXHJcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJZGVudGlmaWVyID0gdGhpcy5ub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIoaWRlbnRpZmllcik7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5nZXRPckluaXRpYWxpemVTZXJ2aWNlKG5vcm1hbGl6ZWRJZGVudGlmaWVyKTtcclxuICAgICAgICAgICAgaWYgKCFpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIlNlcnZpY2UgXCIgKyB0aGlzLm5hbWUgKyBcIiBpcyBub3QgYXZhaWxhYmxlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbmFsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmdldENvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQ7XHJcbiAgICB9O1xyXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLnNldENvbXBvbmVudCA9IGZ1bmN0aW9uIChjb21wb25lbnQpIHtcclxuICAgICAgICB2YXIgZV8xLCBfYTtcclxuICAgICAgICBpZiAoY29tcG9uZW50Lm5hbWUgIT09IHRoaXMubmFtZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIk1pc21hdGNoaW5nIENvbXBvbmVudCBcIiArIGNvbXBvbmVudC5uYW1lICsgXCIgZm9yIFByb3ZpZGVyIFwiICsgdGhpcy5uYW1lICsgXCIuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jb21wb25lbnQpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJDb21wb25lbnQgZm9yIFwiICsgdGhpcy5uYW1lICsgXCIgaGFzIGFscmVhZHkgYmVlbiBwcm92aWRlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQ7XHJcbiAgICAgICAgLy8gaWYgdGhlIHNlcnZpY2UgaXMgZWFnZXIsIGluaXRpYWxpemUgdGhlIGRlZmF1bHQgaW5zdGFuY2VcclxuICAgICAgICBpZiAoaXNDb21wb25lbnRFYWdlcihjb21wb25lbnQpKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdldE9ySW5pdGlhbGl6ZVNlcnZpY2UoREVGQVVMVF9FTlRSWV9OQU1FKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgaW5zdGFuY2UgZmFjdG9yeSBmb3IgYW4gZWFnZXIgQ29tcG9uZW50IHRocm93cyBhbiBleGNlcHRpb24gZHVyaW5nIHRoZSBlYWdlclxyXG4gICAgICAgICAgICAgICAgLy8gaW5pdGlhbGl6YXRpb24sIGl0IHNob3VsZCBub3QgY2F1c2UgYSBmYXRhbCBlcnJvci5cclxuICAgICAgICAgICAgICAgIC8vIFRPRE86IEludmVzdGlnYXRlIGlmIHdlIG5lZWQgdG8gbWFrZSBpdCBjb25maWd1cmFibGUsIGJlY2F1c2Ugc29tZSBjb21wb25lbnQgbWF5IHdhbnQgdG8gY2F1c2VcclxuICAgICAgICAgICAgICAgIC8vIGEgZmF0YWwgZXJyb3IgaW4gdGhpcyBjYXNlP1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSBzZXJ2aWNlIGluc3RhbmNlcyBmb3IgdGhlIHBlbmRpbmcgcHJvbWlzZXMgYW5kIHJlc29sdmUgdGhlbVxyXG4gICAgICAgICAgICAvLyBOT1RFOiBpZiB0aGlzLm11bHRpcGxlSW5zdGFuY2VzIGlzIGZhbHNlLCBvbmx5IHRoZSBkZWZhdWx0IGluc3RhbmNlIHdpbGwgYmUgY3JlYXRlZFxyXG4gICAgICAgICAgICAvLyBhbmQgYWxsIHByb21pc2VzIHdpdGggcmVzb2x2ZSB3aXRoIGl0IHJlZ2FyZGxlc3Mgb2YgdGhlIGlkZW50aWZpZXIuXHJcbiAgICAgICAgICAgIGZvciAodmFyIF9iID0gdHNsaWIuX192YWx1ZXModGhpcy5pbnN0YW5jZXNEZWZlcnJlZC5lbnRyaWVzKCkpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2QgPSB0c2xpYi5fX3JlYWQoX2MudmFsdWUsIDIpLCBpbnN0YW5jZUlkZW50aWZpZXIgPSBfZFswXSwgaW5zdGFuY2VEZWZlcnJlZCA9IF9kWzFdO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5vcm1hbGl6ZWRJZGVudGlmaWVyID0gdGhpcy5ub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIoaW5zdGFuY2VJZGVudGlmaWVyKTtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYGdldE9ySW5pdGlhbGl6ZVNlcnZpY2UoKWAgc2hvdWxkIGFsd2F5cyByZXR1cm4gYSB2YWxpZCBpbnN0YW5jZSBzaW5jZSBhIGNvbXBvbmVudCBpcyBndWFyYW50ZWVkLiB1c2UgISB0byBtYWtlIHR5cGVzY3JpcHQgaGFwcHkuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5nZXRPckluaXRpYWxpemVTZXJ2aWNlKG5vcm1hbGl6ZWRJZGVudGlmaWVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZURlZmVycmVkLnJlc29sdmUoaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSBpbnN0YW5jZSBmYWN0b3J5IHRocm93cyBhbiBleGNlcHRpb24sIGl0IHNob3VsZCBub3QgY2F1c2VcclxuICAgICAgICAgICAgICAgICAgICAvLyBhIGZhdGFsIGVycm9yLiBXZSBqdXN0IGxlYXZlIHRoZSBwcm9taXNlIHVucmVzb2x2ZWQuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5jbGVhckluc3RhbmNlID0gZnVuY3Rpb24gKGlkZW50aWZpZXIpIHtcclxuICAgICAgICBpZiAoaWRlbnRpZmllciA9PT0gdm9pZCAwKSB7IGlkZW50aWZpZXIgPSBERUZBVUxUX0VOVFJZX05BTUU7IH1cclxuICAgICAgICB0aGlzLmluc3RhbmNlc0RlZmVycmVkLmRlbGV0ZShpZGVudGlmaWVyKTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlcy5kZWxldGUoaWRlbnRpZmllcik7XHJcbiAgICB9O1xyXG4gICAgLy8gYXBwLmRlbGV0ZSgpIHdpbGwgY2FsbCB0aGlzIG1ldGhvZCBvbiBldmVyeSBwcm92aWRlciB0byBkZWxldGUgdGhlIHNlcnZpY2VzXHJcbiAgICAvLyBUT0RPOiBzaG91bGQgd2UgbWFyayB0aGUgcHJvdmlkZXIgYXMgZGVsZXRlZD9cclxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgc2VydmljZXM7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYi5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VzID0gQXJyYXkuZnJvbSh0aGlzLmluc3RhbmNlcy52YWx1ZXMoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UuYWxsKHNlcnZpY2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoc2VydmljZSkgeyByZXR1cm4gJ0lOVEVSTkFMJyBpbiBzZXJ2aWNlOyB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoc2VydmljZSkgeyByZXR1cm4gc2VydmljZS5JTlRFUk5BTC5kZWxldGUoKTsgfSkpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBQcm92aWRlci5wcm90b3R5cGUuaXNDb21wb25lbnRTZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50ICE9IG51bGw7XHJcbiAgICB9O1xyXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmdldE9ySW5pdGlhbGl6ZVNlcnZpY2UgPSBmdW5jdGlvbiAoaWRlbnRpZmllcikge1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuaW5zdGFuY2VzLmdldChpZGVudGlmaWVyKTtcclxuICAgICAgICBpZiAoIWluc3RhbmNlICYmIHRoaXMuY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlID0gdGhpcy5jb21wb25lbnQuaW5zdGFuY2VGYWN0b3J5KHRoaXMuY29udGFpbmVyLCBub3JtYWxpemVJZGVudGlmaWVyRm9yRmFjdG9yeShpZGVudGlmaWVyKSk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VzLnNldChpZGVudGlmaWVyLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpbnN0YW5jZSB8fCBudWxsO1xyXG4gICAgfTtcclxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5ub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIgPSBmdW5jdGlvbiAoaWRlbnRpZmllcikge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQubXVsdGlwbGVJbnN0YW5jZXMgPyBpZGVudGlmaWVyIDogREVGQVVMVF9FTlRSWV9OQU1FO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlkZW50aWZpZXI7IC8vIGFzc3VtZSBtdWx0aXBsZSBpbnN0YW5jZXMgYXJlIHN1cHBvcnRlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBwcm92aWRlZC5cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xyXG59KCkpO1xyXG4vLyB1bmRlZmluZWQgc2hvdWxkIGJlIHBhc3NlZCB0byB0aGUgc2VydmljZSBmYWN0b3J5IGZvciB0aGUgZGVmYXVsdCBpbnN0YW5jZVxyXG5mdW5jdGlvbiBub3JtYWxpemVJZGVudGlmaWVyRm9yRmFjdG9yeShpZGVudGlmaWVyKSB7XHJcbiAgICByZXR1cm4gaWRlbnRpZmllciA9PT0gREVGQVVMVF9FTlRSWV9OQU1FID8gdW5kZWZpbmVkIDogaWRlbnRpZmllcjtcclxufVxyXG5mdW5jdGlvbiBpc0NvbXBvbmVudEVhZ2VyKGNvbXBvbmVudCkge1xyXG4gICAgcmV0dXJuIGNvbXBvbmVudC5pbnN0YW50aWF0aW9uTW9kZSA9PT0gXCJFQUdFUlwiIC8qIEVBR0VSICovO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBDb21wb25lbnRDb250YWluZXIgdGhhdCBwcm92aWRlcyBQcm92aWRlcnMgZm9yIHNlcnZpY2UgbmFtZSBULCBlLmcuIGBhdXRoYCwgYGF1dGgtaW50ZXJuYWxgXHJcbiAqL1xyXG52YXIgQ29tcG9uZW50Q29udGFpbmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ29tcG9uZW50Q29udGFpbmVyKG5hbWUpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMucHJvdmlkZXJzID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNvbXBvbmVudCBDb21wb25lbnQgYmVpbmcgYWRkZWRcclxuICAgICAqIEBwYXJhbSBvdmVyd3JpdGUgV2hlbiBhIGNvbXBvbmVudCB3aXRoIHRoZSBzYW1lIG5hbWUgaGFzIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkLFxyXG4gICAgICogaWYgb3ZlcndyaXRlIGlzIHRydWU6IG92ZXJ3cml0ZSB0aGUgZXhpc3RpbmcgY29tcG9uZW50IHdpdGggdGhlIG5ldyBjb21wb25lbnQgYW5kIGNyZWF0ZSBhIG5ld1xyXG4gICAgICogcHJvdmlkZXIgd2l0aCB0aGUgbmV3IGNvbXBvbmVudC4gSXQgY2FuIGJlIHVzZWZ1bCBpbiB0ZXN0cyB3aGVyZSB5b3Ugd2FudCB0byB1c2UgZGlmZmVyZW50IG1vY2tzXHJcbiAgICAgKiBmb3IgZGlmZmVyZW50IHRlc3RzLlxyXG4gICAgICogaWYgb3ZlcndyaXRlIGlzIGZhbHNlOiB0aHJvdyBhbiBleGNlcHRpb25cclxuICAgICAqL1xyXG4gICAgQ29tcG9uZW50Q29udGFpbmVyLnByb3RvdHlwZS5hZGRDb21wb25lbnQgPSBmdW5jdGlvbiAoY29tcG9uZW50KSB7XHJcbiAgICAgICAgdmFyIHByb3ZpZGVyID0gdGhpcy5nZXRQcm92aWRlcihjb21wb25lbnQubmFtZSk7XHJcbiAgICAgICAgaWYgKHByb3ZpZGVyLmlzQ29tcG9uZW50U2V0KCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29tcG9uZW50IFwiICsgY29tcG9uZW50Lm5hbWUgKyBcIiBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQgd2l0aCBcIiArIHRoaXMubmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb3ZpZGVyLnNldENvbXBvbmVudChjb21wb25lbnQpO1xyXG4gICAgfTtcclxuICAgIENvbXBvbmVudENvbnRhaW5lci5wcm90b3R5cGUuYWRkT3JPdmVyd3JpdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoY29tcG9uZW50KSB7XHJcbiAgICAgICAgdmFyIHByb3ZpZGVyID0gdGhpcy5nZXRQcm92aWRlcihjb21wb25lbnQubmFtZSk7XHJcbiAgICAgICAgaWYgKHByb3ZpZGVyLmlzQ29tcG9uZW50U2V0KCkpIHtcclxuICAgICAgICAgICAgLy8gZGVsZXRlIHRoZSBleGlzdGluZyBwcm92aWRlciBmcm9tIHRoZSBjb250YWluZXIsIHNvIHdlIGNhbiByZWdpc3RlciB0aGUgbmV3IGNvbXBvbmVudFxyXG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVycy5kZWxldGUoY29tcG9uZW50Lm5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFkZENvbXBvbmVudChjb21wb25lbnQpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogZ2V0UHJvdmlkZXIgcHJvdmlkZXMgYSB0eXBlIHNhZmUgaW50ZXJmYWNlIHdoZXJlIGl0IGNhbiBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgZmllbGQgbmFtZVxyXG4gICAgICogcHJlc2VudCBpbiBOYW1lU2VydmljZU1hcHBpbmcgaW50ZXJmYWNlLlxyXG4gICAgICpcclxuICAgICAqIEZpcmViYXNlIFNES3MgcHJvdmlkaW5nIHNlcnZpY2VzIHNob3VsZCBleHRlbmQgTmFtZVNlcnZpY2VNYXBwaW5nIGludGVyZmFjZSB0byByZWdpc3RlclxyXG4gICAgICogdGhlbXNlbHZlcy5cclxuICAgICAqL1xyXG4gICAgQ29tcG9uZW50Q29udGFpbmVyLnByb3RvdHlwZS5nZXRQcm92aWRlciA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvdmlkZXJzLmhhcyhuYW1lKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm92aWRlcnMuZ2V0KG5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjcmVhdGUgYSBQcm92aWRlciBmb3IgYSBzZXJ2aWNlIHRoYXQgaGFzbid0IHJlZ2lzdGVyZWQgd2l0aCBGaXJlYmFzZVxyXG4gICAgICAgIHZhciBwcm92aWRlciA9IG5ldyBQcm92aWRlcihuYW1lLCB0aGlzKTtcclxuICAgICAgICB0aGlzLnByb3ZpZGVycy5zZXQobmFtZSwgcHJvdmlkZXIpO1xyXG4gICAgICAgIHJldHVybiBwcm92aWRlcjtcclxuICAgIH07XHJcbiAgICBDb21wb25lbnRDb250YWluZXIucHJvdG90eXBlLmdldFByb3ZpZGVycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnByb3ZpZGVycy52YWx1ZXMoKSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENvbXBvbmVudENvbnRhaW5lcjtcclxufSgpKTtcblxuZXhwb3J0cy5Db21wb25lbnQgPSBDb21wb25lbnQ7XG5leHBvcnRzLkNvbXBvbmVudENvbnRhaW5lciA9IENvbXBvbmVudENvbnRhaW5lcjtcbmV4cG9ydHMuUHJvdmlkZXIgPSBQcm92aWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmNqcy5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2ludGVyb3BEZWZhdWx0IChleCkgeyByZXR1cm4gKGV4ICYmICh0eXBlb2YgZXggPT09ICdvYmplY3QnKSAmJiAnZGVmYXVsdCcgaW4gZXgpID8gZXhbJ2RlZmF1bHQnXSA6IGV4OyB9XG5cbnZhciBmaXJlYmFzZSA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdAZmlyZWJhc2UvYXBwJykpO1xuXG52YXIgbmFtZSA9IFwiZmlyZWJhc2VcIjtcbnZhciB2ZXJzaW9uID0gXCI3LjE0LjZcIjtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZmlyZWJhc2UucmVnaXN0ZXJWZXJzaW9uKG5hbWUsIHZlcnNpb24sICdhcHAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmaXJlYmFzZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmNqcy5qcy5tYXBcbiIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcblxyXG5mdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBfYTtcclxuLyoqXHJcbiAqIEEgY29udGFpbmVyIGZvciBhbGwgb2YgdGhlIExvZ2dlciBpbnN0YW5jZXNcclxuICovXHJcbnZhciBpbnN0YW5jZXMgPSBbXTtcclxuLyoqXHJcbiAqIFRoZSBKUyBTREsgc3VwcG9ydHMgNSBsb2cgbGV2ZWxzIGFuZCBhbHNvIGFsbG93cyBhIHVzZXIgdGhlIGFiaWxpdHkgdG9cclxuICogc2lsZW5jZSB0aGUgbG9ncyBhbHRvZ2V0aGVyLlxyXG4gKlxyXG4gKiBUaGUgb3JkZXIgaXMgYSBmb2xsb3dzOlxyXG4gKiBERUJVRyA8IFZFUkJPU0UgPCBJTkZPIDwgV0FSTiA8IEVSUk9SXHJcbiAqXHJcbiAqIEFsbCBvZiB0aGUgbG9nIHR5cGVzIGFib3ZlIHRoZSBjdXJyZW50IGxvZyBsZXZlbCB3aWxsIGJlIGNhcHR1cmVkIChpLmUuIGlmXHJcbiAqIHlvdSBzZXQgdGhlIGxvZyBsZXZlbCB0byBgSU5GT2AsIGVycm9ycyB3aWxsIHN0aWxsIGJlIGxvZ2dlZCwgYnV0IGBERUJVR2AgYW5kXHJcbiAqIGBWRVJCT1NFYCBsb2dzIHdpbGwgbm90KVxyXG4gKi9cclxudmFyIExvZ0xldmVsO1xyXG4oZnVuY3Rpb24gKExvZ0xldmVsKSB7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIkRFQlVHXCJdID0gMF0gPSBcIkRFQlVHXCI7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIlZFUkJPU0VcIl0gPSAxXSA9IFwiVkVSQk9TRVwiO1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJJTkZPXCJdID0gMl0gPSBcIklORk9cIjtcclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiV0FSTlwiXSA9IDNdID0gXCJXQVJOXCI7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIkVSUk9SXCJdID0gNF0gPSBcIkVSUk9SXCI7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIlNJTEVOVFwiXSA9IDVdID0gXCJTSUxFTlRcIjtcclxufSkoTG9nTGV2ZWwgfHwgKExvZ0xldmVsID0ge30pKTtcclxudmFyIGxldmVsU3RyaW5nVG9FbnVtID0ge1xyXG4gICAgJ2RlYnVnJzogTG9nTGV2ZWwuREVCVUcsXHJcbiAgICAndmVyYm9zZSc6IExvZ0xldmVsLlZFUkJPU0UsXHJcbiAgICAnaW5mbyc6IExvZ0xldmVsLklORk8sXHJcbiAgICAnd2Fybic6IExvZ0xldmVsLldBUk4sXHJcbiAgICAnZXJyb3InOiBMb2dMZXZlbC5FUlJPUixcclxuICAgICdzaWxlbnQnOiBMb2dMZXZlbC5TSUxFTlRcclxufTtcclxuLyoqXHJcbiAqIFRoZSBkZWZhdWx0IGxvZyBsZXZlbFxyXG4gKi9cclxudmFyIGRlZmF1bHRMb2dMZXZlbCA9IExvZ0xldmVsLklORk87XHJcbi8qKlxyXG4gKiBCeSBkZWZhdWx0LCBgY29uc29sZS5kZWJ1Z2AgaXMgbm90IGRpc3BsYXllZCBpbiB0aGUgZGV2ZWxvcGVyIGNvbnNvbGUgKGluXHJcbiAqIGNocm9tZSkuIFRvIGF2b2lkIGZvcmNpbmcgdXNlcnMgdG8gaGF2ZSB0byBvcHQtaW4gdG8gdGhlc2UgbG9ncyB0d2ljZVxyXG4gKiAoaS5lLiBvbmNlIGZvciBmaXJlYmFzZSwgYW5kIG9uY2UgaW4gdGhlIGNvbnNvbGUpLCB3ZSBhcmUgc2VuZGluZyBgREVCVUdgXHJcbiAqIGxvZ3MgdG8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24uXHJcbiAqL1xyXG52YXIgQ29uc29sZU1ldGhvZCA9IChfYSA9IHt9LFxyXG4gICAgX2FbTG9nTGV2ZWwuREVCVUddID0gJ2xvZycsXHJcbiAgICBfYVtMb2dMZXZlbC5WRVJCT1NFXSA9ICdsb2cnLFxyXG4gICAgX2FbTG9nTGV2ZWwuSU5GT10gPSAnaW5mbycsXHJcbiAgICBfYVtMb2dMZXZlbC5XQVJOXSA9ICd3YXJuJyxcclxuICAgIF9hW0xvZ0xldmVsLkVSUk9SXSA9ICdlcnJvcicsXHJcbiAgICBfYSk7XHJcbi8qKlxyXG4gKiBUaGUgZGVmYXVsdCBsb2cgaGFuZGxlciB3aWxsIGZvcndhcmQgREVCVUcsIFZFUkJPU0UsIElORk8sIFdBUk4sIGFuZCBFUlJPUlxyXG4gKiBtZXNzYWdlcyBvbiB0byB0aGVpciBjb3JyZXNwb25kaW5nIGNvbnNvbGUgY291bnRlcnBhcnRzIChpZiB0aGUgbG9nIG1ldGhvZFxyXG4gKiBpcyBzdXBwb3J0ZWQgYnkgdGhlIGN1cnJlbnQgbG9nIGxldmVsKVxyXG4gKi9cclxudmFyIGRlZmF1bHRMb2dIYW5kbGVyID0gZnVuY3Rpb24gKGluc3RhbmNlLCBsb2dUeXBlKSB7XHJcbiAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgaWYgKGxvZ1R5cGUgPCBpbnN0YW5jZS5sb2dMZXZlbCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XHJcbiAgICB2YXIgbWV0aG9kID0gQ29uc29sZU1ldGhvZFtsb2dUeXBlXTtcclxuICAgIGlmIChtZXRob2QpIHtcclxuICAgICAgICBjb25zb2xlW21ldGhvZF0uYXBwbHkoY29uc29sZSwgX19zcHJlYWRBcnJheXMoW1wiW1wiICsgbm93ICsgXCJdICBcIiArIGluc3RhbmNlLm5hbWUgKyBcIjpcIl0sIGFyZ3MpKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRlZCB0byBsb2cgYSBtZXNzYWdlIHdpdGggYW4gaW52YWxpZCBsb2dUeXBlICh2YWx1ZTogXCIgKyBsb2dUeXBlICsgXCIpXCIpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgTG9nZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBHaXZlcyB5b3UgYW4gaW5zdGFuY2Ugb2YgYSBMb2dnZXIgdG8gY2FwdHVyZSBtZXNzYWdlcyBhY2NvcmRpbmcgdG9cclxuICAgICAqIEZpcmViYXNlJ3MgbG9nZ2luZyBzY2hlbWUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgdGhhdCB0aGUgbG9ncyB3aWxsIGJlIGFzc29jaWF0ZWQgd2l0aFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBMb2dnZXIobmFtZSkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGxvZyBsZXZlbCBvZiB0aGUgZ2l2ZW4gTG9nZ2VyIGluc3RhbmNlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuX2xvZ0xldmVsID0gZGVmYXVsdExvZ0xldmVsO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBtYWluIChpbnRlcm5hbCkgbG9nIGhhbmRsZXIgZm9yIHRoZSBMb2dnZXIgaW5zdGFuY2UuXHJcbiAgICAgICAgICogQ2FuIGJlIHNldCB0byBhIG5ldyBmdW5jdGlvbiBpbiBpbnRlcm5hbCBwYWNrYWdlIGNvZGUgYnV0IG5vdCBieSB1c2VyLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIgPSBkZWZhdWx0TG9nSGFuZGxlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgb3B0aW9uYWwsIGFkZGl0aW9uYWwsIHVzZXItZGVmaW5lZCBsb2cgaGFuZGxlciBmb3IgdGhlIExvZ2dlciBpbnN0YW5jZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlciA9IG51bGw7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2FwdHVyZSB0aGUgY3VycmVudCBpbnN0YW5jZSBmb3IgbGF0ZXIgdXNlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5zdGFuY2VzLnB1c2godGhpcyk7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTG9nZ2VyLnByb3RvdHlwZSwgXCJsb2dMZXZlbFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2dMZXZlbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICBpZiAoISh2YWwgaW4gTG9nTGV2ZWwpKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIHZhbHVlIGFzc2lnbmVkIHRvIGBsb2dMZXZlbGAnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9sb2dMZXZlbCA9IHZhbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShMb2dnZXIucHJvdG90eXBlLCBcImxvZ0hhbmRsZXJcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9nSGFuZGxlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbCAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVmFsdWUgYXNzaWduZWQgdG8gYGxvZ0hhbmRsZXJgIG11c3QgYmUgYSBmdW5jdGlvbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIgPSB2YWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTG9nZ2VyLnByb3RvdHlwZSwgXCJ1c2VyTG9nSGFuZGxlclwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl91c2VyTG9nSGFuZGxlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlciA9IHZhbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGZ1bmN0aW9ucyBiZWxvdyBhcmUgYWxsIGJhc2VkIG9uIHRoZSBgY29uc29sZWAgaW50ZXJmYWNlXHJcbiAgICAgKi9cclxuICAgIExvZ2dlci5wcm90b3R5cGUuZGVidWcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyICYmIHRoaXMuX3VzZXJMb2dIYW5kbGVyLmFwcGx5KHRoaXMsIF9fc3ByZWFkQXJyYXlzKFt0aGlzLCBMb2dMZXZlbC5ERUJVR10sIGFyZ3MpKTtcclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyLmFwcGx5KHRoaXMsIF9fc3ByZWFkQXJyYXlzKFt0aGlzLCBMb2dMZXZlbC5ERUJVR10sIGFyZ3MpKTtcclxuICAgIH07XHJcbiAgICBMb2dnZXIucHJvdG90eXBlLmxvZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgJiYgdGhpcy5fdXNlckxvZ0hhbmRsZXIuYXBwbHkodGhpcywgX19zcHJlYWRBcnJheXMoW3RoaXMsIExvZ0xldmVsLlZFUkJPU0VdLCBhcmdzKSk7XHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlci5hcHBseSh0aGlzLCBfX3NwcmVhZEFycmF5cyhbdGhpcywgTG9nTGV2ZWwuVkVSQk9TRV0sIGFyZ3MpKTtcclxuICAgIH07XHJcbiAgICBMb2dnZXIucHJvdG90eXBlLmluZm8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyICYmIHRoaXMuX3VzZXJMb2dIYW5kbGVyLmFwcGx5KHRoaXMsIF9fc3ByZWFkQXJyYXlzKFt0aGlzLCBMb2dMZXZlbC5JTkZPXSwgYXJncykpO1xyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIuYXBwbHkodGhpcywgX19zcHJlYWRBcnJheXMoW3RoaXMsIExvZ0xldmVsLklORk9dLCBhcmdzKSk7XHJcbiAgICB9O1xyXG4gICAgTG9nZ2VyLnByb3RvdHlwZS53YXJuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlciAmJiB0aGlzLl91c2VyTG9nSGFuZGxlci5hcHBseSh0aGlzLCBfX3NwcmVhZEFycmF5cyhbdGhpcywgTG9nTGV2ZWwuV0FSTl0sIGFyZ3MpKTtcclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyLmFwcGx5KHRoaXMsIF9fc3ByZWFkQXJyYXlzKFt0aGlzLCBMb2dMZXZlbC5XQVJOXSwgYXJncykpO1xyXG4gICAgfTtcclxuICAgIExvZ2dlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyICYmIHRoaXMuX3VzZXJMb2dIYW5kbGVyLmFwcGx5KHRoaXMsIF9fc3ByZWFkQXJyYXlzKFt0aGlzLCBMb2dMZXZlbC5FUlJPUl0sIGFyZ3MpKTtcclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyLmFwcGx5KHRoaXMsIF9fc3ByZWFkQXJyYXlzKFt0aGlzLCBMb2dMZXZlbC5FUlJPUl0sIGFyZ3MpKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTG9nZ2VyO1xyXG59KCkpO1xyXG5mdW5jdGlvbiBzZXRMb2dMZXZlbChsZXZlbCkge1xyXG4gICAgdmFyIG5ld0xldmVsID0gdHlwZW9mIGxldmVsID09PSAnc3RyaW5nJyA/IGxldmVsU3RyaW5nVG9FbnVtW2xldmVsXSA6IGxldmVsO1xyXG4gICAgaW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24gKGluc3QpIHtcclxuICAgICAgICBpbnN0LmxvZ0xldmVsID0gbmV3TGV2ZWw7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBzZXRVc2VyTG9nSGFuZGxlcihsb2dDYWxsYmFjaywgb3B0aW9ucykge1xyXG4gICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICB2YXIgY3VzdG9tTG9nTGV2ZWwgPSBudWxsO1xyXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMubGV2ZWwpIHtcclxuICAgICAgICAgICAgY3VzdG9tTG9nTGV2ZWwgPSBsZXZlbFN0cmluZ1RvRW51bVtvcHRpb25zLmxldmVsXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxvZ0NhbGxiYWNrID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLnVzZXJMb2dIYW5kbGVyID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLnVzZXJMb2dIYW5kbGVyID0gZnVuY3Rpb24gKGluc3RhbmNlLCBsZXZlbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gYXJnc1xyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGFyZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmcgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmcudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYXJnIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZy5tZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChpZ25vcmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoYXJnKSB7IHJldHVybiBhcmc7IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmpvaW4oJyAnKTtcclxuICAgICAgICAgICAgICAgIGlmIChsZXZlbCA+PSAoY3VzdG9tTG9nTGV2ZWwgIT09IG51bGwgJiYgY3VzdG9tTG9nTGV2ZWwgIT09IHZvaWQgMCA/IGN1c3RvbUxvZ0xldmVsIDogaW5zdGFuY2UubG9nTGV2ZWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9nQ2FsbGJhY2soe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXZlbDogTG9nTGV2ZWxbbGV2ZWxdLnRvTG93ZXJDYXNlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGluc3RhbmNlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBpbnN0YW5jZXNfMSA9IGluc3RhbmNlczsgX2kgPCBpbnN0YW5jZXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSBpbnN0YW5jZXNfMVtfaV07XHJcbiAgICAgICAgX2xvb3BfMShpbnN0YW5jZSk7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgTG9nTGV2ZWwsIExvZ2dlciwgc2V0TG9nTGV2ZWwsIHNldFVzZXJMb2dIYW5kbGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20uanMubWFwXG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG4gIChnbG9iYWwgPSBnbG9iYWwgfHwgc2VsZiwgZmFjdG9yeShnbG9iYWwuaWRiID0ge30pKTtcbn0odGhpcywgZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIGZ1bmN0aW9uIHRvQXJyYXkoYXJyKSB7XG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycik7XG4gIH1cblxuICBmdW5jdGlvbiBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNvbHZlKHJlcXVlc3QucmVzdWx0KTtcbiAgICAgIH07XG5cbiAgICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QocmVxdWVzdC5lcnJvcik7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvbWlzaWZ5UmVxdWVzdENhbGwob2JqLCBtZXRob2QsIGFyZ3MpIHtcbiAgICB2YXIgcmVxdWVzdDtcbiAgICB2YXIgcCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcmVxdWVzdCA9IG9ialttZXRob2RdLmFwcGx5KG9iaiwgYXJncyk7XG4gICAgICBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9KTtcblxuICAgIHAucmVxdWVzdCA9IHJlcXVlc3Q7XG4gICAgcmV0dXJuIHA7XG4gIH1cblxuICBmdW5jdGlvbiBwcm9taXNpZnlDdXJzb3JSZXF1ZXN0Q2FsbChvYmosIG1ldGhvZCwgYXJncykge1xuICAgIHZhciBwID0gcHJvbWlzaWZ5UmVxdWVzdENhbGwob2JqLCBtZXRob2QsIGFyZ3MpO1xuICAgIHJldHVybiBwLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHJldHVybjtcbiAgICAgIHJldHVybiBuZXcgQ3Vyc29yKHZhbHVlLCBwLnJlcXVlc3QpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJveHlQcm9wZXJ0aWVzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIHByb3BlcnRpZXMpIHtcbiAgICBwcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24ocHJvcCkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFByb3h5Q2xhc3MucHJvdG90eXBlLCBwcm9wLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXNbdGFyZ2V0UHJvcF1bcHJvcF07XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgdGhpc1t0YXJnZXRQcm9wXVtwcm9wXSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm94eVJlcXVlc3RNZXRob2RzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIENvbnN0cnVjdG9yLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIGlmICghKHByb3AgaW4gQ29uc3RydWN0b3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgICAgUHJveHlDbGFzcy5wcm90b3R5cGVbcHJvcF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3RDYWxsKHRoaXNbdGFyZ2V0UHJvcF0sIHByb3AsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJveHlNZXRob2RzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIENvbnN0cnVjdG9yLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIGlmICghKHByb3AgaW4gQ29uc3RydWN0b3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgICAgUHJveHlDbGFzcy5wcm90b3R5cGVbcHJvcF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdGFyZ2V0UHJvcF1bcHJvcF0uYXBwbHkodGhpc1t0YXJnZXRQcm9wXSwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm94eUN1cnNvclJlcXVlc3RNZXRob2RzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIENvbnN0cnVjdG9yLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIGlmICghKHByb3AgaW4gQ29uc3RydWN0b3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgICAgUHJveHlDbGFzcy5wcm90b3R5cGVbcHJvcF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeUN1cnNvclJlcXVlc3RDYWxsKHRoaXNbdGFyZ2V0UHJvcF0sIHByb3AsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gSW5kZXgoaW5kZXgpIHtcbiAgICB0aGlzLl9pbmRleCA9IGluZGV4O1xuICB9XG5cbiAgcHJveHlQcm9wZXJ0aWVzKEluZGV4LCAnX2luZGV4JywgW1xuICAgICduYW1lJyxcbiAgICAna2V5UGF0aCcsXG4gICAgJ211bHRpRW50cnknLFxuICAgICd1bmlxdWUnXG4gIF0pO1xuXG4gIHByb3h5UmVxdWVzdE1ldGhvZHMoSW5kZXgsICdfaW5kZXgnLCBJREJJbmRleCwgW1xuICAgICdnZXQnLFxuICAgICdnZXRLZXknLFxuICAgICdnZXRBbGwnLFxuICAgICdnZXRBbGxLZXlzJyxcbiAgICAnY291bnQnXG4gIF0pO1xuXG4gIHByb3h5Q3Vyc29yUmVxdWVzdE1ldGhvZHMoSW5kZXgsICdfaW5kZXgnLCBJREJJbmRleCwgW1xuICAgICdvcGVuQ3Vyc29yJyxcbiAgICAnb3BlbktleUN1cnNvcidcbiAgXSk7XG5cbiAgZnVuY3Rpb24gQ3Vyc29yKGN1cnNvciwgcmVxdWVzdCkge1xuICAgIHRoaXMuX2N1cnNvciA9IGN1cnNvcjtcbiAgICB0aGlzLl9yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgfVxuXG4gIHByb3h5UHJvcGVydGllcyhDdXJzb3IsICdfY3Vyc29yJywgW1xuICAgICdkaXJlY3Rpb24nLFxuICAgICdrZXknLFxuICAgICdwcmltYXJ5S2V5JyxcbiAgICAndmFsdWUnXG4gIF0pO1xuXG4gIHByb3h5UmVxdWVzdE1ldGhvZHMoQ3Vyc29yLCAnX2N1cnNvcicsIElEQkN1cnNvciwgW1xuICAgICd1cGRhdGUnLFxuICAgICdkZWxldGUnXG4gIF0pO1xuXG4gIC8vIHByb3h5ICduZXh0JyBtZXRob2RzXG4gIFsnYWR2YW5jZScsICdjb250aW51ZScsICdjb250aW51ZVByaW1hcnlLZXknXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICBpZiAoIShtZXRob2ROYW1lIGluIElEQkN1cnNvci5wcm90b3R5cGUpKSByZXR1cm47XG4gICAgQ3Vyc29yLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGN1cnNvciA9IHRoaXM7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICBjdXJzb3IuX2N1cnNvclttZXRob2ROYW1lXS5hcHBseShjdXJzb3IuX2N1cnNvciwgYXJncyk7XG4gICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KGN1cnNvci5fcmVxdWVzdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGlmICghdmFsdWUpIHJldHVybjtcbiAgICAgICAgICByZXR1cm4gbmV3IEN1cnNvcih2YWx1ZSwgY3Vyc29yLl9yZXF1ZXN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9KTtcblxuICBmdW5jdGlvbiBPYmplY3RTdG9yZShzdG9yZSkge1xuICAgIHRoaXMuX3N0b3JlID0gc3RvcmU7XG4gIH1cblxuICBPYmplY3RTdG9yZS5wcm90b3R5cGUuY3JlYXRlSW5kZXggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IEluZGV4KHRoaXMuX3N0b3JlLmNyZWF0ZUluZGV4LmFwcGx5KHRoaXMuX3N0b3JlLCBhcmd1bWVudHMpKTtcbiAgfTtcblxuICBPYmplY3RTdG9yZS5wcm90b3R5cGUuaW5kZXggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IEluZGV4KHRoaXMuX3N0b3JlLmluZGV4LmFwcGx5KHRoaXMuX3N0b3JlLCBhcmd1bWVudHMpKTtcbiAgfTtcblxuICBwcm94eVByb3BlcnRpZXMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBbXG4gICAgJ25hbWUnLFxuICAgICdrZXlQYXRoJyxcbiAgICAnaW5kZXhOYW1lcycsXG4gICAgJ2F1dG9JbmNyZW1lbnQnXG4gIF0pO1xuXG4gIHByb3h5UmVxdWVzdE1ldGhvZHMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBJREJPYmplY3RTdG9yZSwgW1xuICAgICdwdXQnLFxuICAgICdhZGQnLFxuICAgICdkZWxldGUnLFxuICAgICdjbGVhcicsXG4gICAgJ2dldCcsXG4gICAgJ2dldEFsbCcsXG4gICAgJ2dldEtleScsXG4gICAgJ2dldEFsbEtleXMnLFxuICAgICdjb3VudCdcbiAgXSk7XG5cbiAgcHJveHlDdXJzb3JSZXF1ZXN0TWV0aG9kcyhPYmplY3RTdG9yZSwgJ19zdG9yZScsIElEQk9iamVjdFN0b3JlLCBbXG4gICAgJ29wZW5DdXJzb3InLFxuICAgICdvcGVuS2V5Q3Vyc29yJ1xuICBdKTtcblxuICBwcm94eU1ldGhvZHMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBJREJPYmplY3RTdG9yZSwgW1xuICAgICdkZWxldGVJbmRleCdcbiAgXSk7XG5cbiAgZnVuY3Rpb24gVHJhbnNhY3Rpb24oaWRiVHJhbnNhY3Rpb24pIHtcbiAgICB0aGlzLl90eCA9IGlkYlRyYW5zYWN0aW9uO1xuICAgIHRoaXMuY29tcGxldGUgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlkYlRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfTtcbiAgICAgIGlkYlRyYW5zYWN0aW9uLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KGlkYlRyYW5zYWN0aW9uLmVycm9yKTtcbiAgICAgIH07XG4gICAgICBpZGJUcmFuc2FjdGlvbi5vbmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChpZGJUcmFuc2FjdGlvbi5lcnJvcik7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLm9iamVjdFN0b3JlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBPYmplY3RTdG9yZSh0aGlzLl90eC5vYmplY3RTdG9yZS5hcHBseSh0aGlzLl90eCwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgcHJveHlQcm9wZXJ0aWVzKFRyYW5zYWN0aW9uLCAnX3R4JywgW1xuICAgICdvYmplY3RTdG9yZU5hbWVzJyxcbiAgICAnbW9kZSdcbiAgXSk7XG5cbiAgcHJveHlNZXRob2RzKFRyYW5zYWN0aW9uLCAnX3R4JywgSURCVHJhbnNhY3Rpb24sIFtcbiAgICAnYWJvcnQnXG4gIF0pO1xuXG4gIGZ1bmN0aW9uIFVwZ3JhZGVEQihkYiwgb2xkVmVyc2lvbiwgdHJhbnNhY3Rpb24pIHtcbiAgICB0aGlzLl9kYiA9IGRiO1xuICAgIHRoaXMub2xkVmVyc2lvbiA9IG9sZFZlcnNpb247XG4gICAgdGhpcy50cmFuc2FjdGlvbiA9IG5ldyBUcmFuc2FjdGlvbih0cmFuc2FjdGlvbik7XG4gIH1cblxuICBVcGdyYWRlREIucHJvdG90eXBlLmNyZWF0ZU9iamVjdFN0b3JlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBPYmplY3RTdG9yZSh0aGlzLl9kYi5jcmVhdGVPYmplY3RTdG9yZS5hcHBseSh0aGlzLl9kYiwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgcHJveHlQcm9wZXJ0aWVzKFVwZ3JhZGVEQiwgJ19kYicsIFtcbiAgICAnbmFtZScsXG4gICAgJ3ZlcnNpb24nLFxuICAgICdvYmplY3RTdG9yZU5hbWVzJ1xuICBdKTtcblxuICBwcm94eU1ldGhvZHMoVXBncmFkZURCLCAnX2RiJywgSURCRGF0YWJhc2UsIFtcbiAgICAnZGVsZXRlT2JqZWN0U3RvcmUnLFxuICAgICdjbG9zZSdcbiAgXSk7XG5cbiAgZnVuY3Rpb24gREIoZGIpIHtcbiAgICB0aGlzLl9kYiA9IGRiO1xuICB9XG5cbiAgREIucHJvdG90eXBlLnRyYW5zYWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBUcmFuc2FjdGlvbih0aGlzLl9kYi50cmFuc2FjdGlvbi5hcHBseSh0aGlzLl9kYiwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgcHJveHlQcm9wZXJ0aWVzKERCLCAnX2RiJywgW1xuICAgICduYW1lJyxcbiAgICAndmVyc2lvbicsXG4gICAgJ29iamVjdFN0b3JlTmFtZXMnXG4gIF0pO1xuXG4gIHByb3h5TWV0aG9kcyhEQiwgJ19kYicsIElEQkRhdGFiYXNlLCBbXG4gICAgJ2Nsb3NlJ1xuICBdKTtcblxuICAvLyBBZGQgY3Vyc29yIGl0ZXJhdG9yc1xuICAvLyBUT0RPOiByZW1vdmUgdGhpcyBvbmNlIGJyb3dzZXJzIGRvIHRoZSByaWdodCB0aGluZyB3aXRoIHByb21pc2VzXG4gIFsnb3BlbkN1cnNvcicsICdvcGVuS2V5Q3Vyc29yJ10uZm9yRWFjaChmdW5jdGlvbihmdW5jTmFtZSkge1xuICAgIFtPYmplY3RTdG9yZSwgSW5kZXhdLmZvckVhY2goZnVuY3Rpb24oQ29uc3RydWN0b3IpIHtcbiAgICAgIC8vIERvbid0IGNyZWF0ZSBpdGVyYXRlS2V5Q3Vyc29yIGlmIG9wZW5LZXlDdXJzb3IgZG9lc24ndCBleGlzdC5cbiAgICAgIGlmICghKGZ1bmNOYW1lIGluIENvbnN0cnVjdG9yLnByb3RvdHlwZSkpIHJldHVybjtcblxuICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlW2Z1bmNOYW1lLnJlcGxhY2UoJ29wZW4nLCAnaXRlcmF0ZScpXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuICAgICAgICB2YXIgbmF0aXZlT2JqZWN0ID0gdGhpcy5fc3RvcmUgfHwgdGhpcy5faW5kZXg7XG4gICAgICAgIHZhciByZXF1ZXN0ID0gbmF0aXZlT2JqZWN0W2Z1bmNOYW1lXS5hcHBseShuYXRpdmVPYmplY3QsIGFyZ3Muc2xpY2UoMCwgLTEpKTtcbiAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBjYWxsYmFjayhyZXF1ZXN0LnJlc3VsdCk7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBwb2x5ZmlsbCBnZXRBbGxcbiAgW0luZGV4LCBPYmplY3RTdG9yZV0uZm9yRWFjaChmdW5jdGlvbihDb25zdHJ1Y3Rvcikge1xuICAgIGlmIChDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZ2V0QWxsKSByZXR1cm47XG4gICAgQ29uc3RydWN0b3IucHJvdG90eXBlLmdldEFsbCA9IGZ1bmN0aW9uKHF1ZXJ5LCBjb3VudCkge1xuICAgICAgdmFyIGluc3RhbmNlID0gdGhpcztcbiAgICAgIHZhciBpdGVtcyA9IFtdO1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgICBpbnN0YW5jZS5pdGVyYXRlQ3Vyc29yKHF1ZXJ5LCBmdW5jdGlvbihjdXJzb3IpIHtcbiAgICAgICAgICBpZiAoIWN1cnNvcikge1xuICAgICAgICAgICAgcmVzb2x2ZShpdGVtcyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGl0ZW1zLnB1c2goY3Vyc29yLnZhbHVlKTtcblxuICAgICAgICAgIGlmIChjb3VudCAhPT0gdW5kZWZpbmVkICYmIGl0ZW1zLmxlbmd0aCA9PSBjb3VudCkge1xuICAgICAgICAgICAgcmVzb2x2ZShpdGVtcyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnNvci5jb250aW51ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIG9wZW5EYihuYW1lLCB2ZXJzaW9uLCB1cGdyYWRlQ2FsbGJhY2spIHtcbiAgICB2YXIgcCA9IHByb21pc2lmeVJlcXVlc3RDYWxsKGluZGV4ZWREQiwgJ29wZW4nLCBbbmFtZSwgdmVyc2lvbl0pO1xuICAgIHZhciByZXF1ZXN0ID0gcC5yZXF1ZXN0O1xuXG4gICAgaWYgKHJlcXVlc3QpIHtcbiAgICAgIHJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgaWYgKHVwZ3JhZGVDYWxsYmFjaykge1xuICAgICAgICAgIHVwZ3JhZGVDYWxsYmFjayhuZXcgVXBncmFkZURCKHJlcXVlc3QucmVzdWx0LCBldmVudC5vbGRWZXJzaW9uLCByZXF1ZXN0LnRyYW5zYWN0aW9uKSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHAudGhlbihmdW5jdGlvbihkYikge1xuICAgICAgcmV0dXJuIG5ldyBEQihkYik7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWxldGVEYihuYW1lKSB7XG4gICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3RDYWxsKGluZGV4ZWREQiwgJ2RlbGV0ZURhdGFiYXNlJywgW25hbWVdKTtcbiAgfVxuXG4gIGV4cG9ydHMub3BlbkRiID0gb3BlbkRiO1xuICBleHBvcnRzLmRlbGV0ZURiID0gZGVsZXRlRGI7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpO1xuIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHQuZGVmYXVsdCA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgcHJpdmF0ZU1hcCkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIGdldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcml2YXRlTWFwLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwLCB2YWx1ZSkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHByaXZhdGVNYXAuc2V0KHJlY2VpdmVyLCB2YWx1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHQuZGVmYXVsdCA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgcHJpdmF0ZU1hcCkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIGdldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcml2YXRlTWFwLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwLCB2YWx1ZSkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHByaXZhdGVNYXAuc2V0KHJlY2VpdmVyLCB2YWx1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHQuZGVmYXVsdCA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgcHJpdmF0ZU1hcCkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIGdldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcml2YXRlTWFwLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwLCB2YWx1ZSkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHByaXZhdGVNYXAuc2V0KHJlY2VpdmVyLCB2YWx1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuIiwiaW1wb3J0IGZpcmViYXNlIGZyb20gJ0BmaXJlYmFzZS9hcHAnOyhmdW5jdGlvbigpIHsvKlxuXG4gQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuKi9cbnZhciBrLGFhPVwiZnVuY3Rpb25cIj09dHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzP09iamVjdC5kZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbihhLGIsYyl7YSE9QXJyYXkucHJvdG90eXBlJiZhIT1PYmplY3QucHJvdG90eXBlJiYoYVtiXT1jLnZhbHVlKX07ZnVuY3Rpb24gYmEoYSl7YT1bXCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyYmd2luZG93LFwib2JqZWN0XCI9PXR5cGVvZiBzZWxmJiZzZWxmLFwib2JqZWN0XCI9PXR5cGVvZiBnbG9iYWwmJmdsb2JhbCxhXTtmb3IodmFyIGI9MDtiPGEubGVuZ3RoOysrYil7dmFyIGM9YVtiXTtpZihjJiZjLk1hdGg9PU1hdGgpcmV0dXJuIGN9cmV0dXJuIGdsb2JhbFRoaXN9dmFyIGNhPWJhKHRoaXMpO1xuZnVuY3Rpb24gZGEoYSxiKXtpZihiKXt2YXIgYz1jYTthPWEuc3BsaXQoXCIuXCIpO2Zvcih2YXIgZD0wO2Q8YS5sZW5ndGgtMTtkKyspe3ZhciBlPWFbZF07ZSBpbiBjfHwoY1tlXT17fSk7Yz1jW2VdfWE9YVthLmxlbmd0aC0xXTtkPWNbYV07Yj1iKGQpO2IhPWQmJm51bGwhPWImJmFhKGMsYSx7Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOmJ9KX19ZnVuY3Rpb24gZWEoYSl7dmFyIGI9MDtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gYjxhLmxlbmd0aD97ZG9uZTohMSx2YWx1ZTphW2IrK119Ontkb25lOiEwfX19ZnVuY3Rpb24gZmEoYSl7dmFyIGI9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yJiZhW1N5bWJvbC5pdGVyYXRvcl07cmV0dXJuIGI/Yi5jYWxsKGEpOntuZXh0OmVhKGEpfX1cbmRhKFwiUHJvbWlzZVwiLGZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoZyl7dGhpcy5iPTA7dGhpcy5jPXZvaWQgMDt0aGlzLmE9W107dmFyIGg9dGhpcy5mKCk7dHJ5e2coaC5yZXNvbHZlLGgucmVqZWN0KX1jYXRjaChtKXtoLnJlamVjdChtKX19ZnVuY3Rpb24gYygpe3RoaXMuYT1udWxsfWZ1bmN0aW9uIGQoZyl7cmV0dXJuIGcgaW5zdGFuY2VvZiBiP2c6bmV3IGIoZnVuY3Rpb24oaCl7aChnKX0pfWlmKGEpcmV0dXJuIGE7Yy5wcm90b3R5cGUuYj1mdW5jdGlvbihnKXtpZihudWxsPT10aGlzLmEpe3RoaXMuYT1bXTt2YXIgaD10aGlzO3RoaXMuYyhmdW5jdGlvbigpe2guZygpfSl9dGhpcy5hLnB1c2goZyl9O3ZhciBlPWNhLnNldFRpbWVvdXQ7Yy5wcm90b3R5cGUuYz1mdW5jdGlvbihnKXtlKGcsMCl9O2MucHJvdG90eXBlLmc9ZnVuY3Rpb24oKXtmb3IoO3RoaXMuYSYmdGhpcy5hLmxlbmd0aDspe3ZhciBnPXRoaXMuYTt0aGlzLmE9W107Zm9yKHZhciBoPTA7aDxnLmxlbmd0aDsrK2gpe3ZhciBtPVxuZ1toXTtnW2hdPW51bGw7dHJ5e20oKX1jYXRjaChwKXt0aGlzLmYocCl9fX10aGlzLmE9bnVsbH07Yy5wcm90b3R5cGUuZj1mdW5jdGlvbihnKXt0aGlzLmMoZnVuY3Rpb24oKXt0aHJvdyBnO30pfTtiLnByb3RvdHlwZS5mPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZyhwKXtyZXR1cm4gZnVuY3Rpb24odil7bXx8KG09ITAscC5jYWxsKGgsdikpfX12YXIgaD10aGlzLG09ITE7cmV0dXJue3Jlc29sdmU6Zyh0aGlzLm0pLHJlamVjdDpnKHRoaXMuZyl9fTtiLnByb3RvdHlwZS5tPWZ1bmN0aW9uKGcpe2lmKGc9PT10aGlzKXRoaXMuZyhuZXcgVHlwZUVycm9yKFwiQSBQcm9taXNlIGNhbm5vdCByZXNvbHZlIHRvIGl0c2VsZlwiKSk7ZWxzZSBpZihnIGluc3RhbmNlb2YgYil0aGlzLnMoZyk7ZWxzZXthOnN3aXRjaCh0eXBlb2YgZyl7Y2FzZSBcIm9iamVjdFwiOnZhciBoPW51bGwhPWc7YnJlYWsgYTtjYXNlIFwiZnVuY3Rpb25cIjpoPSEwO2JyZWFrIGE7ZGVmYXVsdDpoPSExfWg/dGhpcy51KGcpOnRoaXMuaChnKX19O1xuYi5wcm90b3R5cGUudT1mdW5jdGlvbihnKXt2YXIgaD12b2lkIDA7dHJ5e2g9Zy50aGVufWNhdGNoKG0pe3RoaXMuZyhtKTtyZXR1cm59XCJmdW5jdGlvblwiPT10eXBlb2YgaD90aGlzLncoaCxnKTp0aGlzLmgoZyl9O2IucHJvdG90eXBlLmc9ZnVuY3Rpb24oZyl7dGhpcy5pKDIsZyl9O2IucHJvdG90eXBlLmg9ZnVuY3Rpb24oZyl7dGhpcy5pKDEsZyl9O2IucHJvdG90eXBlLmk9ZnVuY3Rpb24oZyxoKXtpZigwIT10aGlzLmIpdGhyb3cgRXJyb3IoXCJDYW5ub3Qgc2V0dGxlKFwiK2crXCIsIFwiK2grXCIpOiBQcm9taXNlIGFscmVhZHkgc2V0dGxlZCBpbiBzdGF0ZVwiK3RoaXMuYik7dGhpcy5iPWc7dGhpcy5jPWg7dGhpcy5sKCl9O2IucHJvdG90eXBlLmw9ZnVuY3Rpb24oKXtpZihudWxsIT10aGlzLmEpe2Zvcih2YXIgZz0wO2c8dGhpcy5hLmxlbmd0aDsrK2cpZi5iKHRoaXMuYVtnXSk7dGhpcy5hPW51bGx9fTt2YXIgZj1uZXcgYztiLnByb3RvdHlwZS5zPWZ1bmN0aW9uKGcpe3ZhciBoPXRoaXMuZigpO1xuZy5PYShoLnJlc29sdmUsaC5yZWplY3QpfTtiLnByb3RvdHlwZS53PWZ1bmN0aW9uKGcsaCl7dmFyIG09dGhpcy5mKCk7dHJ5e2cuY2FsbChoLG0ucmVzb2x2ZSxtLnJlamVjdCl9Y2F0Y2gocCl7bS5yZWplY3QocCl9fTtiLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGcsaCl7ZnVuY3Rpb24gbShBLFEpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIEE/ZnVuY3Rpb24oeGEpe3RyeXtwKEEoeGEpKX1jYXRjaCh1ZCl7dih1ZCl9fTpRfXZhciBwLHYsQz1uZXcgYihmdW5jdGlvbihBLFEpe3A9QTt2PVF9KTt0aGlzLk9hKG0oZyxwKSxtKGgsdikpO3JldHVybiBDfTtiLnByb3RvdHlwZS5jYXRjaD1mdW5jdGlvbihnKXtyZXR1cm4gdGhpcy50aGVuKHZvaWQgMCxnKX07Yi5wcm90b3R5cGUuT2E9ZnVuY3Rpb24oZyxoKXtmdW5jdGlvbiBtKCl7c3dpdGNoKHAuYil7Y2FzZSAxOmcocC5jKTticmVhaztjYXNlIDI6aChwLmMpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJVbmV4cGVjdGVkIHN0YXRlOiBcIitcbnAuYik7fX12YXIgcD10aGlzO251bGw9PXRoaXMuYT9mLmIobSk6dGhpcy5hLnB1c2gobSl9O2IucmVzb2x2ZT1kO2IucmVqZWN0PWZ1bmN0aW9uKGcpe3JldHVybiBuZXcgYihmdW5jdGlvbihoLG0pe20oZyl9KX07Yi5yYWNlPWZ1bmN0aW9uKGcpe3JldHVybiBuZXcgYihmdW5jdGlvbihoLG0pe2Zvcih2YXIgcD1mYShnKSx2PXAubmV4dCgpOyF2LmRvbmU7dj1wLm5leHQoKSlkKHYudmFsdWUpLk9hKGgsbSl9KX07Yi5hbGw9ZnVuY3Rpb24oZyl7dmFyIGg9ZmEoZyksbT1oLm5leHQoKTtyZXR1cm4gbS5kb25lP2QoW10pOm5ldyBiKGZ1bmN0aW9uKHAsdil7ZnVuY3Rpb24gQyh4YSl7cmV0dXJuIGZ1bmN0aW9uKHVkKXtBW3hhXT11ZDtRLS07MD09USYmcChBKX19dmFyIEE9W10sUT0wO2RvIEEucHVzaCh2b2lkIDApLFErKyxkKG0udmFsdWUpLk9hKEMoQS5sZW5ndGgtMSksdiksbT1oLm5leHQoKTt3aGlsZSghbS5kb25lKX0pfTtyZXR1cm4gYn0pO1xudmFyIGhhPWhhfHx7fSxsPXRoaXN8fHNlbGYsaWE9L15bXFx3Ky9fLV0rWz1dezAsMn0kLyxqYT1udWxsO2Z1bmN0aW9uIGthKCl7fVxuZnVuY3Rpb24gbGEoYSl7dmFyIGI9dHlwZW9mIGE7aWYoXCJvYmplY3RcIj09YilpZihhKXtpZihhIGluc3RhbmNlb2YgQXJyYXkpcmV0dXJuXCJhcnJheVwiO2lmKGEgaW5zdGFuY2VvZiBPYmplY3QpcmV0dXJuIGI7dmFyIGM9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGEpO2lmKFwiW29iamVjdCBXaW5kb3ddXCI9PWMpcmV0dXJuXCJvYmplY3RcIjtpZihcIltvYmplY3QgQXJyYXldXCI9PWN8fFwibnVtYmVyXCI9PXR5cGVvZiBhLmxlbmd0aCYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEuc3BsaWNlJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5wcm9wZXJ0eUlzRW51bWVyYWJsZSYmIWEucHJvcGVydHlJc0VudW1lcmFibGUoXCJzcGxpY2VcIikpcmV0dXJuXCJhcnJheVwiO2lmKFwiW29iamVjdCBGdW5jdGlvbl1cIj09Y3x8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEuY2FsbCYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEucHJvcGVydHlJc0VudW1lcmFibGUmJiFhLnByb3BlcnR5SXNFbnVtZXJhYmxlKFwiY2FsbFwiKSlyZXR1cm5cImZ1bmN0aW9uXCJ9ZWxzZSByZXR1cm5cIm51bGxcIjtcbmVsc2UgaWYoXCJmdW5jdGlvblwiPT1iJiZcInVuZGVmaW5lZFwiPT10eXBlb2YgYS5jYWxsKXJldHVyblwib2JqZWN0XCI7cmV0dXJuIGJ9ZnVuY3Rpb24gbWEoYSl7dmFyIGI9bGEoYSk7cmV0dXJuXCJhcnJheVwiPT1ifHxcIm9iamVjdFwiPT1iJiZcIm51bWJlclwiPT10eXBlb2YgYS5sZW5ndGh9ZnVuY3Rpb24gbihhKXtyZXR1cm5cImZ1bmN0aW9uXCI9PWxhKGEpfWZ1bmN0aW9uIHEoYSl7dmFyIGI9dHlwZW9mIGE7cmV0dXJuXCJvYmplY3RcIj09YiYmbnVsbCE9YXx8XCJmdW5jdGlvblwiPT1ifWZ1bmN0aW9uIG5hKGEpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxvYSkmJmFbb2FdfHwoYVtvYV09KytwYSl9dmFyIG9hPVwiY2xvc3VyZV91aWRfXCIrKDFFOSpNYXRoLnJhbmRvbSgpPj4+MCkscGE9MDtmdW5jdGlvbiBxYShhLGIsYyl7cmV0dXJuIGEuY2FsbC5hcHBseShhLmJpbmQsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIHJhKGEsYixjKXtpZighYSl0aHJvdyBFcnJvcigpO2lmKDI8YXJndW1lbnRzLmxlbmd0aCl7dmFyIGQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDIpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7QXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoZSxkKTtyZXR1cm4gYS5hcHBseShiLGUpfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gYS5hcHBseShiLGFyZ3VtZW50cyl9fWZ1bmN0aW9uIHIoYSxiLGMpe0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kJiYtMSE9RnVuY3Rpb24ucHJvdG90eXBlLmJpbmQudG9TdHJpbmcoKS5pbmRleE9mKFwibmF0aXZlIGNvZGVcIik/cj1xYTpyPXJhO3JldHVybiByLmFwcGx5KG51bGwsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIHNhKGEsYil7dmFyIGM9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO3JldHVybiBmdW5jdGlvbigpe3ZhciBkPWMuc2xpY2UoKTtkLnB1c2guYXBwbHkoZCxhcmd1bWVudHMpO3JldHVybiBhLmFwcGx5KHRoaXMsZCl9fXZhciB0YT1EYXRlLm5vd3x8ZnVuY3Rpb24oKXtyZXR1cm4rbmV3IERhdGV9O2Z1bmN0aW9uIHQoYSxiKXtmdW5jdGlvbiBjKCl7fWMucHJvdG90eXBlPWIucHJvdG90eXBlO2EuWmE9Yi5wcm90b3R5cGU7YS5wcm90b3R5cGU9bmV3IGM7YS5wcm90b3R5cGUuY29uc3RydWN0b3I9YX07LypcblxuIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXG5cbiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5mdW5jdGlvbiB1KGEsYixjKXt0aGlzLmNvZGU9dWErYTt0aGlzLm1lc3NhZ2U9Ynx8dmFbYV18fFwiXCI7dGhpcy5hPWN8fG51bGx9dCh1LEVycm9yKTt1LnByb3RvdHlwZS52PWZ1bmN0aW9uKCl7dmFyIGE9e2NvZGU6dGhpcy5jb2RlLG1lc3NhZ2U6dGhpcy5tZXNzYWdlfTt0aGlzLmEmJihhLnNlcnZlclJlc3BvbnNlPXRoaXMuYSk7cmV0dXJuIGF9O3UucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnYoKX07ZnVuY3Rpb24gd2EoYSl7dmFyIGI9YSYmYS5jb2RlO3JldHVybiBiP25ldyB1KGIuc3Vic3RyaW5nKHVhLmxlbmd0aCksYS5tZXNzYWdlLGEuc2VydmVyUmVzcG9uc2UpOm51bGx9XG52YXIgdWE9XCJhdXRoL1wiLHZhPXtcImFkbWluLXJlc3RyaWN0ZWQtb3BlcmF0aW9uXCI6XCJUaGlzIG9wZXJhdGlvbiBpcyByZXN0cmljdGVkIHRvIGFkbWluaXN0cmF0b3JzIG9ubHkuXCIsXCJhcmd1bWVudC1lcnJvclwiOlwiXCIsXCJhcHAtbm90LWF1dGhvcml6ZWRcIjpcIlRoaXMgYXBwLCBpZGVudGlmaWVkIGJ5IHRoZSBkb21haW4gd2hlcmUgaXQncyBob3N0ZWQsIGlzIG5vdCBhdXRob3JpemVkIHRvIHVzZSBGaXJlYmFzZSBBdXRoZW50aWNhdGlvbiB3aXRoIHRoZSBwcm92aWRlZCBBUEkga2V5LiBSZXZpZXcgeW91ciBrZXkgY29uZmlndXJhdGlvbiBpbiB0aGUgR29vZ2xlIEFQSSBjb25zb2xlLlwiLFwiYXBwLW5vdC1pbnN0YWxsZWRcIjpcIlRoZSByZXF1ZXN0ZWQgbW9iaWxlIGFwcGxpY2F0aW9uIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGlkZW50aWZpZXIgKEFuZHJvaWQgcGFja2FnZSBuYW1lIG9yIGlPUyBidW5kbGUgSUQpIHByb3ZpZGVkIGlzIG5vdCBpbnN0YWxsZWQgb24gdGhpcyBkZXZpY2UuXCIsXG5cImNhcHRjaGEtY2hlY2stZmFpbGVkXCI6XCJUaGUgcmVDQVBUQ0hBIHJlc3BvbnNlIHRva2VuIHByb3ZpZGVkIGlzIGVpdGhlciBpbnZhbGlkLCBleHBpcmVkLCBhbHJlYWR5IHVzZWQgb3IgdGhlIGRvbWFpbiBhc3NvY2lhdGVkIHdpdGggaXQgZG9lcyBub3QgbWF0Y2ggdGhlIGxpc3Qgb2Ygd2hpdGVsaXN0ZWQgZG9tYWlucy5cIixcImNvZGUtZXhwaXJlZFwiOlwiVGhlIFNNUyBjb2RlIGhhcyBleHBpcmVkLiBQbGVhc2UgcmUtc2VuZCB0aGUgdmVyaWZpY2F0aW9uIGNvZGUgdG8gdHJ5IGFnYWluLlwiLFwiY29yZG92YS1ub3QtcmVhZHlcIjpcIkNvcmRvdmEgZnJhbWV3b3JrIGlzIG5vdCByZWFkeS5cIixcImNvcnMtdW5zdXBwb3J0ZWRcIjpcIlRoaXMgYnJvd3NlciBpcyBub3Qgc3VwcG9ydGVkLlwiLFwiY3JlZGVudGlhbC1hbHJlYWR5LWluLXVzZVwiOlwiVGhpcyBjcmVkZW50aWFsIGlzIGFscmVhZHkgYXNzb2NpYXRlZCB3aXRoIGEgZGlmZmVyZW50IHVzZXIgYWNjb3VudC5cIixcImN1c3RvbS10b2tlbi1taXNtYXRjaFwiOlwiVGhlIGN1c3RvbSB0b2tlbiBjb3JyZXNwb25kcyB0byBhIGRpZmZlcmVudCBhdWRpZW5jZS5cIixcblwicmVxdWlyZXMtcmVjZW50LWxvZ2luXCI6XCJUaGlzIG9wZXJhdGlvbiBpcyBzZW5zaXRpdmUgYW5kIHJlcXVpcmVzIHJlY2VudCBhdXRoZW50aWNhdGlvbi4gTG9nIGluIGFnYWluIGJlZm9yZSByZXRyeWluZyB0aGlzIHJlcXVlc3QuXCIsXCJkeW5hbWljLWxpbmstbm90LWFjdGl2YXRlZFwiOlwiUGxlYXNlIGFjdGl2YXRlIER5bmFtaWMgTGlua3MgaW4gdGhlIEZpcmViYXNlIENvbnNvbGUgYW5kIGFncmVlIHRvIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucy5cIixcImVtYWlsLWNoYW5nZS1uZWVkcy12ZXJpZmljYXRpb25cIjpcIk11bHRpLWZhY3RvciB1c2VycyBtdXN0IGFsd2F5cyBoYXZlIGEgdmVyaWZpZWQgZW1haWwuXCIsXCJlbWFpbC1hbHJlYWR5LWluLXVzZVwiOlwiVGhlIGVtYWlsIGFkZHJlc3MgaXMgYWxyZWFkeSBpbiB1c2UgYnkgYW5vdGhlciBhY2NvdW50LlwiLFwiZXhwaXJlZC1hY3Rpb24tY29kZVwiOlwiVGhlIGFjdGlvbiBjb2RlIGhhcyBleHBpcmVkLiBcIixcImNhbmNlbGxlZC1wb3B1cC1yZXF1ZXN0XCI6XCJUaGlzIG9wZXJhdGlvbiBoYXMgYmVlbiBjYW5jZWxsZWQgZHVlIHRvIGFub3RoZXIgY29uZmxpY3RpbmcgcG9wdXAgYmVpbmcgb3BlbmVkLlwiLFxuXCJpbnRlcm5hbC1lcnJvclwiOlwiQW4gaW50ZXJuYWwgZXJyb3IgaGFzIG9jY3VycmVkLlwiLFwiaW52YWxpZC1hcHAtY3JlZGVudGlhbFwiOlwiVGhlIHBob25lIHZlcmlmaWNhdGlvbiByZXF1ZXN0IGNvbnRhaW5zIGFuIGludmFsaWQgYXBwbGljYXRpb24gdmVyaWZpZXIuIFRoZSByZUNBUFRDSEEgdG9rZW4gcmVzcG9uc2UgaXMgZWl0aGVyIGludmFsaWQgb3IgZXhwaXJlZC5cIixcImludmFsaWQtYXBwLWlkXCI6XCJUaGUgbW9iaWxlIGFwcCBpZGVudGlmaWVyIGlzIG5vdCByZWdpc3RlZCBmb3IgdGhlIGN1cnJlbnQgcHJvamVjdC5cIixcImludmFsaWQtdXNlci10b2tlblwiOlwiVGhpcyB1c2VyJ3MgY3JlZGVudGlhbCBpc24ndCB2YWxpZCBmb3IgdGhpcyBwcm9qZWN0LiBUaGlzIGNhbiBoYXBwZW4gaWYgdGhlIHVzZXIncyB0b2tlbiBoYXMgYmVlbiB0YW1wZXJlZCB3aXRoLCBvciBpZiB0aGUgdXNlciBpc24ndCBmb3IgdGhlIHByb2plY3QgYXNzb2NpYXRlZCB3aXRoIHRoaXMgQVBJIGtleS5cIixcImludmFsaWQtYXV0aC1ldmVudFwiOlwiQW4gaW50ZXJuYWwgZXJyb3IgaGFzIG9jY3VycmVkLlwiLFxuXCJpbnZhbGlkLXZlcmlmaWNhdGlvbi1jb2RlXCI6XCJUaGUgU01TIHZlcmlmaWNhdGlvbiBjb2RlIHVzZWQgdG8gY3JlYXRlIHRoZSBwaG9uZSBhdXRoIGNyZWRlbnRpYWwgaXMgaW52YWxpZC4gUGxlYXNlIHJlc2VuZCB0aGUgdmVyaWZpY2F0aW9uIGNvZGUgc21zIGFuZCBiZSBzdXJlIHVzZSB0aGUgdmVyaWZpY2F0aW9uIGNvZGUgcHJvdmlkZWQgYnkgdGhlIHVzZXIuXCIsXCJpbnZhbGlkLWNvbnRpbnVlLXVyaVwiOlwiVGhlIGNvbnRpbnVlIFVSTCBwcm92aWRlZCBpbiB0aGUgcmVxdWVzdCBpcyBpbnZhbGlkLlwiLFwiaW52YWxpZC1jb3Jkb3ZhLWNvbmZpZ3VyYXRpb25cIjpcIlRoZSBmb2xsb3dpbmcgQ29yZG92YSBwbHVnaW5zIG11c3QgYmUgaW5zdGFsbGVkIHRvIGVuYWJsZSBPQXV0aCBzaWduLWluOiBjb3Jkb3ZhLXBsdWdpbi1idWlsZGluZm8sIGNvcmRvdmEtdW5pdmVyc2FsLWxpbmtzLXBsdWdpbiwgY29yZG92YS1wbHVnaW4tYnJvd3NlcnRhYiwgY29yZG92YS1wbHVnaW4taW5hcHBicm93c2VyIGFuZCBjb3Jkb3ZhLXBsdWdpbi1jdXN0b211cmxzY2hlbWUuXCIsXG5cImludmFsaWQtY3VzdG9tLXRva2VuXCI6XCJUaGUgY3VzdG9tIHRva2VuIGZvcm1hdCBpcyBpbmNvcnJlY3QuIFBsZWFzZSBjaGVjayB0aGUgZG9jdW1lbnRhdGlvbi5cIixcImludmFsaWQtZHluYW1pYy1saW5rLWRvbWFpblwiOlwiVGhlIHByb3ZpZGVkIGR5bmFtaWMgbGluayBkb21haW4gaXMgbm90IGNvbmZpZ3VyZWQgb3IgYXV0aG9yaXplZCBmb3IgdGhlIGN1cnJlbnQgcHJvamVjdC5cIixcImludmFsaWQtZW1haWxcIjpcIlRoZSBlbWFpbCBhZGRyZXNzIGlzIGJhZGx5IGZvcm1hdHRlZC5cIixcImludmFsaWQtYXBpLWtleVwiOlwiWW91ciBBUEkga2V5IGlzIGludmFsaWQsIHBsZWFzZSBjaGVjayB5b3UgaGF2ZSBjb3BpZWQgaXQgY29ycmVjdGx5LlwiLFwiaW52YWxpZC1jZXJ0LWhhc2hcIjpcIlRoZSBTSEEtMSBjZXJ0aWZpY2F0ZSBoYXNoIHByb3ZpZGVkIGlzIGludmFsaWQuXCIsXCJpbnZhbGlkLWNyZWRlbnRpYWxcIjpcIlRoZSBzdXBwbGllZCBhdXRoIGNyZWRlbnRpYWwgaXMgbWFsZm9ybWVkIG9yIGhhcyBleHBpcmVkLlwiLFxuXCJpbnZhbGlkLW1lc3NhZ2UtcGF5bG9hZFwiOlwiVGhlIGVtYWlsIHRlbXBsYXRlIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBhY3Rpb24gY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIGluIGl0cyBtZXNzYWdlLiBQbGVhc2UgZml4IGJ5IGdvaW5nIHRvIHRoZSBBdXRoIGVtYWlsIHRlbXBsYXRlcyBzZWN0aW9uIGluIHRoZSBGaXJlYmFzZSBDb25zb2xlLlwiLFwiaW52YWxpZC1tdWx0aS1mYWN0b3Itc2Vzc2lvblwiOlwiVGhlIHJlcXVlc3QgZG9lcyBub3QgY29udGFpbiBhIHZhbGlkIHByb29mIG9mIGZpcnN0IGZhY3RvciBzdWNjZXNzZnVsIHNpZ24taW4uXCIsXCJpbnZhbGlkLW9hdXRoLXByb3ZpZGVyXCI6XCJFbWFpbEF1dGhQcm92aWRlciBpcyBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIG9wZXJhdGlvbi4gVGhpcyBvcGVyYXRpb24gb25seSBzdXBwb3J0cyBPQXV0aCBwcm92aWRlcnMuXCIsXCJpbnZhbGlkLW9hdXRoLWNsaWVudC1pZFwiOlwiVGhlIE9BdXRoIGNsaWVudCBJRCBwcm92aWRlZCBpcyBlaXRoZXIgaW52YWxpZCBvciBkb2VzIG5vdCBtYXRjaCB0aGUgc3BlY2lmaWVkIEFQSSBrZXkuXCIsXG5cInVuYXV0aG9yaXplZC1kb21haW5cIjpcIlRoaXMgZG9tYWluIGlzIG5vdCBhdXRob3JpemVkIGZvciBPQXV0aCBvcGVyYXRpb25zIGZvciB5b3VyIEZpcmViYXNlIHByb2plY3QuIEVkaXQgdGhlIGxpc3Qgb2YgYXV0aG9yaXplZCBkb21haW5zIGZyb20gdGhlIEZpcmViYXNlIGNvbnNvbGUuXCIsXCJpbnZhbGlkLWFjdGlvbi1jb2RlXCI6XCJUaGUgYWN0aW9uIGNvZGUgaXMgaW52YWxpZC4gVGhpcyBjYW4gaGFwcGVuIGlmIHRoZSBjb2RlIGlzIG1hbGZvcm1lZCwgZXhwaXJlZCwgb3IgaGFzIGFscmVhZHkgYmVlbiB1c2VkLlwiLFwid3JvbmctcGFzc3dvcmRcIjpcIlRoZSBwYXNzd29yZCBpcyBpbnZhbGlkIG9yIHRoZSB1c2VyIGRvZXMgbm90IGhhdmUgYSBwYXNzd29yZC5cIixcImludmFsaWQtcGVyc2lzdGVuY2UtdHlwZVwiOlwiVGhlIHNwZWNpZmllZCBwZXJzaXN0ZW5jZSB0eXBlIGlzIGludmFsaWQuIEl0IGNhbiBvbmx5IGJlIGxvY2FsLCBzZXNzaW9uIG9yIG5vbmUuXCIsXCJpbnZhbGlkLXBob25lLW51bWJlclwiOlwiVGhlIGZvcm1hdCBvZiB0aGUgcGhvbmUgbnVtYmVyIHByb3ZpZGVkIGlzIGluY29ycmVjdC4gUGxlYXNlIGVudGVyIHRoZSBwaG9uZSBudW1iZXIgaW4gYSBmb3JtYXQgdGhhdCBjYW4gYmUgcGFyc2VkIGludG8gRS4xNjQgZm9ybWF0LiBFLjE2NCBwaG9uZSBudW1iZXJzIGFyZSB3cml0dGVuIGluIHRoZSBmb3JtYXQgWytdW2NvdW50cnkgY29kZV1bc3Vic2NyaWJlciBudW1iZXIgaW5jbHVkaW5nIGFyZWEgY29kZV0uXCIsXG5cImludmFsaWQtcHJvdmlkZXItaWRcIjpcIlRoZSBzcGVjaWZpZWQgcHJvdmlkZXIgSUQgaXMgaW52YWxpZC5cIixcImludmFsaWQtcmVjaXBpZW50LWVtYWlsXCI6XCJUaGUgZW1haWwgY29ycmVzcG9uZGluZyB0byB0aGlzIGFjdGlvbiBmYWlsZWQgdG8gc2VuZCBhcyB0aGUgcHJvdmlkZWQgcmVjaXBpZW50IGVtYWlsIGFkZHJlc3MgaXMgaW52YWxpZC5cIixcImludmFsaWQtc2VuZGVyXCI6XCJUaGUgZW1haWwgdGVtcGxhdGUgY29ycmVzcG9uZGluZyB0byB0aGlzIGFjdGlvbiBjb250YWlucyBhbiBpbnZhbGlkIHNlbmRlciBlbWFpbCBvciBuYW1lLiBQbGVhc2UgZml4IGJ5IGdvaW5nIHRvIHRoZSBBdXRoIGVtYWlsIHRlbXBsYXRlcyBzZWN0aW9uIGluIHRoZSBGaXJlYmFzZSBDb25zb2xlLlwiLFwiaW52YWxpZC12ZXJpZmljYXRpb24taWRcIjpcIlRoZSB2ZXJpZmljYXRpb24gSUQgdXNlZCB0byBjcmVhdGUgdGhlIHBob25lIGF1dGggY3JlZGVudGlhbCBpcyBpbnZhbGlkLlwiLFwiaW52YWxpZC10ZW5hbnQtaWRcIjpcIlRoZSBBdXRoIGluc3RhbmNlJ3MgdGVuYW50IElEIGlzIGludmFsaWQuXCIsXG5cIm11bHRpLWZhY3Rvci1pbmZvLW5vdC1mb3VuZFwiOlwiVGhlIHVzZXIgZG9lcyBub3QgaGF2ZSBhIHNlY29uZCBmYWN0b3IgbWF0Y2hpbmcgdGhlIGlkZW50aWZpZXIgcHJvdmlkZWQuXCIsXCJtdWx0aS1mYWN0b3ItYXV0aC1yZXF1aXJlZFwiOlwiUHJvb2Ygb2Ygb3duZXJzaGlwIG9mIGEgc2Vjb25kIGZhY3RvciBpcyByZXF1aXJlZCB0byBjb21wbGV0ZSBzaWduLWluLlwiLFwibWlzc2luZy1hbmRyb2lkLXBrZy1uYW1lXCI6XCJBbiBBbmRyb2lkIFBhY2thZ2UgTmFtZSBtdXN0IGJlIHByb3ZpZGVkIGlmIHRoZSBBbmRyb2lkIEFwcCBpcyByZXF1aXJlZCB0byBiZSBpbnN0YWxsZWQuXCIsXCJhdXRoLWRvbWFpbi1jb25maWctcmVxdWlyZWRcIjpcIkJlIHN1cmUgdG8gaW5jbHVkZSBhdXRoRG9tYWluIHdoZW4gY2FsbGluZyBmaXJlYmFzZS5pbml0aWFsaXplQXBwKCksIGJ5IGZvbGxvd2luZyB0aGUgaW5zdHJ1Y3Rpb25zIGluIHRoZSBGaXJlYmFzZSBjb25zb2xlLlwiLFwibWlzc2luZy1hcHAtY3JlZGVudGlhbFwiOlwiVGhlIHBob25lIHZlcmlmaWNhdGlvbiByZXF1ZXN0IGlzIG1pc3NpbmcgYW4gYXBwbGljYXRpb24gdmVyaWZpZXIgYXNzZXJ0aW9uLiBBIHJlQ0FQVENIQSByZXNwb25zZSB0b2tlbiBuZWVkcyB0byBiZSBwcm92aWRlZC5cIixcblwibWlzc2luZy12ZXJpZmljYXRpb24tY29kZVwiOlwiVGhlIHBob25lIGF1dGggY3JlZGVudGlhbCB3YXMgY3JlYXRlZCB3aXRoIGFuIGVtcHR5IFNNUyB2ZXJpZmljYXRpb24gY29kZS5cIixcIm1pc3NpbmctY29udGludWUtdXJpXCI6XCJBIGNvbnRpbnVlIFVSTCBtdXN0IGJlIHByb3ZpZGVkIGluIHRoZSByZXF1ZXN0LlwiLFwibWlzc2luZy1pZnJhbWUtc3RhcnRcIjpcIkFuIGludGVybmFsIGVycm9yIGhhcyBvY2N1cnJlZC5cIixcIm1pc3NpbmctaW9zLWJ1bmRsZS1pZFwiOlwiQW4gaU9TIEJ1bmRsZSBJRCBtdXN0IGJlIHByb3ZpZGVkIGlmIGFuIEFwcCBTdG9yZSBJRCBpcyBwcm92aWRlZC5cIixcIm1pc3NpbmctbXVsdGktZmFjdG9yLWluZm9cIjpcIk5vIHNlY29uZCBmYWN0b3IgaWRlbnRpZmllciBpcyBwcm92aWRlZC5cIixcIm1pc3NpbmctbXVsdGktZmFjdG9yLXNlc3Npb25cIjpcIlRoZSByZXF1ZXN0IGlzIG1pc3NpbmcgcHJvb2Ygb2YgZmlyc3QgZmFjdG9yIHN1Y2Nlc3NmdWwgc2lnbi1pbi5cIixcIm1pc3Npbmctb3ItaW52YWxpZC1ub25jZVwiOlwiVGhlIHJlcXVlc3QgZG9lcyBub3QgY29udGFpbiBhIHZhbGlkIG5vbmNlLiBUaGlzIGNhbiBvY2N1ciBpZiB0aGUgU0hBLTI1NiBoYXNoIG9mIHRoZSBwcm92aWRlZCByYXcgbm9uY2UgZG9lcyBub3QgbWF0Y2ggdGhlIGhhc2hlZCBub25jZSBpbiB0aGUgSUQgdG9rZW4gcGF5bG9hZC5cIixcblwibWlzc2luZy1waG9uZS1udW1iZXJcIjpcIlRvIHNlbmQgdmVyaWZpY2F0aW9uIGNvZGVzLCBwcm92aWRlIGEgcGhvbmUgbnVtYmVyIGZvciB0aGUgcmVjaXBpZW50LlwiLFwibWlzc2luZy12ZXJpZmljYXRpb24taWRcIjpcIlRoZSBwaG9uZSBhdXRoIGNyZWRlbnRpYWwgd2FzIGNyZWF0ZWQgd2l0aCBhbiBlbXB0eSB2ZXJpZmljYXRpb24gSUQuXCIsXCJhcHAtZGVsZXRlZFwiOlwiVGhpcyBpbnN0YW5jZSBvZiBGaXJlYmFzZUFwcCBoYXMgYmVlbiBkZWxldGVkLlwiLFwiYWNjb3VudC1leGlzdHMtd2l0aC1kaWZmZXJlbnQtY3JlZGVudGlhbFwiOlwiQW4gYWNjb3VudCBhbHJlYWR5IGV4aXN0cyB3aXRoIHRoZSBzYW1lIGVtYWlsIGFkZHJlc3MgYnV0IGRpZmZlcmVudCBzaWduLWluIGNyZWRlbnRpYWxzLiBTaWduIGluIHVzaW5nIGEgcHJvdmlkZXIgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZW1haWwgYWRkcmVzcy5cIixcIm5ldHdvcmstcmVxdWVzdC1mYWlsZWRcIjpcIkEgbmV0d29yayBlcnJvciAoc3VjaCBhcyB0aW1lb3V0LCBpbnRlcnJ1cHRlZCBjb25uZWN0aW9uIG9yIHVucmVhY2hhYmxlIGhvc3QpIGhhcyBvY2N1cnJlZC5cIixcblwibm8tYXV0aC1ldmVudFwiOlwiQW4gaW50ZXJuYWwgZXJyb3IgaGFzIG9jY3VycmVkLlwiLFwibm8tc3VjaC1wcm92aWRlclwiOlwiVXNlciB3YXMgbm90IGxpbmtlZCB0byBhbiBhY2NvdW50IHdpdGggdGhlIGdpdmVuIHByb3ZpZGVyLlwiLFwibnVsbC11c2VyXCI6XCJBIG51bGwgdXNlciBvYmplY3Qgd2FzIHByb3ZpZGVkIGFzIHRoZSBhcmd1bWVudCBmb3IgYW4gb3BlcmF0aW9uIHdoaWNoIHJlcXVpcmVzIGEgbm9uLW51bGwgdXNlciBvYmplY3QuXCIsXCJvcGVyYXRpb24tbm90LWFsbG93ZWRcIjpcIlRoZSBnaXZlbiBzaWduLWluIHByb3ZpZGVyIGlzIGRpc2FibGVkIGZvciB0aGlzIEZpcmViYXNlIHByb2plY3QuIEVuYWJsZSBpdCBpbiB0aGUgRmlyZWJhc2UgY29uc29sZSwgdW5kZXIgdGhlIHNpZ24taW4gbWV0aG9kIHRhYiBvZiB0aGUgQXV0aCBzZWN0aW9uLlwiLFwib3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiOidUaGlzIG9wZXJhdGlvbiBpcyBub3Qgc3VwcG9ydGVkIGluIHRoZSBlbnZpcm9ubWVudCB0aGlzIGFwcGxpY2F0aW9uIGlzIHJ1bm5pbmcgb24uIFwibG9jYXRpb24ucHJvdG9jb2xcIiBtdXN0IGJlIGh0dHAsIGh0dHBzIG9yIGNocm9tZS1leHRlbnNpb24gYW5kIHdlYiBzdG9yYWdlIG11c3QgYmUgZW5hYmxlZC4nLFxuXCJwb3B1cC1ibG9ja2VkXCI6XCJVbmFibGUgdG8gZXN0YWJsaXNoIGEgY29ubmVjdGlvbiB3aXRoIHRoZSBwb3B1cC4gSXQgbWF5IGhhdmUgYmVlbiBibG9ja2VkIGJ5IHRoZSBicm93c2VyLlwiLFwicG9wdXAtY2xvc2VkLWJ5LXVzZXJcIjpcIlRoZSBwb3B1cCBoYXMgYmVlbiBjbG9zZWQgYnkgdGhlIHVzZXIgYmVmb3JlIGZpbmFsaXppbmcgdGhlIG9wZXJhdGlvbi5cIixcInByb3ZpZGVyLWFscmVhZHktbGlua2VkXCI6XCJVc2VyIGNhbiBvbmx5IGJlIGxpbmtlZCB0byBvbmUgaWRlbnRpdHkgZm9yIHRoZSBnaXZlbiBwcm92aWRlci5cIixcInF1b3RhLWV4Y2VlZGVkXCI6XCJUaGUgcHJvamVjdCdzIHF1b3RhIGZvciB0aGlzIG9wZXJhdGlvbiBoYXMgYmVlbiBleGNlZWRlZC5cIixcInJlZGlyZWN0LWNhbmNlbGxlZC1ieS11c2VyXCI6XCJUaGUgcmVkaXJlY3Qgb3BlcmF0aW9uIGhhcyBiZWVuIGNhbmNlbGxlZCBieSB0aGUgdXNlciBiZWZvcmUgZmluYWxpemluZy5cIixcInJlZGlyZWN0LW9wZXJhdGlvbi1wZW5kaW5nXCI6XCJBIHJlZGlyZWN0IHNpZ24taW4gb3BlcmF0aW9uIGlzIGFscmVhZHkgcGVuZGluZy5cIixcblwicmVqZWN0ZWQtY3JlZGVudGlhbFwiOlwiVGhlIHJlcXVlc3QgY29udGFpbnMgbWFsZm9ybWVkIG9yIG1pc21hdGNoaW5nIGNyZWRlbnRpYWxzLlwiLFwic2Vjb25kLWZhY3Rvci1hbHJlYWR5LWluLXVzZVwiOlwiVGhlIHNlY29uZCBmYWN0b3IgaXMgYWxyZWFkeSBlbnJvbGxlZCBvbiB0aGlzIGFjY291bnQuXCIsXCJtYXhpbXVtLXNlY29uZC1mYWN0b3ItY291bnQtZXhjZWVkZWRcIjpcIlRoZSBtYXhpbXVtIGFsbG93ZWQgbnVtYmVyIG9mIHNlY29uZCBmYWN0b3JzIG9uIGEgdXNlciBoYXMgYmVlbiBleGNlZWRlZC5cIixcInRlbmFudC1pZC1taXNtYXRjaFwiOlwiVGhlIHByb3ZpZGVkIHRlbmFudCBJRCBkb2VzIG5vdCBtYXRjaCB0aGUgQXV0aCBpbnN0YW5jZSdzIHRlbmFudCBJRFwiLHRpbWVvdXQ6XCJUaGUgb3BlcmF0aW9uIGhhcyB0aW1lZCBvdXQuXCIsXCJ1c2VyLXRva2VuLWV4cGlyZWRcIjpcIlRoZSB1c2VyJ3MgY3JlZGVudGlhbCBpcyBubyBsb25nZXIgdmFsaWQuIFRoZSB1c2VyIG11c3Qgc2lnbiBpbiBhZ2Fpbi5cIixcblwidG9vLW1hbnktcmVxdWVzdHNcIjpcIldlIGhhdmUgYmxvY2tlZCBhbGwgcmVxdWVzdHMgZnJvbSB0aGlzIGRldmljZSBkdWUgdG8gdW51c3VhbCBhY3Rpdml0eS4gVHJ5IGFnYWluIGxhdGVyLlwiLFwidW5hdXRob3JpemVkLWNvbnRpbnVlLXVyaVwiOlwiVGhlIGRvbWFpbiBvZiB0aGUgY29udGludWUgVVJMIGlzIG5vdCB3aGl0ZWxpc3RlZC4gIFBsZWFzZSB3aGl0ZWxpc3QgdGhlIGRvbWFpbiBpbiB0aGUgRmlyZWJhc2UgY29uc29sZS5cIixcInVuc3VwcG9ydGVkLWZpcnN0LWZhY3RvclwiOlwiRW5yb2xsaW5nIGEgc2Vjb25kIGZhY3RvciBvciBzaWduaW5nIGluIHdpdGggYSBtdWx0aS1mYWN0b3IgYWNjb3VudCByZXF1aXJlcyBzaWduLWluIHdpdGggYSBzdXBwb3J0ZWQgZmlyc3QgZmFjdG9yLlwiLFwidW5zdXBwb3J0ZWQtcGVyc2lzdGVuY2UtdHlwZVwiOlwiVGhlIGN1cnJlbnQgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCB0aGUgc3BlY2lmaWVkIHBlcnNpc3RlbmNlIHR5cGUuXCIsXCJ1bnN1cHBvcnRlZC10ZW5hbnQtb3BlcmF0aW9uXCI6XCJUaGlzIG9wZXJhdGlvbiBpcyBub3Qgc3VwcG9ydGVkIGluIGEgbXVsdGktdGVuYW50IGNvbnRleHQuXCIsXG5cInVudmVyaWZpZWQtZW1haWxcIjpcIlRoZSBvcGVyYXRpb24gcmVxdWlyZXMgYSB2ZXJpZmllZCBlbWFpbC5cIixcInVzZXItY2FuY2VsbGVkXCI6XCJUaGUgdXNlciBkaWQgbm90IGdyYW50IHlvdXIgYXBwbGljYXRpb24gdGhlIHBlcm1pc3Npb25zIGl0IHJlcXVlc3RlZC5cIixcInVzZXItbm90LWZvdW5kXCI6XCJUaGVyZSBpcyBubyB1c2VyIHJlY29yZCBjb3JyZXNwb25kaW5nIHRvIHRoaXMgaWRlbnRpZmllci4gVGhlIHVzZXIgbWF5IGhhdmUgYmVlbiBkZWxldGVkLlwiLFwidXNlci1kaXNhYmxlZFwiOlwiVGhlIHVzZXIgYWNjb3VudCBoYXMgYmVlbiBkaXNhYmxlZCBieSBhbiBhZG1pbmlzdHJhdG9yLlwiLFwidXNlci1taXNtYXRjaFwiOlwiVGhlIHN1cHBsaWVkIGNyZWRlbnRpYWxzIGRvIG5vdCBjb3JyZXNwb25kIHRvIHRoZSBwcmV2aW91c2x5IHNpZ25lZCBpbiB1c2VyLlwiLFwidXNlci1zaWduZWQtb3V0XCI6XCJcIixcIndlYWstcGFzc3dvcmRcIjpcIlRoZSBwYXNzd29yZCBtdXN0IGJlIDYgY2hhcmFjdGVycyBsb25nIG9yIG1vcmUuXCIsXG5cIndlYi1zdG9yYWdlLXVuc3VwcG9ydGVkXCI6XCJUaGlzIGJyb3dzZXIgaXMgbm90IHN1cHBvcnRlZCBvciAzcmQgcGFydHkgY29va2llcyBhbmQgZGF0YSBtYXkgYmUgZGlzYWJsZWQuXCJ9O3ZhciB5YT17aGQ6e1JhOlwiaHR0cHM6Ly9zdGFnaW5nLWlkZW50aXR5dG9vbGtpdC5zYW5kYm94Lmdvb2dsZWFwaXMuY29tL2lkZW50aXR5dG9vbGtpdC92My9yZWx5aW5ncGFydHkvXCIsWGE6XCJodHRwczovL3N0YWdpbmctc2VjdXJldG9rZW4uc2FuZGJveC5nb29nbGVhcGlzLmNvbS92MS90b2tlblwiLFVhOlwiaHR0cHM6Ly9zdGFnaW5nLWlkZW50aXR5dG9vbGtpdC5zYW5kYm94Lmdvb2dsZWFwaXMuY29tL3YyL1wiLGlkOlwiYlwifSxwZDp7UmE6XCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9pZGVudGl0eXRvb2xraXQvdjMvcmVseWluZ3BhcnR5L1wiLFhhOlwiaHR0cHM6Ly9zZWN1cmV0b2tlbi5nb29nbGVhcGlzLmNvbS92MS90b2tlblwiLFVhOlwiaHR0cHM6Ly9pZGVudGl0eXRvb2xraXQuZ29vZ2xlYXBpcy5jb20vdjIvXCIsaWQ6XCJwXCJ9LHJkOntSYTpcImh0dHBzOi8vc3RhZ2luZy13d3cuc2FuZGJveC5nb29nbGVhcGlzLmNvbS9pZGVudGl0eXRvb2xraXQvdjMvcmVseWluZ3BhcnR5L1wiLFxuWGE6XCJodHRwczovL3N0YWdpbmctc2VjdXJldG9rZW4uc2FuZGJveC5nb29nbGVhcGlzLmNvbS92MS90b2tlblwiLFVhOlwiaHR0cHM6Ly9zdGFnaW5nLWlkZW50aXR5dG9vbGtpdC5zYW5kYm94Lmdvb2dsZWFwaXMuY29tL3YyL1wiLGlkOlwic1wifSxzZDp7UmE6XCJodHRwczovL3d3dy1nb29nbGVhcGlzLXRlc3Quc2FuZGJveC5nb29nbGUuY29tL2lkZW50aXR5dG9vbGtpdC92My9yZWx5aW5ncGFydHkvXCIsWGE6XCJodHRwczovL3Rlc3Qtc2VjdXJldG9rZW4uc2FuZGJveC5nb29nbGVhcGlzLmNvbS92MS90b2tlblwiLFVhOlwiaHR0cHM6Ly90ZXN0LWlkZW50aXR5dG9vbGtpdC5zYW5kYm94Lmdvb2dsZWFwaXMuY29tL3YyL1wiLGlkOlwidFwifX07XG5mdW5jdGlvbiB6YShhKXtmb3IodmFyIGIgaW4geWEpaWYoeWFbYl0uaWQ9PT1hKXJldHVybiBhPXlhW2JdLHtmaXJlYmFzZUVuZHBvaW50OmEuUmEsc2VjdXJlVG9rZW5FbmRwb2ludDphLlhhLGlkZW50aXR5UGxhdGZvcm1FbmRwb2ludDphLlVhfTtyZXR1cm4gbnVsbH12YXIgQWE7QWE9emEoXCJfX0VJRF9fXCIpP1wiX19FSURfX1wiOnZvaWQgMDtmdW5jdGlvbiBCYShhKXtpZighYSlyZXR1cm4hMTt0cnl7cmV0dXJuISFhLiRnb29nX1RoZW5hYmxlfWNhdGNoKGIpe3JldHVybiExfX07ZnVuY3Rpb24gdyhhKXtpZihFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSlFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLHcpO2Vsc2V7dmFyIGI9RXJyb3IoKS5zdGFjaztiJiYodGhpcy5zdGFjaz1iKX1hJiYodGhpcy5tZXNzYWdlPVN0cmluZyhhKSl9dCh3LEVycm9yKTt3LnByb3RvdHlwZS5uYW1lPVwiQ3VzdG9tRXJyb3JcIjtmdW5jdGlvbiBDYShhLGIpe2E9YS5zcGxpdChcIiVzXCIpO2Zvcih2YXIgYz1cIlwiLGQ9YS5sZW5ndGgtMSxlPTA7ZTxkO2UrKyljKz1hW2VdKyhlPGIubGVuZ3RoP2JbZV06XCIlc1wiKTt3LmNhbGwodGhpcyxjK2FbZF0pfXQoQ2Esdyk7Q2EucHJvdG90eXBlLm5hbWU9XCJBc3NlcnRpb25FcnJvclwiO2Z1bmN0aW9uIERhKGEsYil7dGhyb3cgbmV3IENhKFwiRmFpbHVyZVwiKyhhP1wiOiBcIithOlwiXCIpLEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSk7fTtmdW5jdGlvbiBFYShhLGIpe3RoaXMuYz1hO3RoaXMuZj1iO3RoaXMuYj0wO3RoaXMuYT1udWxsfUVhLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oKXtpZigwPHRoaXMuYil7dGhpcy5iLS07dmFyIGE9dGhpcy5hO3RoaXMuYT1hLm5leHQ7YS5uZXh0PW51bGx9ZWxzZSBhPXRoaXMuYygpO3JldHVybiBhfTtmdW5jdGlvbiBGYShhLGIpe2EuZihiKTsxMDA+YS5iJiYoYS5iKyssYi5uZXh0PWEuYSxhLmE9Yil9O2Z1bmN0aW9uIEdhKCl7dGhpcy5iPXRoaXMuYT1udWxsfXZhciBJYT1uZXcgRWEoZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEhhfSxmdW5jdGlvbihhKXthLnJlc2V0KCl9KTtHYS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKGEsYil7dmFyIGM9SWEuZ2V0KCk7Yy5zZXQoYSxiKTt0aGlzLmI/dGhpcy5iLm5leHQ9Yzp0aGlzLmE9Yzt0aGlzLmI9Y307ZnVuY3Rpb24gSmEoKXt2YXIgYT1LYSxiPW51bGw7YS5hJiYoYj1hLmEsYS5hPWEuYS5uZXh0LGEuYXx8KGEuYj1udWxsKSxiLm5leHQ9bnVsbCk7cmV0dXJuIGJ9ZnVuY3Rpb24gSGEoKXt0aGlzLm5leHQ9dGhpcy5iPXRoaXMuYT1udWxsfUhhLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oYSxiKXt0aGlzLmE9YTt0aGlzLmI9Yjt0aGlzLm5leHQ9bnVsbH07SGEucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7dGhpcy5uZXh0PXRoaXMuYj10aGlzLmE9bnVsbH07dmFyIExhPUFycmF5LnByb3RvdHlwZS5pbmRleE9mP2Z1bmN0aW9uKGEsYil7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYSxiLHZvaWQgMCl9OmZ1bmN0aW9uKGEsYil7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVyblwic3RyaW5nXCIhPT10eXBlb2YgYnx8MSE9Yi5sZW5ndGg/LTE6YS5pbmRleE9mKGIsMCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspaWYoYyBpbiBhJiZhW2NdPT09YilyZXR1cm4gYztyZXR1cm4tMX0seD1BcnJheS5wcm90b3R5cGUuZm9yRWFjaD9mdW5jdGlvbihhLGIsYyl7QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChhLGIsYyl9OmZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQ9YS5sZW5ndGgsZT1cInN0cmluZ1wiPT09dHlwZW9mIGE/YS5zcGxpdChcIlwiKTphLGY9MDtmPGQ7ZisrKWYgaW4gZSYmYi5jYWxsKGMsZVtmXSxmLGEpfTtcbmZ1bmN0aW9uIE1hKGEsYil7Zm9yKHZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYT9hLnNwbGl0KFwiXCIpOmEsZD1hLmxlbmd0aC0xOzA8PWQ7LS1kKWQgaW4gYyYmYi5jYWxsKHZvaWQgMCxjW2RdLGQsYSl9XG52YXIgTmE9QXJyYXkucHJvdG90eXBlLmZpbHRlcj9mdW5jdGlvbihhLGIpe3JldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoYSxiLHZvaWQgMCl9OmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWEubGVuZ3RoLGQ9W10sZT0wLGY9XCJzdHJpbmdcIj09PXR5cGVvZiBhP2Euc3BsaXQoXCJcIik6YSxnPTA7ZzxjO2crKylpZihnIGluIGYpe3ZhciBoPWZbZ107Yi5jYWxsKHZvaWQgMCxoLGcsYSkmJihkW2UrK109aCl9cmV0dXJuIGR9LE9hPUFycmF5LnByb3RvdHlwZS5tYXA/ZnVuY3Rpb24oYSxiKXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGEsYix2b2lkIDApfTpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1hLmxlbmd0aCxkPUFycmF5KGMpLGU9XCJzdHJpbmdcIj09PXR5cGVvZiBhP2Euc3BsaXQoXCJcIik6YSxmPTA7ZjxjO2YrKylmIGluIGUmJihkW2ZdPWIuY2FsbCh2b2lkIDAsZVtmXSxmLGEpKTtyZXR1cm4gZH0sUGE9QXJyYXkucHJvdG90eXBlLnNvbWU/ZnVuY3Rpb24oYSxcbmIpe3JldHVybiBBcnJheS5wcm90b3R5cGUuc29tZS5jYWxsKGEsYix2b2lkIDApfTpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1hLmxlbmd0aCxkPVwic3RyaW5nXCI9PT10eXBlb2YgYT9hLnNwbGl0KFwiXCIpOmEsZT0wO2U8YztlKyspaWYoZSBpbiBkJiZiLmNhbGwodm9pZCAwLGRbZV0sZSxhKSlyZXR1cm4hMDtyZXR1cm4hMX07ZnVuY3Rpb24gUWEoYSl7YTp7dmFyIGI9UmE7Zm9yKHZhciBjPWEubGVuZ3RoLGQ9XCJzdHJpbmdcIj09PXR5cGVvZiBhP2Euc3BsaXQoXCJcIik6YSxlPTA7ZTxjO2UrKylpZihlIGluIGQmJmIuY2FsbCh2b2lkIDAsZFtlXSxlLGEpKXtiPWU7YnJlYWsgYX1iPS0xfXJldHVybiAwPmI/bnVsbDpcInN0cmluZ1wiPT09dHlwZW9mIGE/YS5jaGFyQXQoYik6YVtiXX1mdW5jdGlvbiBTYShhLGIpe3JldHVybiAwPD1MYShhLGIpfVxuZnVuY3Rpb24gVGEoYSxiKXtiPUxhKGEsYik7dmFyIGM7KGM9MDw9YikmJkFycmF5LnByb3RvdHlwZS5zcGxpY2UuY2FsbChhLGIsMSk7cmV0dXJuIGN9ZnVuY3Rpb24gVWEoYSxiKXt2YXIgYz0wO01hKGEsZnVuY3Rpb24oZCxlKXtiLmNhbGwodm9pZCAwLGQsZSxhKSYmMT09QXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGEsZSwxKS5sZW5ndGgmJmMrK30pfWZ1bmN0aW9uIFZhKGEpe3JldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLGFyZ3VtZW50cyl9ZnVuY3Rpb24gV2EoYSl7dmFyIGI9YS5sZW5ndGg7aWYoMDxiKXtmb3IodmFyIGM9QXJyYXkoYiksZD0wO2Q8YjtkKyspY1tkXT1hW2RdO3JldHVybiBjfXJldHVybltdfTt2YXIgWGE9U3RyaW5nLnByb3RvdHlwZS50cmltP2Z1bmN0aW9uKGEpe3JldHVybiBhLnRyaW0oKX06ZnVuY3Rpb24oYSl7cmV0dXJuL15bXFxzXFx4YTBdKihbXFxzXFxTXSo/KVtcXHNcXHhhMF0qJC8uZXhlYyhhKVsxXX0sWWE9LyYvZyxaYT0vPC9nLCRhPS8+L2csYWI9L1wiL2csYmI9LycvZyxjYj0vXFx4MDAvZyxkYj0vW1xceDAwJjw+XCInXS87ZnVuY3Rpb24geShhLGIpe3JldHVybi0xIT1hLmluZGV4T2YoYil9ZnVuY3Rpb24gZWIoYSxiKXtyZXR1cm4gYTxiPy0xOmE+Yj8xOjB9O3ZhciBmYjthOnt2YXIgZ2I9bC5uYXZpZ2F0b3I7aWYoZ2Ipe3ZhciBoYj1nYi51c2VyQWdlbnQ7aWYoaGIpe2ZiPWhiO2JyZWFrIGF9fWZiPVwiXCJ9ZnVuY3Rpb24geihhKXtyZXR1cm4geShmYixhKX07ZnVuY3Rpb24gaWIoYSxiKXtmb3IodmFyIGMgaW4gYSliLmNhbGwodm9pZCAwLGFbY10sYyxhKX1mdW5jdGlvbiBqYihhKXtmb3IodmFyIGIgaW4gYSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBrYihhKXt2YXIgYj17fSxjO2ZvcihjIGluIGEpYltjXT1hW2NdO3JldHVybiBifXZhciBsYj1cImNvbnN0cnVjdG9yIGhhc093blByb3BlcnR5IGlzUHJvdG90eXBlT2YgcHJvcGVydHlJc0VudW1lcmFibGUgdG9Mb2NhbGVTdHJpbmcgdG9TdHJpbmcgdmFsdWVPZlwiLnNwbGl0KFwiIFwiKTtmdW5jdGlvbiBCKGEsYil7Zm9yKHZhciBjLGQsZT0xO2U8YXJndW1lbnRzLmxlbmd0aDtlKyspe2Q9YXJndW1lbnRzW2VdO2ZvcihjIGluIGQpYVtjXT1kW2NdO2Zvcih2YXIgZj0wO2Y8bGIubGVuZ3RoO2YrKyljPWxiW2ZdLE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkLGMpJiYoYVtjXT1kW2NdKX19O2Z1bmN0aW9uIG1iKGEsYil7YTp7dHJ5e3ZhciBjPWEmJmEub3duZXJEb2N1bWVudCxkPWMmJihjLmRlZmF1bHRWaWV3fHxjLnBhcmVudFdpbmRvdyk7ZD1kfHxsO2lmKGQuRWxlbWVudCYmZC5Mb2NhdGlvbil7dmFyIGU9ZDticmVhayBhfX1jYXRjaChnKXt9ZT1udWxsfWlmKGUmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBlW2JdJiYoIWF8fCEoYSBpbnN0YW5jZW9mIGVbYl0pJiYoYSBpbnN0YW5jZW9mIGUuTG9jYXRpb258fGEgaW5zdGFuY2VvZiBlLkVsZW1lbnQpKSl7aWYocShhKSl0cnl7dmFyIGY9YS5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZXx8YS5jb25zdHJ1Y3Rvci5uYW1lfHxPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSl9Y2F0Y2goZyl7Zj1cIjxvYmplY3QgY291bGQgbm90IGJlIHN0cmluZ2lmaWVkPlwifWVsc2UgZj12b2lkIDA9PT1hP1widW5kZWZpbmVkXCI6bnVsbD09PWE/XCJudWxsXCI6dHlwZW9mIGE7RGEoXCJBcmd1bWVudCBpcyBub3QgYSAlcyAob3IgYSBub24tRWxlbWVudCwgbm9uLUxvY2F0aW9uIG1vY2spOyBnb3Q6ICVzXCIsXG5iLGYpfX07ZnVuY3Rpb24gbmIoYSxiKXt0aGlzLmE9YT09PW9iJiZifHxcIlwiO3RoaXMuYj1wYn1uYi5wcm90b3R5cGUucmE9ITA7bmIucHJvdG90eXBlLnFhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYX07bmIucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJDb25zdHtcIit0aGlzLmErXCJ9XCJ9O2Z1bmN0aW9uIHFiKGEpe2lmKGEgaW5zdGFuY2VvZiBuYiYmYS5jb25zdHJ1Y3Rvcj09PW5iJiZhLmI9PT1wYilyZXR1cm4gYS5hO0RhKFwiZXhwZWN0ZWQgb2JqZWN0IG9mIHR5cGUgQ29uc3QsIGdvdCAnXCIrYStcIidcIik7cmV0dXJuXCJ0eXBlX2Vycm9yOkNvbnN0XCJ9dmFyIHBiPXt9LG9iPXt9LHJiPW5ldyBuYihvYixcIlwiKTtmdW5jdGlvbiBzYihhLGIpe3RoaXMuYT1hPT09dGImJmJ8fFwiXCI7dGhpcy5iPXVifXNiLnByb3RvdHlwZS5yYT0hMDtzYi5wcm90b3R5cGUucWE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hLnRvU3RyaW5nKCl9O3NiLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiVHJ1c3RlZFJlc291cmNlVXJse1wiK3RoaXMuYStcIn1cIn07ZnVuY3Rpb24gdmIoYSl7aWYoYSBpbnN0YW5jZW9mIHNiJiZhLmNvbnN0cnVjdG9yPT09c2ImJmEuYj09PXViKXJldHVybiBhLmE7RGEoXCJleHBlY3RlZCBvYmplY3Qgb2YgdHlwZSBUcnVzdGVkUmVzb3VyY2VVcmwsIGdvdCAnXCIrYStcIicgb2YgdHlwZSBcIitsYShhKSk7cmV0dXJuXCJ0eXBlX2Vycm9yOlRydXN0ZWRSZXNvdXJjZVVybFwifVxuZnVuY3Rpb24gd2IoYSxiKXt2YXIgYz1xYihhKTtpZigheGIudGVzdChjKSl0aHJvdyBFcnJvcihcIkludmFsaWQgVHJ1c3RlZFJlc291cmNlVXJsIGZvcm1hdDogXCIrYyk7YT1jLnJlcGxhY2UoeWIsZnVuY3Rpb24oZCxlKXtpZighT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsZSkpdGhyb3cgRXJyb3IoJ0ZvdW5kIG1hcmtlciwgXCInK2UrJ1wiLCBpbiBmb3JtYXQgc3RyaW5nLCBcIicrYysnXCIsIGJ1dCBubyB2YWxpZCBsYWJlbCBtYXBwaW5nIGZvdW5kIGluIGFyZ3M6ICcrSlNPTi5zdHJpbmdpZnkoYikpO2Q9YltlXTtyZXR1cm4gZCBpbnN0YW5jZW9mIG5iP3FiKGQpOmVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoZCkpfSk7cmV0dXJuIG5ldyBzYih0YixhKX1cbnZhciB5Yj0vJXsoXFx3Kyl9L2cseGI9L14oKGh0dHBzOik/XFwvXFwvWzAtOWEtei46W1xcXS1dK1xcL3xcXC9bXi9cXFxcXXxbXjovXFxcXCVdK1xcL3xbXjovXFxcXCVdKls/I118YWJvdXQ6YmxhbmsjKS9pLHViPXt9LHRiPXt9O2Z1bmN0aW9uIHpiKGEsYil7dGhpcy5hPWE9PT1BYiYmYnx8XCJcIjt0aGlzLmI9QmJ9emIucHJvdG90eXBlLnJhPSEwO3piLnByb3RvdHlwZS5xYT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmEudG9TdHJpbmcoKX07emIucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJTYWZlVXJse1wiK3RoaXMuYStcIn1cIn07ZnVuY3Rpb24gQ2IoYSl7aWYoYSBpbnN0YW5jZW9mIHpiJiZhLmNvbnN0cnVjdG9yPT09emImJmEuYj09PUJiKXJldHVybiBhLmE7RGEoXCJleHBlY3RlZCBvYmplY3Qgb2YgdHlwZSBTYWZlVXJsLCBnb3QgJ1wiK2ErXCInIG9mIHR5cGUgXCIrbGEoYSkpO3JldHVyblwidHlwZV9lcnJvcjpTYWZlVXJsXCJ9dmFyIERiPS9eKD86KD86aHR0cHM/fG1haWx0b3xmdHApOnxbXjovPyNdKig/OlsvPyNdfCQpKS9pO1xuZnVuY3Rpb24gRWIoYSl7aWYoYSBpbnN0YW5jZW9mIHpiKXJldHVybiBhO2E9XCJvYmplY3RcIj09dHlwZW9mIGEmJmEucmE/YS5xYSgpOlN0cmluZyhhKTtEYi50ZXN0KGEpfHwoYT1cImFib3V0OmludmFsaWQjekNsb3N1cmV6XCIpO3JldHVybiBuZXcgemIoQWIsYSl9dmFyIEJiPXt9LEFiPXt9O2Z1bmN0aW9uIEZiKCl7dGhpcy5hPVwiXCI7dGhpcy5iPUdifUZiLnByb3RvdHlwZS5yYT0hMDtGYi5wcm90b3R5cGUucWE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hLnRvU3RyaW5nKCl9O0ZiLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiU2FmZUh0bWx7XCIrdGhpcy5hK1wifVwifTtmdW5jdGlvbiBIYihhKXtpZihhIGluc3RhbmNlb2YgRmImJmEuY29uc3RydWN0b3I9PT1GYiYmYS5iPT09R2IpcmV0dXJuIGEuYTtEYShcImV4cGVjdGVkIG9iamVjdCBvZiB0eXBlIFNhZmVIdG1sLCBnb3QgJ1wiK2ErXCInIG9mIHR5cGUgXCIrbGEoYSkpO3JldHVyblwidHlwZV9lcnJvcjpTYWZlSHRtbFwifXZhciBHYj17fTtmdW5jdGlvbiBJYihhKXt2YXIgYj1uZXcgRmI7Yi5hPWE7cmV0dXJuIGJ9SWIoXCI8IURPQ1RZUEUgaHRtbD5cIik7dmFyIEpiPUliKFwiXCIpO0liKFwiPGJyPlwiKTtmdW5jdGlvbiBLYihhKXt2YXIgYj1uZXcgc2IodGIscWIocmIpKTttYihhLFwiSFRNTElGcmFtZUVsZW1lbnRcIik7YS5zcmM9dmIoYikudG9TdHJpbmcoKX1mdW5jdGlvbiBMYihhLGIpe21iKGEsXCJIVE1MU2NyaXB0RWxlbWVudFwiKTthLnNyYz12YihiKTtpZihudWxsPT09amEpYjp7Yj1sLmRvY3VtZW50O2lmKChiPWIucXVlcnlTZWxlY3RvciYmYi5xdWVyeVNlbGVjdG9yKFwic2NyaXB0W25vbmNlXVwiKSkmJihiPWIubm9uY2V8fGIuZ2V0QXR0cmlidXRlKFwibm9uY2VcIikpJiZpYS50ZXN0KGIpKXtqYT1iO2JyZWFrIGJ9amE9XCJcIn1iPWphO2ImJmEuc2V0QXR0cmlidXRlKFwibm9uY2VcIixiKX07ZnVuY3Rpb24gTWIoYSxiKXtmb3IodmFyIGM9YS5zcGxpdChcIiVzXCIpLGQ9XCJcIixlPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKTtlLmxlbmd0aCYmMTxjLmxlbmd0aDspZCs9Yy5zaGlmdCgpK2Uuc2hpZnQoKTtyZXR1cm4gZCtjLmpvaW4oXCIlc1wiKX1mdW5jdGlvbiBOYihhKXtkYi50ZXN0KGEpJiYoLTEhPWEuaW5kZXhPZihcIiZcIikmJihhPWEucmVwbGFjZShZYSxcIiZhbXA7XCIpKSwtMSE9YS5pbmRleE9mKFwiPFwiKSYmKGE9YS5yZXBsYWNlKFphLFwiJmx0O1wiKSksLTEhPWEuaW5kZXhPZihcIj5cIikmJihhPWEucmVwbGFjZSgkYSxcIiZndDtcIikpLC0xIT1hLmluZGV4T2YoJ1wiJykmJihhPWEucmVwbGFjZShhYixcIiZxdW90O1wiKSksLTEhPWEuaW5kZXhPZihcIidcIikmJihhPWEucmVwbGFjZShiYixcIiYjMzk7XCIpKSwtMSE9YS5pbmRleE9mKFwiXFx4MDBcIikmJihhPWEucmVwbGFjZShjYixcIiYjMDtcIikpKTtyZXR1cm4gYX07ZnVuY3Rpb24gT2IoYSl7T2JbXCIgXCJdKGEpO3JldHVybiBhfU9iW1wiIFwiXT1rYTtmdW5jdGlvbiBQYihhLGIpe3ZhciBjPVFiO3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYyxhKT9jW2FdOmNbYV09YihhKX07dmFyIFJiPXooXCJPcGVyYVwiKSxTYj16KFwiVHJpZGVudFwiKXx8eihcIk1TSUVcIiksVGI9eihcIkVkZ2VcIiksVWI9VGJ8fFNiLFZiPXooXCJHZWNrb1wiKSYmISh5KGZiLnRvTG93ZXJDYXNlKCksXCJ3ZWJraXRcIikmJiF6KFwiRWRnZVwiKSkmJiEoeihcIlRyaWRlbnRcIil8fHooXCJNU0lFXCIpKSYmIXooXCJFZGdlXCIpLFdiPXkoZmIudG9Mb3dlckNhc2UoKSxcIndlYmtpdFwiKSYmIXooXCJFZGdlXCIpO2Z1bmN0aW9uIFhiKCl7dmFyIGE9bC5kb2N1bWVudDtyZXR1cm4gYT9hLmRvY3VtZW50TW9kZTp2b2lkIDB9dmFyIFliO1xuYTp7dmFyIFpiPVwiXCIsJGI9ZnVuY3Rpb24oKXt2YXIgYT1mYjtpZihWYilyZXR1cm4vcnY6KFteXFwpO10rKShcXCl8OykvLmV4ZWMoYSk7aWYoVGIpcmV0dXJuL0VkZ2VcXC8oW1xcZFxcLl0rKS8uZXhlYyhhKTtpZihTYilyZXR1cm4vXFxiKD86TVNJRXxydilbOiBdKFteXFwpO10rKShcXCl8OykvLmV4ZWMoYSk7aWYoV2IpcmV0dXJuL1dlYktpdFxcLyhcXFMrKS8uZXhlYyhhKTtpZihSYilyZXR1cm4vKD86VmVyc2lvbilbIFxcL10/KFxcUyspLy5leGVjKGEpfSgpOyRiJiYoWmI9JGI/JGJbMV06XCJcIik7aWYoU2Ipe3ZhciBhYz1YYigpO2lmKG51bGwhPWFjJiZhYz5wYXJzZUZsb2F0KFpiKSl7WWI9U3RyaW5nKGFjKTticmVhayBhfX1ZYj1aYn12YXIgUWI9e307XG5mdW5jdGlvbiBiYyhhKXtyZXR1cm4gUGIoYSxmdW5jdGlvbigpe2Zvcih2YXIgYj0wLGM9WGEoU3RyaW5nKFliKSkuc3BsaXQoXCIuXCIpLGQ9WGEoU3RyaW5nKGEpKS5zcGxpdChcIi5cIiksZT1NYXRoLm1heChjLmxlbmd0aCxkLmxlbmd0aCksZj0wOzA9PWImJmY8ZTtmKyspe3ZhciBnPWNbZl18fFwiXCIsaD1kW2ZdfHxcIlwiO2Rve2c9LyhcXGQqKShcXEQqKSguKikvLmV4ZWMoZyl8fFtcIlwiLFwiXCIsXCJcIixcIlwiXTtoPS8oXFxkKikoXFxEKikoLiopLy5leGVjKGgpfHxbXCJcIixcIlwiLFwiXCIsXCJcIl07aWYoMD09Z1swXS5sZW5ndGgmJjA9PWhbMF0ubGVuZ3RoKWJyZWFrO2I9ZWIoMD09Z1sxXS5sZW5ndGg/MDpwYXJzZUludChnWzFdLDEwKSwwPT1oWzFdLmxlbmd0aD8wOnBhcnNlSW50KGhbMV0sMTApKXx8ZWIoMD09Z1syXS5sZW5ndGgsMD09aFsyXS5sZW5ndGgpfHxlYihnWzJdLGhbMl0pO2c9Z1szXTtoPWhbM119d2hpbGUoMD09Yil9cmV0dXJuIDA8PWJ9KX12YXIgY2M7XG5jYz1sLmRvY3VtZW50JiZTYj9YYigpOnZvaWQgMDt0cnl7KG5ldyBzZWxmLk9mZnNjcmVlbkNhbnZhcygwLDApKS5nZXRDb250ZXh0KFwiMmRcIil9Y2F0Y2goYSl7fXZhciBkYz0hU2J8fDk8PU51bWJlcihjYyk7ZnVuY3Rpb24gZWMoYSl7dmFyIGI9ZG9jdW1lbnQ7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhP2IuZ2V0RWxlbWVudEJ5SWQoYSk6YX1mdW5jdGlvbiBmYyhhLGIpe2liKGIsZnVuY3Rpb24oYyxkKXtjJiZcIm9iamVjdFwiPT10eXBlb2YgYyYmYy5yYSYmKGM9Yy5xYSgpKTtcInN0eWxlXCI9PWQ/YS5zdHlsZS5jc3NUZXh0PWM6XCJjbGFzc1wiPT1kP2EuY2xhc3NOYW1lPWM6XCJmb3JcIj09ZD9hLmh0bWxGb3I9YzpnYy5oYXNPd25Qcm9wZXJ0eShkKT9hLnNldEF0dHJpYnV0ZShnY1tkXSxjKTowPT1kLmxhc3RJbmRleE9mKFwiYXJpYS1cIiwwKXx8MD09ZC5sYXN0SW5kZXhPZihcImRhdGEtXCIsMCk/YS5zZXRBdHRyaWJ1dGUoZCxjKTphW2RdPWN9KX1cbnZhciBnYz17Y2VsbHBhZGRpbmc6XCJjZWxsUGFkZGluZ1wiLGNlbGxzcGFjaW5nOlwiY2VsbFNwYWNpbmdcIixjb2xzcGFuOlwiY29sU3BhblwiLGZyYW1lYm9yZGVyOlwiZnJhbWVCb3JkZXJcIixoZWlnaHQ6XCJoZWlnaHRcIixtYXhsZW5ndGg6XCJtYXhMZW5ndGhcIixub25jZTpcIm5vbmNlXCIscm9sZTpcInJvbGVcIixyb3dzcGFuOlwicm93U3BhblwiLHR5cGU6XCJ0eXBlXCIsdXNlbWFwOlwidXNlTWFwXCIsdmFsaWduOlwidkFsaWduXCIsd2lkdGg6XCJ3aWR0aFwifTtcbmZ1bmN0aW9uIGhjKGEsYixjKXt2YXIgZD1hcmd1bWVudHMsZT1kb2N1bWVudCxmPVN0cmluZyhkWzBdKSxnPWRbMV07aWYoIWRjJiZnJiYoZy5uYW1lfHxnLnR5cGUpKXtmPVtcIjxcIixmXTtnLm5hbWUmJmYucHVzaCgnIG5hbWU9XCInLE5iKGcubmFtZSksJ1wiJyk7aWYoZy50eXBlKXtmLnB1c2goJyB0eXBlPVwiJyxOYihnLnR5cGUpLCdcIicpO3ZhciBoPXt9O0IoaCxnKTtkZWxldGUgaC50eXBlO2c9aH1mLnB1c2goXCI+XCIpO2Y9Zi5qb2luKFwiXCIpfWY9aWMoZSxmKTtnJiYoXCJzdHJpbmdcIj09PXR5cGVvZiBnP2YuY2xhc3NOYW1lPWc6QXJyYXkuaXNBcnJheShnKT9mLmNsYXNzTmFtZT1nLmpvaW4oXCIgXCIpOmZjKGYsZykpOzI8ZC5sZW5ndGgmJmpjKGUsZixkKTtyZXR1cm4gZn1cbmZ1bmN0aW9uIGpjKGEsYixjKXtmdW5jdGlvbiBkKGcpe2cmJmIuYXBwZW5kQ2hpbGQoXCJzdHJpbmdcIj09PXR5cGVvZiBnP2EuY3JlYXRlVGV4dE5vZGUoZyk6Zyl9Zm9yKHZhciBlPTI7ZTxjLmxlbmd0aDtlKyspe3ZhciBmPWNbZV07IW1hKGYpfHxxKGYpJiYwPGYubm9kZVR5cGU/ZChmKTp4KGtjKGYpP1dhKGYpOmYsZCl9fWZ1bmN0aW9uIGljKGEsYil7Yj1TdHJpbmcoYik7XCJhcHBsaWNhdGlvbi94aHRtbCt4bWxcIj09PWEuY29udGVudFR5cGUmJihiPWIudG9Mb3dlckNhc2UoKSk7cmV0dXJuIGEuY3JlYXRlRWxlbWVudChiKX1mdW5jdGlvbiBrYyhhKXtpZihhJiZcIm51bWJlclwiPT10eXBlb2YgYS5sZW5ndGgpe2lmKHEoYSkpcmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgYS5pdGVtfHxcInN0cmluZ1wiPT10eXBlb2YgYS5pdGVtO2lmKG4oYSkpcmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgYS5pdGVtfXJldHVybiExfTtmdW5jdGlvbiBsYyhhKXtsLnNldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBhO30sMCl9dmFyIG1jO1xuZnVuY3Rpb24gbmMoKXt2YXIgYT1sLk1lc3NhZ2VDaGFubmVsO1widW5kZWZpbmVkXCI9PT10eXBlb2YgYSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiB3aW5kb3cmJndpbmRvdy5wb3N0TWVzc2FnZSYmd2luZG93LmFkZEV2ZW50TGlzdGVuZXImJiF6KFwiUHJlc3RvXCIpJiYoYT1mdW5jdGlvbigpe3ZhciBlPWljKGRvY3VtZW50LFwiSUZSQU1FXCIpO2Uuc3R5bGUuZGlzcGxheT1cIm5vbmVcIjtLYihlKTtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoZSk7dmFyIGY9ZS5jb250ZW50V2luZG93O2U9Zi5kb2N1bWVudDtlLm9wZW4oKTtlLndyaXRlKEhiKEpiKSk7ZS5jbG9zZSgpO3ZhciBnPVwiY2FsbEltbWVkaWF0ZVwiK01hdGgucmFuZG9tKCksaD1cImZpbGU6XCI9PWYubG9jYXRpb24ucHJvdG9jb2w/XCIqXCI6Zi5sb2NhdGlvbi5wcm90b2NvbCtcIi8vXCIrZi5sb2NhdGlvbi5ob3N0O2U9cihmdW5jdGlvbihtKXtpZigoXCIqXCI9PWh8fG0ub3JpZ2luPT1oKSYmbS5kYXRhPT1nKXRoaXMucG9ydDEub25tZXNzYWdlKCl9LFxudGhpcyk7Zi5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGUsITEpO3RoaXMucG9ydDE9e307dGhpcy5wb3J0Mj17cG9zdE1lc3NhZ2U6ZnVuY3Rpb24oKXtmLnBvc3RNZXNzYWdlKGcsaCl9fX0pO2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYSYmIXooXCJUcmlkZW50XCIpJiYheihcIk1TSUVcIikpe3ZhciBiPW5ldyBhLGM9e30sZD1jO2IucG9ydDEub25tZXNzYWdlPWZ1bmN0aW9uKCl7aWYodm9pZCAwIT09Yy5uZXh0KXtjPWMubmV4dDt2YXIgZT1jLkRiO2MuRGI9bnVsbDtlKCl9fTtyZXR1cm4gZnVuY3Rpb24oZSl7ZC5uZXh0PXtEYjplfTtkPWQubmV4dDtiLnBvcnQyLnBvc3RNZXNzYWdlKDApfX1yZXR1cm4gZnVuY3Rpb24oZSl7bC5zZXRUaW1lb3V0KGUsMCl9fTtmdW5jdGlvbiBvYyhhLGIpe3BjfHxxYygpO3JjfHwocGMoKSxyYz0hMCk7S2EuYWRkKGEsYil9dmFyIHBjO2Z1bmN0aW9uIHFjKCl7aWYobC5Qcm9taXNlJiZsLlByb21pc2UucmVzb2x2ZSl7dmFyIGE9bC5Qcm9taXNlLnJlc29sdmUodm9pZCAwKTtwYz1mdW5jdGlvbigpe2EudGhlbihzYyl9fWVsc2UgcGM9ZnVuY3Rpb24oKXt2YXIgYj1zYzshbihsLnNldEltbWVkaWF0ZSl8fGwuV2luZG93JiZsLldpbmRvdy5wcm90b3R5cGUmJiF6KFwiRWRnZVwiKSYmbC5XaW5kb3cucHJvdG90eXBlLnNldEltbWVkaWF0ZT09bC5zZXRJbW1lZGlhdGU/KG1jfHwobWM9bmMoKSksbWMoYikpOmwuc2V0SW1tZWRpYXRlKGIpfX12YXIgcmM9ITEsS2E9bmV3IEdhO2Z1bmN0aW9uIHNjKCl7Zm9yKHZhciBhO2E9SmEoKTspe3RyeXthLmEuY2FsbChhLmIpfWNhdGNoKGIpe2xjKGIpfUZhKElhLGEpfXJjPSExfTtmdW5jdGlvbiBEKGEsYil7dGhpcy5hPXRjO3RoaXMuaT12b2lkIDA7dGhpcy5mPXRoaXMuYj10aGlzLmM9bnVsbDt0aGlzLmc9dGhpcy5oPSExO2lmKGEhPWthKXRyeXt2YXIgYz10aGlzO2EuY2FsbChiLGZ1bmN0aW9uKGQpe3VjKGMsdmMsZCl9LGZ1bmN0aW9uKGQpe2lmKCEoZCBpbnN0YW5jZW9mIHdjKSl0cnl7aWYoZCBpbnN0YW5jZW9mIEVycm9yKXRocm93IGQ7dGhyb3cgRXJyb3IoXCJQcm9taXNlIHJlamVjdGVkLlwiKTt9Y2F0Y2goZSl7fXVjKGMseGMsZCl9KX1jYXRjaChkKXt1Yyh0aGlzLHhjLGQpfX12YXIgdGM9MCx2Yz0yLHhjPTM7ZnVuY3Rpb24geWMoKXt0aGlzLm5leHQ9dGhpcy5mPXRoaXMuYj10aGlzLmc9dGhpcy5hPW51bGw7dGhpcy5jPSExfXljLnByb3RvdHlwZS5yZXNldD1mdW5jdGlvbigpe3RoaXMuZj10aGlzLmI9dGhpcy5nPXRoaXMuYT1udWxsO3RoaXMuYz0hMX07dmFyIHpjPW5ldyBFYShmdW5jdGlvbigpe3JldHVybiBuZXcgeWN9LGZ1bmN0aW9uKGEpe2EucmVzZXQoKX0pO1xuZnVuY3Rpb24gQWMoYSxiLGMpe3ZhciBkPXpjLmdldCgpO2QuZz1hO2QuYj1iO2QuZj1jO3JldHVybiBkfWZ1bmN0aW9uIEUoYSl7aWYoYSBpbnN0YW5jZW9mIEQpcmV0dXJuIGE7dmFyIGI9bmV3IEQoa2EpO3VjKGIsdmMsYSk7cmV0dXJuIGJ9ZnVuY3Rpb24gRihhKXtyZXR1cm4gbmV3IEQoZnVuY3Rpb24oYixjKXtjKGEpfSl9ZnVuY3Rpb24gQmMoYSxiLGMpe0NjKGEsYixjLG51bGwpfHxvYyhzYShiLGEpKX1mdW5jdGlvbiBEYyhhKXtyZXR1cm4gbmV3IEQoZnVuY3Rpb24oYixjKXt2YXIgZD1hLmxlbmd0aCxlPVtdO2lmKGQpZm9yKHZhciBmPWZ1bmN0aW9uKHAsdil7ZC0tO2VbcF09djswPT1kJiZiKGUpfSxnPWZ1bmN0aW9uKHApe2MocCl9LGg9MCxtO2g8YS5sZW5ndGg7aCsrKW09YVtoXSxCYyhtLHNhKGYsaCksZyk7ZWxzZSBiKGUpfSl9XG5mdW5jdGlvbiBFYyhhKXtyZXR1cm4gbmV3IEQoZnVuY3Rpb24oYil7dmFyIGM9YS5sZW5ndGgsZD1bXTtpZihjKWZvcih2YXIgZT1mdW5jdGlvbihoLG0scCl7Yy0tO2RbaF09bT97TWI6ITAsdmFsdWU6cH06e01iOiExLHJlYXNvbjpwfTswPT1jJiZiKGQpfSxmPTAsZztmPGEubGVuZ3RoO2YrKylnPWFbZl0sQmMoZyxzYShlLGYsITApLHNhKGUsZiwhMSkpO2Vsc2UgYihkKX0pfUQucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBGYyh0aGlzLG4oYSk/YTpudWxsLG4oYik/YjpudWxsLGMpfTtELnByb3RvdHlwZS4kZ29vZ19UaGVuYWJsZT0hMDtrPUQucHJvdG90eXBlO2subWE9ZnVuY3Rpb24oYSxiKXthPUFjKGEsYSxiKTthLmM9ITA7R2ModGhpcyxhKTtyZXR1cm4gdGhpc307ay5vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIEZjKHRoaXMsbnVsbCxhLGIpfTtcbmsuY2FuY2VsPWZ1bmN0aW9uKGEpe2lmKHRoaXMuYT09dGMpe3ZhciBiPW5ldyB3YyhhKTtvYyhmdW5jdGlvbigpe0hjKHRoaXMsYil9LHRoaXMpfX07ZnVuY3Rpb24gSGMoYSxiKXtpZihhLmE9PXRjKWlmKGEuYyl7dmFyIGM9YS5jO2lmKGMuYil7Zm9yKHZhciBkPTAsZT1udWxsLGY9bnVsbCxnPWMuYjtnJiYoZy5jfHwoZCsrLGcuYT09YSYmKGU9ZyksIShlJiYxPGQpKSk7Zz1nLm5leHQpZXx8KGY9Zyk7ZSYmKGMuYT09dGMmJjE9PWQ/SGMoYyxiKTooZj8oZD1mLGQubmV4dD09Yy5mJiYoYy5mPWQpLGQubmV4dD1kLm5leHQubmV4dCk6SWMoYyksSmMoYyxlLHhjLGIpKSl9YS5jPW51bGx9ZWxzZSB1YyhhLHhjLGIpfWZ1bmN0aW9uIEdjKGEsYil7YS5ifHxhLmEhPXZjJiZhLmEhPXhjfHxLYyhhKTthLmY/YS5mLm5leHQ9YjphLmI9YjthLmY9Yn1cbmZ1bmN0aW9uIEZjKGEsYixjLGQpe3ZhciBlPUFjKG51bGwsbnVsbCxudWxsKTtlLmE9bmV3IEQoZnVuY3Rpb24oZixnKXtlLmc9Yj9mdW5jdGlvbihoKXt0cnl7dmFyIG09Yi5jYWxsKGQsaCk7ZihtKX1jYXRjaChwKXtnKHApfX06ZjtlLmI9Yz9mdW5jdGlvbihoKXt0cnl7dmFyIG09Yy5jYWxsKGQsaCk7dm9pZCAwPT09bSYmaCBpbnN0YW5jZW9mIHdjP2coaCk6ZihtKX1jYXRjaChwKXtnKHApfX06Z30pO2UuYS5jPWE7R2MoYSxlKTtyZXR1cm4gZS5hfWsuWWM9ZnVuY3Rpb24oYSl7dGhpcy5hPXRjO3VjKHRoaXMsdmMsYSl9O2suWmM9ZnVuY3Rpb24oYSl7dGhpcy5hPXRjO3VjKHRoaXMseGMsYSl9O1xuZnVuY3Rpb24gdWMoYSxiLGMpe2EuYT09dGMmJihhPT09YyYmKGI9eGMsYz1uZXcgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW5ub3QgcmVzb2x2ZSB0byBpdHNlbGZcIikpLGEuYT0xLENjKGMsYS5ZYyxhLlpjLGEpfHwoYS5pPWMsYS5hPWIsYS5jPW51bGwsS2MoYSksYiE9eGN8fGMgaW5zdGFuY2VvZiB3Y3x8TGMoYSxjKSkpfWZ1bmN0aW9uIENjKGEsYixjLGQpe2lmKGEgaW5zdGFuY2VvZiBEKXJldHVybiBHYyhhLEFjKGJ8fGthLGN8fG51bGwsZCkpLCEwO2lmKEJhKGEpKXJldHVybiBhLnRoZW4oYixjLGQpLCEwO2lmKHEoYSkpdHJ5e3ZhciBlPWEudGhlbjtpZihuKGUpKXJldHVybiBNYyhhLGUsYixjLGQpLCEwfWNhdGNoKGYpe3JldHVybiBjLmNhbGwoZCxmKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIE1jKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihtKXtofHwoaD0hMCxkLmNhbGwoZSxtKSl9ZnVuY3Rpb24gZyhtKXtofHwoaD0hMCxjLmNhbGwoZSxtKSl9dmFyIGg9ITE7dHJ5e2IuY2FsbChhLGcsZil9Y2F0Y2gobSl7ZihtKX19ZnVuY3Rpb24gS2MoYSl7YS5ofHwoYS5oPSEwLG9jKGEuZWMsYSkpfWZ1bmN0aW9uIEljKGEpe3ZhciBiPW51bGw7YS5iJiYoYj1hLmIsYS5iPWIubmV4dCxiLm5leHQ9bnVsbCk7YS5ifHwoYS5mPW51bGwpO3JldHVybiBifWsuZWM9ZnVuY3Rpb24oKXtmb3IodmFyIGE7YT1JYyh0aGlzKTspSmModGhpcyxhLHRoaXMuYSx0aGlzLmkpO3RoaXMuaD0hMX07XG5mdW5jdGlvbiBKYyhhLGIsYyxkKXtpZihjPT14YyYmYi5iJiYhYi5jKWZvcig7YSYmYS5nO2E9YS5jKWEuZz0hMTtpZihiLmEpYi5hLmM9bnVsbCxOYyhiLGMsZCk7ZWxzZSB0cnl7Yi5jP2IuZy5jYWxsKGIuZik6TmMoYixjLGQpfWNhdGNoKGUpe09jLmNhbGwobnVsbCxlKX1GYSh6YyxiKX1mdW5jdGlvbiBOYyhhLGIsYyl7Yj09dmM/YS5nLmNhbGwoYS5mLGMpOmEuYiYmYS5iLmNhbGwoYS5mLGMpfWZ1bmN0aW9uIExjKGEsYil7YS5nPSEwO29jKGZ1bmN0aW9uKCl7YS5nJiZPYy5jYWxsKG51bGwsYil9KX12YXIgT2M9bGM7ZnVuY3Rpb24gd2MoYSl7dy5jYWxsKHRoaXMsYSl9dCh3Yyx3KTt3Yy5wcm90b3R5cGUubmFtZT1cImNhbmNlbFwiO2Z1bmN0aW9uIFBjKCl7MCE9UWMmJihSY1tuYSh0aGlzKV09dGhpcyk7dGhpcy53YT10aGlzLndhO3RoaXMubmE9dGhpcy5uYX12YXIgUWM9MCxSYz17fTtQYy5wcm90b3R5cGUud2E9ITE7ZnVuY3Rpb24gU2MoYSl7aWYoIWEud2EmJihhLndhPSEwLGEuQmEoKSwwIT1RYykpe3ZhciBiPW5hKGEpO2lmKDAhPVFjJiZhLm5hJiYwPGEubmEubGVuZ3RoKXRocm93IEVycm9yKGErXCIgZGlkIG5vdCBlbXB0eSBpdHMgb25EaXNwb3NlQ2FsbGJhY2tzIHF1ZXVlLiBUaGlzIHByb2JhYmx5IG1lYW5zIGl0IG92ZXJyb2RlIGRpc3Bvc2UoKSBvciBkaXNwb3NlSW50ZXJuYWwoKSB3aXRob3V0IGNhbGxpbmcgdGhlIHN1cGVyY2xhc3MnIG1ldGhvZC5cIik7ZGVsZXRlIFJjW2JdfX1QYy5wcm90b3R5cGUuQmE9ZnVuY3Rpb24oKXtpZih0aGlzLm5hKWZvcig7dGhpcy5uYS5sZW5ndGg7KXRoaXMubmEuc2hpZnQoKSgpfTt2YXIgVGM9T2JqZWN0LmZyZWV6ZXx8ZnVuY3Rpb24oYSl7cmV0dXJuIGF9O3ZhciBVYz0hU2J8fDk8PU51bWJlcihjYyksVmM9U2ImJiFiYyhcIjlcIiksV2M9ZnVuY3Rpb24oKXtpZighbC5hZGRFdmVudExpc3RlbmVyfHwhT2JqZWN0LmRlZmluZVByb3BlcnR5KXJldHVybiExO3ZhciBhPSExLGI9T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXthPSEwfX0pO3RyeXtsLmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsa2EsYiksbC5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLGthLGIpfWNhdGNoKGMpe31yZXR1cm4gYX0oKTtmdW5jdGlvbiBYYyhhLGIpe3RoaXMudHlwZT1hO3RoaXMuYj10aGlzLnRhcmdldD1iO3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMX1YYy5wcm90b3R5cGUucHJldmVudERlZmF1bHQ9ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITB9O2Z1bmN0aW9uIFljKGEsYil7WGMuY2FsbCh0aGlzLGE/YS50eXBlOlwiXCIpO3RoaXMucmVsYXRlZFRhcmdldD10aGlzLmI9dGhpcy50YXJnZXQ9bnVsbDt0aGlzLmJ1dHRvbj10aGlzLnNjcmVlblk9dGhpcy5zY3JlZW5YPXRoaXMuY2xpZW50WT10aGlzLmNsaWVudFg9MDt0aGlzLmtleT1cIlwiO3RoaXMubWV0YUtleT10aGlzLnNoaWZ0S2V5PXRoaXMuYWx0S2V5PXRoaXMuY3RybEtleT0hMTt0aGlzLnBvaW50ZXJJZD0wO3RoaXMucG9pbnRlclR5cGU9XCJcIjt0aGlzLmE9bnVsbDtpZihhKXt2YXIgYz10aGlzLnR5cGU9YS50eXBlLGQ9YS5jaGFuZ2VkVG91Y2hlcyYmYS5jaGFuZ2VkVG91Y2hlcy5sZW5ndGg/YS5jaGFuZ2VkVG91Y2hlc1swXTpudWxsO3RoaXMudGFyZ2V0PWEudGFyZ2V0fHxhLnNyY0VsZW1lbnQ7dGhpcy5iPWI7aWYoYj1hLnJlbGF0ZWRUYXJnZXQpe2lmKFZiKXthOnt0cnl7T2IoYi5ub2RlTmFtZSk7dmFyIGU9ITA7YnJlYWsgYX1jYXRjaChmKXt9ZT0hMX1lfHwoYj1udWxsKX19ZWxzZVwibW91c2VvdmVyXCI9PVxuYz9iPWEuZnJvbUVsZW1lbnQ6XCJtb3VzZW91dFwiPT1jJiYoYj1hLnRvRWxlbWVudCk7dGhpcy5yZWxhdGVkVGFyZ2V0PWI7ZD8odGhpcy5jbGllbnRYPXZvaWQgMCE9PWQuY2xpZW50WD9kLmNsaWVudFg6ZC5wYWdlWCx0aGlzLmNsaWVudFk9dm9pZCAwIT09ZC5jbGllbnRZP2QuY2xpZW50WTpkLnBhZ2VZLHRoaXMuc2NyZWVuWD1kLnNjcmVlblh8fDAsdGhpcy5zY3JlZW5ZPWQuc2NyZWVuWXx8MCk6KHRoaXMuY2xpZW50WD12b2lkIDAhPT1hLmNsaWVudFg/YS5jbGllbnRYOmEucGFnZVgsdGhpcy5jbGllbnRZPXZvaWQgMCE9PWEuY2xpZW50WT9hLmNsaWVudFk6YS5wYWdlWSx0aGlzLnNjcmVlblg9YS5zY3JlZW5YfHwwLHRoaXMuc2NyZWVuWT1hLnNjcmVlbll8fDApO3RoaXMuYnV0dG9uPWEuYnV0dG9uO3RoaXMua2V5PWEua2V5fHxcIlwiO3RoaXMuY3RybEtleT1hLmN0cmxLZXk7dGhpcy5hbHRLZXk9YS5hbHRLZXk7dGhpcy5zaGlmdEtleT1hLnNoaWZ0S2V5O3RoaXMubWV0YUtleT1cbmEubWV0YUtleTt0aGlzLnBvaW50ZXJJZD1hLnBvaW50ZXJJZHx8MDt0aGlzLnBvaW50ZXJUeXBlPVwic3RyaW5nXCI9PT10eXBlb2YgYS5wb2ludGVyVHlwZT9hLnBvaW50ZXJUeXBlOlpjW2EucG9pbnRlclR5cGVdfHxcIlwiO3RoaXMuYT1hO2EuZGVmYXVsdFByZXZlbnRlZCYmdGhpcy5wcmV2ZW50RGVmYXVsdCgpfX10KFljLFhjKTt2YXIgWmM9VGMoezI6XCJ0b3VjaFwiLDM6XCJwZW5cIiw0OlwibW91c2VcIn0pO1ljLnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdD1mdW5jdGlvbigpe1ljLlphLnByZXZlbnREZWZhdWx0LmNhbGwodGhpcyk7dmFyIGE9dGhpcy5hO2lmKGEucHJldmVudERlZmF1bHQpYS5wcmV2ZW50RGVmYXVsdCgpO2Vsc2UgaWYoYS5yZXR1cm5WYWx1ZT0hMSxWYyl0cnl7aWYoYS5jdHJsS2V5fHwxMTI8PWEua2V5Q29kZSYmMTIzPj1hLmtleUNvZGUpYS5rZXlDb2RlPS0xfWNhdGNoKGIpe319O1ljLnByb3RvdHlwZS5mPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYX07dmFyICRjPVwiY2xvc3VyZV9saXN0ZW5hYmxlX1wiKygxRTYqTWF0aC5yYW5kb20oKXwwKSxhZD0wO2Z1bmN0aW9uIGJkKGEsYixjLGQsZSl7dGhpcy5saXN0ZW5lcj1hO3RoaXMucHJveHk9bnVsbDt0aGlzLnNyYz1iO3RoaXMudHlwZT1jO3RoaXMuY2FwdHVyZT0hIWQ7dGhpcy5UYT1lO3RoaXMua2V5PSsrYWQ7dGhpcy51YT10aGlzLk5hPSExfWZ1bmN0aW9uIGNkKGEpe2EudWE9ITA7YS5saXN0ZW5lcj1udWxsO2EucHJveHk9bnVsbDthLnNyYz1udWxsO2EuVGE9bnVsbH07ZnVuY3Rpb24gZGQoYSl7dGhpcy5zcmM9YTt0aGlzLmE9e307dGhpcy5iPTB9ZGQucHJvdG90eXBlLmFkZD1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPWEudG9TdHJpbmcoKTthPXRoaXMuYVtmXTthfHwoYT10aGlzLmFbZl09W10sdGhpcy5iKyspO3ZhciBnPWVkKGEsYixkLGUpOy0xPGc/KGI9YVtnXSxjfHwoYi5OYT0hMSkpOihiPW5ldyBiZChiLHRoaXMuc3JjLGYsISFkLGUpLGIuTmE9YyxhLnB1c2goYikpO3JldHVybiBifTtmdW5jdGlvbiBmZChhLGIpe3ZhciBjPWIudHlwZTtjIGluIGEuYSYmVGEoYS5hW2NdLGIpJiYoY2QoYiksMD09YS5hW2NdLmxlbmd0aCYmKGRlbGV0ZSBhLmFbY10sYS5iLS0pKX1mdW5jdGlvbiBlZChhLGIsYyxkKXtmb3IodmFyIGU9MDtlPGEubGVuZ3RoOysrZSl7dmFyIGY9YVtlXTtpZighZi51YSYmZi5saXN0ZW5lcj09YiYmZi5jYXB0dXJlPT0hIWMmJmYuVGE9PWQpcmV0dXJuIGV9cmV0dXJuLTF9O3ZhciBnZD1cImNsb3N1cmVfbG1fXCIrKDFFNipNYXRoLnJhbmRvbSgpfDApLGhkPXt9LGlkPTA7ZnVuY3Rpb24gamQoYSxiLGMsZCxlKXtpZihkJiZkLm9uY2Upa2QoYSxiLGMsZCxlKTtlbHNlIGlmKEFycmF5LmlzQXJyYXkoYikpZm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKyspamQoYSxiW2ZdLGMsZCxlKTtlbHNlIGM9bGQoYyksYSYmYVskY10/bWQoYSxiLGMscShkKT8hIWQuY2FwdHVyZTohIWQsZSk6bmQoYSxiLGMsITEsZCxlKX1cbmZ1bmN0aW9uIG5kKGEsYixjLGQsZSxmKXtpZighYil0aHJvdyBFcnJvcihcIkludmFsaWQgZXZlbnQgdHlwZVwiKTt2YXIgZz1xKGUpPyEhZS5jYXB0dXJlOiEhZSxoPW9kKGEpO2h8fChhW2dkXT1oPW5ldyBkZChhKSk7Yz1oLmFkZChiLGMsZCxnLGYpO2lmKCFjLnByb3h5KXtkPXBkKCk7Yy5wcm94eT1kO2Quc3JjPWE7ZC5saXN0ZW5lcj1jO2lmKGEuYWRkRXZlbnRMaXN0ZW5lcilXY3x8KGU9Zyksdm9pZCAwPT09ZSYmKGU9ITEpLGEuYWRkRXZlbnRMaXN0ZW5lcihiLnRvU3RyaW5nKCksZCxlKTtlbHNlIGlmKGEuYXR0YWNoRXZlbnQpYS5hdHRhY2hFdmVudChxZChiLnRvU3RyaW5nKCkpLGQpO2Vsc2UgaWYoYS5hZGRMaXN0ZW5lciYmYS5yZW1vdmVMaXN0ZW5lcilhLmFkZExpc3RlbmVyKGQpO2Vsc2UgdGhyb3cgRXJyb3IoXCJhZGRFdmVudExpc3RlbmVyIGFuZCBhdHRhY2hFdmVudCBhcmUgdW5hdmFpbGFibGUuXCIpO2lkKyt9fVxuZnVuY3Rpb24gcGQoKXt2YXIgYT1yZCxiPVVjP2Z1bmN0aW9uKGMpe3JldHVybiBhLmNhbGwoYi5zcmMsYi5saXN0ZW5lcixjKX06ZnVuY3Rpb24oYyl7Yz1hLmNhbGwoYi5zcmMsYi5saXN0ZW5lcixjKTtpZighYylyZXR1cm4gY307cmV0dXJuIGJ9ZnVuY3Rpb24ga2QoYSxiLGMsZCxlKXtpZihBcnJheS5pc0FycmF5KGIpKWZvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7ZisrKWtkKGEsYltmXSxjLGQsZSk7ZWxzZSBjPWxkKGMpLGEmJmFbJGNdP3NkKGEsYixjLHEoZCk/ISFkLmNhcHR1cmU6ISFkLGUpOm5kKGEsYixjLCEwLGQsZSl9XG5mdW5jdGlvbiB0ZChhLGIsYyxkLGUpe2lmKEFycmF5LmlzQXJyYXkoYikpZm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKyspdGQoYSxiW2ZdLGMsZCxlKTtlbHNlKGQ9cShkKT8hIWQuY2FwdHVyZTohIWQsYz1sZChjKSxhJiZhWyRjXSk/KGE9YS51LGI9U3RyaW5nKGIpLnRvU3RyaW5nKCksYiBpbiBhLmEmJihmPWEuYVtiXSxjPWVkKGYsYyxkLGUpLC0xPGMmJihjZChmW2NdKSxBcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwoZixjLDEpLDA9PWYubGVuZ3RoJiYoZGVsZXRlIGEuYVtiXSxhLmItLSkpKSk6YSYmKGE9b2QoYSkpJiYoYj1hLmFbYi50b1N0cmluZygpXSxhPS0xLGImJihhPWVkKGIsYyxkLGUpKSwoYz0tMTxhP2JbYV06bnVsbCkmJnZkKGMpKX1cbmZ1bmN0aW9uIHZkKGEpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYSYmYSYmIWEudWEpe3ZhciBiPWEuc3JjO2lmKGImJmJbJGNdKWZkKGIudSxhKTtlbHNle3ZhciBjPWEudHlwZSxkPWEucHJveHk7Yi5yZW1vdmVFdmVudExpc3RlbmVyP2IucmVtb3ZlRXZlbnRMaXN0ZW5lcihjLGQsYS5jYXB0dXJlKTpiLmRldGFjaEV2ZW50P2IuZGV0YWNoRXZlbnQocWQoYyksZCk6Yi5hZGRMaXN0ZW5lciYmYi5yZW1vdmVMaXN0ZW5lciYmYi5yZW1vdmVMaXN0ZW5lcihkKTtpZC0tOyhjPW9kKGIpKT8oZmQoYyxhKSwwPT1jLmImJihjLnNyYz1udWxsLGJbZ2RdPW51bGwpKTpjZChhKX19fWZ1bmN0aW9uIHFkKGEpe3JldHVybiBhIGluIGhkP2hkW2FdOmhkW2FdPVwib25cIithfVxuZnVuY3Rpb24gd2QoYSxiLGMsZCl7dmFyIGU9ITA7aWYoYT1vZChhKSlpZihiPWEuYVtiLnRvU3RyaW5nKCldKWZvcihiPWIuY29uY2F0KCksYT0wO2E8Yi5sZW5ndGg7YSsrKXt2YXIgZj1iW2FdO2YmJmYuY2FwdHVyZT09YyYmIWYudWEmJihmPXhkKGYsZCksZT1lJiYhMSE9PWYpfXJldHVybiBlfWZ1bmN0aW9uIHhkKGEsYil7dmFyIGM9YS5saXN0ZW5lcixkPWEuVGF8fGEuc3JjO2EuTmEmJnZkKGEpO3JldHVybiBjLmNhbGwoZCxiKX1cbmZ1bmN0aW9uIHJkKGEsYil7aWYoYS51YSlyZXR1cm4hMDtpZighVWMpe2lmKCFiKWE6e2I9W1wid2luZG93XCIsXCJldmVudFwiXTtmb3IodmFyIGM9bCxkPTA7ZDxiLmxlbmd0aDtkKyspaWYoYz1jW2JbZF1dLG51bGw9PWMpe2I9bnVsbDticmVhayBhfWI9Y31kPWI7Yj1uZXcgWWMoZCx0aGlzKTtjPSEwO2lmKCEoMD5kLmtleUNvZGV8fHZvaWQgMCE9ZC5yZXR1cm5WYWx1ZSkpe2E6e3ZhciBlPSExO2lmKDA9PWQua2V5Q29kZSl0cnl7ZC5rZXlDb2RlPS0xO2JyZWFrIGF9Y2F0Y2goZyl7ZT0hMH1pZihlfHx2b2lkIDA9PWQucmV0dXJuVmFsdWUpZC5yZXR1cm5WYWx1ZT0hMH1kPVtdO2ZvcihlPWIuYjtlO2U9ZS5wYXJlbnROb2RlKWQucHVzaChlKTthPWEudHlwZTtmb3IoZT1kLmxlbmd0aC0xOzA8PWU7ZS0tKXtiLmI9ZFtlXTt2YXIgZj13ZChkW2VdLGEsITAsYik7Yz1jJiZmfWZvcihlPTA7ZTxkLmxlbmd0aDtlKyspYi5iPWRbZV0sZj13ZChkW2VdLGEsITEsYiksYz1jJiZmfXJldHVybiBjfXJldHVybiB4ZChhLFxubmV3IFljKGIsdGhpcykpfWZ1bmN0aW9uIG9kKGEpe2E9YVtnZF07cmV0dXJuIGEgaW5zdGFuY2VvZiBkZD9hOm51bGx9dmFyIHlkPVwiX19jbG9zdXJlX2V2ZW50c19mbl9cIisoMUU5Kk1hdGgucmFuZG9tKCk+Pj4wKTtmdW5jdGlvbiBsZChhKXtpZihuKGEpKXJldHVybiBhO2FbeWRdfHwoYVt5ZF09ZnVuY3Rpb24oYil7cmV0dXJuIGEuaGFuZGxlRXZlbnQoYil9KTtyZXR1cm4gYVt5ZF19O2Z1bmN0aW9uIEcoKXtQYy5jYWxsKHRoaXMpO3RoaXMudT1uZXcgZGQodGhpcyk7dGhpcy5ZYj10aGlzO3RoaXMuZWI9bnVsbH10KEcsUGMpO0cucHJvdG90eXBlWyRjXT0hMDtHLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2pkKHRoaXMsYSxiLGMsZCl9O0cucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oYSxiLGMsZCl7dGQodGhpcyxhLGIsYyxkKX07XG5HLnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50PWZ1bmN0aW9uKGEpe3ZhciBiLGM9dGhpcy5lYjtpZihjKWZvcihiPVtdO2M7Yz1jLmViKWIucHVzaChjKTtjPXRoaXMuWWI7dmFyIGQ9YS50eXBlfHxhO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlhPW5ldyBYYyhhLGMpO2Vsc2UgaWYoYSBpbnN0YW5jZW9mIFhjKWEudGFyZ2V0PWEudGFyZ2V0fHxjO2Vsc2V7dmFyIGU9YTthPW5ldyBYYyhkLGMpO0IoYSxlKX1lPSEwO2lmKGIpZm9yKHZhciBmPWIubGVuZ3RoLTE7MDw9ZjtmLS0pe3ZhciBnPWEuYj1iW2ZdO2U9emQoZyxkLCEwLGEpJiZlfWc9YS5iPWM7ZT16ZChnLGQsITAsYSkmJmU7ZT16ZChnLGQsITEsYSkmJmU7aWYoYilmb3IoZj0wO2Y8Yi5sZW5ndGg7ZisrKWc9YS5iPWJbZl0sZT16ZChnLGQsITEsYSkmJmU7cmV0dXJuIGV9O1xuRy5wcm90b3R5cGUuQmE9ZnVuY3Rpb24oKXtHLlphLkJhLmNhbGwodGhpcyk7aWYodGhpcy51KXt2YXIgYT10aGlzLnUsYj0wLGM7Zm9yKGMgaW4gYS5hKXtmb3IodmFyIGQ9YS5hW2NdLGU9MDtlPGQubGVuZ3RoO2UrKykrK2IsY2QoZFtlXSk7ZGVsZXRlIGEuYVtjXTthLmItLX19dGhpcy5lYj1udWxsfTtmdW5jdGlvbiBtZChhLGIsYyxkLGUpe2EudS5hZGQoU3RyaW5nKGIpLGMsITEsZCxlKX1mdW5jdGlvbiBzZChhLGIsYyxkLGUpe2EudS5hZGQoU3RyaW5nKGIpLGMsITAsZCxlKX1cbmZ1bmN0aW9uIHpkKGEsYixjLGQpe2I9YS51LmFbU3RyaW5nKGIpXTtpZighYilyZXR1cm4hMDtiPWIuY29uY2F0KCk7Zm9yKHZhciBlPSEwLGY9MDtmPGIubGVuZ3RoOysrZil7dmFyIGc9YltmXTtpZihnJiYhZy51YSYmZy5jYXB0dXJlPT1jKXt2YXIgaD1nLmxpc3RlbmVyLG09Zy5UYXx8Zy5zcmM7Zy5OYSYmZmQoYS51LGcpO2U9ITEhPT1oLmNhbGwobSxkKSYmZX19cmV0dXJuIGUmJiFkLmRlZmF1bHRQcmV2ZW50ZWR9O2Z1bmN0aW9uIEFkKGEsYixjKXtpZihuKGEpKWMmJihhPXIoYSxjKSk7ZWxzZSBpZihhJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLmhhbmRsZUV2ZW50KWE9cihhLmhhbmRsZUV2ZW50LGEpO2Vsc2UgdGhyb3cgRXJyb3IoXCJJbnZhbGlkIGxpc3RlbmVyIGFyZ3VtZW50XCIpO3JldHVybiAyMTQ3NDgzNjQ3PE51bWJlcihiKT8tMTpsLnNldFRpbWVvdXQoYSxifHwwKX1mdW5jdGlvbiBCZChhKXt2YXIgYj1udWxsO3JldHVybihuZXcgRChmdW5jdGlvbihjLGQpe2I9QWQoZnVuY3Rpb24oKXtjKHZvaWQgMCl9LGEpOy0xPT1iJiZkKEVycm9yKFwiRmFpbGVkIHRvIHNjaGVkdWxlIHRpbWVyLlwiKSl9KSkubyhmdW5jdGlvbihjKXtsLmNsZWFyVGltZW91dChiKTt0aHJvdyBjO30pfTtmdW5jdGlvbiBDZChhKXtpZihhLlYmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGEuVilyZXR1cm4gYS5WKCk7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhLnNwbGl0KFwiXCIpO2lmKG1hKGEpKXtmb3IodmFyIGI9W10sYz1hLmxlbmd0aCxkPTA7ZDxjO2QrKyliLnB1c2goYVtkXSk7cmV0dXJuIGJ9Yj1bXTtjPTA7Zm9yKGQgaW4gYSliW2MrK109YVtkXTtyZXR1cm4gYn1mdW5jdGlvbiBEZChhKXtpZihhLlgmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGEuWClyZXR1cm4gYS5YKCk7aWYoIWEuVnx8XCJmdW5jdGlvblwiIT10eXBlb2YgYS5WKXtpZihtYShhKXx8XCJzdHJpbmdcIj09PXR5cGVvZiBhKXt2YXIgYj1bXTthPWEubGVuZ3RoO2Zvcih2YXIgYz0wO2M8YTtjKyspYi5wdXNoKGMpO3JldHVybiBifWI9W107Yz0wO2Zvcih2YXIgZCBpbiBhKWJbYysrXT1kO3JldHVybiBifX1cbmZ1bmN0aW9uIEVkKGEsYil7aWYoYS5mb3JFYWNoJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLmZvckVhY2gpYS5mb3JFYWNoKGIsdm9pZCAwKTtlbHNlIGlmKG1hKGEpfHxcInN0cmluZ1wiPT09dHlwZW9mIGEpeChhLGIsdm9pZCAwKTtlbHNlIGZvcih2YXIgYz1EZChhKSxkPUNkKGEpLGU9ZC5sZW5ndGgsZj0wO2Y8ZTtmKyspYi5jYWxsKHZvaWQgMCxkW2ZdLGMmJmNbZl0sYSl9O2Z1bmN0aW9uIEZkKGEsYil7dGhpcy5iPXt9O3RoaXMuYT1bXTt0aGlzLmM9MDt2YXIgYz1hcmd1bWVudHMubGVuZ3RoO2lmKDE8Yyl7aWYoYyUyKXRocm93IEVycm9yKFwiVW5ldmVuIG51bWJlciBvZiBhcmd1bWVudHNcIik7Zm9yKHZhciBkPTA7ZDxjO2QrPTIpdGhpcy5zZXQoYXJndW1lbnRzW2RdLGFyZ3VtZW50c1tkKzFdKX1lbHNlIGlmKGEpaWYoYSBpbnN0YW5jZW9mIEZkKWZvcihjPWEuWCgpLGQ9MDtkPGMubGVuZ3RoO2QrKyl0aGlzLnNldChjW2RdLGEuZ2V0KGNbZF0pKTtlbHNlIGZvcihkIGluIGEpdGhpcy5zZXQoZCxhW2RdKX1rPUZkLnByb3RvdHlwZTtrLlY9ZnVuY3Rpb24oKXtHZCh0aGlzKTtmb3IodmFyIGE9W10sYj0wO2I8dGhpcy5hLmxlbmd0aDtiKyspYS5wdXNoKHRoaXMuYlt0aGlzLmFbYl1dKTtyZXR1cm4gYX07ay5YPWZ1bmN0aW9uKCl7R2QodGhpcyk7cmV0dXJuIHRoaXMuYS5jb25jYXQoKX07XG5rLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5iPXt9O3RoaXMuYz10aGlzLmEubGVuZ3RoPTB9O2Z1bmN0aW9uIEdkKGEpe2lmKGEuYyE9YS5hLmxlbmd0aCl7Zm9yKHZhciBiPTAsYz0wO2I8YS5hLmxlbmd0aDspe3ZhciBkPWEuYVtiXTtIZChhLmIsZCkmJihhLmFbYysrXT1kKTtiKyt9YS5hLmxlbmd0aD1jfWlmKGEuYyE9YS5hLmxlbmd0aCl7dmFyIGU9e307Zm9yKGM9Yj0wO2I8YS5hLmxlbmd0aDspZD1hLmFbYl0sSGQoZSxkKXx8KGEuYVtjKytdPWQsZVtkXT0xKSxiKys7YS5hLmxlbmd0aD1jfX1rLmdldD1mdW5jdGlvbihhLGIpe3JldHVybiBIZCh0aGlzLmIsYSk/dGhpcy5iW2FdOmJ9O2suc2V0PWZ1bmN0aW9uKGEsYil7SGQodGhpcy5iLGEpfHwodGhpcy5jKyssdGhpcy5hLnB1c2goYSkpO3RoaXMuYlthXT1ifTtcbmsuZm9yRWFjaD1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz10aGlzLlgoKSxkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF0sZj10aGlzLmdldChlKTthLmNhbGwoYixmLGUsdGhpcyl9fTtmdW5jdGlvbiBIZChhLGIpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxiKX07dmFyIElkPS9eKD86KFteOi8/Iy5dKyk6KT8oPzpcXC9cXC8oPzooW14vPyNdKilAKT8oW14vIz9dKj8pKD86OihbMC05XSspKT8oPz1bL1xcXFwjP118JCkpPyhbXj8jXSspPyg/OlxcPyhbXiNdKikpPyg/OiMoW1xcc1xcU10qKSk/JC87ZnVuY3Rpb24gSmQoYSxiKXtpZihhKXthPWEuc3BsaXQoXCImXCIpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLmluZGV4T2YoXCI9XCIpLGU9bnVsbDtpZigwPD1kKXt2YXIgZj1hW2NdLnN1YnN0cmluZygwLGQpO2U9YVtjXS5zdWJzdHJpbmcoZCsxKX1lbHNlIGY9YVtjXTtiKGYsZT9kZWNvZGVVUklDb21wb25lbnQoZS5yZXBsYWNlKC9cXCsvZyxcIiBcIikpOlwiXCIpfX19O2Z1bmN0aW9uIEtkKGEsYil7dGhpcy5iPXRoaXMuaT10aGlzLmY9XCJcIjt0aGlzLmw9bnVsbDt0aGlzLmc9dGhpcy5jPVwiXCI7dGhpcy5oPSExO3ZhciBjO2EgaW5zdGFuY2VvZiBLZD8odGhpcy5oPXZvaWQgMCE9PWI/YjphLmgsTGQodGhpcyxhLmYpLHRoaXMuaT1hLmksdGhpcy5iPWEuYixNZCh0aGlzLGEubCksdGhpcy5jPWEuYyxOZCh0aGlzLE9kKGEuYSkpLHRoaXMuZz1hLmcpOmEmJihjPVN0cmluZyhhKS5tYXRjaChJZCkpPyh0aGlzLmg9ISFiLExkKHRoaXMsY1sxXXx8XCJcIiwhMCksdGhpcy5pPVBkKGNbMl18fFwiXCIpLHRoaXMuYj1QZChjWzNdfHxcIlwiLCEwKSxNZCh0aGlzLGNbNF0pLHRoaXMuYz1QZChjWzVdfHxcIlwiLCEwKSxOZCh0aGlzLGNbNl18fFwiXCIsITApLHRoaXMuZz1QZChjWzddfHxcIlwiKSk6KHRoaXMuaD0hIWIsdGhpcy5hPW5ldyBRZChudWxsLHRoaXMuaCkpfVxuS2QucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIGE9W10sYj10aGlzLmY7YiYmYS5wdXNoKFJkKGIsU2QsITApLFwiOlwiKTt2YXIgYz10aGlzLmI7aWYoY3x8XCJmaWxlXCI9PWIpYS5wdXNoKFwiLy9cIiksKGI9dGhpcy5pKSYmYS5wdXNoKFJkKGIsU2QsITApLFwiQFwiKSxhLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhjKSkucmVwbGFjZSgvJTI1KFswLTlhLWZBLUZdezJ9KS9nLFwiJSQxXCIpKSxjPXRoaXMubCxudWxsIT1jJiZhLnB1c2goXCI6XCIsU3RyaW5nKGMpKTtpZihjPXRoaXMuYyl0aGlzLmImJlwiL1wiIT1jLmNoYXJBdCgwKSYmYS5wdXNoKFwiL1wiKSxhLnB1c2goUmQoYyxcIi9cIj09Yy5jaGFyQXQoMCk/VGQ6VWQsITApKTsoYz10aGlzLmEudG9TdHJpbmcoKSkmJmEucHVzaChcIj9cIixjKTsoYz10aGlzLmcpJiZhLnB1c2goXCIjXCIsUmQoYyxWZCkpO3JldHVybiBhLmpvaW4oXCJcIil9O1xuS2QucHJvdG90eXBlLnJlc29sdmU9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IEtkKHRoaXMpLGM9ISFhLmY7Yz9MZChiLGEuZik6Yz0hIWEuaTtjP2IuaT1hLmk6Yz0hIWEuYjtjP2IuYj1hLmI6Yz1udWxsIT1hLmw7dmFyIGQ9YS5jO2lmKGMpTWQoYixhLmwpO2Vsc2UgaWYoYz0hIWEuYyl7aWYoXCIvXCIhPWQuY2hhckF0KDApKWlmKHRoaXMuYiYmIXRoaXMuYylkPVwiL1wiK2Q7ZWxzZXt2YXIgZT1iLmMubGFzdEluZGV4T2YoXCIvXCIpOy0xIT1lJiYoZD1iLmMuc3Vic3RyKDAsZSsxKStkKX1lPWQ7aWYoXCIuLlwiPT1lfHxcIi5cIj09ZSlkPVwiXCI7ZWxzZSBpZih5KGUsXCIuL1wiKXx8eShlLFwiLy5cIikpe2Q9MD09ZS5sYXN0SW5kZXhPZihcIi9cIiwwKTtlPWUuc3BsaXQoXCIvXCIpO2Zvcih2YXIgZj1bXSxnPTA7ZzxlLmxlbmd0aDspe3ZhciBoPWVbZysrXTtcIi5cIj09aD9kJiZnPT1lLmxlbmd0aCYmZi5wdXNoKFwiXCIpOlwiLi5cIj09aD8oKDE8Zi5sZW5ndGh8fDE9PWYubGVuZ3RoJiZcIlwiIT1mWzBdKSYmZi5wb3AoKSxcbmQmJmc9PWUubGVuZ3RoJiZmLnB1c2goXCJcIikpOihmLnB1c2goaCksZD0hMCl9ZD1mLmpvaW4oXCIvXCIpfWVsc2UgZD1lfWM/Yi5jPWQ6Yz1cIlwiIT09YS5hLnRvU3RyaW5nKCk7Yz9OZChiLE9kKGEuYSkpOmM9ISFhLmc7YyYmKGIuZz1hLmcpO3JldHVybiBifTtmdW5jdGlvbiBMZChhLGIsYyl7YS5mPWM/UGQoYiwhMCk6YjthLmYmJihhLmY9YS5mLnJlcGxhY2UoLzokLyxcIlwiKSl9ZnVuY3Rpb24gTWQoYSxiKXtpZihiKXtiPU51bWJlcihiKTtpZihpc05hTihiKXx8MD5iKXRocm93IEVycm9yKFwiQmFkIHBvcnQgbnVtYmVyIFwiK2IpO2EubD1ifWVsc2UgYS5sPW51bGx9ZnVuY3Rpb24gTmQoYSxiLGMpe2IgaW5zdGFuY2VvZiBRZD8oYS5hPWIsV2QoYS5hLGEuaCkpOihjfHwoYj1SZChiLFhkKSksYS5hPW5ldyBRZChiLGEuaCkpfWZ1bmN0aW9uIEgoYSxiLGMpe2EuYS5zZXQoYixjKX1mdW5jdGlvbiBZZChhLGIpe3JldHVybiBhLmEuZ2V0KGIpfVxuZnVuY3Rpb24gWmQoYSl7cmV0dXJuIGEgaW5zdGFuY2VvZiBLZD9uZXcgS2QoYSk6bmV3IEtkKGEsdm9pZCAwKX1mdW5jdGlvbiAkZChhLGIpe3ZhciBjPW5ldyBLZChudWxsLHZvaWQgMCk7TGQoYyxcImh0dHBzXCIpO2EmJihjLmI9YSk7YiYmKGMuYz1iKTtyZXR1cm4gY31mdW5jdGlvbiBQZChhLGIpe3JldHVybiBhP2I/ZGVjb2RlVVJJKGEucmVwbGFjZSgvJTI1L2csXCIlMjUyNVwiKSk6ZGVjb2RlVVJJQ29tcG9uZW50KGEpOlwiXCJ9ZnVuY3Rpb24gUmQoYSxiLGMpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYT8oYT1lbmNvZGVVUkkoYSkucmVwbGFjZShiLGFlKSxjJiYoYT1hLnJlcGxhY2UoLyUyNShbMC05YS1mQS1GXXsyfSkvZyxcIiUkMVwiKSksYSk6bnVsbH1mdW5jdGlvbiBhZShhKXthPWEuY2hhckNvZGVBdCgwKTtyZXR1cm5cIiVcIisoYT4+NCYxNSkudG9TdHJpbmcoMTYpKyhhJjE1KS50b1N0cmluZygxNil9XG52YXIgU2Q9L1sjXFwvXFw/QF0vZyxVZD0vWyNcXD86XS9nLFRkPS9bI1xcP10vZyxYZD0vWyNcXD9AXS9nLFZkPS8jL2c7ZnVuY3Rpb24gUWQoYSxiKXt0aGlzLmI9dGhpcy5hPW51bGw7dGhpcy5jPWF8fG51bGw7dGhpcy5mPSEhYn1mdW5jdGlvbiBiZShhKXthLmF8fChhLmE9bmV3IEZkLGEuYj0wLGEuYyYmSmQoYS5jLGZ1bmN0aW9uKGIsYyl7YS5hZGQoZGVjb2RlVVJJQ29tcG9uZW50KGIucmVwbGFjZSgvXFwrL2csXCIgXCIpKSxjKX0pKX1mdW5jdGlvbiBjZShhKXt2YXIgYj1EZChhKTtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgYil0aHJvdyBFcnJvcihcIktleXMgYXJlIHVuZGVmaW5lZFwiKTt2YXIgYz1uZXcgUWQobnVsbCx2b2lkIDApO2E9Q2QoYSk7Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspe3ZhciBlPWJbZF0sZj1hW2RdO0FycmF5LmlzQXJyYXkoZik/ZGUoYyxlLGYpOmMuYWRkKGUsZil9cmV0dXJuIGN9az1RZC5wcm90b3R5cGU7XG5rLmFkZD1mdW5jdGlvbihhLGIpe2JlKHRoaXMpO3RoaXMuYz1udWxsO2E9ZWUodGhpcyxhKTt2YXIgYz10aGlzLmEuZ2V0KGEpO2N8fHRoaXMuYS5zZXQoYSxjPVtdKTtjLnB1c2goYik7dGhpcy5iKz0xO3JldHVybiB0aGlzfTtmdW5jdGlvbiBmZShhLGIpe2JlKGEpO2I9ZWUoYSxiKTtIZChhLmEuYixiKSYmKGEuYz1udWxsLGEuYi09YS5hLmdldChiKS5sZW5ndGgsYT1hLmEsSGQoYS5iLGIpJiYoZGVsZXRlIGEuYltiXSxhLmMtLSxhLmEubGVuZ3RoPjIqYS5jJiZHZChhKSkpfWsuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLmE9dGhpcy5jPW51bGw7dGhpcy5iPTB9O2Z1bmN0aW9uIGdlKGEsYil7YmUoYSk7Yj1lZShhLGIpO3JldHVybiBIZChhLmEuYixiKX1rLmZvckVhY2g9ZnVuY3Rpb24oYSxiKXtiZSh0aGlzKTt0aGlzLmEuZm9yRWFjaChmdW5jdGlvbihjLGQpe3goYyxmdW5jdGlvbihlKXthLmNhbGwoYixlLGQsdGhpcyl9LHRoaXMpfSx0aGlzKX07XG5rLlg9ZnVuY3Rpb24oKXtiZSh0aGlzKTtmb3IodmFyIGE9dGhpcy5hLlYoKSxiPXRoaXMuYS5YKCksYz1bXSxkPTA7ZDxiLmxlbmd0aDtkKyspZm9yKHZhciBlPWFbZF0sZj0wO2Y8ZS5sZW5ndGg7ZisrKWMucHVzaChiW2RdKTtyZXR1cm4gY307ay5WPWZ1bmN0aW9uKGEpe2JlKHRoaXMpO3ZhciBiPVtdO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnZSh0aGlzLGEpJiYoYj1WYShiLHRoaXMuYS5nZXQoZWUodGhpcyxhKSkpKTtlbHNle2E9dGhpcy5hLlYoKTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyliPVZhKGIsYVtjXSl9cmV0dXJuIGJ9O2suc2V0PWZ1bmN0aW9uKGEsYil7YmUodGhpcyk7dGhpcy5jPW51bGw7YT1lZSh0aGlzLGEpO2dlKHRoaXMsYSkmJih0aGlzLmItPXRoaXMuYS5nZXQoYSkubGVuZ3RoKTt0aGlzLmEuc2V0KGEsW2JdKTt0aGlzLmIrPTE7cmV0dXJuIHRoaXN9O1xuay5nZXQ9ZnVuY3Rpb24oYSxiKXtpZighYSlyZXR1cm4gYjthPXRoaXMuVihhKTtyZXR1cm4gMDxhLmxlbmd0aD9TdHJpbmcoYVswXSk6Yn07ZnVuY3Rpb24gZGUoYSxiLGMpe2ZlKGEsYik7MDxjLmxlbmd0aCYmKGEuYz1udWxsLGEuYS5zZXQoZWUoYSxiKSxXYShjKSksYS5iKz1jLmxlbmd0aCl9ay50b1N0cmluZz1mdW5jdGlvbigpe2lmKHRoaXMuYylyZXR1cm4gdGhpcy5jO2lmKCF0aGlzLmEpcmV0dXJuXCJcIjtmb3IodmFyIGE9W10sYj10aGlzLmEuWCgpLGM9MDtjPGIubGVuZ3RoO2MrKyl7dmFyIGQ9YltjXSxlPWVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoZCkpO2Q9dGhpcy5WKGQpO2Zvcih2YXIgZj0wO2Y8ZC5sZW5ndGg7ZisrKXt2YXIgZz1lO1wiXCIhPT1kW2ZdJiYoZys9XCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhkW2ZdKSkpO2EucHVzaChnKX19cmV0dXJuIHRoaXMuYz1hLmpvaW4oXCImXCIpfTtcbmZ1bmN0aW9uIE9kKGEpe3ZhciBiPW5ldyBRZDtiLmM9YS5jO2EuYSYmKGIuYT1uZXcgRmQoYS5hKSxiLmI9YS5iKTtyZXR1cm4gYn1mdW5jdGlvbiBlZShhLGIpe2I9U3RyaW5nKGIpO2EuZiYmKGI9Yi50b0xvd2VyQ2FzZSgpKTtyZXR1cm4gYn1mdW5jdGlvbiBXZChhLGIpe2ImJiFhLmYmJihiZShhKSxhLmM9bnVsbCxhLmEuZm9yRWFjaChmdW5jdGlvbihjLGQpe3ZhciBlPWQudG9Mb3dlckNhc2UoKTtkIT1lJiYoZmUodGhpcyxkKSxkZSh0aGlzLGUsYykpfSxhKSk7YS5mPWJ9O2Z1bmN0aW9uIGhlKGEpe3ZhciBiPVtdO2llKG5ldyBqZSxhLGIpO3JldHVybiBiLmpvaW4oXCJcIil9ZnVuY3Rpb24gamUoKXt9XG5mdW5jdGlvbiBpZShhLGIsYyl7aWYobnVsbD09YiljLnB1c2goXCJudWxsXCIpO2Vsc2V7aWYoXCJvYmplY3RcIj09dHlwZW9mIGIpe2lmKEFycmF5LmlzQXJyYXkoYikpe3ZhciBkPWI7Yj1kLmxlbmd0aDtjLnB1c2goXCJbXCIpO2Zvcih2YXIgZT1cIlwiLGY9MDtmPGI7ZisrKWMucHVzaChlKSxpZShhLGRbZl0sYyksZT1cIixcIjtjLnB1c2goXCJdXCIpO3JldHVybn1pZihiIGluc3RhbmNlb2YgU3RyaW5nfHxiIGluc3RhbmNlb2YgTnVtYmVyfHxiIGluc3RhbmNlb2YgQm9vbGVhbiliPWIudmFsdWVPZigpO2Vsc2V7Yy5wdXNoKFwie1wiKTtlPVwiXCI7Zm9yKGQgaW4gYilPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYixkKSYmKGY9YltkXSxcImZ1bmN0aW9uXCIhPXR5cGVvZiBmJiYoYy5wdXNoKGUpLGtlKGQsYyksYy5wdXNoKFwiOlwiKSxpZShhLGYsYyksZT1cIixcIikpO2MucHVzaChcIn1cIik7cmV0dXJufX1zd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJzdHJpbmdcIjprZShiLGMpO2JyZWFrO2Nhc2UgXCJudW1iZXJcIjpjLnB1c2goaXNGaW5pdGUoYikmJlxuIWlzTmFOKGIpP1N0cmluZyhiKTpcIm51bGxcIik7YnJlYWs7Y2FzZSBcImJvb2xlYW5cIjpjLnB1c2goU3RyaW5nKGIpKTticmVhaztjYXNlIFwiZnVuY3Rpb25cIjpjLnB1c2goXCJudWxsXCIpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJVbmtub3duIHR5cGU6IFwiK3R5cGVvZiBiKTt9fX12YXIgbGU9eydcIic6J1xcXFxcIicsXCJcXFxcXCI6XCJcXFxcXFxcXFwiLFwiL1wiOlwiXFxcXC9cIixcIlxcYlwiOlwiXFxcXGJcIixcIlxcZlwiOlwiXFxcXGZcIixcIlxcblwiOlwiXFxcXG5cIixcIlxcclwiOlwiXFxcXHJcIixcIlxcdFwiOlwiXFxcXHRcIixcIlxceDBCXCI6XCJcXFxcdTAwMGJcIn0sbWU9L1xcdWZmZmYvLnRlc3QoXCJcXHVmZmZmXCIpPy9bXFxcXFwiXFx4MDAtXFx4MWZcXHg3Zi1cXHVmZmZmXS9nOi9bXFxcXFwiXFx4MDAtXFx4MWZcXHg3Zi1cXHhmZl0vZztcbmZ1bmN0aW9uIGtlKGEsYil7Yi5wdXNoKCdcIicsYS5yZXBsYWNlKG1lLGZ1bmN0aW9uKGMpe3ZhciBkPWxlW2NdO2R8fChkPVwiXFxcXHVcIisoYy5jaGFyQ29kZUF0KDApfDY1NTM2KS50b1N0cmluZygxNikuc3Vic3RyKDEpLGxlW2NdPWQpO3JldHVybiBkfSksJ1wiJyl9O2Z1bmN0aW9uIG5lKCl7dmFyIGE9SSgpO3JldHVybiBTYiYmISFjYyYmMTE9PWNjfHwvRWRnZVxcL1xcZCsvLnRlc3QoYSl9ZnVuY3Rpb24gb2UoKXtyZXR1cm4gbC53aW5kb3cmJmwud2luZG93LmxvY2F0aW9uLmhyZWZ8fHNlbGYmJnNlbGYubG9jYXRpb24mJnNlbGYubG9jYXRpb24uaHJlZnx8XCJcIn1mdW5jdGlvbiBwZShhLGIpe2I9Ynx8bC53aW5kb3c7dmFyIGM9XCJhYm91dDpibGFua1wiO2EmJihjPUNiKEViKGEpKSk7Yi5sb2NhdGlvbi5ocmVmPWN9ZnVuY3Rpb24gcWUoYSxiKXt2YXIgYz1bXSxkO2ZvcihkIGluIGEpZCBpbiBiP3R5cGVvZiBhW2RdIT10eXBlb2YgYltkXT9jLnB1c2goZCk6XCJvYmplY3RcIj09dHlwZW9mIGFbZF0mJm51bGwhPWFbZF0mJm51bGwhPWJbZF0/MDxxZShhW2RdLGJbZF0pLmxlbmd0aCYmYy5wdXNoKGQpOmFbZF0hPT1iW2RdJiZjLnB1c2goZCk6Yy5wdXNoKGQpO2ZvcihkIGluIGIpZCBpbiBhfHxjLnB1c2goZCk7cmV0dXJuIGN9XG5mdW5jdGlvbiByZSgpe3ZhciBhPUkoKTthPXNlKGEpIT10ZT9udWxsOihhPWEubWF0Y2goL1xcc0Nocm9tZVxcLyhcXGQrKS9pKSkmJjI9PWEubGVuZ3RoP3BhcnNlSW50KGFbMV0sMTApOm51bGw7cmV0dXJuIGEmJjMwPmE/ITE6IVNifHwhY2N8fDk8Y2N9ZnVuY3Rpb24gdWUoYSl7YT0oYXx8SSgpKS50b0xvd2VyQ2FzZSgpO3JldHVybiBhLm1hdGNoKC9hbmRyb2lkLyl8fGEubWF0Y2goL3dlYm9zLyl8fGEubWF0Y2goL2lwaG9uZXxpcGFkfGlwb2QvKXx8YS5tYXRjaCgvYmxhY2tiZXJyeS8pfHxhLm1hdGNoKC93aW5kb3dzIHBob25lLyl8fGEubWF0Y2goL2llbW9iaWxlLyk/ITA6ITF9ZnVuY3Rpb24gdmUoYSl7YT1hfHxsLndpbmRvdzt0cnl7YS5jbG9zZSgpfWNhdGNoKGIpe319XG5mdW5jdGlvbiB3ZShhLGIsYyl7dmFyIGQ9TWF0aC5mbG9vcigxRTkqTWF0aC5yYW5kb20oKSkudG9TdHJpbmcoKTtiPWJ8fDUwMDtjPWN8fDYwMDt2YXIgZT0od2luZG93LnNjcmVlbi5hdmFpbEhlaWdodC1jKS8yLGY9KHdpbmRvdy5zY3JlZW4uYXZhaWxXaWR0aC1iKS8yO2I9e3dpZHRoOmIsaGVpZ2h0OmMsdG9wOjA8ZT9lOjAsbGVmdDowPGY/ZjowLGxvY2F0aW9uOiEwLHJlc2l6YWJsZTohMCxzdGF0dXNiYXI6ITAsdG9vbGJhcjohMX07Yz1JKCkudG9Mb3dlckNhc2UoKTtkJiYoYi50YXJnZXQ9ZCx5KGMsXCJjcmlvcy9cIikmJihiLnRhcmdldD1cIl9ibGFua1wiKSk7c2UoSSgpKT09eGUmJihhPWF8fFwiaHR0cDovL2xvY2FsaG9zdFwiLGIuc2Nyb2xsYmFycz0hMCk7Yz1hfHxcIlwiOyhhPWIpfHwoYT17fSk7ZD13aW5kb3c7Yj1jIGluc3RhbmNlb2YgemI/YzpFYihcInVuZGVmaW5lZFwiIT10eXBlb2YgYy5ocmVmP2MuaHJlZjpTdHJpbmcoYykpO2M9YS50YXJnZXR8fGMudGFyZ2V0O2U9W107XG5mb3IoZyBpbiBhKXN3aXRjaChnKXtjYXNlIFwid2lkdGhcIjpjYXNlIFwiaGVpZ2h0XCI6Y2FzZSBcInRvcFwiOmNhc2UgXCJsZWZ0XCI6ZS5wdXNoKGcrXCI9XCIrYVtnXSk7YnJlYWs7Y2FzZSBcInRhcmdldFwiOmNhc2UgXCJub29wZW5lclwiOmNhc2UgXCJub3JlZmVycmVyXCI6YnJlYWs7ZGVmYXVsdDplLnB1c2goZytcIj1cIisoYVtnXT8xOjApKX12YXIgZz1lLmpvaW4oXCIsXCIpO2lmKCh6KFwiaVBob25lXCIpJiYheihcImlQb2RcIikmJiF6KFwiaVBhZFwiKXx8eihcImlQYWRcIil8fHooXCJpUG9kXCIpKSYmZC5uYXZpZ2F0b3ImJmQubmF2aWdhdG9yLnN0YW5kYWxvbmUmJmMmJlwiX3NlbGZcIiE9YylnPWljKGRvY3VtZW50LFwiQVwiKSxtYihnLFwiSFRNTEFuY2hvckVsZW1lbnRcIiksYiBpbnN0YW5jZW9mIHpifHxiIGluc3RhbmNlb2YgemJ8fChiPVwib2JqZWN0XCI9PXR5cGVvZiBiJiZiLnJhP2IucWEoKTpTdHJpbmcoYiksRGIudGVzdChiKXx8KGI9XCJhYm91dDppbnZhbGlkI3pDbG9zdXJlelwiKSxiPW5ldyB6YihBYixiKSksZy5ocmVmPVxuQ2IoYiksZy5zZXRBdHRyaWJ1dGUoXCJ0YXJnZXRcIixjKSxhLm5vcmVmZXJyZXImJmcuc2V0QXR0cmlidXRlKFwicmVsXCIsXCJub3JlZmVycmVyXCIpLGE9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50XCIpLGEuaW5pdE1vdXNlRXZlbnQoXCJjbGlja1wiLCEwLCEwLGQsMSksZy5kaXNwYXRjaEV2ZW50KGEpLGc9e307ZWxzZSBpZihhLm5vcmVmZXJyZXIpe2lmKGc9ZC5vcGVuKFwiXCIsYyxnKSxhPUNiKGIpLGcmJihVYiYmeShhLFwiO1wiKSYmKGE9XCInXCIrYS5yZXBsYWNlKC8nL2csXCIlMjdcIikrXCInXCIpLGcub3BlbmVyPW51bGwsYT1JYignPG1ldGEgbmFtZT1cInJlZmVycmVyXCIgY29udGVudD1cIm5vLXJlZmVycmVyXCI+PG1ldGEgaHR0cC1lcXVpdj1cInJlZnJlc2hcIiBjb250ZW50PVwiMDsgdXJsPScrTmIoYSkrJ1wiPicpLGQ9Zy5kb2N1bWVudCkpZC53cml0ZShIYihhKSksZC5jbG9zZSgpfWVsc2UoZz1kLm9wZW4oQ2IoYiksYyxnKSkmJmEubm9vcGVuZXImJihnLm9wZW5lcj1udWxsKTtpZihnKXRyeXtnLmZvY3VzKCl9Y2F0Y2goaCl7fXJldHVybiBnfVxuZnVuY3Rpb24geWUoYSl7cmV0dXJuIG5ldyBEKGZ1bmN0aW9uKGIpe2Z1bmN0aW9uIGMoKXtCZCgyRTMpLnRoZW4oZnVuY3Rpb24oKXtpZighYXx8YS5jbG9zZWQpYigpO2Vsc2UgcmV0dXJuIGMoKX0pfXJldHVybiBjKCl9KX12YXIgemU9L15cXGR7MSwzfVxcLlxcZHsxLDN9XFwuXFxkezEsM31cXC5cXGR7MSwzfSQvLEFlPS9eW15AXStAW15AXSskLztmdW5jdGlvbiBCZSgpe3ZhciBhPW51bGw7cmV0dXJuKG5ldyBEKGZ1bmN0aW9uKGIpe1wiY29tcGxldGVcIj09bC5kb2N1bWVudC5yZWFkeVN0YXRlP2IoKTooYT1mdW5jdGlvbigpe2IoKX0sa2Qod2luZG93LFwibG9hZFwiLGEpKX0pKS5vKGZ1bmN0aW9uKGIpe3RkKHdpbmRvdyxcImxvYWRcIixhKTt0aHJvdyBiO30pfVxuZnVuY3Rpb24gQ2UoKXtyZXR1cm4gRGUodm9pZCAwKT9CZSgpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEQoZnVuY3Rpb24oYSxiKXt2YXIgYz1sLmRvY3VtZW50LGQ9c2V0VGltZW91dChmdW5jdGlvbigpe2IoRXJyb3IoXCJDb3Jkb3ZhIGZyYW1ld29yayBpcyBub3QgcmVhZHkuXCIpKX0sMUUzKTtjLmFkZEV2ZW50TGlzdGVuZXIoXCJkZXZpY2VyZWFkeVwiLGZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KGQpO2EoKX0sITEpfSl9KTpGKEVycm9yKFwiQ29yZG92YSBtdXN0IHJ1biBpbiBhbiBBbmRyb2lkIG9yIGlPUyBmaWxlIHNjaGVtZS5cIikpfWZ1bmN0aW9uIERlKGEpe2E9YXx8SSgpO3JldHVybiEoXCJmaWxlOlwiIT09RWUoKSYmXCJpb25pYzpcIiE9PUVlKCl8fCFhLnRvTG93ZXJDYXNlKCkubWF0Y2goL2lwaG9uZXxpcGFkfGlwb2R8YW5kcm9pZC8pKX1mdW5jdGlvbiBGZSgpe3ZhciBhPWwud2luZG93O3RyeXtyZXR1cm4hKCFhfHxhPT1hLnRvcCl9Y2F0Y2goYil7cmV0dXJuITF9fVxuZnVuY3Rpb24gR2UoKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIGwuV29ya2VyR2xvYmFsU2NvcGUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsLmltcG9ydFNjcmlwdHN9ZnVuY3Rpb24gSGUoKXtyZXR1cm4gZmlyZWJhc2UuSU5URVJOQUwuaGFzT3duUHJvcGVydHkoXCJyZWFjdE5hdGl2ZVwiKT9cIlJlYWN0TmF0aXZlXCI6ZmlyZWJhc2UuSU5URVJOQUwuaGFzT3duUHJvcGVydHkoXCJub2RlXCIpP1wiTm9kZVwiOkdlKCk/XCJXb3JrZXJcIjpcIkJyb3dzZXJcIn1mdW5jdGlvbiBJZSgpe3ZhciBhPUhlKCk7cmV0dXJuXCJSZWFjdE5hdGl2ZVwiPT09YXx8XCJOb2RlXCI9PT1hfWZ1bmN0aW9uIEplKCl7Zm9yKHZhciBhPTUwLGI9W107MDxhOyliLnB1c2goXCIxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWlwiLmNoYXJBdChNYXRoLmZsb29yKDYyKk1hdGgucmFuZG9tKCkpKSksYS0tO3JldHVybiBiLmpvaW4oXCJcIil9XG52YXIgeGU9XCJGaXJlZm94XCIsdGU9XCJDaHJvbWVcIjtcbmZ1bmN0aW9uIHNlKGEpe3ZhciBiPWEudG9Mb3dlckNhc2UoKTtpZih5KGIsXCJvcGVyYS9cIil8fHkoYixcIm9wci9cIil8fHkoYixcIm9waW9zL1wiKSlyZXR1cm5cIk9wZXJhXCI7aWYoeShiLFwiaWVtb2JpbGVcIikpcmV0dXJuXCJJRU1vYmlsZVwiO2lmKHkoYixcIm1zaWVcIil8fHkoYixcInRyaWRlbnQvXCIpKXJldHVyblwiSUVcIjtpZih5KGIsXCJlZGdlL1wiKSlyZXR1cm5cIkVkZ2VcIjtpZih5KGIsXCJmaXJlZm94L1wiKSlyZXR1cm4geGU7aWYoeShiLFwic2lsay9cIikpcmV0dXJuXCJTaWxrXCI7aWYoeShiLFwiYmxhY2tiZXJyeVwiKSlyZXR1cm5cIkJsYWNrYmVycnlcIjtpZih5KGIsXCJ3ZWJvc1wiKSlyZXR1cm5cIldlYm9zXCI7aWYoIXkoYixcInNhZmFyaS9cIil8fHkoYixcImNocm9tZS9cIil8fHkoYixcImNyaW9zL1wiKXx8eShiLFwiYW5kcm9pZFwiKSlpZigheShiLFwiY2hyb21lL1wiKSYmIXkoYixcImNyaW9zL1wiKXx8eShiLFwiZWRnZS9cIikpe2lmKHkoYixcImFuZHJvaWRcIikpcmV0dXJuXCJBbmRyb2lkXCI7aWYoKGE9YS5tYXRjaCgvKFthLXpBLVpcXGRcXC5dKylcXC9bYS16QS1aXFxkXFwuXSokLykpJiZcbjI9PWEubGVuZ3RoKXJldHVybiBhWzFdfWVsc2UgcmV0dXJuIHRlO2Vsc2UgcmV0dXJuXCJTYWZhcmlcIjtyZXR1cm5cIk90aGVyXCJ9dmFyIEtlPXtqZDpcIkZpcmViYXNlQ29yZS13ZWJcIixsZDpcIkZpcmViYXNlVUktd2ViXCJ9O2Z1bmN0aW9uIExlKGEsYil7Yj1ifHxbXTt2YXIgYz1bXSxkPXt9LGU7Zm9yKGUgaW4gS2UpZFtLZVtlXV09ITA7Zm9yKGU9MDtlPGIubGVuZ3RoO2UrKylcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRbYltlXV0mJihkZWxldGUgZFtiW2VdXSxjLnB1c2goYltlXSkpO2Muc29ydCgpO2I9YztiLmxlbmd0aHx8KGI9W1wiRmlyZWJhc2VDb3JlLXdlYlwiXSk7Yz1IZSgpO1wiQnJvd3NlclwiPT09Yz8oZD1JKCksYz1zZShkKSk6XCJXb3JrZXJcIj09PWMmJihkPUkoKSxjPXNlKGQpK1wiLVwiK2MpO3JldHVybiBjK1wiL0pzQ29yZS9cIithK1wiL1wiK2Iuam9pbihcIixcIil9ZnVuY3Rpb24gSSgpe3JldHVybiBsLm5hdmlnYXRvciYmbC5uYXZpZ2F0b3IudXNlckFnZW50fHxcIlwifVxuZnVuY3Rpb24gSihhLGIpe2E9YS5zcGxpdChcIi5cIik7Yj1ifHxsO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGgmJlwib2JqZWN0XCI9PXR5cGVvZiBiJiZudWxsIT1iO2MrKyliPWJbYVtjXV07YyE9YS5sZW5ndGgmJihiPXZvaWQgMCk7cmV0dXJuIGJ9ZnVuY3Rpb24gTWUoKXt0cnl7dmFyIGE9bC5sb2NhbFN0b3JhZ2UsYj1OZSgpO2lmKGEpcmV0dXJuIGEuc2V0SXRlbShiLFwiMVwiKSxhLnJlbW92ZUl0ZW0oYiksbmUoKT8hIWwuaW5kZXhlZERCOiEwfWNhdGNoKGMpe3JldHVybiBHZSgpJiYhIWwuaW5kZXhlZERCfXJldHVybiExfWZ1bmN0aW9uIE9lKCl7cmV0dXJuKFBlKCl8fFwiY2hyb21lLWV4dGVuc2lvbjpcIj09PUVlKCl8fERlKCkpJiYhSWUoKSYmTWUoKSYmIUdlKCl9ZnVuY3Rpb24gUGUoKXtyZXR1cm5cImh0dHA6XCI9PT1FZSgpfHxcImh0dHBzOlwiPT09RWUoKX1mdW5jdGlvbiBFZSgpe3JldHVybiBsLmxvY2F0aW9uJiZsLmxvY2F0aW9uLnByb3RvY29sfHxudWxsfVxuZnVuY3Rpb24gUWUoYSl7YT1hfHxJKCk7cmV0dXJuIHVlKGEpfHxzZShhKT09eGU/ITE6ITB9ZnVuY3Rpb24gUmUoYSl7cmV0dXJuXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhP251bGw6aGUoYSl9ZnVuY3Rpb24gU2UoYSl7dmFyIGI9e30sYztmb3IoYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJm51bGwhPT1hW2NdJiZ2b2lkIDAhPT1hW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1mdW5jdGlvbiBUZShhKXtpZihudWxsIT09YSlyZXR1cm4gSlNPTi5wYXJzZShhKX1mdW5jdGlvbiBOZShhKXtyZXR1cm4gYT9hOk1hdGguZmxvb3IoMUU5Kk1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKCl9ZnVuY3Rpb24gVWUoYSl7YT1hfHxJKCk7cmV0dXJuXCJTYWZhcmlcIj09c2UoYSl8fGEudG9Mb3dlckNhc2UoKS5tYXRjaCgvaXBob25lfGlwYWR8aXBvZC8pPyExOiEwfVxuZnVuY3Rpb24gVmUoKXt2YXIgYT1sLl9fX2pzbDtpZihhJiZhLkgpZm9yKHZhciBiIGluIGEuSClpZihhLkhbYl0ucj1hLkhbYl0ucnx8W10sYS5IW2JdLkw9YS5IW2JdLkx8fFtdLGEuSFtiXS5yPWEuSFtiXS5MLmNvbmNhdCgpLGEuQ1ApZm9yKHZhciBjPTA7YzxhLkNQLmxlbmd0aDtjKyspYS5DUFtjXT1udWxsfWZ1bmN0aW9uIFdlKGEsYil7aWYoYT5iKXRocm93IEVycm9yKFwiU2hvcnQgZGVsYXkgc2hvdWxkIGJlIGxlc3MgdGhhbiBsb25nIGRlbGF5IVwiKTt0aGlzLmE9YTt0aGlzLmM9YjthPUkoKTtiPUhlKCk7dGhpcy5iPXVlKGEpfHxcIlJlYWN0TmF0aXZlXCI9PT1ifVxuV2UucHJvdG90eXBlLmdldD1mdW5jdGlvbigpe3ZhciBhPWwubmF2aWdhdG9yO3JldHVybihhJiZcImJvb2xlYW5cIj09PXR5cGVvZiBhLm9uTGluZSYmKFBlKCl8fFwiY2hyb21lLWV4dGVuc2lvbjpcIj09PUVlKCl8fFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYS5jb25uZWN0aW9uKT9hLm9uTGluZToxKT90aGlzLmI/dGhpcy5jOnRoaXMuYTpNYXRoLm1pbig1RTMsdGhpcy5hKX07ZnVuY3Rpb24gWGUoKXt2YXIgYT1sLmRvY3VtZW50O3JldHVybiBhJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGEudmlzaWJpbGl0eVN0YXRlP1widmlzaWJsZVwiPT1hLnZpc2liaWxpdHlTdGF0ZTohMH1cbmZ1bmN0aW9uIFllKCl7dmFyIGE9bC5kb2N1bWVudCxiPW51bGw7cmV0dXJuIFhlKCl8fCFhP0UoKToobmV3IEQoZnVuY3Rpb24oYyl7Yj1mdW5jdGlvbigpe1hlKCkmJihhLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsYiwhMSksYygpKX07YS5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLGIsITEpfSkpLm8oZnVuY3Rpb24oYyl7YS5yZW1vdmVFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLGIsITEpO3Rocm93IGM7fSl9ZnVuY3Rpb24gWmUoYSl7dHJ5e3ZhciBiPW5ldyBEYXRlKHBhcnNlSW50KGEsMTApKTtpZighaXNOYU4oYi5nZXRUaW1lKCkpJiYhL1teMC05XS8udGVzdChhKSlyZXR1cm4gYi50b1VUQ1N0cmluZygpfWNhdGNoKGMpe31yZXR1cm4gbnVsbH1mdW5jdGlvbiAkZSgpe3JldHVybiEoIUooXCJmaXJlYXV0aC5vYXV0aGhlbHBlclwiLGwpJiYhSihcImZpcmVhdXRoLmlmcmFtZVwiLGwpKX1cbmZ1bmN0aW9uIGFmKCl7dmFyIGE9bC5uYXZpZ2F0b3I7cmV0dXJuIGEmJmEuc2VydmljZVdvcmtlciYmYS5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXJ8fG51bGx9ZnVuY3Rpb24gYmYoKXt2YXIgYT1sLm5hdmlnYXRvcjtyZXR1cm4gYSYmYS5zZXJ2aWNlV29ya2VyP0UoKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGEuc2VydmljZVdvcmtlci5yZWFkeX0pLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuIGIuYWN0aXZlfHxudWxsfSkubyhmdW5jdGlvbigpe3JldHVybiBudWxsfSk6RShudWxsKX07dmFyIGNmPXt9O2Z1bmN0aW9uIGRmKGEpe2NmW2FdfHwoY2ZbYV09ITAsXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgY29uc29sZS53YXJuJiZjb25zb2xlLndhcm4oYSkpfTt2YXIgZWY7dHJ5e3ZhciBmZj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZmYsXCJhYmNkXCIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLHZhbHVlOjF9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZmYsXCJhYmNkXCIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLHZhbHVlOjJ9KTtlZj0yPT1mZi5hYmNkfWNhdGNoKGEpe2VmPSExfWZ1bmN0aW9uIEsoYSxiLGMpe2VmP09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLHZhbHVlOmN9KTphW2JdPWN9ZnVuY3Rpb24gTChhLGIpe2lmKGIpZm9yKHZhciBjIGluIGIpYi5oYXNPd25Qcm9wZXJ0eShjKSYmSyhhLGMsYltjXSl9ZnVuY3Rpb24gZ2YoYSl7dmFyIGI9e307TChiLGEpO3JldHVybiBifWZ1bmN0aW9uIGhmKGEpe3ZhciBiPXt9LGM7Zm9yKGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGpmKGEsYil7aWYoIWJ8fCFiLmxlbmd0aClyZXR1cm4hMDtpZighYSlyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl7dmFyIGQ9YVtiW2NdXTtpZih2b2lkIDA9PT1kfHxudWxsPT09ZHx8XCJcIj09PWQpcmV0dXJuITF9cmV0dXJuITB9ZnVuY3Rpb24ga2YoYSl7dmFyIGI9YTtpZihcIm9iamVjdFwiPT10eXBlb2YgYSYmbnVsbCE9YSl7Yj1cImxlbmd0aFwiaW4gYT9bXTp7fTtmb3IodmFyIGMgaW4gYSlLKGIsYyxrZihhW2NdKSl9cmV0dXJuIGJ9Oy8qXG5cbiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgSW5jLlxuXG4gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuZnVuY3Rpb24gbGYoYSl7dmFyIGI9YSYmKGFbbWZdP1wicGhvbmVcIjpudWxsKTtpZihiJiZhJiZhW25mXSl7Syh0aGlzLFwidWlkXCIsYVtuZl0pO0sodGhpcyxcImRpc3BsYXlOYW1lXCIsYVtvZl18fG51bGwpO3ZhciBjPW51bGw7YVtwZl0mJihjPShuZXcgRGF0ZShhW3BmXSkpLnRvVVRDU3RyaW5nKCkpO0sodGhpcyxcImVucm9sbG1lbnRUaW1lXCIsYyk7Syh0aGlzLFwiZmFjdG9ySWRcIixiKX1lbHNlIHRocm93IG5ldyB1KFwiaW50ZXJuYWwtZXJyb3JcIixcIkludGVybmFsIGFzc2VydDogaW52YWxpZCBNdWx0aUZhY3RvckluZm8gb2JqZWN0XCIpO31sZi5wcm90b3R5cGUudj1mdW5jdGlvbigpe3JldHVybnt1aWQ6dGhpcy51aWQsZGlzcGxheU5hbWU6dGhpcy5kaXNwbGF5TmFtZSxmYWN0b3JJZDp0aGlzLmZhY3RvcklkLGVucm9sbG1lbnRUaW1lOnRoaXMuZW5yb2xsbWVudFRpbWV9fTtmdW5jdGlvbiBxZihhKXt0cnl7dmFyIGI9bmV3IHJmKGEpfWNhdGNoKGMpe2I9bnVsbH1yZXR1cm4gYn1cbnZhciBvZj1cImRpc3BsYXlOYW1lXCIscGY9XCJlbnJvbGxlZEF0XCIsbmY9XCJtZmFFbnJvbGxtZW50SWRcIixtZj1cInBob25lSW5mb1wiO2Z1bmN0aW9uIHJmKGEpe2xmLmNhbGwodGhpcyxhKTtLKHRoaXMsXCJwaG9uZU51bWJlclwiLGFbbWZdKX10KHJmLGxmKTtyZi5wcm90b3R5cGUudj1mdW5jdGlvbigpe3ZhciBhPXJmLlphLnYuY2FsbCh0aGlzKTthLnBob25lTnVtYmVyPXRoaXMucGhvbmVOdW1iZXI7cmV0dXJuIGF9O2Z1bmN0aW9uIHNmKGEpe3ZhciBiPXt9LGM9YVt0Zl0sZD1hW3VmXSxlPWFbdmZdO2E9cWYoYVt3Zl0pO2lmKCFlfHxlIT14ZiYmZSE9eWYmJiFjfHxlPT15ZiYmIWR8fGU9PXpmJiYhYSl0aHJvdyBFcnJvcihcIkludmFsaWQgY2hlY2tBY3Rpb25Db2RlIHJlc3BvbnNlIVwiKTtlPT15Zj8oYltBZl09Y3x8bnVsbCxiW0JmXT1jfHxudWxsLGJbQ2ZdPWQpOihiW0FmXT1kfHxudWxsLGJbQmZdPWR8fG51bGwsYltDZl09Y3x8bnVsbCk7YltEZl09YXx8bnVsbDtLKHRoaXMsRWYsZSk7Syh0aGlzLEZmLGtmKGIpKX1cbnZhciB6Zj1cIlJFVkVSVF9TRUNPTkRfRkFDVE9SX0FERElUSU9OXCIseGY9XCJFTUFJTF9TSUdOSU5cIix5Zj1cIlZFUklGWV9BTkRfQ0hBTkdFX0VNQUlMXCIsdGY9XCJlbWFpbFwiLHdmPVwibWZhSW5mb1wiLHVmPVwibmV3RW1haWxcIix2Zj1cInJlcXVlc3RUeXBlXCIsQ2Y9XCJlbWFpbFwiLEFmPVwiZnJvbUVtYWlsXCIsRGY9XCJtdWx0aUZhY3RvckluZm9cIixCZj1cInByZXZpb3VzRW1haWxcIixGZj1cImRhdGFcIixFZj1cIm9wZXJhdGlvblwiO2Z1bmN0aW9uIEdmKGEpe2E9WmQoYSk7dmFyIGI9WWQoYSxIZil8fG51bGwsYz1ZZChhLElmKXx8bnVsbCxkPVlkKGEsSmYpfHxudWxsO2Q9ZD9LZltkXXx8bnVsbDpudWxsO2lmKCFifHwhY3x8IWQpdGhyb3cgbmV3IHUoXCJhcmd1bWVudC1lcnJvclwiLEhmK1wiLCBcIitJZitcImFuZCBcIitKZitcIiBhcmUgcmVxdWlyZWQgaW4gYSB2YWxpZCBhY3Rpb24gY29kZSBVUkwuXCIpO0wodGhpcyx7YXBpS2V5OmIsb3BlcmF0aW9uOmQsY29kZTpjLGNvbnRpbnVlVXJsOllkKGEsTGYpfHxudWxsLGxhbmd1YWdlQ29kZTpZZChhLE1mKXx8bnVsbCx0ZW5hbnRJZDpZZChhLE5mKXx8bnVsbH0pfVxudmFyIEhmPVwiYXBpS2V5XCIsSWY9XCJvb2JDb2RlXCIsTGY9XCJjb250aW51ZVVybFwiLE1mPVwibGFuZ3VhZ2VDb2RlXCIsSmY9XCJtb2RlXCIsTmY9XCJ0ZW5hbnRJZFwiLEtmPXtyZWNvdmVyRW1haWw6XCJSRUNPVkVSX0VNQUlMXCIscmVzZXRQYXNzd29yZDpcIlBBU1NXT1JEX1JFU0VUXCIscmV2ZXJ0U2Vjb25kRmFjdG9yQWRkaXRpb246emYsc2lnbkluOnhmLHZlcmlmeUFuZENoYW5nZUVtYWlsOnlmLHZlcmlmeUVtYWlsOlwiVkVSSUZZX0VNQUlMXCJ9O2Z1bmN0aW9uIE9mKGEpe3RyeXtyZXR1cm4gbmV3IEdmKGEpfWNhdGNoKGIpe3JldHVybiBudWxsfX07ZnVuY3Rpb24gUGYoYSl7dmFyIGI9YVtRZl07aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBiKXRocm93IG5ldyB1KFwibWlzc2luZy1jb250aW51ZS11cmlcIik7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBifHxcInN0cmluZ1wiPT09dHlwZW9mIGImJiFiLmxlbmd0aCl0aHJvdyBuZXcgdShcImludmFsaWQtY29udGludWUtdXJpXCIpO3RoaXMuaD1iO3RoaXMuYj10aGlzLmE9bnVsbDt0aGlzLmc9ITE7dmFyIGM9YVtSZl07aWYoYyYmXCJvYmplY3RcIj09PXR5cGVvZiBjKXtiPWNbU2ZdO3ZhciBkPWNbVGZdO2M9Y1tVZl07aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiJiZiLmxlbmd0aCl7dGhpcy5hPWI7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkJiZcImJvb2xlYW5cIiE9PXR5cGVvZiBkKXRocm93IG5ldyB1KFwiYXJndW1lbnQtZXJyb3JcIixUZitcIiBwcm9wZXJ0eSBtdXN0IGJlIGEgYm9vbGVhbiB3aGVuIHNwZWNpZmllZC5cIik7dGhpcy5nPSEhZDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJihcInN0cmluZ1wiIT09XG50eXBlb2YgY3x8XCJzdHJpbmdcIj09PXR5cGVvZiBjJiYhYy5sZW5ndGgpKXRocm93IG5ldyB1KFwiYXJndW1lbnQtZXJyb3JcIixVZitcIiBwcm9wZXJ0eSBtdXN0IGJlIGEgbm9uIGVtcHR5IHN0cmluZyB3aGVuIHNwZWNpZmllZC5cIik7dGhpcy5iPWN8fG51bGx9ZWxzZXtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGIpdGhyb3cgbmV3IHUoXCJhcmd1bWVudC1lcnJvclwiLFNmK1wiIHByb3BlcnR5IG11c3QgYmUgYSBub24gZW1wdHkgc3RyaW5nIHdoZW4gc3BlY2lmaWVkLlwiKTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGR8fFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyl0aHJvdyBuZXcgdShcIm1pc3NpbmctYW5kcm9pZC1wa2ctbmFtZVwiKTt9fWVsc2UgaWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjKXRocm93IG5ldyB1KFwiYXJndW1lbnQtZXJyb3JcIixSZitcIiBwcm9wZXJ0eSBtdXN0IGJlIGEgbm9uIG51bGwgb2JqZWN0IHdoZW4gc3BlY2lmaWVkLlwiKTt0aGlzLmY9bnVsbDtpZigoYj1hW1ZmXSkmJlwib2JqZWN0XCI9PT1cbnR5cGVvZiBiKWlmKGI9YltXZl0sXCJzdHJpbmdcIj09PXR5cGVvZiBiJiZiLmxlbmd0aCl0aGlzLmY9YjtlbHNle2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYil0aHJvdyBuZXcgdShcImFyZ3VtZW50LWVycm9yXCIsV2YrXCIgcHJvcGVydHkgbXVzdCBiZSBhIG5vbiBlbXB0eSBzdHJpbmcgd2hlbiBzcGVjaWZpZWQuXCIpO31lbHNlIGlmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYil0aHJvdyBuZXcgdShcImFyZ3VtZW50LWVycm9yXCIsVmYrXCIgcHJvcGVydHkgbXVzdCBiZSBhIG5vbiBudWxsIG9iamVjdCB3aGVuIHNwZWNpZmllZC5cIik7Yj1hW1hmXTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGImJlwiYm9vbGVhblwiIT09dHlwZW9mIGIpdGhyb3cgbmV3IHUoXCJhcmd1bWVudC1lcnJvclwiLFhmK1wiIHByb3BlcnR5IG11c3QgYmUgYSBib29sZWFuIHdoZW4gc3BlY2lmaWVkLlwiKTt0aGlzLmM9ISFiO2E9YVtZZl07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBhJiYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhfHxcInN0cmluZ1wiPT09XG50eXBlb2YgYSYmIWEubGVuZ3RoKSl0aHJvdyBuZXcgdShcImFyZ3VtZW50LWVycm9yXCIsWWYrXCIgcHJvcGVydHkgbXVzdCBiZSBhIG5vbiBlbXB0eSBzdHJpbmcgd2hlbiBzcGVjaWZpZWQuXCIpO3RoaXMuaT1hfHxudWxsfXZhciBSZj1cImFuZHJvaWRcIixZZj1cImR5bmFtaWNMaW5rRG9tYWluXCIsWGY9XCJoYW5kbGVDb2RlSW5BcHBcIixWZj1cImlPU1wiLFFmPVwidXJsXCIsVGY9XCJpbnN0YWxsQXBwXCIsVWY9XCJtaW5pbXVtVmVyc2lvblwiLFNmPVwicGFja2FnZU5hbWVcIixXZj1cImJ1bmRsZUlkXCI7XG5mdW5jdGlvbiBaZihhKXt2YXIgYj17fTtiLmNvbnRpbnVlVXJsPWEuaDtiLmNhbkhhbmRsZUNvZGVJbkFwcD1hLmM7aWYoYi5hbmRyb2lkUGFja2FnZU5hbWU9YS5hKWIuYW5kcm9pZE1pbmltdW1WZXJzaW9uPWEuYixiLmFuZHJvaWRJbnN0YWxsQXBwPWEuZztiLmlPU0J1bmRsZUlkPWEuZjtiLmR5bmFtaWNMaW5rRG9tYWluPWEuaTtmb3IodmFyIGMgaW4gYiludWxsPT09YltjXSYmZGVsZXRlIGJbY107cmV0dXJuIGJ9O2Z1bmN0aW9uICRmKGEpe3JldHVybiBPYShhLGZ1bmN0aW9uKGIpe2I9Yi50b1N0cmluZygxNik7cmV0dXJuIDE8Yi5sZW5ndGg/YjpcIjBcIitifSkuam9pbihcIlwiKX07dmFyIGFnPW51bGw7ZnVuY3Rpb24gYmcoYSl7dmFyIGI9XCJcIjtjZyhhLGZ1bmN0aW9uKGMpe2IrPVN0cmluZy5mcm9tQ2hhckNvZGUoYyl9KTtyZXR1cm4gYn1mdW5jdGlvbiBjZyhhLGIpe2Z1bmN0aW9uIGMobSl7Zm9yKDtkPGEubGVuZ3RoOyl7dmFyIHA9YS5jaGFyQXQoZCsrKSx2PWFnW3BdO2lmKG51bGwhPXYpcmV0dXJuIHY7aWYoIS9eW1xcc1xceGEwXSokLy50ZXN0KHApKXRocm93IEVycm9yKFwiVW5rbm93biBiYXNlNjQgZW5jb2RpbmcgYXQgY2hhcjogXCIrcCk7fXJldHVybiBtfWRnKCk7Zm9yKHZhciBkPTA7Oyl7dmFyIGU9YygtMSksZj1jKDApLGc9Yyg2NCksaD1jKDY0KTtpZig2ND09PWgmJi0xPT09ZSlicmVhaztiKGU8PDJ8Zj4+NCk7NjQhPWcmJihiKGY8PDQmMjQwfGc+PjIpLDY0IT1oJiZiKGc8PDYmMTkyfGgpKX19XG5mdW5jdGlvbiBkZygpe2lmKCFhZyl7YWc9e307Zm9yKHZhciBhPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODlcIi5zcGxpdChcIlwiKSxiPVtcIisvPVwiLFwiKy9cIixcIi1fPVwiLFwiLV8uXCIsXCItX1wiXSxjPTA7NT5jO2MrKylmb3IodmFyIGQ9YS5jb25jYXQoYltjXS5zcGxpdChcIlwiKSksZT0wO2U8ZC5sZW5ndGg7ZSsrKXt2YXIgZj1kW2VdO3ZvaWQgMD09PWFnW2ZdJiYoYWdbZl09ZSl9fX07ZnVuY3Rpb24gZWcoYSl7dmFyIGI9ZmcoYSk7aWYoIShiJiZiLnN1YiYmYi5pc3MmJmIuYXVkJiZiLmV4cCkpdGhyb3cgRXJyb3IoXCJJbnZhbGlkIEpXVFwiKTt0aGlzLmc9YTt0aGlzLmM9Yi5leHA7dGhpcy5oPWIuc3ViO3RhKCk7dGhpcy5hPWIucHJvdmlkZXJfaWR8fGIuZmlyZWJhc2UmJmIuZmlyZWJhc2Uuc2lnbl9pbl9wcm92aWRlcnx8bnVsbDt0aGlzLmY9Yi5maXJlYmFzZSYmYi5maXJlYmFzZS50ZW5hbnR8fG51bGw7dGhpcy5iPSEhYi5pc19hbm9ueW1vdXN8fFwiYW5vbnltb3VzXCI9PXRoaXMuYX1lZy5wcm90b3R5cGUuUz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmZ9O2VnLnByb3RvdHlwZS5pPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYn07ZWcucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ307ZnVuY3Rpb24gZ2coYSl7dHJ5e3JldHVybiBuZXcgZWcoYSl9Y2F0Y2goYil7cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gZmcoYSl7aWYoIWEpcmV0dXJuIG51bGw7YT1hLnNwbGl0KFwiLlwiKTtpZigzIT1hLmxlbmd0aClyZXR1cm4gbnVsbDthPWFbMV07Zm9yKHZhciBiPSg0LWEubGVuZ3RoJTQpJTQsYz0wO2M8YjtjKyspYSs9XCIuXCI7dHJ5e3JldHVybiBKU09OLnBhcnNlKGJnKGEpKX1jYXRjaChkKXt9cmV0dXJuIG51bGx9O3ZhciBoZz1cIm9hdXRoX2NvbnN1bWVyX2tleSBvYXV0aF9ub25jZSBvYXV0aF9zaWduYXR1cmUgb2F1dGhfc2lnbmF0dXJlX21ldGhvZCBvYXV0aF90aW1lc3RhbXAgb2F1dGhfdG9rZW4gb2F1dGhfdmVyc2lvblwiLnNwbGl0KFwiIFwiKSxpZz1bXCJjbGllbnRfaWRcIixcInJlc3BvbnNlX3R5cGVcIixcInNjb3BlXCIsXCJyZWRpcmVjdF91cmlcIixcInN0YXRlXCJdLGpnPXtrZDp7SGE6XCJsb2NhbGVcIix0YTo3MDAsc2E6NjAwLGVhOlwiZmFjZWJvb2suY29tXCIsVmE6aWd9LG1kOntIYTpudWxsLHRhOjUwMCxzYTo3NTAsZWE6XCJnaXRodWIuY29tXCIsVmE6aWd9LG5kOntIYTpcImhsXCIsdGE6NTE1LHNhOjY4MCxlYTpcImdvb2dsZS5jb21cIixWYTppZ30sdGQ6e0hhOlwibGFuZ1wiLHRhOjQ4NSxzYTo3MDUsZWE6XCJ0d2l0dGVyLmNvbVwiLFZhOmhnfSxnZDp7SGE6XCJsb2NhbGVcIix0YTo2NDAsc2E6NjAwLGVhOlwiYXBwbGUuY29tXCIsVmE6W119fTtcbmZ1bmN0aW9uIGtnKGEpe2Zvcih2YXIgYiBpbiBqZylpZihqZ1tiXS5lYT09YSlyZXR1cm4gamdbYl07cmV0dXJuIG51bGx9O2Z1bmN0aW9uIGxnKGEpe3ZhciBiPXt9O2JbXCJmYWNlYm9vay5jb21cIl09bWc7YltcImdvb2dsZS5jb21cIl09bmc7YltcImdpdGh1Yi5jb21cIl09b2c7YltcInR3aXR0ZXIuY29tXCJdPXBnO3ZhciBjPWEmJmFbcWddO3RyeXtpZihjKXJldHVybiBiW2NdP25ldyBiW2NdKGEpOm5ldyByZyhhKTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGFbc2ddKXJldHVybiBuZXcgdGcoYSl9Y2F0Y2goZCl7fXJldHVybiBudWxsfXZhciBzZz1cImlkVG9rZW5cIixxZz1cInByb3ZpZGVySWRcIjtcbmZ1bmN0aW9uIHRnKGEpe3ZhciBiPWFbcWddO2lmKCFiJiZhW3NnXSl7dmFyIGM9Z2coYVtzZ10pO2MmJmMuYSYmKGI9Yy5hKX1pZighYil0aHJvdyBFcnJvcihcIkludmFsaWQgYWRkaXRpb25hbCB1c2VyIGluZm8hXCIpO2lmKFwiYW5vbnltb3VzXCI9PWJ8fFwiY3VzdG9tXCI9PWIpYj1udWxsO2M9ITE7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBhLmlzTmV3VXNlcj9jPSEhYS5pc05ld1VzZXI6XCJpZGVudGl0eXRvb2xraXQjU2lnbnVwTmV3VXNlclJlc3BvbnNlXCI9PT1hLmtpbmQmJihjPSEwKTtLKHRoaXMsXCJwcm92aWRlcklkXCIsYik7Syh0aGlzLFwiaXNOZXdVc2VyXCIsYyl9ZnVuY3Rpb24gcmcoYSl7dGcuY2FsbCh0aGlzLGEpO2E9VGUoYS5yYXdVc2VySW5mb3x8XCJ7fVwiKTtLKHRoaXMsXCJwcm9maWxlXCIsa2YoYXx8e30pKX10KHJnLHRnKTtcbmZ1bmN0aW9uIG1nKGEpe3JnLmNhbGwodGhpcyxhKTtpZihcImZhY2Vib29rLmNvbVwiIT10aGlzLnByb3ZpZGVySWQpdGhyb3cgRXJyb3IoXCJJbnZhbGlkIHByb3ZpZGVyIElEIVwiKTt9dChtZyxyZyk7ZnVuY3Rpb24gb2coYSl7cmcuY2FsbCh0aGlzLGEpO2lmKFwiZ2l0aHViLmNvbVwiIT10aGlzLnByb3ZpZGVySWQpdGhyb3cgRXJyb3IoXCJJbnZhbGlkIHByb3ZpZGVyIElEIVwiKTtLKHRoaXMsXCJ1c2VybmFtZVwiLHRoaXMucHJvZmlsZSYmdGhpcy5wcm9maWxlLmxvZ2lufHxudWxsKX10KG9nLHJnKTtmdW5jdGlvbiBuZyhhKXtyZy5jYWxsKHRoaXMsYSk7aWYoXCJnb29nbGUuY29tXCIhPXRoaXMucHJvdmlkZXJJZCl0aHJvdyBFcnJvcihcIkludmFsaWQgcHJvdmlkZXIgSUQhXCIpO310KG5nLHJnKTtcbmZ1bmN0aW9uIHBnKGEpe3JnLmNhbGwodGhpcyxhKTtpZihcInR3aXR0ZXIuY29tXCIhPXRoaXMucHJvdmlkZXJJZCl0aHJvdyBFcnJvcihcIkludmFsaWQgcHJvdmlkZXIgSUQhXCIpO0sodGhpcyxcInVzZXJuYW1lXCIsYS5zY3JlZW5OYW1lfHxudWxsKX10KHBnLHJnKTtmdW5jdGlvbiB1ZyhhKXt2YXIgYj1aZChhKSxjPVlkKGIsXCJsaW5rXCIpLGQ9WWQoWmQoYyksXCJsaW5rXCIpO2I9WWQoYixcImRlZXBfbGlua19pZFwiKTtyZXR1cm4gWWQoWmQoYiksXCJsaW5rXCIpfHxifHxkfHxjfHxhfTtmdW5jdGlvbiB2ZyhhLGIpe2lmKCFhJiYhYil0aHJvdyBuZXcgdShcImludGVybmFsLWVycm9yXCIsXCJJbnRlcm5hbCBhc3NlcnQ6IG5vIHJhdyBzZXNzaW9uIHN0cmluZyBhdmFpbGFibGVcIik7aWYoYSYmYil0aHJvdyBuZXcgdShcImludGVybmFsLWVycm9yXCIsXCJJbnRlcm5hbCBhc3NlcnQ6IHVuYWJsZSB0byBkZXRlcm1pbmUgdGhlIHNlc3Npb24gdHlwZVwiKTt0aGlzLmE9YXx8bnVsbDt0aGlzLmI9Ynx8bnVsbDt0aGlzLnR5cGU9dGhpcy5hP3dnOnhnfXZhciB3Zz1cImVucm9sbFwiLHhnPVwic2lnbmluXCI7dmcucHJvdG90eXBlLkZhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYT9FKHRoaXMuYSk6RSh0aGlzLmIpfTt2Zy5wcm90b3R5cGUudj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnR5cGU9PXdnP3ttdWx0aUZhY3RvclNlc3Npb246e2lkVG9rZW46dGhpcy5hfX06e211bHRpRmFjdG9yU2Vzc2lvbjp7cGVuZGluZ0NyZWRlbnRpYWw6dGhpcy5ifX19O2Z1bmN0aW9uIHlnKCl7fXlnLnByb3RvdHlwZS5pYT1mdW5jdGlvbigpe307eWcucHJvdG90eXBlLmI9ZnVuY3Rpb24oKXt9O3lnLnByb3RvdHlwZS5jPWZ1bmN0aW9uKCl7fTt5Zy5wcm90b3R5cGUudj1mdW5jdGlvbigpe307ZnVuY3Rpb24gemcoYSxiKXtyZXR1cm4gYS50aGVuKGZ1bmN0aW9uKGMpe2lmKGNbQWddKXt2YXIgZD1nZyhjW0FnXSk7aWYoIWR8fGIhPWQuaCl0aHJvdyBuZXcgdShcInVzZXItbWlzbWF0Y2hcIik7cmV0dXJuIGN9dGhyb3cgbmV3IHUoXCJ1c2VyLW1pc21hdGNoXCIpO30pLm8oZnVuY3Rpb24oYyl7dGhyb3cgYyYmYy5jb2RlJiZjLmNvZGU9PXVhK1widXNlci1ub3QtZm91bmRcIj9uZXcgdShcInVzZXItbWlzbWF0Y2hcIik6Yzt9KX1cbmZ1bmN0aW9uIEJnKGEsYil7aWYoYil0aGlzLmE9YjtlbHNlIHRocm93IG5ldyB1KFwiaW50ZXJuYWwtZXJyb3JcIixcImZhaWxlZCB0byBjb25zdHJ1Y3QgYSBjcmVkZW50aWFsXCIpO0sodGhpcyxcInByb3ZpZGVySWRcIixhKTtLKHRoaXMsXCJzaWduSW5NZXRob2RcIixhKX1CZy5wcm90b3R5cGUuaWE9ZnVuY3Rpb24oYSl7cmV0dXJuIENnKGEsRGcodGhpcykpfTtCZy5wcm90b3R5cGUuYj1mdW5jdGlvbihhLGIpe3ZhciBjPURnKHRoaXMpO2MuaWRUb2tlbj1iO3JldHVybiBFZyhhLGMpfTtCZy5wcm90b3R5cGUuYz1mdW5jdGlvbihhLGIpe3JldHVybiB6ZyhGZyhhLERnKHRoaXMpKSxiKX07ZnVuY3Rpb24gRGcoYSl7cmV0dXJue3BlbmRpbmdUb2tlbjphLmEscmVxdWVzdFVyaTpcImh0dHA6Ly9sb2NhbGhvc3RcIn19QmcucHJvdG90eXBlLnY9ZnVuY3Rpb24oKXtyZXR1cm57cHJvdmlkZXJJZDp0aGlzLnByb3ZpZGVySWQsc2lnbkluTWV0aG9kOnRoaXMuc2lnbkluTWV0aG9kLHBlbmRpbmdUb2tlbjp0aGlzLmF9fTtcbmZ1bmN0aW9uIEdnKGEpe2lmKGEmJmEucHJvdmlkZXJJZCYmYS5zaWduSW5NZXRob2QmJjA9PWEucHJvdmlkZXJJZC5pbmRleE9mKFwic2FtbC5cIikmJmEucGVuZGluZ1Rva2VuKXRyeXtyZXR1cm4gbmV3IEJnKGEucHJvdmlkZXJJZCxhLnBlbmRpbmdUb2tlbil9Y2F0Y2goYil7fXJldHVybiBudWxsfVxuZnVuY3Rpb24gSGcoYSxiLGMpe3RoaXMuYT1udWxsO2lmKGIuaWRUb2tlbnx8Yi5hY2Nlc3NUb2tlbiliLmlkVG9rZW4mJksodGhpcyxcImlkVG9rZW5cIixiLmlkVG9rZW4pLGIuYWNjZXNzVG9rZW4mJksodGhpcyxcImFjY2Vzc1Rva2VuXCIsYi5hY2Nlc3NUb2tlbiksYi5ub25jZSYmIWIucGVuZGluZ1Rva2VuJiZLKHRoaXMsXCJub25jZVwiLGIubm9uY2UpLGIucGVuZGluZ1Rva2VuJiYodGhpcy5hPWIucGVuZGluZ1Rva2VuKTtlbHNlIGlmKGIub2F1dGhUb2tlbiYmYi5vYXV0aFRva2VuU2VjcmV0KUsodGhpcyxcImFjY2Vzc1Rva2VuXCIsYi5vYXV0aFRva2VuKSxLKHRoaXMsXCJzZWNyZXRcIixiLm9hdXRoVG9rZW5TZWNyZXQpO2Vsc2UgdGhyb3cgbmV3IHUoXCJpbnRlcm5hbC1lcnJvclwiLFwiZmFpbGVkIHRvIGNvbnN0cnVjdCBhIGNyZWRlbnRpYWxcIik7Syh0aGlzLFwicHJvdmlkZXJJZFwiLGEpO0sodGhpcyxcInNpZ25Jbk1ldGhvZFwiLGMpfVxuSGcucHJvdG90eXBlLmlhPWZ1bmN0aW9uKGEpe3JldHVybiBDZyhhLElnKHRoaXMpKX07SGcucHJvdG90eXBlLmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1JZyh0aGlzKTtjLmlkVG9rZW49YjtyZXR1cm4gRWcoYSxjKX07SGcucHJvdG90eXBlLmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1JZyh0aGlzKTtyZXR1cm4gemcoRmcoYSxjKSxiKX07XG5mdW5jdGlvbiBJZyhhKXt2YXIgYj17fTthLmlkVG9rZW4mJihiLmlkX3Rva2VuPWEuaWRUb2tlbik7YS5hY2Nlc3NUb2tlbiYmKGIuYWNjZXNzX3Rva2VuPWEuYWNjZXNzVG9rZW4pO2Euc2VjcmV0JiYoYi5vYXV0aF90b2tlbl9zZWNyZXQ9YS5zZWNyZXQpO2IucHJvdmlkZXJJZD1hLnByb3ZpZGVySWQ7YS5ub25jZSYmIWEuYSYmKGIubm9uY2U9YS5ub25jZSk7Yj17cG9zdEJvZHk6Y2UoYikudG9TdHJpbmcoKSxyZXF1ZXN0VXJpOlwiaHR0cDovL2xvY2FsaG9zdFwifTthLmEmJihkZWxldGUgYi5wb3N0Qm9keSxiLnBlbmRpbmdUb2tlbj1hLmEpO3JldHVybiBifVxuSGcucHJvdG90eXBlLnY9ZnVuY3Rpb24oKXt2YXIgYT17cHJvdmlkZXJJZDp0aGlzLnByb3ZpZGVySWQsc2lnbkluTWV0aG9kOnRoaXMuc2lnbkluTWV0aG9kfTt0aGlzLmlkVG9rZW4mJihhLm9hdXRoSWRUb2tlbj10aGlzLmlkVG9rZW4pO3RoaXMuYWNjZXNzVG9rZW4mJihhLm9hdXRoQWNjZXNzVG9rZW49dGhpcy5hY2Nlc3NUb2tlbik7dGhpcy5zZWNyZXQmJihhLm9hdXRoVG9rZW5TZWNyZXQ9dGhpcy5zZWNyZXQpO3RoaXMubm9uY2UmJihhLm5vbmNlPXRoaXMubm9uY2UpO3RoaXMuYSYmKGEucGVuZGluZ1Rva2VuPXRoaXMuYSk7cmV0dXJuIGF9O1xuZnVuY3Rpb24gSmcoYSl7aWYoYSYmYS5wcm92aWRlcklkJiZhLnNpZ25Jbk1ldGhvZCl7dmFyIGI9e2lkVG9rZW46YS5vYXV0aElkVG9rZW4sYWNjZXNzVG9rZW46YS5vYXV0aFRva2VuU2VjcmV0P251bGw6YS5vYXV0aEFjY2Vzc1Rva2VuLG9hdXRoVG9rZW5TZWNyZXQ6YS5vYXV0aFRva2VuU2VjcmV0LG9hdXRoVG9rZW46YS5vYXV0aFRva2VuU2VjcmV0JiZhLm9hdXRoQWNjZXNzVG9rZW4sbm9uY2U6YS5ub25jZSxwZW5kaW5nVG9rZW46YS5wZW5kaW5nVG9rZW59O3RyeXtyZXR1cm4gbmV3IEhnKGEucHJvdmlkZXJJZCxiLGEuc2lnbkluTWV0aG9kKX1jYXRjaChjKXt9fXJldHVybiBudWxsfWZ1bmN0aW9uIEtnKGEsYil7dGhpcy5PYz1ifHxbXTtMKHRoaXMse3Byb3ZpZGVySWQ6YSxpc09BdXRoUHJvdmlkZXI6ITB9KTt0aGlzLkZiPXt9O3RoaXMubGI9KGtnKGEpfHx7fSkuSGF8fG51bGw7dGhpcy5rYj1udWxsfVxuS2cucHJvdG90eXBlLklhPWZ1bmN0aW9uKGEpe3RoaXMuRmI9a2IoYSk7cmV0dXJuIHRoaXN9O2Z1bmN0aW9uIExnKGEpe2lmKFwic3RyaW5nXCIhPT10eXBlb2YgYXx8MCE9YS5pbmRleE9mKFwic2FtbC5cIikpdGhyb3cgbmV3IHUoXCJhcmd1bWVudC1lcnJvclwiLCdTQU1MIHByb3ZpZGVyIElEcyBtdXN0IGJlIHByZWZpeGVkIHdpdGggXCJzYW1sLlwiJyk7S2cuY2FsbCh0aGlzLGEsW10pfXQoTGcsS2cpO2Z1bmN0aW9uIE0oYSl7S2cuY2FsbCh0aGlzLGEsaWcpO3RoaXMuYT1bXX10KE0sS2cpO00ucHJvdG90eXBlLkFhPWZ1bmN0aW9uKGEpe1NhKHRoaXMuYSxhKXx8dGhpcy5hLnB1c2goYSk7cmV0dXJuIHRoaXN9O00ucHJvdG90eXBlLk5iPWZ1bmN0aW9uKCl7cmV0dXJuIFdhKHRoaXMuYSl9O1xuTS5wcm90b3R5cGUuY3JlZGVudGlhbD1mdW5jdGlvbihhLGIpe3ZhciBjO3EoYSk/Yz17aWRUb2tlbjphLmlkVG9rZW58fG51bGwsYWNjZXNzVG9rZW46YS5hY2Nlc3NUb2tlbnx8bnVsbCxub25jZTphLnJhd05vbmNlfHxudWxsfTpjPXtpZFRva2VuOmF8fG51bGwsYWNjZXNzVG9rZW46Ynx8bnVsbH07aWYoIWMuaWRUb2tlbiYmIWMuYWNjZXNzVG9rZW4pdGhyb3cgbmV3IHUoXCJhcmd1bWVudC1lcnJvclwiLFwiY3JlZGVudGlhbCBmYWlsZWQ6IG11c3QgcHJvdmlkZSB0aGUgSUQgdG9rZW4gYW5kL29yIHRoZSBhY2Nlc3MgdG9rZW4uXCIpO3JldHVybiBuZXcgSGcodGhpcy5wcm92aWRlcklkLGMsdGhpcy5wcm92aWRlcklkKX07ZnVuY3Rpb24gTWcoKXtNLmNhbGwodGhpcyxcImZhY2Vib29rLmNvbVwiKX10KE1nLE0pO0soTWcsXCJQUk9WSURFUl9JRFwiLFwiZmFjZWJvb2suY29tXCIpO0soTWcsXCJGQUNFQk9PS19TSUdOX0lOX01FVEhPRFwiLFwiZmFjZWJvb2suY29tXCIpO1xuZnVuY3Rpb24gTmcoYSl7aWYoIWEpdGhyb3cgbmV3IHUoXCJhcmd1bWVudC1lcnJvclwiLFwiY3JlZGVudGlhbCBmYWlsZWQ6IGV4cGVjdGVkIDEgYXJndW1lbnQgKHRoZSBPQXV0aCBhY2Nlc3MgdG9rZW4pLlwiKTt2YXIgYj1hO3EoYSkmJihiPWEuYWNjZXNzVG9rZW4pO3JldHVybihuZXcgTWcpLmNyZWRlbnRpYWwoe2FjY2Vzc1Rva2VuOmJ9KX1mdW5jdGlvbiBPZygpe00uY2FsbCh0aGlzLFwiZ2l0aHViLmNvbVwiKX10KE9nLE0pO0soT2csXCJQUk9WSURFUl9JRFwiLFwiZ2l0aHViLmNvbVwiKTtLKE9nLFwiR0lUSFVCX1NJR05fSU5fTUVUSE9EXCIsXCJnaXRodWIuY29tXCIpO1xuZnVuY3Rpb24gUGcoYSl7aWYoIWEpdGhyb3cgbmV3IHUoXCJhcmd1bWVudC1lcnJvclwiLFwiY3JlZGVudGlhbCBmYWlsZWQ6IGV4cGVjdGVkIDEgYXJndW1lbnQgKHRoZSBPQXV0aCBhY2Nlc3MgdG9rZW4pLlwiKTt2YXIgYj1hO3EoYSkmJihiPWEuYWNjZXNzVG9rZW4pO3JldHVybihuZXcgT2cpLmNyZWRlbnRpYWwoe2FjY2Vzc1Rva2VuOmJ9KX1mdW5jdGlvbiBRZygpe00uY2FsbCh0aGlzLFwiZ29vZ2xlLmNvbVwiKTt0aGlzLkFhKFwicHJvZmlsZVwiKX10KFFnLE0pO0soUWcsXCJQUk9WSURFUl9JRFwiLFwiZ29vZ2xlLmNvbVwiKTtLKFFnLFwiR09PR0xFX1NJR05fSU5fTUVUSE9EXCIsXCJnb29nbGUuY29tXCIpO2Z1bmN0aW9uIFJnKGEsYil7dmFyIGM9YTtxKGEpJiYoYz1hLmlkVG9rZW4sYj1hLmFjY2Vzc1Rva2VuKTtyZXR1cm4obmV3IFFnKS5jcmVkZW50aWFsKHtpZFRva2VuOmMsYWNjZXNzVG9rZW46Yn0pfWZ1bmN0aW9uIFNnKCl7S2cuY2FsbCh0aGlzLFwidHdpdHRlci5jb21cIixoZyl9dChTZyxLZyk7XG5LKFNnLFwiUFJPVklERVJfSURcIixcInR3aXR0ZXIuY29tXCIpO0soU2csXCJUV0lUVEVSX1NJR05fSU5fTUVUSE9EXCIsXCJ0d2l0dGVyLmNvbVwiKTtmdW5jdGlvbiBUZyhhLGIpe3ZhciBjPWE7cShjKXx8KGM9e29hdXRoVG9rZW46YSxvYXV0aFRva2VuU2VjcmV0OmJ9KTtpZighYy5vYXV0aFRva2VufHwhYy5vYXV0aFRva2VuU2VjcmV0KXRocm93IG5ldyB1KFwiYXJndW1lbnQtZXJyb3JcIixcImNyZWRlbnRpYWwgZmFpbGVkOiBleHBlY3RlZCAyIGFyZ3VtZW50cyAodGhlIE9BdXRoIGFjY2VzcyB0b2tlbiBhbmQgc2VjcmV0KS5cIik7cmV0dXJuIG5ldyBIZyhcInR3aXR0ZXIuY29tXCIsYyxcInR3aXR0ZXIuY29tXCIpfVxuZnVuY3Rpb24gVWcoYSxiLGMpe3RoaXMuYT1hO3RoaXMuZj1iO0sodGhpcyxcInByb3ZpZGVySWRcIixcInBhc3N3b3JkXCIpO0sodGhpcyxcInNpZ25Jbk1ldGhvZFwiLGM9PT1WZy5FTUFJTF9MSU5LX1NJR05fSU5fTUVUSE9EP1ZnLkVNQUlMX0xJTktfU0lHTl9JTl9NRVRIT0Q6VmcuRU1BSUxfUEFTU1dPUkRfU0lHTl9JTl9NRVRIT0QpfVVnLnByb3RvdHlwZS5pYT1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5zaWduSW5NZXRob2Q9PVZnLkVNQUlMX0xJTktfU0lHTl9JTl9NRVRIT0Q/TihhLFdnLHtlbWFpbDp0aGlzLmEsb29iQ29kZTp0aGlzLmZ9KTpOKGEsWGcse2VtYWlsOnRoaXMuYSxwYXNzd29yZDp0aGlzLmZ9KX07XG5VZy5wcm90b3R5cGUuYj1mdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLnNpZ25Jbk1ldGhvZD09VmcuRU1BSUxfTElOS19TSUdOX0lOX01FVEhPRD9OKGEsWWcse2lkVG9rZW46YixlbWFpbDp0aGlzLmEsb29iQ29kZTp0aGlzLmZ9KTpOKGEsWmcse2lkVG9rZW46YixlbWFpbDp0aGlzLmEscGFzc3dvcmQ6dGhpcy5mfSl9O1VnLnByb3RvdHlwZS5jPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHpnKHRoaXMuaWEoYSksYil9O1VnLnByb3RvdHlwZS52PWZ1bmN0aW9uKCl7cmV0dXJue2VtYWlsOnRoaXMuYSxwYXNzd29yZDp0aGlzLmYsc2lnbkluTWV0aG9kOnRoaXMuc2lnbkluTWV0aG9kfX07ZnVuY3Rpb24gJGcoYSl7cmV0dXJuIGEmJmEuZW1haWwmJmEucGFzc3dvcmQ/bmV3IFVnKGEuZW1haWwsYS5wYXNzd29yZCxhLnNpZ25Jbk1ldGhvZCk6bnVsbH1mdW5jdGlvbiBWZygpe0wodGhpcyx7cHJvdmlkZXJJZDpcInBhc3N3b3JkXCIsaXNPQXV0aFByb3ZpZGVyOiExfSl9XG5mdW5jdGlvbiBhaChhLGIpe2I9YmgoYik7aWYoIWIpdGhyb3cgbmV3IHUoXCJhcmd1bWVudC1lcnJvclwiLFwiSW52YWxpZCBlbWFpbCBsaW5rIVwiKTtyZXR1cm4gbmV3IFVnKGEsYi5jb2RlLFZnLkVNQUlMX0xJTktfU0lHTl9JTl9NRVRIT0QpfWZ1bmN0aW9uIGJoKGEpe2E9dWcoYSk7cmV0dXJuKGE9T2YoYSkpJiZhLm9wZXJhdGlvbj09PXhmP2E6bnVsbH1MKFZnLHtQUk9WSURFUl9JRDpcInBhc3N3b3JkXCJ9KTtMKFZnLHtFTUFJTF9MSU5LX1NJR05fSU5fTUVUSE9EOlwiZW1haWxMaW5rXCJ9KTtMKFZnLHtFTUFJTF9QQVNTV09SRF9TSUdOX0lOX01FVEhPRDpcInBhc3N3b3JkXCJ9KTtmdW5jdGlvbiBjaChhKXtpZighKGEuYmImJmEuYWJ8fGEuSmEmJmEuZGEpKXRocm93IG5ldyB1KFwiaW50ZXJuYWwtZXJyb3JcIik7dGhpcy5hPWE7Syh0aGlzLFwicHJvdmlkZXJJZFwiLFwicGhvbmVcIik7dGhpcy5lYT1cInBob25lXCI7Syh0aGlzLFwic2lnbkluTWV0aG9kXCIsXCJwaG9uZVwiKX1cbmNoLnByb3RvdHlwZS5pYT1mdW5jdGlvbihhKXtyZXR1cm4gYS5jYihkaCh0aGlzKSl9O2NoLnByb3RvdHlwZS5iPWZ1bmN0aW9uKGEsYil7dmFyIGM9ZGgodGhpcyk7Yy5pZFRva2VuPWI7cmV0dXJuIE4oYSxlaCxjKX07Y2gucHJvdG90eXBlLmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1kaCh0aGlzKTtjLm9wZXJhdGlvbj1cIlJFQVVUSFwiO2E9TihhLGZoLGMpO3JldHVybiB6ZyhhLGIpfTtjaC5wcm90b3R5cGUudj1mdW5jdGlvbigpe3ZhciBhPXtwcm92aWRlcklkOlwicGhvbmVcIn07dGhpcy5hLmJiJiYoYS52ZXJpZmljYXRpb25JZD10aGlzLmEuYmIpO3RoaXMuYS5hYiYmKGEudmVyaWZpY2F0aW9uQ29kZT10aGlzLmEuYWIpO3RoaXMuYS5KYSYmKGEudGVtcG9yYXJ5UHJvb2Y9dGhpcy5hLkphKTt0aGlzLmEuZGEmJihhLnBob25lTnVtYmVyPXRoaXMuYS5kYSk7cmV0dXJuIGF9O1xuZnVuY3Rpb24gZ2goYSl7aWYoYSYmXCJwaG9uZVwiPT09YS5wcm92aWRlcklkJiYoYS52ZXJpZmljYXRpb25JZCYmYS52ZXJpZmljYXRpb25Db2RlfHxhLnRlbXBvcmFyeVByb29mJiZhLnBob25lTnVtYmVyKSl7dmFyIGI9e307eChbXCJ2ZXJpZmljYXRpb25JZFwiLFwidmVyaWZpY2F0aW9uQ29kZVwiLFwidGVtcG9yYXJ5UHJvb2ZcIixcInBob25lTnVtYmVyXCJdLGZ1bmN0aW9uKGMpe2FbY10mJihiW2NdPWFbY10pfSk7cmV0dXJuIG5ldyBjaChiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBkaChhKXtyZXR1cm4gYS5hLkphJiZhLmEuZGE/e3RlbXBvcmFyeVByb29mOmEuYS5KYSxwaG9uZU51bWJlcjphLmEuZGF9OntzZXNzaW9uSW5mbzphLmEuYmIsY29kZTphLmEuYWJ9fVxuZnVuY3Rpb24gaGgoYSl7dHJ5e3RoaXMuYT1hfHxmaXJlYmFzZS5hdXRoKCl9Y2F0Y2goYil7dGhyb3cgbmV3IHUoXCJhcmd1bWVudC1lcnJvclwiLFwiRWl0aGVyIGFuIGluc3RhbmNlIG9mIGZpcmViYXNlLmF1dGguQXV0aCBtdXN0IGJlIHBhc3NlZCBhcyBhbiBhcmd1bWVudCB0byB0aGUgZmlyZWJhc2UuYXV0aC5QaG9uZUF1dGhQcm92aWRlciBjb25zdHJ1Y3Rvciwgb3IgdGhlIGRlZmF1bHQgZmlyZWJhc2UgQXBwIGluc3RhbmNlIG11c3QgYmUgaW5pdGlhbGl6ZWQgdmlhIGZpcmViYXNlLmluaXRpYWxpemVBcHAoKS5cIik7fUwodGhpcyx7cHJvdmlkZXJJZDpcInBob25lXCIsaXNPQXV0aFByb3ZpZGVyOiExfSl9XG5oaC5wcm90b3R5cGUuY2I9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmEuYjtyZXR1cm4gRShiLnZlcmlmeSgpKS50aGVuKGZ1bmN0aW9uKGQpe2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCl0aHJvdyBuZXcgdShcImFyZ3VtZW50LWVycm9yXCIsXCJBbiBpbXBsZW1lbnRhdGlvbiBvZiBmaXJlYmFzZS5hdXRoLkFwcGxpY2F0aW9uVmVyaWZpZXIucHJvdG90eXBlLnZlcmlmeSgpIG11c3QgcmV0dXJuIGEgZmlyZWJhc2UuUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBzdHJpbmcuXCIpO3N3aXRjaChiLnR5cGUpe2Nhc2UgXCJyZWNhcHRjaGFcIjp2YXIgZT1xKGEpP2Euc2Vzc2lvbjpudWxsLGY9cShhKT9hLnBob25lTnVtYmVyOmEsZztlJiZlLnR5cGU9PXdnP2c9ZS5GYSgpLnRoZW4oZnVuY3Rpb24oaCl7cmV0dXJuIGloKGMse2lkVG9rZW46aCxwaG9uZUVucm9sbG1lbnRJbmZvOntwaG9uZU51bWJlcjpmLHJlY2FwdGNoYVRva2VuOmR9fSl9KTplJiZlLnR5cGU9PXhnP2c9ZS5GYSgpLnRoZW4oZnVuY3Rpb24oaCl7cmV0dXJuIGpoKGMsXG57bWZhUGVuZGluZ0NyZWRlbnRpYWw6aCxtZmFFbnJvbGxtZW50SWQ6YS5tdWx0aUZhY3RvckhpbnQmJmEubXVsdGlGYWN0b3JIaW50LnVpZHx8YS5tdWx0aUZhY3RvclVpZCxwaG9uZVNpZ25JbkluZm86e3JlY2FwdGNoYVRva2VuOmR9fSl9KTpnPWtoKGMse3Bob25lTnVtYmVyOmYscmVjYXB0Y2hhVG9rZW46ZH0pO3JldHVybiBnLnRoZW4oZnVuY3Rpb24oaCl7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVzZXQmJmIucmVzZXQoKTtyZXR1cm4gaH0sZnVuY3Rpb24oaCl7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVzZXQmJmIucmVzZXQoKTt0aHJvdyBoO30pO2RlZmF1bHQ6dGhyb3cgbmV3IHUoXCJhcmd1bWVudC1lcnJvclwiLCdPbmx5IGZpcmViYXNlLmF1dGguQXBwbGljYXRpb25WZXJpZmllcnMgd2l0aCB0eXBlPVwicmVjYXB0Y2hhXCIgYXJlIGN1cnJlbnRseSBzdXBwb3J0ZWQuJyk7fX0pfTtcbmZ1bmN0aW9uIGxoKGEsYil7aWYoIWEpdGhyb3cgbmV3IHUoXCJtaXNzaW5nLXZlcmlmaWNhdGlvbi1pZFwiKTtpZighYil0aHJvdyBuZXcgdShcIm1pc3NpbmctdmVyaWZpY2F0aW9uLWNvZGVcIik7cmV0dXJuIG5ldyBjaCh7YmI6YSxhYjpifSl9TChoaCx7UFJPVklERVJfSUQ6XCJwaG9uZVwifSk7TChoaCx7UEhPTkVfU0lHTl9JTl9NRVRIT0Q6XCJwaG9uZVwifSk7XG5mdW5jdGlvbiBtaChhKXtpZihhLnRlbXBvcmFyeVByb29mJiZhLnBob25lTnVtYmVyKXJldHVybiBuZXcgY2goe0phOmEudGVtcG9yYXJ5UHJvb2YsZGE6YS5waG9uZU51bWJlcn0pO3ZhciBiPWEmJmEucHJvdmlkZXJJZDtpZighYnx8XCJwYXNzd29yZFwiPT09YilyZXR1cm4gbnVsbDt2YXIgYz1hJiZhLm9hdXRoQWNjZXNzVG9rZW4sZD1hJiZhLm9hdXRoVG9rZW5TZWNyZXQsZT1hJiZhLm5vbmNlLGY9YSYmYS5vYXV0aElkVG9rZW4sZz1hJiZhLnBlbmRpbmdUb2tlbjt0cnl7c3dpdGNoKGIpe2Nhc2UgXCJnb29nbGUuY29tXCI6cmV0dXJuIFJnKGYsYyk7Y2FzZSBcImZhY2Vib29rLmNvbVwiOnJldHVybiBOZyhjKTtjYXNlIFwiZ2l0aHViLmNvbVwiOnJldHVybiBQZyhjKTtjYXNlIFwidHdpdHRlci5jb21cIjpyZXR1cm4gVGcoYyxkKTtkZWZhdWx0OnJldHVybiBjfHxkfHxmfHxnP2c/MD09Yi5pbmRleE9mKFwic2FtbC5cIik/bmV3IEJnKGIsZyk6bmV3IEhnKGIse3BlbmRpbmdUb2tlbjpnLGlkVG9rZW46YS5vYXV0aElkVG9rZW4sXG5hY2Nlc3NUb2tlbjphLm9hdXRoQWNjZXNzVG9rZW59LGIpOihuZXcgTShiKSkuY3JlZGVudGlhbCh7aWRUb2tlbjpmLGFjY2Vzc1Rva2VuOmMscmF3Tm9uY2U6ZX0pOm51bGx9fWNhdGNoKGgpe3JldHVybiBudWxsfX1mdW5jdGlvbiBuaChhKXtpZighYS5pc09BdXRoUHJvdmlkZXIpdGhyb3cgbmV3IHUoXCJpbnZhbGlkLW9hdXRoLXByb3ZpZGVyXCIpO307ZnVuY3Rpb24gb2goYSxiLGMsZCxlLGYsZyl7dGhpcy5jPWE7dGhpcy5iPWJ8fG51bGw7dGhpcy5nPWN8fG51bGw7dGhpcy5mPWR8fG51bGw7dGhpcy5pPWZ8fG51bGw7dGhpcy5oPWd8fG51bGw7dGhpcy5hPWV8fG51bGw7aWYodGhpcy5nfHx0aGlzLmEpe2lmKHRoaXMuZyYmdGhpcy5hKXRocm93IG5ldyB1KFwiaW52YWxpZC1hdXRoLWV2ZW50XCIpO2lmKHRoaXMuZyYmIXRoaXMuZil0aHJvdyBuZXcgdShcImludmFsaWQtYXV0aC1ldmVudFwiKTt9ZWxzZSB0aHJvdyBuZXcgdShcImludmFsaWQtYXV0aC1ldmVudFwiKTt9b2gucHJvdG90eXBlLmdldFVpZD1mdW5jdGlvbigpe3ZhciBhPVtdO2EucHVzaCh0aGlzLmMpO3RoaXMuYiYmYS5wdXNoKHRoaXMuYik7dGhpcy5mJiZhLnB1c2godGhpcy5mKTt0aGlzLmgmJmEucHVzaCh0aGlzLmgpO3JldHVybiBhLmpvaW4oXCItXCIpfTtvaC5wcm90b3R5cGUuUz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmh9O1xub2gucHJvdG90eXBlLnY9ZnVuY3Rpb24oKXtyZXR1cm57dHlwZTp0aGlzLmMsZXZlbnRJZDp0aGlzLmIsdXJsUmVzcG9uc2U6dGhpcy5nLHNlc3Npb25JZDp0aGlzLmYscG9zdEJvZHk6dGhpcy5pLHRlbmFudElkOnRoaXMuaCxlcnJvcjp0aGlzLmEmJnRoaXMuYS52KCl9fTtmdW5jdGlvbiBwaChhKXthPWF8fHt9O3JldHVybiBhLnR5cGU/bmV3IG9oKGEudHlwZSxhLmV2ZW50SWQsYS51cmxSZXNwb25zZSxhLnNlc3Npb25JZCxhLmVycm9yJiZ3YShhLmVycm9yKSxhLnBvc3RCb2R5LGEudGVuYW50SWQpOm51bGx9Oy8qXG5cbiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuXG4gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuZnVuY3Rpb24gcWgoKXt0aGlzLmI9bnVsbDt0aGlzLmE9W119dmFyIHJoPW51bGw7ZnVuY3Rpb24gc2goYSl7dmFyIGI9cmg7Yi5hLnB1c2goYSk7Yi5ifHwoYi5iPWZ1bmN0aW9uKGMpe2Zvcih2YXIgZD0wO2Q8Yi5hLmxlbmd0aDtkKyspYi5hW2RdKGMpfSxhPUooXCJ1bml2ZXJzYWxMaW5rcy5zdWJzY3JpYmVcIixsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmYShudWxsLGIuYikpfTtmdW5jdGlvbiB0aChhKXt2YXIgYj1cInVuYXV0aG9yaXplZC1kb21haW5cIixjPXZvaWQgMCxkPVpkKGEpO2E9ZC5iO2Q9ZC5mO1wiY2hyb21lLWV4dGVuc2lvblwiPT1kP2M9TWIoXCJUaGlzIGNocm9tZSBleHRlbnNpb24gSUQgKGNocm9tZS1leHRlbnNpb246Ly8lcykgaXMgbm90IGF1dGhvcml6ZWQgdG8gcnVuIHRoaXMgb3BlcmF0aW9uLiBBZGQgaXQgdG8gdGhlIE9BdXRoIHJlZGlyZWN0IGRvbWFpbnMgbGlzdCBpbiB0aGUgRmlyZWJhc2UgY29uc29sZSAtPiBBdXRoIHNlY3Rpb24gLT4gU2lnbiBpbiBtZXRob2QgdGFiLlwiLGEpOlwiaHR0cFwiPT1kfHxcImh0dHBzXCI9PWQ/Yz1NYihcIlRoaXMgZG9tYWluICglcykgaXMgbm90IGF1dGhvcml6ZWQgdG8gcnVuIHRoaXMgb3BlcmF0aW9uLiBBZGQgaXQgdG8gdGhlIE9BdXRoIHJlZGlyZWN0IGRvbWFpbnMgbGlzdCBpbiB0aGUgRmlyZWJhc2UgY29uc29sZSAtPiBBdXRoIHNlY3Rpb24gLT4gU2lnbiBpbiBtZXRob2QgdGFiLlwiLGEpOmI9XCJvcGVyYXRpb24tbm90LXN1cHBvcnRlZC1pbi10aGlzLWVudmlyb25tZW50XCI7XG51LmNhbGwodGhpcyxiLGMpfXQodGgsdSk7ZnVuY3Rpb24gdWgoYSxiLGMpe3UuY2FsbCh0aGlzLGEsYyk7YT1ifHx7fTthLkdiJiZLKHRoaXMsXCJlbWFpbFwiLGEuR2IpO2EuZGEmJksodGhpcyxcInBob25lTnVtYmVyXCIsYS5kYSk7YS5jcmVkZW50aWFsJiZLKHRoaXMsXCJjcmVkZW50aWFsXCIsYS5jcmVkZW50aWFsKTthLldiJiZLKHRoaXMsXCJ0ZW5hbnRJZFwiLGEuV2IpfXQodWgsdSk7dWgucHJvdG90eXBlLnY9ZnVuY3Rpb24oKXt2YXIgYT17Y29kZTp0aGlzLmNvZGUsbWVzc2FnZTp0aGlzLm1lc3NhZ2V9O3RoaXMuZW1haWwmJihhLmVtYWlsPXRoaXMuZW1haWwpO3RoaXMucGhvbmVOdW1iZXImJihhLnBob25lTnVtYmVyPXRoaXMucGhvbmVOdW1iZXIpO3RoaXMudGVuYW50SWQmJihhLnRlbmFudElkPXRoaXMudGVuYW50SWQpO3ZhciBiPXRoaXMuY3JlZGVudGlhbCYmdGhpcy5jcmVkZW50aWFsLnYoKTtiJiZCKGEsYik7cmV0dXJuIGF9O3VoLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52KCl9O1xuZnVuY3Rpb24gdmgoYSl7aWYoYS5jb2RlKXt2YXIgYj1hLmNvZGV8fFwiXCI7MD09Yi5pbmRleE9mKHVhKSYmKGI9Yi5zdWJzdHJpbmcodWEubGVuZ3RoKSk7dmFyIGM9e2NyZWRlbnRpYWw6bWgoYSksV2I6YS50ZW5hbnRJZH07aWYoYS5lbWFpbCljLkdiPWEuZW1haWw7ZWxzZSBpZihhLnBob25lTnVtYmVyKWMuZGE9YS5waG9uZU51bWJlcjtlbHNlIGlmKCFjLmNyZWRlbnRpYWwpcmV0dXJuIG5ldyB1KGIsYS5tZXNzYWdlfHx2b2lkIDApO3JldHVybiBuZXcgdWgoYixjLGEubWVzc2FnZSl9cmV0dXJuIG51bGx9O2Z1bmN0aW9uIHdoKCl7fXdoLnByb3RvdHlwZS5jPW51bGw7ZnVuY3Rpb24geGgoYSl7cmV0dXJuIGEuY3x8KGEuYz1hLmIoKSl9O3ZhciB5aDtmdW5jdGlvbiB6aCgpe310KHpoLHdoKTt6aC5wcm90b3R5cGUuYT1mdW5jdGlvbigpe3ZhciBhPUFoKHRoaXMpO3JldHVybiBhP25ldyBBY3RpdmVYT2JqZWN0KGEpOm5ldyBYTUxIdHRwUmVxdWVzdH07emgucHJvdG90eXBlLmI9ZnVuY3Rpb24oKXt2YXIgYT17fTtBaCh0aGlzKSYmKGFbMF09ITAsYVsxXT0hMCk7cmV0dXJuIGF9O1xuZnVuY3Rpb24gQWgoYSl7aWYoIWEuZiYmXCJ1bmRlZmluZWRcIj09dHlwZW9mIFhNTEh0dHBSZXF1ZXN0JiZcInVuZGVmaW5lZFwiIT10eXBlb2YgQWN0aXZlWE9iamVjdCl7Zm9yKHZhciBiPVtcIk1TWE1MMi5YTUxIVFRQLjYuMFwiLFwiTVNYTUwyLlhNTEhUVFAuMy4wXCIsXCJNU1hNTDIuWE1MSFRUUFwiLFwiTWljcm9zb2Z0LlhNTEhUVFBcIl0sYz0wO2M8Yi5sZW5ndGg7YysrKXt2YXIgZD1iW2NdO3RyeXtyZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoZCksYS5mPWR9Y2F0Y2goZSl7fX10aHJvdyBFcnJvcihcIkNvdWxkIG5vdCBjcmVhdGUgQWN0aXZlWE9iamVjdC4gQWN0aXZlWCBtaWdodCBiZSBkaXNhYmxlZCwgb3IgTVNYTUwgbWlnaHQgbm90IGJlIGluc3RhbGxlZFwiKTt9cmV0dXJuIGEuZn15aD1uZXcgemg7ZnVuY3Rpb24gQmgoKXt9dChCaCx3aCk7QmgucHJvdG90eXBlLmE9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgWE1MSHR0cFJlcXVlc3Q7aWYoXCJ3aXRoQ3JlZGVudGlhbHNcImluIGEpcmV0dXJuIGE7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFhEb21haW5SZXF1ZXN0KXJldHVybiBuZXcgQ2g7dGhyb3cgRXJyb3IoXCJVbnN1cHBvcnRlZCBicm93c2VyXCIpO307QmgucHJvdG90eXBlLmI9ZnVuY3Rpb24oKXtyZXR1cm57fX07XG5mdW5jdGlvbiBDaCgpe3RoaXMuYT1uZXcgWERvbWFpblJlcXVlc3Q7dGhpcy5yZWFkeVN0YXRlPTA7dGhpcy5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbDt0aGlzLnJlc3BvbnNlVHlwZT10aGlzLnJlc3BvbnNlVGV4dD10aGlzLnJlc3BvbnNlPVwiXCI7dGhpcy5zdGF0dXM9LTE7dGhpcy5zdGF0dXNUZXh0PVwiXCI7dGhpcy5hLm9ubG9hZD1yKHRoaXMub2MsdGhpcyk7dGhpcy5hLm9uZXJyb3I9cih0aGlzLlBiLHRoaXMpO3RoaXMuYS5vbnByb2dyZXNzPXIodGhpcy5wYyx0aGlzKTt0aGlzLmEub250aW1lb3V0PXIodGhpcy50Yyx0aGlzKX1rPUNoLnByb3RvdHlwZTtrLm9wZW49ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGwhPWMmJiFjKXRocm93IEVycm9yKFwiT25seSBhc3luYyByZXF1ZXN0cyBhcmUgc3VwcG9ydGVkLlwiKTt0aGlzLmEub3BlbihhLGIpfTtcbmsuc2VuZD1mdW5jdGlvbihhKXtpZihhKWlmKFwic3RyaW5nXCI9PXR5cGVvZiBhKXRoaXMuYS5zZW5kKGEpO2Vsc2UgdGhyb3cgRXJyb3IoXCJPbmx5IHN0cmluZyBkYXRhIGlzIHN1cHBvcnRlZFwiKTtlbHNlIHRoaXMuYS5zZW5kKCl9O2suYWJvcnQ9ZnVuY3Rpb24oKXt0aGlzLmEuYWJvcnQoKX07ay5zZXRSZXF1ZXN0SGVhZGVyPWZ1bmN0aW9uKCl7fTtrLmdldFJlc3BvbnNlSGVhZGVyPWZ1bmN0aW9uKGEpe3JldHVyblwiY29udGVudC10eXBlXCI9PWEudG9Mb3dlckNhc2UoKT90aGlzLmEuY29udGVudFR5cGU6XCJcIn07ay5vYz1mdW5jdGlvbigpe3RoaXMuc3RhdHVzPTIwMDt0aGlzLnJlc3BvbnNlPXRoaXMucmVzcG9uc2VUZXh0PXRoaXMuYS5yZXNwb25zZVRleHQ7RGgodGhpcyw0KX07ay5QYj1mdW5jdGlvbigpe3RoaXMuc3RhdHVzPTUwMDt0aGlzLnJlc3BvbnNlPXRoaXMucmVzcG9uc2VUZXh0PVwiXCI7RGgodGhpcyw0KX07ay50Yz1mdW5jdGlvbigpe3RoaXMuUGIoKX07XG5rLnBjPWZ1bmN0aW9uKCl7dGhpcy5zdGF0dXM9MjAwO0RoKHRoaXMsMSl9O2Z1bmN0aW9uIERoKGEsYil7YS5yZWFkeVN0YXRlPWI7aWYoYS5vbnJlYWR5c3RhdGVjaGFuZ2UpYS5vbnJlYWR5c3RhdGVjaGFuZ2UoKX1rLmdldEFsbFJlc3BvbnNlSGVhZGVycz1mdW5jdGlvbigpe3JldHVyblwiY29udGVudC10eXBlOiBcIit0aGlzLmEuY29udGVudFR5cGV9O2Z1bmN0aW9uIEVoKGEsYixjKXt0aGlzLnJlc2V0KGEsYixjLHZvaWQgMCx2b2lkIDApfUVoLnByb3RvdHlwZS5hPW51bGw7dmFyIEZoPTA7RWgucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKGEsYixjLGQsZSl7XCJudW1iZXJcIj09dHlwZW9mIGV8fEZoKys7ZHx8dGEoKTtkZWxldGUgdGhpcy5hfTtmdW5jdGlvbiBHaChhKXt0aGlzLmY9YTt0aGlzLmI9dGhpcy5jPXRoaXMuYT1udWxsfWZ1bmN0aW9uIEhoKGEsYil7dGhpcy5uYW1lPWE7dGhpcy52YWx1ZT1ifUhoLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5hbWV9O3ZhciBJaD1uZXcgSGgoXCJTRVZFUkVcIiwxRTMpLEpoPW5ldyBIaChcIldBUk5JTkdcIiw5MDApLEtoPW5ldyBIaChcIkNPTkZJR1wiLDcwMCksTGg9bmV3IEhoKFwiRklORVwiLDUwMCk7ZnVuY3Rpb24gTWgoYSl7aWYoYS5jKXJldHVybiBhLmM7aWYoYS5hKXJldHVybiBNaChhLmEpO0RhKFwiUm9vdCBsb2dnZXIgaGFzIG5vIGxldmVsIHNldC5cIik7cmV0dXJuIG51bGx9R2gucHJvdG90eXBlLmxvZz1mdW5jdGlvbihhLGIsYyl7aWYoYS52YWx1ZT49TWgodGhpcykudmFsdWUpZm9yKG4oYikmJihiPWIoKSksYT1uZXcgRWgoYSxTdHJpbmcoYiksdGhpcy5mKSxjJiYoYS5hPWMpLGM9dGhpcztjOyljPWMuYX07dmFyIE5oPXt9LE9oPW51bGw7XG5mdW5jdGlvbiBQaChhKXtPaHx8KE9oPW5ldyBHaChcIlwiKSxOaFtcIlwiXT1PaCxPaC5jPUtoKTt2YXIgYjtpZighKGI9TmhbYV0pKXtiPW5ldyBHaChhKTt2YXIgYz1hLmxhc3RJbmRleE9mKFwiLlwiKSxkPWEuc3Vic3RyKGMrMSk7Yz1QaChhLnN1YnN0cigwLGMpKTtjLmJ8fChjLmI9e30pO2MuYltkXT1iO2IuYT1jO05oW2FdPWJ9cmV0dXJuIGJ9O2Z1bmN0aW9uIFFoKGEsYil7YSYmYS5sb2coTGgsYix2b2lkIDApfTtmdW5jdGlvbiBSaChhKXt0aGlzLmY9YX10KFJoLHdoKTtSaC5wcm90b3R5cGUuYT1mdW5jdGlvbigpe3JldHVybiBuZXcgU2godGhpcy5mKX07UmgucHJvdG90eXBlLmI9ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGF9fSh7fSk7ZnVuY3Rpb24gU2goYSl7Ry5jYWxsKHRoaXMpO3RoaXMucz1hO3RoaXMucmVhZHlTdGF0ZT1UaDt0aGlzLnN0YXR1cz0wO3RoaXMucmVzcG9uc2VUeXBlPXRoaXMucmVzcG9uc2VUZXh0PXRoaXMucmVzcG9uc2U9dGhpcy5zdGF0dXNUZXh0PVwiXCI7dGhpcy5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbDt0aGlzLmk9bmV3IEhlYWRlcnM7dGhpcy5iPW51bGw7dGhpcy5tPVwiR0VUXCI7dGhpcy5nPVwiXCI7dGhpcy5hPSExO3RoaXMuaD1QaChcImdvb2cubmV0LkZldGNoWG1sSHR0cFwiKTt0aGlzLmw9dGhpcy5jPXRoaXMuZj1udWxsfXQoU2gsRyk7dmFyIFRoPTA7az1TaC5wcm90b3R5cGU7XG5rLm9wZW49ZnVuY3Rpb24oYSxiKXtpZih0aGlzLnJlYWR5U3RhdGUhPVRoKXRocm93IHRoaXMuYWJvcnQoKSxFcnJvcihcIkVycm9yIHJlb3BlbmluZyBhIGNvbm5lY3Rpb25cIik7dGhpcy5tPWE7dGhpcy5nPWI7dGhpcy5yZWFkeVN0YXRlPTE7VWgodGhpcyl9O2suc2VuZD1mdW5jdGlvbihhKXtpZigxIT10aGlzLnJlYWR5U3RhdGUpdGhyb3cgdGhpcy5hYm9ydCgpLEVycm9yKFwibmVlZCB0byBjYWxsIG9wZW4oKSBmaXJzdC4gXCIpO3RoaXMuYT0hMDt2YXIgYj17aGVhZGVyczp0aGlzLmksbWV0aG9kOnRoaXMubSxjcmVkZW50aWFsczp2b2lkIDAsY2FjaGU6dm9pZCAwfTthJiYoYi5ib2R5PWEpO3RoaXMucy5mZXRjaChuZXcgUmVxdWVzdCh0aGlzLmcsYikpLnRoZW4odGhpcy5zYy5iaW5kKHRoaXMpLHRoaXMuU2EuYmluZCh0aGlzKSl9O1xuay5hYm9ydD1mdW5jdGlvbigpe3RoaXMucmVzcG9uc2U9dGhpcy5yZXNwb25zZVRleHQ9XCJcIjt0aGlzLmk9bmV3IEhlYWRlcnM7dGhpcy5zdGF0dXM9MDt0aGlzLmMmJnRoaXMuYy5jYW5jZWwoXCJSZXF1ZXN0IHdhcyBhYm9ydGVkLlwiKTsxPD10aGlzLnJlYWR5U3RhdGUmJnRoaXMuYSYmNCE9dGhpcy5yZWFkeVN0YXRlJiYodGhpcy5hPSExLFZoKHRoaXMsITEpKTt0aGlzLnJlYWR5U3RhdGU9VGh9O1xuay5zYz1mdW5jdGlvbihhKXt0aGlzLmEmJih0aGlzLmY9YSx0aGlzLmJ8fCh0aGlzLmI9YS5oZWFkZXJzLHRoaXMucmVhZHlTdGF0ZT0yLFVoKHRoaXMpKSx0aGlzLmEmJih0aGlzLnJlYWR5U3RhdGU9MyxVaCh0aGlzKSx0aGlzLmEmJihcImFycmF5YnVmZmVyXCI9PT10aGlzLnJlc3BvbnNlVHlwZT9hLmFycmF5QnVmZmVyKCkudGhlbih0aGlzLnFjLmJpbmQodGhpcyksdGhpcy5TYS5iaW5kKHRoaXMpKTpcInVuZGVmaW5lZFwiIT09dHlwZW9mIGwuUmVhZGFibGVTdHJlYW0mJlwiYm9keVwiaW4gYT8odGhpcy5yZXNwb25zZT10aGlzLnJlc3BvbnNlVGV4dD1cIlwiLHRoaXMuYz1hLmJvZHkuZ2V0UmVhZGVyKCksdGhpcy5sPW5ldyBUZXh0RGVjb2RlcixXaCh0aGlzKSk6YS50ZXh0KCkudGhlbih0aGlzLnJjLmJpbmQodGhpcyksdGhpcy5TYS5iaW5kKHRoaXMpKSkpKX07ZnVuY3Rpb24gV2goYSl7YS5jLnJlYWQoKS50aGVuKGEubmMuYmluZChhKSkuY2F0Y2goYS5TYS5iaW5kKGEpKX1cbmsubmM9ZnVuY3Rpb24oYSl7aWYodGhpcy5hKXt2YXIgYj10aGlzLmwuZGVjb2RlKGEudmFsdWU/YS52YWx1ZTpuZXcgVWludDhBcnJheSgwKSx7c3RyZWFtOiFhLmRvbmV9KTtiJiYodGhpcy5yZXNwb25zZT10aGlzLnJlc3BvbnNlVGV4dCs9Yik7YS5kb25lP1ZoKHRoaXMsITApOlVoKHRoaXMpOzM9PXRoaXMucmVhZHlTdGF0ZSYmV2godGhpcyl9fTtrLnJjPWZ1bmN0aW9uKGEpe3RoaXMuYSYmKHRoaXMucmVzcG9uc2U9dGhpcy5yZXNwb25zZVRleHQ9YSxWaCh0aGlzLCEwKSl9O2sucWM9ZnVuY3Rpb24oYSl7dGhpcy5hJiYodGhpcy5yZXNwb25zZT1hLFZoKHRoaXMsITApKX07ay5TYT1mdW5jdGlvbihhKXt2YXIgYj10aGlzLmg7YiYmYi5sb2coSmgsXCJGYWlsZWQgdG8gZmV0Y2ggdXJsIFwiK3RoaXMuZyxhIGluc3RhbmNlb2YgRXJyb3I/YTpFcnJvcihhKSk7dGhpcy5hJiZWaCh0aGlzLCEwKX07XG5mdW5jdGlvbiBWaChhLGIpe2ImJmEuZiYmKGEuc3RhdHVzPWEuZi5zdGF0dXMsYS5zdGF0dXNUZXh0PWEuZi5zdGF0dXNUZXh0KTthLnJlYWR5U3RhdGU9NDthLmY9bnVsbDthLmM9bnVsbDthLmw9bnVsbDtVaChhKX1rLnNldFJlcXVlc3RIZWFkZXI9ZnVuY3Rpb24oYSxiKXt0aGlzLmkuYXBwZW5kKGEsYil9O2suZ2V0UmVzcG9uc2VIZWFkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYj90aGlzLmIuZ2V0KGEudG9Mb3dlckNhc2UoKSl8fFwiXCI6KChhPXRoaXMuaCkmJmEubG9nKEpoLFwiQXR0ZW1wdGluZyB0byBnZXQgcmVzcG9uc2UgaGVhZGVyIGJ1dCBubyBoZWFkZXJzIGhhdmUgYmVlbiByZWNlaXZlZCBmb3IgdXJsOiBcIit0aGlzLmcsdm9pZCAwKSxcIlwiKX07XG5rLmdldEFsbFJlc3BvbnNlSGVhZGVycz1mdW5jdGlvbigpe2lmKCF0aGlzLmIpe3ZhciBhPXRoaXMuaDthJiZhLmxvZyhKaCxcIkF0dGVtcHRpbmcgdG8gZ2V0IGFsbCByZXNwb25zZSBoZWFkZXJzIGJ1dCBubyBoZWFkZXJzIGhhdmUgYmVlbiByZWNlaXZlZCBmb3IgdXJsOiBcIit0aGlzLmcsdm9pZCAwKTtyZXR1cm5cIlwifWE9W107Zm9yKHZhciBiPXRoaXMuYi5lbnRyaWVzKCksYz1iLm5leHQoKTshYy5kb25lOyljPWMudmFsdWUsYS5wdXNoKGNbMF0rXCI6IFwiK2NbMV0pLGM9Yi5uZXh0KCk7cmV0dXJuIGEuam9pbihcIlxcclxcblwiKX07ZnVuY3Rpb24gVWgoYSl7YS5vbnJlYWR5c3RhdGVjaGFuZ2UmJmEub25yZWFkeXN0YXRlY2hhbmdlLmNhbGwoYSl9O2Z1bmN0aW9uIFhoKGEpe0cuY2FsbCh0aGlzKTt0aGlzLmhlYWRlcnM9bmV3IEZkO3RoaXMuRD1hfHxudWxsO3RoaXMuYz0hMTt0aGlzLkI9dGhpcy5hPW51bGw7dGhpcy5oPXRoaXMuUD10aGlzLmw9XCJcIjt0aGlzLmY9dGhpcy5PPXRoaXMuaT10aGlzLk49ITE7dGhpcy5nPTA7dGhpcy5zPW51bGw7dGhpcy5tPVloO3RoaXMudz10aGlzLlI9ITF9dChYaCxHKTt2YXIgWWg9XCJcIjtYaC5wcm90b3R5cGUuYj1QaChcImdvb2cubmV0LlhocklvXCIpO3ZhciBaaD0vXmh0dHBzPyQvaSwkaD1bXCJQT1NUXCIsXCJQVVRcIl07XG5mdW5jdGlvbiBhaShhLGIsYyxkLGUpe2lmKGEuYSl0aHJvdyBFcnJvcihcIltnb29nLm5ldC5YaHJJb10gT2JqZWN0IGlzIGFjdGl2ZSB3aXRoIGFub3RoZXIgcmVxdWVzdD1cIithLmwrXCI7IG5ld1VyaT1cIitiKTtjPWM/Yy50b1VwcGVyQ2FzZSgpOlwiR0VUXCI7YS5sPWI7YS5oPVwiXCI7YS5QPWM7YS5OPSExO2EuYz0hMDthLmE9YS5EP2EuRC5hKCk6eWguYSgpO2EuQj1hLkQ/eGgoYS5EKTp4aCh5aCk7YS5hLm9ucmVhZHlzdGF0ZWNoYW5nZT1yKGEuU2IsYSk7dHJ5e1FoKGEuYixiaShhLFwiT3BlbmluZyBYaHJcIikpLGEuTz0hMCxhLmEub3BlbihjLFN0cmluZyhiKSwhMCksYS5PPSExfWNhdGNoKGcpe1FoKGEuYixiaShhLFwiRXJyb3Igb3BlbmluZyBYaHI6IFwiK2cubWVzc2FnZSkpO2NpKGEsZyk7cmV0dXJufWI9ZHx8XCJcIjt2YXIgZj1uZXcgRmQoYS5oZWFkZXJzKTtlJiZFZChlLGZ1bmN0aW9uKGcsaCl7Zi5zZXQoaCxnKX0pO2U9UWEoZi5YKCkpO2Q9bC5Gb3JtRGF0YSYmYiBpbnN0YW5jZW9mXG5sLkZvcm1EYXRhOyFTYSgkaCxjKXx8ZXx8ZHx8Zi5zZXQoXCJDb250ZW50LVR5cGVcIixcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04XCIpO2YuZm9yRWFjaChmdW5jdGlvbihnLGgpe3RoaXMuYS5zZXRSZXF1ZXN0SGVhZGVyKGgsZyl9LGEpO2EubSYmKGEuYS5yZXNwb25zZVR5cGU9YS5tKTtcIndpdGhDcmVkZW50aWFsc1wiaW4gYS5hJiZhLmEud2l0aENyZWRlbnRpYWxzIT09YS5SJiYoYS5hLndpdGhDcmVkZW50aWFscz1hLlIpO3RyeXtkaShhKSwwPGEuZyYmKGEudz1laShhLmEpLFFoKGEuYixiaShhLFwiV2lsbCBhYm9ydCBhZnRlciBcIithLmcrXCJtcyBpZiBpbmNvbXBsZXRlLCB4aHIyIFwiK2EudykpLGEudz8oYS5hLnRpbWVvdXQ9YS5nLGEuYS5vbnRpbWVvdXQ9cihhLkthLGEpKTphLnM9QWQoYS5LYSxhLmcsYSkpLFFoKGEuYixiaShhLFwiU2VuZGluZyByZXF1ZXN0XCIpKSxhLmk9ITAsYS5hLnNlbmQoYiksYS5pPSExfWNhdGNoKGcpe1FoKGEuYixcbmJpKGEsXCJTZW5kIGVycm9yOiBcIitnLm1lc3NhZ2UpKSxjaShhLGcpfX1mdW5jdGlvbiBlaShhKXtyZXR1cm4gU2ImJmJjKDkpJiZcIm51bWJlclwiPT09dHlwZW9mIGEudGltZW91dCYmdm9pZCAwIT09YS5vbnRpbWVvdXR9ZnVuY3Rpb24gUmEoYSl7cmV0dXJuXCJjb250ZW50LXR5cGVcIj09YS50b0xvd2VyQ2FzZSgpfWs9WGgucHJvdG90eXBlO2suS2E9ZnVuY3Rpb24oKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgaGEmJnRoaXMuYSYmKHRoaXMuaD1cIlRpbWVkIG91dCBhZnRlciBcIit0aGlzLmcrXCJtcywgYWJvcnRpbmdcIixRaCh0aGlzLmIsYmkodGhpcyx0aGlzLmgpKSx0aGlzLmRpc3BhdGNoRXZlbnQoXCJ0aW1lb3V0XCIpLHRoaXMuYWJvcnQoOCkpfTtmdW5jdGlvbiBjaShhLGIpe2EuYz0hMTthLmEmJihhLmY9ITAsYS5hLmFib3J0KCksYS5mPSExKTthLmg9YjtmaShhKTtnaShhKX1cbmZ1bmN0aW9uIGZpKGEpe2EuTnx8KGEuTj0hMCxhLmRpc3BhdGNoRXZlbnQoXCJjb21wbGV0ZVwiKSxhLmRpc3BhdGNoRXZlbnQoXCJlcnJvclwiKSl9ay5hYm9ydD1mdW5jdGlvbigpe3RoaXMuYSYmdGhpcy5jJiYoUWgodGhpcy5iLGJpKHRoaXMsXCJBYm9ydGluZ1wiKSksdGhpcy5jPSExLHRoaXMuZj0hMCx0aGlzLmEuYWJvcnQoKSx0aGlzLmY9ITEsdGhpcy5kaXNwYXRjaEV2ZW50KFwiY29tcGxldGVcIiksdGhpcy5kaXNwYXRjaEV2ZW50KFwiYWJvcnRcIiksZ2kodGhpcykpfTtrLkJhPWZ1bmN0aW9uKCl7dGhpcy5hJiYodGhpcy5jJiYodGhpcy5jPSExLHRoaXMuZj0hMCx0aGlzLmEuYWJvcnQoKSx0aGlzLmY9ITEpLGdpKHRoaXMsITApKTtYaC5aYS5CYS5jYWxsKHRoaXMpfTtrLlNiPWZ1bmN0aW9uKCl7dGhpcy53YXx8KHRoaXMuT3x8dGhpcy5pfHx0aGlzLmY/aGkodGhpcyk6dGhpcy5IYygpKX07ay5IYz1mdW5jdGlvbigpe2hpKHRoaXMpfTtcbmZ1bmN0aW9uIGhpKGEpe2lmKGEuYyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGhhKWlmKGEuQlsxXSYmND09aWkoYSkmJjI9PWppKGEpKVFoKGEuYixiaShhLFwiTG9jYWwgcmVxdWVzdCBlcnJvciBkZXRlY3RlZCBhbmQgaWdub3JlZFwiKSk7ZWxzZSBpZihhLmkmJjQ9PWlpKGEpKUFkKGEuU2IsMCxhKTtlbHNlIGlmKGEuZGlzcGF0Y2hFdmVudChcInJlYWR5c3RhdGVjaGFuZ2VcIiksND09aWkoYSkpe1FoKGEuYixiaShhLFwiUmVxdWVzdCBjb21wbGV0ZVwiKSk7YS5jPSExO3RyeXt2YXIgYj1qaShhKTthOnN3aXRjaChiKXtjYXNlIDIwMDpjYXNlIDIwMTpjYXNlIDIwMjpjYXNlIDIwNDpjYXNlIDIwNjpjYXNlIDMwNDpjYXNlIDEyMjM6dmFyIGM9ITA7YnJlYWsgYTtkZWZhdWx0OmM9ITF9dmFyIGQ7aWYoIShkPWMpKXt2YXIgZTtpZihlPTA9PT1iKXt2YXIgZj1TdHJpbmcoYS5sKS5tYXRjaChJZClbMV18fG51bGw7aWYoIWYmJmwuc2VsZiYmbC5zZWxmLmxvY2F0aW9uKXt2YXIgZz1sLnNlbGYubG9jYXRpb24ucHJvdG9jb2w7XG5mPWcuc3Vic3RyKDAsZy5sZW5ndGgtMSl9ZT0hWmgudGVzdChmP2YudG9Mb3dlckNhc2UoKTpcIlwiKX1kPWV9aWYoZClhLmRpc3BhdGNoRXZlbnQoXCJjb21wbGV0ZVwiKSxhLmRpc3BhdGNoRXZlbnQoXCJzdWNjZXNzXCIpO2Vsc2V7dHJ5e3ZhciBoPTI8aWkoYSk/YS5hLnN0YXR1c1RleHQ6XCJcIn1jYXRjaChtKXtRaChhLmIsXCJDYW4gbm90IGdldCBzdGF0dXM6IFwiK20ubWVzc2FnZSksaD1cIlwifWEuaD1oK1wiIFtcIitqaShhKStcIl1cIjtmaShhKX19ZmluYWxseXtnaShhKX19fWZ1bmN0aW9uIGdpKGEsYil7aWYoYS5hKXtkaShhKTt2YXIgYz1hLmEsZD1hLkJbMF0/a2E6bnVsbDthLmE9bnVsbDthLkI9bnVsbDtifHxhLmRpc3BhdGNoRXZlbnQoXCJyZWFkeVwiKTt0cnl7Yy5vbnJlYWR5c3RhdGVjaGFuZ2U9ZH1jYXRjaChlKXsoYT1hLmIpJiZhLmxvZyhJaCxcIlByb2JsZW0gZW5jb3VudGVyZWQgcmVzZXR0aW5nIG9ucmVhZHlzdGF0ZWNoYW5nZTogXCIrZS5tZXNzYWdlLHZvaWQgMCl9fX1cbmZ1bmN0aW9uIGRpKGEpe2EuYSYmYS53JiYoYS5hLm9udGltZW91dD1udWxsKTthLnMmJihsLmNsZWFyVGltZW91dChhLnMpLGEucz1udWxsKX1mdW5jdGlvbiBpaShhKXtyZXR1cm4gYS5hP2EuYS5yZWFkeVN0YXRlOjB9ZnVuY3Rpb24gamkoYSl7dHJ5e3JldHVybiAyPGlpKGEpP2EuYS5zdGF0dXM6LTF9Y2F0Y2goYil7cmV0dXJuLTF9fWZ1bmN0aW9uIGtpKGEpe3RyeXtyZXR1cm4gYS5hP2EuYS5yZXNwb25zZVRleHQ6XCJcIn1jYXRjaChiKXtyZXR1cm4gUWgoYS5iLFwiQ2FuIG5vdCBnZXQgcmVzcG9uc2VUZXh0OiBcIitiLm1lc3NhZ2UpLFwiXCJ9fVxuay5nZXRSZXNwb25zZT1mdW5jdGlvbigpe3RyeXtpZighdGhpcy5hKXJldHVybiBudWxsO2lmKFwicmVzcG9uc2VcImluIHRoaXMuYSlyZXR1cm4gdGhpcy5hLnJlc3BvbnNlO3N3aXRjaCh0aGlzLm0pe2Nhc2UgWWg6Y2FzZSBcInRleHRcIjpyZXR1cm4gdGhpcy5hLnJlc3BvbnNlVGV4dDtjYXNlIFwiYXJyYXlidWZmZXJcIjppZihcIm1velJlc3BvbnNlQXJyYXlCdWZmZXJcImluIHRoaXMuYSlyZXR1cm4gdGhpcy5hLm1velJlc3BvbnNlQXJyYXlCdWZmZXJ9dmFyIGE9dGhpcy5iO2EmJmEubG9nKEloLFwiUmVzcG9uc2UgdHlwZSBcIit0aGlzLm0rXCIgaXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIGJyb3dzZXJcIix2b2lkIDApO3JldHVybiBudWxsfWNhdGNoKGIpe3JldHVybiBRaCh0aGlzLmIsXCJDYW4gbm90IGdldCByZXNwb25zZTogXCIrYi5tZXNzYWdlKSxudWxsfX07ZnVuY3Rpb24gYmkoYSxiKXtyZXR1cm4gYitcIiBbXCIrYS5QK1wiIFwiK2EubCtcIiBcIitqaShhKStcIl1cIn07LypcbiBQb3J0aW9ucyBvZiB0aGlzIGNvZGUgYXJlIGZyb20gTW9jaGlLaXQsIHJlY2VpdmVkIGJ5XG4gVGhlIENsb3N1cmUgQXV0aG9ycyB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIEFsbCBvdGhlciBjb2RlIGlzIENvcHlyaWdodFxuIDIwMDUtMjAwOSBUaGUgQ2xvc3VyZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuKi9cbmZ1bmN0aW9uIGxpKGEpe3ZhciBiPW1pO3RoaXMuZz1bXTt0aGlzLnc9Yjt0aGlzLnM9YXx8bnVsbDt0aGlzLmY9dGhpcy5hPSExO3RoaXMuYz12b2lkIDA7dGhpcy51PXRoaXMuQj10aGlzLmk9ITE7dGhpcy5oPTA7dGhpcy5iPW51bGw7dGhpcy5sPTB9bGkucHJvdG90eXBlLmNhbmNlbD1mdW5jdGlvbihhKXtpZih0aGlzLmEpdGhpcy5jIGluc3RhbmNlb2YgbGkmJnRoaXMuYy5jYW5jZWwoKTtlbHNle2lmKHRoaXMuYil7dmFyIGI9dGhpcy5iO2RlbGV0ZSB0aGlzLmI7YT9iLmNhbmNlbChhKTooYi5sLS0sMD49Yi5sJiZiLmNhbmNlbCgpKX10aGlzLnc/dGhpcy53LmNhbGwodGhpcy5zLHRoaXMpOnRoaXMudT0hMDt0aGlzLmF8fChhPW5ldyBuaSh0aGlzKSxvaSh0aGlzKSxwaSh0aGlzLCExLGEpKX19O2xpLnByb3RvdHlwZS5tPWZ1bmN0aW9uKGEsYil7dGhpcy5pPSExO3BpKHRoaXMsYSxiKX07ZnVuY3Rpb24gcGkoYSxiLGMpe2EuYT0hMDthLmM9YzthLmY9IWI7cWkoYSl9XG5mdW5jdGlvbiBvaShhKXtpZihhLmEpe2lmKCFhLnUpdGhyb3cgbmV3IHJpKGEpO2EudT0hMX19ZnVuY3Rpb24gc2koYSxiKXt0aShhLG51bGwsYix2b2lkIDApfWZ1bmN0aW9uIHRpKGEsYixjLGQpe2EuZy5wdXNoKFtiLGMsZF0pO2EuYSYmcWkoYSl9bGkucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZj1uZXcgRChmdW5jdGlvbihnLGgpe2Q9ZztlPWh9KTt0aSh0aGlzLGQsZnVuY3Rpb24oZyl7ZyBpbnN0YW5jZW9mIG5pP2YuY2FuY2VsKCk6ZShnKX0pO3JldHVybiBmLnRoZW4oYSxiLGMpfTtsaS5wcm90b3R5cGUuJGdvb2dfVGhlbmFibGU9ITA7ZnVuY3Rpb24gdWkoYSl7cmV0dXJuIFBhKGEuZyxmdW5jdGlvbihiKXtyZXR1cm4gbihiWzFdKX0pfVxuZnVuY3Rpb24gcWkoYSl7aWYoYS5oJiZhLmEmJnVpKGEpKXt2YXIgYj1hLmgsYz12aVtiXTtjJiYobC5jbGVhclRpbWVvdXQoYy5hKSxkZWxldGUgdmlbYl0pO2EuaD0wfWEuYiYmKGEuYi5sLS0sZGVsZXRlIGEuYik7Yj1hLmM7Zm9yKHZhciBkPWM9ITE7YS5nLmxlbmd0aCYmIWEuaTspe3ZhciBlPWEuZy5zaGlmdCgpLGY9ZVswXSxnPWVbMV07ZT1lWzJdO2lmKGY9YS5mP2c6Zil0cnl7dmFyIGg9Zi5jYWxsKGV8fGEucyxiKTt2b2lkIDAhPT1oJiYoYS5mPWEuZiYmKGg9PWJ8fGggaW5zdGFuY2VvZiBFcnJvciksYS5jPWI9aCk7aWYoQmEoYil8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBsLlByb21pc2UmJmIgaW5zdGFuY2VvZiBsLlByb21pc2UpZD0hMCxhLmk9ITB9Y2F0Y2gobSl7Yj1tLGEuZj0hMCx1aShhKXx8KGM9ITApfX1hLmM9YjtkJiYoaD1yKGEubSxhLCEwKSxkPXIoYS5tLGEsITEpLGIgaW5zdGFuY2VvZiBsaT8odGkoYixoLGQpLGIuQj0hMCk6Yi50aGVuKGgsZCkpO2MmJihiPVxubmV3IHdpKGIpLHZpW2IuYV09YixhLmg9Yi5hKX1mdW5jdGlvbiByaSgpe3cuY2FsbCh0aGlzKX10KHJpLHcpO3JpLnByb3RvdHlwZS5tZXNzYWdlPVwiRGVmZXJyZWQgaGFzIGFscmVhZHkgZmlyZWRcIjtyaS5wcm90b3R5cGUubmFtZT1cIkFscmVhZHlDYWxsZWRFcnJvclwiO2Z1bmN0aW9uIG5pKCl7dy5jYWxsKHRoaXMpfXQobmksdyk7bmkucHJvdG90eXBlLm1lc3NhZ2U9XCJEZWZlcnJlZCB3YXMgY2FuY2VsZWRcIjtuaS5wcm90b3R5cGUubmFtZT1cIkNhbmNlbGVkRXJyb3JcIjtmdW5jdGlvbiB3aShhKXt0aGlzLmE9bC5zZXRUaW1lb3V0KHIodGhpcy5jLHRoaXMpLDApO3RoaXMuYj1hfXdpLnByb3RvdHlwZS5jPWZ1bmN0aW9uKCl7ZGVsZXRlIHZpW3RoaXMuYV07dGhyb3cgdGhpcy5iO307dmFyIHZpPXt9O2Z1bmN0aW9uIHhpKGEpe3ZhciBiPXt9LGM9Yi5kb2N1bWVudHx8ZG9jdW1lbnQsZD12YihhKS50b1N0cmluZygpLGU9aWMoZG9jdW1lbnQsXCJTQ1JJUFRcIiksZj17VGI6ZSxLYTp2b2lkIDB9LGc9bmV3IGxpKGYpLGg9bnVsbCxtPW51bGwhPWIudGltZW91dD9iLnRpbWVvdXQ6NUUzOzA8bSYmKGg9d2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXt5aShlLCEwKTt2YXIgcD1uZXcgemkoQWksXCJUaW1lb3V0IHJlYWNoZWQgZm9yIGxvYWRpbmcgc2NyaXB0IFwiK2QpO29pKGcpO3BpKGcsITEscCl9LG0pLGYuS2E9aCk7ZS5vbmxvYWQ9ZS5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXtlLnJlYWR5U3RhdGUmJlwibG9hZGVkXCIhPWUucmVhZHlTdGF0ZSYmXCJjb21wbGV0ZVwiIT1lLnJlYWR5U3RhdGV8fCh5aShlLGIudWR8fCExLGgpLG9pKGcpLHBpKGcsITAsbnVsbCkpfTtlLm9uZXJyb3I9ZnVuY3Rpb24oKXt5aShlLCEwLGgpO3ZhciBwPW5ldyB6aShCaSxcIkVycm9yIHdoaWxlIGxvYWRpbmcgc2NyaXB0IFwiK1xuZCk7b2koZyk7cGkoZywhMSxwKX07Zj1iLmF0dHJpYnV0ZXN8fHt9O0IoZix7dHlwZTpcInRleHQvamF2YXNjcmlwdFwiLGNoYXJzZXQ6XCJVVEYtOFwifSk7ZmMoZSxmKTtMYihlLGEpO0NpKGMpLmFwcGVuZENoaWxkKGUpO3JldHVybiBnfWZ1bmN0aW9uIENpKGEpe3ZhciBiO3JldHVybihiPShhfHxkb2N1bWVudCkuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJIRUFEXCIpKSYmMCE9Yi5sZW5ndGg/YlswXTphLmRvY3VtZW50RWxlbWVudH1mdW5jdGlvbiBtaSgpe2lmKHRoaXMmJnRoaXMuVGIpe3ZhciBhPXRoaXMuVGI7YSYmXCJTQ1JJUFRcIj09YS50YWdOYW1lJiZ5aShhLCEwLHRoaXMuS2EpfX1cbmZ1bmN0aW9uIHlpKGEsYixjKXtudWxsIT1jJiZsLmNsZWFyVGltZW91dChjKTthLm9ubG9hZD1rYTthLm9uZXJyb3I9a2E7YS5vbnJlYWR5c3RhdGVjaGFuZ2U9a2E7YiYmd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXthJiZhLnBhcmVudE5vZGUmJmEucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChhKX0sMCl9dmFyIEJpPTAsQWk9MTtmdW5jdGlvbiB6aShhLGIpe3ZhciBjPVwiSnNsb2FkZXIgZXJyb3IgKGNvZGUgI1wiK2ErXCIpXCI7YiYmKGMrPVwiOiBcIitiKTt3LmNhbGwodGhpcyxjKTt0aGlzLmNvZGU9YX10KHppLHcpO2Z1bmN0aW9uIERpKGEpe3RoaXMuZj1hfXQoRGksd2gpO0RpLnByb3RvdHlwZS5hPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyB0aGlzLmZ9O0RpLnByb3RvdHlwZS5iPWZ1bmN0aW9uKCl7cmV0dXJue319O1xuZnVuY3Rpb24gRWkoYSxiLGMpe3RoaXMuYz1hO2E9Ynx8e307dGhpcy51PWEuc2VjdXJlVG9rZW5FbmRwb2ludHx8XCJodHRwczovL3NlY3VyZXRva2VuLmdvb2dsZWFwaXMuY29tL3YxL3Rva2VuXCI7dGhpcy5tPWEuc2VjdXJlVG9rZW5UaW1lb3V0fHxGaTt0aGlzLmc9a2IoYS5zZWN1cmVUb2tlbkhlYWRlcnN8fEdpKTt0aGlzLmg9YS5maXJlYmFzZUVuZHBvaW50fHxcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2lkZW50aXR5dG9vbGtpdC92My9yZWx5aW5ncGFydHkvXCI7dGhpcy5sPWEuaWRlbnRpdHlQbGF0Zm9ybUVuZHBvaW50fHxcImh0dHBzOi8vaWRlbnRpdHl0b29sa2l0Lmdvb2dsZWFwaXMuY29tL3YyL1wiO3RoaXMuaT1hLmZpcmViYXNlVGltZW91dHx8SGk7dGhpcy5hPWtiKGEuZmlyZWJhc2VIZWFkZXJzfHxJaSk7YyYmKHRoaXMuYVtcIlgtQ2xpZW50LVZlcnNpb25cIl09Yyx0aGlzLmdbXCJYLUNsaWVudC1WZXJzaW9uXCJdPWMpO2M9XCJOb2RlXCI9PUhlKCk7Yz1sLlhNTEh0dHBSZXF1ZXN0fHxcbmMmJmZpcmViYXNlLklOVEVSTkFMLm5vZGUmJmZpcmViYXNlLklOVEVSTkFMLm5vZGUuWE1MSHR0cFJlcXVlc3Q7aWYoIWMmJiFHZSgpKXRocm93IG5ldyB1KFwiaW50ZXJuYWwtZXJyb3JcIixcIlRoZSBYTUxIdHRwUmVxdWVzdCBjb21wYXRpYmlsaXR5IGxpYnJhcnkgd2FzIG5vdCBmb3VuZC5cIik7dGhpcy5mPXZvaWQgMDtHZSgpP3RoaXMuZj1uZXcgUmgoc2VsZik6SWUoKT90aGlzLmY9bmV3IERpKGMpOnRoaXMuZj1uZXcgQmg7dGhpcy5iPW51bGx9dmFyIEppLEFnPVwiaWRUb2tlblwiLEZpPW5ldyBXZSgzRTQsNkU0KSxHaT17XCJDb250ZW50LVR5cGVcIjpcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwifSxIaT1uZXcgV2UoM0U0LDZFNCksSWk9e1wiQ29udGVudC1UeXBlXCI6XCJhcHBsaWNhdGlvbi9qc29uXCJ9O2Z1bmN0aW9uIEtpKGEsYil7Yj9hLmFbXCJYLUZpcmViYXNlLUxvY2FsZVwiXT1iOmRlbGV0ZSBhLmFbXCJYLUZpcmViYXNlLUxvY2FsZVwiXX1cbmZ1bmN0aW9uIExpKGEsYil7Yj8oYS5hW1wiWC1DbGllbnQtVmVyc2lvblwiXT1iLGEuZ1tcIlgtQ2xpZW50LVZlcnNpb25cIl09Yik6KGRlbGV0ZSBhLmFbXCJYLUNsaWVudC1WZXJzaW9uXCJdLGRlbGV0ZSBhLmdbXCJYLUNsaWVudC1WZXJzaW9uXCJdKX1FaS5wcm90b3R5cGUuUz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmJ9O2Z1bmN0aW9uIE1pKGEsYixjLGQsZSxmLGcpe3JlKCl8fEdlKCk/YT1yKGEudyxhKTooSml8fChKaT1uZXcgRChmdW5jdGlvbihoLG0pe05pKGgsbSl9KSksYT1yKGEucyxhKSk7YShiLGMsZCxlLGYsZyl9XG5FaS5wcm90b3R5cGUudz1mdW5jdGlvbihhLGIsYyxkLGUsZil7aWYoR2UoKSYmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgbC5mZXRjaHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBsLkhlYWRlcnN8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgbC5SZXF1ZXN0KSl0aHJvdyBuZXcgdShcIm9wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnRcIixcImZldGNoLCBIZWFkZXJzIGFuZCBSZXF1ZXN0IG5hdGl2ZSBBUElzIG9yIGVxdWl2YWxlbnQgUG9seWZpbGxzIG11c3QgYmUgYXZhaWxhYmxlIHRvIHN1cHBvcnQgSFRUUCByZXF1ZXN0cyBmcm9tIGEgV29ya2VyIGVudmlyb25tZW50LlwiKTt2YXIgZz1uZXcgWGgodGhpcy5mKTtpZihmKXtnLmc9TWF0aC5tYXgoMCxmKTt2YXIgaD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Zy5kaXNwYXRjaEV2ZW50KFwidGltZW91dFwiKX0sZil9bWQoZyxcImNvbXBsZXRlXCIsZnVuY3Rpb24oKXtoJiZjbGVhclRpbWVvdXQoaCk7dmFyIG09bnVsbDt0cnl7bT1cbkpTT04ucGFyc2Uoa2kodGhpcykpfHxudWxsfWNhdGNoKHApe209bnVsbH1iJiZiKG0pfSk7c2QoZyxcInJlYWR5XCIsZnVuY3Rpb24oKXtoJiZjbGVhclRpbWVvdXQoaCk7U2ModGhpcyl9KTtzZChnLFwidGltZW91dFwiLGZ1bmN0aW9uKCl7aCYmY2xlYXJUaW1lb3V0KGgpO1NjKHRoaXMpO2ImJmIobnVsbCl9KTthaShnLGEsYyxkLGUpfTt2YXIgT2k9bmV3IG5iKG9iLFwiaHR0cHM6Ly9hcGlzLmdvb2dsZS5jb20vanMvY2xpZW50LmpzP29ubG9hZD0le29ubG9hZH1cIiksUGk9XCJfX2ZjYlwiK01hdGguZmxvb3IoMUU2Kk1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKCk7XG5mdW5jdGlvbiBOaShhLGIpe2lmKCgod2luZG93LmdhcGl8fHt9KS5jbGllbnR8fHt9KS5yZXF1ZXN0KWEoKTtlbHNle2xbUGldPWZ1bmN0aW9uKCl7KCh3aW5kb3cuZ2FwaXx8e30pLmNsaWVudHx8e30pLnJlcXVlc3Q/YSgpOmIoRXJyb3IoXCJDT1JTX1VOU1VQUE9SVEVEXCIpKX07dmFyIGM9d2IoT2kse29ubG9hZDpQaX0pO3NpKHhpKGMpLGZ1bmN0aW9uKCl7YihFcnJvcihcIkNPUlNfVU5TVVBQT1JURURcIikpfSl9fVxuRWkucHJvdG90eXBlLnM9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj10aGlzO0ppLnRoZW4oZnVuY3Rpb24oKXt3aW5kb3cuZ2FwaS5jbGllbnQuc2V0QXBpS2V5KGYuYyk7dmFyIGc9d2luZG93LmdhcGkuYXV0aC5nZXRUb2tlbigpO3dpbmRvdy5nYXBpLmF1dGguc2V0VG9rZW4obnVsbCk7d2luZG93LmdhcGkuY2xpZW50LnJlcXVlc3Qoe3BhdGg6YSxtZXRob2Q6Yyxib2R5OmQsaGVhZGVyczplLGF1dGhUeXBlOlwibm9uZVwiLGNhbGxiYWNrOmZ1bmN0aW9uKGgpe3dpbmRvdy5nYXBpLmF1dGguc2V0VG9rZW4oZyk7YiYmYihoKX19KX0pLm8oZnVuY3Rpb24oZyl7YiYmYih7ZXJyb3I6e21lc3NhZ2U6ZyYmZy5tZXNzYWdlfHxcIkNPUlNfVU5TVVBQT1JURURcIn19KX0pfTtcbmZ1bmN0aW9uIFFpKGEsYil7cmV0dXJuIG5ldyBEKGZ1bmN0aW9uKGMsZCl7XCJyZWZyZXNoX3Rva2VuXCI9PWIuZ3JhbnRfdHlwZSYmYi5yZWZyZXNoX3Rva2VufHxcImF1dGhvcml6YXRpb25fY29kZVwiPT1iLmdyYW50X3R5cGUmJmIuY29kZT9NaShhLGEudStcIj9rZXk9XCIrZW5jb2RlVVJJQ29tcG9uZW50KGEuYyksZnVuY3Rpb24oZSl7ZT9lLmVycm9yP2QoUmkoZSkpOmUuYWNjZXNzX3Rva2VuJiZlLnJlZnJlc2hfdG9rZW4/YyhlKTpkKG5ldyB1KFwiaW50ZXJuYWwtZXJyb3JcIikpOmQobmV3IHUoXCJuZXR3b3JrLXJlcXVlc3QtZmFpbGVkXCIpKX0sXCJQT1NUXCIsY2UoYikudG9TdHJpbmcoKSxhLmcsYS5tLmdldCgpKTpkKG5ldyB1KFwiaW50ZXJuYWwtZXJyb3JcIikpfSl9XG5mdW5jdGlvbiBTaShhLGIsYyxkLGUsZixnKXt2YXIgaD1aZChiK2MpO0goaCxcImtleVwiLGEuYyk7ZyYmSChoLFwiY2JcIix0YSgpLnRvU3RyaW5nKCkpO3ZhciBtPVwiR0VUXCI9PWQ7aWYobSlmb3IodmFyIHAgaW4gZSllLmhhc093blByb3BlcnR5KHApJiZIKGgscCxlW3BdKTtyZXR1cm4gbmV3IEQoZnVuY3Rpb24odixDKXtNaShhLGgudG9TdHJpbmcoKSxmdW5jdGlvbihBKXtBP0EuZXJyb3I/QyhSaShBLGZ8fHt9KSk6dihBKTpDKG5ldyB1KFwibmV0d29yay1yZXF1ZXN0LWZhaWxlZFwiKSl9LGQsbT92b2lkIDA6aGUoU2UoZSkpLGEuYSxhLmkuZ2V0KCkpfSl9ZnVuY3Rpb24gVGkoYSl7YT1hLmVtYWlsO2lmKFwic3RyaW5nXCIhPT10eXBlb2YgYXx8IUFlLnRlc3QoYSkpdGhyb3cgbmV3IHUoXCJpbnZhbGlkLWVtYWlsXCIpO31mdW5jdGlvbiBVaShhKXtcImVtYWlsXCJpbiBhJiZUaShhKX1cbmZ1bmN0aW9uIFZpKGEsYil7cmV0dXJuIE4oYSxXaSx7aWRlbnRpZmllcjpiLGNvbnRpbnVlVXJpOlBlKCk/b2UoKTpcImh0dHA6Ly9sb2NhbGhvc3RcIn0pLnRoZW4oZnVuY3Rpb24oYyl7cmV0dXJuIGMuc2lnbmluTWV0aG9kc3x8W119KX1mdW5jdGlvbiBYaShhKXtyZXR1cm4gTihhLFlpLHt9KS50aGVuKGZ1bmN0aW9uKGIpe3JldHVybiBiLmF1dGhvcml6ZWREb21haW5zfHxbXX0pfWZ1bmN0aW9uIE8oYSl7aWYoIWFbQWddKXtpZihhLm1mYVBlbmRpbmdDcmVkZW50aWFsKXRocm93IG5ldyB1KFwibXVsdGktZmFjdG9yLWF1dGgtcmVxdWlyZWRcIixudWxsLGtiKGEpKTt0aHJvdyBuZXcgdShcImludGVybmFsLWVycm9yXCIpO319XG5mdW5jdGlvbiBaaShhKXtpZihhLnBob25lTnVtYmVyfHxhLnRlbXBvcmFyeVByb29mKXtpZighYS5waG9uZU51bWJlcnx8IWEudGVtcG9yYXJ5UHJvb2YpdGhyb3cgbmV3IHUoXCJpbnRlcm5hbC1lcnJvclwiKTt9ZWxzZXtpZighYS5zZXNzaW9uSW5mbyl0aHJvdyBuZXcgdShcIm1pc3NpbmctdmVyaWZpY2F0aW9uLWlkXCIpO2lmKCFhLmNvZGUpdGhyb3cgbmV3IHUoXCJtaXNzaW5nLXZlcmlmaWNhdGlvbi1jb2RlXCIpO319RWkucHJvdG90eXBlLnZiPWZ1bmN0aW9uKCl7cmV0dXJuIE4odGhpcywkaSx7fSl9O0VpLnByb3RvdHlwZS54Yj1mdW5jdGlvbihhLGIpe3JldHVybiBOKHRoaXMsYWose2lkVG9rZW46YSxlbWFpbDpifSl9O0VpLnByb3RvdHlwZS55Yj1mdW5jdGlvbihhLGIpe3JldHVybiBOKHRoaXMsWmcse2lkVG9rZW46YSxwYXNzd29yZDpifSl9O3ZhciBiaj17ZGlzcGxheU5hbWU6XCJESVNQTEFZX05BTUVcIixwaG90b1VybDpcIlBIT1RPX1VSTFwifTtrPUVpLnByb3RvdHlwZTtcbmsuemI9ZnVuY3Rpb24oYSxiKXt2YXIgYz17aWRUb2tlbjphfSxkPVtdO2liKGJqLGZ1bmN0aW9uKGUsZil7dmFyIGc9YltmXTtudWxsPT09Zz9kLnB1c2goZSk6ZiBpbiBiJiYoY1tmXT1nKX0pO2QubGVuZ3RoJiYoYy5kZWxldGVBdHRyaWJ1dGU9ZCk7cmV0dXJuIE4odGhpcyxhaixjKX07ay5yYj1mdW5jdGlvbihhLGIpe2E9e3JlcXVlc3RUeXBlOlwiUEFTU1dPUkRfUkVTRVRcIixlbWFpbDphfTtCKGEsYik7cmV0dXJuIE4odGhpcyxjaixhKX07ay5zYj1mdW5jdGlvbihhLGIpe2E9e3JlcXVlc3RUeXBlOlwiRU1BSUxfU0lHTklOXCIsZW1haWw6YX07QihhLGIpO3JldHVybiBOKHRoaXMsZGosYSl9O2sucWI9ZnVuY3Rpb24oYSxiKXthPXtyZXF1ZXN0VHlwZTpcIlZFUklGWV9FTUFJTFwiLGlkVG9rZW46YX07QihhLGIpO3JldHVybiBOKHRoaXMsZWosYSl9O1xuay5BYj1mdW5jdGlvbihhLGIsYyl7YT17cmVxdWVzdFR5cGU6XCJWRVJJRllfQU5EX0NIQU5HRV9FTUFJTFwiLGlkVG9rZW46YSxuZXdFbWFpbDpifTtCKGEsYyk7cmV0dXJuIE4odGhpcyxmaixhKX07ZnVuY3Rpb24ga2goYSxiKXtyZXR1cm4gTihhLGdqLGIpfWsuY2I9ZnVuY3Rpb24oYSl7cmV0dXJuIE4odGhpcyxoaixhKX07ZnVuY3Rpb24gaWgoYSxiKXtyZXR1cm4gTihhLGlqLGIpLnRoZW4oZnVuY3Rpb24oYyl7cmV0dXJuIGMucGhvbmVTZXNzaW9uSW5mby5zZXNzaW9uSW5mb30pfVxuZnVuY3Rpb24gamooYSl7aWYoIWEucGhvbmVWZXJpZmljYXRpb25JbmZvKXRocm93IG5ldyB1KFwiaW50ZXJuYWwtZXJyb3JcIik7aWYoIWEucGhvbmVWZXJpZmljYXRpb25JbmZvLnNlc3Npb25JbmZvKXRocm93IG5ldyB1KFwibWlzc2luZy12ZXJpZmljYXRpb24taWRcIik7aWYoIWEucGhvbmVWZXJpZmljYXRpb25JbmZvLmNvZGUpdGhyb3cgbmV3IHUoXCJtaXNzaW5nLXZlcmlmaWNhdGlvbi1jb2RlXCIpO31mdW5jdGlvbiBqaChhLGIpe3JldHVybiBOKGEsa2osYikudGhlbihmdW5jdGlvbihjKXtyZXR1cm4gYy5waG9uZVJlc3BvbnNlSW5mby5zZXNzaW9uSW5mb30pfWZ1bmN0aW9uIGxqKGEsYixjKXtyZXR1cm4gTihhLG1qLHtpZFRva2VuOmIsZGVsZXRlUHJvdmlkZXI6Y30pfWZ1bmN0aW9uIG5qKGEpe2lmKCFhLnJlcXVlc3RVcml8fCFhLnNlc3Npb25JZCYmIWEucG9zdEJvZHkmJiFhLnBlbmRpbmdUb2tlbil0aHJvdyBuZXcgdShcImludGVybmFsLWVycm9yXCIpO31cbmZ1bmN0aW9uIG9qKGEsYil7Yi5vYXV0aElkVG9rZW4mJmIucHJvdmlkZXJJZCYmMD09Yi5wcm92aWRlcklkLmluZGV4T2YoXCJvaWRjLlwiKSYmIWIucGVuZGluZ1Rva2VuJiYoYS5zZXNzaW9uSWQ/Yi5ub25jZT1hLnNlc3Npb25JZDphLnBvc3RCb2R5JiYoYT1uZXcgUWQoYS5wb3N0Qm9keSksZ2UoYSxcIm5vbmNlXCIpJiYoYi5ub25jZT1hLmdldChcIm5vbmNlXCIpKSkpO3JldHVybiBifVxuZnVuY3Rpb24gcGooYSl7dmFyIGI9bnVsbDthLm5lZWRDb25maXJtYXRpb24/KGEuY29kZT1cImFjY291bnQtZXhpc3RzLXdpdGgtZGlmZmVyZW50LWNyZWRlbnRpYWxcIixiPXZoKGEpKTpcIkZFREVSQVRFRF9VU0VSX0lEX0FMUkVBRFlfTElOS0VEXCI9PWEuZXJyb3JNZXNzYWdlPyhhLmNvZGU9XCJjcmVkZW50aWFsLWFscmVhZHktaW4tdXNlXCIsYj12aChhKSk6XCJFTUFJTF9FWElTVFNcIj09YS5lcnJvck1lc3NhZ2U/KGEuY29kZT1cImVtYWlsLWFscmVhZHktaW4tdXNlXCIsYj12aChhKSk6YS5lcnJvck1lc3NhZ2UmJihiPXFqKGEuZXJyb3JNZXNzYWdlKSk7aWYoYil0aHJvdyBiO08oYSl9ZnVuY3Rpb24gQ2coYSxiKXtiLnJldHVybklkcENyZWRlbnRpYWw9ITA7cmV0dXJuIE4oYSxyaixiKX1mdW5jdGlvbiBFZyhhLGIpe2IucmV0dXJuSWRwQ3JlZGVudGlhbD0hMDtyZXR1cm4gTihhLHNqLGIpfVxuZnVuY3Rpb24gRmcoYSxiKXtiLnJldHVybklkcENyZWRlbnRpYWw9ITA7Yi5hdXRvQ3JlYXRlPSExO3JldHVybiBOKGEsdGosYil9ZnVuY3Rpb24gdWooYSl7aWYoIWEub29iQ29kZSl0aHJvdyBuZXcgdShcImludmFsaWQtYWN0aW9uLWNvZGVcIik7fWsuamI9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gTih0aGlzLHZqLHtvb2JDb2RlOmEsbmV3UGFzc3dvcmQ6Yn0pfTtrLlBhPWZ1bmN0aW9uKGEpe3JldHVybiBOKHRoaXMsd2ose29vYkNvZGU6YX0pfTtrLmZiPWZ1bmN0aW9uKGEpe3JldHVybiBOKHRoaXMseGose29vYkNvZGU6YX0pfTtcbnZhciB4aj17ZW5kcG9pbnQ6XCJzZXRBY2NvdW50SW5mb1wiLEE6dWosWTpcImVtYWlsXCIsQzohMH0sd2o9e2VuZHBvaW50OlwicmVzZXRQYXNzd29yZFwiLEE6dWosRzpmdW5jdGlvbihhKXt2YXIgYj1hLnJlcXVlc3RUeXBlO2lmKCFifHwhYS5lbWFpbCYmXCJFTUFJTF9TSUdOSU5cIiE9YiYmXCJWRVJJRllfQU5EX0NIQU5HRV9FTUFJTFwiIT1iKXRocm93IG5ldyB1KFwiaW50ZXJuYWwtZXJyb3JcIik7fSxDOiEwfSx5aj17ZW5kcG9pbnQ6XCJzaWdudXBOZXdVc2VyXCIsQTpmdW5jdGlvbihhKXtUaShhKTtpZighYS5wYXNzd29yZCl0aHJvdyBuZXcgdShcIndlYWstcGFzc3dvcmRcIik7fSxHOk8sVTohMCxDOiEwfSxXaT17ZW5kcG9pbnQ6XCJjcmVhdGVBdXRoVXJpXCIsQzohMH0semo9e2VuZHBvaW50OlwiZGVsZXRlQWNjb3VudFwiLE06W1wiaWRUb2tlblwiXX0sbWo9e2VuZHBvaW50Olwic2V0QWNjb3VudEluZm9cIixNOltcImlkVG9rZW5cIixcImRlbGV0ZVByb3ZpZGVyXCJdLEE6ZnVuY3Rpb24oYSl7aWYoXCJhcnJheVwiIT1cbmxhKGEuZGVsZXRlUHJvdmlkZXIpKXRocm93IG5ldyB1KFwiaW50ZXJuYWwtZXJyb3JcIik7fX0sV2c9e2VuZHBvaW50OlwiZW1haWxMaW5rU2lnbmluXCIsTTpbXCJlbWFpbFwiLFwib29iQ29kZVwiXSxBOlRpLEc6TyxVOiEwLEM6ITB9LFlnPXtlbmRwb2ludDpcImVtYWlsTGlua1NpZ25pblwiLE06W1wiaWRUb2tlblwiLFwiZW1haWxcIixcIm9vYkNvZGVcIl0sQTpUaSxHOk8sVTohMH0sQWo9e2VuZHBvaW50OlwiYWNjb3VudHMvbWZhRW5yb2xsbWVudDpmaW5hbGl6ZVwiLE06W1wiaWRUb2tlblwiLFwicGhvbmVWZXJpZmljYXRpb25JbmZvXCJdLEE6amosRzpPLEM6ITAsTGE6ITB9LEJqPXtlbmRwb2ludDpcImFjY291bnRzL21mYVNpZ25JbjpmaW5hbGl6ZVwiLE06W1wibWZhUGVuZGluZ0NyZWRlbnRpYWxcIixcInBob25lVmVyaWZpY2F0aW9uSW5mb1wiXSxBOmpqLEc6TyxDOiEwLExhOiEwfSxDaj17ZW5kcG9pbnQ6XCJnZXRBY2NvdW50SW5mb1wifSxkaj17ZW5kcG9pbnQ6XCJnZXRPb2JDb25maXJtYXRpb25Db2RlXCIsTTpbXCJyZXF1ZXN0VHlwZVwiXSxcbkE6ZnVuY3Rpb24oYSl7aWYoXCJFTUFJTF9TSUdOSU5cIiE9YS5yZXF1ZXN0VHlwZSl0aHJvdyBuZXcgdShcImludGVybmFsLWVycm9yXCIpO1RpKGEpfSxZOlwiZW1haWxcIixDOiEwfSxlaj17ZW5kcG9pbnQ6XCJnZXRPb2JDb25maXJtYXRpb25Db2RlXCIsTTpbXCJpZFRva2VuXCIsXCJyZXF1ZXN0VHlwZVwiXSxBOmZ1bmN0aW9uKGEpe2lmKFwiVkVSSUZZX0VNQUlMXCIhPWEucmVxdWVzdFR5cGUpdGhyb3cgbmV3IHUoXCJpbnRlcm5hbC1lcnJvclwiKTt9LFk6XCJlbWFpbFwiLEM6ITB9LGZqPXtlbmRwb2ludDpcImdldE9vYkNvbmZpcm1hdGlvbkNvZGVcIixNOltcImlkVG9rZW5cIixcIm5ld0VtYWlsXCIsXCJyZXF1ZXN0VHlwZVwiXSxBOmZ1bmN0aW9uKGEpe2lmKFwiVkVSSUZZX0FORF9DSEFOR0VfRU1BSUxcIiE9YS5yZXF1ZXN0VHlwZSl0aHJvdyBuZXcgdShcImludGVybmFsLWVycm9yXCIpO30sWTpcImVtYWlsXCIsQzohMH0sY2o9e2VuZHBvaW50OlwiZ2V0T29iQ29uZmlybWF0aW9uQ29kZVwiLE06W1wicmVxdWVzdFR5cGVcIl0sQTpmdW5jdGlvbihhKXtpZihcIlBBU1NXT1JEX1JFU0VUXCIhPVxuYS5yZXF1ZXN0VHlwZSl0aHJvdyBuZXcgdShcImludGVybmFsLWVycm9yXCIpO1RpKGEpfSxZOlwiZW1haWxcIixDOiEwfSxZaT17aGI6ITAsZW5kcG9pbnQ6XCJnZXRQcm9qZWN0Q29uZmlnXCIsUmI6XCJHRVRcIn0sRGo9e2hiOiEwLGVuZHBvaW50OlwiZ2V0UmVjYXB0Y2hhUGFyYW1cIixSYjpcIkdFVFwiLEc6ZnVuY3Rpb24oYSl7aWYoIWEucmVjYXB0Y2hhU2l0ZUtleSl0aHJvdyBuZXcgdShcImludGVybmFsLWVycm9yXCIpO319LHZqPXtlbmRwb2ludDpcInJlc2V0UGFzc3dvcmRcIixBOnVqLFk6XCJlbWFpbFwiLEM6ITB9LGdqPXtlbmRwb2ludDpcInNlbmRWZXJpZmljYXRpb25Db2RlXCIsTTpbXCJwaG9uZU51bWJlclwiLFwicmVjYXB0Y2hhVG9rZW5cIl0sWTpcInNlc3Npb25JbmZvXCIsQzohMH0sYWo9e2VuZHBvaW50Olwic2V0QWNjb3VudEluZm9cIixNOltcImlkVG9rZW5cIl0sQTpVaSxVOiEwfSxaZz17ZW5kcG9pbnQ6XCJzZXRBY2NvdW50SW5mb1wiLE06W1wiaWRUb2tlblwiXSxBOmZ1bmN0aW9uKGEpe1VpKGEpO2lmKCFhLnBhc3N3b3JkKXRocm93IG5ldyB1KFwid2Vhay1wYXNzd29yZFwiKTtcbn0sRzpPLFU6ITB9LCRpPXtlbmRwb2ludDpcInNpZ251cE5ld1VzZXJcIixHOk8sVTohMCxDOiEwfSxpaj17ZW5kcG9pbnQ6XCJhY2NvdW50cy9tZmFFbnJvbGxtZW50OnN0YXJ0XCIsTTpbXCJpZFRva2VuXCIsXCJwaG9uZUVucm9sbG1lbnRJbmZvXCJdLEE6ZnVuY3Rpb24oYSl7aWYoIWEucGhvbmVFbnJvbGxtZW50SW5mbyl0aHJvdyBuZXcgdShcImludGVybmFsLWVycm9yXCIpO2lmKCFhLnBob25lRW5yb2xsbWVudEluZm8ucGhvbmVOdW1iZXIpdGhyb3cgbmV3IHUoXCJtaXNzaW5nLXBob25lLW51bWJlclwiKTtpZighYS5waG9uZUVucm9sbG1lbnRJbmZvLnJlY2FwdGNoYVRva2VuKXRocm93IG5ldyB1KFwibWlzc2luZy1hcHAtY3JlZGVudGlhbFwiKTt9LEc6ZnVuY3Rpb24oYSl7aWYoIWEucGhvbmVTZXNzaW9uSW5mb3x8IWEucGhvbmVTZXNzaW9uSW5mby5zZXNzaW9uSW5mbyl0aHJvdyBuZXcgdShcImludGVybmFsLWVycm9yXCIpO30sQzohMCxMYTohMH0sa2o9e2VuZHBvaW50OlwiYWNjb3VudHMvbWZhU2lnbkluOnN0YXJ0XCIsXG5NOltcIm1mYVBlbmRpbmdDcmVkZW50aWFsXCIsXCJtZmFFbnJvbGxtZW50SWRcIixcInBob25lU2lnbkluSW5mb1wiXSxBOmZ1bmN0aW9uKGEpe2lmKCFhLnBob25lU2lnbkluSW5mb3x8IWEucGhvbmVTaWduSW5JbmZvLnJlY2FwdGNoYVRva2VuKXRocm93IG5ldyB1KFwibWlzc2luZy1hcHAtY3JlZGVudGlhbFwiKTt9LEc6ZnVuY3Rpb24oYSl7aWYoIWEucGhvbmVSZXNwb25zZUluZm98fCFhLnBob25lUmVzcG9uc2VJbmZvLnNlc3Npb25JbmZvKXRocm93IG5ldyB1KFwiaW50ZXJuYWwtZXJyb3JcIik7fSxDOiEwLExhOiEwfSxyaj17ZW5kcG9pbnQ6XCJ2ZXJpZnlBc3NlcnRpb25cIixBOm5qLFdhOm9qLEc6cGosVTohMCxDOiEwfSx0aj17ZW5kcG9pbnQ6XCJ2ZXJpZnlBc3NlcnRpb25cIixBOm5qLFdhOm9qLEc6ZnVuY3Rpb24oYSl7aWYoYS5lcnJvck1lc3NhZ2UmJlwiVVNFUl9OT1RfRk9VTkRcIj09YS5lcnJvck1lc3NhZ2UpdGhyb3cgbmV3IHUoXCJ1c2VyLW5vdC1mb3VuZFwiKTtpZihhLmVycm9yTWVzc2FnZSl0aHJvdyBxaihhLmVycm9yTWVzc2FnZSk7XG5PKGEpfSxVOiEwLEM6ITB9LHNqPXtlbmRwb2ludDpcInZlcmlmeUFzc2VydGlvblwiLEE6ZnVuY3Rpb24oYSl7bmooYSk7aWYoIWEuaWRUb2tlbil0aHJvdyBuZXcgdShcImludGVybmFsLWVycm9yXCIpO30sV2E6b2osRzpwaixVOiEwfSxFaj17ZW5kcG9pbnQ6XCJ2ZXJpZnlDdXN0b21Ub2tlblwiLEE6ZnVuY3Rpb24oYSl7aWYoIWEudG9rZW4pdGhyb3cgbmV3IHUoXCJpbnZhbGlkLWN1c3RvbS10b2tlblwiKTt9LEc6TyxVOiEwLEM6ITB9LFhnPXtlbmRwb2ludDpcInZlcmlmeVBhc3N3b3JkXCIsQTpmdW5jdGlvbihhKXtUaShhKTtpZighYS5wYXNzd29yZCl0aHJvdyBuZXcgdShcIndyb25nLXBhc3N3b3JkXCIpO30sRzpPLFU6ITAsQzohMH0saGo9e2VuZHBvaW50OlwidmVyaWZ5UGhvbmVOdW1iZXJcIixBOlppLEc6TyxDOiEwfSxlaD17ZW5kcG9pbnQ6XCJ2ZXJpZnlQaG9uZU51bWJlclwiLEE6ZnVuY3Rpb24oYSl7aWYoIWEuaWRUb2tlbil0aHJvdyBuZXcgdShcImludGVybmFsLWVycm9yXCIpO1ppKGEpfSxcbkc6ZnVuY3Rpb24oYSl7aWYoYS50ZW1wb3JhcnlQcm9vZil0aHJvdyBhLmNvZGU9XCJjcmVkZW50aWFsLWFscmVhZHktaW4tdXNlXCIsdmgoYSk7TyhhKX19LGZoPXtFYjp7VVNFUl9OT1RfRk9VTkQ6XCJ1c2VyLW5vdC1mb3VuZFwifSxlbmRwb2ludDpcInZlcmlmeVBob25lTnVtYmVyXCIsQTpaaSxHOk8sQzohMH0sRmo9e2VuZHBvaW50OlwiYWNjb3VudHMvbWZhRW5yb2xsbWVudDp3aXRoZHJhd1wiLE06W1wiaWRUb2tlblwiLFwibWZhRW5yb2xsbWVudElkXCJdLEc6ZnVuY3Rpb24oYSl7aWYoISFhW0FnXV4hIWEucmVmcmVzaFRva2VuKXRocm93IG5ldyB1KFwiaW50ZXJuYWwtZXJyb3JcIik7fSxDOiEwLExhOiEwfTtcbmZ1bmN0aW9uIE4oYSxiLGMpe2lmKCFqZihjLGIuTSkpcmV0dXJuIEYobmV3IHUoXCJpbnRlcm5hbC1lcnJvclwiKSk7dmFyIGQ9ISFiLkxhLGU9Yi5SYnx8XCJQT1NUXCIsZjtyZXR1cm4gRShjKS50aGVuKGIuQSkudGhlbihmdW5jdGlvbigpe2IuVSYmKGMucmV0dXJuU2VjdXJlVG9rZW49ITApO2IuQyYmYS5iJiZcInVuZGVmaW5lZFwiPT09dHlwZW9mIGMudGVuYW50SWQmJihjLnRlbmFudElkPWEuYik7cmV0dXJuIGQ/U2koYSxhLmwsYi5lbmRwb2ludCxlLGMsYi5FYixiLmhifHwhMSk6U2koYSxhLmgsYi5lbmRwb2ludCxlLGMsYi5FYixiLmhifHwhMSl9KS50aGVuKGZ1bmN0aW9uKGcpe2Y9ZztyZXR1cm4gYi5XYT9iLldhKGMsZik6Zn0pLnRoZW4oYi5HKS50aGVuKGZ1bmN0aW9uKCl7aWYoIWIuWSlyZXR1cm4gZjtpZighKGIuWSBpbiBmKSl0aHJvdyBuZXcgdShcImludGVybmFsLWVycm9yXCIpO3JldHVybiBmW2IuWV19KX1cbmZ1bmN0aW9uIHFqKGEpe3JldHVybiBSaSh7ZXJyb3I6e2Vycm9yczpbe21lc3NhZ2U6YX1dLGNvZGU6NDAwLG1lc3NhZ2U6YX19KX1cbmZ1bmN0aW9uIFJpKGEsYil7dmFyIGM9KGEuZXJyb3ImJmEuZXJyb3IuZXJyb3JzJiZhLmVycm9yLmVycm9yc1swXXx8e30pLnJlYXNvbnx8XCJcIjt2YXIgZD17a2V5SW52YWxpZDpcImludmFsaWQtYXBpLWtleVwiLGlwUmVmZXJlckJsb2NrZWQ6XCJhcHAtbm90LWF1dGhvcml6ZWRcIn07aWYoYz1kW2NdP25ldyB1KGRbY10pOm51bGwpcmV0dXJuIGM7Yz1hLmVycm9yJiZhLmVycm9yLm1lc3NhZ2V8fFwiXCI7ZD17SU5WQUxJRF9DVVNUT01fVE9LRU46XCJpbnZhbGlkLWN1c3RvbS10b2tlblwiLENSRURFTlRJQUxfTUlTTUFUQ0g6XCJjdXN0b20tdG9rZW4tbWlzbWF0Y2hcIixNSVNTSU5HX0NVU1RPTV9UT0tFTjpcImludGVybmFsLWVycm9yXCIsSU5WQUxJRF9JREVOVElGSUVSOlwiaW52YWxpZC1lbWFpbFwiLE1JU1NJTkdfQ09OVElOVUVfVVJJOlwiaW50ZXJuYWwtZXJyb3JcIixJTlZBTElEX0VNQUlMOlwiaW52YWxpZC1lbWFpbFwiLElOVkFMSURfUEFTU1dPUkQ6XCJ3cm9uZy1wYXNzd29yZFwiLFVTRVJfRElTQUJMRUQ6XCJ1c2VyLWRpc2FibGVkXCIsXG5NSVNTSU5HX1BBU1NXT1JEOlwiaW50ZXJuYWwtZXJyb3JcIixFTUFJTF9FWElTVFM6XCJlbWFpbC1hbHJlYWR5LWluLXVzZVwiLFBBU1NXT1JEX0xPR0lOX0RJU0FCTEVEOlwib3BlcmF0aW9uLW5vdC1hbGxvd2VkXCIsSU5WQUxJRF9JRFBfUkVTUE9OU0U6XCJpbnZhbGlkLWNyZWRlbnRpYWxcIixJTlZBTElEX1BFTkRJTkdfVE9LRU46XCJpbnZhbGlkLWNyZWRlbnRpYWxcIixGRURFUkFURURfVVNFUl9JRF9BTFJFQURZX0xJTktFRDpcImNyZWRlbnRpYWwtYWxyZWFkeS1pbi11c2VcIixNSVNTSU5HX09SX0lOVkFMSURfTk9OQ0U6XCJtaXNzaW5nLW9yLWludmFsaWQtbm9uY2VcIixJTlZBTElEX01FU1NBR0VfUEFZTE9BRDpcImludmFsaWQtbWVzc2FnZS1wYXlsb2FkXCIsSU5WQUxJRF9SRUNJUElFTlRfRU1BSUw6XCJpbnZhbGlkLXJlY2lwaWVudC1lbWFpbFwiLElOVkFMSURfU0VOREVSOlwiaW52YWxpZC1zZW5kZXJcIixFTUFJTF9OT1RfRk9VTkQ6XCJ1c2VyLW5vdC1mb3VuZFwiLFJFU0VUX1BBU1NXT1JEX0VYQ0VFRF9MSU1JVDpcInRvby1tYW55LXJlcXVlc3RzXCIsXG5FWFBJUkVEX09PQl9DT0RFOlwiZXhwaXJlZC1hY3Rpb24tY29kZVwiLElOVkFMSURfT09CX0NPREU6XCJpbnZhbGlkLWFjdGlvbi1jb2RlXCIsTUlTU0lOR19PT0JfQ09ERTpcImludGVybmFsLWVycm9yXCIsSU5WQUxJRF9QUk9WSURFUl9JRDpcImludmFsaWQtcHJvdmlkZXItaWRcIixDUkVERU5USUFMX1RPT19PTERfTE9HSU5fQUdBSU46XCJyZXF1aXJlcy1yZWNlbnQtbG9naW5cIixJTlZBTElEX0lEX1RPS0VOOlwiaW52YWxpZC11c2VyLXRva2VuXCIsVE9LRU5fRVhQSVJFRDpcInVzZXItdG9rZW4tZXhwaXJlZFwiLFVTRVJfTk9UX0ZPVU5EOlwidXNlci10b2tlbi1leHBpcmVkXCIsQ09SU19VTlNVUFBPUlRFRDpcImNvcnMtdW5zdXBwb3J0ZWRcIixEWU5BTUlDX0xJTktfTk9UX0FDVElWQVRFRDpcImR5bmFtaWMtbGluay1ub3QtYWN0aXZhdGVkXCIsSU5WQUxJRF9BUFBfSUQ6XCJpbnZhbGlkLWFwcC1pZFwiLFRPT19NQU5ZX0FUVEVNUFRTX1RSWV9MQVRFUjpcInRvby1tYW55LXJlcXVlc3RzXCIsV0VBS19QQVNTV09SRDpcIndlYWstcGFzc3dvcmRcIixcbk9QRVJBVElPTl9OT1RfQUxMT1dFRDpcIm9wZXJhdGlvbi1ub3QtYWxsb3dlZFwiLFVTRVJfQ0FOQ0VMTEVEOlwidXNlci1jYW5jZWxsZWRcIixDQVBUQ0hBX0NIRUNLX0ZBSUxFRDpcImNhcHRjaGEtY2hlY2stZmFpbGVkXCIsSU5WQUxJRF9BUFBfQ1JFREVOVElBTDpcImludmFsaWQtYXBwLWNyZWRlbnRpYWxcIixJTlZBTElEX0NPREU6XCJpbnZhbGlkLXZlcmlmaWNhdGlvbi1jb2RlXCIsSU5WQUxJRF9QSE9ORV9OVU1CRVI6XCJpbnZhbGlkLXBob25lLW51bWJlclwiLElOVkFMSURfU0VTU0lPTl9JTkZPOlwiaW52YWxpZC12ZXJpZmljYXRpb24taWRcIixJTlZBTElEX1RFTVBPUkFSWV9QUk9PRjpcImludmFsaWQtY3JlZGVudGlhbFwiLE1JU1NJTkdfQVBQX0NSRURFTlRJQUw6XCJtaXNzaW5nLWFwcC1jcmVkZW50aWFsXCIsTUlTU0lOR19DT0RFOlwibWlzc2luZy12ZXJpZmljYXRpb24tY29kZVwiLE1JU1NJTkdfUEhPTkVfTlVNQkVSOlwibWlzc2luZy1waG9uZS1udW1iZXJcIixNSVNTSU5HX1NFU1NJT05fSU5GTzpcIm1pc3NpbmctdmVyaWZpY2F0aW9uLWlkXCIsXG5RVU9UQV9FWENFRURFRDpcInF1b3RhLWV4Y2VlZGVkXCIsU0VTU0lPTl9FWFBJUkVEOlwiY29kZS1leHBpcmVkXCIsUkVKRUNURURfQ1JFREVOVElBTDpcInJlamVjdGVkLWNyZWRlbnRpYWxcIixJTlZBTElEX0NPTlRJTlVFX1VSSTpcImludmFsaWQtY29udGludWUtdXJpXCIsTUlTU0lOR19BTkRST0lEX1BBQ0tBR0VfTkFNRTpcIm1pc3NpbmctYW5kcm9pZC1wa2ctbmFtZVwiLE1JU1NJTkdfSU9TX0JVTkRMRV9JRDpcIm1pc3NpbmctaW9zLWJ1bmRsZS1pZFwiLFVOQVVUSE9SSVpFRF9ET01BSU46XCJ1bmF1dGhvcml6ZWQtY29udGludWUtdXJpXCIsSU5WQUxJRF9EWU5BTUlDX0xJTktfRE9NQUlOOlwiaW52YWxpZC1keW5hbWljLWxpbmstZG9tYWluXCIsSU5WQUxJRF9PQVVUSF9DTElFTlRfSUQ6XCJpbnZhbGlkLW9hdXRoLWNsaWVudC1pZFwiLElOVkFMSURfQ0VSVF9IQVNIOlwiaW52YWxpZC1jZXJ0LWhhc2hcIixVTlNVUFBPUlRFRF9URU5BTlRfT1BFUkFUSU9OOlwidW5zdXBwb3J0ZWQtdGVuYW50LW9wZXJhdGlvblwiLFxuSU5WQUxJRF9URU5BTlRfSUQ6XCJpbnZhbGlkLXRlbmFudC1pZFwiLFRFTkFOVF9JRF9NSVNNQVRDSDpcInRlbmFudC1pZC1taXNtYXRjaFwiLEFETUlOX09OTFlfT1BFUkFUSU9OOlwiYWRtaW4tcmVzdHJpY3RlZC1vcGVyYXRpb25cIixJTlZBTElEX01GQV9QRU5ESU5HX0NSRURFTlRJQUw6XCJpbnZhbGlkLW11bHRpLWZhY3Rvci1zZXNzaW9uXCIsTUZBX0VOUk9MTE1FTlRfTk9UX0ZPVU5EOlwibXVsdGktZmFjdG9yLWluZm8tbm90LWZvdW5kXCIsTUlTU0lOR19NRkFfUEVORElOR19DUkVERU5USUFMOlwibWlzc2luZy1tdWx0aS1mYWN0b3Itc2Vzc2lvblwiLE1JU1NJTkdfTUZBX0VOUk9MTE1FTlRfSUQ6XCJtaXNzaW5nLW11bHRpLWZhY3Rvci1pbmZvXCIsRU1BSUxfQ0hBTkdFX05FRURTX1ZFUklGSUNBVElPTjpcImVtYWlsLWNoYW5nZS1uZWVkcy12ZXJpZmljYXRpb25cIixTRUNPTkRfRkFDVE9SX0VYSVNUUzpcInNlY29uZC1mYWN0b3ItYWxyZWFkeS1pbi11c2VcIixTRUNPTkRfRkFDVE9SX0xJTUlUX0VYQ0VFREVEOlwibWF4aW11bS1zZWNvbmQtZmFjdG9yLWNvdW50LWV4Y2VlZGVkXCIsXG5VTlNVUFBPUlRFRF9GSVJTVF9GQUNUT1I6XCJ1bnN1cHBvcnRlZC1maXJzdC1mYWN0b3JcIixVTlZFUklGSUVEX0VNQUlMOlwidW52ZXJpZmllZC1lbWFpbFwifTtCKGQsYnx8e30pO2I9KGI9Yy5tYXRjaCgvXlteXFxzXStcXHMqOlxccyooW1xcc1xcU10qKSQvKSkmJjE8Yi5sZW5ndGg/YlsxXTp2b2lkIDA7Zm9yKHZhciBlIGluIGQpaWYoMD09PWMuaW5kZXhPZihlKSlyZXR1cm4gbmV3IHUoZFtlXSxiKTshYiYmYSYmKGI9UmUoYSkpO3JldHVybiBuZXcgdShcImludGVybmFsLWVycm9yXCIsYil9O2Z1bmN0aW9uIEdqKGEpe3RoaXMuYj1hO3RoaXMuYT1udWxsO3RoaXMubmI9SGoodGhpcyl9XG5mdW5jdGlvbiBIaihhKXtyZXR1cm4gSWooKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBEKGZ1bmN0aW9uKGIsYyl7SihcImdhcGkuaWZyYW1lcy5nZXRDb250ZXh0XCIpKCkub3Blbih7d2hlcmU6ZG9jdW1lbnQuYm9keSx1cmw6YS5iLG1lc3NhZ2VIYW5kbGVyc0ZpbHRlcjpKKFwiZ2FwaS5pZnJhbWVzLkNST1NTX09SSUdJTl9JRlJBTUVTX0ZJTFRFUlwiKSxhdHRyaWJ1dGVzOntzdHlsZTp7cG9zaXRpb246XCJhYnNvbHV0ZVwiLHRvcDpcIi0xMDBweFwiLHdpZHRoOlwiMXB4XCIsaGVpZ2h0OlwiMXB4XCJ9fSxkb250Y2xlYXI6ITB9LGZ1bmN0aW9uKGQpe2Z1bmN0aW9uIGUoKXtjbGVhclRpbWVvdXQoZik7YigpfWEuYT1kO2EuYS5yZXN0eWxlKHtzZXRIaWRlT25MZWF2ZTohMX0pO3ZhciBmPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtjKEVycm9yKFwiTmV0d29yayBFcnJvclwiKSl9LEpqLmdldCgpKTtkLnBpbmcoZSkudGhlbihlLGZ1bmN0aW9uKCl7YyhFcnJvcihcIk5ldHdvcmsgRXJyb3JcIikpfSl9KX0pfSl9XG5mdW5jdGlvbiBLaihhLGIpe3JldHVybiBhLm5iLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEQoZnVuY3Rpb24oYyl7YS5hLnNlbmQoYi50eXBlLGIsYyxKKFwiZ2FwaS5pZnJhbWVzLkNST1NTX09SSUdJTl9JRlJBTUVTX0ZJTFRFUlwiKSl9KX0pfWZ1bmN0aW9uIExqKGEsYil7YS5uYi50aGVuKGZ1bmN0aW9uKCl7YS5hLnJlZ2lzdGVyKFwiYXV0aEV2ZW50XCIsYixKKFwiZ2FwaS5pZnJhbWVzLkNST1NTX09SSUdJTl9JRlJBTUVTX0ZJTFRFUlwiKSl9KX12YXIgTWo9bmV3IG5iKG9iLFwiaHR0cHM6Ly9hcGlzLmdvb2dsZS5jb20vanMvYXBpLmpzP29ubG9hZD0le29ubG9hZH1cIiksTmo9bmV3IFdlKDNFNCw2RTQpLEpqPW5ldyBXZSg1RTMsMTVFMyksT2o9bnVsbDtcbmZ1bmN0aW9uIElqKCl7cmV0dXJuIE9qP09qOk9qPShuZXcgRChmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoKXtWZSgpO0ooXCJnYXBpLmxvYWRcIikoXCJnYXBpLmlmcmFtZXNcIix7Y2FsbGJhY2s6YSxvbnRpbWVvdXQ6ZnVuY3Rpb24oKXtWZSgpO2IoRXJyb3IoXCJOZXR3b3JrIEVycm9yXCIpKX0sdGltZW91dDpOai5nZXQoKX0pfWlmKEooXCJnYXBpLmlmcmFtZXMuSWZyYW1lXCIpKWEoKTtlbHNlIGlmKEooXCJnYXBpLmxvYWRcIikpYygpO2Vsc2V7dmFyIGQ9XCJfX2lmcmFtZWZjYlwiK01hdGguZmxvb3IoMUU2Kk1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKCk7bFtkXT1mdW5jdGlvbigpe0ooXCJnYXBpLmxvYWRcIik/YygpOmIoRXJyb3IoXCJOZXR3b3JrIEVycm9yXCIpKX07ZD13YihNaix7b25sb2FkOmR9KTtFKHhpKGQpKS5vKGZ1bmN0aW9uKCl7YihFcnJvcihcIk5ldHdvcmsgRXJyb3JcIikpfSl9fSkpLm8oZnVuY3Rpb24oYSl7T2o9bnVsbDt0aHJvdyBhO30pfTtmdW5jdGlvbiBQaihhLGIsYyl7dGhpcy5pPWE7dGhpcy5nPWI7dGhpcy5oPWM7dGhpcy5mPW51bGw7dGhpcy5hPSRkKHRoaXMuaSxcIi9fXy9hdXRoL2lmcmFtZVwiKTtIKHRoaXMuYSxcImFwaUtleVwiLHRoaXMuZyk7SCh0aGlzLmEsXCJhcHBOYW1lXCIsdGhpcy5oKTt0aGlzLmI9bnVsbDt0aGlzLmM9W119UGoucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dGhpcy5mP0godGhpcy5hLFwidlwiLHRoaXMuZik6ZmUodGhpcy5hLmEsXCJ2XCIpO3RoaXMuYj9IKHRoaXMuYSxcImVpZFwiLHRoaXMuYik6ZmUodGhpcy5hLmEsXCJlaWRcIik7dGhpcy5jLmxlbmd0aD9IKHRoaXMuYSxcImZ3XCIsdGhpcy5jLmpvaW4oXCIsXCIpKTpmZSh0aGlzLmEuYSxcImZ3XCIpO3JldHVybiB0aGlzLmEudG9TdHJpbmcoKX07ZnVuY3Rpb24gUWooYSxiLGMsZCxlKXt0aGlzLnM9YTt0aGlzLm09Yjt0aGlzLmM9Yzt0aGlzLnU9ZDt0aGlzLmk9dGhpcy5nPXRoaXMubD1udWxsO3RoaXMuYT1lO3RoaXMuaD10aGlzLmY9bnVsbH1cblFqLnByb3RvdHlwZS51Yj1mdW5jdGlvbihhKXt0aGlzLmg9YTtyZXR1cm4gdGhpc307XG5Rai5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXt2YXIgYT0kZCh0aGlzLnMsXCIvX18vYXV0aC9oYW5kbGVyXCIpO0goYSxcImFwaUtleVwiLHRoaXMubSk7SChhLFwiYXBwTmFtZVwiLHRoaXMuYyk7SChhLFwiYXV0aFR5cGVcIix0aGlzLnUpO2lmKHRoaXMuYS5pc09BdXRoUHJvdmlkZXIpe3ZhciBiPXRoaXMuYTt0cnl7dmFyIGM9ZmlyZWJhc2UuYXBwKHRoaXMuYykuYXV0aCgpLmphKCl9Y2F0Y2goaCl7Yz1udWxsfWIua2I9YztIKGEsXCJwcm92aWRlcklkXCIsdGhpcy5hLnByb3ZpZGVySWQpO2I9dGhpcy5hO2M9U2UoYi5GYik7Zm9yKHZhciBkIGluIGMpY1tkXT1jW2RdLnRvU3RyaW5nKCk7ZD1iLk9jO2M9a2IoYyk7Zm9yKHZhciBlPTA7ZTxkLmxlbmd0aDtlKyspe3ZhciBmPWRbZV07ZiBpbiBjJiZkZWxldGUgY1tmXX1iLmxiJiZiLmtiJiYhY1tiLmxiXSYmKGNbYi5sYl09Yi5rYik7amIoYyl8fEgoYSxcImN1c3RvbVBhcmFtZXRlcnNcIixSZShjKSl9XCJmdW5jdGlvblwiPT09dHlwZW9mIHRoaXMuYS5OYiYmXG4oYj10aGlzLmEuTmIoKSxiLmxlbmd0aCYmSChhLFwic2NvcGVzXCIsYi5qb2luKFwiLFwiKSkpO3RoaXMubD9IKGEsXCJyZWRpcmVjdFVybFwiLHRoaXMubCk6ZmUoYS5hLFwicmVkaXJlY3RVcmxcIik7dGhpcy5nP0goYSxcImV2ZW50SWRcIix0aGlzLmcpOmZlKGEuYSxcImV2ZW50SWRcIik7dGhpcy5pP0goYSxcInZcIix0aGlzLmkpOmZlKGEuYSxcInZcIik7aWYodGhpcy5iKWZvcih2YXIgZyBpbiB0aGlzLmIpdGhpcy5iLmhhc093blByb3BlcnR5KGcpJiYhWWQoYSxnKSYmSChhLGcsdGhpcy5iW2ddKTt0aGlzLmg/SChhLFwidGlkXCIsdGhpcy5oKTpmZShhLmEsXCJ0aWRcIik7dGhpcy5mP0goYSxcImVpZFwiLHRoaXMuZik6ZmUoYS5hLFwiZWlkXCIpO2c9UmoodGhpcy5jKTtnLmxlbmd0aCYmSChhLFwiZndcIixnLmpvaW4oXCIsXCIpKTtyZXR1cm4gYS50b1N0cmluZygpfTtmdW5jdGlvbiBSaihhKXt0cnl7cmV0dXJuIGZpcmViYXNlLmFwcChhKS5hdXRoKCkuRWEoKX1jYXRjaChiKXtyZXR1cm5bXX19XG5mdW5jdGlvbiBTaihhLGIsYyxkLGUpe3RoaXMudT1hO3RoaXMuZj1iO3RoaXMuYj1jO3RoaXMuYz1kfHxudWxsO3RoaXMuaD1lfHxudWxsO3RoaXMubT10aGlzLnM9dGhpcy53PW51bGw7dGhpcy5nPVtdO3RoaXMubD10aGlzLmE9bnVsbH1cbmZ1bmN0aW9uIFRqKGEpe3ZhciBiPW9lKCk7cmV0dXJuIFhpKGEpLnRoZW4oZnVuY3Rpb24oYyl7YTp7dmFyIGQ9WmQoYiksZT1kLmY7ZD1kLmI7Zm9yKHZhciBmPTA7ZjxjLmxlbmd0aDtmKyspe3ZhciBnPWNbZl07dmFyIGg9ZDt2YXIgbT1lOzA9PWcuaW5kZXhPZihcImNocm9tZS1leHRlbnNpb246Ly9cIik/aD1aZChnKS5iPT1oJiZcImNocm9tZS1leHRlbnNpb25cIj09bTpcImh0dHBcIiE9bSYmXCJodHRwc1wiIT1tP2g9ITE6emUudGVzdChnKT9oPWg9PWc6KGc9Zy5zcGxpdChcIi5cIikuam9pbihcIlxcXFwuXCIpLGg9KG5ldyBSZWdFeHAoXCJeKC4rXFxcXC5cIitnK1wifFwiK2crXCIpJFwiLFwiaVwiKSkudGVzdChoKSk7aWYoaCl7Yz0hMDticmVhayBhfX1jPSExfWlmKCFjKXRocm93IG5ldyB0aChvZSgpKTt9KX1cbmZ1bmN0aW9uIFVqKGEpe2lmKGEubClyZXR1cm4gYS5sO2EubD1CZSgpLnRoZW4oZnVuY3Rpb24oKXtpZighYS5zKXt2YXIgYj1hLmMsYz1hLmgsZD1SaihhLmIpLGU9bmV3IFBqKGEudSxhLmYsYS5iKTtlLmY9YjtlLmI9YztlLmM9V2EoZHx8W10pO2Eucz1lLnRvU3RyaW5nKCl9YS5pPW5ldyBHaihhLnMpO1ZqKGEpfSk7cmV0dXJuIGEubH1rPVNqLnByb3RvdHlwZTtrLkxiPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1uZXcgdShcInBvcHVwLWNsb3NlZC1ieS11c2VyXCIpLGU9bmV3IHUoXCJ3ZWItc3RvcmFnZS11bnN1cHBvcnRlZFwiKSxmPXRoaXMsZz0hMTtyZXR1cm4gdGhpcy5rYSgpLnRoZW4oZnVuY3Rpb24oKXtXaihmKS50aGVuKGZ1bmN0aW9uKGgpe2h8fChhJiZ2ZShhKSxiKGUpLGc9ITApfSl9KS5vKGZ1bmN0aW9uKCl7fSkudGhlbihmdW5jdGlvbigpe2lmKCFnKXJldHVybiB5ZShhKX0pLnRoZW4oZnVuY3Rpb24oKXtpZighZylyZXR1cm4gQmQoYykudGhlbihmdW5jdGlvbigpe2IoZCl9KX0pfTtcbmsuVWI9ZnVuY3Rpb24oKXt2YXIgYT1JKCk7cmV0dXJuIVFlKGEpJiYhVWUoYSl9O2suUWI9ZnVuY3Rpb24oKXtyZXR1cm4hMX07XG5rLkpiPWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCl7aWYoIWEpcmV0dXJuIEYobmV3IHUoXCJwb3B1cC1ibG9ja2VkXCIpKTtpZihnJiYhUWUoKSlyZXR1cm4gdGhpcy5rYSgpLm8oZnVuY3Rpb24ocCl7dmUoYSk7ZShwKX0pLGQoKSxFKCk7dGhpcy5hfHwodGhpcy5hPVRqKFhqKHRoaXMpKSk7dmFyIG09dGhpcztyZXR1cm4gdGhpcy5hLnRoZW4oZnVuY3Rpb24oKXt2YXIgcD1tLmthKCkubyhmdW5jdGlvbih2KXt2ZShhKTtlKHYpO3Rocm93IHY7fSk7ZCgpO3JldHVybiBwfSkudGhlbihmdW5jdGlvbigpe25oKGMpO2lmKCFnKXt2YXIgcD1ZaihtLnUsbS5mLG0uYixiLGMsbnVsbCxmLG0uYyx2b2lkIDAsbS5oLGgpO3BlKHAsYSl9fSkubyhmdW5jdGlvbihwKXtcImF1dGgvbmV0d29yay1yZXF1ZXN0LWZhaWxlZFwiPT1wLmNvZGUmJihtLmE9bnVsbCk7dGhyb3cgcDt9KX07XG5mdW5jdGlvbiBYaihhKXthLm18fChhLnc9YS5jP0xlKGEuYyxSaihhLmIpKTpudWxsLGEubT1uZXcgRWkoYS5mLHphKGEuaCksYS53KSk7cmV0dXJuIGEubX1rLktiPWZ1bmN0aW9uKGEsYixjLGQpe3RoaXMuYXx8KHRoaXMuYT1UaihYaih0aGlzKSkpO3ZhciBlPXRoaXM7cmV0dXJuIHRoaXMuYS50aGVuKGZ1bmN0aW9uKCl7bmgoYik7dmFyIGY9WWooZS51LGUuZixlLmIsYSxiLG9lKCksYyxlLmMsdm9pZCAwLGUuaCxkKTtwZShmKX0pLm8oZnVuY3Rpb24oZil7XCJhdXRoL25ldHdvcmstcmVxdWVzdC1mYWlsZWRcIj09Zi5jb2RlJiYoZS5hPW51bGwpO3Rocm93IGY7fSl9O2sua2E9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO3JldHVybiBVaih0aGlzKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGEuaS5uYn0pLm8oZnVuY3Rpb24oKXthLmE9bnVsbDt0aHJvdyBuZXcgdShcIm5ldHdvcmstcmVxdWVzdC1mYWlsZWRcIik7fSl9O2suWGI9ZnVuY3Rpb24oKXtyZXR1cm4hMH07XG5mdW5jdGlvbiBZaihhLGIsYyxkLGUsZixnLGgsbSxwLHYpe2E9bmV3IFFqKGEsYixjLGQsZSk7YS5sPWY7YS5nPWc7YS5pPWg7YS5iPWtiKG18fG51bGwpO2EuZj1wO3JldHVybiBhLnViKHYpLnRvU3RyaW5nKCl9ZnVuY3Rpb24gVmooYSl7aWYoIWEuaSl0aHJvdyBFcnJvcihcIklmY0hhbmRsZXIgbXVzdCBiZSBpbml0aWFsaXplZCFcIik7TGooYS5pLGZ1bmN0aW9uKGIpe3ZhciBjPXt9O2lmKGImJmIuYXV0aEV2ZW50KXt2YXIgZD0hMTtiPXBoKGIuYXV0aEV2ZW50KTtmb3IoYz0wO2M8YS5nLmxlbmd0aDtjKyspZD1hLmdbY10oYil8fGQ7Yz17fTtjLnN0YXR1cz1kP1wiQUNLXCI6XCJFUlJPUlwiO3JldHVybiBFKGMpfWMuc3RhdHVzPVwiRVJST1JcIjtyZXR1cm4gRShjKX0pfVxuZnVuY3Rpb24gV2ooYSl7dmFyIGI9e3R5cGU6XCJ3ZWJTdG9yYWdlU3VwcG9ydFwifTtyZXR1cm4gVWooYSkudGhlbihmdW5jdGlvbigpe3JldHVybiBLaihhLmksYil9KS50aGVuKGZ1bmN0aW9uKGMpe2lmKGMmJmMubGVuZ3RoJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNbMF0ud2ViU3RvcmFnZVN1cHBvcnQpcmV0dXJuIGNbMF0ud2ViU3RvcmFnZVN1cHBvcnQ7dGhyb3cgRXJyb3IoKTt9KX1rLkNhPWZ1bmN0aW9uKGEpe3RoaXMuZy5wdXNoKGEpfTtrLlFhPWZ1bmN0aW9uKGEpe1VhKHRoaXMuZyxmdW5jdGlvbihiKXtyZXR1cm4gYj09YX0pfTtmdW5jdGlvbiBaaihhKXt0aGlzLmE9YXx8ZmlyZWJhc2UuSU5URVJOQUwucmVhY3ROYXRpdmUmJmZpcmViYXNlLklOVEVSTkFMLnJlYWN0TmF0aXZlLkFzeW5jU3RvcmFnZTtpZighdGhpcy5hKXRocm93IG5ldyB1KFwiaW50ZXJuYWwtZXJyb3JcIixcIlRoZSBSZWFjdCBOYXRpdmUgY29tcGF0aWJpbGl0eSBsaWJyYXJ5IHdhcyBub3QgZm91bmQuXCIpO3RoaXMudHlwZT1cImFzeW5jU3RvcmFnZVwifWs9WmoucHJvdG90eXBlO2suZ2V0PWZ1bmN0aW9uKGEpe3JldHVybiBFKHRoaXMuYS5nZXRJdGVtKGEpKS50aGVuKGZ1bmN0aW9uKGIpe3JldHVybiBiJiZUZShiKX0pfTtrLnNldD1mdW5jdGlvbihhLGIpe3JldHVybiBFKHRoaXMuYS5zZXRJdGVtKGEsUmUoYikpKX07ay5UPWZ1bmN0aW9uKGEpe3JldHVybiBFKHRoaXMuYS5yZW1vdmVJdGVtKGEpKX07ay5iYT1mdW5jdGlvbigpe307ay5oYT1mdW5jdGlvbigpe307ZnVuY3Rpb24gYWsoYSl7dGhpcy5iPWE7dGhpcy5hPXt9O3RoaXMuZj1yKHRoaXMuYyx0aGlzKX12YXIgYms9W107ZnVuY3Rpb24gY2soKXt2YXIgYT1HZSgpP3NlbGY6bnVsbDt4KGJrLGZ1bmN0aW9uKGMpe2MuYj09YSYmKGI9Yyl9KTtpZighYil7dmFyIGI9bmV3IGFrKGEpO2JrLnB1c2goYil9cmV0dXJuIGJ9XG5hay5wcm90b3R5cGUuYz1mdW5jdGlvbihhKXt2YXIgYj1hLmRhdGEuZXZlbnRUeXBlLGM9YS5kYXRhLmV2ZW50SWQsZD10aGlzLmFbYl07aWYoZCYmMDxkLmxlbmd0aCl7YS5wb3J0c1swXS5wb3N0TWVzc2FnZSh7c3RhdHVzOlwiYWNrXCIsZXZlbnRJZDpjLGV2ZW50VHlwZTpiLHJlc3BvbnNlOm51bGx9KTt2YXIgZT1bXTt4KGQsZnVuY3Rpb24oZil7ZS5wdXNoKEUoKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGYoYS5vcmlnaW4sYS5kYXRhLmRhdGEpfSkpfSk7RWMoZSkudGhlbihmdW5jdGlvbihmKXt2YXIgZz1bXTt4KGYsZnVuY3Rpb24oaCl7Zy5wdXNoKHtmdWxmaWxsZWQ6aC5NYix2YWx1ZTpoLnZhbHVlLHJlYXNvbjpoLnJlYXNvbj9oLnJlYXNvbi5tZXNzYWdlOnZvaWQgMH0pfSk7eChnLGZ1bmN0aW9uKGgpe2Zvcih2YXIgbSBpbiBoKVwidW5kZWZpbmVkXCI9PT10eXBlb2YgaFttXSYmZGVsZXRlIGhbbV19KTthLnBvcnRzWzBdLnBvc3RNZXNzYWdlKHtzdGF0dXM6XCJkb25lXCIsZXZlbnRJZDpjLFxuZXZlbnRUeXBlOmIscmVzcG9uc2U6Z30pfSl9fTtmdW5jdGlvbiBkayhhLGIsYyl7amIoYS5hKSYmYS5iLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsYS5mKTtcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEuYVtiXSYmKGEuYVtiXT1bXSk7YS5hW2JdLnB1c2goYyl9O2Z1bmN0aW9uIGVrKGEpe3RoaXMuYT1hfWVrLnByb3RvdHlwZS5wb3N0TWVzc2FnZT1mdW5jdGlvbihhLGIpe3RoaXMuYS5wb3N0TWVzc2FnZShhLGIpfTtmdW5jdGlvbiBmayhhKXt0aGlzLmM9YTt0aGlzLmI9ITE7dGhpcy5hPVtdfVxuZnVuY3Rpb24gZ2soYSxiLGMsZCl7dmFyIGUsZj1jfHx7fSxnLGgsbSxwPW51bGw7aWYoYS5iKXJldHVybiBGKEVycm9yKFwiY29ubmVjdGlvbl91bmF2YWlsYWJsZVwiKSk7dmFyIHY9ZD84MDA6NTAsQz1cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsP25ldyBNZXNzYWdlQ2hhbm5lbDpudWxsO3JldHVybihuZXcgRChmdW5jdGlvbihBLFEpe0M/KGU9TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKk1hdGgucG93KDEwLDIwKSkudG9TdHJpbmcoKSxDLnBvcnQxLnN0YXJ0KCksaD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7UShFcnJvcihcInVuc3VwcG9ydGVkX2V2ZW50XCIpKX0sdiksZz1mdW5jdGlvbih4YSl7eGEuZGF0YS5ldmVudElkPT09ZSYmKFwiYWNrXCI9PT14YS5kYXRhLnN0YXR1cz8oY2xlYXJUaW1lb3V0KGgpLG09c2V0VGltZW91dChmdW5jdGlvbigpe1EoRXJyb3IoXCJ0aW1lb3V0XCIpKX0sM0UzKSk6XCJkb25lXCI9PT14YS5kYXRhLnN0YXR1cz8oY2xlYXJUaW1lb3V0KG0pLFxuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiB4YS5kYXRhLnJlc3BvbnNlP0EoeGEuZGF0YS5yZXNwb25zZSk6UShFcnJvcihcInVua25vd25fZXJyb3JcIikpKTooY2xlYXJUaW1lb3V0KGgpLGNsZWFyVGltZW91dChtKSxRKEVycm9yKFwiaW52YWxpZF9yZXNwb25zZVwiKSkpKX0scD17bWVzc2FnZUNoYW5uZWw6Qyxvbk1lc3NhZ2U6Z30sYS5hLnB1c2gocCksQy5wb3J0MS5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGcpLGEuYy5wb3N0TWVzc2FnZSh7ZXZlbnRUeXBlOmIsZXZlbnRJZDplLGRhdGE6Zn0sW0MucG9ydDJdKSk6UShFcnJvcihcImNvbm5lY3Rpb25fdW5hdmFpbGFibGVcIikpfSkpLnRoZW4oZnVuY3Rpb24oQSl7aGsoYSxwKTtyZXR1cm4gQX0pLm8oZnVuY3Rpb24oQSl7aGsoYSxwKTt0aHJvdyBBO30pfVxuZnVuY3Rpb24gaGsoYSxiKXtpZihiKXt2YXIgYz1iLm1lc3NhZ2VDaGFubmVsLGQ9Yi5vbk1lc3NhZ2U7YyYmKGMucG9ydDEucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixkKSxjLnBvcnQxLmNsb3NlKCkpO1VhKGEuYSxmdW5jdGlvbihlKXtyZXR1cm4gZT09Yn0pfX1may5wcm90b3R5cGUuY2xvc2U9ZnVuY3Rpb24oKXtmb3IoOzA8dGhpcy5hLmxlbmd0aDspaGsodGhpcyx0aGlzLmFbMF0pO3RoaXMuYj0hMH07ZnVuY3Rpb24gaWsoKXtpZighamsoKSl0aHJvdyBuZXcgdShcIndlYi1zdG9yYWdlLXVuc3VwcG9ydGVkXCIpO3RoaXMuYz17fTt0aGlzLmE9W107dGhpcy5iPTA7dGhpcy51PWwuaW5kZXhlZERCO3RoaXMudHlwZT1cImluZGV4ZWREQlwiO3RoaXMuZz10aGlzLmw9dGhpcy5mPXRoaXMuaT1udWxsO3RoaXMucz0hMTt0aGlzLmg9bnVsbDt2YXIgYT10aGlzO0dlKCkmJnNlbGY/KHRoaXMubD1jaygpLGRrKHRoaXMubCxcImtleUNoYW5nZWRcIixmdW5jdGlvbihiLGMpe3JldHVybiBrayhhKS50aGVuKGZ1bmN0aW9uKGQpezA8ZC5sZW5ndGgmJngoYS5hLGZ1bmN0aW9uKGUpe2UoZCl9KTtyZXR1cm57a2V5UHJvY2Vzc2VkOlNhKGQsYy5rZXkpfX0pfSksZGsodGhpcy5sLFwicGluZ1wiLGZ1bmN0aW9uKCl7cmV0dXJuIEUoW1wia2V5Q2hhbmdlZFwiXSl9KSk6YmYoKS50aGVuKGZ1bmN0aW9uKGIpe2lmKGEuaD1iKWEuZz1uZXcgZmsobmV3IGVrKGIpKSxnayhhLmcsXCJwaW5nXCIsbnVsbCwhMCkudGhlbihmdW5jdGlvbihjKXtjWzBdLmZ1bGZpbGxlZCYmXG5TYShjWzBdLnZhbHVlLFwia2V5Q2hhbmdlZFwiKSYmKGEucz0hMCl9KS5vKGZ1bmN0aW9uKCl7fSl9KX12YXIgbGs7ZnVuY3Rpb24gbWsoYSl7cmV0dXJuIG5ldyBEKGZ1bmN0aW9uKGIsYyl7dmFyIGQ9YS51LmRlbGV0ZURhdGFiYXNlKFwiZmlyZWJhc2VMb2NhbFN0b3JhZ2VEYlwiKTtkLm9uc3VjY2Vzcz1mdW5jdGlvbigpe2IoKX07ZC5vbmVycm9yPWZ1bmN0aW9uKGUpe2MoRXJyb3IoZS50YXJnZXQuZXJyb3IpKX19KX1cbmZ1bmN0aW9uIG5rKGEpe3JldHVybiBuZXcgRChmdW5jdGlvbihiLGMpe3ZhciBkPWEudS5vcGVuKFwiZmlyZWJhc2VMb2NhbFN0b3JhZ2VEYlwiLDEpO2Qub25lcnJvcj1mdW5jdGlvbihlKXt0cnl7ZS5wcmV2ZW50RGVmYXVsdCgpfWNhdGNoKGYpe31jKEVycm9yKGUudGFyZ2V0LmVycm9yKSl9O2Qub251cGdyYWRlbmVlZGVkPWZ1bmN0aW9uKGUpe2U9ZS50YXJnZXQucmVzdWx0O3RyeXtlLmNyZWF0ZU9iamVjdFN0b3JlKFwiZmlyZWJhc2VMb2NhbFN0b3JhZ2VcIix7a2V5UGF0aDpcImZiYXNlX2tleVwifSl9Y2F0Y2goZil7YyhmKX19O2Qub25zdWNjZXNzPWZ1bmN0aW9uKGUpe2U9ZS50YXJnZXQucmVzdWx0O2Uub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucyhcImZpcmViYXNlTG9jYWxTdG9yYWdlXCIpP2IoZSk6bWsoYSkudGhlbihmdW5jdGlvbigpe3JldHVybiBuayhhKX0pLnRoZW4oZnVuY3Rpb24oZil7YihmKX0pLm8oZnVuY3Rpb24oZil7YyhmKX0pfX0pfVxuZnVuY3Rpb24gb2soYSl7YS5tfHwoYS5tPW5rKGEpKTtyZXR1cm4gYS5tfWZ1bmN0aW9uIGprKCl7dHJ5e3JldHVybiEhbC5pbmRleGVkREJ9Y2F0Y2goYSl7cmV0dXJuITF9fWZ1bmN0aW9uIHBrKGEpe3JldHVybiBhLm9iamVjdFN0b3JlKFwiZmlyZWJhc2VMb2NhbFN0b3JhZ2VcIil9ZnVuY3Rpb24gcWsoYSxiKXtyZXR1cm4gYS50cmFuc2FjdGlvbihbXCJmaXJlYmFzZUxvY2FsU3RvcmFnZVwiXSxiP1wicmVhZHdyaXRlXCI6XCJyZWFkb25seVwiKX1mdW5jdGlvbiByayhhKXtyZXR1cm4gbmV3IEQoZnVuY3Rpb24oYixjKXthLm9uc3VjY2Vzcz1mdW5jdGlvbihkKXtkJiZkLnRhcmdldD9iKGQudGFyZ2V0LnJlc3VsdCk6YigpfTthLm9uZXJyb3I9ZnVuY3Rpb24oZCl7YyhkLnRhcmdldC5lcnJvcil9fSl9az1pay5wcm90b3R5cGU7XG5rLnNldD1mdW5jdGlvbihhLGIpe3ZhciBjPSExLGQsZT10aGlzO3JldHVybiBvayh0aGlzKS50aGVuKGZ1bmN0aW9uKGYpe2Q9ZjtmPXBrKHFrKGQsITApKTtyZXR1cm4gcmsoZi5nZXQoYSkpfSkudGhlbihmdW5jdGlvbihmKXt2YXIgZz1wayhxayhkLCEwKSk7aWYoZilyZXR1cm4gZi52YWx1ZT1iLHJrKGcucHV0KGYpKTtlLmIrKztjPSEwO2Y9e307Zi5mYmFzZV9rZXk9YTtmLnZhbHVlPWI7cmV0dXJuIHJrKGcuYWRkKGYpKX0pLnRoZW4oZnVuY3Rpb24oKXtlLmNbYV09YjtyZXR1cm4gc2soZSxhKX0pLm1hKGZ1bmN0aW9uKCl7YyYmZS5iLS19KX07ZnVuY3Rpb24gc2soYSxiKXtyZXR1cm4gYS5nJiZhLmgmJmFmKCk9PT1hLmg/Z2soYS5nLFwia2V5Q2hhbmdlZFwiLHtrZXk6Yn0sYS5zKS50aGVuKGZ1bmN0aW9uKCl7fSkubyhmdW5jdGlvbigpe30pOkUoKX1cbmsuZ2V0PWZ1bmN0aW9uKGEpe3JldHVybiBvayh0aGlzKS50aGVuKGZ1bmN0aW9uKGIpe3JldHVybiByayhwayhxayhiLCExKSkuZ2V0KGEpKX0pLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuIGImJmIudmFsdWV9KX07ay5UPWZ1bmN0aW9uKGEpe3ZhciBiPSExLGM9dGhpcztyZXR1cm4gb2sodGhpcykudGhlbihmdW5jdGlvbihkKXtiPSEwO2MuYisrO3JldHVybiByayhwayhxayhkLCEwKSlbXCJkZWxldGVcIl0oYSkpfSkudGhlbihmdW5jdGlvbigpe2RlbGV0ZSBjLmNbYV07cmV0dXJuIHNrKGMsYSl9KS5tYShmdW5jdGlvbigpe2ImJmMuYi0tfSl9O1xuZnVuY3Rpb24ga2soYSl7cmV0dXJuIG9rKGEpLnRoZW4oZnVuY3Rpb24oYil7dmFyIGM9cGsocWsoYiwhMSkpO3JldHVybiBjLmdldEFsbD9yayhjLmdldEFsbCgpKTpuZXcgRChmdW5jdGlvbihkLGUpe3ZhciBmPVtdLGc9Yy5vcGVuQ3Vyc29yKCk7Zy5vbnN1Y2Nlc3M9ZnVuY3Rpb24oaCl7KGg9aC50YXJnZXQucmVzdWx0KT8oZi5wdXNoKGgudmFsdWUpLGhbXCJjb250aW51ZVwiXSgpKTpkKGYpfTtnLm9uZXJyb3I9ZnVuY3Rpb24oaCl7ZShoLnRhcmdldC5lcnJvcil9fSl9KS50aGVuKGZ1bmN0aW9uKGIpe3ZhciBjPXt9LGQ9W107aWYoMD09YS5iKXtmb3IoZD0wO2Q8Yi5sZW5ndGg7ZCsrKWNbYltkXS5mYmFzZV9rZXldPWJbZF0udmFsdWU7ZD1xZShhLmMsYyk7YS5jPWN9cmV0dXJuIGR9KX1rLmJhPWZ1bmN0aW9uKGEpezA9PXRoaXMuYS5sZW5ndGgmJnRrKHRoaXMpO3RoaXMuYS5wdXNoKGEpfTtcbmsuaGE9ZnVuY3Rpb24oYSl7VWEodGhpcy5hLGZ1bmN0aW9uKGIpe3JldHVybiBiPT1hfSk7MD09dGhpcy5hLmxlbmd0aCYmdWsodGhpcyl9O2Z1bmN0aW9uIHRrKGEpe2Z1bmN0aW9uIGIoKXthLmY9c2V0VGltZW91dChmdW5jdGlvbigpe2EuaT1rayhhKS50aGVuKGZ1bmN0aW9uKGMpezA8Yy5sZW5ndGgmJngoYS5hLGZ1bmN0aW9uKGQpe2QoYyl9KX0pLnRoZW4oZnVuY3Rpb24oKXtiKCl9KS5vKGZ1bmN0aW9uKGMpe1wiU1RPUF9FVkVOVFwiIT1jLm1lc3NhZ2UmJmIoKX0pfSw4MDApfXVrKGEpO2IoKX1mdW5jdGlvbiB1ayhhKXthLmkmJmEuaS5jYW5jZWwoXCJTVE9QX0VWRU5UXCIpO2EuZiYmKGNsZWFyVGltZW91dChhLmYpLGEuZj1udWxsKX07ZnVuY3Rpb24gdmsoYSl7dmFyIGI9dGhpcyxjPW51bGw7dGhpcy5hPVtdO3RoaXMudHlwZT1cImluZGV4ZWREQlwiO3RoaXMuYz1hO3RoaXMuYj1FKCkudGhlbihmdW5jdGlvbigpe2lmKGprKCkpe3ZhciBkPU5lKCksZT1cIl9fc2FrXCIrZDtsa3x8KGxrPW5ldyBpayk7Yz1saztyZXR1cm4gYy5zZXQoZSxkKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGMuZ2V0KGUpfSkudGhlbihmdW5jdGlvbihmKXtpZihmIT09ZCl0aHJvdyBFcnJvcihcImluZGV4ZWREQiBub3Qgc3VwcG9ydGVkIVwiKTtyZXR1cm4gYy5UKGUpfSkudGhlbihmdW5jdGlvbigpe3JldHVybiBjfSkubyhmdW5jdGlvbigpe3JldHVybiBiLmN9KX1yZXR1cm4gYi5jfSkudGhlbihmdW5jdGlvbihkKXtiLnR5cGU9ZC50eXBlO2QuYmEoZnVuY3Rpb24oZSl7eChiLmEsZnVuY3Rpb24oZil7ZihlKX0pfSk7cmV0dXJuIGR9KX1rPXZrLnByb3RvdHlwZTtrLmdldD1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5iLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuIGIuZ2V0KGEpfSl9O1xuay5zZXQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5iLnRoZW4oZnVuY3Rpb24oYyl7cmV0dXJuIGMuc2V0KGEsYil9KX07ay5UPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmIudGhlbihmdW5jdGlvbihiKXtyZXR1cm4gYi5UKGEpfSl9O2suYmE9ZnVuY3Rpb24oYSl7dGhpcy5hLnB1c2goYSl9O2suaGE9ZnVuY3Rpb24oYSl7VWEodGhpcy5hLGZ1bmN0aW9uKGIpe3JldHVybiBiPT1hfSl9O2Z1bmN0aW9uIHdrKCl7dGhpcy5hPXt9O3RoaXMudHlwZT1cImluTWVtb3J5XCJ9az13ay5wcm90b3R5cGU7ay5nZXQ9ZnVuY3Rpb24oYSl7cmV0dXJuIEUodGhpcy5hW2FdKX07ay5zZXQ9ZnVuY3Rpb24oYSxiKXt0aGlzLmFbYV09YjtyZXR1cm4gRSgpfTtrLlQ9ZnVuY3Rpb24oYSl7ZGVsZXRlIHRoaXMuYVthXTtyZXR1cm4gRSgpfTtrLmJhPWZ1bmN0aW9uKCl7fTtrLmhhPWZ1bmN0aW9uKCl7fTtmdW5jdGlvbiB4aygpe2lmKCF5aygpKXtpZihcIk5vZGVcIj09SGUoKSl0aHJvdyBuZXcgdShcImludGVybmFsLWVycm9yXCIsXCJUaGUgTG9jYWxTdG9yYWdlIGNvbXBhdGliaWxpdHkgbGlicmFyeSB3YXMgbm90IGZvdW5kLlwiKTt0aHJvdyBuZXcgdShcIndlYi1zdG9yYWdlLXVuc3VwcG9ydGVkXCIpO310aGlzLmE9emsoKXx8ZmlyZWJhc2UuSU5URVJOQUwubm9kZS5sb2NhbFN0b3JhZ2U7dGhpcy50eXBlPVwibG9jYWxTdG9yYWdlXCJ9ZnVuY3Rpb24gemsoKXt0cnl7dmFyIGE9bC5sb2NhbFN0b3JhZ2UsYj1OZSgpO2EmJihhLnNldEl0ZW0oYixcIjFcIiksYS5yZW1vdmVJdGVtKGIpKTtyZXR1cm4gYX1jYXRjaChjKXtyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiB5aygpe3ZhciBhPVwiTm9kZVwiPT1IZSgpO2E9emsoKXx8YSYmZmlyZWJhc2UuSU5URVJOQUwubm9kZSYmZmlyZWJhc2UuSU5URVJOQUwubm9kZS5sb2NhbFN0b3JhZ2U7aWYoIWEpcmV0dXJuITE7dHJ5e3JldHVybiBhLnNldEl0ZW0oXCJfX3Nha1wiLFwiMVwiKSxhLnJlbW92ZUl0ZW0oXCJfX3Nha1wiKSwhMH1jYXRjaChiKXtyZXR1cm4hMX19az14ay5wcm90b3R5cGU7ay5nZXQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztyZXR1cm4gRSgpLnRoZW4oZnVuY3Rpb24oKXt2YXIgYz1iLmEuZ2V0SXRlbShhKTtyZXR1cm4gVGUoYyl9KX07ay5zZXQ9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzO3JldHVybiBFKCkudGhlbihmdW5jdGlvbigpe3ZhciBkPVJlKGIpO251bGw9PT1kP2MuVChhKTpjLmEuc2V0SXRlbShhLGQpfSl9O2suVD1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBFKCkudGhlbihmdW5jdGlvbigpe2IuYS5yZW1vdmVJdGVtKGEpfSl9O1xuay5iYT1mdW5jdGlvbihhKXtsLndpbmRvdyYmamQobC53aW5kb3csXCJzdG9yYWdlXCIsYSl9O2suaGE9ZnVuY3Rpb24oYSl7bC53aW5kb3cmJnRkKGwud2luZG93LFwic3RvcmFnZVwiLGEpfTtmdW5jdGlvbiBBaygpe3RoaXMudHlwZT1cIm51bGxTdG9yYWdlXCJ9az1Bay5wcm90b3R5cGU7ay5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gRShudWxsKX07ay5zZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gRSgpfTtrLlQ9ZnVuY3Rpb24oKXtyZXR1cm4gRSgpfTtrLmJhPWZ1bmN0aW9uKCl7fTtrLmhhPWZ1bmN0aW9uKCl7fTtmdW5jdGlvbiBCaygpe2lmKCFDaygpKXtpZihcIk5vZGVcIj09SGUoKSl0aHJvdyBuZXcgdShcImludGVybmFsLWVycm9yXCIsXCJUaGUgU2Vzc2lvblN0b3JhZ2UgY29tcGF0aWJpbGl0eSBsaWJyYXJ5IHdhcyBub3QgZm91bmQuXCIpO3Rocm93IG5ldyB1KFwid2ViLXN0b3JhZ2UtdW5zdXBwb3J0ZWRcIik7fXRoaXMuYT1EaygpfHxmaXJlYmFzZS5JTlRFUk5BTC5ub2RlLnNlc3Npb25TdG9yYWdlO3RoaXMudHlwZT1cInNlc3Npb25TdG9yYWdlXCJ9ZnVuY3Rpb24gRGsoKXt0cnl7dmFyIGE9bC5zZXNzaW9uU3RvcmFnZSxiPU5lKCk7YSYmKGEuc2V0SXRlbShiLFwiMVwiKSxhLnJlbW92ZUl0ZW0oYikpO3JldHVybiBhfWNhdGNoKGMpe3JldHVybiBudWxsfX1cbmZ1bmN0aW9uIENrKCl7dmFyIGE9XCJOb2RlXCI9PUhlKCk7YT1EaygpfHxhJiZmaXJlYmFzZS5JTlRFUk5BTC5ub2RlJiZmaXJlYmFzZS5JTlRFUk5BTC5ub2RlLnNlc3Npb25TdG9yYWdlO2lmKCFhKXJldHVybiExO3RyeXtyZXR1cm4gYS5zZXRJdGVtKFwiX19zYWtcIixcIjFcIiksYS5yZW1vdmVJdGVtKFwiX19zYWtcIiksITB9Y2F0Y2goYil7cmV0dXJuITF9fWs9QmsucHJvdG90eXBlO2suZ2V0PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIEUoKS50aGVuKGZ1bmN0aW9uKCl7dmFyIGM9Yi5hLmdldEl0ZW0oYSk7cmV0dXJuIFRlKGMpfSl9O2suc2V0PWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcztyZXR1cm4gRSgpLnRoZW4oZnVuY3Rpb24oKXt2YXIgZD1SZShiKTtudWxsPT09ZD9jLlQoYSk6Yy5hLnNldEl0ZW0oYSxkKX0pfTtrLlQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztyZXR1cm4gRSgpLnRoZW4oZnVuY3Rpb24oKXtiLmEucmVtb3ZlSXRlbShhKX0pfTtrLmJhPWZ1bmN0aW9uKCl7fTtcbmsuaGE9ZnVuY3Rpb24oKXt9O2Z1bmN0aW9uIEVrKCl7dmFyIGE9e307YS5Ccm93c2VyPUZrO2EuTm9kZT1HazthLlJlYWN0TmF0aXZlPUhrO2EuV29ya2VyPUlrO3RoaXMuYT1hW0hlKCldfXZhciBKayxGaz17Rjp4aywkYTpCa30sR2s9e0Y6eGssJGE6Qmt9LEhrPXtGOlpqLCRhOkFrfSxJaz17Rjp4aywkYTpBa307LypcblxuIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcblxuIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbnZhciBLaz17b2Q6XCJsb2NhbFwiLE5PTkU6XCJub25lXCIscWQ6XCJzZXNzaW9uXCJ9O2Z1bmN0aW9uIExrKGEpe3ZhciBiPW5ldyB1KFwiaW52YWxpZC1wZXJzaXN0ZW5jZS10eXBlXCIpLGM9bmV3IHUoXCJ1bnN1cHBvcnRlZC1wZXJzaXN0ZW5jZS10eXBlXCIpO2E6e2ZvcihkIGluIEtrKWlmKEtrW2RdPT1hKXt2YXIgZD0hMDticmVhayBhfWQ9ITF9aWYoIWR8fFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBiO3N3aXRjaChIZSgpKXtjYXNlIFwiUmVhY3ROYXRpdmVcIjppZihcInNlc3Npb25cIj09PWEpdGhyb3cgYzticmVhaztjYXNlIFwiTm9kZVwiOmlmKFwibm9uZVwiIT09YSl0aHJvdyBjO2JyZWFrO2Nhc2UgXCJXb3JrZXJcIjppZihcInNlc3Npb25cIj09PWF8fCFqaygpJiZcIm5vbmVcIiE9PWEpdGhyb3cgYzticmVhaztkZWZhdWx0OmlmKCFNZSgpJiZcIm5vbmVcIiE9PWEpdGhyb3cgYzt9fVxuZnVuY3Rpb24gTWsoKXt2YXIgYT0hVWUoSSgpKSYmRmUoKT8hMDohMSxiPVFlKCksYz1NZSgpO3RoaXMubT1hO3RoaXMuaD1iO3RoaXMubD1jO3RoaXMuYT17fTtKa3x8KEprPW5ldyBFayk7YT1Kazt0cnl7dGhpcy5nPSFuZSgpJiYkZSgpfHwhbC5pbmRleGVkREI/bmV3IGEuYS5GOm5ldyB2ayhHZSgpP25ldyB3azpuZXcgYS5hLkYpfWNhdGNoKGQpe3RoaXMuZz1uZXcgd2ssdGhpcy5oPSEwfXRyeXt0aGlzLmk9bmV3IGEuYS4kYX1jYXRjaChkKXt0aGlzLmk9bmV3IHdrfXRoaXMudT1uZXcgd2s7dGhpcy5mPXIodGhpcy5WYix0aGlzKTt0aGlzLmI9e319dmFyIE5rO2Z1bmN0aW9uIE9rKCl7Tmt8fChOaz1uZXcgTWspO3JldHVybiBOa31mdW5jdGlvbiBQayhhLGIpe3N3aXRjaChiKXtjYXNlIFwic2Vzc2lvblwiOnJldHVybiBhLmk7Y2FzZSBcIm5vbmVcIjpyZXR1cm4gYS51O2RlZmF1bHQ6cmV0dXJuIGEuZ319XG5mdW5jdGlvbiBRayhhLGIpe3JldHVyblwiZmlyZWJhc2U6XCIrYS5uYW1lKyhiP1wiOlwiK2I6XCJcIil9ZnVuY3Rpb24gUmsoYSxiLGMpe3ZhciBkPVFrKGIsYyksZT1QayhhLGIuRik7cmV0dXJuIGEuZ2V0KGIsYykudGhlbihmdW5jdGlvbihmKXt2YXIgZz1udWxsO3RyeXtnPVRlKGwubG9jYWxTdG9yYWdlLmdldEl0ZW0oZCkpfWNhdGNoKGgpe31pZihnJiYhZilyZXR1cm4gbC5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShkKSxhLnNldChiLGcsYyk7ZyYmZiYmXCJsb2NhbFN0b3JhZ2VcIiE9ZS50eXBlJiZsLmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGQpfSl9az1Nay5wcm90b3R5cGU7ay5nZXQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUGsodGhpcyxhLkYpLmdldChRayhhLGIpKX07ZnVuY3Rpb24gU2soYSxiLGMpe2M9UWsoYixjKTtcImxvY2FsXCI9PWIuRiYmKGEuYltjXT1udWxsKTtyZXR1cm4gUGsoYSxiLkYpLlQoYyl9XG5rLnNldD1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9UWsoYSxjKSxlPXRoaXMsZj1Qayh0aGlzLGEuRik7cmV0dXJuIGYuc2V0KGQsYikudGhlbihmdW5jdGlvbigpe3JldHVybiBmLmdldChkKX0pLnRoZW4oZnVuY3Rpb24oZyl7XCJsb2NhbFwiPT1hLkYmJihlLmJbZF09Zyl9KX07ay5hZGRMaXN0ZW5lcj1mdW5jdGlvbihhLGIsYyl7YT1RayhhLGIpO3RoaXMubCYmKHRoaXMuYlthXT1sLmxvY2FsU3RvcmFnZS5nZXRJdGVtKGEpKTtqYih0aGlzLmEpJiYoUGsodGhpcyxcImxvY2FsXCIpLmJhKHRoaXMuZiksdGhpcy5ofHwobmUoKXx8ISRlKCkpJiZsLmluZGV4ZWREQnx8IXRoaXMubHx8VGsodGhpcykpO3RoaXMuYVthXXx8KHRoaXMuYVthXT1bXSk7dGhpcy5hW2FdLnB1c2goYyl9O1xuay5yZW1vdmVMaXN0ZW5lcj1mdW5jdGlvbihhLGIsYyl7YT1RayhhLGIpO3RoaXMuYVthXSYmKFVhKHRoaXMuYVthXSxmdW5jdGlvbihkKXtyZXR1cm4gZD09Y30pLDA9PXRoaXMuYVthXS5sZW5ndGgmJmRlbGV0ZSB0aGlzLmFbYV0pO2piKHRoaXMuYSkmJihQayh0aGlzLFwibG9jYWxcIikuaGEodGhpcy5mKSxVayh0aGlzKSl9O2Z1bmN0aW9uIFRrKGEpe1VrKGEpO2EuYz1zZXRJbnRlcnZhbChmdW5jdGlvbigpe2Zvcih2YXIgYiBpbiBhLmEpe3ZhciBjPWwubG9jYWxTdG9yYWdlLmdldEl0ZW0oYiksZD1hLmJbYl07YyE9ZCYmKGEuYltiXT1jLGM9bmV3IFljKHt0eXBlOlwic3RvcmFnZVwiLGtleTpiLHRhcmdldDp3aW5kb3csb2xkVmFsdWU6ZCxuZXdWYWx1ZTpjLGE6ITB9KSxhLlZiKGMpKX19LDFFMyl9ZnVuY3Rpb24gVWsoYSl7YS5jJiYoY2xlYXJJbnRlcnZhbChhLmMpLGEuYz1udWxsKX1cbmsuVmI9ZnVuY3Rpb24oYSl7aWYoYSYmYS5mKXt2YXIgYj1hLmEua2V5O2lmKG51bGw9PWIpZm9yKHZhciBjIGluIHRoaXMuYSl7dmFyIGQ9dGhpcy5iW2NdO1widW5kZWZpbmVkXCI9PT10eXBlb2YgZCYmKGQ9bnVsbCk7dmFyIGU9bC5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShjKTtlIT09ZCYmKHRoaXMuYltjXT1lLHRoaXMuaWIoYykpfWVsc2UgaWYoMD09Yi5pbmRleE9mKFwiZmlyZWJhc2U6XCIpJiZ0aGlzLmFbYl0pe1widW5kZWZpbmVkXCIhPT10eXBlb2YgYS5hLmE/UGsodGhpcyxcImxvY2FsXCIpLmhhKHRoaXMuZik6VWsodGhpcyk7aWYodGhpcy5tKWlmKGM9bC5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShiKSxkPWEuYS5uZXdWYWx1ZSxkIT09YyludWxsIT09ZD9sLmxvY2FsU3RvcmFnZS5zZXRJdGVtKGIsZCk6bC5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShiKTtlbHNlIGlmKHRoaXMuYltiXT09PWQmJlwidW5kZWZpbmVkXCI9PT10eXBlb2YgYS5hLmEpcmV0dXJuO3ZhciBmPXRoaXM7Yz1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCIhPT1cbnR5cGVvZiBhLmEuYXx8Zi5iW2JdIT09bC5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShiKSlmLmJbYl09bC5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShiKSxmLmliKGIpfTtTYiYmY2MmJjEwPT1jYyYmbC5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShiKSE9PWEuYS5uZXdWYWx1ZSYmYS5hLm5ld1ZhbHVlIT09YS5hLm9sZFZhbHVlP3NldFRpbWVvdXQoYywxMCk6YygpfX1lbHNlIHgoYSxyKHRoaXMuaWIsdGhpcykpfTtrLmliPWZ1bmN0aW9uKGEpe3RoaXMuYVthXSYmeCh0aGlzLmFbYV0sZnVuY3Rpb24oYil7YigpfSl9O2Z1bmN0aW9uIFZrKGEpe3RoaXMuYT1hO3RoaXMuYj1PaygpfXZhciBXaz17bmFtZTpcImF1dGhFdmVudFwiLEY6XCJsb2NhbFwifTtmdW5jdGlvbiBYayhhKXtyZXR1cm4gYS5iLmdldChXayxhLmEpLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuIHBoKGIpfSl9O2Z1bmN0aW9uIFlrKCl7dGhpcy5hPU9rKCl9O2Z1bmN0aW9uIFprKCl7dGhpcy5iPS0xfTtmdW5jdGlvbiAkayhhLGIpe3RoaXMuYj1hbDt0aGlzLmY9bC5VaW50OEFycmF5P25ldyBVaW50OEFycmF5KHRoaXMuYik6QXJyYXkodGhpcy5iKTt0aGlzLmc9dGhpcy5jPTA7dGhpcy5hPVtdO3RoaXMuaT1hO3RoaXMuaD1iO3RoaXMubD1sLkludDMyQXJyYXk/bmV3IEludDMyQXJyYXkoNjQpOkFycmF5KDY0KTt2b2lkIDA9PT1ibCYmKGwuSW50MzJBcnJheT9ibD1uZXcgSW50MzJBcnJheShjbCk6Ymw9Y2wpO3RoaXMucmVzZXQoKX12YXIgYmw7dCgkayxaayk7Zm9yKHZhciBhbD02NCxkbD1hbC0xLGVsPVtdLGZsPTA7Zmw8ZGw7ZmwrKyllbFtmbF09MDt2YXIgZ2w9VmEoMTI4LGVsKTskay5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmc9dGhpcy5jPTA7dGhpcy5hPWwuSW50MzJBcnJheT9uZXcgSW50MzJBcnJheSh0aGlzLmgpOldhKHRoaXMuaCl9O1xuZnVuY3Rpb24gaGwoYSl7Zm9yKHZhciBiPWEuZixjPWEubCxkPTAsZT0wO2U8Yi5sZW5ndGg7KWNbZCsrXT1iW2VdPDwyNHxiW2UrMV08PDE2fGJbZSsyXTw8OHxiW2UrM10sZT00KmQ7Zm9yKGI9MTY7NjQ+YjtiKyspe2U9Y1tiLTE1XXwwO2Q9Y1tiLTJdfDA7dmFyIGY9KGNbYi0xNl18MCkrKChlPj4+N3xlPDwyNSleKGU+Pj4xOHxlPDwxNCleZT4+PjMpfDAsZz0oY1tiLTddfDApKygoZD4+PjE3fGQ8PDE1KV4oZD4+PjE5fGQ8PDEzKV5kPj4+MTApfDA7Y1tiXT1mK2d8MH1kPWEuYVswXXwwO2U9YS5hWzFdfDA7dmFyIGg9YS5hWzJdfDAsbT1hLmFbM118MCxwPWEuYVs0XXwwLHY9YS5hWzVdfDAsQz1hLmFbNl18MDtmPWEuYVs3XXwwO2ZvcihiPTA7NjQ+YjtiKyspe3ZhciBBPSgoZD4+PjJ8ZDw8MzApXihkPj4+MTN8ZDw8MTkpXihkPj4+MjJ8ZDw8MTApKSsoZCZlXmQmaF5lJmgpfDA7Zz1wJnZefnAmQztmPWYrKChwPj4+NnxwPDwyNileKHA+Pj4xMXxwPDwyMSleKHA+Pj4yNXxwPDxcbjcpKXwwO2c9ZysoYmxbYl18MCl8MDtnPWYrKGcrKGNbYl18MCl8MCl8MDtmPUM7Qz12O3Y9cDtwPW0rZ3wwO209aDtoPWU7ZT1kO2Q9ZytBfDB9YS5hWzBdPWEuYVswXStkfDA7YS5hWzFdPWEuYVsxXStlfDA7YS5hWzJdPWEuYVsyXStofDA7YS5hWzNdPWEuYVszXSttfDA7YS5hWzRdPWEuYVs0XStwfDA7YS5hWzVdPWEuYVs1XSt2fDA7YS5hWzZdPWEuYVs2XStDfDA7YS5hWzddPWEuYVs3XStmfDB9XG5mdW5jdGlvbiBpbChhLGIsYyl7dm9pZCAwPT09YyYmKGM9Yi5sZW5ndGgpO3ZhciBkPTAsZT1hLmM7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiKWZvcig7ZDxjOylhLmZbZSsrXT1iLmNoYXJDb2RlQXQoZCsrKSxlPT1hLmImJihobChhKSxlPTApO2Vsc2UgaWYobWEoYikpZm9yKDtkPGM7KXt2YXIgZj1iW2QrK107aWYoIShcIm51bWJlclwiPT10eXBlb2YgZiYmMDw9ZiYmMjU1Pj1mJiZmPT0oZnwwKSkpdGhyb3cgRXJyb3IoXCJtZXNzYWdlIG11c3QgYmUgYSBieXRlIGFycmF5XCIpO2EuZltlKytdPWY7ZT09YS5iJiYoaGwoYSksZT0wKX1lbHNlIHRocm93IEVycm9yKFwibWVzc2FnZSBtdXN0IGJlIHN0cmluZyBvciBhcnJheVwiKTthLmM9ZTthLmcrPWN9XG52YXIgY2w9WzExMTYzNTI0MDgsMTg5OTQ0NzQ0MSwzMDQ5MzIzNDcxLDM5MjEwMDk1NzMsOTYxOTg3MTYzLDE1MDg5NzA5OTMsMjQ1MzYzNTc0OCwyODcwNzYzMjIxLDM2MjQzODEwODAsMzEwNTk4NDAxLDYwNzIyNTI3OCwxNDI2ODgxOTg3LDE5MjUwNzgzODgsMjE2MjA3ODIwNiwyNjE0ODg4MTAzLDMyNDgyMjI1ODAsMzgzNTM5MDQwMSw0MDIyMjI0Nzc0LDI2NDM0NzA3OCw2MDQ4MDc2MjgsNzcwMjU1OTgzLDEyNDkxNTAxMjIsMTU1NTA4MTY5MiwxOTk2MDY0OTg2LDI1NTQyMjA4ODIsMjgyMTgzNDM0OSwyOTUyOTk2ODA4LDMyMTAzMTM2NzEsMzMzNjU3MTg5MSwzNTg0NTI4NzExLDExMzkyNjk5MywzMzgyNDE4OTUsNjY2MzA3MjA1LDc3MzUyOTkxMiwxMjk0NzU3MzcyLDEzOTYxODIyOTEsMTY5NTE4MzcwMCwxOTg2NjYxMDUxLDIxNzcwMjYzNTAsMjQ1Njk1NjAzNywyNzMwNDg1OTIxLDI4MjAzMDI0MTEsMzI1OTczMDgwMCwzMzQ1NzY0NzcxLDM1MTYwNjU4MTcsMzYwMDM1MjgwNCxcbjQwOTQ1NzE5MDksMjc1NDIzMzQ0LDQzMDIyNzczNCw1MDY5NDg2MTYsNjU5MDYwNTU2LDg4Mzk5Nzg3Nyw5NTgxMzk1NzEsMTMyMjgyMjIxOCwxNTM3MDAyMDYzLDE3NDc4NzM3NzksMTk1NTU2MjIyMiwyMDI0MTA0ODE1LDIyMjc3MzA0NTIsMjM2MTg1MjQyNCwyNDI4NDM2NDc0LDI3NTY3MzQxODcsMzIwNDAzMTQ3OSwzMzI5MzI1Mjk4XTtmdW5jdGlvbiBqbCgpeyRrLmNhbGwodGhpcyw4LGtsKX10KGpsLCRrKTt2YXIga2w9WzE3NzkwMzM3MDMsMzE0NDEzNDI3NywxMDEzOTA0MjQyLDI3NzM0ODA3NjIsMTM1OTg5MzExOSwyNjAwODIyOTI0LDUyODczNDYzNSwxNTQxNDU5MjI1XTtmdW5jdGlvbiBsbChhLGIsYyxkLGUpe3RoaXMudT1hO3RoaXMuaT1iO3RoaXMubD1jO3RoaXMubT1kfHxudWxsO3RoaXMucz1lfHxudWxsO3RoaXMuaD1iK1wiOlwiK2M7dGhpcy53PW5ldyBZazt0aGlzLmc9bmV3IFZrKHRoaXMuaCk7dGhpcy5mPW51bGw7dGhpcy5iPVtdO3RoaXMuYT10aGlzLmM9bnVsbH1mdW5jdGlvbiBtbChhKXtyZXR1cm4gbmV3IHUoXCJpbnZhbGlkLWNvcmRvdmEtY29uZmlndXJhdGlvblwiLGEpfWs9bGwucHJvdG90eXBlO1xuay5rYT1mdW5jdGlvbigpe3JldHVybiB0aGlzLkdhP3RoaXMuR2E6dGhpcy5HYT1DZSgpLnRoZW4oZnVuY3Rpb24oKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgSihcInVuaXZlcnNhbExpbmtzLnN1YnNjcmliZVwiLGwpKXRocm93IG1sKFwiY29yZG92YS11bml2ZXJzYWwtbGlua3MtcGx1Z2luLWZpeCBpcyBub3QgaW5zdGFsbGVkXCIpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgSihcIkJ1aWxkSW5mby5wYWNrYWdlTmFtZVwiLGwpKXRocm93IG1sKFwiY29yZG92YS1wbHVnaW4tYnVpbGRpbmZvIGlzIG5vdCBpbnN0YWxsZWRcIik7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIEooXCJjb3Jkb3ZhLnBsdWdpbnMuYnJvd3NlcnRhYi5vcGVuVXJsXCIsbCkpdGhyb3cgbWwoXCJjb3Jkb3ZhLXBsdWdpbi1icm93c2VydGFiIGlzIG5vdCBpbnN0YWxsZWRcIik7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIEooXCJjb3Jkb3ZhLkluQXBwQnJvd3Nlci5vcGVuXCIsbCkpdGhyb3cgbWwoXCJjb3Jkb3ZhLXBsdWdpbi1pbmFwcGJyb3dzZXIgaXMgbm90IGluc3RhbGxlZFwiKTtcbn0sZnVuY3Rpb24oKXt0aHJvdyBuZXcgdShcImNvcmRvdmEtbm90LXJlYWR5XCIpO30pfTtmdW5jdGlvbiBubCgpe2Zvcih2YXIgYT0yMCxiPVtdOzA8YTspYi5wdXNoKFwiMTIzNDU2Nzg5MGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpcIi5jaGFyQXQoTWF0aC5mbG9vcig2MipNYXRoLnJhbmRvbSgpKSkpLGEtLTtyZXR1cm4gYi5qb2luKFwiXCIpfWZ1bmN0aW9uIG9sKGEpe3ZhciBiPW5ldyBqbDtpbChiLGEpO2E9W107dmFyIGM9OCpiLmc7NTY+Yi5jP2lsKGIsZ2wsNTYtYi5jKTppbChiLGdsLGIuYi0oYi5jLTU2KSk7Zm9yKHZhciBkPTYzOzU2PD1kO2QtLSliLmZbZF09YyYyNTUsYy89MjU2O2hsKGIpO2ZvcihkPWM9MDtkPGIuaTtkKyspZm9yKHZhciBlPTI0OzA8PWU7ZS09OClhW2MrK109Yi5hW2RdPj5lJjI1NTtyZXR1cm4gJGYoYSl9XG5rLkxiPWZ1bmN0aW9uKGEsYil7YihuZXcgdShcIm9wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnRcIikpO3JldHVybiBFKCl9O2suSmI9ZnVuY3Rpb24oKXtyZXR1cm4gRihuZXcgdShcIm9wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnRcIikpfTtrLlhiPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2suVWI9ZnVuY3Rpb24oKXtyZXR1cm4hMH07ay5RYj1mdW5jdGlvbigpe3JldHVybiEwfTtcbmsuS2I9ZnVuY3Rpb24oYSxiLGMsZCl7aWYodGhpcy5jKXJldHVybiBGKG5ldyB1KFwicmVkaXJlY3Qtb3BlcmF0aW9uLXBlbmRpbmdcIikpO3ZhciBlPXRoaXMsZj1sLmRvY3VtZW50LGc9bnVsbCxoPW51bGwsbT1udWxsLHA9bnVsbDtyZXR1cm4gdGhpcy5jPUUoKS50aGVuKGZ1bmN0aW9uKCl7bmgoYik7cmV0dXJuIHBsKGUpfSkudGhlbihmdW5jdGlvbigpe3JldHVybiBxbChlLGEsYixjLGQpfSkudGhlbihmdW5jdGlvbigpe3JldHVybihuZXcgRChmdW5jdGlvbih2LEMpe2g9ZnVuY3Rpb24oKXt2YXIgQT1KKFwiY29yZG92YS5wbHVnaW5zLmJyb3dzZXJ0YWIuY2xvc2VcIixsKTt2KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIEEmJkEoKTtlLmEmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmEuY2xvc2UmJihlLmEuY2xvc2UoKSxlLmE9bnVsbCk7cmV0dXJuITF9O2UuQ2EoaCk7bT1mdW5jdGlvbigpe2d8fChnPUJkKDJFMykudGhlbihmdW5jdGlvbigpe0MobmV3IHUoXCJyZWRpcmVjdC1jYW5jZWxsZWQtYnktdXNlclwiKSl9KSl9O1xucD1mdW5jdGlvbigpe1hlKCkmJm0oKX07Zi5hZGRFdmVudExpc3RlbmVyKFwicmVzdW1lXCIsbSwhMSk7SSgpLnRvTG93ZXJDYXNlKCkubWF0Y2goL2FuZHJvaWQvKXx8Zi5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLHAsITEpfSkpLm8oZnVuY3Rpb24odil7cmV0dXJuIHJsKGUpLnRoZW4oZnVuY3Rpb24oKXt0aHJvdyB2O30pfSl9KS5tYShmdW5jdGlvbigpe20mJmYucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc3VtZVwiLG0sITEpO3AmJmYucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIixwLCExKTtnJiZnLmNhbmNlbCgpO2gmJmUuUWEoaCk7ZS5jPW51bGx9KX07XG5mdW5jdGlvbiBxbChhLGIsYyxkLGUpe3ZhciBmPW5sKCksZz1uZXcgb2goYixkLG51bGwsZixuZXcgdShcIm5vLWF1dGgtZXZlbnRcIiksbnVsbCxlKSxoPUooXCJCdWlsZEluZm8ucGFja2FnZU5hbWVcIixsKTtpZihcInN0cmluZ1wiIT09dHlwZW9mIGgpdGhyb3cgbmV3IHUoXCJpbnZhbGlkLWNvcmRvdmEtY29uZmlndXJhdGlvblwiKTt2YXIgbT1KKFwiQnVpbGRJbmZvLmRpc3BsYXlOYW1lXCIsbCkscD17fTtpZihJKCkudG9Mb3dlckNhc2UoKS5tYXRjaCgvaXBob25lfGlwYWR8aXBvZC8pKXAuaWJpPWg7ZWxzZSBpZihJKCkudG9Mb3dlckNhc2UoKS5tYXRjaCgvYW5kcm9pZC8pKXAuYXBuPWg7ZWxzZSByZXR1cm4gRihuZXcgdShcIm9wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnRcIikpO20mJihwLmFwcERpc3BsYXlOYW1lPW0pO2Y9b2woZik7cC5zZXNzaW9uSWQ9Zjt2YXIgdj1ZaihhLnUsYS5pLGEubCxiLGMsbnVsbCxkLGEubSxwLGEucyxlKTtyZXR1cm4gYS5rYSgpLnRoZW4oZnVuY3Rpb24oKXt2YXIgQz1cbmEuaDtyZXR1cm4gYS53LmEuc2V0KFdrLGcudigpLEMpfSkudGhlbihmdW5jdGlvbigpe3ZhciBDPUooXCJjb3Jkb3ZhLnBsdWdpbnMuYnJvd3NlcnRhYi5pc0F2YWlsYWJsZVwiLGwpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBDKXRocm93IG5ldyB1KFwiaW52YWxpZC1jb3Jkb3ZhLWNvbmZpZ3VyYXRpb25cIik7dmFyIEE9bnVsbDtDKGZ1bmN0aW9uKFEpe2lmKFEpe0E9SihcImNvcmRvdmEucGx1Z2lucy5icm93c2VydGFiLm9wZW5VcmxcIixsKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgQSl0aHJvdyBuZXcgdShcImludmFsaWQtY29yZG92YS1jb25maWd1cmF0aW9uXCIpO0Eodil9ZWxzZXtBPUooXCJjb3Jkb3ZhLkluQXBwQnJvd3Nlci5vcGVuXCIsbCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIEEpdGhyb3cgbmV3IHUoXCJpbnZhbGlkLWNvcmRvdmEtY29uZmlndXJhdGlvblwiKTtRPUkoKTthLmE9QSh2LFEubWF0Y2goLyhpUGFkfGlQaG9uZXxpUG9kKS4qT1MgN19cXGQvaSl8fFEubWF0Y2goLyhpUGFkfGlQaG9uZXxpUG9kKS4qT1MgOF9cXGQvaSk/XG5cIl9ibGFua1wiOlwiX3N5c3RlbVwiLFwibG9jYXRpb249eWVzXCIpfX0pfSl9ZnVuY3Rpb24gc2woYSxiKXtmb3IodmFyIGM9MDtjPGEuYi5sZW5ndGg7YysrKXRyeXthLmJbY10oYil9Y2F0Y2goZCl7fX1mdW5jdGlvbiBwbChhKXthLmZ8fChhLmY9YS5rYSgpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEQoZnVuY3Rpb24oYil7ZnVuY3Rpb24gYyhkKXtiKGQpO2EuUWEoYyk7cmV0dXJuITF9YS5DYShjKTt0bChhKX0pfSkpO3JldHVybiBhLmZ9ZnVuY3Rpb24gcmwoYSl7dmFyIGI9bnVsbDtyZXR1cm4gWGsoYS5nKS50aGVuKGZ1bmN0aW9uKGMpe2I9YztjPWEuZztyZXR1cm4gU2soYy5iLFdrLGMuYSl9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGJ9KX1cbmZ1bmN0aW9uIHRsKGEpe2Z1bmN0aW9uIGIoZyl7ZD0hMDtlJiZlLmNhbmNlbCgpO3JsKGEpLnRoZW4oZnVuY3Rpb24oaCl7dmFyIG09YztpZihoJiZnJiZnLnVybCl7dmFyIHA9bnVsbDttPXVnKGcudXJsKTstMSE9bS5pbmRleE9mKFwiL19fL2F1dGgvY2FsbGJhY2tcIikmJihwPVpkKG0pLHA9VGUoWWQocCxcImZpcmViYXNlRXJyb3JcIil8fG51bGwpLHA9KHA9XCJvYmplY3RcIj09PXR5cGVvZiBwP3dhKHApOm51bGwpP25ldyBvaChoLmMsaC5iLG51bGwsbnVsbCxwLG51bGwsaC5TKCkpOm5ldyBvaChoLmMsaC5iLG0saC5mLG51bGwsbnVsbCxoLlMoKSkpO209cHx8Y31zbChhLG0pfSl9dmFyIGM9bmV3IG9oKFwidW5rbm93blwiLG51bGwsbnVsbCxudWxsLG5ldyB1KFwibm8tYXV0aC1ldmVudFwiKSksZD0hMSxlPUJkKDUwMCkudGhlbihmdW5jdGlvbigpe3JldHVybiBybChhKS50aGVuKGZ1bmN0aW9uKCl7ZHx8c2woYSxjKX0pfSksZj1sLmhhbmRsZU9wZW5VUkw7bC5oYW5kbGVPcGVuVVJMPWZ1bmN0aW9uKGcpezA9PVxuZy50b0xvd2VyQ2FzZSgpLmluZGV4T2YoSihcIkJ1aWxkSW5mby5wYWNrYWdlTmFtZVwiLGwpLnRvTG93ZXJDYXNlKCkrXCI6Ly9cIikmJmIoe3VybDpnfSk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpdHJ5e2YoZyl9Y2F0Y2goaCl7Y29uc29sZS5lcnJvcihoKX19O3JofHwocmg9bmV3IHFoKTtzaChiKX1rLkNhPWZ1bmN0aW9uKGEpe3RoaXMuYi5wdXNoKGEpO3BsKHRoaXMpLm8oZnVuY3Rpb24oYil7XCJhdXRoL2ludmFsaWQtY29yZG92YS1jb25maWd1cmF0aW9uXCI9PT1iLmNvZGUmJihiPW5ldyBvaChcInVua25vd25cIixudWxsLG51bGwsbnVsbCxuZXcgdShcIm5vLWF1dGgtZXZlbnRcIikpLGEoYikpfSl9O2suUWE9ZnVuY3Rpb24oYSl7VWEodGhpcy5iLGZ1bmN0aW9uKGIpe3JldHVybiBiPT1hfSl9O2Z1bmN0aW9uIHVsKGEpe3RoaXMuYT1hO3RoaXMuYj1PaygpfXZhciB2bD17bmFtZTpcInBlbmRpbmdSZWRpcmVjdFwiLEY6XCJzZXNzaW9uXCJ9O2Z1bmN0aW9uIHdsKGEpe3JldHVybiBhLmIuc2V0KHZsLFwicGVuZGluZ1wiLGEuYSl9ZnVuY3Rpb24geGwoYSl7cmV0dXJuIFNrKGEuYix2bCxhLmEpfWZ1bmN0aW9uIHlsKGEpe3JldHVybiBhLmIuZ2V0KHZsLGEuYSkudGhlbihmdW5jdGlvbihiKXtyZXR1cm5cInBlbmRpbmdcIj09Yn0pfTtmdW5jdGlvbiB6bChhLGIsYyl7dGhpcy5pPXt9O3RoaXMudz0wO3RoaXMuRD1hO3RoaXMudT1iO3RoaXMubT1jO3RoaXMuaD1bXTt0aGlzLmY9ITE7dGhpcy5sPXIodGhpcy5zLHRoaXMpO3RoaXMuYj1uZXcgQWw7dGhpcy5CPW5ldyBCbDt0aGlzLmc9bmV3IHVsKHRoaXMudStcIjpcIit0aGlzLm0pO3RoaXMuYz17fTt0aGlzLmMudW5rbm93bj10aGlzLmI7dGhpcy5jLnNpZ25JblZpYVJlZGlyZWN0PXRoaXMuYjt0aGlzLmMubGlua1ZpYVJlZGlyZWN0PXRoaXMuYjt0aGlzLmMucmVhdXRoVmlhUmVkaXJlY3Q9dGhpcy5iO3RoaXMuYy5zaWduSW5WaWFQb3B1cD10aGlzLkI7dGhpcy5jLmxpbmtWaWFQb3B1cD10aGlzLkI7dGhpcy5jLnJlYXV0aFZpYVBvcHVwPXRoaXMuQjt0aGlzLmE9Q2wodGhpcy5ELHRoaXMudSx0aGlzLm0sQWEpfVxuZnVuY3Rpb24gQ2woYSxiLGMsZCl7dmFyIGU9ZmlyZWJhc2UuU0RLX1ZFUlNJT058fG51bGw7cmV0dXJuIERlKCk/bmV3IGxsKGEsYixjLGUsZCk6bmV3IFNqKGEsYixjLGUsZCl9emwucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7dGhpcy5mPSExO3RoaXMuYS5RYSh0aGlzLmwpO3RoaXMuYT1DbCh0aGlzLkQsdGhpcy51LHRoaXMubSk7dGhpcy5pPXt9fTtmdW5jdGlvbiBEbChhKXthLmZ8fChhLmY9ITAsYS5hLkNhKGEubCkpO3ZhciBiPWEuYTtyZXR1cm4gYS5hLmthKCkubyhmdW5jdGlvbihjKXthLmE9PWImJmEucmVzZXQoKTt0aHJvdyBjO30pfWZ1bmN0aW9uIEVsKGEpe2EuYS5VYigpJiZEbChhKS5vKGZ1bmN0aW9uKGIpe3ZhciBjPW5ldyBvaChcInVua25vd25cIixudWxsLG51bGwsbnVsbCxuZXcgdShcIm9wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnRcIikpO0ZsKGIpJiZhLnMoYyl9KTthLmEuUWIoKXx8R2woYS5iKX1cbmZ1bmN0aW9uIEhsKGEsYil7U2EoYS5oLGIpfHxhLmgucHVzaChiKTthLmZ8fHlsKGEuZykudGhlbihmdW5jdGlvbihjKXtjP3hsKGEuZykudGhlbihmdW5jdGlvbigpe0RsKGEpLm8oZnVuY3Rpb24oZCl7dmFyIGU9bmV3IG9oKFwidW5rbm93blwiLG51bGwsbnVsbCxudWxsLG5ldyB1KFwib3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiKSk7RmwoZCkmJmEucyhlKX0pfSk6RWwoYSl9KS5vKGZ1bmN0aW9uKCl7RWwoYSl9KX1mdW5jdGlvbiBJbChhLGIpe1VhKGEuaCxmdW5jdGlvbihjKXtyZXR1cm4gYz09Yn0pfVxuemwucHJvdG90eXBlLnM9ZnVuY3Rpb24oYSl7aWYoIWEpdGhyb3cgbmV3IHUoXCJpbnZhbGlkLWF1dGgtZXZlbnRcIik7NkU1PD10YSgpLXRoaXMudyYmKHRoaXMuaT17fSx0aGlzLnc9MCk7aWYoYSYmYS5nZXRVaWQoKSYmdGhpcy5pLmhhc093blByb3BlcnR5KGEuZ2V0VWlkKCkpKXJldHVybiExO2Zvcih2YXIgYj0hMSxjPTA7Yzx0aGlzLmgubGVuZ3RoO2MrKyl7dmFyIGQ9dGhpcy5oW2NdO2lmKGQuQ2IoYS5jLGEuYikpe2lmKGI9dGhpcy5jW2EuY10pYi5oKGEsZCksYSYmKGEuZnx8YS5iKSYmKHRoaXMuaVthLmdldFVpZCgpXT0hMCx0aGlzLnc9dGEoKSk7Yj0hMDticmVha319R2wodGhpcy5iKTtyZXR1cm4gYn07dmFyIEpsPW5ldyBXZSgyRTMsMUU0KSxLbD1uZXcgV2UoM0U0LDZFNCk7emwucHJvdG90eXBlLnBhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYi5wYSgpfTtcbmZ1bmN0aW9uIExsKGEsYixjLGQsZSxmLGcpe3JldHVybiBhLmEuSmIoYixjLGQsZnVuY3Rpb24oKXthLmZ8fChhLmY9ITAsYS5hLkNhKGEubCkpfSxmdW5jdGlvbigpe2EucmVzZXQoKX0sZSxmLGcpfWZ1bmN0aW9uIEZsKGEpe3JldHVybiBhJiZcImF1dGgvY29yZG92YS1ub3QtcmVhZHlcIj09YS5jb2RlPyEwOiExfVxuZnVuY3Rpb24gTWwoYSxiLGMsZCxlKXt2YXIgZjtyZXR1cm4gd2woYS5nKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGEuYS5LYihiLGMsZCxlKS5vKGZ1bmN0aW9uKGcpe2lmKEZsKGcpKXRocm93IG5ldyB1KFwib3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiKTtmPWc7cmV0dXJuIHhsKGEuZykudGhlbihmdW5jdGlvbigpe3Rocm93IGY7fSl9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGEuYS5YYigpP25ldyBEKGZ1bmN0aW9uKCl7fSk6eGwoYS5nKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGEucGEoKX0pLnRoZW4oZnVuY3Rpb24oKXt9KS5vKGZ1bmN0aW9uKCl7fSl9KX0pfWZ1bmN0aW9uIE5sKGEsYixjLGQsZSl7cmV0dXJuIGEuYS5MYihkLGZ1bmN0aW9uKGYpe2IubGEoYyxudWxsLGYsZSl9LEpsLmdldCgpKX12YXIgT2w9e307XG5mdW5jdGlvbiBQbChhLGIsYyl7dmFyIGQ9YitcIjpcIitjO09sW2RdfHwoT2xbZF09bmV3IHpsKGEsYixjKSk7cmV0dXJuIE9sW2RdfWZ1bmN0aW9uIEFsKCl7dGhpcy5iPW51bGw7dGhpcy5mPVtdO3RoaXMuYz1bXTt0aGlzLmE9bnVsbDt0aGlzLmk9dGhpcy5nPSExfUFsLnByb3RvdHlwZS5yZXNldD1mdW5jdGlvbigpe3RoaXMuYj1udWxsO3RoaXMuYSYmKHRoaXMuYS5jYW5jZWwoKSx0aGlzLmE9bnVsbCl9O1xuQWwucHJvdG90eXBlLmg9ZnVuY3Rpb24oYSxiKXtpZihhKXt0aGlzLnJlc2V0KCk7dGhpcy5nPSEwO3ZhciBjPWEuYyxkPWEuYixlPWEuYSYmXCJhdXRoL3dlYi1zdG9yYWdlLXVuc3VwcG9ydGVkXCI9PWEuYS5jb2RlLGY9YS5hJiZcImF1dGgvb3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiPT1hLmEuY29kZTt0aGlzLmk9ISghZSYmIWYpO1widW5rbm93blwiIT1jfHxlfHxmP2EuYT8oUWwodGhpcywhMCxudWxsLGEuYSksRSgpKTpiLkRhKGMsZCk/UmwodGhpcyxhLGIpOkYobmV3IHUoXCJpbnZhbGlkLWF1dGgtZXZlbnRcIikpOihRbCh0aGlzLCExLG51bGwsbnVsbCksRSgpKX1lbHNlIEYobmV3IHUoXCJpbnZhbGlkLWF1dGgtZXZlbnRcIikpfTtmdW5jdGlvbiBHbChhKXthLmd8fChhLmc9ITAsUWwoYSwhMSxudWxsLG51bGwpKX1mdW5jdGlvbiBTbChhKXthLmcmJiFhLmkmJlFsKGEsITEsbnVsbCxudWxsKX1cbmZ1bmN0aW9uIFJsKGEsYixjKXtjPWMuRGEoYi5jLGIuYik7dmFyIGQ9Yi5nLGU9Yi5mLGY9Yi5pLGc9Yi5TKCksaD0hIWIuYy5tYXRjaCgvUmVkaXJlY3QkLyk7YyhkLGUsZyxmKS50aGVuKGZ1bmN0aW9uKG0pe1FsKGEsaCxtLG51bGwpfSkubyhmdW5jdGlvbihtKXtRbChhLGgsbnVsbCxtKX0pfWZ1bmN0aW9uIFRsKGEsYil7YS5iPWZ1bmN0aW9uKCl7cmV0dXJuIEYoYil9O2lmKGEuYy5sZW5ndGgpZm9yKHZhciBjPTA7YzxhLmMubGVuZ3RoO2MrKylhLmNbY10oYil9ZnVuY3Rpb24gVWwoYSxiKXthLmI9ZnVuY3Rpb24oKXtyZXR1cm4gRShiKX07aWYoYS5mLmxlbmd0aClmb3IodmFyIGM9MDtjPGEuZi5sZW5ndGg7YysrKWEuZltjXShiKX1mdW5jdGlvbiBRbChhLGIsYyxkKXtiP2Q/VGwoYSxkKTpVbChhLGMpOlVsKGEse3VzZXI6bnVsbH0pO2EuZj1bXTthLmM9W119XG5BbC5wcm90b3R5cGUucGE9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO3JldHVybiBuZXcgRChmdW5jdGlvbihiLGMpe2EuYj9hLmIoKS50aGVuKGIsYyk6KGEuZi5wdXNoKGIpLGEuYy5wdXNoKGMpLFZsKGEpKX0pfTtmdW5jdGlvbiBWbChhKXt2YXIgYj1uZXcgdShcInRpbWVvdXRcIik7YS5hJiZhLmEuY2FuY2VsKCk7YS5hPUJkKEtsLmdldCgpKS50aGVuKGZ1bmN0aW9uKCl7YS5ifHwoYS5nPSEwLFFsKGEsITAsbnVsbCxiKSl9KX1mdW5jdGlvbiBCbCgpe31CbC5wcm90b3R5cGUuaD1mdW5jdGlvbihhLGIpe2lmKGEpe3ZhciBjPWEuYyxkPWEuYjthLmE/KGIubGEoYS5jLG51bGwsYS5hLGEuYiksRSgpKTpiLkRhKGMsZCk/V2woYSxiKTpGKG5ldyB1KFwiaW52YWxpZC1hdXRoLWV2ZW50XCIpKX1lbHNlIEYobmV3IHUoXCJpbnZhbGlkLWF1dGgtZXZlbnRcIikpfTtcbmZ1bmN0aW9uIFdsKGEsYil7dmFyIGM9YS5iLGQ9YS5jO2IuRGEoZCxjKShhLmcsYS5mLGEuUygpLGEuaSkudGhlbihmdW5jdGlvbihlKXtiLmxhKGQsZSxudWxsLGMpfSkubyhmdW5jdGlvbihlKXtiLmxhKGQsbnVsbCxlLGMpfSl9O2Z1bmN0aW9uIFhsKCl7dGhpcy5CYj0hMTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImFwcFZlcmlmaWNhdGlvbkRpc2FibGVkXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLkJifSxzZXQ6ZnVuY3Rpb24oYSl7dGhpcy5CYj1hfSxlbnVtZXJhYmxlOiExfSl9O2Z1bmN0aW9uIFlsKGEsYil7dGhpcy5hPWI7Syh0aGlzLFwidmVyaWZpY2F0aW9uSWRcIixhKX1ZbC5wcm90b3R5cGUuY29uZmlybT1mdW5jdGlvbihhKXthPWxoKHRoaXMudmVyaWZpY2F0aW9uSWQsYSk7cmV0dXJuIHRoaXMuYShhKX07ZnVuY3Rpb24gWmwoYSxiLGMsZCl7cmV0dXJuKG5ldyBoaChhKSkuY2IoYixjKS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiBuZXcgWWwoZSxkKX0pfTtmdW5jdGlvbiAkbChhKXt2YXIgYj1mZyhhKTtpZighKGImJmIuZXhwJiZiLmF1dGhfdGltZSYmYi5pYXQpKXRocm93IG5ldyB1KFwiaW50ZXJuYWwtZXJyb3JcIixcIkFuIGludGVybmFsIGVycm9yIG9jY3VycmVkLiBUaGUgdG9rZW4gb2J0YWluZWQgYnkgRmlyZWJhc2UgYXBwZWFycyB0byBiZSBtYWxmb3JtZWQuIFBsZWFzZSByZXRyeSB0aGUgb3BlcmF0aW9uLlwiKTtMKHRoaXMse3Rva2VuOmEsZXhwaXJhdGlvblRpbWU6WmUoMUUzKmIuZXhwKSxhdXRoVGltZTpaZSgxRTMqYi5hdXRoX3RpbWUpLGlzc3VlZEF0VGltZTpaZSgxRTMqYi5pYXQpLHNpZ25JblByb3ZpZGVyOmIuZmlyZWJhc2UmJmIuZmlyZWJhc2Uuc2lnbl9pbl9wcm92aWRlcj9iLmZpcmViYXNlLnNpZ25faW5fcHJvdmlkZXI6bnVsbCxzaWduSW5TZWNvbmRGYWN0b3I6Yi5maXJlYmFzZSYmYi5maXJlYmFzZS5zaWduX2luX3NlY29uZF9mYWN0b3I/Yi5maXJlYmFzZS5zaWduX2luX3NlY29uZF9mYWN0b3I6bnVsbCxjbGFpbXM6Yn0pfVxuO2Z1bmN0aW9uIGFtKGEsYixjKXt2YXIgZD1iJiZiW2JtXTtpZighZCl0aHJvdyBuZXcgdShcImFyZ3VtZW50LWVycm9yXCIsXCJJbnRlcm5hbCBhc3NlcnQ6IEludmFsaWQgTXVsdGlGYWN0b3JSZXNvbHZlclwiKTt0aGlzLmE9YTt0aGlzLmY9a2IoYik7dGhpcy5nPWM7dGhpcy5jPW5ldyB2ZyhudWxsLGQpO3RoaXMuYj1bXTt2YXIgZT10aGlzO3goYltjbV18fFtdLGZ1bmN0aW9uKGYpeyhmPXFmKGYpKSYmZS5iLnB1c2goZil9KTtLKHRoaXMsXCJhdXRoXCIsdGhpcy5hKTtLKHRoaXMsXCJzZXNzaW9uXCIsdGhpcy5jKTtLKHRoaXMsXCJoaW50c1wiLHRoaXMuYil9dmFyIGNtPVwibWZhSW5mb1wiLGJtPVwibWZhUGVuZGluZ0NyZWRlbnRpYWxcIjthbS5wcm90b3R5cGUuUGM9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztyZXR1cm4gYS5vYih0aGlzLmEuYix0aGlzLmMpLnRoZW4oZnVuY3Rpb24oYyl7dmFyIGQ9a2IoYi5mKTtkZWxldGUgZFtjbV07ZGVsZXRlIGRbYm1dO0IoZCxjKTtyZXR1cm4gYi5nKGQpfSl9O2Z1bmN0aW9uIGRtKGEsYixjLGQpe3UuY2FsbCh0aGlzLFwibXVsdGktZmFjdG9yLWF1dGgtcmVxdWlyZWRcIixkLGIpO3RoaXMuYj1uZXcgYW0oYSxiLGMpO0sodGhpcyxcInJlc29sdmVyXCIsdGhpcy5iKX10KGRtLHUpO2Z1bmN0aW9uIGVtKGEsYixjKXtpZihhJiZxKGEuc2VydmVyUmVzcG9uc2UpJiZcImF1dGgvbXVsdGktZmFjdG9yLWF1dGgtcmVxdWlyZWRcIj09PWEuY29kZSl0cnl7cmV0dXJuIG5ldyBkbShiLGEuc2VydmVyUmVzcG9uc2UsYyxhLm1lc3NhZ2UpfWNhdGNoKGQpe31yZXR1cm4gbnVsbH07ZnVuY3Rpb24gZm0oKXt9Zm0ucHJvdG90eXBlLm9iPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYi50eXBlPT13Zz9nbSh0aGlzLGEsYixjKTpobSh0aGlzLGEsYil9O2Z1bmN0aW9uIGdtKGEsYixjLGQpe3JldHVybiBjLkZhKCkudGhlbihmdW5jdGlvbihlKXtlPXtpZFRva2VuOmV9O1widW5kZWZpbmVkXCIhPT10eXBlb2YgZCYmKGUuZGlzcGxheU5hbWU9ZCk7QihlLHtwaG9uZVZlcmlmaWNhdGlvbkluZm86ZGgoYS5hKX0pO3JldHVybiBOKGIsQWosZSl9KX1mdW5jdGlvbiBobShhLGIsYyl7cmV0dXJuIGMuRmEoKS50aGVuKGZ1bmN0aW9uKGQpe2Q9e21mYVBlbmRpbmdDcmVkZW50aWFsOmR9O0IoZCx7cGhvbmVWZXJpZmljYXRpb25JbmZvOmRoKGEuYSl9KTtyZXR1cm4gTihiLEJqLGQpfSl9ZnVuY3Rpb24gaW0oYSl7Syh0aGlzLFwiZmFjdG9ySWRcIixhLmVhKTt0aGlzLmE9YX10KGltLGZtKTtcbmZ1bmN0aW9uIGptKGEpe2ltLmNhbGwodGhpcyxhKTtpZih0aGlzLmEuZWEhPWhoLlBST1ZJREVSX0lEKXRocm93IG5ldyB1KFwiYXJndW1lbnQtZXJyb3JcIixcImZpcmViYXNlLmF1dGguUGhvbmVNdWx0aUZhY3RvckFzc2VydGlvbiByZXF1aXJlcyBhIHZhbGlkIGZpcmViYXNlLmF1dGguUGhvbmVBdXRoQ3JlZGVudGlhbFwiKTt9dChqbSxpbSk7ZnVuY3Rpb24ga20oYSxiKXtYYy5jYWxsKHRoaXMsYSk7Zm9yKHZhciBjIGluIGIpdGhpc1tjXT1iW2NdfXQoa20sWGMpO2Z1bmN0aW9uIGxtKGEsYil7dGhpcy5hPWE7dGhpcy5iPVtdO3RoaXMuYz1yKHRoaXMud2MsdGhpcyk7amQodGhpcy5hLFwidXNlclJlbG9hZGVkXCIsdGhpcy5jKTt2YXIgYz1bXTtiJiZiLm11bHRpRmFjdG9yJiZiLm11bHRpRmFjdG9yLmVucm9sbGVkRmFjdG9ycyYmeChiLm11bHRpRmFjdG9yLmVucm9sbGVkRmFjdG9ycyxmdW5jdGlvbihkKXt2YXIgZT1udWxsLGY9e307aWYoZCl7ZC51aWQmJihmW25mXT1kLnVpZCk7ZC5kaXNwbGF5TmFtZSYmKGZbb2ZdPWQuZGlzcGxheU5hbWUpO2QuZW5yb2xsbWVudFRpbWUmJihmW3BmXT0obmV3IERhdGUoZC5lbnJvbGxtZW50VGltZSkpLnRvSVNPU3RyaW5nKCkpO2QucGhvbmVOdW1iZXImJihmW21mXT1kLnBob25lTnVtYmVyKTt0cnl7ZT1uZXcgcmYoZil9Y2F0Y2goZyl7fWQ9ZX1lbHNlIGQ9bnVsbDtkJiZjLnB1c2goZCl9KTttbSh0aGlzLGMpfVxuZnVuY3Rpb24gbm0oYSl7dmFyIGI9W107eChhLm1mYUluZm98fFtdLGZ1bmN0aW9uKGMpeyhjPXFmKGMpKSYmYi5wdXNoKGMpfSk7cmV0dXJuIGJ9az1sbS5wcm90b3R5cGU7ay53Yz1mdW5jdGlvbihhKXttbSh0aGlzLG5tKGEuZWQpKX07ZnVuY3Rpb24gbW0oYSxiKXthLmI9YjtLKGEsXCJlbnJvbGxlZEZhY3RvcnNcIixiKX1rLk9iPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYS5JKCkudGhlbihmdW5jdGlvbihhKXtyZXR1cm4gbmV3IHZnKGEsbnVsbCl9KX07ay5kYz1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMsZD10aGlzLmEuYTtyZXR1cm4gdGhpcy5PYigpLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIGEub2IoZCxlLGIpfSkudGhlbihmdW5jdGlvbihlKXtvbShjLmEsZSk7cmV0dXJuIGMuYS5yZWxvYWQoKX0pfTtcbmsuJGM9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcyxjPVwic3RyaW5nXCI9PT10eXBlb2YgYT9hOmEudWlkLGQ9dGhpcy5hLmE7cmV0dXJuIHRoaXMuYS5JKCkudGhlbihmdW5jdGlvbihlKXtyZXR1cm4gTihkLEZqLHtpZFRva2VuOmUsbWZhRW5yb2xsbWVudElkOmN9KX0pLnRoZW4oZnVuY3Rpb24oZSl7dmFyIGY9TmEoYi5iLGZ1bmN0aW9uKGcpe3JldHVybiBnLnVpZCE9Y30pO21tKGIsZik7b20oYi5hLGUpO3JldHVybiBiLmEucmVsb2FkKCkubyhmdW5jdGlvbihnKXtpZihcImF1dGgvdXNlci10b2tlbi1leHBpcmVkXCIhPWcuY29kZSl0aHJvdyBnO30pfSl9O2sudj1mdW5jdGlvbigpe3JldHVybnttdWx0aUZhY3Rvcjp7ZW5yb2xsZWRGYWN0b3JzOk9hKHRoaXMuYixmdW5jdGlvbihhKXtyZXR1cm4gYS52KCl9KX19fTtmdW5jdGlvbiBwbShhLGIsYyl7dGhpcy5oPWE7dGhpcy5pPWI7dGhpcy5nPWM7dGhpcy5jPTNFNDt0aGlzLmY9OTZFNDt0aGlzLmI9bnVsbDt0aGlzLmE9dGhpcy5jO2lmKHRoaXMuZjx0aGlzLmMpdGhyb3cgRXJyb3IoXCJQcm9hY3RpdmUgcmVmcmVzaCBsb3dlciBib3VuZCBncmVhdGVyIHRoYW4gdXBwZXIgYm91bmQhXCIpO31wbS5wcm90b3R5cGUuc3RhcnQ9ZnVuY3Rpb24oKXt0aGlzLmE9dGhpcy5jO3FtKHRoaXMsITApfTtmdW5jdGlvbiBybShhLGIpe2lmKGIpcmV0dXJuIGEuYT1hLmMsYS5nKCk7Yj1hLmE7YS5hKj0yO2EuYT5hLmYmJihhLmE9YS5mKTtyZXR1cm4gYn1mdW5jdGlvbiBxbShhLGIpe2Euc3RvcCgpO2EuYj1CZChybShhLGIpKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIFllKCl9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGEuaCgpfSkudGhlbihmdW5jdGlvbigpe3FtKGEsITApfSkubyhmdW5jdGlvbihjKXthLmkoYykmJnFtKGEsITEpfSl9XG5wbS5wcm90b3R5cGUuc3RvcD1mdW5jdGlvbigpe3RoaXMuYiYmKHRoaXMuYi5jYW5jZWwoKSx0aGlzLmI9bnVsbCl9O2Z1bmN0aW9uIHNtKGEpe3RoaXMuYz1hO3RoaXMuYj10aGlzLmE9bnVsbH1zbS5wcm90b3R5cGUudj1mdW5jdGlvbigpe3JldHVybnthcGlLZXk6dGhpcy5jLmMscmVmcmVzaFRva2VuOnRoaXMuYSxhY2Nlc3NUb2tlbjp0aGlzLmImJnRoaXMuYi50b1N0cmluZygpLGV4cGlyYXRpb25UaW1lOnRtKHRoaXMpfX07ZnVuY3Rpb24gdG0oYSl7cmV0dXJuIGEuYiYmMUUzKmEuYi5jfHwwfWZ1bmN0aW9uIHVtKGEsYil7dmFyIGM9Yi5yZWZyZXNoVG9rZW47YS5iPWdnKGJbQWddfHxcIlwiKTthLmE9Y31mdW5jdGlvbiB2bShhLGIpe2EuYj1iLmI7YS5hPWIuYX1cbmZ1bmN0aW9uIHdtKGEsYil7cmV0dXJuIFFpKGEuYyxiKS50aGVuKGZ1bmN0aW9uKGMpe2EuYj1nZyhjLmFjY2Vzc190b2tlbik7YS5hPWMucmVmcmVzaF90b2tlbjtyZXR1cm57YWNjZXNzVG9rZW46YS5iLnRvU3RyaW5nKCkscmVmcmVzaFRva2VuOmEuYX19KS5vKGZ1bmN0aW9uKGMpe1wiYXV0aC91c2VyLXRva2VuLWV4cGlyZWRcIj09Yy5jb2RlJiYoYS5hPW51bGwpO3Rocm93IGM7fSl9c20ucHJvdG90eXBlLmdldFRva2VuPWZ1bmN0aW9uKGEpe2E9ISFhO3JldHVybiB0aGlzLmImJiF0aGlzLmE/RihuZXcgdShcInVzZXItdG9rZW4tZXhwaXJlZFwiKSk6YXx8IXRoaXMuYnx8dGEoKT50bSh0aGlzKS0zRTQ/dGhpcy5hP3dtKHRoaXMse2dyYW50X3R5cGU6XCJyZWZyZXNoX3Rva2VuXCIscmVmcmVzaF90b2tlbjp0aGlzLmF9KTpFKG51bGwpOkUoe2FjY2Vzc1Rva2VuOnRoaXMuYi50b1N0cmluZygpLHJlZnJlc2hUb2tlbjp0aGlzLmF9KX07ZnVuY3Rpb24geG0oYSxiKXt0aGlzLmE9YXx8bnVsbDt0aGlzLmI9Ynx8bnVsbDtMKHRoaXMse2xhc3RTaWduSW5UaW1lOlplKGJ8fG51bGwpLGNyZWF0aW9uVGltZTpaZShhfHxudWxsKX0pfWZ1bmN0aW9uIHltKGEpe3JldHVybiBuZXcgeG0oYS5hLGEuYil9eG0ucHJvdG90eXBlLnY9ZnVuY3Rpb24oKXtyZXR1cm57bGFzdExvZ2luQXQ6dGhpcy5iLGNyZWF0ZWRBdDp0aGlzLmF9fTtmdW5jdGlvbiB6bShhLGIsYyxkLGUsZil7TCh0aGlzLHt1aWQ6YSxkaXNwbGF5TmFtZTpkfHxudWxsLHBob3RvVVJMOmV8fG51bGwsZW1haWw6Y3x8bnVsbCxwaG9uZU51bWJlcjpmfHxudWxsLHByb3ZpZGVySWQ6Yn0pfVxuZnVuY3Rpb24gUChhLGIsYyl7dGhpcy5OPVtdO3RoaXMubD1hLmFwaUtleTt0aGlzLm09YS5hcHBOYW1lO3RoaXMucz1hLmF1dGhEb21haW58fG51bGw7YT1maXJlYmFzZS5TREtfVkVSU0lPTj9MZShmaXJlYmFzZS5TREtfVkVSU0lPTik6bnVsbDt0aGlzLmE9bmV3IEVpKHRoaXMubCx6YShBYSksYSk7dGhpcy5iPW5ldyBzbSh0aGlzLmEpO0FtKHRoaXMsYltBZ10pO3VtKHRoaXMuYixiKTtLKHRoaXMsXCJyZWZyZXNoVG9rZW5cIix0aGlzLmIuYSk7Qm0odGhpcyxjfHx7fSk7Ry5jYWxsKHRoaXMpO3RoaXMuUD0hMTt0aGlzLnMmJk9lKCkmJih0aGlzLmk9UGwodGhpcy5zLHRoaXMubCx0aGlzLm0pKTt0aGlzLlI9W107dGhpcy5oPW51bGw7dGhpcy5CPUNtKHRoaXMpO3RoaXMuWj1yKHRoaXMuTWEsdGhpcyk7dmFyIGQ9dGhpczt0aGlzLm9hPW51bGw7dGhpcy56YT1mdW5jdGlvbihlKXtkLnZhKGUuZyl9O3RoaXMuYWE9bnVsbDt0aGlzLlc9W107dGhpcy55YT1mdW5jdGlvbihlKXtEbShkLFxuZS5jKX07dGhpcy4kPW51bGw7dGhpcy5PPW5ldyBsbSh0aGlzLGMpO0sodGhpcyxcIm11bHRpRmFjdG9yXCIsdGhpcy5PKX10KFAsRyk7UC5wcm90b3R5cGUudmE9ZnVuY3Rpb24oYSl7dGhpcy5vYT1hO0tpKHRoaXMuYSxhKX07UC5wcm90b3R5cGUuamE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vYX07ZnVuY3Rpb24gRW0oYSxiKXthLmFhJiZ0ZChhLmFhLFwibGFuZ3VhZ2VDb2RlQ2hhbmdlZFwiLGEuemEpOyhhLmFhPWIpJiZqZChiLFwibGFuZ3VhZ2VDb2RlQ2hhbmdlZFwiLGEuemEpfWZ1bmN0aW9uIERtKGEsYil7YS5XPWI7TGkoYS5hLGZpcmViYXNlLlNES19WRVJTSU9OP0xlKGZpcmViYXNlLlNES19WRVJTSU9OLGEuVyk6bnVsbCl9UC5wcm90b3R5cGUuRWE9ZnVuY3Rpb24oKXtyZXR1cm4gV2EodGhpcy5XKX07ZnVuY3Rpb24gRm0oYSxiKXthLiQmJnRkKGEuJCxcImZyYW1ld29ya0NoYW5nZWRcIixhLnlhKTsoYS4kPWIpJiZqZChiLFwiZnJhbWV3b3JrQ2hhbmdlZFwiLGEueWEpfVxuUC5wcm90b3R5cGUuTWE9ZnVuY3Rpb24oKXt0aGlzLkIuYiYmKHRoaXMuQi5zdG9wKCksdGhpcy5CLnN0YXJ0KCkpfTtmdW5jdGlvbiBHbShhKXt0cnl7cmV0dXJuIGZpcmViYXNlLmFwcChhLm0pLmF1dGgoKX1jYXRjaChiKXt0aHJvdyBuZXcgdShcImludGVybmFsLWVycm9yXCIsXCJObyBmaXJlYmFzZS5hdXRoLkF1dGggaW5zdGFuY2UgaXMgYXZhaWxhYmxlIGZvciB0aGUgRmlyZWJhc2UgQXBwICdcIithLm0rXCInIVwiKTt9fWZ1bmN0aW9uIENtKGEpe3JldHVybiBuZXcgcG0oZnVuY3Rpb24oKXtyZXR1cm4gYS5JKCEwKX0sZnVuY3Rpb24oYil7cmV0dXJuIGImJlwiYXV0aC9uZXR3b3JrLXJlcXVlc3QtZmFpbGVkXCI9PWIuY29kZT8hMDohMX0sZnVuY3Rpb24oKXt2YXIgYj10bShhLmIpLXRhKCktM0U1O3JldHVybiAwPGI/YjowfSl9XG5mdW5jdGlvbiBIbShhKXthLkR8fGEuQi5ifHwoYS5CLnN0YXJ0KCksdGQoYSxcInRva2VuQ2hhbmdlZFwiLGEuWiksamQoYSxcInRva2VuQ2hhbmdlZFwiLGEuWikpfWZ1bmN0aW9uIEltKGEpe3RkKGEsXCJ0b2tlbkNoYW5nZWRcIixhLlopO2EuQi5zdG9wKCl9ZnVuY3Rpb24gQW0oYSxiKXthLnhhPWI7SyhhLFwiX2xhdFwiLGIpfWZ1bmN0aW9uIEptKGEsYil7VWEoYS5SLGZ1bmN0aW9uKGMpe3JldHVybiBjPT1ifSl9ZnVuY3Rpb24gS20oYSl7Zm9yKHZhciBiPVtdLGM9MDtjPGEuUi5sZW5ndGg7YysrKWIucHVzaChhLlJbY10oYSkpO3JldHVybiBFYyhiKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGF9KX1mdW5jdGlvbiBMbShhKXthLmkmJiFhLlAmJihhLlA9ITAsSGwoYS5pLGEpKX1cbmZ1bmN0aW9uIEJtKGEsYil7TChhLHt1aWQ6Yi51aWQsZGlzcGxheU5hbWU6Yi5kaXNwbGF5TmFtZXx8bnVsbCxwaG90b1VSTDpiLnBob3RvVVJMfHxudWxsLGVtYWlsOmIuZW1haWx8fG51bGwsZW1haWxWZXJpZmllZDpiLmVtYWlsVmVyaWZpZWR8fCExLHBob25lTnVtYmVyOmIucGhvbmVOdW1iZXJ8fG51bGwsaXNBbm9ueW1vdXM6Yi5pc0Fub255bW91c3x8ITEsdGVuYW50SWQ6Yi50ZW5hbnRJZHx8bnVsbCxtZXRhZGF0YTpuZXcgeG0oYi5jcmVhdGVkQXQsYi5sYXN0TG9naW5BdCkscHJvdmlkZXJEYXRhOltdfSk7YS5hLmI9YS50ZW5hbnRJZH1LKFAucHJvdG90eXBlLFwicHJvdmlkZXJJZFwiLFwiZmlyZWJhc2VcIik7ZnVuY3Rpb24gTW0oKXt9ZnVuY3Rpb24gTm0oYSl7cmV0dXJuIEUoKS50aGVuKGZ1bmN0aW9uKCl7aWYoYS5EKXRocm93IG5ldyB1KFwiYXBwLWRlbGV0ZWRcIik7fSl9XG5mdW5jdGlvbiBPbShhKXtyZXR1cm4gT2EoYS5wcm92aWRlckRhdGEsZnVuY3Rpb24oYil7cmV0dXJuIGIucHJvdmlkZXJJZH0pfWZ1bmN0aW9uIFBtKGEsYil7YiYmKFFtKGEsYi5wcm92aWRlcklkKSxhLnByb3ZpZGVyRGF0YS5wdXNoKGIpKX1mdW5jdGlvbiBRbShhLGIpe1VhKGEucHJvdmlkZXJEYXRhLGZ1bmN0aW9uKGMpe3JldHVybiBjLnByb3ZpZGVySWQ9PWJ9KX1mdW5jdGlvbiBSbShhLGIsYyl7KFwidWlkXCIhPWJ8fGMpJiZhLmhhc093blByb3BlcnR5KGIpJiZLKGEsYixjKX1cbmZ1bmN0aW9uIFNtKGEsYil7YSE9YiYmKEwoYSx7dWlkOmIudWlkLGRpc3BsYXlOYW1lOmIuZGlzcGxheU5hbWUscGhvdG9VUkw6Yi5waG90b1VSTCxlbWFpbDpiLmVtYWlsLGVtYWlsVmVyaWZpZWQ6Yi5lbWFpbFZlcmlmaWVkLHBob25lTnVtYmVyOmIucGhvbmVOdW1iZXIsaXNBbm9ueW1vdXM6Yi5pc0Fub255bW91cyx0ZW5hbnRJZDpiLnRlbmFudElkLHByb3ZpZGVyRGF0YTpbXX0pLGIubWV0YWRhdGE/SyhhLFwibWV0YWRhdGFcIix5bShiLm1ldGFkYXRhKSk6SyhhLFwibWV0YWRhdGFcIixuZXcgeG0pLHgoYi5wcm92aWRlckRhdGEsZnVuY3Rpb24oYyl7UG0oYSxjKX0pLHZtKGEuYixiLmIpLEsoYSxcInJlZnJlc2hUb2tlblwiLGEuYi5hKSxtbShhLk8sYi5PLmIpKX1rPVAucHJvdG90eXBlO2sucmVsb2FkPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztyZXR1cm4gUih0aGlzLE5tKHRoaXMpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gVG0oYSkudGhlbihmdW5jdGlvbigpe3JldHVybiBLbShhKX0pLnRoZW4oTW0pfSkpfTtcbmZ1bmN0aW9uIFRtKGEpe3JldHVybiBhLkkoKS50aGVuKGZ1bmN0aW9uKGIpe3ZhciBjPWEuaXNBbm9ueW1vdXM7cmV0dXJuIFVtKGEsYikudGhlbihmdW5jdGlvbigpe2N8fFJtKGEsXCJpc0Fub255bW91c1wiLCExKTtyZXR1cm4gYn0pfSl9ay5tYz1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5JKGEpLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuIG5ldyAkbChiKX0pfTtrLkk9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztyZXR1cm4gUih0aGlzLE5tKHRoaXMpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYi5iLmdldFRva2VuKGEpfSkudGhlbihmdW5jdGlvbihjKXtpZighYyl0aHJvdyBuZXcgdShcImludGVybmFsLWVycm9yXCIpO2MuYWNjZXNzVG9rZW4hPWIueGEmJihBbShiLGMuYWNjZXNzVG9rZW4pLGIuZGlzcGF0Y2hFdmVudChuZXcga20oXCJ0b2tlbkNoYW5nZWRcIikpKTtSbShiLFwicmVmcmVzaFRva2VuXCIsYy5yZWZyZXNoVG9rZW4pO3JldHVybiBjLmFjY2Vzc1Rva2VufSkpfTtcbmZ1bmN0aW9uIG9tKGEsYil7YltBZ10mJmEueGEhPWJbQWddJiYodW0oYS5iLGIpLGEuZGlzcGF0Y2hFdmVudChuZXcga20oXCJ0b2tlbkNoYW5nZWRcIikpLEFtKGEsYltBZ10pLFJtKGEsXCJyZWZyZXNoVG9rZW5cIixhLmIuYSkpfWZ1bmN0aW9uIFVtKGEsYil7cmV0dXJuIE4oYS5hLENqLHtpZFRva2VuOmJ9KS50aGVuKHIoYS5JYyxhKSl9XG5rLkljPWZ1bmN0aW9uKGEpe2E9YS51c2VycztpZighYXx8IWEubGVuZ3RoKXRocm93IG5ldyB1KFwiaW50ZXJuYWwtZXJyb3JcIik7YT1hWzBdO0JtKHRoaXMse3VpZDphLmxvY2FsSWQsZGlzcGxheU5hbWU6YS5kaXNwbGF5TmFtZSxwaG90b1VSTDphLnBob3RvVXJsLGVtYWlsOmEuZW1haWwsZW1haWxWZXJpZmllZDohIWEuZW1haWxWZXJpZmllZCxwaG9uZU51bWJlcjphLnBob25lTnVtYmVyLGxhc3RMb2dpbkF0OmEubGFzdExvZ2luQXQsY3JlYXRlZEF0OmEuY3JlYXRlZEF0LHRlbmFudElkOmEudGVuYW50SWR9KTtmb3IodmFyIGI9Vm0oYSksYz0wO2M8Yi5sZW5ndGg7YysrKVBtKHRoaXMsYltjXSk7Um0odGhpcyxcImlzQW5vbnltb3VzXCIsISh0aGlzLmVtYWlsJiZhLnBhc3N3b3JkSGFzaCkmJiEodGhpcy5wcm92aWRlckRhdGEmJnRoaXMucHJvdmlkZXJEYXRhLmxlbmd0aCkpO3RoaXMuZGlzcGF0Y2hFdmVudChuZXcga20oXCJ1c2VyUmVsb2FkZWRcIix7ZWQ6YX0pKX07XG5mdW5jdGlvbiBWbShhKXtyZXR1cm4oYT1hLnByb3ZpZGVyVXNlckluZm8pJiZhLmxlbmd0aD9PYShhLGZ1bmN0aW9uKGIpe3JldHVybiBuZXcgem0oYi5yYXdJZCxiLnByb3ZpZGVySWQsYi5lbWFpbCxiLmRpc3BsYXlOYW1lLGIucGhvdG9VcmwsYi5waG9uZU51bWJlcil9KTpbXX1rLkpjPWZ1bmN0aW9uKGEpe2RmKFwiZmlyZWJhc2UuVXNlci5wcm90b3R5cGUucmVhdXRoZW50aWNhdGVBbmRSZXRyaWV2ZURhdGFXaXRoQ3JlZGVudGlhbCBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGZpcmViYXNlLlVzZXIucHJvdG90eXBlLnJlYXV0aGVudGljYXRlV2l0aENyZWRlbnRpYWwgaW5zdGVhZC5cIik7cmV0dXJuIHRoaXMucGIoYSl9O1xuay5wYj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLGM9bnVsbDtyZXR1cm4gUih0aGlzLGEuYyh0aGlzLmEsdGhpcy51aWQpLnRoZW4oZnVuY3Rpb24oZCl7b20oYixkKTtjPVdtKGIsZCxcInJlYXV0aGVudGljYXRlXCIpO2IuaD1udWxsO3JldHVybiBiLnJlbG9hZCgpfSkudGhlbihmdW5jdGlvbigpe3JldHVybiBjfSksITApfTtmdW5jdGlvbiBYbShhLGIpe3JldHVybiBUbShhKS50aGVuKGZ1bmN0aW9uKCl7aWYoU2EoT20oYSksYikpcmV0dXJuIEttKGEpLnRoZW4oZnVuY3Rpb24oKXt0aHJvdyBuZXcgdShcInByb3ZpZGVyLWFscmVhZHktbGlua2VkXCIpO30pfSl9ay5BYz1mdW5jdGlvbihhKXtkZihcImZpcmViYXNlLlVzZXIucHJvdG90eXBlLmxpbmtBbmRSZXRyaWV2ZURhdGFXaXRoQ3JlZGVudGlhbCBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGZpcmViYXNlLlVzZXIucHJvdG90eXBlLmxpbmtXaXRoQ3JlZGVudGlhbCBpbnN0ZWFkLlwiKTtyZXR1cm4gdGhpcy5tYihhKX07XG5rLm1iPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMsYz1udWxsO3JldHVybiBSKHRoaXMsWG0odGhpcyxhLnByb3ZpZGVySWQpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYi5JKCl9KS50aGVuKGZ1bmN0aW9uKGQpe3JldHVybiBhLmIoYi5hLGQpfSkudGhlbihmdW5jdGlvbihkKXtjPVdtKGIsZCxcImxpbmtcIik7cmV0dXJuIFltKGIsZCl9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGN9KSl9O2suQmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzO3JldHVybiBSKHRoaXMsWG0odGhpcyxcInBob25lXCIpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gWmwoR20oYyksYSxiLHIoYy5tYixjKSl9KSl9O2suS2M9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzO3JldHVybiBSKHRoaXMsRSgpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gWmwoR20oYyksYSxiLHIoYy5wYixjKSl9KSwhMCl9O1xuZnVuY3Rpb24gV20oYSxiLGMpe3ZhciBkPW1oKGIpO2I9bGcoYik7cmV0dXJuIGdmKHt1c2VyOmEsY3JlZGVudGlhbDpkLGFkZGl0aW9uYWxVc2VySW5mbzpiLG9wZXJhdGlvblR5cGU6Y30pfWZ1bmN0aW9uIFltKGEsYil7b20oYSxiKTtyZXR1cm4gYS5yZWxvYWQoKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGF9KX1rLnhiPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIFIodGhpcyx0aGlzLkkoKS50aGVuKGZ1bmN0aW9uKGMpe3JldHVybiBiLmEueGIoYyxhKX0pLnRoZW4oZnVuY3Rpb24oYyl7b20oYixjKTtyZXR1cm4gYi5yZWxvYWQoKX0pKX07ay5jZD1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBSKHRoaXMsdGhpcy5JKCkudGhlbihmdW5jdGlvbihjKXtyZXR1cm4gYS5iKGIuYSxjKX0pLnRoZW4oZnVuY3Rpb24oYyl7b20oYixjKTtyZXR1cm4gYi5yZWxvYWQoKX0pKX07XG5rLnliPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIFIodGhpcyx0aGlzLkkoKS50aGVuKGZ1bmN0aW9uKGMpe3JldHVybiBiLmEueWIoYyxhKX0pLnRoZW4oZnVuY3Rpb24oYyl7b20oYixjKTtyZXR1cm4gYi5yZWxvYWQoKX0pKX07XG5rLnpiPWZ1bmN0aW9uKGEpe2lmKHZvaWQgMD09PWEuZGlzcGxheU5hbWUmJnZvaWQgMD09PWEucGhvdG9VUkwpcmV0dXJuIE5tKHRoaXMpO3ZhciBiPXRoaXM7cmV0dXJuIFIodGhpcyx0aGlzLkkoKS50aGVuKGZ1bmN0aW9uKGMpe3JldHVybiBiLmEuemIoYyx7ZGlzcGxheU5hbWU6YS5kaXNwbGF5TmFtZSxwaG90b1VybDphLnBob3RvVVJMfSl9KS50aGVuKGZ1bmN0aW9uKGMpe29tKGIsYyk7Um0oYixcImRpc3BsYXlOYW1lXCIsYy5kaXNwbGF5TmFtZXx8bnVsbCk7Um0oYixcInBob3RvVVJMXCIsYy5waG90b1VybHx8bnVsbCk7eChiLnByb3ZpZGVyRGF0YSxmdW5jdGlvbihkKXtcInBhc3N3b3JkXCI9PT1kLnByb3ZpZGVySWQmJihLKGQsXCJkaXNwbGF5TmFtZVwiLGIuZGlzcGxheU5hbWUpLEsoZCxcInBob3RvVVJMXCIsYi5waG90b1VSTCkpfSk7cmV0dXJuIEttKGIpfSkudGhlbihNbSkpfTtcbmsuYWQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztyZXR1cm4gUih0aGlzLFRtKHRoaXMpLnRoZW4oZnVuY3Rpb24oYyl7cmV0dXJuIFNhKE9tKGIpLGEpP2xqKGIuYSxjLFthXSkudGhlbihmdW5jdGlvbihkKXt2YXIgZT17fTt4KGQucHJvdmlkZXJVc2VySW5mb3x8W10sZnVuY3Rpb24oZil7ZVtmLnByb3ZpZGVySWRdPSEwfSk7eChPbShiKSxmdW5jdGlvbihmKXtlW2ZdfHxRbShiLGYpfSk7ZVtoaC5QUk9WSURFUl9JRF18fEsoYixcInBob25lTnVtYmVyXCIsbnVsbCk7cmV0dXJuIEttKGIpfSk6S20oYikudGhlbihmdW5jdGlvbigpe3Rocm93IG5ldyB1KFwibm8tc3VjaC1wcm92aWRlclwiKTt9KX0pKX07XG5rLmRlbGV0ZT1mdW5jdGlvbigpe3ZhciBhPXRoaXM7cmV0dXJuIFIodGhpcyx0aGlzLkkoKS50aGVuKGZ1bmN0aW9uKGIpe3JldHVybiBOKGEuYSx6aix7aWRUb2tlbjpifSl9KS50aGVuKGZ1bmN0aW9uKCl7YS5kaXNwYXRjaEV2ZW50KG5ldyBrbShcInVzZXJEZWxldGVkXCIpKX0pKS50aGVuKGZ1bmN0aW9uKCl7Zm9yKHZhciBiPTA7YjxhLk4ubGVuZ3RoO2IrKylhLk5bYl0uY2FuY2VsKFwiYXBwLWRlbGV0ZWRcIik7RW0oYSxudWxsKTtGbShhLG51bGwpO2EuTj1bXTthLkQ9ITA7SW0oYSk7SyhhLFwicmVmcmVzaFRva2VuXCIsbnVsbCk7YS5pJiZJbChhLmksYSl9KX07XG5rLkNiPWZ1bmN0aW9uKGEsYil7cmV0dXJuXCJsaW5rVmlhUG9wdXBcIj09YSYmKHRoaXMuZ3x8bnVsbCk9PWImJnRoaXMuZnx8XCJyZWF1dGhWaWFQb3B1cFwiPT1hJiYodGhpcy5nfHxudWxsKT09YiYmdGhpcy5mfHxcImxpbmtWaWFSZWRpcmVjdFwiPT1hJiYodGhpcy5mYXx8bnVsbCk9PWJ8fFwicmVhdXRoVmlhUmVkaXJlY3RcIj09YSYmKHRoaXMuZmF8fG51bGwpPT1iPyEwOiExfTtrLmxhPWZ1bmN0aW9uKGEsYixjLGQpe1wibGlua1ZpYVBvcHVwXCIhPWEmJlwicmVhdXRoVmlhUG9wdXBcIiE9YXx8ZCE9KHRoaXMuZ3x8bnVsbCl8fChjJiZ0aGlzLnc/dGhpcy53KGMpOmImJiFjJiZ0aGlzLmYmJnRoaXMuZihiKSx0aGlzLmMmJih0aGlzLmMuY2FuY2VsKCksdGhpcy5jPW51bGwpLGRlbGV0ZSB0aGlzLmYsZGVsZXRlIHRoaXMudyl9O1xuay5EYT1mdW5jdGlvbihhLGIpe3JldHVyblwibGlua1ZpYVBvcHVwXCI9PWEmJmI9PSh0aGlzLmd8fG51bGwpP3IodGhpcy5IYix0aGlzKTpcInJlYXV0aFZpYVBvcHVwXCI9PWEmJmI9PSh0aGlzLmd8fG51bGwpP3IodGhpcy5JYix0aGlzKTpcImxpbmtWaWFSZWRpcmVjdFwiPT1hJiYodGhpcy5mYXx8bnVsbCk9PWI/cih0aGlzLkhiLHRoaXMpOlwicmVhdXRoVmlhUmVkaXJlY3RcIj09YSYmKHRoaXMuZmF8fG51bGwpPT1iP3IodGhpcy5JYix0aGlzKTpudWxsfTtrLkNjPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIFptKHRoaXMsXCJsaW5rVmlhUG9wdXBcIixhLGZ1bmN0aW9uKCl7cmV0dXJuIFhtKGIsYS5wcm92aWRlcklkKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIEttKGIpfSl9LCExKX07ay5MYz1mdW5jdGlvbihhKXtyZXR1cm4gWm0odGhpcyxcInJlYXV0aFZpYVBvcHVwXCIsYSxmdW5jdGlvbigpe3JldHVybiBFKCl9LCEwKX07XG5mdW5jdGlvbiBabShhLGIsYyxkLGUpe2lmKCFPZSgpKXJldHVybiBGKG5ldyB1KFwib3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiKSk7aWYoYS5oJiYhZSlyZXR1cm4gRihhLmgpO3ZhciBmPWtnKGMucHJvdmlkZXJJZCksZz1OZShhLnVpZCtcIjo6OlwiKSxoPW51bGw7KCFRZSgpfHxGZSgpKSYmYS5zJiZjLmlzT0F1dGhQcm92aWRlciYmKGg9WWooYS5zLGEubCxhLm0sYixjLG51bGwsZyxmaXJlYmFzZS5TREtfVkVSU0lPTnx8bnVsbCxudWxsLG51bGwsYS50ZW5hbnRJZCkpO3ZhciBtPXdlKGgsZiYmZi50YSxmJiZmLnNhKTtkPWQoKS50aGVuKGZ1bmN0aW9uKCl7JG0oYSk7aWYoIWUpcmV0dXJuIGEuSSgpLnRoZW4oZnVuY3Rpb24oKXt9KX0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gTGwoYS5pLG0sYixjLGcsISFoLGEudGVuYW50SWQpfSkudGhlbihmdW5jdGlvbigpe3JldHVybiBuZXcgRChmdW5jdGlvbihwLHYpe2EubGEoYixudWxsLG5ldyB1KFwiY2FuY2VsbGVkLXBvcHVwLXJlcXVlc3RcIiksXG5hLmd8fG51bGwpO2EuZj1wO2Eudz12O2EuZz1nO2EuYz1ObChhLmksYSxiLG0sZyl9KX0pLnRoZW4oZnVuY3Rpb24ocCl7bSYmdmUobSk7cmV0dXJuIHA/Z2YocCk6bnVsbH0pLm8oZnVuY3Rpb24ocCl7bSYmdmUobSk7dGhyb3cgcDt9KTtyZXR1cm4gUihhLGQsZSl9ay5EYz1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBhbih0aGlzLFwibGlua1ZpYVJlZGlyZWN0XCIsYSxmdW5jdGlvbigpe3JldHVybiBYbShiLGEucHJvdmlkZXJJZCl9LCExKX07ay5NYz1mdW5jdGlvbihhKXtyZXR1cm4gYW4odGhpcyxcInJlYXV0aFZpYVJlZGlyZWN0XCIsYSxmdW5jdGlvbigpe3JldHVybiBFKCl9LCEwKX07XG5mdW5jdGlvbiBhbihhLGIsYyxkLGUpe2lmKCFPZSgpKXJldHVybiBGKG5ldyB1KFwib3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiKSk7aWYoYS5oJiYhZSlyZXR1cm4gRihhLmgpO3ZhciBmPW51bGwsZz1OZShhLnVpZCtcIjo6OlwiKTtkPWQoKS50aGVuKGZ1bmN0aW9uKCl7JG0oYSk7aWYoIWUpcmV0dXJuIGEuSSgpLnRoZW4oZnVuY3Rpb24oKXt9KX0pLnRoZW4oZnVuY3Rpb24oKXthLmZhPWc7cmV0dXJuIEttKGEpfSkudGhlbihmdW5jdGlvbihoKXthLmdhJiYoaD1hLmdhLGg9aC5iLnNldChibixhLnYoKSxoLmEpKTtyZXR1cm4gaH0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gTWwoYS5pLGIsYyxnLGEudGVuYW50SWQpfSkubyhmdW5jdGlvbihoKXtmPWg7aWYoYS5nYSlyZXR1cm4gY24oYS5nYSk7dGhyb3cgZjt9KS50aGVuKGZ1bmN0aW9uKCl7aWYoZil0aHJvdyBmO30pO3JldHVybiBSKGEsZCxlKX1cbmZ1bmN0aW9uICRtKGEpe2lmKCFhLml8fCFhLlApe2lmKGEuaSYmIWEuUCl0aHJvdyBuZXcgdShcImludGVybmFsLWVycm9yXCIpO3Rocm93IG5ldyB1KFwiYXV0aC1kb21haW4tY29uZmlnLXJlcXVpcmVkXCIpO319ay5IYj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT10aGlzO3RoaXMuYyYmKHRoaXMuYy5jYW5jZWwoKSx0aGlzLmM9bnVsbCk7dmFyIGY9bnVsbDtjPXRoaXMuSSgpLnRoZW4oZnVuY3Rpb24oZyl7cmV0dXJuIEVnKGUuYSx7cmVxdWVzdFVyaTphLHBvc3RCb2R5OmQsc2Vzc2lvbklkOmIsaWRUb2tlbjpnfSl9KS50aGVuKGZ1bmN0aW9uKGcpe2Y9V20oZSxnLFwibGlua1wiKTtyZXR1cm4gWW0oZSxnKX0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gZn0pO3JldHVybiBSKHRoaXMsYyl9O1xuay5JYj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT10aGlzO3RoaXMuYyYmKHRoaXMuYy5jYW5jZWwoKSx0aGlzLmM9bnVsbCk7dmFyIGY9bnVsbCxnPUUoKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIHpnKEZnKGUuYSx7cmVxdWVzdFVyaTphLHNlc3Npb25JZDpiLHBvc3RCb2R5OmQsdGVuYW50SWQ6Y30pLGUudWlkKX0pLnRoZW4oZnVuY3Rpb24oaCl7Zj1XbShlLGgsXCJyZWF1dGhlbnRpY2F0ZVwiKTtvbShlLGgpO2UuaD1udWxsO3JldHVybiBlLnJlbG9hZCgpfSkudGhlbihmdW5jdGlvbigpe3JldHVybiBmfSk7cmV0dXJuIFIodGhpcyxnLCEwKX07XG5rLnFiPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMsYz1udWxsO3JldHVybiBSKHRoaXMsdGhpcy5JKCkudGhlbihmdW5jdGlvbihkKXtjPWQ7cmV0dXJuXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhfHxqYihhKT97fTpaZihuZXcgUGYoYSkpfSkudGhlbihmdW5jdGlvbihkKXtyZXR1cm4gYi5hLnFiKGMsZCl9KS50aGVuKGZ1bmN0aW9uKGQpe2lmKGIuZW1haWwhPWQpcmV0dXJuIGIucmVsb2FkKCl9KS50aGVuKGZ1bmN0aW9uKCl7fSkpfTtrLkFiPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcyxkPW51bGw7cmV0dXJuIFIodGhpcyx0aGlzLkkoKS50aGVuKGZ1bmN0aW9uKGUpe2Q9ZTtyZXR1cm5cInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fGpiKGIpP3t9OlpmKG5ldyBQZihiKSl9KS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiBjLmEuQWIoZCxhLGUpfSkudGhlbihmdW5jdGlvbihlKXtpZihjLmVtYWlsIT1lKXJldHVybiBjLnJlbG9hZCgpfSkudGhlbihmdW5jdGlvbigpe30pKX07XG5mdW5jdGlvbiBSKGEsYixjKXt2YXIgZD1kbihhLGIsYyk7YS5OLnB1c2goZCk7ZC5tYShmdW5jdGlvbigpe1RhKGEuTixkKX0pO3JldHVybiBkLm8oZnVuY3Rpb24oZSl7dmFyIGY9bnVsbDtlJiZcImF1dGgvbXVsdGktZmFjdG9yLWF1dGgtcmVxdWlyZWRcIj09PWUuY29kZSYmKGY9ZW0oZS52KCksR20oYSkscihhLmhjLGEpKSk7dGhyb3cgZnx8ZTt9KX1rLmhjPWZ1bmN0aW9uKGEpe3ZhciBiPW51bGwsYz10aGlzO2E9emcoRShhKSxjLnVpZCkudGhlbihmdW5jdGlvbihkKXtiPVdtKGMsZCxcInJlYXV0aGVudGljYXRlXCIpO29tKGMsZCk7Yy5oPW51bGw7cmV0dXJuIGMucmVsb2FkKCl9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGJ9KTtyZXR1cm4gUih0aGlzLGEsITApfTtcbmZ1bmN0aW9uIGRuKGEsYixjKXtyZXR1cm4gYS5oJiYhYz8oYi5jYW5jZWwoKSxGKGEuaCkpOmIubyhmdW5jdGlvbihkKXshZHx8XCJhdXRoL3VzZXItZGlzYWJsZWRcIiE9ZC5jb2RlJiZcImF1dGgvdXNlci10b2tlbi1leHBpcmVkXCIhPWQuY29kZXx8KGEuaHx8YS5kaXNwYXRjaEV2ZW50KG5ldyBrbShcInVzZXJJbnZhbGlkYXRlZFwiKSksYS5oPWQpO3Rocm93IGQ7fSl9ay50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52KCl9O1xuay52PWZ1bmN0aW9uKCl7dmFyIGE9e3VpZDp0aGlzLnVpZCxkaXNwbGF5TmFtZTp0aGlzLmRpc3BsYXlOYW1lLHBob3RvVVJMOnRoaXMucGhvdG9VUkwsZW1haWw6dGhpcy5lbWFpbCxlbWFpbFZlcmlmaWVkOnRoaXMuZW1haWxWZXJpZmllZCxwaG9uZU51bWJlcjp0aGlzLnBob25lTnVtYmVyLGlzQW5vbnltb3VzOnRoaXMuaXNBbm9ueW1vdXMsdGVuYW50SWQ6dGhpcy50ZW5hbnRJZCxwcm92aWRlckRhdGE6W10sYXBpS2V5OnRoaXMubCxhcHBOYW1lOnRoaXMubSxhdXRoRG9tYWluOnRoaXMucyxzdHNUb2tlbk1hbmFnZXI6dGhpcy5iLnYoKSxyZWRpcmVjdEV2ZW50SWQ6dGhpcy5mYXx8bnVsbH07dGhpcy5tZXRhZGF0YSYmQihhLHRoaXMubWV0YWRhdGEudigpKTt4KHRoaXMucHJvdmlkZXJEYXRhLGZ1bmN0aW9uKGIpe2EucHJvdmlkZXJEYXRhLnB1c2goaGYoYikpfSk7QihhLHRoaXMuTy52KCkpO3JldHVybiBhfTtcbmZ1bmN0aW9uIGVuKGEpe2lmKCFhLmFwaUtleSlyZXR1cm4gbnVsbDt2YXIgYj17YXBpS2V5OmEuYXBpS2V5LGF1dGhEb21haW46YS5hdXRoRG9tYWluLGFwcE5hbWU6YS5hcHBOYW1lfSxjPXt9O2lmKGEuc3RzVG9rZW5NYW5hZ2VyJiZhLnN0c1Rva2VuTWFuYWdlci5hY2Nlc3NUb2tlbiljW0FnXT1hLnN0c1Rva2VuTWFuYWdlci5hY2Nlc3NUb2tlbixjLnJlZnJlc2hUb2tlbj1hLnN0c1Rva2VuTWFuYWdlci5yZWZyZXNoVG9rZW58fG51bGw7ZWxzZSByZXR1cm4gbnVsbDt2YXIgZD1uZXcgUChiLGMsYSk7YS5wcm92aWRlckRhdGEmJngoYS5wcm92aWRlckRhdGEsZnVuY3Rpb24oZSl7ZSYmUG0oZCxnZihlKSl9KTthLnJlZGlyZWN0RXZlbnRJZCYmKGQuZmE9YS5yZWRpcmVjdEV2ZW50SWQpO3JldHVybiBkfVxuZnVuY3Rpb24gZm4oYSxiLGMsZCl7dmFyIGU9bmV3IFAoYSxiKTtjJiYoZS5nYT1jKTtkJiZEbShlLGQpO3JldHVybiBlLnJlbG9hZCgpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gZX0pfWZ1bmN0aW9uIGduKGEsYixjLGQpe3ZhciBlPWEuYixmPXt9O2ZbQWddPWUuYiYmZS5iLnRvU3RyaW5nKCk7Zi5yZWZyZXNoVG9rZW49ZS5hO2I9bmV3IFAoYnx8e2FwaUtleTphLmwsYXV0aERvbWFpbjphLnMsYXBwTmFtZTphLm19LGYpO2MmJihiLmdhPWMpO2QmJkRtKGIsZCk7U20oYixhKTtyZXR1cm4gYn07ZnVuY3Rpb24gaG4oYSl7dGhpcy5hPWE7dGhpcy5iPU9rKCl9dmFyIGJuPXtuYW1lOlwicmVkaXJlY3RVc2VyXCIsRjpcInNlc3Npb25cIn07ZnVuY3Rpb24gY24oYSl7cmV0dXJuIFNrKGEuYixibixhLmEpfWZ1bmN0aW9uIGpuKGEsYil7cmV0dXJuIGEuYi5nZXQoYm4sYS5hKS50aGVuKGZ1bmN0aW9uKGMpe2MmJmImJihjLmF1dGhEb21haW49Yik7cmV0dXJuIGVuKGN8fHt9KX0pfTtmdW5jdGlvbiBrbihhKXt0aGlzLmE9YTt0aGlzLmI9T2soKTt0aGlzLmM9bnVsbDt0aGlzLmY9bG4odGhpcyk7dGhpcy5iLmFkZExpc3RlbmVyKG1uKFwibG9jYWxcIiksdGhpcy5hLHIodGhpcy5nLHRoaXMpKX1rbi5wcm90b3R5cGUuZz1mdW5jdGlvbigpe3ZhciBhPXRoaXMsYj1tbihcImxvY2FsXCIpO25uKHRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gRSgpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYS5jJiZcImxvY2FsXCIhPWEuYy5GP2EuYi5nZXQoYixhLmEpOm51bGx9KS50aGVuKGZ1bmN0aW9uKGMpe2lmKGMpcmV0dXJuIG9uKGEsXCJsb2NhbFwiKS50aGVuKGZ1bmN0aW9uKCl7YS5jPWJ9KX0pfSl9O2Z1bmN0aW9uIG9uKGEsYil7dmFyIGM9W10sZDtmb3IoZCBpbiBLaylLa1tkXSE9PWImJmMucHVzaChTayhhLmIsbW4oS2tbZF0pLGEuYSkpO2MucHVzaChTayhhLmIscG4sYS5hKSk7cmV0dXJuIERjKGMpfVxuZnVuY3Rpb24gbG4oYSl7dmFyIGI9bW4oXCJsb2NhbFwiKSxjPW1uKFwic2Vzc2lvblwiKSxkPW1uKFwibm9uZVwiKTtyZXR1cm4gUmsoYS5iLGIsYS5hKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGEuYi5nZXQoYyxhLmEpfSkudGhlbihmdW5jdGlvbihlKXtyZXR1cm4gZT9jOmEuYi5nZXQoZCxhLmEpLnRoZW4oZnVuY3Rpb24oZil7cmV0dXJuIGY/ZDphLmIuZ2V0KGIsYS5hKS50aGVuKGZ1bmN0aW9uKGcpe3JldHVybiBnP2I6YS5iLmdldChwbixhLmEpLnRoZW4oZnVuY3Rpb24oaCl7cmV0dXJuIGg/bW4oaCk6Yn0pfSl9KX0pLnRoZW4oZnVuY3Rpb24oZSl7YS5jPWU7cmV0dXJuIG9uKGEsZS5GKX0pLm8oZnVuY3Rpb24oKXthLmN8fChhLmM9Yil9KX12YXIgcG49e25hbWU6XCJwZXJzaXN0ZW5jZVwiLEY6XCJzZXNzaW9uXCJ9O2Z1bmN0aW9uIG1uKGEpe3JldHVybntuYW1lOlwiYXV0aFVzZXJcIixGOmF9fVxua24ucHJvdG90eXBlLnRiPWZ1bmN0aW9uKGEpe3ZhciBiPW51bGwsYz10aGlzO0xrKGEpO3JldHVybiBubih0aGlzLGZ1bmN0aW9uKCl7cmV0dXJuIGEhPWMuYy5GP2MuYi5nZXQoYy5jLGMuYSkudGhlbihmdW5jdGlvbihkKXtiPWQ7cmV0dXJuIG9uKGMsYSl9KS50aGVuKGZ1bmN0aW9uKCl7Yy5jPW1uKGEpO2lmKGIpcmV0dXJuIGMuYi5zZXQoYy5jLGIsYy5hKX0pOkUoKX0pfTtmdW5jdGlvbiBxbihhKXtyZXR1cm4gbm4oYSxmdW5jdGlvbigpe3JldHVybiBhLmIuc2V0KHBuLGEuYy5GLGEuYSl9KX1mdW5jdGlvbiBybihhLGIpe3JldHVybiBubihhLGZ1bmN0aW9uKCl7cmV0dXJuIGEuYi5zZXQoYS5jLGIudigpLGEuYSl9KX1mdW5jdGlvbiBzbihhKXtyZXR1cm4gbm4oYSxmdW5jdGlvbigpe3JldHVybiBTayhhLmIsYS5jLGEuYSl9KX1cbmZ1bmN0aW9uIHRuKGEsYil7cmV0dXJuIG5uKGEsZnVuY3Rpb24oKXtyZXR1cm4gYS5iLmdldChhLmMsYS5hKS50aGVuKGZ1bmN0aW9uKGMpe2MmJmImJihjLmF1dGhEb21haW49Yik7cmV0dXJuIGVuKGN8fHt9KX0pfSl9ZnVuY3Rpb24gbm4oYSxiKXthLmY9YS5mLnRoZW4oYixiKTtyZXR1cm4gYS5mfTtmdW5jdGlvbiB1bihhKXt0aGlzLmw9ITE7Syh0aGlzLFwic2V0dGluZ3NcIixuZXcgWGwpO0sodGhpcyxcImFwcFwiLGEpO2lmKFModGhpcykub3B0aW9ucyYmUyh0aGlzKS5vcHRpb25zLmFwaUtleSlhPWZpcmViYXNlLlNES19WRVJTSU9OP0xlKGZpcmViYXNlLlNES19WRVJTSU9OKTpudWxsLHRoaXMuYj1uZXcgRWkoUyh0aGlzKS5vcHRpb25zJiZTKHRoaXMpLm9wdGlvbnMuYXBpS2V5LHphKEFhKSxhKTtlbHNlIHRocm93IG5ldyB1KFwiaW52YWxpZC1hcGkta2V5XCIpO3RoaXMuUD1bXTt0aGlzLm09W107dGhpcy5PPVtdO3RoaXMuJGI9ZmlyZWJhc2UuSU5URVJOQUwuY3JlYXRlU3Vic2NyaWJlKHIodGhpcy54Yyx0aGlzKSk7dGhpcy5XPXZvaWQgMDt0aGlzLmFjPWZpcmViYXNlLklOVEVSTkFMLmNyZWF0ZVN1YnNjcmliZShyKHRoaXMueWMsdGhpcykpO3ZuKHRoaXMsbnVsbCk7dGhpcy5pPW5ldyBrbihTKHRoaXMpLm9wdGlvbnMuYXBpS2V5K1wiOlwiK1ModGhpcykubmFtZSk7dGhpcy5CPVxubmV3IGhuKFModGhpcykub3B0aW9ucy5hcGlLZXkrXCI6XCIrUyh0aGlzKS5uYW1lKTt0aGlzLlo9VCh0aGlzLHduKHRoaXMpKTt0aGlzLmg9VCh0aGlzLHhuKHRoaXMpKTt0aGlzLmFhPSExO3RoaXMub2E9cih0aGlzLlhjLHRoaXMpO3RoaXMuTWE9cih0aGlzLmNhLHRoaXMpO3RoaXMueGE9cih0aGlzLmpjLHRoaXMpO3RoaXMueWE9cih0aGlzLnVjLHRoaXMpO3RoaXMuemE9cih0aGlzLnZjLHRoaXMpO3RoaXMuYT1udWxsO3luKHRoaXMpO3RoaXMuSU5URVJOQUw9e307dGhpcy5JTlRFUk5BTFtcImRlbGV0ZVwiXT1yKHRoaXMuZGVsZXRlLHRoaXMpO3RoaXMuSU5URVJOQUwubG9nRnJhbWV3b3JrPXIodGhpcy5FYyx0aGlzKTt0aGlzLnM9MDtHLmNhbGwodGhpcyk7em4odGhpcyk7dGhpcy5OPVtdfXQodW4sRyk7ZnVuY3Rpb24gQW4oYSl7WGMuY2FsbCh0aGlzLFwibGFuZ3VhZ2VDb2RlQ2hhbmdlZFwiKTt0aGlzLmc9YX10KEFuLFhjKTtcbmZ1bmN0aW9uIEJuKGEpe1hjLmNhbGwodGhpcyxcImZyYW1ld29ya0NoYW5nZWRcIik7dGhpcy5jPWF9dChCbixYYyk7az11bi5wcm90b3R5cGU7ay50Yj1mdW5jdGlvbihhKXthPXRoaXMuaS50YihhKTtyZXR1cm4gVCh0aGlzLGEpfTtrLnZhPWZ1bmN0aW9uKGEpe3RoaXMuJD09PWF8fHRoaXMubHx8KHRoaXMuJD1hLEtpKHRoaXMuYix0aGlzLiQpLHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQW4odGhpcy5qYSgpKSkpfTtrLmphPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJH07ay5kZD1mdW5jdGlvbigpe3ZhciBhPWwubmF2aWdhdG9yO3RoaXMudmEoYT9hLmxhbmd1YWdlcyYmYS5sYW5ndWFnZXNbMF18fGEubGFuZ3VhZ2V8fGEudXNlckxhbmd1YWdlfHxudWxsOm51bGwpfTtrLkVjPWZ1bmN0aW9uKGEpe3RoaXMuTi5wdXNoKGEpO0xpKHRoaXMuYixmaXJlYmFzZS5TREtfVkVSU0lPTj9MZShmaXJlYmFzZS5TREtfVkVSU0lPTix0aGlzLk4pOm51bGwpO3RoaXMuZGlzcGF0Y2hFdmVudChuZXcgQm4odGhpcy5OKSl9O1xuay5FYT1mdW5jdGlvbigpe3JldHVybiBXYSh0aGlzLk4pfTtrLnViPWZ1bmN0aW9uKGEpe3RoaXMuUj09PWF8fHRoaXMubHx8KHRoaXMuUj1hLHRoaXMuYi5iPXRoaXMuUil9O2suUz1mdW5jdGlvbigpe3JldHVybiB0aGlzLlJ9O2Z1bmN0aW9uIHpuKGEpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwibGNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuamEoKX0sc2V0OmZ1bmN0aW9uKGIpe3RoaXMudmEoYil9LGVudW1lcmFibGU6ITF9KTthLiQ9bnVsbDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxcInRpXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLlMoKX0sc2V0OmZ1bmN0aW9uKGIpe3RoaXMudWIoYil9LGVudW1lcmFibGU6ITF9KTthLlI9bnVsbH1cbmsudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJue2FwaUtleTpTKHRoaXMpLm9wdGlvbnMuYXBpS2V5LGF1dGhEb21haW46Uyh0aGlzKS5vcHRpb25zLmF1dGhEb21haW4sYXBwTmFtZTpTKHRoaXMpLm5hbWUsY3VycmVudFVzZXI6VSh0aGlzKSYmVSh0aGlzKS52KCl9fTtmdW5jdGlvbiBDbihhKXtyZXR1cm4gYS5aYnx8RihuZXcgdShcImF1dGgtZG9tYWluLWNvbmZpZy1yZXF1aXJlZFwiKSl9ZnVuY3Rpb24geW4oYSl7dmFyIGI9UyhhKS5vcHRpb25zLmF1dGhEb21haW4sYz1TKGEpLm9wdGlvbnMuYXBpS2V5O2ImJk9lKCkmJihhLlpiPWEuWi50aGVuKGZ1bmN0aW9uKCl7aWYoIWEubCl7YS5hPVBsKGIsYyxTKGEpLm5hbWUpO0hsKGEuYSxhKTtVKGEpJiZMbShVKGEpKTtpZihhLkQpe0xtKGEuRCk7dmFyIGQ9YS5EO2QudmEoYS5qYSgpKTtFbShkLGEpO2Q9YS5EO0RtKGQsYS5OKTtGbShkLGEpO2EuRD1udWxsfXJldHVybiBhLmF9fSkpfVxuay5DYj1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIFwidW5rbm93blwiOmNhc2UgXCJzaWduSW5WaWFSZWRpcmVjdFwiOnJldHVybiEwO2Nhc2UgXCJzaWduSW5WaWFQb3B1cFwiOnJldHVybiB0aGlzLmc9PWImJiEhdGhpcy5mO2RlZmF1bHQ6cmV0dXJuITF9fTtrLmxhPWZ1bmN0aW9uKGEsYixjLGQpe1wic2lnbkluVmlhUG9wdXBcIj09YSYmdGhpcy5nPT1kJiYoYyYmdGhpcy53P3RoaXMudyhjKTpiJiYhYyYmdGhpcy5mJiZ0aGlzLmYoYiksdGhpcy5jJiYodGhpcy5jLmNhbmNlbCgpLHRoaXMuYz1udWxsKSxkZWxldGUgdGhpcy5mLGRlbGV0ZSB0aGlzLncpfTtrLkRhPWZ1bmN0aW9uKGEsYil7cmV0dXJuXCJzaWduSW5WaWFSZWRpcmVjdFwiPT1hfHxcInNpZ25JblZpYVBvcHVwXCI9PWEmJnRoaXMuZz09YiYmdGhpcy5mP3IodGhpcy5nYyx0aGlzKTpudWxsfTtcbmsuZ2M9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dGhpcyxmPXtyZXF1ZXN0VXJpOmEscG9zdEJvZHk6ZCxzZXNzaW9uSWQ6Yix0ZW5hbnRJZDpjfTt0aGlzLmMmJih0aGlzLmMuY2FuY2VsKCksdGhpcy5jPW51bGwpO3JldHVybiBlLloudGhlbihmdW5jdGlvbigpe3JldHVybiBEbihlLENnKGUuYixmKSl9KX07XG5rLlZjPWZ1bmN0aW9uKGEpe2lmKCFPZSgpKXJldHVybiBGKG5ldyB1KFwib3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiKSk7dmFyIGI9dGhpcyxjPWtnKGEucHJvdmlkZXJJZCksZD1OZSgpLGU9bnVsbDsoIVFlKCl8fEZlKCkpJiZTKHRoaXMpLm9wdGlvbnMuYXV0aERvbWFpbiYmYS5pc09BdXRoUHJvdmlkZXImJihlPVlqKFModGhpcykub3B0aW9ucy5hdXRoRG9tYWluLFModGhpcykub3B0aW9ucy5hcGlLZXksUyh0aGlzKS5uYW1lLFwic2lnbkluVmlhUG9wdXBcIixhLG51bGwsZCxmaXJlYmFzZS5TREtfVkVSU0lPTnx8bnVsbCxudWxsLG51bGwsdGhpcy5TKCkpKTt2YXIgZj13ZShlLGMmJmMudGEsYyYmYy5zYSk7Yz1Dbih0aGlzKS50aGVuKGZ1bmN0aW9uKGcpe3JldHVybiBMbChnLGYsXCJzaWduSW5WaWFQb3B1cFwiLGEsZCwhIWUsYi5TKCkpfSkudGhlbihmdW5jdGlvbigpe3JldHVybiBuZXcgRChmdW5jdGlvbihnLGgpe2IubGEoXCJzaWduSW5WaWFQb3B1cFwiLFxubnVsbCxuZXcgdShcImNhbmNlbGxlZC1wb3B1cC1yZXF1ZXN0XCIpLGIuZyk7Yi5mPWc7Yi53PWg7Yi5nPWQ7Yi5jPU5sKGIuYSxiLFwic2lnbkluVmlhUG9wdXBcIixmLGQpfSl9KS50aGVuKGZ1bmN0aW9uKGcpe2YmJnZlKGYpO3JldHVybiBnP2dmKGcpOm51bGx9KS5vKGZ1bmN0aW9uKGcpe2YmJnZlKGYpO3Rocm93IGc7fSk7cmV0dXJuIFQodGhpcyxjKX07ay5XYz1mdW5jdGlvbihhKXtpZighT2UoKSlyZXR1cm4gRihuZXcgdShcIm9wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnRcIikpO3ZhciBiPXRoaXMsYz1Dbih0aGlzKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIHFuKGIuaSl9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIE1sKGIuYSxcInNpZ25JblZpYVJlZGlyZWN0XCIsYSx2b2lkIDAsYi5TKCkpfSk7cmV0dXJuIFQodGhpcyxjKX07XG5mdW5jdGlvbiBFbihhKXtpZighT2UoKSlyZXR1cm4gRihuZXcgdShcIm9wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnRcIikpO3ZhciBiPUNuKGEpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYS5hLnBhKCl9KS50aGVuKGZ1bmN0aW9uKGMpe3JldHVybiBjP2dmKGMpOm51bGx9KTtyZXR1cm4gVChhLGIpfWsucGE9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO3JldHVybiBFbih0aGlzKS50aGVuKGZ1bmN0aW9uKGIpe2EuYSYmU2woYS5hLmIpO3JldHVybiBifSkubyhmdW5jdGlvbihiKXthLmEmJlNsKGEuYS5iKTt0aHJvdyBiO30pfTtcbmsuYmQ9ZnVuY3Rpb24oYSl7aWYoIWEpcmV0dXJuIEYobmV3IHUoXCJudWxsLXVzZXJcIikpO2lmKHRoaXMuUiE9YS50ZW5hbnRJZClyZXR1cm4gRihuZXcgdShcInRlbmFudC1pZC1taXNtYXRjaFwiKSk7dmFyIGI9dGhpcyxjPXt9O2MuYXBpS2V5PVModGhpcykub3B0aW9ucy5hcGlLZXk7Yy5hdXRoRG9tYWluPVModGhpcykub3B0aW9ucy5hdXRoRG9tYWluO2MuYXBwTmFtZT1TKHRoaXMpLm5hbWU7dmFyIGQ9Z24oYSxjLGIuQixiLkVhKCkpO3JldHVybiBUKHRoaXMsdGhpcy5oLnRoZW4oZnVuY3Rpb24oKXtpZihTKGIpLm9wdGlvbnMuYXBpS2V5IT1hLmwpcmV0dXJuIGQucmVsb2FkKCl9KS50aGVuKGZ1bmN0aW9uKCl7aWYoVShiKSYmYS51aWQ9PVUoYikudWlkKXJldHVybiBTbShVKGIpLGEpLGIuY2EoYSk7dm4oYixkKTtMbShkKTtyZXR1cm4gYi5jYShkKX0pLnRoZW4oZnVuY3Rpb24oKXtGbihiKX0pKX07XG5mdW5jdGlvbiBHbihhLGIpe3ZhciBjPXt9O2MuYXBpS2V5PVMoYSkub3B0aW9ucy5hcGlLZXk7Yy5hdXRoRG9tYWluPVMoYSkub3B0aW9ucy5hdXRoRG9tYWluO2MuYXBwTmFtZT1TKGEpLm5hbWU7cmV0dXJuIGEuWi50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGZuKGMsYixhLkIsYS5FYSgpKX0pLnRoZW4oZnVuY3Rpb24oZCl7aWYoVShhKSYmZC51aWQ9PVUoYSkudWlkKXJldHVybiBTbShVKGEpLGQpLGEuY2EoZCk7dm4oYSxkKTtMbShkKTtyZXR1cm4gYS5jYShkKX0pLnRoZW4oZnVuY3Rpb24oKXtGbihhKX0pfVxuZnVuY3Rpb24gdm4oYSxiKXtVKGEpJiYoSm0oVShhKSxhLk1hKSx0ZChVKGEpLFwidG9rZW5DaGFuZ2VkXCIsYS54YSksdGQoVShhKSxcInVzZXJEZWxldGVkXCIsYS55YSksdGQoVShhKSxcInVzZXJJbnZhbGlkYXRlZFwiLGEuemEpLEltKFUoYSkpKTtiJiYoYi5SLnB1c2goYS5NYSksamQoYixcInRva2VuQ2hhbmdlZFwiLGEueGEpLGpkKGIsXCJ1c2VyRGVsZXRlZFwiLGEueWEpLGpkKGIsXCJ1c2VySW52YWxpZGF0ZWRcIixhLnphKSwwPGEucyYmSG0oYikpO0soYSxcImN1cnJlbnRVc2VyXCIsYik7YiYmKGIudmEoYS5qYSgpKSxFbShiLGEpLERtKGIsYS5OKSxGbShiLGEpKX1rLndiPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcyxiPXRoaXMuaC50aGVuKGZ1bmN0aW9uKCl7YS5hJiZTbChhLmEuYik7aWYoIVUoYSkpcmV0dXJuIEUoKTt2bihhLG51bGwpO3JldHVybiBzbihhLmkpLnRoZW4oZnVuY3Rpb24oKXtGbihhKX0pfSk7cmV0dXJuIFQodGhpcyxiKX07XG5mdW5jdGlvbiBIbihhKXt2YXIgYj1qbihhLkIsUyhhKS5vcHRpb25zLmF1dGhEb21haW4pLnRoZW4oZnVuY3Rpb24oYyl7aWYoYS5EPWMpYy5nYT1hLkI7cmV0dXJuIGNuKGEuQil9KTtyZXR1cm4gVChhLGIpfWZ1bmN0aW9uIHduKGEpe3ZhciBiPVMoYSkub3B0aW9ucy5hdXRoRG9tYWluLGM9SG4oYSkudGhlbihmdW5jdGlvbigpe3JldHVybiB0bihhLmksYil9KS50aGVuKGZ1bmN0aW9uKGQpe3JldHVybiBkPyhkLmdhPWEuQixhLkQmJihhLkQuZmF8fG51bGwpPT0oZC5mYXx8bnVsbCk/ZDpkLnJlbG9hZCgpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gcm4oYS5pLGQpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gZH0pfSkubyhmdW5jdGlvbihlKXtyZXR1cm5cImF1dGgvbmV0d29yay1yZXF1ZXN0LWZhaWxlZFwiPT1lLmNvZGU/ZDpzbihhLmkpfSkpOm51bGx9KS50aGVuKGZ1bmN0aW9uKGQpe3ZuKGEsZHx8bnVsbCl9KTtyZXR1cm4gVChhLGMpfVxuZnVuY3Rpb24geG4oYSl7cmV0dXJuIGEuWi50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIEVuKGEpfSkubyhmdW5jdGlvbigpe30pLnRoZW4oZnVuY3Rpb24oKXtpZighYS5sKXJldHVybiBhLm9hKCl9KS5vKGZ1bmN0aW9uKCl7fSkudGhlbihmdW5jdGlvbigpe2lmKCFhLmwpe2EuYWE9ITA7dmFyIGI9YS5pO2IuYi5hZGRMaXN0ZW5lcihtbihcImxvY2FsXCIpLGIuYSxhLm9hKX19KX1cbmsuWGM9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO3JldHVybiB0bih0aGlzLmksUyh0aGlzKS5vcHRpb25zLmF1dGhEb21haW4pLnRoZW4oZnVuY3Rpb24oYil7aWYoIWEubCl7dmFyIGM7aWYoYz1VKGEpJiZiKXtjPVUoYSkudWlkO3ZhciBkPWIudWlkO2M9dm9pZCAwPT09Y3x8bnVsbD09PWN8fFwiXCI9PT1jfHx2b2lkIDA9PT1kfHxudWxsPT09ZHx8XCJcIj09PWQ/ITE6Yz09ZH1pZihjKXJldHVybiBTbShVKGEpLGIpLFUoYSkuSSgpO2lmKFUoYSl8fGIpdm4oYSxiKSxiJiYoTG0oYiksYi5nYT1hLkIpLGEuYSYmSGwoYS5hLGEpLEZuKGEpfX0pfTtrLmNhPWZ1bmN0aW9uKGEpe3JldHVybiBybih0aGlzLmksYSl9O2suamM9ZnVuY3Rpb24oKXtGbih0aGlzKTt0aGlzLmNhKFUodGhpcykpfTtrLnVjPWZ1bmN0aW9uKCl7dGhpcy53YigpfTtrLnZjPWZ1bmN0aW9uKCl7dGhpcy53YigpfTtcbmZ1bmN0aW9uIERuKGEsYil7dmFyIGM9bnVsbCxkPW51bGw7cmV0dXJuIFQoYSxiLnRoZW4oZnVuY3Rpb24oZSl7Yz1taChlKTtkPWxnKGUpO3JldHVybiBHbihhLGUpfSxmdW5jdGlvbihlKXt2YXIgZj1udWxsO2UmJlwiYXV0aC9tdWx0aS1mYWN0b3ItYXV0aC1yZXF1aXJlZFwiPT09ZS5jb2RlJiYoZj1lbShlLnYoKSxhLHIoYS5pYyxhKSkpO3Rocm93IGZ8fGU7fSkudGhlbihmdW5jdGlvbigpe3JldHVybiBnZih7dXNlcjpVKGEpLGNyZWRlbnRpYWw6YyxhZGRpdGlvbmFsVXNlckluZm86ZCxvcGVyYXRpb25UeXBlOlwic2lnbkluXCJ9KX0pKX1rLmljPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIHRoaXMuaC50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIERuKGIsRShhKSl9KX07ay54Yz1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3RoaXMuYWRkQXV0aFRva2VuTGlzdGVuZXIoZnVuY3Rpb24oKXthLm5leHQoVShiKSl9KX07XG5rLnljPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7SW4odGhpcyxmdW5jdGlvbigpe2EubmV4dChVKGIpKX0pfTtrLkdjPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzO3RoaXMuYWEmJlByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24oKXtuKGEpP2EoVShkKSk6bihhLm5leHQpJiZhLm5leHQoVShkKSl9KTtyZXR1cm4gdGhpcy4kYihhLGIsYyl9O2suRmM9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXM7dGhpcy5hYSYmUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpe2QuVz1kLmdldFVpZCgpO24oYSk/YShVKGQpKTpuKGEubmV4dCkmJmEubmV4dChVKGQpKX0pO3JldHVybiB0aGlzLmFjKGEsYixjKX07ay5rYz1mdW5jdGlvbihhKXt2YXIgYj10aGlzLGM9dGhpcy5oLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gVShiKT9VKGIpLkkoYSkudGhlbihmdW5jdGlvbihkKXtyZXR1cm57YWNjZXNzVG9rZW46ZH19KTpudWxsfSk7cmV0dXJuIFQodGhpcyxjKX07XG5rLlJjPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIHRoaXMuaC50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIERuKGIsTihiLmIsRWose3Rva2VuOmF9KSl9KS50aGVuKGZ1bmN0aW9uKGMpe3ZhciBkPWMudXNlcjtSbShkLFwiaXNBbm9ueW1vdXNcIiwhMSk7Yi5jYShkKTtyZXR1cm4gY30pfTtrLlNjPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcztyZXR1cm4gdGhpcy5oLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gRG4oYyxOKGMuYixYZyx7ZW1haWw6YSxwYXNzd29yZDpifSkpfSl9O2suY2M9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzO3JldHVybiB0aGlzLmgudGhlbihmdW5jdGlvbigpe3JldHVybiBEbihjLE4oYy5iLHlqLHtlbWFpbDphLHBhc3N3b3JkOmJ9KSl9KX07ay5ZYT1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiB0aGlzLmgudGhlbihmdW5jdGlvbigpe3JldHVybiBEbihiLGEuaWEoYi5iKSl9KX07XG5rLlFjPWZ1bmN0aW9uKGEpe2RmKFwiZmlyZWJhc2UuYXV0aC5BdXRoLnByb3RvdHlwZS5zaWduSW5BbmRSZXRyaWV2ZURhdGFXaXRoQ3JlZGVudGlhbCBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGZpcmViYXNlLmF1dGguQXV0aC5wcm90b3R5cGUuc2lnbkluV2l0aENyZWRlbnRpYWwgaW5zdGVhZC5cIik7cmV0dXJuIHRoaXMuWWEoYSl9O2sudmI9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO3JldHVybiB0aGlzLmgudGhlbihmdW5jdGlvbigpe3ZhciBiPVUoYSk7aWYoYiYmYi5pc0Fub255bW91cyl7dmFyIGM9Z2Yoe3Byb3ZpZGVySWQ6bnVsbCxpc05ld1VzZXI6ITF9KTtyZXR1cm4gZ2Yoe3VzZXI6YixjcmVkZW50aWFsOm51bGwsYWRkaXRpb25hbFVzZXJJbmZvOmMsb3BlcmF0aW9uVHlwZTpcInNpZ25JblwifSl9cmV0dXJuIERuKGEsYS5iLnZiKCkpLnRoZW4oZnVuY3Rpb24oZCl7dmFyIGU9ZC51c2VyO1JtKGUsXCJpc0Fub255bW91c1wiLCEwKTthLmNhKGUpO3JldHVybiBkfSl9KX07XG5mdW5jdGlvbiBTKGEpe3JldHVybiBhLmFwcH1mdW5jdGlvbiBVKGEpe3JldHVybiBhLmN1cnJlbnRVc2VyfWsuZ2V0VWlkPWZ1bmN0aW9uKCl7cmV0dXJuIFUodGhpcykmJlUodGhpcykudWlkfHxudWxsfTtmdW5jdGlvbiBKbihhKXtyZXR1cm4gVShhKSYmVShhKS5fbGF0fHxudWxsfWZ1bmN0aW9uIEZuKGEpe2lmKGEuYWEpe2Zvcih2YXIgYj0wO2I8YS5tLmxlbmd0aDtiKyspaWYoYS5tW2JdKWEubVtiXShKbihhKSk7aWYoYS5XIT09YS5nZXRVaWQoKSYmYS5PLmxlbmd0aClmb3IoYS5XPWEuZ2V0VWlkKCksYj0wO2I8YS5PLmxlbmd0aDtiKyspaWYoYS5PW2JdKWEuT1tiXShKbihhKSl9fWsuYmM9ZnVuY3Rpb24oYSl7dGhpcy5hZGRBdXRoVG9rZW5MaXN0ZW5lcihhKTt0aGlzLnMrKzswPHRoaXMucyYmVSh0aGlzKSYmSG0oVSh0aGlzKSl9O1xuay5OYz1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3godGhpcy5tLGZ1bmN0aW9uKGMpe2M9PWEmJmIucy0tfSk7MD50aGlzLnMmJih0aGlzLnM9MCk7MD09dGhpcy5zJiZVKHRoaXMpJiZJbShVKHRoaXMpKTt0aGlzLnJlbW92ZUF1dGhUb2tlbkxpc3RlbmVyKGEpfTtrLmFkZEF1dGhUb2tlbkxpc3RlbmVyPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7dGhpcy5tLnB1c2goYSk7VCh0aGlzLHRoaXMuaC50aGVuKGZ1bmN0aW9uKCl7Yi5sfHxTYShiLm0sYSkmJmEoSm4oYikpfSkpfTtrLnJlbW92ZUF1dGhUb2tlbkxpc3RlbmVyPWZ1bmN0aW9uKGEpe1VhKHRoaXMubSxmdW5jdGlvbihiKXtyZXR1cm4gYj09YX0pfTtmdW5jdGlvbiBJbihhLGIpe2EuTy5wdXNoKGIpO1QoYSxhLmgudGhlbihmdW5jdGlvbigpeyFhLmwmJlNhKGEuTyxiKSYmYS5XIT09YS5nZXRVaWQoKSYmKGEuVz1hLmdldFVpZCgpLGIoSm4oYSkpKX0pKX1cbmsuZGVsZXRlPWZ1bmN0aW9uKCl7dGhpcy5sPSEwO2Zvcih2YXIgYT0wO2E8dGhpcy5QLmxlbmd0aDthKyspdGhpcy5QW2FdLmNhbmNlbChcImFwcC1kZWxldGVkXCIpO3RoaXMuUD1bXTt0aGlzLmkmJihhPXRoaXMuaSxhLmIucmVtb3ZlTGlzdGVuZXIobW4oXCJsb2NhbFwiKSxhLmEsdGhpcy5vYSkpO3RoaXMuYSYmKElsKHRoaXMuYSx0aGlzKSxTbCh0aGlzLmEuYikpO3JldHVybiBQcm9taXNlLnJlc29sdmUoKX07ZnVuY3Rpb24gVChhLGIpe2EuUC5wdXNoKGIpO2IubWEoZnVuY3Rpb24oKXtUYShhLlAsYil9KTtyZXR1cm4gYn1rLmZjPWZ1bmN0aW9uKGEpe3JldHVybiBUKHRoaXMsVmkodGhpcy5iLGEpKX07ay56Yz1mdW5jdGlvbihhKXtyZXR1cm4hIWJoKGEpfTtcbmsuc2I9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzO3JldHVybiBUKHRoaXMsRSgpLnRoZW4oZnVuY3Rpb24oKXt2YXIgZD1uZXcgUGYoYik7aWYoIWQuYyl0aHJvdyBuZXcgdShcImFyZ3VtZW50LWVycm9yXCIsWGYrXCIgbXVzdCBiZSB0cnVlIHdoZW4gc2VuZGluZyBzaWduIGluIGxpbmsgdG8gZW1haWxcIik7cmV0dXJuIFpmKGQpfSkudGhlbihmdW5jdGlvbihkKXtyZXR1cm4gYy5iLnNiKGEsZCl9KS50aGVuKGZ1bmN0aW9uKCl7fSkpfTtrLmZkPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLlBhKGEpLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuIGIuZGF0YS5lbWFpbH0pfTtrLmpiPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFQodGhpcyx0aGlzLmIuamIoYSxiKS50aGVuKGZ1bmN0aW9uKCl7fSkpfTtrLlBhPWZ1bmN0aW9uKGEpe3JldHVybiBUKHRoaXMsdGhpcy5iLlBhKGEpLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuIG5ldyBzZihiKX0pKX07XG5rLmZiPWZ1bmN0aW9uKGEpe3JldHVybiBUKHRoaXMsdGhpcy5iLmZiKGEpLnRoZW4oZnVuY3Rpb24oKXt9KSl9O2sucmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzO3JldHVybiBUKHRoaXMsRSgpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm5cInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fGpiKGIpP3t9OlpmKG5ldyBQZihiKSl9KS50aGVuKGZ1bmN0aW9uKGQpe3JldHVybiBjLmIucmIoYSxkKX0pLnRoZW4oZnVuY3Rpb24oKXt9KSl9O2suVWM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVCh0aGlzLFpsKHRoaXMsYSxiLHIodGhpcy5ZYSx0aGlzKSkpfTtcbmsuVGM9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzO3JldHVybiBUKHRoaXMsRSgpLnRoZW4oZnVuY3Rpb24oKXt2YXIgZD1ifHxvZSgpLGU9YWgoYSxkKTtkPWJoKGQpO2lmKCFkKXRocm93IG5ldyB1KFwiYXJndW1lbnQtZXJyb3JcIixcIkludmFsaWQgZW1haWwgbGluayFcIik7aWYoZC50ZW5hbnRJZCE9PWMuUygpKXRocm93IG5ldyB1KFwidGVuYW50LWlkLW1pc21hdGNoXCIpO3JldHVybiBjLllhKGUpfSkpfTtmdW5jdGlvbiBLbigpe31Lbi5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKCl7fTtLbi5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt9O0tuLnByb3RvdHlwZS5nZXRSZXNwb25zZT1mdW5jdGlvbigpe307S24ucHJvdG90eXBlLmV4ZWN1dGU9ZnVuY3Rpb24oKXt9O2Z1bmN0aW9uIExuKCl7dGhpcy5hPXt9O3RoaXMuYj0xRTEyfXZhciBNbj1udWxsO0xuLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt0aGlzLmFbdGhpcy5iLnRvU3RyaW5nKCldPW5ldyBObihhLGIpO3JldHVybiB0aGlzLmIrK307TG4ucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKGEpe3ZhciBiPU9uKHRoaXMsYSk7YT1QbihhKTtiJiZhJiYoYi5kZWxldGUoKSxkZWxldGUgdGhpcy5hW2FdKX07TG4ucHJvdG90eXBlLmdldFJlc3BvbnNlPWZ1bmN0aW9uKGEpe3JldHVybihhPU9uKHRoaXMsYSkpP2EuZ2V0UmVzcG9uc2UoKTpudWxsfTtMbi5wcm90b3R5cGUuZXhlY3V0ZT1mdW5jdGlvbihhKXsoYT1Pbih0aGlzLGEpKSYmYS5leGVjdXRlKCl9O2Z1bmN0aW9uIE9uKGEsYil7cmV0dXJuKGI9UG4oYikpP2EuYVtiXXx8bnVsbDpudWxsfWZ1bmN0aW9uIFBuKGEpe3JldHVybihhPVwidW5kZWZpbmVkXCI9PT10eXBlb2YgYT8xRTEyOmEpP2EudG9TdHJpbmcoKTpudWxsfVxuZnVuY3Rpb24gTm4oYSxiKXt0aGlzLmc9ITE7dGhpcy5jPWI7dGhpcy5hPXRoaXMuYj1udWxsO3RoaXMuaD1cImludmlzaWJsZVwiIT09dGhpcy5jLnNpemU7dGhpcy5mPWVjKGEpO3ZhciBjPXRoaXM7dGhpcy5pPWZ1bmN0aW9uKCl7Yy5leGVjdXRlKCl9O3RoaXMuaD90aGlzLmV4ZWN1dGUoKTpqZCh0aGlzLmYsXCJjbGlja1wiLHRoaXMuaSl9Tm4ucHJvdG90eXBlLmdldFJlc3BvbnNlPWZ1bmN0aW9uKCl7UW4odGhpcyk7cmV0dXJuIHRoaXMuYn07XG5Obi5wcm90b3R5cGUuZXhlY3V0ZT1mdW5jdGlvbigpe1FuKHRoaXMpO3ZhciBhPXRoaXM7dGhpcy5hfHwodGhpcy5hPXNldFRpbWVvdXQoZnVuY3Rpb24oKXthLmI9SmUoKTt2YXIgYj1hLmMuY2FsbGJhY2ssYz1hLmNbXCJleHBpcmVkLWNhbGxiYWNrXCJdO2lmKGIpdHJ5e2IoYS5iKX1jYXRjaChkKXt9YS5hPXNldFRpbWVvdXQoZnVuY3Rpb24oKXthLmE9bnVsbDthLmI9bnVsbDtpZihjKXRyeXtjKCl9Y2F0Y2goZCl7fWEuaCYmYS5leGVjdXRlKCl9LDZFNCl9LDUwMCkpfTtObi5wcm90b3R5cGUuZGVsZXRlPWZ1bmN0aW9uKCl7UW4odGhpcyk7dGhpcy5nPSEwO2NsZWFyVGltZW91dCh0aGlzLmEpO3RoaXMuYT1udWxsO3RkKHRoaXMuZixcImNsaWNrXCIsdGhpcy5pKX07ZnVuY3Rpb24gUW4oYSl7aWYoYS5nKXRocm93IEVycm9yKFwicmVDQVBUQ0hBIG1vY2sgd2FzIGFscmVhZHkgZGVsZXRlZCFcIik7fTtmdW5jdGlvbiBSbigpe31LKFJuLFwiRkFDVE9SX0lEXCIsXCJwaG9uZVwiKTtmdW5jdGlvbiBTbigpe31Tbi5wcm90b3R5cGUuZz1mdW5jdGlvbigpe01ufHwoTW49bmV3IExuKTtyZXR1cm4gRShNbil9O1NuLnByb3RvdHlwZS5jPWZ1bmN0aW9uKCl7fTt2YXIgVG49bnVsbDtmdW5jdGlvbiBVbigpe3RoaXMuYj1sLmdyZWNhcHRjaGE/SW5maW5pdHk6MDt0aGlzLmY9bnVsbDt0aGlzLmE9XCJfX3JjYlwiK01hdGguZmxvb3IoMUU2Kk1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKCl9dmFyIFZuPW5ldyBuYihvYixcImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vcmVjYXB0Y2hhL2FwaS5qcz9vbmxvYWQ9JXtvbmxvYWR9JnJlbmRlcj1leHBsaWNpdCZobD0le2hsfVwiKSxXbj1uZXcgV2UoM0U0LDZFNCk7XG5Vbi5wcm90b3R5cGUuZz1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBuZXcgRChmdW5jdGlvbihjLGQpe3ZhciBlPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtkKG5ldyB1KFwibmV0d29yay1yZXF1ZXN0LWZhaWxlZFwiKSl9LFduLmdldCgpKTtpZighbC5ncmVjYXB0Y2hhfHxhIT09Yi5mJiYhYi5iKXtsW2IuYV09ZnVuY3Rpb24oKXtpZihsLmdyZWNhcHRjaGEpe2IuZj1hO3ZhciBnPWwuZ3JlY2FwdGNoYS5yZW5kZXI7bC5ncmVjYXB0Y2hhLnJlbmRlcj1mdW5jdGlvbihoLG0pe2g9ZyhoLG0pO2IuYisrO3JldHVybiBofTtjbGVhclRpbWVvdXQoZSk7YyhsLmdyZWNhcHRjaGEpfWVsc2UgY2xlYXJUaW1lb3V0KGUpLGQobmV3IHUoXCJpbnRlcm5hbC1lcnJvclwiKSk7ZGVsZXRlIGxbYi5hXX07dmFyIGY9d2IoVm4se29ubG9hZDpiLmEsaGw6YXx8XCJcIn0pO0UoeGkoZikpLm8oZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQoZSk7ZChuZXcgdShcImludGVybmFsLWVycm9yXCIsXCJVbmFibGUgdG8gbG9hZCBleHRlcm5hbCByZUNBUFRDSEEgZGVwZW5kZW5jaWVzIVwiKSl9KX1lbHNlIGNsZWFyVGltZW91dChlKSxcbmMobC5ncmVjYXB0Y2hhKX0pfTtVbi5wcm90b3R5cGUuYz1mdW5jdGlvbigpe3RoaXMuYi0tfTt2YXIgWG49bnVsbDtmdW5jdGlvbiBZbihhLGIsYyxkLGUsZixnKXtLKHRoaXMsXCJ0eXBlXCIsXCJyZWNhcHRjaGFcIik7dGhpcy5jPXRoaXMuZj1udWxsO3RoaXMuRD0hMTt0aGlzLnU9Yjt0aGlzLmc9bnVsbDtnPyhUbnx8KFRuPW5ldyBTbiksZz1Ubik6KFhufHwoWG49bmV3IFVuKSxnPVhuKTt0aGlzLm09Zzt0aGlzLmE9Y3x8e3RoZW1lOlwibGlnaHRcIix0eXBlOlwiaW1hZ2VcIn07dGhpcy5oPVtdO2lmKHRoaXMuYVtabl0pdGhyb3cgbmV3IHUoXCJhcmd1bWVudC1lcnJvclwiLFwic2l0ZWtleSBzaG91bGQgbm90IGJlIHByb3ZpZGVkIGZvciByZUNBUFRDSEEgYXMgb25lIGlzIGF1dG9tYXRpY2FsbHkgcHJvdmlzaW9uZWQgZm9yIHRoZSBjdXJyZW50IHByb2plY3QuXCIpO3RoaXMuaT1cImludmlzaWJsZVwiPT09dGhpcy5hWyRuXTtpZighbC5kb2N1bWVudCl0aHJvdyBuZXcgdShcIm9wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnRcIixcIlJlY2FwdGNoYVZlcmlmaWVyIGlzIG9ubHkgc3VwcG9ydGVkIGluIGEgYnJvd3NlciBIVFRQL0hUVFBTIGVudmlyb25tZW50IHdpdGggRE9NIHN1cHBvcnQuXCIpO1xuaWYoIWVjKGIpfHwhdGhpcy5pJiZlYyhiKS5oYXNDaGlsZE5vZGVzKCkpdGhyb3cgbmV3IHUoXCJhcmd1bWVudC1lcnJvclwiLFwicmVDQVBUQ0hBIGNvbnRhaW5lciBpcyBlaXRoZXIgbm90IGZvdW5kIG9yIGFscmVhZHkgY29udGFpbnMgaW5uZXIgZWxlbWVudHMhXCIpO3RoaXMucz1uZXcgRWkoYSxmfHxudWxsLGV8fG51bGwpO3RoaXMudz1kfHxmdW5jdGlvbigpe3JldHVybiBudWxsfTt2YXIgaD10aGlzO3RoaXMubD1bXTt2YXIgbT10aGlzLmFbYW9dO3RoaXMuYVthb109ZnVuY3Rpb24odil7Ym8oaCx2KTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSltKHYpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBtKXt2YXIgQz1KKG0sbCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIEMmJkModil9fTt2YXIgcD10aGlzLmFbY29dO3RoaXMuYVtjb109ZnVuY3Rpb24oKXtibyhoLG51bGwpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBwKXAoKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgcCl7dmFyIHY9XG5KKHAsbCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHYmJnYoKX19fXZhciBhbz1cImNhbGxiYWNrXCIsY289XCJleHBpcmVkLWNhbGxiYWNrXCIsWm49XCJzaXRla2V5XCIsJG49XCJzaXplXCI7ZnVuY3Rpb24gYm8oYSxiKXtmb3IodmFyIGM9MDtjPGEubC5sZW5ndGg7YysrKXRyeXthLmxbY10oYil9Y2F0Y2goZCl7fX1mdW5jdGlvbiBlbyhhLGIpe1VhKGEubCxmdW5jdGlvbihjKXtyZXR1cm4gYz09Yn0pfWZ1bmN0aW9uIGZvKGEsYil7YS5oLnB1c2goYik7Yi5tYShmdW5jdGlvbigpe1RhKGEuaCxiKX0pO3JldHVybiBifWs9WW4ucHJvdG90eXBlO1xuay5HYT1mdW5jdGlvbigpe3ZhciBhPXRoaXM7cmV0dXJuIHRoaXMuZj90aGlzLmY6dGhpcy5mPWZvKHRoaXMsRSgpLnRoZW4oZnVuY3Rpb24oKXtpZihQZSgpJiYhR2UoKSlyZXR1cm4gQmUoKTt0aHJvdyBuZXcgdShcIm9wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnRcIixcIlJlY2FwdGNoYVZlcmlmaWVyIGlzIG9ubHkgc3VwcG9ydGVkIGluIGEgYnJvd3NlciBIVFRQL0hUVFBTIGVudmlyb25tZW50LlwiKTt9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGEubS5nKGEudygpKX0pLnRoZW4oZnVuY3Rpb24oYil7YS5nPWI7cmV0dXJuIE4oYS5zLERqLHt9KX0pLnRoZW4oZnVuY3Rpb24oYil7YS5hW1puXT1iLnJlY2FwdGNoYVNpdGVLZXl9KS5vKGZ1bmN0aW9uKGIpe2EuZj1udWxsO3Rocm93IGI7fSkpfTtcbmsucmVuZGVyPWZ1bmN0aW9uKCl7Z28odGhpcyk7dmFyIGE9dGhpcztyZXR1cm4gZm8odGhpcyx0aGlzLkdhKCkudGhlbihmdW5jdGlvbigpe2lmKG51bGw9PT1hLmMpe3ZhciBiPWEudTtpZighYS5pKXt2YXIgYz1lYyhiKTtiPWhjKFwiRElWXCIpO2MuYXBwZW5kQ2hpbGQoYil9YS5jPWEuZy5yZW5kZXIoYixhLmEpfXJldHVybiBhLmN9KSl9O2sudmVyaWZ5PWZ1bmN0aW9uKCl7Z28odGhpcyk7dmFyIGE9dGhpcztyZXR1cm4gZm8odGhpcyx0aGlzLnJlbmRlcigpLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuIG5ldyBEKGZ1bmN0aW9uKGMpe3ZhciBkPWEuZy5nZXRSZXNwb25zZShiKTtpZihkKWMoZCk7ZWxzZXt2YXIgZT1mdW5jdGlvbihmKXtmJiYoZW8oYSxlKSxjKGYpKX07YS5sLnB1c2goZSk7YS5pJiZhLmcuZXhlY3V0ZShhLmMpfX0pfSkpfTtrLnJlc2V0PWZ1bmN0aW9uKCl7Z28odGhpcyk7bnVsbCE9PXRoaXMuYyYmdGhpcy5nLnJlc2V0KHRoaXMuYyl9O1xuZnVuY3Rpb24gZ28oYSl7aWYoYS5EKXRocm93IG5ldyB1KFwiaW50ZXJuYWwtZXJyb3JcIixcIlJlY2FwdGNoYVZlcmlmaWVyIGluc3RhbmNlIGhhcyBiZWVuIGRlc3Ryb3llZC5cIik7fWsuY2xlYXI9ZnVuY3Rpb24oKXtnbyh0aGlzKTt0aGlzLkQ9ITA7dGhpcy5tLmMoKTtmb3IodmFyIGE9MDthPHRoaXMuaC5sZW5ndGg7YSsrKXRoaXMuaFthXS5jYW5jZWwoXCJSZWNhcHRjaGFWZXJpZmllciBpbnN0YW5jZSBoYXMgYmVlbiBkZXN0cm95ZWQuXCIpO2lmKCF0aGlzLmkpe2E9ZWModGhpcy51KTtmb3IodmFyIGI7Yj1hLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYil9fTtcbmZ1bmN0aW9uIGhvKGEsYixjKXt2YXIgZD0hMTt0cnl7dGhpcy5iPWN8fGZpcmViYXNlLmFwcCgpfWNhdGNoKGcpe3Rocm93IG5ldyB1KFwiYXJndW1lbnQtZXJyb3JcIixcIk5vIGZpcmViYXNlLmFwcC5BcHAgaW5zdGFuY2UgaXMgY3VycmVudGx5IGluaXRpYWxpemVkLlwiKTt9aWYodGhpcy5iLm9wdGlvbnMmJnRoaXMuYi5vcHRpb25zLmFwaUtleSljPXRoaXMuYi5vcHRpb25zLmFwaUtleTtlbHNlIHRocm93IG5ldyB1KFwiaW52YWxpZC1hcGkta2V5XCIpO3ZhciBlPXRoaXMsZj1udWxsO3RyeXtmPXRoaXMuYi5hdXRoKCkuRWEoKX1jYXRjaChnKXt9dHJ5e2Q9dGhpcy5iLmF1dGgoKS5zZXR0aW5ncy5hcHBWZXJpZmljYXRpb25EaXNhYmxlZEZvclRlc3Rpbmd9Y2F0Y2goZyl7fWY9ZmlyZWJhc2UuU0RLX1ZFUlNJT04/TGUoZmlyZWJhc2UuU0RLX1ZFUlNJT04sZik6bnVsbDtZbi5jYWxsKHRoaXMsYyxhLGIsZnVuY3Rpb24oKXt0cnl7dmFyIGc9ZS5iLmF1dGgoKS5qYSgpfWNhdGNoKGgpe2c9XG5udWxsfXJldHVybiBnfSxmLHphKEFhKSxkKX10KGhvLFluKTtmdW5jdGlvbiBpbyhhLGIsYyxkKXthOntjPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGMpO3ZhciBlPTA7Zm9yKHZhciBmPSExLGc9MDtnPGIubGVuZ3RoO2crKylpZihiW2ddLm9wdGlvbmFsKWY9ITA7ZWxzZXtpZihmKXRocm93IG5ldyB1KFwiaW50ZXJuYWwtZXJyb3JcIixcIkFyZ3VtZW50IHZhbGlkYXRvciBlbmNvdW50ZXJlZCBhIHJlcXVpcmVkIGFyZ3VtZW50IGFmdGVyIGFuIG9wdGlvbmFsIGFyZ3VtZW50LlwiKTtlKyt9Zj1iLmxlbmd0aDtpZihjLmxlbmd0aDxlfHxmPGMubGVuZ3RoKWQ9XCJFeHBlY3RlZCBcIisoZT09Zj8xPT1lP1wiMSBhcmd1bWVudFwiOmUrXCIgYXJndW1lbnRzXCI6ZStcIi1cIitmK1wiIGFyZ3VtZW50c1wiKStcIiBidXQgZ290IFwiK2MubGVuZ3RoK1wiLlwiO2Vsc2V7Zm9yKGU9MDtlPGMubGVuZ3RoO2UrKylpZihmPWJbZV0ub3B0aW9uYWwmJnZvaWQgMD09PWNbZV0sIWJbZV0uSyhjW2VdKSYmIWYpe2I9YltlXTtpZigwPmV8fGU+PWpvLmxlbmd0aCl0aHJvdyBuZXcgdShcImludGVybmFsLWVycm9yXCIsXG5cIkFyZ3VtZW50IHZhbGlkYXRvciByZWNlaXZlZCBhbiB1bnN1cHBvcnRlZCBudW1iZXIgb2YgYXJndW1lbnRzLlwiKTtjPWpvW2VdO2Q9KGQ/XCJcIjpjK1wiIGFyZ3VtZW50IFwiKSsoYi5uYW1lPydcIicrYi5uYW1lKydcIiAnOlwiXCIpK1wibXVzdCBiZSBcIitiLkorXCIuXCI7YnJlYWsgYX1kPW51bGx9fWlmKGQpdGhyb3cgbmV3IHUoXCJhcmd1bWVudC1lcnJvclwiLGErXCIgZmFpbGVkOiBcIitkKTt9dmFyIGpvPVwiRmlyc3QgU2Vjb25kIFRoaXJkIEZvdXJ0aCBGaWZ0aCBTaXh0aCBTZXZlbnRoIEVpZ2h0aCBOaW50aFwiLnNwbGl0KFwiIFwiKTtmdW5jdGlvbiBWKGEsYil7cmV0dXJue25hbWU6YXx8XCJcIixKOlwiYSB2YWxpZCBzdHJpbmdcIixvcHRpb25hbDohIWIsSzpmdW5jdGlvbihjKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGN9fX1cbmZ1bmN0aW9uIGtvKGEsYil7cmV0dXJue25hbWU6YXx8XCJcIixKOlwiYSBib29sZWFuXCIsb3B0aW9uYWw6ISFiLEs6ZnVuY3Rpb24oYyl7cmV0dXJuXCJib29sZWFuXCI9PT10eXBlb2YgY319fWZ1bmN0aW9uIFcoYSxiKXtyZXR1cm57bmFtZTphfHxcIlwiLEo6XCJhIHZhbGlkIG9iamVjdFwiLG9wdGlvbmFsOiEhYixLOnF9fWZ1bmN0aW9uIGxvKGEsYil7cmV0dXJue25hbWU6YXx8XCJcIixKOlwiYSBmdW5jdGlvblwiLG9wdGlvbmFsOiEhYixLOm59fWZ1bmN0aW9uIG1vKGEsYil7cmV0dXJue25hbWU6YXx8XCJcIixKOlwibnVsbFwiLG9wdGlvbmFsOiEhYixLOmZ1bmN0aW9uKGMpe3JldHVybiBudWxsPT09Y319fWZ1bmN0aW9uIG5vKCl7cmV0dXJue25hbWU6XCJcIixKOlwiYW4gSFRNTCBlbGVtZW50XCIsb3B0aW9uYWw6ITEsSzpmdW5jdGlvbihhKXtyZXR1cm4hIShhJiZhIGluc3RhbmNlb2YgRWxlbWVudCl9fX1cbmZ1bmN0aW9uIG9vKCl7cmV0dXJue25hbWU6XCJhdXRoXCIsSjpcImFuIGluc3RhbmNlIG9mIEZpcmViYXNlIEF1dGhcIixvcHRpb25hbDohMCxLOmZ1bmN0aW9uKGEpe3JldHVybiEhKGEmJmEgaW5zdGFuY2VvZiB1bil9fX1mdW5jdGlvbiBwbygpe3JldHVybntuYW1lOlwiYXBwXCIsSjpcImFuIGluc3RhbmNlIG9mIEZpcmViYXNlIEFwcFwiLG9wdGlvbmFsOiEwLEs6ZnVuY3Rpb24oYSl7cmV0dXJuISEoYSYmYSBpbnN0YW5jZW9mIGZpcmViYXNlLmFwcC5BcHApfX19ZnVuY3Rpb24gcW8oYSl7cmV0dXJue25hbWU6YT9hK1wiQ3JlZGVudGlhbFwiOlwiY3JlZGVudGlhbFwiLEo6YT9cImEgdmFsaWQgXCIrYStcIiBjcmVkZW50aWFsXCI6XCJhIHZhbGlkIGNyZWRlbnRpYWxcIixvcHRpb25hbDohMSxLOmZ1bmN0aW9uKGIpe2lmKCFiKXJldHVybiExO3ZhciBjPSFhfHxiLnByb3ZpZGVySWQ9PT1hO3JldHVybiEoIWIuaWF8fCFjKX19fVxuZnVuY3Rpb24gcm8oKXtyZXR1cm57bmFtZTpcIm11bHRpRmFjdG9yQXNzZXJ0aW9uXCIsSjpcImEgdmFsaWQgbXVsdGlGYWN0b3JBc3NlcnRpb25cIixvcHRpb25hbDohMSxLOmZ1bmN0aW9uKGEpe3JldHVybiBhPyEhYS5vYjohMX19fWZ1bmN0aW9uIHNvKCl7cmV0dXJue25hbWU6XCJhdXRoUHJvdmlkZXJcIixKOlwiYSB2YWxpZCBBdXRoIHByb3ZpZGVyXCIsb3B0aW9uYWw6ITEsSzpmdW5jdGlvbihhKXtyZXR1cm4hIShhJiZhLnByb3ZpZGVySWQmJmEuaGFzT3duUHJvcGVydHkmJmEuaGFzT3duUHJvcGVydHkoXCJpc09BdXRoUHJvdmlkZXJcIikpfX19ZnVuY3Rpb24gdG8oYSxiKXtyZXR1cm4gcShhKSYmXCJzdHJpbmdcIj09PXR5cGVvZiBhLnR5cGUmJmEudHlwZT09PWImJm4oYS5GYSl9ZnVuY3Rpb24gdW8oYSl7cmV0dXJuIHEoYSkmJlwic3RyaW5nXCI9PT10eXBlb2YgYS51aWR9XG5mdW5jdGlvbiB2bygpe3JldHVybntuYW1lOlwiYXBwbGljYXRpb25WZXJpZmllclwiLEo6XCJhbiBpbXBsZW1lbnRhdGlvbiBvZiBmaXJlYmFzZS5hdXRoLkFwcGxpY2F0aW9uVmVyaWZpZXJcIixvcHRpb25hbDohMSxLOmZ1bmN0aW9uKGEpe3JldHVybiEoIWF8fFwic3RyaW5nXCIhPT10eXBlb2YgYS50eXBlfHwhbihhLnZlcmlmeSkpfX19ZnVuY3Rpb24gWChhLGIsYyxkKXtyZXR1cm57bmFtZTpjfHxcIlwiLEo6YS5KK1wiIG9yIFwiK2IuSixvcHRpb25hbDohIWQsSzpmdW5jdGlvbihlKXtyZXR1cm4gYS5LKGUpfHxiLksoZSl9fX07ZnVuY3Rpb24gWShhLGIpe2Zvcih2YXIgYyBpbiBiKXt2YXIgZD1iW2NdLm5hbWU7YVtkXT13byhkLGFbY10sYltjXS5qKX19ZnVuY3Rpb24geG8oYSxiKXtmb3IodmFyIGMgaW4gYil7dmFyIGQ9YltjXS5uYW1lO2QhPT1jJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxkLHtnZXQ6c2EoZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXNbZV19LGMpLHNldDpzYShmdW5jdGlvbihlLGYsZyxoKXtpbyhlLFtnXSxbaF0sITApO3RoaXNbZl09aH0sZCxjLGJbY10uZ2IpLGVudW1lcmFibGU6ITB9KX19ZnVuY3Rpb24gWihhLGIsYyxkKXthW2JdPXdvKGIsYyxkKX1cbmZ1bmN0aW9uIHdvKGEsYixjKXtmdW5jdGlvbiBkKCl7dmFyIGc9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtpbyhlLGMsZyk7cmV0dXJuIGIuYXBwbHkodGhpcyxnKX1pZighYylyZXR1cm4gYjt2YXIgZT15byhhKSxmO2ZvcihmIGluIGIpZFtmXT1iW2ZdO2ZvcihmIGluIGIucHJvdG90eXBlKWQucHJvdG90eXBlW2ZdPWIucHJvdG90eXBlW2ZdO3JldHVybiBkfWZ1bmN0aW9uIHlvKGEpe2E9YS5zcGxpdChcIi5cIik7cmV0dXJuIGFbYS5sZW5ndGgtMV19O1kodW4ucHJvdG90eXBlLHtmYjp7bmFtZTpcImFwcGx5QWN0aW9uQ29kZVwiLGo6W1YoXCJjb2RlXCIpXX0sUGE6e25hbWU6XCJjaGVja0FjdGlvbkNvZGVcIixqOltWKFwiY29kZVwiKV19LGpiOntuYW1lOlwiY29uZmlybVBhc3N3b3JkUmVzZXRcIixqOltWKFwiY29kZVwiKSxWKFwibmV3UGFzc3dvcmRcIildfSxjYzp7bmFtZTpcImNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZFwiLGo6W1YoXCJlbWFpbFwiKSxWKFwicGFzc3dvcmRcIildfSxmYzp7bmFtZTpcImZldGNoU2lnbkluTWV0aG9kc0ZvckVtYWlsXCIsajpbVihcImVtYWlsXCIpXX0scGE6e25hbWU6XCJnZXRSZWRpcmVjdFJlc3VsdFwiLGo6W119LHpjOntuYW1lOlwiaXNTaWduSW5XaXRoRW1haWxMaW5rXCIsajpbVihcImVtYWlsTGlua1wiKV19LEZjOntuYW1lOlwib25BdXRoU3RhdGVDaGFuZ2VkXCIsajpbWChXKCksbG8oKSxcIm5leHRPck9ic2VydmVyXCIpLGxvKFwib3B0X2Vycm9yXCIsITApLGxvKFwib3B0X2NvbXBsZXRlZFwiLCEwKV19LEdjOntuYW1lOlwib25JZFRva2VuQ2hhbmdlZFwiLFxuajpbWChXKCksbG8oKSxcIm5leHRPck9ic2VydmVyXCIpLGxvKFwib3B0X2Vycm9yXCIsITApLGxvKFwib3B0X2NvbXBsZXRlZFwiLCEwKV19LHJiOntuYW1lOlwic2VuZFBhc3N3b3JkUmVzZXRFbWFpbFwiLGo6W1YoXCJlbWFpbFwiKSxYKFcoXCJvcHRfYWN0aW9uQ29kZVNldHRpbmdzXCIsITApLG1vKG51bGwsITApLFwib3B0X2FjdGlvbkNvZGVTZXR0aW5nc1wiLCEwKV19LHNiOntuYW1lOlwic2VuZFNpZ25JbkxpbmtUb0VtYWlsXCIsajpbVihcImVtYWlsXCIpLFcoXCJhY3Rpb25Db2RlU2V0dGluZ3NcIildfSx0Yjp7bmFtZTpcInNldFBlcnNpc3RlbmNlXCIsajpbVihcInBlcnNpc3RlbmNlXCIpXX0sUWM6e25hbWU6XCJzaWduSW5BbmRSZXRyaWV2ZURhdGFXaXRoQ3JlZGVudGlhbFwiLGo6W3FvKCldfSx2Yjp7bmFtZTpcInNpZ25JbkFub255bW91c2x5XCIsajpbXX0sWWE6e25hbWU6XCJzaWduSW5XaXRoQ3JlZGVudGlhbFwiLGo6W3FvKCldfSxSYzp7bmFtZTpcInNpZ25JbldpdGhDdXN0b21Ub2tlblwiLGo6W1YoXCJ0b2tlblwiKV19LFxuU2M6e25hbWU6XCJzaWduSW5XaXRoRW1haWxBbmRQYXNzd29yZFwiLGo6W1YoXCJlbWFpbFwiKSxWKFwicGFzc3dvcmRcIildfSxUYzp7bmFtZTpcInNpZ25JbldpdGhFbWFpbExpbmtcIixqOltWKFwiZW1haWxcIiksVihcImVtYWlsTGlua1wiLCEwKV19LFVjOntuYW1lOlwic2lnbkluV2l0aFBob25lTnVtYmVyXCIsajpbVihcInBob25lTnVtYmVyXCIpLHZvKCldfSxWYzp7bmFtZTpcInNpZ25JbldpdGhQb3B1cFwiLGo6W3NvKCldfSxXYzp7bmFtZTpcInNpZ25JbldpdGhSZWRpcmVjdFwiLGo6W3NvKCldfSxiZDp7bmFtZTpcInVwZGF0ZUN1cnJlbnRVc2VyXCIsajpbWChmdW5jdGlvbihhKXtyZXR1cm57bmFtZTpcInVzZXJcIixKOlwiYW4gaW5zdGFuY2Ugb2YgRmlyZWJhc2UgVXNlclwiLG9wdGlvbmFsOiEhYSxLOmZ1bmN0aW9uKGIpe3JldHVybiEhKGImJmIgaW5zdGFuY2VvZiBQKX19fSgpLG1vKCksXCJ1c2VyXCIpXX0sd2I6e25hbWU6XCJzaWduT3V0XCIsajpbXX0sdG9KU09OOntuYW1lOlwidG9KU09OXCIsajpbVihudWxsLCEwKV19LFxuZGQ6e25hbWU6XCJ1c2VEZXZpY2VMYW5ndWFnZVwiLGo6W119LGZkOntuYW1lOlwidmVyaWZ5UGFzc3dvcmRSZXNldENvZGVcIixqOltWKFwiY29kZVwiKV19fSk7eG8odW4ucHJvdG90eXBlLHtsYzp7bmFtZTpcImxhbmd1YWdlQ29kZVwiLGdiOlgoVigpLG1vKCksXCJsYW5ndWFnZUNvZGVcIil9LHRpOntuYW1lOlwidGVuYW50SWRcIixnYjpYKFYoKSxtbygpLFwidGVuYW50SWRcIil9fSk7dW4uUGVyc2lzdGVuY2U9S2s7dW4uUGVyc2lzdGVuY2UuTE9DQUw9XCJsb2NhbFwiO3VuLlBlcnNpc3RlbmNlLlNFU1NJT049XCJzZXNzaW9uXCI7dW4uUGVyc2lzdGVuY2UuTk9ORT1cIm5vbmVcIjtcblkoUC5wcm90b3R5cGUse1wiZGVsZXRlXCI6e25hbWU6XCJkZWxldGVcIixqOltdfSxtYzp7bmFtZTpcImdldElkVG9rZW5SZXN1bHRcIixqOltrbyhcIm9wdF9mb3JjZVJlZnJlc2hcIiwhMCldfSxJOntuYW1lOlwiZ2V0SWRUb2tlblwiLGo6W2tvKFwib3B0X2ZvcmNlUmVmcmVzaFwiLCEwKV19LEFjOntuYW1lOlwibGlua0FuZFJldHJpZXZlRGF0YVdpdGhDcmVkZW50aWFsXCIsajpbcW8oKV19LG1iOntuYW1lOlwibGlua1dpdGhDcmVkZW50aWFsXCIsajpbcW8oKV19LEJjOntuYW1lOlwibGlua1dpdGhQaG9uZU51bWJlclwiLGo6W1YoXCJwaG9uZU51bWJlclwiKSx2bygpXX0sQ2M6e25hbWU6XCJsaW5rV2l0aFBvcHVwXCIsajpbc28oKV19LERjOntuYW1lOlwibGlua1dpdGhSZWRpcmVjdFwiLGo6W3NvKCldfSxKYzp7bmFtZTpcInJlYXV0aGVudGljYXRlQW5kUmV0cmlldmVEYXRhV2l0aENyZWRlbnRpYWxcIixqOltxbygpXX0scGI6e25hbWU6XCJyZWF1dGhlbnRpY2F0ZVdpdGhDcmVkZW50aWFsXCIsajpbcW8oKV19LEtjOntuYW1lOlwicmVhdXRoZW50aWNhdGVXaXRoUGhvbmVOdW1iZXJcIixcbmo6W1YoXCJwaG9uZU51bWJlclwiKSx2bygpXX0sTGM6e25hbWU6XCJyZWF1dGhlbnRpY2F0ZVdpdGhQb3B1cFwiLGo6W3NvKCldfSxNYzp7bmFtZTpcInJlYXV0aGVudGljYXRlV2l0aFJlZGlyZWN0XCIsajpbc28oKV19LHJlbG9hZDp7bmFtZTpcInJlbG9hZFwiLGo6W119LHFiOntuYW1lOlwic2VuZEVtYWlsVmVyaWZpY2F0aW9uXCIsajpbWChXKFwib3B0X2FjdGlvbkNvZGVTZXR0aW5nc1wiLCEwKSxtbyhudWxsLCEwKSxcIm9wdF9hY3Rpb25Db2RlU2V0dGluZ3NcIiwhMCldfSx0b0pTT046e25hbWU6XCJ0b0pTT05cIixqOltWKG51bGwsITApXX0sYWQ6e25hbWU6XCJ1bmxpbmtcIixqOltWKFwicHJvdmlkZXJcIildfSx4Yjp7bmFtZTpcInVwZGF0ZUVtYWlsXCIsajpbVihcImVtYWlsXCIpXX0seWI6e25hbWU6XCJ1cGRhdGVQYXNzd29yZFwiLGo6W1YoXCJwYXNzd29yZFwiKV19LGNkOntuYW1lOlwidXBkYXRlUGhvbmVOdW1iZXJcIixqOltxbyhcInBob25lXCIpXX0semI6e25hbWU6XCJ1cGRhdGVQcm9maWxlXCIsajpbVyhcInByb2ZpbGVcIildfSxcbkFiOntuYW1lOlwidmVyaWZ5QmVmb3JlVXBkYXRlRW1haWxcIixqOltWKFwiZW1haWxcIiksWChXKFwib3B0X2FjdGlvbkNvZGVTZXR0aW5nc1wiLCEwKSxtbyhudWxsLCEwKSxcIm9wdF9hY3Rpb25Db2RlU2V0dGluZ3NcIiwhMCldfX0pO1koTG4ucHJvdG90eXBlLHtleGVjdXRlOntuYW1lOlwiZXhlY3V0ZVwifSxyZW5kZXI6e25hbWU6XCJyZW5kZXJcIn0scmVzZXQ6e25hbWU6XCJyZXNldFwifSxnZXRSZXNwb25zZTp7bmFtZTpcImdldFJlc3BvbnNlXCJ9fSk7WShLbi5wcm90b3R5cGUse2V4ZWN1dGU6e25hbWU6XCJleGVjdXRlXCJ9LHJlbmRlcjp7bmFtZTpcInJlbmRlclwifSxyZXNldDp7bmFtZTpcInJlc2V0XCJ9LGdldFJlc3BvbnNlOntuYW1lOlwiZ2V0UmVzcG9uc2VcIn19KTtZKEQucHJvdG90eXBlLHttYTp7bmFtZTpcImZpbmFsbHlcIn0sbzp7bmFtZTpcImNhdGNoXCJ9LHRoZW46e25hbWU6XCJ0aGVuXCJ9fSk7XG54byhYbC5wcm90b3R5cGUse2FwcFZlcmlmaWNhdGlvbkRpc2FibGVkOntuYW1lOlwiYXBwVmVyaWZpY2F0aW9uRGlzYWJsZWRGb3JUZXN0aW5nXCIsZ2I6a28oXCJhcHBWZXJpZmljYXRpb25EaXNhYmxlZEZvclRlc3RpbmdcIil9fSk7WShZbC5wcm90b3R5cGUse2NvbmZpcm06e25hbWU6XCJjb25maXJtXCIsajpbVihcInZlcmlmaWNhdGlvbkNvZGVcIildfX0pO1ooeWcsXCJmcm9tSlNPTlwiLGZ1bmN0aW9uKGEpe2E9XCJzdHJpbmdcIj09PXR5cGVvZiBhP0pTT04ucGFyc2UoYSk6YTtmb3IodmFyIGIsYz1bSmcsJGcsZ2gsR2ddLGQ9MDtkPGMubGVuZ3RoO2QrKylpZihiPWNbZF0oYSkpcmV0dXJuIGI7cmV0dXJuIG51bGx9LFtYKFYoKSxXKCksXCJqc29uXCIpXSk7WihWZyxcImNyZWRlbnRpYWxcIixmdW5jdGlvbihhLGIpe3JldHVybiBuZXcgVWcoYSxiKX0sW1YoXCJlbWFpbFwiKSxWKFwicGFzc3dvcmRcIildKTtZKFVnLnByb3RvdHlwZSx7djp7bmFtZTpcInRvSlNPTlwiLGo6W1YobnVsbCwhMCldfX0pO1xuWShNZy5wcm90b3R5cGUse0FhOntuYW1lOlwiYWRkU2NvcGVcIixqOltWKFwic2NvcGVcIildfSxJYTp7bmFtZTpcInNldEN1c3RvbVBhcmFtZXRlcnNcIixqOltXKFwiY3VzdG9tT0F1dGhQYXJhbWV0ZXJzXCIpXX19KTtaKE1nLFwiY3JlZGVudGlhbFwiLE5nLFtYKFYoKSxXKCksXCJ0b2tlblwiKV0pO1ooVmcsXCJjcmVkZW50aWFsV2l0aExpbmtcIixhaCxbVihcImVtYWlsXCIpLFYoXCJlbWFpbExpbmtcIildKTtZKE9nLnByb3RvdHlwZSx7QWE6e25hbWU6XCJhZGRTY29wZVwiLGo6W1YoXCJzY29wZVwiKV19LElhOntuYW1lOlwic2V0Q3VzdG9tUGFyYW1ldGVyc1wiLGo6W1coXCJjdXN0b21PQXV0aFBhcmFtZXRlcnNcIildfX0pO1ooT2csXCJjcmVkZW50aWFsXCIsUGcsW1goVigpLFcoKSxcInRva2VuXCIpXSk7WShRZy5wcm90b3R5cGUse0FhOntuYW1lOlwiYWRkU2NvcGVcIixqOltWKFwic2NvcGVcIildfSxJYTp7bmFtZTpcInNldEN1c3RvbVBhcmFtZXRlcnNcIixqOltXKFwiY3VzdG9tT0F1dGhQYXJhbWV0ZXJzXCIpXX19KTtcblooUWcsXCJjcmVkZW50aWFsXCIsUmcsW1goVigpLFgoVygpLG1vKCkpLFwiaWRUb2tlblwiKSxYKFYoKSxtbygpLFwiYWNjZXNzVG9rZW5cIiwhMCldKTtZKFNnLnByb3RvdHlwZSx7SWE6e25hbWU6XCJzZXRDdXN0b21QYXJhbWV0ZXJzXCIsajpbVyhcImN1c3RvbU9BdXRoUGFyYW1ldGVyc1wiKV19fSk7WihTZyxcImNyZWRlbnRpYWxcIixUZyxbWChWKCksVygpLFwidG9rZW5cIiksVihcInNlY3JldFwiLCEwKV0pO1koTS5wcm90b3R5cGUse0FhOntuYW1lOlwiYWRkU2NvcGVcIixqOltWKFwic2NvcGVcIildfSxjcmVkZW50aWFsOntuYW1lOlwiY3JlZGVudGlhbFwiLGo6W1goVigpLFgoVygpLG1vKCkpLFwib3B0aW9uc09ySWRUb2tlblwiKSxYKFYoKSxtbygpLFwiYWNjZXNzVG9rZW5cIiwhMCldfSxJYTp7bmFtZTpcInNldEN1c3RvbVBhcmFtZXRlcnNcIixqOltXKFwiY3VzdG9tT0F1dGhQYXJhbWV0ZXJzXCIpXX19KTtZKEhnLnByb3RvdHlwZSx7djp7bmFtZTpcInRvSlNPTlwiLGo6W1YobnVsbCwhMCldfX0pO1xuWShCZy5wcm90b3R5cGUse3Y6e25hbWU6XCJ0b0pTT05cIixqOltWKG51bGwsITApXX19KTtaKGhoLFwiY3JlZGVudGlhbFwiLGxoLFtWKFwidmVyaWZpY2F0aW9uSWRcIiksVihcInZlcmlmaWNhdGlvbkNvZGVcIildKTtcblkoaGgucHJvdG90eXBlLHtjYjp7bmFtZTpcInZlcmlmeVBob25lTnVtYmVyXCIsajpbWChWKCksZnVuY3Rpb24oYSxiKXtyZXR1cm57bmFtZTphfHxcInBob25lSW5mb09wdGlvbnNcIixKOlwidmFsaWQgcGhvbmUgaW5mbyBvcHRpb25zXCIsb3B0aW9uYWw6ISFiLEs6ZnVuY3Rpb24oYyl7cmV0dXJuIGM/Yy5zZXNzaW9uJiZjLnBob25lTnVtYmVyP3RvKGMuc2Vzc2lvbix3ZykmJlwic3RyaW5nXCI9PT10eXBlb2YgYy5waG9uZU51bWJlcjpjLnNlc3Npb24mJmMubXVsdGlGYWN0b3JIaW50P3RvKGMuc2Vzc2lvbix4ZykmJnVvKGMubXVsdGlGYWN0b3JIaW50KTpjLnNlc3Npb24mJmMubXVsdGlGYWN0b3JVaWQ/dG8oYy5zZXNzaW9uLHhnKSYmXCJzdHJpbmdcIj09PXR5cGVvZiBjLm11bHRpRmFjdG9yVWlkOmMucGhvbmVOdW1iZXI/XCJzdHJpbmdcIj09PXR5cGVvZiBjLnBob25lTnVtYmVyOiExOiExfX19KCksXCJwaG9uZUluZm9PcHRpb25zXCIpLHZvKCldfX0pO1xuWShjaC5wcm90b3R5cGUse3Y6e25hbWU6XCJ0b0pTT05cIixqOltWKG51bGwsITApXX19KTtZKHUucHJvdG90eXBlLHt0b0pTT046e25hbWU6XCJ0b0pTT05cIixqOltWKG51bGwsITApXX19KTtZKHVoLnByb3RvdHlwZSx7dG9KU09OOntuYW1lOlwidG9KU09OXCIsajpbVihudWxsLCEwKV19fSk7WSh0aC5wcm90b3R5cGUse3RvSlNPTjp7bmFtZTpcInRvSlNPTlwiLGo6W1YobnVsbCwhMCldfX0pO1koZG0ucHJvdG90eXBlLHt0b0pTT046e25hbWU6XCJ0b0pTT05cIixqOltWKG51bGwsITApXX19KTtZKGFtLnByb3RvdHlwZSx7UGM6e25hbWU6XCJyZXNvbHZlU2lnbkluXCIsajpbcm8oKV19fSk7XG5ZKGxtLnByb3RvdHlwZSx7T2I6e25hbWU6XCJnZXRTZXNzaW9uXCIsajpbXX0sZGM6e25hbWU6XCJlbnJvbGxcIixqOltybygpLFYoXCJkaXNwbGF5TmFtZVwiLCEwKV19LCRjOntuYW1lOlwidW5lbnJvbGxcIixqOltYKHtuYW1lOlwibXVsdGlGYWN0b3JJbmZvXCIsSjpcImEgdmFsaWQgbXVsdGlGYWN0b3JJbmZvXCIsb3B0aW9uYWw6ITEsSzp1b30sVigpLFwibXVsdGlGYWN0b3JJbmZvSWRlbnRpZmllclwiKV19fSk7WShoby5wcm90b3R5cGUse2NsZWFyOntuYW1lOlwiY2xlYXJcIixqOltdfSxyZW5kZXI6e25hbWU6XCJyZW5kZXJcIixqOltdfSx2ZXJpZnk6e25hbWU6XCJ2ZXJpZnlcIixqOltdfX0pO1ooR2YsXCJwYXJzZUxpbmtcIixPZixbVihcImxpbmtcIildKTtaKFJuLFwiYXNzZXJ0aW9uXCIsZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBqbShhKX0sW3FvKFwicGhvbmVcIildKTtcbihmdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZmlyZWJhc2UmJmZpcmViYXNlLklOVEVSTkFMJiZmaXJlYmFzZS5JTlRFUk5BTC5yZWdpc3RlckNvbXBvbmVudCl7dmFyIGE9e0FjdGlvbkNvZGVJbmZvOntPcGVyYXRpb246e0VNQUlMX1NJR05JTjp4ZixQQVNTV09SRF9SRVNFVDpcIlBBU1NXT1JEX1JFU0VUXCIsUkVDT1ZFUl9FTUFJTDpcIlJFQ09WRVJfRU1BSUxcIixSRVZFUlRfU0VDT05EX0ZBQ1RPUl9BRERJVElPTjp6ZixWRVJJRllfQU5EX0NIQU5HRV9FTUFJTDp5ZixWRVJJRllfRU1BSUw6XCJWRVJJRllfRU1BSUxcIn19LEF1dGg6dW4sQXV0aENyZWRlbnRpYWw6eWcsRXJyb3I6dX07WihhLFwiRW1haWxBdXRoUHJvdmlkZXJcIixWZyxbXSk7WihhLFwiRmFjZWJvb2tBdXRoUHJvdmlkZXJcIixNZyxbXSk7WihhLFwiR2l0aHViQXV0aFByb3ZpZGVyXCIsT2csW10pO1ooYSxcIkdvb2dsZUF1dGhQcm92aWRlclwiLFFnLFtdKTtaKGEsXCJUd2l0dGVyQXV0aFByb3ZpZGVyXCIsU2csW10pO1xuWihhLFwiT0F1dGhQcm92aWRlclwiLE0sW1YoXCJwcm92aWRlcklkXCIpXSk7WihhLFwiU0FNTEF1dGhQcm92aWRlclwiLExnLFtWKFwicHJvdmlkZXJJZFwiKV0pO1ooYSxcIlBob25lQXV0aFByb3ZpZGVyXCIsaGgsW29vKCldKTtaKGEsXCJSZWNhcHRjaGFWZXJpZmllclwiLGhvLFtYKFYoKSxubygpLFwicmVjYXB0Y2hhQ29udGFpbmVyXCIpLFcoXCJyZWNhcHRjaGFQYXJhbWV0ZXJzXCIsITApLHBvKCldKTtaKGEsXCJBY3Rpb25Db2RlVVJMXCIsR2YsW10pO1ooYSxcIlBob25lTXVsdGlGYWN0b3JHZW5lcmF0b3JcIixSbixbXSk7ZmlyZWJhc2UuSU5URVJOQUwucmVnaXN0ZXJDb21wb25lbnQoe25hbWU6XCJhdXRoXCIsaW5zdGFuY2VGYWN0b3J5OmZ1bmN0aW9uKGIpe2I9Yi5nZXRQcm92aWRlcihcImFwcFwiKS5nZXRJbW1lZGlhdGUoKTtyZXR1cm4gbmV3IHVuKGIpfSxtdWx0aXBsZUluc3RhbmNlczohMSxzZXJ2aWNlUHJvcHM6YSxpbnN0YW50aWF0aW9uTW9kZTpcIkxBWllcIix0eXBlOlwiUFVCTElDXCJ9KTtmaXJlYmFzZS5JTlRFUk5BTC5yZWdpc3RlckNvbXBvbmVudCh7bmFtZTpcImF1dGgtaW50ZXJuYWxcIixcbmluc3RhbmNlRmFjdG9yeTpmdW5jdGlvbihiKXtiPWIuZ2V0UHJvdmlkZXIoXCJhdXRoXCIpLmdldEltbWVkaWF0ZSgpO3JldHVybntnZXRVaWQ6cihiLmdldFVpZCxiKSxnZXRUb2tlbjpyKGIua2MsYiksYWRkQXV0aFRva2VuTGlzdGVuZXI6cihiLmJjLGIpLHJlbW92ZUF1dGhUb2tlbkxpc3RlbmVyOnIoYi5OYyxiKX19LG11bHRpcGxlSW5zdGFuY2VzOiExLGluc3RhbnRpYXRpb25Nb2RlOlwiTEFaWVwiLHR5cGU6XCJQUklWQVRFXCJ9KTtmaXJlYmFzZS5yZWdpc3RlclZlcnNpb24oXCJAZmlyZWJhc2UvYXV0aFwiLFwiMC4xNC42XCIpO2ZpcmViYXNlLklOVEVSTkFMLmV4dGVuZE5hbWVzcGFjZSh7VXNlcjpQfSl9ZWxzZSB0aHJvdyBFcnJvcihcIkNhbm5vdCBmaW5kIHRoZSBmaXJlYmFzZSBuYW1lc3BhY2U7IGJlIHN1cmUgdG8gaW5jbHVkZSBmaXJlYmFzZS1hcHAuanMgYmVmb3JlIHRoaXMgbGlicmFyeS5cIik7fSkoKTt9KS5hcHBseSh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHt9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0aC5lc20uanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6ICEwXG59KTtcblxudmFyIHQsIGUgPSByZXF1aXJlKFwidHNsaWJcIiksIG4gPSAodCA9IHJlcXVpcmUoXCJAZmlyZWJhc2UvYXBwXCIpKSAmJiBcIm9iamVjdFwiID09IHR5cGVvZiB0ICYmIFwiZGVmYXVsdFwiIGluIHQgPyB0LmRlZmF1bHQgOiB0LCByID0gcmVxdWlyZShcIkBmaXJlYmFzZS9sb2dnZXJcIiksIGkgPSByZXF1aXJlKFwiQGZpcmViYXNlL3V0aWxcIiksIG8gPSByZXF1aXJlKFwiQGZpcmViYXNlL2NvbXBvbmVudFwiKSwgcyA9IHJlcXVpcmUoXCJAZmlyZWJhc2Uvd2ViY2hhbm5lbC13cmFwcGVyXCIpLCB1ID0gbi5TREtfVkVSU0lPTiwgYSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0KSB7XG4gICAgICAgIHRoaXMudWlkID0gdDtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT0gdGhpcy51aWQ7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGtleSByZXByZXNlbnRpbmcgdGhpcyB1c2VyLCBzdWl0YWJsZSBmb3IgaW5jbHVzaW9uIGluIGFcbiAgICAgKiBkaWN0aW9uYXJ5LlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLnMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudCgpID8gXCJ1aWQ6XCIgKyB0aGlzLnVpZCA6IFwiYW5vbnltb3VzLXVzZXJcIjtcbiAgICB9LCB0LnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdC51aWQgPT09IHRoaXMudWlkO1xuICAgIH0sIHQ7XG59KCk7XG5cbi8qKiBBIHVzZXIgd2l0aCBhIG51bGwgVUlELiAqLyBhLlVOQVVUSEVOVElDQVRFRCA9IG5ldyBhKG51bGwpLCBcbi8vIFRPRE8obWlrZWxlaGVuKTogTG9vayBpbnRvIGdldHRpbmcgYSBwcm9wZXIgdWlkLWVxdWl2YWxlbnQgZm9yXG4vLyBub24tRmlyZWJhc2VBdXRoIHByb3ZpZGVycy5cbmEuaSA9IG5ldyBhKFwiZ29vZ2xlLWNyZWRlbnRpYWxzLXVpZFwiKSwgYS5oID0gbmV3IGEoXCJmaXJzdC1wYXJ0eS11aWRcIik7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgaCA9IHtcbiAgICAvLyBDYXVzZXMgYXJlIGNvcGllZCBmcm9tOlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ncnBjL2dycGMvYmxvYi9iY2VlYzk0ZWE0ZmM1ZjAwODVkODEyMzVkOGUxYzA2Nzk4ZGMzNDFhL2luY2x1ZGUvZ3JwYyUyQiUyQi9pbXBsL2NvZGVnZW4vc3RhdHVzX2NvZGVfZW51bS5oXG4gICAgLyoqIE5vdCBhbiBlcnJvcjsgcmV0dXJuZWQgb24gc3VjY2Vzcy4gKi9cbiAgICBPSzogXCJva1wiLFxuICAgIC8qKiBUaGUgb3BlcmF0aW9uIHdhcyBjYW5jZWxsZWQgKHR5cGljYWxseSBieSB0aGUgY2FsbGVyKS4gKi9cbiAgICBDQU5DRUxMRUQ6IFwiY2FuY2VsbGVkXCIsXG4gICAgLyoqIFVua25vd24gZXJyb3Igb3IgYW4gZXJyb3IgZnJvbSBhIGRpZmZlcmVudCBlcnJvciBkb21haW4uICovXG4gICAgVU5LTk9XTjogXCJ1bmtub3duXCIsXG4gICAgLyoqXG4gICAgICogQ2xpZW50IHNwZWNpZmllZCBhbiBpbnZhbGlkIGFyZ3VtZW50LiBOb3RlIHRoYXQgdGhpcyBkaWZmZXJzIGZyb21cbiAgICAgKiBGQUlMRURfUFJFQ09ORElUSU9OLiBJTlZBTElEX0FSR1VNRU5UIGluZGljYXRlcyBhcmd1bWVudHMgdGhhdCBhcmVcbiAgICAgKiBwcm9ibGVtYXRpYyByZWdhcmRsZXNzIG9mIHRoZSBzdGF0ZSBvZiB0aGUgc3lzdGVtIChlLmcuLCBhIG1hbGZvcm1lZCBmaWxlXG4gICAgICogbmFtZSkuXG4gICAgICovXG4gICAgSU5WQUxJRF9BUkdVTUVOVDogXCJpbnZhbGlkLWFyZ3VtZW50XCIsXG4gICAgLyoqXG4gICAgICogRGVhZGxpbmUgZXhwaXJlZCBiZWZvcmUgb3BlcmF0aW9uIGNvdWxkIGNvbXBsZXRlLiBGb3Igb3BlcmF0aW9ucyB0aGF0XG4gICAgICogY2hhbmdlIHRoZSBzdGF0ZSBvZiB0aGUgc3lzdGVtLCB0aGlzIGVycm9yIG1heSBiZSByZXR1cm5lZCBldmVuIGlmIHRoZVxuICAgICAqIG9wZXJhdGlvbiBoYXMgY29tcGxldGVkIHN1Y2Nlc3NmdWxseS4gRm9yIGV4YW1wbGUsIGEgc3VjY2Vzc2Z1bCByZXNwb25zZVxuICAgICAqIGZyb20gYSBzZXJ2ZXIgY291bGQgaGF2ZSBiZWVuIGRlbGF5ZWQgbG9uZyBlbm91Z2ggZm9yIHRoZSBkZWFkbGluZSB0b1xuICAgICAqIGV4cGlyZS5cbiAgICAgKi9cbiAgICBERUFETElORV9FWENFRURFRDogXCJkZWFkbGluZS1leGNlZWRlZFwiLFxuICAgIC8qKiBTb21lIHJlcXVlc3RlZCBlbnRpdHkgKGUuZy4sIGZpbGUgb3IgZGlyZWN0b3J5KSB3YXMgbm90IGZvdW5kLiAqL1xuICAgIE5PVF9GT1VORDogXCJub3QtZm91bmRcIixcbiAgICAvKipcbiAgICAgKiBTb21lIGVudGl0eSB0aGF0IHdlIGF0dGVtcHRlZCB0byBjcmVhdGUgKGUuZy4sIGZpbGUgb3IgZGlyZWN0b3J5KSBhbHJlYWR5XG4gICAgICogZXhpc3RzLlxuICAgICAqL1xuICAgIEFMUkVBRFlfRVhJU1RTOiBcImFscmVhZHktZXhpc3RzXCIsXG4gICAgLyoqXG4gICAgICogVGhlIGNhbGxlciBkb2VzIG5vdCBoYXZlIHBlcm1pc3Npb24gdG8gZXhlY3V0ZSB0aGUgc3BlY2lmaWVkIG9wZXJhdGlvbi5cbiAgICAgKiBQRVJNSVNTSU9OX0RFTklFRCBtdXN0IG5vdCBiZSB1c2VkIGZvciByZWplY3Rpb25zIGNhdXNlZCBieSBleGhhdXN0aW5nXG4gICAgICogc29tZSByZXNvdXJjZSAodXNlIFJFU09VUkNFX0VYSEFVU1RFRCBpbnN0ZWFkIGZvciB0aG9zZSBlcnJvcnMpLlxuICAgICAqIFBFUk1JU1NJT05fREVOSUVEIG11c3Qgbm90IGJlIHVzZWQgaWYgdGhlIGNhbGxlciBjYW4gbm90IGJlIGlkZW50aWZpZWRcbiAgICAgKiAodXNlIFVOQVVUSEVOVElDQVRFRCBpbnN0ZWFkIGZvciB0aG9zZSBlcnJvcnMpLlxuICAgICAqL1xuICAgIFBFUk1JU1NJT05fREVOSUVEOiBcInBlcm1pc3Npb24tZGVuaWVkXCIsXG4gICAgLyoqXG4gICAgICogVGhlIHJlcXVlc3QgZG9lcyBub3QgaGF2ZSB2YWxpZCBhdXRoZW50aWNhdGlvbiBjcmVkZW50aWFscyBmb3IgdGhlXG4gICAgICogb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIFVOQVVUSEVOVElDQVRFRDogXCJ1bmF1dGhlbnRpY2F0ZWRcIixcbiAgICAvKipcbiAgICAgKiBTb21lIHJlc291cmNlIGhhcyBiZWVuIGV4aGF1c3RlZCwgcGVyaGFwcyBhIHBlci11c2VyIHF1b3RhLCBvciBwZXJoYXBzIHRoZVxuICAgICAqIGVudGlyZSBmaWxlIHN5c3RlbSBpcyBvdXQgb2Ygc3BhY2UuXG4gICAgICovXG4gICAgUkVTT1VSQ0VfRVhIQVVTVEVEOiBcInJlc291cmNlLWV4aGF1c3RlZFwiLFxuICAgIC8qKlxuICAgICAqIE9wZXJhdGlvbiB3YXMgcmVqZWN0ZWQgYmVjYXVzZSB0aGUgc3lzdGVtIGlzIG5vdCBpbiBhIHN0YXRlIHJlcXVpcmVkIGZvclxuICAgICAqIHRoZSBvcGVyYXRpb24ncyBleGVjdXRpb24uIEZvciBleGFtcGxlLCBkaXJlY3RvcnkgdG8gYmUgZGVsZXRlZCBtYXkgYmVcbiAgICAgKiBub24tZW1wdHksIGFuIHJtZGlyIG9wZXJhdGlvbiBpcyBhcHBsaWVkIHRvIGEgbm9uLWRpcmVjdG9yeSwgZXRjLlxuICAgICAqXG4gICAgICogQSBsaXRtdXMgdGVzdCB0aGF0IG1heSBoZWxwIGEgc2VydmljZSBpbXBsZW1lbnRvciBpbiBkZWNpZGluZ1xuICAgICAqIGJldHdlZW4gRkFJTEVEX1BSRUNPTkRJVElPTiwgQUJPUlRFRCwgYW5kIFVOQVZBSUxBQkxFOlxuICAgICAqICAoYSkgVXNlIFVOQVZBSUxBQkxFIGlmIHRoZSBjbGllbnQgY2FuIHJldHJ5IGp1c3QgdGhlIGZhaWxpbmcgY2FsbC5cbiAgICAgKiAgKGIpIFVzZSBBQk9SVEVEIGlmIHRoZSBjbGllbnQgc2hvdWxkIHJldHJ5IGF0IGEgaGlnaGVyLWxldmVsXG4gICAgICogICAgICAoZS5nLiwgcmVzdGFydGluZyBhIHJlYWQtbW9kaWZ5LXdyaXRlIHNlcXVlbmNlKS5cbiAgICAgKiAgKGMpIFVzZSBGQUlMRURfUFJFQ09ORElUSU9OIGlmIHRoZSBjbGllbnQgc2hvdWxkIG5vdCByZXRyeSB1bnRpbFxuICAgICAqICAgICAgdGhlIHN5c3RlbSBzdGF0ZSBoYXMgYmVlbiBleHBsaWNpdGx5IGZpeGVkLiBFLmcuLCBpZiBhbiBcInJtZGlyXCJcbiAgICAgKiAgICAgIGZhaWxzIGJlY2F1c2UgdGhlIGRpcmVjdG9yeSBpcyBub24tZW1wdHksIEZBSUxFRF9QUkVDT05ESVRJT05cbiAgICAgKiAgICAgIHNob3VsZCBiZSByZXR1cm5lZCBzaW5jZSB0aGUgY2xpZW50IHNob3VsZCBub3QgcmV0cnkgdW5sZXNzXG4gICAgICogICAgICB0aGV5IGhhdmUgZmlyc3QgZml4ZWQgdXAgdGhlIGRpcmVjdG9yeSBieSBkZWxldGluZyBmaWxlcyBmcm9tIGl0LlxuICAgICAqICAoZCkgVXNlIEZBSUxFRF9QUkVDT05ESVRJT04gaWYgdGhlIGNsaWVudCBwZXJmb3JtcyBjb25kaXRpb25hbFxuICAgICAqICAgICAgUkVTVCBHZXQvVXBkYXRlL0RlbGV0ZSBvbiBhIHJlc291cmNlIGFuZCB0aGUgcmVzb3VyY2Ugb24gdGhlXG4gICAgICogICAgICBzZXJ2ZXIgZG9lcyBub3QgbWF0Y2ggdGhlIGNvbmRpdGlvbi4gRS5nLiwgY29uZmxpY3RpbmdcbiAgICAgKiAgICAgIHJlYWQtbW9kaWZ5LXdyaXRlIG9uIHRoZSBzYW1lIHJlc291cmNlLlxuICAgICAqL1xuICAgIEZBSUxFRF9QUkVDT05ESVRJT046IFwiZmFpbGVkLXByZWNvbmRpdGlvblwiLFxuICAgIC8qKlxuICAgICAqIFRoZSBvcGVyYXRpb24gd2FzIGFib3J0ZWQsIHR5cGljYWxseSBkdWUgdG8gYSBjb25jdXJyZW5jeSBpc3N1ZSBsaWtlXG4gICAgICogc2VxdWVuY2VyIGNoZWNrIGZhaWx1cmVzLCB0cmFuc2FjdGlvbiBhYm9ydHMsIGV0Yy5cbiAgICAgKlxuICAgICAqIFNlZSBsaXRtdXMgdGVzdCBhYm92ZSBmb3IgZGVjaWRpbmcgYmV0d2VlbiBGQUlMRURfUFJFQ09ORElUSU9OLCBBQk9SVEVELFxuICAgICAqIGFuZCBVTkFWQUlMQUJMRS5cbiAgICAgKi9cbiAgICBBQk9SVEVEOiBcImFib3J0ZWRcIixcbiAgICAvKipcbiAgICAgKiBPcGVyYXRpb24gd2FzIGF0dGVtcHRlZCBwYXN0IHRoZSB2YWxpZCByYW5nZS4gRS5nLiwgc2Vla2luZyBvciByZWFkaW5nXG4gICAgICogcGFzdCBlbmQgb2YgZmlsZS5cbiAgICAgKlxuICAgICAqIFVubGlrZSBJTlZBTElEX0FSR1VNRU5ULCB0aGlzIGVycm9yIGluZGljYXRlcyBhIHByb2JsZW0gdGhhdCBtYXkgYmUgZml4ZWRcbiAgICAgKiBpZiB0aGUgc3lzdGVtIHN0YXRlIGNoYW5nZXMuIEZvciBleGFtcGxlLCBhIDMyLWJpdCBmaWxlIHN5c3RlbSB3aWxsXG4gICAgICogZ2VuZXJhdGUgSU5WQUxJRF9BUkdVTUVOVCBpZiBhc2tlZCB0byByZWFkIGF0IGFuIG9mZnNldCB0aGF0IGlzIG5vdCBpbiB0aGVcbiAgICAgKiByYW5nZSBbMCwyXjMyLTFdLCBidXQgaXQgd2lsbCBnZW5lcmF0ZSBPVVRfT0ZfUkFOR0UgaWYgYXNrZWQgdG8gcmVhZCBmcm9tXG4gICAgICogYW4gb2Zmc2V0IHBhc3QgdGhlIGN1cnJlbnQgZmlsZSBzaXplLlxuICAgICAqXG4gICAgICogVGhlcmUgaXMgYSBmYWlyIGJpdCBvZiBvdmVybGFwIGJldHdlZW4gRkFJTEVEX1BSRUNPTkRJVElPTiBhbmRcbiAgICAgKiBPVVRfT0ZfUkFOR0UuIFdlIHJlY29tbWVuZCB1c2luZyBPVVRfT0ZfUkFOR0UgKHRoZSBtb3JlIHNwZWNpZmljIGVycm9yKVxuICAgICAqIHdoZW4gaXQgYXBwbGllcyBzbyB0aGF0IGNhbGxlcnMgd2hvIGFyZSBpdGVyYXRpbmcgdGhyb3VnaCBhIHNwYWNlIGNhblxuICAgICAqIGVhc2lseSBsb29rIGZvciBhbiBPVVRfT0ZfUkFOR0UgZXJyb3IgdG8gZGV0ZWN0IHdoZW4gdGhleSBhcmUgZG9uZS5cbiAgICAgKi9cbiAgICBPVVRfT0ZfUkFOR0U6IFwib3V0LW9mLXJhbmdlXCIsXG4gICAgLyoqIE9wZXJhdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgb3Igbm90IHN1cHBvcnRlZC9lbmFibGVkIGluIHRoaXMgc2VydmljZS4gKi9cbiAgICBVTklNUExFTUVOVEVEOiBcInVuaW1wbGVtZW50ZWRcIixcbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBlcnJvcnMuIE1lYW5zIHNvbWUgaW52YXJpYW50cyBleHBlY3RlZCBieSB1bmRlcmx5aW5nIFN5c3RlbSBoYXNcbiAgICAgKiBiZWVuIGJyb2tlbi4gSWYgeW91IHNlZSBvbmUgb2YgdGhlc2UgZXJyb3JzLCBTb21ldGhpbmcgaXMgdmVyeSBicm9rZW4uXG4gICAgICovXG4gICAgSU5URVJOQUw6IFwiaW50ZXJuYWxcIixcbiAgICAvKipcbiAgICAgKiBUaGUgc2VydmljZSBpcyBjdXJyZW50bHkgdW5hdmFpbGFibGUuIFRoaXMgaXMgYSBtb3N0IGxpa2VseSBhIHRyYW5zaWVudFxuICAgICAqIGNvbmRpdGlvbiBhbmQgbWF5IGJlIGNvcnJlY3RlZCBieSByZXRyeWluZyB3aXRoIGEgYmFja29mZi5cbiAgICAgKlxuICAgICAqIFNlZSBsaXRtdXMgdGVzdCBhYm92ZSBmb3IgZGVjaWRpbmcgYmV0d2VlbiBGQUlMRURfUFJFQ09ORElUSU9OLCBBQk9SVEVELFxuICAgICAqIGFuZCBVTkFWQUlMQUJMRS5cbiAgICAgKi9cbiAgICBVTkFWQUlMQUJMRTogXCJ1bmF2YWlsYWJsZVwiLFxuICAgIC8qKiBVbnJlY292ZXJhYmxlIGRhdGEgbG9zcyBvciBjb3JydXB0aW9uLiAqL1xuICAgIERBVEFfTE9TUzogXCJkYXRhLWxvc3NcIlxufSwgYyA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24odCkge1xuICAgIGZ1bmN0aW9uIG4oZSwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXM7XG4gICAgICAgIHJldHVybiAociA9IHQuY2FsbCh0aGlzLCBuKSB8fCB0aGlzKS5jb2RlID0gZSwgci5tZXNzYWdlID0gbiwgci5uYW1lID0gXCJGaXJlYmFzZUVycm9yXCIsIFxuICAgICAgICAvLyBIQUNLOiBXZSB3cml0ZSBhIHRvU3RyaW5nIHByb3BlcnR5IGRpcmVjdGx5IGJlY2F1c2UgRXJyb3IgaXMgbm90IGEgcmVhbFxuICAgICAgICAvLyBjbGFzcyBhbmQgc28gaW5oZXJpdGFuY2UgZG9lcyBub3Qgd29yayBjb3JyZWN0bHkuIFdlIGNvdWxkIGFsdGVybmF0aXZlbHlcbiAgICAgICAgLy8gZG8gdGhlIHNhbWUgXCJiYWNrLWRvb3IgaW5oZXJpdGFuY2VcIiB0cmljayB0aGF0IEZpcmViYXNlRXJyb3IgZG9lcy5cbiAgICAgICAgci50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHIubmFtZSArIFwiOiBbY29kZT1cIiArIHIuY29kZSArIFwiXTogXCIgKyByLm1lc3NhZ2U7XG4gICAgICAgIH0sIHI7XG4gICAgfVxuICAgIHJldHVybiBlLl9fZXh0ZW5kcyhuLCB0KSwgbjtcbn0oRXJyb3IpLCBmID0gZnVuY3Rpb24odCwgZSkge1xuICAgIHRoaXMudXNlciA9IGUsIHRoaXMudHlwZSA9IFwiT0F1dGhcIiwgdGhpcy5vID0ge30sIFxuICAgIC8vIFNldCB0aGUgaGVhZGVycyB1c2luZyBPYmplY3QgTGl0ZXJhbCBub3RhdGlvbiB0byBhdm9pZCBtaW5pZmljYXRpb25cbiAgICB0aGlzLm8uQXV0aG9yaXphdGlvbiA9IFwiQmVhcmVyIFwiICsgdDtcbn0sIGwgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdG9yZXMgdGhlIGxpc3RlbmVyIHJlZ2lzdGVyZWQgd2l0aCBzZXRDaGFuZ2VMaXN0ZW5lcigpXG4gICAgICAgICAqIFRoaXMgaXNuJ3QgYWN0dWFsbHkgbmVjZXNzYXJ5IHNpbmNlIHRoZSBVSUQgbmV2ZXIgY2hhbmdlcywgYnV0IHdlIHVzZSB0aGlzXG4gICAgICAgICAqIHRvIHZlcmlmeSB0aGUgbGlzdGVuIGNvbnRyYWN0IGlzIGFkaGVyZWQgdG8gaW4gdGVzdHMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnUgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuZ2V0VG9rZW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICB9LCB0LnByb3RvdHlwZS5fID0gZnVuY3Rpb24oKSB7fSwgdC5wcm90b3R5cGUubCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy51ID0gdCwgXG4gICAgICAgIC8vIEZpcmUgd2l0aCBpbml0aWFsIHVzZXIuXG4gICAgICAgIHQoYS5VTkFVVEhFTlRJQ0FURUQpO1xuICAgIH0sIHQucHJvdG90eXBlLlQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy51ID0gbnVsbDtcbiAgICB9LCB0O1xufSgpLCBwID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGF1dGggdG9rZW4gbGlzdGVuZXIgcmVnaXN0ZXJlZCB3aXRoIEZpcmViYXNlQXBwLCByZXRhaW5lZCBoZXJlIHNvIHdlXG4gICAgICAgICAqIGNhbiB1bnJlZ2lzdGVyIGl0LlxuICAgICAgICAgKi8gICAgICAgIHRoaXMuSSA9IG51bGwsIFxuICAgICAgICAvKiogVHJhY2tzIHRoZSBjdXJyZW50IFVzZXIuICovXG4gICAgICAgIHRoaXMuY3VycmVudFVzZXIgPSBhLlVOQVVUSEVOVElDQVRFRCwgdGhpcy5SID0gITEsIFxuICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENvdW50ZXIgdXNlZCB0byBkZXRlY3QgaWYgdGhlIHRva2VuIGNoYW5nZWQgd2hpbGUgYSBnZXRUb2tlbiByZXF1ZXN0IHdhc1xuICAgICAgICAgICAgICogb3V0c3RhbmRpbmcuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5BID0gMCwgXG4gICAgICAgIC8qKiBUaGUgbGlzdGVuZXIgcmVnaXN0ZXJlZCB3aXRoIHNldENoYW5nZUxpc3RlbmVyKCkuICovXG4gICAgICAgIHRoaXMudSA9IG51bGwsIHRoaXMuZm9yY2VSZWZyZXNoID0gITEsIHRoaXMuSSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZS5BKyssIGUuY3VycmVudFVzZXIgPSBlLm0oKSwgZS5SID0gITAsIGUudSAmJiBlLnUoZS5jdXJyZW50VXNlcik7XG4gICAgICAgIH0sIHRoaXMuQSA9IDAsIHRoaXMuYXV0aCA9IHQuZ2V0SW1tZWRpYXRlKHtcbiAgICAgICAgICAgIG9wdGlvbmFsOiAhMFxuICAgICAgICB9KSwgdGhpcy5hdXRoID8gdGhpcy5hdXRoLmFkZEF1dGhUb2tlbkxpc3RlbmVyKHRoaXMuSSkgOiAoXG4gICAgICAgIC8vIGlmIGF1dGggaXMgbm90IGF2YWlsYWJsZSwgaW52b2tlIHRva2VuTGlzdGVuZXIgb25jZSB3aXRoIG51bGwgdG9rZW5cbiAgICAgICAgdGhpcy5JKG51bGwpLCB0LmdldCgpLnRoZW4oKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGUuYXV0aCA9IHQsIGUuSSAmJiBcbiAgICAgICAgICAgIC8vIHRva2VuTGlzdGVuZXIgY2FuIGJlIHJlbW92ZWQgYnkgcmVtb3ZlQ2hhbmdlTGlzdGVuZXIoKVxuICAgICAgICAgICAgZS5hdXRoLmFkZEF1dGhUb2tlbkxpc3RlbmVyKGUuSSk7XG4gICAgICAgIH0pLCAoZnVuY3Rpb24oKSB7fSkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLmdldFRva2VuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcywgZSA9IHRoaXMuQSwgbiA9IHRoaXMuZm9yY2VSZWZyZXNoO1xuICAgICAgICAvLyBUYWtlIG5vdGUgb2YgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIHRva2VuQ291bnRlciBzbyB0aGF0IHRoaXMgbWV0aG9kXG4gICAgICAgIC8vIGNhbiBmYWlsICh3aXRoIGFuIEFCT1JURUQgZXJyb3IpIGlmIHRoZXJlIGlzIGEgdG9rZW4gY2hhbmdlIHdoaWxlIHRoZVxuICAgICAgICAvLyByZXF1ZXN0IGlzIG91dHN0YW5kaW5nLlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcmNlUmVmcmVzaCA9ICExLCB0aGlzLmF1dGggPyB0aGlzLmF1dGguZ2V0VG9rZW4obikudGhlbigoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgLy8gQ2FuY2VsIHRoZSByZXF1ZXN0IHNpbmNlIHRoZSB0b2tlbiBjaGFuZ2VkIHdoaWxlIHRoZSByZXF1ZXN0IHdhc1xuICAgICAgICAgICAgLy8gb3V0c3RhbmRpbmcgc28gdGhlIHJlc3BvbnNlIGlzIHBvdGVudGlhbGx5IGZvciBhIHByZXZpb3VzIHVzZXIgKHdoaWNoXG4gICAgICAgICAgICAvLyB1c2VyLCB3ZSBjYW4ndCBiZSBzdXJlKS5cbiAgICAgICAgICAgIGlmICh0LkEgIT09IGUpIHRocm93IG5ldyBjKGguQUJPUlRFRCwgXCJnZXRUb2tlbiBhYm9ydGVkIGR1ZSB0byB0b2tlbiBjaGFuZ2UuXCIpO1xuICAgICAgICAgICAgcmV0dXJuIG4gPyAobWUoXCJzdHJpbmdcIiA9PSB0eXBlb2Ygbi5hY2Nlc3NUb2tlbiksIG5ldyBmKG4uYWNjZXNzVG9rZW4sIHQuY3VycmVudFVzZXIpKSA6IG51bGw7XG4gICAgICAgIH0pKSA6IFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICB9LCB0LnByb3RvdHlwZS5fID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZm9yY2VSZWZyZXNoID0gITA7XG4gICAgfSwgdC5wcm90b3R5cGUubCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy51ID0gdCwgXG4gICAgICAgIC8vIEZpcmUgdGhlIGluaXRpYWwgZXZlbnRcbiAgICAgICAgdGhpcy5SICYmIHQodGhpcy5jdXJyZW50VXNlcik7XG4gICAgfSwgdC5wcm90b3R5cGUuVCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmF1dGggJiYgdGhpcy5hdXRoLnJlbW92ZUF1dGhUb2tlbkxpc3RlbmVyKHRoaXMuSSksIHRoaXMuSSA9IG51bGwsIHRoaXMudSA9IG51bGw7XG4gICAgfSwgXG4gICAgLy8gQXV0aC5nZXRVaWQoKSBjYW4gcmV0dXJuIG51bGwgZXZlbiB3aXRoIGEgdXNlciBsb2dnZWQgaW4uIEl0IGlzIGJlY2F1c2VcbiAgICAvLyBnZXRVaWQoKSBpcyBzeW5jaHJvbm91cywgYnV0IHRoZSBhdXRoIGNvZGUgcG9wdWxhdGluZyBVaWQgaXMgYXN5bmNocm9ub3VzLlxuICAgIC8vIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBpbiB0aGUgQXV0aFRva2VuTGlzdGVuZXIgY2FsbGJhY2tcbiAgICAvLyB0byBndWFyYW50ZWUgdG8gZ2V0IHRoZSBhY3R1YWwgdXNlci5cbiAgICB0LnByb3RvdHlwZS5tID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy5hdXRoICYmIHRoaXMuYXV0aC5nZXRVaWQoKTtcbiAgICAgICAgcmV0dXJuIG1lKG51bGwgPT09IHQgfHwgXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCksIG5ldyBhKHQpO1xuICAgIH0sIHQ7XG59KCksIGQgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSkge1xuICAgICAgICB0aGlzLlAgPSB0LCB0aGlzLlYgPSBlLCB0aGlzLnR5cGUgPSBcIkZpcnN0UGFydHlcIiwgdGhpcy51c2VyID0gYS5oO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcIm9cIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHQgPSB7XG4gICAgICAgICAgICAgICAgXCJYLUdvb2ctQXV0aFVzZXJcIjogdGhpcy5WXG4gICAgICAgICAgICB9LCBlID0gdGhpcy5QLmF1dGguZyhbXSk7XG4gICAgICAgICAgICByZXR1cm4gZSAmJiAodC5BdXRob3JpemF0aW9uID0gZSksIHQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIHQ7XG59KCksIHkgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSkge1xuICAgICAgICB0aGlzLlAgPSB0LCB0aGlzLlYgPSBlO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuZ2V0VG9rZW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgZCh0aGlzLlAsIHRoaXMuVikpO1xuICAgIH0sIHQucHJvdG90eXBlLmwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIC8vIEZpcmUgd2l0aCBpbml0aWFsIHVpZC5cbiAgICAgICAgdChhLmgpO1xuICAgIH0sIHQucHJvdG90eXBlLlQgPSBmdW5jdGlvbigpIHt9LCB0LnByb3RvdHlwZS5fID0gZnVuY3Rpb24oKSB7fSwgdDtcbn0oKSwgdiA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlKSB7XG4gICAgICAgIGlmICh0aGlzLnNlY29uZHMgPSB0LCB0aGlzLm5hbm9zZWNvbmRzID0gZSwgZSA8IDApIHRocm93IG5ldyBjKGguSU5WQUxJRF9BUkdVTUVOVCwgXCJUaW1lc3RhbXAgbmFub3NlY29uZHMgb3V0IG9mIHJhbmdlOiBcIiArIGUpO1xuICAgICAgICBpZiAoZSA+PSAxZTkpIHRocm93IG5ldyBjKGguSU5WQUxJRF9BUkdVTUVOVCwgXCJUaW1lc3RhbXAgbmFub3NlY29uZHMgb3V0IG9mIHJhbmdlOiBcIiArIGUpO1xuICAgICAgICBpZiAodCA8IC02MjEzNTU5NjgwMCkgdGhyb3cgbmV3IGMoaC5JTlZBTElEX0FSR1VNRU5ULCBcIlRpbWVzdGFtcCBzZWNvbmRzIG91dCBvZiByYW5nZTogXCIgKyB0KTtcbiAgICAgICAgLy8gVGhpcyB3aWxsIGJyZWFrIGluIHRoZSB5ZWFyIDEwLDAwMC5cbiAgICAgICAgICAgICAgICBpZiAodCA+PSAyNTM0MDIzMDA4MDApIHRocm93IG5ldyBjKGguSU5WQUxJRF9BUkdVTUVOVCwgXCJUaW1lc3RhbXAgc2Vjb25kcyBvdXQgb2YgcmFuZ2U6IFwiICsgdCk7XG4gICAgfVxuICAgIHJldHVybiB0Lm5vdyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdC5mcm9tTWlsbGlzKERhdGUubm93KCkpO1xuICAgIH0sIHQuZnJvbURhdGUgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiB0LmZyb21NaWxsaXMoZS5nZXRUaW1lKCkpO1xuICAgIH0sIHQuZnJvbU1pbGxpcyA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIG4gPSBNYXRoLmZsb29yKGUgLyAxZTMpO1xuICAgICAgICByZXR1cm4gbmV3IHQobiwgMWU2ICogKGUgLSAxZTMgKiBuKSk7XG4gICAgfSwgdC5wcm90b3R5cGUudG9EYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnRvTWlsbGlzKCkpO1xuICAgIH0sIHQucHJvdG90eXBlLnRvTWlsbGlzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAxZTMgKiB0aGlzLnNlY29uZHMgKyB0aGlzLm5hbm9zZWNvbmRzIC8gMWU2O1xuICAgIH0sIHQucHJvdG90eXBlLnAgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlY29uZHMgPT09IHQuc2Vjb25kcyA/IGJlKHRoaXMubmFub3NlY29uZHMsIHQubmFub3NlY29uZHMpIDogYmUodGhpcy5zZWNvbmRzLCB0LnNlY29uZHMpO1xuICAgIH0sIHQucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0LnNlY29uZHMgPT09IHRoaXMuc2Vjb25kcyAmJiB0Lm5hbm9zZWNvbmRzID09PSB0aGlzLm5hbm9zZWNvbmRzO1xuICAgIH0sIHQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBcIlRpbWVzdGFtcChzZWNvbmRzPVwiICsgdGhpcy5zZWNvbmRzICsgXCIsIG5hbm9zZWNvbmRzPVwiICsgdGhpcy5uYW5vc2Vjb25kcyArIFwiKVwiO1xuICAgIH0sIHQucHJvdG90eXBlLnZhbHVlT2YgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVGhpcyBtZXRob2QgcmV0dXJucyBhIHN0cmluZyBvZiB0aGUgZm9ybSA8c2Vjb25kcz4uPG5hbm9zZWNvbmRzPiB3aGVyZSA8c2Vjb25kcz4gaXNcbiAgICAgICAgLy8gdHJhbnNsYXRlZCB0byBoYXZlIGEgbm9uLW5lZ2F0aXZlIHZhbHVlIGFuZCBib3RoIDxzZWNvbmRzPiBhbmQgPG5hbm9zZWNvbmRzPiBhcmUgbGVmdC1wYWRkZWRcbiAgICAgICAgLy8gd2l0aCB6ZXJvZXMgdG8gYmUgYSBjb25zaXN0ZW50IGxlbmd0aC4gU3RyaW5ncyB3aXRoIHRoaXMgZm9ybWF0IHRoZW4gaGF2ZSBhIGxleGlvZ3JhcGhpY2FsXG4gICAgICAgIC8vIG9yZGVyaW5nIHRoYXQgbWF0Y2hlcyB0aGUgZXhwZWN0ZWQgb3JkZXJpbmcuIFRoZSA8c2Vjb25kcz4gdHJhbnNsYXRpb24gaXMgZG9uZSB0byBhdm9pZFxuICAgICAgICAvLyBoYXZpbmcgYSBsZWFkaW5nIG5lZ2F0aXZlIHNpZ24gKGkuZS4gYSBsZWFkaW5nICctJyBjaGFyYWN0ZXIpIGluIGl0cyBzdHJpbmcgcmVwcmVzZW50YXRpb24sXG4gICAgICAgIC8vIHdoaWNoIHdvdWxkIGFmZmVjdCBpdHMgbGV4aW9ncmFwaGljYWwgb3JkZXJpbmcuXG4gICAgICAgIHZhciB0ID0gdGhpcy5zZWNvbmRzIC0gLTYyMTM1NTk2ODAwO1xuICAgICAgICAvLyBOb3RlOiBVcCB0byAxMiBkZWNpbWFsIGRpZ2l0cyBhcmUgcmVxdWlyZWQgdG8gcmVwcmVzZW50IGFsbCB2YWxpZCAnc2Vjb25kcycgdmFsdWVzLlxuICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcodCkucGFkU3RhcnQoMTIsIFwiMFwiKSArIFwiLlwiICsgU3RyaW5nKHRoaXMubmFub3NlY29uZHMpLnBhZFN0YXJ0KDksIFwiMFwiKTtcbiAgICB9LCB0O1xufSgpLCBnID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdGhpcy50aW1lc3RhbXAgPSB0O1xuICAgIH1cbiAgICByZXR1cm4gdC52ID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gbmV3IHQoZSk7XG4gICAgfSwgdC5taW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0KG5ldyB2KDAsIDApKTtcbiAgICB9LCB0LnByb3RvdHlwZS5TID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy50aW1lc3RhbXAucCh0LnRpbWVzdGFtcCk7XG4gICAgfSwgdC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGltZXN0YW1wLmlzRXF1YWwodC50aW1lc3RhbXApO1xuICAgIH0sIFxuICAgIC8qKiBSZXR1cm5zIGEgbnVtYmVyIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB2ZXJzaW9uIGZvciB1c2UgaW4gc3BlYyB0ZXN0cy4gKi8gdC5wcm90b3R5cGUuRCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBDb252ZXJ0IHRvIG1pY3Jvc2Vjb25kcy5cbiAgICAgICAgcmV0dXJuIDFlNiAqIHRoaXMudGltZXN0YW1wLnNlY29uZHMgKyB0aGlzLnRpbWVzdGFtcC5uYW5vc2Vjb25kcyAvIDFlMztcbiAgICB9LCB0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gXCJTbmFwc2hvdFZlcnNpb24oXCIgKyB0aGlzLnRpbWVzdGFtcC50b1N0cmluZygpICsgXCIpXCI7XG4gICAgfSwgdC5wcm90b3R5cGUuQyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50aW1lc3RhbXA7XG4gICAgfSwgdDtcbn0oKSwgbSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlLCBuKSB7XG4gICAgICAgIHZvaWQgMCA9PT0gZSA/IGUgPSAwIDogZSA+IHQubGVuZ3RoICYmIGdlKCksIHZvaWQgMCA9PT0gbiA/IG4gPSB0Lmxlbmd0aCAtIGUgOiBuID4gdC5sZW5ndGggLSBlICYmIGdlKCksIFxuICAgICAgICB0aGlzLnNlZ21lbnRzID0gdCwgdGhpcy5vZmZzZXQgPSBlLCB0aGlzLkYgPSBuO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcImxlbmd0aFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5GO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCB0LnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gMCA9PT0gdC5OKHRoaXMsIGUpO1xuICAgIH0sIHQucHJvdG90eXBlLmNoaWxkID0gZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXMuc2VnbWVudHMuc2xpY2UodGhpcy5vZmZzZXQsIHRoaXMubGltaXQoKSk7XG4gICAgICAgIHJldHVybiBlIGluc3RhbmNlb2YgdCA/IGUuZm9yRWFjaCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgbi5wdXNoKHQpO1xuICAgICAgICB9KSkgOiBuLnB1c2goZSksIHRoaXMuJChuKTtcbiAgICB9LCBcbiAgICAvKiogVGhlIGluZGV4IG9mIG9uZSBwYXN0IHRoZSBsYXN0IHNlZ21lbnQgb2YgdGhlIHBhdGguICovIHQucHJvdG90eXBlLmxpbWl0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9mZnNldCArIHRoaXMubGVuZ3RoO1xuICAgIH0sIHQucHJvdG90eXBlLmsgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0ID0gdm9pZCAwID09PSB0ID8gMSA6IHQsIHRoaXMuJCh0aGlzLnNlZ21lbnRzLCB0aGlzLm9mZnNldCArIHQsIHRoaXMubGVuZ3RoIC0gdCk7XG4gICAgfSwgdC5wcm90b3R5cGUuTCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kKHRoaXMuc2VnbWVudHMsIHRoaXMub2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDEpO1xuICAgIH0sIHQucHJvdG90eXBlLk0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VnbWVudHNbdGhpcy5vZmZzZXRdO1xuICAgIH0sIHQucHJvdG90eXBlLk8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KHRoaXMubGVuZ3RoIC0gMSk7XG4gICAgfSwgdC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWdtZW50c1t0aGlzLm9mZnNldCArIHRdO1xuICAgIH0sIHQucHJvdG90eXBlLkIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIDAgPT09IHRoaXMubGVuZ3RoO1xuICAgIH0sIHQucHJvdG90eXBlLnEgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGlmICh0Lmxlbmd0aCA8IHRoaXMubGVuZ3RoKSByZXR1cm4gITE7XG4gICAgICAgIGZvciAodmFyIGUgPSAwOyBlIDwgdGhpcy5sZW5ndGg7IGUrKykgaWYgKHRoaXMuZ2V0KGUpICE9PSB0LmdldChlKSkgcmV0dXJuICExO1xuICAgICAgICByZXR1cm4gITA7XG4gICAgfSwgdC5wcm90b3R5cGUuVSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoICsgMSAhPT0gdC5sZW5ndGgpIHJldHVybiAhMTtcbiAgICAgICAgZm9yICh2YXIgZSA9IDA7IGUgPCB0aGlzLmxlbmd0aDsgZSsrKSBpZiAodGhpcy5nZXQoZSkgIT09IHQuZ2V0KGUpKSByZXR1cm4gITE7XG4gICAgICAgIHJldHVybiAhMDtcbiAgICB9LCB0LnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBlID0gdGhpcy5vZmZzZXQsIG4gPSB0aGlzLmxpbWl0KCk7IGUgPCBuOyBlKyspIHQodGhpcy5zZWdtZW50c1tlXSk7XG4gICAgfSwgdC5wcm90b3R5cGUuVyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWdtZW50cy5zbGljZSh0aGlzLm9mZnNldCwgdGhpcy5saW1pdCgpKTtcbiAgICB9LCB0Lk4gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGZvciAodmFyIG4gPSBNYXRoLm1pbih0Lmxlbmd0aCwgZS5sZW5ndGgpLCByID0gMDsgciA8IG47IHIrKykge1xuICAgICAgICAgICAgdmFyIGkgPSB0LmdldChyKSwgbyA9IGUuZ2V0KHIpO1xuICAgICAgICAgICAgaWYgKGkgPCBvKSByZXR1cm4gLTE7XG4gICAgICAgICAgICBpZiAoaSA+IG8pIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0Lmxlbmd0aCA8IGUubGVuZ3RoID8gLTEgOiB0Lmxlbmd0aCA+IGUubGVuZ3RoID8gMSA6IDA7XG4gICAgfSwgdDtcbn0oKSwgdyA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24odCkge1xuICAgIGZ1bmN0aW9uIG4oKSB7XG4gICAgICAgIHJldHVybiBudWxsICE9PSB0ICYmIHQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gZS5fX2V4dGVuZHMobiwgdCksIG4ucHJvdG90eXBlLiQgPSBmdW5jdGlvbih0LCBlLCByKSB7XG4gICAgICAgIHJldHVybiBuZXcgbih0LCBlLCByKTtcbiAgICB9LCBuLnByb3RvdHlwZS5qID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIE5PVEU6IFRoZSBjbGllbnQgaXMgaWdub3JhbnQgb2YgYW55IHBhdGggc2VnbWVudHMgY29udGFpbmluZyBlc2NhcGVcbiAgICAgICAgLy8gc2VxdWVuY2VzIChlLmcuIF9faWQxMjNfXykgYW5kIGp1c3QgcGFzc2VzIHRoZW0gdGhyb3VnaCByYXcgKHRoZXkgZXhpc3RcbiAgICAgICAgLy8gZm9yIGxlZ2FjeSByZWFzb25zIGFuZCBzaG91bGQgbm90IGJlIHVzZWQgZnJlcXVlbnRseSkuXG4gICAgICAgIHJldHVybiB0aGlzLlcoKS5qb2luKFwiL1wiKTtcbiAgICB9LCBuLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5qKCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJlc291cmNlIHBhdGggZnJvbSB0aGUgZ2l2ZW4gc2xhc2gtZGVsaW1pdGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBuLksgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIC8vIE5PVEU6IFRoZSBjbGllbnQgaXMgaWdub3JhbnQgb2YgYW55IHBhdGggc2VnbWVudHMgY29udGFpbmluZyBlc2NhcGVcbiAgICAgICAgLy8gc2VxdWVuY2VzIChlLmcuIF9faWQxMjNfXykgYW5kIGp1c3QgcGFzc2VzIHRoZW0gdGhyb3VnaCByYXcgKHRoZXkgZXhpc3RcbiAgICAgICAgLy8gZm9yIGxlZ2FjeSByZWFzb25zIGFuZCBzaG91bGQgbm90IGJlIHVzZWQgZnJlcXVlbnRseSkuXG4gICAgICAgIGlmICh0LmluZGV4T2YoXCIvL1wiKSA+PSAwKSB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBwYXRoIChcIiArIHQgKyBcIikuIFBhdGhzIG11c3Qgbm90IGNvbnRhaW4gLy8gaW4gdGhlbS5cIik7XG4gICAgICAgIC8vIFdlIG1heSBzdGlsbCBoYXZlIGFuIGVtcHR5IHNlZ21lbnQgYXQgdGhlIGJlZ2lubmluZyBvciBlbmQgaWYgdGhleSBoYWQgYVxuICAgICAgICAvLyBsZWFkaW5nIG9yIHRyYWlsaW5nIHNsYXNoICh3aGljaCB3ZSBhbGxvdykuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBuKHQuc3BsaXQoXCIvXCIpLmZpbHRlcigoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIHQubGVuZ3RoID4gMDtcbiAgICAgICAgfSkpKTtcbiAgICB9LCBuO1xufShtKTtcblxuLyoqXG4gKiBBbiBlcnJvciBjbGFzcyB1c2VkIGZvciBGaXJlc3RvcmUtZ2VuZXJhdGVkIGVycm9ycy4gSWRlYWxseSB3ZSBzaG91bGQgYmVcbiAqIHVzaW5nIEZpcmViYXNlRXJyb3IsIGJ1dCBpbnRlZ3JhdGluZyB3aXRoIGl0IGlzIG92ZXJseSBhcmR1b3VzIGF0IHRoZSBtb21lbnQsXG4gKiBzbyB3ZSBkZWZpbmUgb3VyIG93biBjb21wYXRpYmxlIGVycm9yIGNsYXNzICh3aXRoIGEgYG5hbWVgIG9mICdGaXJlYmFzZUVycm9yJ1xuICogYW5kIGNvbXBhdGlibGUgYGNvZGVgIGFuZCBgbWVzc2FnZWAgZmllbGRzLilcbiAqLyB3LkcgPSBuZXcgdyhbXSk7XG5cbnZhciBFID0gL15bX2EtekEtWl1bX2EtekEtWjAtOV0qJC8sIGIgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKHQpIHtcbiAgICBmdW5jdGlvbiBuKCkge1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gdCAmJiB0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGUuX19leHRlbmRzKG4sIHQpLCBuLnByb3RvdHlwZS4kID0gZnVuY3Rpb24odCwgZSwgcikge1xuICAgICAgICByZXR1cm4gbmV3IG4odCwgZSwgcik7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBzdHJpbmcgY291bGQgYmUgdXNlZCBhcyBhIHNlZ21lbnQgaW4gYSBmaWVsZCBwYXRoXG4gICAgICogd2l0aG91dCBlc2NhcGluZy5cbiAgICAgKi9cbiAgICBuLkggPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBFLnRlc3QodCk7XG4gICAgfSwgbi5wcm90b3R5cGUuaiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5XKCkubWFwKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gdCA9IHQucmVwbGFjZShcIlxcXFxcIiwgXCJcXFxcXFxcXFwiKS5yZXBsYWNlKFwiYFwiLCBcIlxcXFxgXCIpLCBuLkgodCkgfHwgKHQgPSBcImBcIiArIHQgKyBcImBcIiksIFxuICAgICAgICAgICAgdDtcbiAgICAgICAgfSkpLmpvaW4oXCIuXCIpO1xuICAgIH0sIG4ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmooKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBmaWVsZCByZWZlcmVuY2VzIHRoZSBrZXkgb2YgYSBkb2N1bWVudC5cbiAgICAgKi9cbiAgICBuLnByb3RvdHlwZS5ZID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAxID09PSB0aGlzLmxlbmd0aCAmJiBcIl9fbmFtZV9fXCIgPT09IHRoaXMuZ2V0KDApO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFRoZSBmaWVsZCBkZXNpZ25hdGluZyB0aGUga2V5IG9mIGEgZG9jdW1lbnQuXG4gICAgICovXG4gICAgbi5KID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgbihbIFwiX19uYW1lX19cIiBdKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBmaWVsZCBzdHJpbmcgZnJvbSB0aGUgZ2l2ZW4gc2VydmVyLWZvcm1hdHRlZCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiAtIFNwbGl0dGluZyB0aGUgZW1wdHkgc3RyaW5nIGlzIG5vdCBhbGxvd2VkIChmb3Igbm93IGF0IGxlYXN0KS5cbiAgICAgKiAtIEVtcHR5IHNlZ21lbnRzIHdpdGhpbiB0aGUgc3RyaW5nIChlLmcuIGlmIHRoZXJlIGFyZSB0d28gY29uc2VjdXRpdmVcbiAgICAgKiAgIHNlcGFyYXRvcnMpIGFyZSBub3QgYWxsb3dlZC5cbiAgICAgKlxuICAgICAqIFRPRE8oYi8zNzI0NDE1Nyk6IHdlIHNob3VsZCBtYWtlIHRoaXMgbW9yZSBzdHJpY3QuIFJpZ2h0IG5vdywgaXQgYWxsb3dzXG4gICAgICogbm9uLWlkZW50aWZpZXIgcGF0aCBjb21wb25lbnRzLCBldmVuIGlmIHRoZXkgYXJlbid0IGVzY2FwZWQuXG4gICAgICovXG4gICAgbi5YID0gZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBlID0gW10sIHIgPSBcIlwiLCBpID0gMCwgbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKDAgPT09IHIubGVuZ3RoKSB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBmaWVsZCBwYXRoIChcIiArIHQgKyBcIikuIFBhdGhzIG11c3Qgbm90IGJlIGVtcHR5LCBiZWdpbiB3aXRoICcuJywgZW5kIHdpdGggJy4nLCBvciBjb250YWluICcuLidcIik7XG4gICAgICAgICAgICBlLnB1c2gociksIHIgPSBcIlwiO1xuICAgICAgICB9LCBzID0gITE7IGkgPCB0Lmxlbmd0aDsgKSB7XG4gICAgICAgICAgICB2YXIgdSA9IHRbaV07XG4gICAgICAgICAgICBpZiAoXCJcXFxcXCIgPT09IHUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaSArIDEgPT09IHQubGVuZ3RoKSB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiUGF0aCBoYXMgdHJhaWxpbmcgZXNjYXBlIGNoYXJhY3RlcjogXCIgKyB0KTtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IHRbaSArIDFdO1xuICAgICAgICAgICAgICAgIGlmIChcIlxcXFxcIiAhPT0gYSAmJiBcIi5cIiAhPT0gYSAmJiBcImBcIiAhPT0gYSkgdGhyb3cgbmV3IGMoaC5JTlZBTElEX0FSR1VNRU5ULCBcIlBhdGggaGFzIGludmFsaWQgZXNjYXBlIHNlcXVlbmNlOiBcIiArIHQpO1xuICAgICAgICAgICAgICAgIHIgKz0gYSwgaSArPSAyO1xuICAgICAgICAgICAgfSBlbHNlIFwiYFwiID09PSB1ID8gKHMgPSAhcywgaSsrKSA6IFwiLlwiICE9PSB1IHx8IHMgPyAociArPSB1LCBpKyspIDogKG8oKSwgaSsrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobygpLCBzKSB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiVW50ZXJtaW5hdGVkIGAgaW4gcGF0aDogXCIgKyB0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBuKGUpO1xuICAgIH0sIG47XG59KG0pO1xuXG4vKiogQSBkb3Qtc2VwYXJhdGVkIHBhdGggZm9yIG5hdmlnYXRpbmcgc3ViLW9iamVjdHMgd2l0aGluIGEgZG9jdW1lbnQuICovIGIuRyA9IG5ldyBiKFtdKTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdGhpcy5wYXRoID0gdDtcbiAgICB9XG4gICAgcmV0dXJuIHQuWiA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0KHcuSyhlKS5rKDUpKTtcbiAgICB9LCBcbiAgICAvKiogUmV0dXJucyB0cnVlIGlmIHRoZSBkb2N1bWVudCBpcyBpbiB0aGUgc3BlY2lmaWVkIGNvbGxlY3Rpb25JZC4gKi8gdC5wcm90b3R5cGUudHQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhdGgubGVuZ3RoID49IDIgJiYgdGhpcy5wYXRoLmdldCh0aGlzLnBhdGgubGVuZ3RoIC0gMikgPT09IHQ7XG4gICAgfSwgdC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IHQgJiYgMCA9PT0gdy5OKHRoaXMucGF0aCwgdC5wYXRoKTtcbiAgICB9LCB0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXRoLnRvU3RyaW5nKCk7XG4gICAgfSwgdC5OID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gdy5OKHQucGF0aCwgZS5wYXRoKTtcbiAgICB9LCB0LmV0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdC5sZW5ndGggJSAyID09IDA7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhIG5ldyBkb2N1bWVudCBrZXkgd2l0aCB0aGUgZ2l2ZW4gc2VnbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2VnbWVudHMgVGhlIHNlZ21lbnRzIG9mIHRoZSBwYXRoIHRvIHRoZSBkb2N1bWVudFxuICAgICAqIEByZXR1cm4gQSBuZXcgaW5zdGFuY2Ugb2YgRG9jdW1lbnRLZXlcbiAgICAgKi9cbiAgICB0LnN0ID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gbmV3IHQobmV3IHcoZS5zbGljZSgpKSk7XG4gICAgfSwgdDtcbn0oKTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gZnVuY3Rpb24gVCh0KSB7XG4gICAgdmFyIGUgPSAwO1xuICAgIGZvciAodmFyIG4gaW4gdCkgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsIG4pICYmIGUrKztcbiAgICByZXR1cm4gZTtcbn1cblxuZnVuY3Rpb24gSSh0LCBlKSB7XG4gICAgZm9yICh2YXIgbiBpbiB0KSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCwgbikgJiYgZShuLCB0W25dKTtcbn1cblxuZnVuY3Rpb24gTih0KSB7XG4gICAgZm9yICh2YXIgZSBpbiB0KSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsIGUpKSByZXR1cm4gITE7XG4gICAgcmV0dXJuICEwO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBJbW11dGFibGUgY2xhc3MgdGhhdCByZXByZXNlbnRzIGEgXCJwcm90b1wiIGJ5dGUgc3RyaW5nLlxuICpcbiAqIFByb3RvIGJ5dGUgc3RyaW5ncyBjYW4gZWl0aGVyIGJlIEJhc2U2NC1lbmNvZGVkIHN0cmluZ3Mgb3IgVWludDhBcnJheXMgd2hlblxuICogc2VudCBvbiB0aGUgd2lyZS4gVGhpcyBjbGFzcyBhYnN0cmFjdHMgYXdheSB0aGlzIGRpZmZlcmVudGlhdGlvbiBieSBob2xkaW5nXG4gKiB0aGUgcHJvdG8gYnl0ZSBzdHJpbmcgaW4gYSBjb21tb24gY2xhc3MgdGhhdCBtdXN0IGJlIGNvbnZlcnRlZCBpbnRvIGEgc3RyaW5nXG4gKiBiZWZvcmUgYmVpbmcgc2VudCBhcyBhIHByb3RvLlxuICovIF8uRU1QVFkgPSBuZXcgXyhuZXcgdyhbXSkpO1xuXG52YXIgQSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0KSB7XG4gICAgICAgIHRoaXMuaXQgPSB0O1xuICAgIH1cbiAgICByZXR1cm4gdC5mcm9tQmFzZTY0U3RyaW5nID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gbmV3IHQoY2UubnQoKS5hdG9iKGUpKTtcbiAgICB9LCB0LmZyb21VaW50OEFycmF5ID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gbmV3IHQoXG4gICAgICAgIC8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGNvbnZlcnQgYW4gVWludDhhcnJheSB0byBhIGJpbmFyeSBzdHJpbmcuXG4gKi9cbiAgICAgICAgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgZm9yICh2YXIgZSA9IFwiXCIsIG4gPSAwOyBuIDwgdC5sZW5ndGg7ICsrbikgZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHRbbl0pO1xuICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIH0oZSkpO1xuICAgIH0sIHQucHJvdG90eXBlLnRvQmFzZTY0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBjZS5udCgpLmJ0b2EodGhpcy5pdCk7XG4gICAgfSwgdC5wcm90b3R5cGUudG9VaW50OEFycmF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBlID0gbmV3IFVpbnQ4QXJyYXkodC5sZW5ndGgpLCBuID0gMDsgbiA8IHQubGVuZ3RoOyBuKyspIGVbbl0gPSB0LmNoYXJDb2RlQXQobik7XG4gICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgfSh0aGlzLml0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5ydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gMiAqIHRoaXMuaXQubGVuZ3RoO1xuICAgIH0sIHQucHJvdG90eXBlLlMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBiZSh0aGlzLml0LCB0Lml0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pdCA9PT0gdC5pdDtcbiAgICB9LCB0O1xufSgpO1xuXG5mdW5jdGlvbiBrKHQpIHtcbiAgICByZXR1cm4gbnVsbCA9PSB0O1xufVxuXG4vKiogUmV0dXJucyB3aGV0aGVyIHRoZSB2YWx1ZSByZXByZXNlbnRzIC0wLiAqLyBmdW5jdGlvbiBEKHQpIHtcbiAgICAvLyBEZXRlY3QgaWYgdGhlIHZhbHVlIGlzIC0wLjAuIEJhc2VkIG9uIHBvbHlmaWxsIGZyb21cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAgICByZXR1cm4gLTAgPT09IHQgJiYgMSAvIHQgPT0gLTEgLyAwO1xufVxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBhIHZhbHVlIGlzIGFuIGludGVnZXIgYW5kIGluIHRoZSBzYWZlIGludGVnZXIgcmFuZ2VcbiAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gdGVzdCBmb3IgYmVpbmcgYW4gaW50ZWdlciBhbmQgaW4gdGhlIHNhZmUgcmFuZ2VcbiAqLyBmdW5jdGlvbiB4KHQpIHtcbiAgICByZXR1cm4gXCJudW1iZXJcIiA9PSB0eXBlb2YgdCAmJiBOdW1iZXIuaXNJbnRlZ2VyKHQpICYmICFEKHQpICYmIHQgPD0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgJiYgdCA+PSBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUjtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUmVwcmVzZW50cyBhIGxvY2FsbHktYXBwbGllZCBTZXJ2ZXJUaW1lc3RhbXAuXG4gKlxuICogU2VydmVyIFRpbWVzdGFtcHMgYXJlIGJhY2tlZCBieSBNYXBWYWx1ZXMgdGhhdCBjb250YWluIGFuIGludGVybmFsIGZpZWxkXG4gKiBgX190eXBlX19gIHdpdGggYSB2YWx1ZSBvZiBgc2VydmVyX3RpbWVzdGFtcGAuIFRoZSBwcmV2aW91cyB2YWx1ZSBhbmQgbG9jYWxcbiAqIHdyaXRlIHRpbWUgYXJlIHN0b3JlZCBpbiBpdHMgYF9fcHJldmlvdXNfdmFsdWVfX2AgYW5kIGBfX2xvY2FsX3dyaXRlX3RpbWVfX2BcbiAqIGZpZWxkcyByZXNwZWN0aXZlbHkuXG4gKlxuICogTm90ZXM6XG4gKiAtIFNlcnZlclRpbWVzdGFtcFZhbHVlIGluc3RhbmNlcyBhcmUgY3JlYXRlZCBhcyB0aGUgcmVzdWx0IG9mIGFwcGx5aW5nIGFcbiAqICAgVHJhbnNmb3JtTXV0YXRpb24gKHNlZSBUcmFuc2Zvcm1NdXRhdGlvbi5hcHBseVRvKCkpLiBUaGV5IGNhbiBvbmx5IGV4aXN0IGluXG4gKiAgIHRoZSBsb2NhbCB2aWV3IG9mIGEgZG9jdW1lbnQuIFRoZXJlZm9yZSB0aGV5IGRvIG5vdCBuZWVkIHRvIGJlIHBhcnNlZCBvclxuICogICBzZXJpYWxpemVkLlxuICogLSBXaGVuIGV2YWx1YXRlZCBsb2NhbGx5IChlLmcuIGZvciBzbmFwc2hvdC5kYXRhKCkpLCB0aGV5IGJ5IGRlZmF1bHRcbiAqICAgZXZhbHVhdGUgdG8gYG51bGxgLiBUaGlzIGJlaGF2aW9yIGNhbiBiZSBjb25maWd1cmVkIGJ5IHBhc3NpbmcgY3VzdG9tXG4gKiAgIEZpZWxkVmFsdWVPcHRpb25zIHRvIHZhbHVlKCkuXG4gKiAtIFdpdGggcmVzcGVjdCB0byBvdGhlciBTZXJ2ZXJUaW1lc3RhbXBWYWx1ZXMsIHRoZXkgc29ydCBieSB0aGVpclxuICogICBsb2NhbFdyaXRlVGltZS5cbiAqLyBmdW5jdGlvbiBTKHQpIHtcbiAgICB2YXIgZSwgbjtcbiAgICByZXR1cm4gXCJzZXJ2ZXJfdGltZXN0YW1wXCIgPT09IChudWxsID09PSAobiA9ICgobnVsbCA9PT0gKGUgPSBudWxsID09IHQgPyB2b2lkIDAgOiB0Lm1hcFZhbHVlKSB8fCB2b2lkIDAgPT09IGUgPyB2b2lkIDAgOiBlLmZpZWxkcykgfHwge30pLl9fdHlwZV9fKSB8fCB2b2lkIDAgPT09IG4gPyB2b2lkIDAgOiBuLnN0cmluZ1ZhbHVlKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFNlcnZlclRpbWVzdGFtcCBwcm90byB2YWx1ZSAodXNpbmcgdGhlIGludGVybmFsIGZvcm1hdCkuXG4gKi9cbi8qKlxuICogUmV0dXJucyB0aGUgbG9jYWwgdGltZSBhdCB3aGljaCB0aGlzIHRpbWVzdGFtcCB3YXMgZmlyc3Qgc2V0LlxuICovIGZ1bmN0aW9uIFIodCkge1xuICAgIHZhciBlID0gTSh0Lm1hcFZhbHVlLmZpZWxkcy5fX2xvY2FsX3dyaXRlX3RpbWVfXy50aW1lc3RhbXBWYWx1ZSk7XG4gICAgcmV0dXJuIG5ldyB2KGUuc2Vjb25kcywgZS5uYW5vcyk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBBIFJlZ0V4cCBtYXRjaGluZyBJU08gODYwMSBVVEMgdGltZXN0YW1wcyB3aXRoIG9wdGlvbmFsIGZyYWN0aW9uLlxuQS5odCA9IG5ldyBBKFwiXCIpO1xuXG52YXIgTCA9IG5ldyBSZWdFeHAoL15cXGR7NH0tXFxkXFxkLVxcZFxcZFRcXGRcXGQ6XFxkXFxkOlxcZFxcZCg/OlxcLihcXGQrKSk/WiQvKTtcblxuLyoqIEV4dHJhY3RzIHRoZSBiYWNrZW5kJ3MgdHlwZSBvcmRlciBmb3IgdGhlIHByb3ZpZGVkIHZhbHVlLiAqLyBmdW5jdGlvbiBPKHQpIHtcbiAgICByZXR1cm4gXCJudWxsVmFsdWVcIiBpbiB0ID8gMCAvKiBOdWxsVmFsdWUgKi8gOiBcImJvb2xlYW5WYWx1ZVwiIGluIHQgPyAxIC8qIEJvb2xlYW5WYWx1ZSAqLyA6IFwiaW50ZWdlclZhbHVlXCIgaW4gdCB8fCBcImRvdWJsZVZhbHVlXCIgaW4gdCA/IDIgLyogTnVtYmVyVmFsdWUgKi8gOiBcInRpbWVzdGFtcFZhbHVlXCIgaW4gdCA/IDMgLyogVGltZXN0YW1wVmFsdWUgKi8gOiBcInN0cmluZ1ZhbHVlXCIgaW4gdCA/IDUgLyogU3RyaW5nVmFsdWUgKi8gOiBcImJ5dGVzVmFsdWVcIiBpbiB0ID8gNiAvKiBCbG9iVmFsdWUgKi8gOiBcInJlZmVyZW5jZVZhbHVlXCIgaW4gdCA/IDcgLyogUmVmVmFsdWUgKi8gOiBcImdlb1BvaW50VmFsdWVcIiBpbiB0ID8gOCAvKiBHZW9Qb2ludFZhbHVlICovIDogXCJhcnJheVZhbHVlXCIgaW4gdCA/IDkgLyogQXJyYXlWYWx1ZSAqLyA6IFwibWFwVmFsdWVcIiBpbiB0ID8gUyh0KSA/IDQgLyogU2VydmVyVGltZXN0YW1wVmFsdWUgKi8gOiAxMCAvKiBPYmplY3RWYWx1ZSAqLyA6IGdlKCk7XG59XG5cbi8qKiBUZXN0cyBgbGVmdGAgYW5kIGByaWdodGAgZm9yIGVxdWFsaXR5IGJhc2VkIG9uIHRoZSBiYWNrZW5kIHNlbWFudGljcy4gKi8gZnVuY3Rpb24gVih0LCBlKSB7XG4gICAgdmFyIG4gPSBPKHQpO1xuICAgIGlmIChuICE9PSBPKGUpKSByZXR1cm4gITE7XG4gICAgc3dpdGNoIChuKSB7XG4gICAgICBjYXNlIDAgLyogTnVsbFZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuICEwO1xuXG4gICAgICBjYXNlIDEgLyogQm9vbGVhblZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIHQuYm9vbGVhblZhbHVlID09PSBlLmJvb2xlYW5WYWx1ZTtcblxuICAgICAgY2FzZSA0IC8qIFNlcnZlclRpbWVzdGFtcFZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIFIodCkuaXNFcXVhbChSKGUpKTtcblxuICAgICAgY2FzZSAzIC8qIFRpbWVzdGFtcFZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiB0LnRpbWVzdGFtcFZhbHVlICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIGUudGltZXN0YW1wVmFsdWUgJiYgdC50aW1lc3RhbXBWYWx1ZS5sZW5ndGggPT09IGUudGltZXN0YW1wVmFsdWUubGVuZ3RoKSBcbiAgICAgICAgICAgIC8vIFVzZSBzdHJpbmcgZXF1YWxpdHkgZm9yIElTTyA4NjAxIHRpbWVzdGFtcHNcbiAgICAgICAgICAgIHJldHVybiB0LnRpbWVzdGFtcFZhbHVlID09PSBlLnRpbWVzdGFtcFZhbHVlO1xuICAgICAgICAgICAgdmFyIG4gPSBNKHQudGltZXN0YW1wVmFsdWUpLCByID0gTShlLnRpbWVzdGFtcFZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBuLnNlY29uZHMgPT09IHIuc2Vjb25kcyAmJiBuLm5hbm9zID09PSByLm5hbm9zO1xuICAgICAgICB9KHQsIGUpO1xuXG4gICAgICBjYXNlIDUgLyogU3RyaW5nVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gdC5zdHJpbmdWYWx1ZSA9PT0gZS5zdHJpbmdWYWx1ZTtcblxuICAgICAgY2FzZSA2IC8qIEJsb2JWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gRih0LmJ5dGVzVmFsdWUpLmlzRXF1YWwoRihlLmJ5dGVzVmFsdWUpKTtcbiAgICAgICAgfSh0LCBlKTtcblxuICAgICAgY2FzZSA3IC8qIFJlZlZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIHQucmVmZXJlbmNlVmFsdWUgPT09IGUucmVmZXJlbmNlVmFsdWU7XG5cbiAgICAgIGNhc2UgOCAvKiBHZW9Qb2ludFZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiBqKHQuZ2VvUG9pbnRWYWx1ZS5sYXRpdHVkZSkgPT09IGooZS5nZW9Qb2ludFZhbHVlLmxhdGl0dWRlKSAmJiBqKHQuZ2VvUG9pbnRWYWx1ZS5sb25naXR1ZGUpID09PSBqKGUuZ2VvUG9pbnRWYWx1ZS5sb25naXR1ZGUpO1xuICAgICAgICB9KHQsIGUpO1xuXG4gICAgICBjYXNlIDIgLyogTnVtYmVyVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgaWYgKFwiaW50ZWdlclZhbHVlXCIgaW4gdCAmJiBcImludGVnZXJWYWx1ZVwiIGluIGUpIHJldHVybiBqKHQuaW50ZWdlclZhbHVlKSA9PT0gaihlLmludGVnZXJWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoXCJkb3VibGVWYWx1ZVwiIGluIHQgJiYgXCJkb3VibGVWYWx1ZVwiIGluIGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbiA9IGoodC5kb3VibGVWYWx1ZSksIHIgPSBqKGUuZG91YmxlVmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuID09PSByID8gRChuKSA9PT0gRChyKSA6IGlzTmFOKG4pICYmIGlzTmFOKHIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICExO1xuICAgICAgICB9KHQsIGUpO1xuXG4gICAgICBjYXNlIDkgLyogQXJyYXlWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBfZSh0LmFycmF5VmFsdWUudmFsdWVzIHx8IFtdLCBlLmFycmF5VmFsdWUudmFsdWVzIHx8IFtdLCBWKTtcblxuICAgICAgY2FzZSAxMCAvKiBPYmplY3RWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICB2YXIgbiA9IHQubWFwVmFsdWUuZmllbGRzIHx8IHt9LCByID0gZS5tYXBWYWx1ZS5maWVsZHMgfHwge307XG4gICAgICAgICAgICBpZiAoVChuKSAhPT0gVChyKSkgcmV0dXJuICExO1xuICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBuKSBpZiAobi5oYXNPd25Qcm9wZXJ0eShpKSAmJiAodm9pZCAwID09PSByW2ldIHx8ICFWKG5baV0sIHJbaV0pKSkgcmV0dXJuICExO1xuICAgICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICB9KHQsIGUpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZ2UoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIFAodCwgZSkge1xuICAgIHJldHVybiB2b2lkIDAgIT09ICh0LnZhbHVlcyB8fCBbXSkuZmluZCgoZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gVih0LCBlKTtcbiAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIFUodCwgZSkge1xuICAgIHZhciBuID0gTyh0KSwgciA9IE8oZSk7XG4gICAgaWYgKG4gIT09IHIpIHJldHVybiBiZShuLCByKTtcbiAgICBzd2l0Y2ggKG4pIHtcbiAgICAgIGNhc2UgMCAvKiBOdWxsVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gMDtcblxuICAgICAgY2FzZSAxIC8qIEJvb2xlYW5WYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBiZSh0LmJvb2xlYW5WYWx1ZSwgZS5ib29sZWFuVmFsdWUpO1xuXG4gICAgICBjYXNlIDIgLyogTnVtYmVyVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgdmFyIG4gPSBqKHQuaW50ZWdlclZhbHVlIHx8IHQuZG91YmxlVmFsdWUpLCByID0gaihlLmludGVnZXJWYWx1ZSB8fCBlLmRvdWJsZVZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBuIDwgciA/IC0xIDogbiA+IHIgPyAxIDogbiA9PT0gciA/IDAgOiBcbiAgICAgICAgICAgIC8vIG9uZSBvciBib3RoIGFyZSBOYU4uXG4gICAgICAgICAgICBpc05hTihuKSA/IGlzTmFOKHIpID8gMCA6IC0xIDogMTtcbiAgICAgICAgfSh0LCBlKTtcblxuICAgICAgY2FzZSAzIC8qIFRpbWVzdGFtcFZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIEModC50aW1lc3RhbXBWYWx1ZSwgZS50aW1lc3RhbXBWYWx1ZSk7XG5cbiAgICAgIGNhc2UgNCAvKiBTZXJ2ZXJUaW1lc3RhbXBWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBDKFIodCksIFIoZSkpO1xuXG4gICAgICBjYXNlIDUgLyogU3RyaW5nVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gYmUodC5zdHJpbmdWYWx1ZSwgZS5zdHJpbmdWYWx1ZSk7XG5cbiAgICAgIGNhc2UgNiAvKiBCbG9iVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgdmFyIG4gPSBGKHQpLCByID0gRihlKTtcbiAgICAgICAgICAgIHJldHVybiBuLlMocik7XG4gICAgICAgIH0odC5ieXRlc1ZhbHVlLCBlLmJ5dGVzVmFsdWUpO1xuXG4gICAgICBjYXNlIDcgLyogUmVmVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgZm9yICh2YXIgbiA9IHQuc3BsaXQoXCIvXCIpLCByID0gZS5zcGxpdChcIi9cIiksIGkgPSAwOyBpIDwgbi5sZW5ndGggJiYgaSA8IHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbyA9IGJlKG5baV0sIHJbaV0pO1xuICAgICAgICAgICAgICAgIGlmICgwICE9PSBvKSByZXR1cm4gbztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBiZShuLmxlbmd0aCwgci5sZW5ndGgpO1xuICAgICAgICB9KHQucmVmZXJlbmNlVmFsdWUsIGUucmVmZXJlbmNlVmFsdWUpO1xuXG4gICAgICBjYXNlIDggLyogR2VvUG9pbnRWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICB2YXIgbiA9IGJlKGoodC5sYXRpdHVkZSksIGooZS5sYXRpdHVkZSkpO1xuICAgICAgICAgICAgcmV0dXJuIDAgIT09IG4gPyBuIDogYmUoaih0LmxvbmdpdHVkZSksIGooZS5sb25naXR1ZGUpKTtcbiAgICAgICAgfSh0Lmdlb1BvaW50VmFsdWUsIGUuZ2VvUG9pbnRWYWx1ZSk7XG5cbiAgICAgIGNhc2UgOSAvKiBBcnJheVZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIGZvciAodmFyIG4gPSB0LnZhbHVlcyB8fCBbXSwgciA9IGUudmFsdWVzIHx8IFtdLCBpID0gMDsgaSA8IG4ubGVuZ3RoICYmIGkgPCByLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG8gPSBVKG5baV0sIHJbaV0pO1xuICAgICAgICAgICAgICAgIGlmIChvKSByZXR1cm4gbztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBiZShuLmxlbmd0aCwgci5sZW5ndGgpO1xuICAgICAgICB9KHQuYXJyYXlWYWx1ZSwgZS5hcnJheVZhbHVlKTtcblxuICAgICAgY2FzZSAxMCAvKiBPYmplY3RWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICB2YXIgbiA9IHQuZmllbGRzIHx8IHt9LCByID0gT2JqZWN0LmtleXMobiksIGkgPSBlLmZpZWxkcyB8fCB7fSwgbyA9IE9iamVjdC5rZXlzKGkpO1xuICAgICAgICAgICAgLy8gRXZlbiB0aG91Z2ggTWFwVmFsdWVzIGFyZSBsaWtlbHkgc29ydGVkIGNvcnJlY3RseSBiYXNlZCBvbiB0aGVpciBpbnNlcnRpb25cbiAgICAgICAgICAgIC8vIG9yZGVyIChlLmcuIHdoZW4gcmVjZWl2ZWQgZnJvbSB0aGUgYmFja2VuZCksIGxvY2FsIG1vZGlmaWNhdGlvbnMgY2FuIGJyaW5nXG4gICAgICAgICAgICAvLyBlbGVtZW50cyBvdXQgb2Ygb3JkZXIuIFdlIG5lZWQgdG8gcmUtc29ydCB0aGUgZWxlbWVudHMgdG8gZW5zdXJlIHRoYXRcbiAgICAgICAgICAgIC8vIGNhbm9uaWNhbCBJRHMgYXJlIGluZGVwZW5kZW50IG9mIGluc2VydGlvbiBvcmRlci5cbiAgICAgICAgICAgICAgICAgICAgICAgIHIuc29ydCgpLCBvLnNvcnQoKTtcbiAgICAgICAgICAgIGZvciAodmFyIHMgPSAwOyBzIDwgci5sZW5ndGggJiYgcyA8IG8ubGVuZ3RoOyArK3MpIHtcbiAgICAgICAgICAgICAgICB2YXIgdSA9IGJlKHJbc10sIG9bc10pO1xuICAgICAgICAgICAgICAgIGlmICgwICE9PSB1KSByZXR1cm4gdTtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IFUobltyW3NdXSwgaVtvW3NdXSk7XG4gICAgICAgICAgICAgICAgaWYgKDAgIT09IGEpIHJldHVybiBhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGJlKHIubGVuZ3RoLCBvLmxlbmd0aCk7XG4gICAgICAgIH0odC5tYXBWYWx1ZSwgZS5tYXBWYWx1ZSk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IGdlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBDKHQsIGUpIHtcbiAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCAmJiBcInN0cmluZ1wiID09IHR5cGVvZiBlICYmIHQubGVuZ3RoID09PSBlLmxlbmd0aCkgcmV0dXJuIGJlKHQsIGUpO1xuICAgIHZhciBuID0gTSh0KSwgciA9IE0oZSksIGkgPSBiZShuLnNlY29uZHMsIHIuc2Vjb25kcyk7XG4gICAgcmV0dXJuIDAgIT09IGkgPyBpIDogYmUobi5uYW5vcywgci5uYW5vcyk7XG59XG5cbmZ1bmN0aW9uIHEodCkge1xuICAgIHJldHVybiBmdW5jdGlvbiB0KGUpIHtcbiAgICAgICAgcmV0dXJuIFwibnVsbFZhbHVlXCIgaW4gZSA/IFwibnVsbFwiIDogXCJib29sZWFuVmFsdWVcIiBpbiBlID8gXCJcIiArIGUuYm9vbGVhblZhbHVlIDogXCJpbnRlZ2VyVmFsdWVcIiBpbiBlID8gXCJcIiArIGUuaW50ZWdlclZhbHVlIDogXCJkb3VibGVWYWx1ZVwiIGluIGUgPyBcIlwiICsgZS5kb3VibGVWYWx1ZSA6IFwidGltZXN0YW1wVmFsdWVcIiBpbiBlID8gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdmFyIGUgPSBNKHQpO1xuICAgICAgICAgICAgcmV0dXJuIFwidGltZShcIiArIGUuc2Vjb25kcyArIFwiLFwiICsgZS5uYW5vcyArIFwiKVwiO1xuICAgICAgICB9KGUudGltZXN0YW1wVmFsdWUpIDogXCJzdHJpbmdWYWx1ZVwiIGluIGUgPyBlLnN0cmluZ1ZhbHVlIDogXCJieXRlc1ZhbHVlXCIgaW4gZSA/IEYoZS5ieXRlc1ZhbHVlKS50b0Jhc2U2NCgpIDogXCJyZWZlcmVuY2VWYWx1ZVwiIGluIGUgPyAociA9IGUucmVmZXJlbmNlVmFsdWUsIFxuICAgICAgICBfLloocikudG9TdHJpbmcoKSkgOiBcImdlb1BvaW50VmFsdWVcIiBpbiBlID8gXCJnZW8oXCIgKyAobiA9IGUuZ2VvUG9pbnRWYWx1ZSkubGF0aXR1ZGUgKyBcIixcIiArIG4ubG9uZ2l0dWRlICsgXCIpXCIgOiBcImFycmF5VmFsdWVcIiBpbiBlID8gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgZm9yICh2YXIgbiA9IFwiW1wiLCByID0gITAsIGkgPSAwLCBvID0gZS52YWx1ZXMgfHwgW107IGkgPCBvLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBvW2ldO1xuICAgICAgICAgICAgICAgIHIgPyByID0gITEgOiBuICs9IFwiLFwiLCBuICs9IHQocyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbiArIFwiXVwiO1xuICAgICAgICB9KGUuYXJyYXlWYWx1ZSkgOiBcIm1hcFZhbHVlXCIgaW4gZSA/IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAvLyBJdGVyYXRpb24gb3JkZXIgaW4gSmF2YVNjcmlwdCBpcyBub3QgZ3VhcmFudGVlZC4gVG8gZW5zdXJlIHRoYXQgd2UgZ2VuZXJhdGVcbiAgICAgICAgICAgIC8vIG1hdGNoaW5nIGNhbm9uaWNhbCBJRHMgZm9yIGlkZW50aWNhbCBtYXBzLCB3ZSBuZWVkIHRvIHNvcnQgdGhlIGtleXMuXG4gICAgICAgICAgICB2YXIgbiA9IFwie1wiLCByID0gITAsIGkgPSAwLCBvID0gT2JqZWN0LmtleXMoZS5maWVsZHMgfHwge30pLnNvcnQoKTsgaSA8IG8ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IG9baV07XG4gICAgICAgICAgICAgICAgciA/IHIgPSAhMSA6IG4gKz0gXCIsXCIsIG4gKz0gcyArIFwiOlwiICsgdChlLmZpZWxkc1tzXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbiArIFwifVwiO1xuICAgICAgICB9KGUubWFwVmFsdWUpIDogZ2UoKTtcbiAgICAgICAgdmFyIG4sIHI7XG4gICAgfSh0KTtcbn1cblxuZnVuY3Rpb24gTSh0KSB7XG4gICAgLy8gVGhlIGpzb24gaW50ZXJmYWNlIChmb3IgdGhlIGJyb3dzZXIpIHdpbGwgcmV0dXJuIGFuIGlzbyB0aW1lc3RhbXAgc3RyaW5nLFxuICAgIC8vIHdoaWxlIHRoZSBwcm90byBqcyBsaWJyYXJ5IChmb3Igbm9kZSkgd2lsbCByZXR1cm4gYVxuICAgIC8vIGdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAgaW5zdGFuY2UuXG4gICAgaWYgKG1lKCEhdCksIFwic3RyaW5nXCIgPT0gdHlwZW9mIHQpIHtcbiAgICAgICAgLy8gVGhlIGRhdGUgc3RyaW5nIGNhbiBoYXZlIGhpZ2hlciBwcmVjaXNpb24gKG5hbm9zKSB0aGFuIHRoZSBEYXRlIGNsYXNzXG4gICAgICAgIC8vIChtaWxsaXMpLCBzbyB3ZSBkbyBzb21lIGN1c3RvbSBwYXJzaW5nIGhlcmUuXG4gICAgICAgIC8vIFBhcnNlIHRoZSBuYW5vcyByaWdodCBvdXQgb2YgdGhlIHN0cmluZy5cbiAgICAgICAgdmFyIGUgPSAwLCBuID0gTC5leGVjKHQpO1xuICAgICAgICBpZiAobWUoISFuKSwgblsxXSkge1xuICAgICAgICAgICAgLy8gUGFkIHRoZSBmcmFjdGlvbiBvdXQgdG8gOSBkaWdpdHMgKG5hbm9zKS5cbiAgICAgICAgICAgIHZhciByID0gblsxXTtcbiAgICAgICAgICAgIHIgPSAociArIFwiMDAwMDAwMDAwXCIpLnN1YnN0cigwLCA5KSwgZSA9IE51bWJlcihyKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQYXJzZSB0aGUgZGF0ZSB0byBnZXQgdGhlIHNlY29uZHMuXG4gICAgICAgICAgICAgICAgdmFyIGkgPSBuZXcgRGF0ZSh0KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNlY29uZHM6IE1hdGguZmxvb3IoaS5nZXRUaW1lKCkgLyAxZTMpLFxuICAgICAgICAgICAgbmFub3M6IGVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2Vjb25kczogaih0LnNlY29uZHMpLFxuICAgICAgICBuYW5vczogaih0Lm5hbm9zKVxuICAgIH07XG59XG5cbi8qKlxuICogQ29udmVydHMgdGhlIHBvc3NpYmxlIFByb3RvIHR5cGVzIGZvciBudW1iZXJzIGludG8gYSBKYXZhU2NyaXB0IG51bWJlci5cbiAqIFJldHVybnMgMCBpZiB0aGUgdmFsdWUgaXMgbm90IG51bWVyaWMuXG4gKi8gZnVuY3Rpb24gaih0KSB7XG4gICAgLy8gVE9ETyhiam9ybmljayk6IEhhbmRsZSBpbnQ2NCBncmVhdGVyIHRoYW4gNTMgYml0cy5cbiAgICByZXR1cm4gXCJudW1iZXJcIiA9PSB0eXBlb2YgdCA/IHQgOiBcInN0cmluZ1wiID09IHR5cGVvZiB0ID8gTnVtYmVyKHQpIDogMDtcbn1cblxuLyoqIENvbnZlcnRzIHRoZSBwb3NzaWJsZSBQcm90byB0eXBlcyBmb3IgQmxvYnMgaW50byBhIEJ5dGVTdHJpbmcuICovIGZ1bmN0aW9uIEYodCkge1xuICAgIHJldHVybiBcInN0cmluZ1wiID09IHR5cGVvZiB0ID8gQS5mcm9tQmFzZTY0U3RyaW5nKHQpIDogQS5mcm9tVWludDhBcnJheSh0KTtcbn1cblxuLyoqIFJldHVybnMgYSByZWZlcmVuY2UgdmFsdWUgZm9yIHRoZSBwcm92aWRlZCBkYXRhYmFzZSBhbmQga2V5LiAqLyBmdW5jdGlvbiBCKHQsIGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZWZlcmVuY2VWYWx1ZTogXCJwcm9qZWN0cy9cIiArIHQucHJvamVjdElkICsgXCIvZGF0YWJhc2VzL1wiICsgdC5kYXRhYmFzZSArIFwiL2RvY3VtZW50cy9cIiArIGUucGF0aC5qKClcbiAgICB9O1xufVxuXG4vKiogUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgYW4gSW50ZWdlclZhbHVlIC4gKi8gZnVuY3Rpb24geih0KSB7XG4gICAgcmV0dXJuICEhdCAmJiBcImludGVnZXJWYWx1ZVwiIGluIHQ7XG59XG5cbi8qKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBhIERvdWJsZVZhbHVlLiAqL1xuLyoqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIEFycmF5VmFsdWUuICovIGZ1bmN0aW9uIEcodCkge1xuICAgIHJldHVybiAhIXQgJiYgXCJhcnJheVZhbHVlXCIgaW4gdDtcbn1cblxuLyoqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIGEgTnVsbFZhbHVlLiAqLyBmdW5jdGlvbiBXKHQpIHtcbiAgICByZXR1cm4gISF0ICYmIFwibnVsbFZhbHVlXCIgaW4gdDtcbn1cblxuLyoqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIE5hTi4gKi8gZnVuY3Rpb24gUSh0KSB7XG4gICAgcmV0dXJuICEhdCAmJiBcImRvdWJsZVZhbHVlXCIgaW4gdCAmJiBpc05hTihOdW1iZXIodC5kb3VibGVWYWx1ZSkpO1xufVxuXG4vKiogUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgYSBNYXBWYWx1ZS4gKi8gZnVuY3Rpb24gSyh0KSB7XG4gICAgcmV0dXJuICEhdCAmJiBcIm1hcFZhbHVlXCIgaW4gdDtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKiBUcmFuc2Zvcm1zIGEgdmFsdWUgaW50byBhIHNlcnZlci1nZW5lcmF0ZWQgdGltZXN0YW1wLiAqLyB2YXIgWSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCgpIHt9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLm90ID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgdmFyIG4gPSB7XG4gICAgICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgICAgICAgIF9fdHlwZV9fOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdWYWx1ZTogXCJzZXJ2ZXJfdGltZXN0YW1wXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgX19sb2NhbF93cml0ZV90aW1lX186IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcFZhbHVlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kczogdC5zZWNvbmRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbm9zOiB0Lm5hbm9zZWNvbmRzXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIGUgJiYgKG4uZmllbGRzLl9fcHJldmlvdXNfdmFsdWVfXyA9IGUpLCB7XG4gICAgICAgICAgICAgICAgbWFwVmFsdWU6IG5cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0oZSwgdCk7XG4gICAgfSwgdC5wcm90b3R5cGUuYXQgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiBlO1xuICAgIH0sIHQucHJvdG90eXBlLnV0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgLy8gU2VydmVyIHRpbWVzdGFtcHMgYXJlIGlkZW1wb3RlbnQgYW5kIGRvbid0IHJlcXVpcmUgYSBiYXNlIHZhbHVlLlxuICAgICAgICB9LCB0LnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gZSBpbnN0YW5jZW9mIHQ7XG4gICAgfSwgdDtcbn0oKTtcblxuWS5pbnN0YW5jZSA9IG5ldyBZO1xuXG4vKiogVHJhbnNmb3JtcyBhbiBhcnJheSB2YWx1ZSB2aWEgYSB1bmlvbiBvcGVyYXRpb24uICovXG52YXIgJCA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0KSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSB0O1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUub3QgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5KHQpO1xuICAgIH0sIHQucHJvdG90eXBlLmF0ID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAvLyBUaGUgc2VydmVyIGp1c3Qgc2VuZHMgbnVsbCBhcyB0aGUgdHJhbnNmb3JtIHJlc3VsdCBmb3IgYXJyYXkgb3BlcmF0aW9ucyxcbiAgICAgICAgLy8gc28gd2UgaGF2ZSB0byBjYWxjdWxhdGUgYSByZXN1bHQgdGhlIHNhbWUgYXMgd2UgZG8gZm9yIGxvY2FsXG4gICAgICAgIC8vIGFwcGxpY2F0aW9ucy5cbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHkodCk7XG4gICAgfSwgdC5wcm90b3R5cGUuYXBwbHkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIGUgPSBYKHQpLCBuID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgZS5zb21lKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFYoZSwgdCk7XG4gICAgICAgICAgICB9KSkgfHwgZS5wdXNoKHQpO1xuICAgICAgICB9LCByID0gMCwgaSA9IHRoaXMuZWxlbWVudHM7IHIgPCBpLmxlbmd0aDsgcisrKSB7XG4gICAgICAgICAgICBuKGlbcl0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhcnJheVZhbHVlOiB7XG4gICAgICAgICAgICAgICAgdmFsdWVzOiBlXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSwgdC5wcm90b3R5cGUudXQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAvLyBBcnJheSB0cmFuc2Zvcm1zIGFyZSBpZGVtcG90ZW50IGFuZCBkb24ndCByZXF1aXJlIGEgYmFzZSB2YWx1ZS5cbiAgICAgICAgfSwgdC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIGUgaW5zdGFuY2VvZiB0ICYmIF9lKHRoaXMuZWxlbWVudHMsIGUuZWxlbWVudHMsIFYpO1xuICAgIH0sIHQ7XG59KCksIEogPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCkge1xuICAgICAgICB0aGlzLmVsZW1lbnRzID0gdDtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLm90ID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBseSh0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5hdCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgLy8gVGhlIHNlcnZlciBqdXN0IHNlbmRzIG51bGwgYXMgdGhlIHRyYW5zZm9ybSByZXN1bHQgZm9yIGFycmF5IG9wZXJhdGlvbnMsXG4gICAgICAgIC8vIHNvIHdlIGhhdmUgdG8gY2FsY3VsYXRlIGEgcmVzdWx0IHRoZSBzYW1lIGFzIHdlIGRvIGZvciBsb2NhbFxuICAgICAgICAvLyBhcHBsaWNhdGlvbnMuXG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5KHQpO1xuICAgIH0sIHQucHJvdG90eXBlLmFwcGx5ID0gZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBlID0gWCh0KSwgbiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGUgPSBlLmZpbHRlcigoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhVihlLCB0KTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSwgciA9IDAsIGkgPSB0aGlzLmVsZW1lbnRzOyByIDwgaS5sZW5ndGg7IHIrKykge1xuICAgICAgICAgICAgbihpW3JdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYXJyYXlWYWx1ZToge1xuICAgICAgICAgICAgICAgIHZhbHVlczogZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0sIHQucHJvdG90eXBlLnV0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgLy8gQXJyYXkgdHJhbnNmb3JtcyBhcmUgaWRlbXBvdGVudCBhbmQgZG9uJ3QgcmVxdWlyZSBhIGJhc2UgdmFsdWUuXG4gICAgICAgIH0sIHQucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBlIGluc3RhbmNlb2YgdCAmJiBfZSh0aGlzLmVsZW1lbnRzLCBlLmVsZW1lbnRzLCBWKTtcbiAgICB9LCB0O1xufSgpLCBIID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQsIGUpIHtcbiAgICAgICAgdGhpcy5zZXJpYWxpemVyID0gdCwgdGhpcy5jdCA9IGU7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5vdCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgLy8gUE9SVElORyBOT1RFOiBTaW5jZSBKYXZhU2NyaXB0J3MgaW50ZWdlciBhcml0aG1ldGljIGlzIGxpbWl0ZWQgdG8gNTMgYml0XG4gICAgICAgIC8vIHByZWNpc2lvbiBhbmQgcmVzb2x2ZXMgb3ZlcmZsb3dzIGJ5IHJlZHVjaW5nIHByZWNpc2lvbiwgd2UgZG8gbm90XG4gICAgICAgIC8vIG1hbnVhbGx5IGNhcCBvdmVyZmxvd3MgYXQgMl42My5cbiAgICAgICAgdmFyIG4gPSB0aGlzLnV0KHQpLCByID0gdGhpcy5hc051bWJlcihuKSArIHRoaXMuYXNOdW1iZXIodGhpcy5jdCk7XG4gICAgICAgIHJldHVybiB6KG4pICYmIHoodGhpcy5jdCkgPyB0aGlzLnNlcmlhbGl6ZXIuX3QocikgOiB0aGlzLnNlcmlhbGl6ZXIubHQocik7XG4gICAgfSwgdC5wcm90b3R5cGUuYXQgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiBlO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIEluc3BlY3RzIHRoZSBwcm92aWRlZCB2YWx1ZSwgcmV0dXJuaW5nIHRoZSBwcm92aWRlZCB2YWx1ZSBpZiBpdCBpcyBhbHJlYWR5XG4gICAgICogYSBOdW1iZXJWYWx1ZSwgb3RoZXJ3aXNlIHJldHVybmluZyBhIGNvZXJjZWQgdmFsdWUgb2YgMC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS51dCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHooZSA9IHQpIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiAhIXQgJiYgXCJkb3VibGVWYWx1ZVwiIGluIHQ7XG4gICAgICAgIH0oZSkgPyB0IDoge1xuICAgICAgICAgICAgaW50ZWdlclZhbHVlOiAwXG4gICAgICAgIH07XG4gICAgICAgIHZhciBlO1xuICAgIH0sIHQucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBlIGluc3RhbmNlb2YgdCAmJiBWKHRoaXMuY3QsIGUuY3QpO1xuICAgIH0sIHQucHJvdG90eXBlLmFzTnVtYmVyID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gaih0LmludGVnZXJWYWx1ZSB8fCB0LmRvdWJsZVZhbHVlKTtcbiAgICB9LCB0O1xufSgpO1xuXG4vKiogVHJhbnNmb3JtcyBhbiBhcnJheSB2YWx1ZSB2aWEgYSByZW1vdmUgb3BlcmF0aW9uLiAqLyBmdW5jdGlvbiBYKHQpIHtcbiAgICByZXR1cm4gRyh0KSAmJiB0LmFycmF5VmFsdWUudmFsdWVzID8gdC5hcnJheVZhbHVlLnZhbHVlcy5zbGljZSgpIDogW107XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFByb3ZpZGVzIGEgc2V0IG9mIGZpZWxkcyB0aGF0IGNhbiBiZSB1c2VkIHRvIHBhcnRpYWxseSBwYXRjaCBhIGRvY3VtZW50LlxuICogRmllbGRNYXNrIGlzIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBPYmplY3RWYWx1ZS5cbiAqIEV4YW1wbGVzOlxuICogICBmb28gLSBPdmVyd3JpdGVzIGZvbyBlbnRpcmVseSB3aXRoIHRoZSBwcm92aWRlZCB2YWx1ZS4gSWYgZm9vIGlzIG5vdFxuICogICAgICAgICBwcmVzZW50IGluIHRoZSBjb21wYW5pb24gT2JqZWN0VmFsdWUsIHRoZSBmaWVsZCBpcyBkZWxldGVkLlxuICogICBmb28uYmFyIC0gT3ZlcndyaXRlcyBvbmx5IHRoZSBmaWVsZCBiYXIgb2YgdGhlIG9iamVjdCBmb28uXG4gKiAgICAgICAgICAgICBJZiBmb28gaXMgbm90IGFuIG9iamVjdCwgZm9vIGlzIHJlcGxhY2VkIHdpdGggYW4gb2JqZWN0XG4gKiAgICAgICAgICAgICBjb250YWluaW5nIGZvb1xuICovIHZhciBaID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdGhpcy5maWVsZHMgPSB0LCBcbiAgICAgICAgLy8gVE9ETyhkaW1vbmQpOiB2YWxpZGF0aW9uIG9mIEZpZWxkTWFza1xuICAgICAgICAvLyBTb3J0IHRoZSBmaWVsZCBtYXNrIHRvIHN1cHBvcnQgYEZpZWxkTWFzay5pc0VxdWFsKClgIGFuZCBhc3NlcnQgYmVsb3cuXG4gICAgICAgIHQuc29ydChiLk4pXG4gICAgICAgIC8qKlxuICAgICAqIFZlcmlmaWVzIHRoYXQgYGZpZWxkUGF0aGAgaXMgaW5jbHVkZWQgYnkgYXQgbGVhc3Qgb25lIGZpZWxkIGluIHRoaXMgZmllbGRcbiAgICAgKiBtYXNrLlxuICAgICAqXG4gICAgICogVGhpcyBpcyBhbiBPKG4pIG9wZXJhdGlvbiwgd2hlcmUgYG5gIGlzIHRoZSBzaXplIG9mIHRoZSBmaWVsZCBtYXNrLlxuICAgICAqLztcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLmR0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBlID0gMCwgbiA9IHRoaXMuZmllbGRzOyBlIDwgbi5sZW5ndGg7IGUrKykge1xuICAgICAgICAgICAgaWYgKG5bZV0ucSh0KSkgcmV0dXJuICEwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9LCB0LnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gX2UodGhpcy5maWVsZHMsIHQuZmllbGRzLCAoZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgcmV0dXJuIHQuaXNFcXVhbChlKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQ7XG59KCksIHR0ID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQsIGUpIHtcbiAgICAgICAgdGhpcy5maWVsZCA9IHQsIHRoaXMudHJhbnNmb3JtID0gZTtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpZWxkLmlzRXF1YWwodC5maWVsZCkgJiYgdGhpcy50cmFuc2Zvcm0uaXNFcXVhbCh0LnRyYW5zZm9ybSk7XG4gICAgfSwgdDtcbn0oKSwgZXQgPSBmdW5jdGlvbihcbi8qKlxuICAgICAqIFRoZSB2ZXJzaW9uIGF0IHdoaWNoIHRoZSBtdXRhdGlvbiB3YXMgY29tbWl0dGVkOlxuICAgICAqXG4gICAgICogLSBGb3IgbW9zdCBvcGVyYXRpb25zLCB0aGlzIGlzIHRoZSB1cGRhdGVUaW1lIGluIHRoZSBXcml0ZVJlc3VsdC5cbiAgICAgKiAtIEZvciBkZWxldGVzLCB0aGUgY29tbWl0VGltZSBvZiB0aGUgV3JpdGVSZXNwb25zZSAoYmVjYXVzZSBkZWxldGVzIGFyZVxuICAgICAqICAgbm90IHN0b3JlZCBhbmQgaGF2ZSBubyB1cGRhdGVUaW1lKS5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCB0aGVzZSB2ZXJzaW9ucyBjYW4gYmUgZGlmZmVyZW50OiBOby1vcCB3cml0ZXMgd2lsbCBub3QgY2hhbmdlXG4gICAgICogdGhlIHVwZGF0ZVRpbWUgZXZlbiB0aG91Z2ggdGhlIGNvbW1pdFRpbWUgYWR2YW5jZXMuXG4gICAgICovXG50LCBcbi8qKlxuICAgICAqIFRoZSByZXN1bHRpbmcgZmllbGRzIHJldHVybmVkIGZyb20gdGhlIGJhY2tlbmQgYWZ0ZXIgYVxuICAgICAqIFRyYW5zZm9ybU11dGF0aW9uIGhhcyBiZWVuIGNvbW1pdHRlZC4gQ29udGFpbnMgb25lIEZpZWxkVmFsdWUgZm9yIGVhY2hcbiAgICAgKiBGaWVsZFRyYW5zZm9ybSB0aGF0IHdhcyBpbiB0aGUgbXV0YXRpb24uXG4gICAgICpcbiAgICAgKiBXaWxsIGJlIG51bGwgaWYgdGhlIG11dGF0aW9uIHdhcyBub3QgYSBUcmFuc2Zvcm1NdXRhdGlvbi5cbiAgICAgKi9cbmUpIHtcbiAgICB0aGlzLnZlcnNpb24gPSB0LCB0aGlzLnRyYW5zZm9ybVJlc3VsdHMgPSBlO1xufSwgbnQgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSkge1xuICAgICAgICB0aGlzLnVwZGF0ZVRpbWUgPSB0LCB0aGlzLmV4aXN0cyA9IGVcbiAgICAgICAgLyoqIENyZWF0ZXMgYSBuZXcgZW1wdHkgUHJlY29uZGl0aW9uLiAqLztcbiAgICB9XG4gICAgcmV0dXJuIHQuZnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0O1xuICAgIH0sIFxuICAgIC8qKiBDcmVhdGVzIGEgbmV3IFByZWNvbmRpdGlvbiB3aXRoIGFuIGV4aXN0cyBmbGFnLiAqLyB0LmV4aXN0cyA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0KHZvaWQgMCwgZSk7XG4gICAgfSwgXG4gICAgLyoqIENyZWF0ZXMgYSBuZXcgUHJlY29uZGl0aW9uIGJhc2VkIG9uIGEgdmVyc2lvbiBhIGRvY3VtZW50IGV4aXN0cyBhdC4gKi8gdC51cGRhdGVUaW1lID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gbmV3IHQoZSk7XG4gICAgfSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcIlR0XCIsIHtcbiAgICAgICAgLyoqIFJldHVybnMgd2hldGhlciB0aGlzIFByZWNvbmRpdGlvbiBpcyBlbXB0eS4gKi8gZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB2b2lkIDAgPT09IHRoaXMudXBkYXRlVGltZSAmJiB2b2lkIDAgPT09IHRoaXMuZXhpc3RzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHByZWNvbmRpdGlvbnMgaXMgdmFsaWQgZm9yIHRoZSBnaXZlbiBkb2N1bWVudFxuICAgICAqIChvciBudWxsIGlmIG5vIGRvY3VtZW50IGlzIGF2YWlsYWJsZSkuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuRXQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB2b2lkIDAgIT09IHRoaXMudXBkYXRlVGltZSA/IHQgaW5zdGFuY2VvZiB5dCAmJiB0LnZlcnNpb24uaXNFcXVhbCh0aGlzLnVwZGF0ZVRpbWUpIDogdm9pZCAwID09PSB0aGlzLmV4aXN0cyB8fCB0aGlzLmV4aXN0cyA9PT0gdCBpbnN0YW5jZW9mIHl0O1xuICAgIH0sIHQucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4aXN0cyA9PT0gdC5leGlzdHMgJiYgKHRoaXMudXBkYXRlVGltZSA/ICEhdC51cGRhdGVUaW1lICYmIHRoaXMudXBkYXRlVGltZS5pc0VxdWFsKHQudXBkYXRlVGltZSkgOiAhdC51cGRhdGVUaW1lKTtcbiAgICB9LCB0O1xufSgpLCBydCA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCgpIHt9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLkl0ID0gZnVuY3Rpb24odCkge30sIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHZlcnNpb24gZnJvbSB0aGUgZ2l2ZW4gZG9jdW1lbnQgZm9yIHVzZSBhcyB0aGUgcmVzdWx0IG9mIGFcbiAgICAgKiBtdXRhdGlvbi4gTXV0YXRpb25zIGFyZSBkZWZpbmVkIHRvIHJldHVybiB0aGUgdmVyc2lvbiBvZiB0aGUgYmFzZSBkb2N1bWVudFxuICAgICAqIG9ubHkgaWYgaXQgaXMgYW4gZXhpc3RpbmcgZG9jdW1lbnQuIERlbGV0ZWQgYW5kIHVua25vd24gZG9jdW1lbnRzIGhhdmUgYVxuICAgICAqIHBvc3QtbXV0YXRpb24gdmVyc2lvbiBvZiBTbmFwc2hvdFZlcnNpb24ubWluKCkuXG4gICAgICovXG4gICAgdC53dCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHQgaW5zdGFuY2VvZiB5dCA/IHQudmVyc2lvbiA6IGcubWluKCk7XG4gICAgfSwgdDtcbn0oKSwgaXQgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKHQpIHtcbiAgICBmdW5jdGlvbiBuKGUsIG4sIHIpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzO1xuICAgICAgICByZXR1cm4gKGkgPSB0LmNhbGwodGhpcykgfHwgdGhpcykua2V5ID0gZSwgaS52YWx1ZSA9IG4sIGkuUnQgPSByLCBpLnR5cGUgPSAwIC8qIFNldCAqLyAsIFxuICAgICAgICBpO1xuICAgIH1cbiAgICByZXR1cm4gZS5fX2V4dGVuZHMobiwgdCksIG4ucHJvdG90eXBlLmF0ID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB0aGlzLkl0KHQpO1xuICAgICAgICAvLyBVbmxpa2UgYXBwbHlUb0xvY2FsVmlldywgaWYgd2UncmUgYXBwbHlpbmcgYSBtdXRhdGlvbiB0byBhIHJlbW90ZVxuICAgICAgICAvLyBkb2N1bWVudCB0aGUgc2VydmVyIGhhcyBhY2NlcHRlZCB0aGUgbXV0YXRpb24gc28gdGhlIHByZWNvbmRpdGlvbiBtdXN0XG4gICAgICAgIC8vIGhhdmUgaGVsZC5cbiAgICAgICAgdmFyIG4gPSBlLnZlcnNpb247XG4gICAgICAgIHJldHVybiBuZXcgeXQodGhpcy5rZXksIG4sIHRoaXMudmFsdWUsIHtcbiAgICAgICAgICAgIGhhc0NvbW1pdHRlZE11dGF0aW9uczogITBcbiAgICAgICAgfSk7XG4gICAgfSwgbi5wcm90b3R5cGUub3QgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIGlmICh0aGlzLkl0KHQpLCAhdGhpcy5SdC5FdCh0KSkgcmV0dXJuIHQ7XG4gICAgICAgIHZhciByID0gcnQud3QodCk7XG4gICAgICAgIHJldHVybiBuZXcgeXQodGhpcy5rZXksIHIsIHRoaXMudmFsdWUsIHtcbiAgICAgICAgICAgIEF0OiAhMFxuICAgICAgICB9KTtcbiAgICB9LCBuLnByb3RvdHlwZS5QdCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSwgbi5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBuICYmIHRoaXMua2V5LmlzRXF1YWwodC5rZXkpICYmIHRoaXMudmFsdWUuaXNFcXVhbCh0LnZhbHVlKSAmJiB0aGlzLlJ0LmlzRXF1YWwodC5SdCk7XG4gICAgfSwgbjtcbn0ocnQpLCBvdCA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24odCkge1xuICAgIGZ1bmN0aW9uIG4oZSwgbiwgciwgaSkge1xuICAgICAgICB2YXIgbyA9IHRoaXM7XG4gICAgICAgIHJldHVybiAobyA9IHQuY2FsbCh0aGlzKSB8fCB0aGlzKS5rZXkgPSBlLCBvLmRhdGEgPSBuLCBvLlZ0ID0gciwgby5SdCA9IGksIG8udHlwZSA9IDEgLyogUGF0Y2ggKi8gLCBcbiAgICAgICAgbztcbiAgICB9XG4gICAgcmV0dXJuIGUuX19leHRlbmRzKG4sIHQpLCBuLnByb3RvdHlwZS5hdCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgaWYgKHRoaXMuSXQodCksICF0aGlzLlJ0LkV0KHQpKSBcbiAgICAgICAgLy8gU2luY2UgdGhlIG11dGF0aW9uIHdhcyBub3QgcmVqZWN0ZWQsIHdlIGtub3cgdGhhdCB0aGUgIHByZWNvbmRpdGlvblxuICAgICAgICAvLyBtYXRjaGVkIG9uIHRoZSBiYWNrZW5kLiBXZSB0aGVyZWZvcmUgbXVzdCBub3QgaGF2ZSB0aGUgZXhwZWN0ZWQgdmVyc2lvblxuICAgICAgICAvLyBvZiB0aGUgZG9jdW1lbnQgaW4gb3VyIGNhY2hlIGFuZCByZXR1cm4gYW4gVW5rbm93bkRvY3VtZW50IHdpdGggdGhlXG4gICAgICAgIC8vIGtub3duIHVwZGF0ZVRpbWUuXG4gICAgICAgIHJldHVybiBuZXcgZ3QodGhpcy5rZXksIGUudmVyc2lvbik7XG4gICAgICAgIHZhciBuID0gdGhpcy5ndCh0KTtcbiAgICAgICAgcmV0dXJuIG5ldyB5dCh0aGlzLmtleSwgZS52ZXJzaW9uLCBuLCB7XG4gICAgICAgICAgICBoYXNDb21taXR0ZWRNdXRhdGlvbnM6ICEwXG4gICAgICAgIH0pO1xuICAgIH0sIG4ucHJvdG90eXBlLm90ID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICBpZiAodGhpcy5JdCh0KSwgIXRoaXMuUnQuRXQodCkpIHJldHVybiB0O1xuICAgICAgICB2YXIgciA9IHJ0Lnd0KHQpLCBpID0gdGhpcy5ndCh0KTtcbiAgICAgICAgcmV0dXJuIG5ldyB5dCh0aGlzLmtleSwgciwgaSwge1xuICAgICAgICAgICAgQXQ6ICEwXG4gICAgICAgIH0pO1xuICAgIH0sIG4ucHJvdG90eXBlLlB0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LCBuLnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdCBpbnN0YW5jZW9mIG4gJiYgdGhpcy5rZXkuaXNFcXVhbCh0LmtleSkgJiYgdGhpcy5WdC5pc0VxdWFsKHQuVnQpICYmIHRoaXMuUnQuaXNFcXVhbCh0LlJ0KTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBQYXRjaGVzIHRoZSBkYXRhIG9mIGRvY3VtZW50IGlmIGF2YWlsYWJsZSBvciBjcmVhdGVzIGEgbmV3IGRvY3VtZW50LiBOb3RlXG4gICAgICogdGhhdCB0aGlzIGRvZXMgbm90IGNoZWNrIHdoZXRoZXIgb3Igbm90IHRoZSBwcmVjb25kaXRpb24gb2YgdGhpcyBwYXRjaFxuICAgICAqIGhvbGRzLlxuICAgICAqL1xuICAgIG4ucHJvdG90eXBlLmd0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgcmV0dXJuIGUgPSB0IGluc3RhbmNlb2YgeXQgPyB0LmRhdGEoKSA6IGh0LmVtcHR5KCksIHRoaXMucHQoZSk7XG4gICAgfSwgbi5wcm90b3R5cGUucHQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcywgbiA9IG5ldyBjdCh0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuVnQuZmllbGRzLmZvckVhY2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGlmICghdC5CKCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgciA9IGUuZGF0YS5maWVsZCh0KTtcbiAgICAgICAgICAgICAgICBudWxsICE9PSByID8gbi5zZXQodCwgcikgOiBuLmRlbGV0ZSh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpLCBuLnl0KCk7XG4gICAgfSwgbjtcbn0ocnQpLCBzdCA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24odCkge1xuICAgIGZ1bmN0aW9uIG4oZSwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXM7XG4gICAgICAgIHJldHVybiAociA9IHQuY2FsbCh0aGlzKSB8fCB0aGlzKS5rZXkgPSBlLCByLmZpZWxkVHJhbnNmb3JtcyA9IG4sIHIudHlwZSA9IDIgLyogVHJhbnNmb3JtICovICwgXG4gICAgICAgIC8vIE5PVEU6IFdlIHNldCBhIHByZWNvbmRpdGlvbiBvZiBleGlzdHM6IHRydWUgYXMgYSBzYWZldHktY2hlY2ssIHNpbmNlIHdlXG4gICAgICAgIC8vIGFsd2F5cyBjb21iaW5lIFRyYW5zZm9ybU11dGF0aW9ucyB3aXRoIGEgU2V0TXV0YXRpb24gb3IgUGF0Y2hNdXRhdGlvbiB3aGljaFxuICAgICAgICAvLyAoaWYgc3VjY2Vzc2Z1bCkgc2hvdWxkIGVuZCB1cCB3aXRoIGFuIGV4aXN0aW5nIGRvY3VtZW50LlxuICAgICAgICByLlJ0ID0gbnQuZXhpc3RzKCEwKSwgcjtcbiAgICB9XG4gICAgcmV0dXJuIGUuX19leHRlbmRzKG4sIHQpLCBuLnByb3RvdHlwZS5hdCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgaWYgKHRoaXMuSXQodCksIG1lKG51bGwgIT0gZS50cmFuc2Zvcm1SZXN1bHRzKSwgIXRoaXMuUnQuRXQodCkpIFxuICAgICAgICAvLyBTaW5jZSB0aGUgbXV0YXRpb24gd2FzIG5vdCByZWplY3RlZCwgd2Uga25vdyB0aGF0IHRoZSAgcHJlY29uZGl0aW9uXG4gICAgICAgIC8vIG1hdGNoZWQgb24gdGhlIGJhY2tlbmQuIFdlIHRoZXJlZm9yZSBtdXN0IG5vdCBoYXZlIHRoZSBleHBlY3RlZCB2ZXJzaW9uXG4gICAgICAgIC8vIG9mIHRoZSBkb2N1bWVudCBpbiBvdXIgY2FjaGUgYW5kIHJldHVybiBhbiBVbmtub3duRG9jdW1lbnQgd2l0aCB0aGVcbiAgICAgICAgLy8ga25vd24gdXBkYXRlVGltZS5cbiAgICAgICAgcmV0dXJuIG5ldyBndCh0aGlzLmtleSwgZS52ZXJzaW9uKTtcbiAgICAgICAgdmFyIG4gPSB0aGlzLmJ0KHQpLCByID0gdGhpcy52dCh0LCBlLnRyYW5zZm9ybVJlc3VsdHMpLCBpID0gZS52ZXJzaW9uLCBvID0gdGhpcy5TdChuLmRhdGEoKSwgcik7XG4gICAgICAgIHJldHVybiBuZXcgeXQodGhpcy5rZXksIGksIG8sIHtcbiAgICAgICAgICAgIGhhc0NvbW1pdHRlZE11dGF0aW9uczogITBcbiAgICAgICAgfSk7XG4gICAgfSwgbi5wcm90b3R5cGUub3QgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIGlmICh0aGlzLkl0KHQpLCAhdGhpcy5SdC5FdCh0KSkgcmV0dXJuIHQ7XG4gICAgICAgIHZhciByID0gdGhpcy5idCh0KSwgaSA9IHRoaXMuRHQobiwgdCwgZSksIG8gPSB0aGlzLlN0KHIuZGF0YSgpLCBpKTtcbiAgICAgICAgcmV0dXJuIG5ldyB5dCh0aGlzLmtleSwgci52ZXJzaW9uLCBvLCB7XG4gICAgICAgICAgICBBdDogITBcbiAgICAgICAgfSk7XG4gICAgfSwgbi5wcm90b3R5cGUuUHQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIGUgPSBudWxsLCBuID0gMCwgciA9IHRoaXMuZmllbGRUcmFuc2Zvcm1zOyBuIDwgci5sZW5ndGg7IG4rKykge1xuICAgICAgICAgICAgdmFyIGkgPSByW25dLCBvID0gdCBpbnN0YW5jZW9mIHl0ID8gdC5maWVsZChpLmZpZWxkKSA6IHZvaWQgMCwgcyA9IGkudHJhbnNmb3JtLnV0KG8gfHwgbnVsbCk7XG4gICAgICAgICAgICBudWxsICE9IHMgJiYgKGUgPSBudWxsID09IGUgPyAobmV3IGN0KS5zZXQoaS5maWVsZCwgcykgOiBlLnNldChpLmZpZWxkLCBzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGUgPyBlLnl0KCkgOiBudWxsO1xuICAgIH0sIG4ucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0IGluc3RhbmNlb2YgbiAmJiB0aGlzLmtleS5pc0VxdWFsKHQua2V5KSAmJiBfZSh0aGlzLmZpZWxkVHJhbnNmb3JtcywgdC5maWVsZFRyYW5zZm9ybXMsIChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gdC5pc0VxdWFsKGUpO1xuICAgICAgICB9KSkgJiYgdGhpcy5SdC5pc0VxdWFsKHQuUnQpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIEFzc2VydHMgdGhhdCB0aGUgZ2l2ZW4gTWF5YmVEb2N1bWVudCBpcyBhY3R1YWxseSBhIERvY3VtZW50IGFuZCB2ZXJpZmllc1xuICAgICAqIHRoYXQgaXQgbWF0Y2hlcyB0aGUga2V5IGZvciB0aGlzIG11dGF0aW9uLiBTaW5jZSB3ZSBvbmx5IHN1cHBvcnRcbiAgICAgKiB0cmFuc2Zvcm1hdGlvbnMgd2l0aCBwcmVjb25kaXRpb24gZXhpc3RzIHRoaXMgbWV0aG9kIGlzIGd1YXJhbnRlZWQgdG8gYmVcbiAgICAgKiBzYWZlLlxuICAgICAqL1xuICAgIG4ucHJvdG90eXBlLmJ0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdDtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbGlzdCBvZiBcInRyYW5zZm9ybSByZXN1bHRzXCIgKGEgdHJhbnNmb3JtIHJlc3VsdCBpcyBhIGZpZWxkIHZhbHVlXG4gICAgICogcmVwcmVzZW50aW5nIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgYSB0cmFuc2Zvcm0pIGZvciB1c2UgYWZ0ZXIgYVxuICAgICAqIFRyYW5zZm9ybU11dGF0aW9uIGhhcyBiZWVuIGFja25vd2xlZGdlZCBieSB0aGUgc2VydmVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIGJhc2VEb2MgVGhlIGRvY3VtZW50IHByaW9yIHRvIGFwcGx5aW5nIHRoaXMgbXV0YXRpb24gYmF0Y2guXG4gICAgICogQHBhcmFtIHNlcnZlclRyYW5zZm9ybVJlc3VsdHMgVGhlIHRyYW5zZm9ybSByZXN1bHRzIHJlY2VpdmVkIGJ5IHRoZSBzZXJ2ZXIuXG4gICAgICogQHJldHVybiBUaGUgdHJhbnNmb3JtIHJlc3VsdHMgbGlzdC5cbiAgICAgKi9cbiAgICBuLnByb3RvdHlwZS52dCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSBbXTtcbiAgICAgICAgbWUodGhpcy5maWVsZFRyYW5zZm9ybXMubGVuZ3RoID09PSBlLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgZS5sZW5ndGg7IHIrKykge1xuICAgICAgICAgICAgdmFyIGkgPSB0aGlzLmZpZWxkVHJhbnNmb3Jtc1tyXSwgbyA9IGkudHJhbnNmb3JtLCBzID0gbnVsbDtcbiAgICAgICAgICAgIHQgaW5zdGFuY2VvZiB5dCAmJiAocyA9IHQuZmllbGQoaS5maWVsZCkpLCBuLnB1c2goby5hdChzLCBlW3JdKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG47XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGxpc3Qgb2YgXCJ0cmFuc2Zvcm0gcmVzdWx0c1wiIChhIHRyYW5zZm9ybSByZXN1bHQgaXMgYSBmaWVsZCB2YWx1ZVxuICAgICAqIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0IG9mIGFwcGx5aW5nIGEgdHJhbnNmb3JtKSBmb3IgdXNlIHdoZW4gYXBwbHlpbmcgYVxuICAgICAqIFRyYW5zZm9ybU11dGF0aW9uIGxvY2FsbHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbG9jYWxXcml0ZVRpbWUgVGhlIGxvY2FsIHRpbWUgb2YgdGhlIHRyYW5zZm9ybSBtdXRhdGlvbiAodXNlZCB0b1xuICAgICAqICAgICBnZW5lcmF0ZSBTZXJ2ZXJUaW1lc3RhbXBWYWx1ZXMpLlxuICAgICAqIEBwYXJhbSBtYXliZURvYyBUaGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgZG9jdW1lbnQgYWZ0ZXIgYXBwbHlpbmcgYWxsXG4gICAgICogICAgIHByZXZpb3VzIG11dGF0aW9ucy5cbiAgICAgKiBAcGFyYW0gYmFzZURvYyBUaGUgZG9jdW1lbnQgcHJpb3IgdG8gYXBwbHlpbmcgdGhpcyBtdXRhdGlvbiBiYXRjaC5cbiAgICAgKiBAcmV0dXJuIFRoZSB0cmFuc2Zvcm0gcmVzdWx0cyBsaXN0LlxuICAgICAqL1xuICAgIG4ucHJvdG90eXBlLkR0ID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICBmb3IgKHZhciByID0gW10sIGkgPSAwLCBvID0gdGhpcy5maWVsZFRyYW5zZm9ybXM7IGkgPCBvLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcyA9IG9baV0sIHUgPSBzLnRyYW5zZm9ybSwgYSA9IG51bGw7XG4gICAgICAgICAgICBlIGluc3RhbmNlb2YgeXQgJiYgKGEgPSBlLmZpZWxkKHMuZmllbGQpKSwgbnVsbCA9PT0gYSAmJiBuIGluc3RhbmNlb2YgeXQgJiYgKFxuICAgICAgICAgICAgLy8gSWYgdGhlIGN1cnJlbnQgZG9jdW1lbnQgZG9lcyBub3QgY29udGFpbiBhIHZhbHVlIGZvciB0aGUgbXV0YXRlZFxuICAgICAgICAgICAgLy8gZmllbGQsIHVzZSB0aGUgdmFsdWUgdGhhdCBleGlzdGVkIGJlZm9yZSBhcHBseWluZyB0aGlzIG11dGF0aW9uXG4gICAgICAgICAgICAvLyBiYXRjaC4gVGhpcyBzb2x2ZXMgYW4gZWRnZSBjYXNlIHdoZXJlIGEgUGF0Y2hNdXRhdGlvbiBjbGVhcnMgdGhlXG4gICAgICAgICAgICAvLyB2YWx1ZXMgaW4gYSBuZXN0ZWQgbWFwIGJlZm9yZSB0aGUgVHJhbnNmb3JtTXV0YXRpb24gaXMgYXBwbGllZC5cbiAgICAgICAgICAgIGEgPSBuLmZpZWxkKHMuZmllbGQpKSwgci5wdXNoKHUub3QoYSwgdCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByO1xuICAgIH0sIG4ucHJvdG90eXBlLlN0ID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBmb3IgKHZhciBuID0gbmV3IGN0KHQpLCByID0gMDsgciA8IHRoaXMuZmllbGRUcmFuc2Zvcm1zLmxlbmd0aDsgcisrKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMuZmllbGRUcmFuc2Zvcm1zW3JdLmZpZWxkO1xuICAgICAgICAgICAgbi5zZXQoaSwgZVtyXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG4ueXQoKTtcbiAgICB9LCBuO1xufShydCksIHV0ID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbih0KSB7XG4gICAgZnVuY3Rpb24gbihlLCBuKSB7XG4gICAgICAgIHZhciByID0gdGhpcztcbiAgICAgICAgcmV0dXJuIChyID0gdC5jYWxsKHRoaXMpIHx8IHRoaXMpLmtleSA9IGUsIHIuUnQgPSBuLCByLnR5cGUgPSAzIC8qIERlbGV0ZSAqLyAsIHI7XG4gICAgfVxuICAgIHJldHVybiBlLl9fZXh0ZW5kcyhuLCB0KSwgbi5wcm90b3R5cGUuYXQgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIC8vIFVubGlrZSBhcHBseVRvTG9jYWxWaWV3LCBpZiB3ZSdyZSBhcHBseWluZyBhIG11dGF0aW9uIHRvIGEgcmVtb3RlXG4gICAgICAgIC8vIGRvY3VtZW50IHRoZSBzZXJ2ZXIgaGFzIGFjY2VwdGVkIHRoZSBtdXRhdGlvbiBzbyB0aGUgcHJlY29uZGl0aW9uIG11c3RcbiAgICAgICAgLy8gaGF2ZSBoZWxkLlxuICAgICAgICByZXR1cm4gdGhpcy5JdCh0KSwgbmV3IHZ0KHRoaXMua2V5LCBlLnZlcnNpb24sIHtcbiAgICAgICAgICAgIGhhc0NvbW1pdHRlZE11dGF0aW9uczogITBcbiAgICAgICAgfSk7XG4gICAgfSwgbi5wcm90b3R5cGUub3QgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkl0KHQpLCB0aGlzLlJ0LkV0KHQpID8gbmV3IHZ0KHRoaXMua2V5LCBnLm1pbigpKSA6IHQ7XG4gICAgfSwgbi5wcm90b3R5cGUuUHQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sIG4ucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0IGluc3RhbmNlb2YgbiAmJiB0aGlzLmtleS5pc0VxdWFsKHQua2V5KSAmJiB0aGlzLlJ0LmlzRXF1YWwodC5SdCk7XG4gICAgfSwgbjtcbn0ocnQpLCBhdCA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24odCkge1xuICAgIGZ1bmN0aW9uIG4oZSwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXM7XG4gICAgICAgIHJldHVybiAociA9IHQuY2FsbCh0aGlzKSB8fCB0aGlzKS5rZXkgPSBlLCByLlJ0ID0gbiwgci50eXBlID0gNCAvKiBWZXJpZnkgKi8gLCByO1xuICAgIH1cbiAgICByZXR1cm4gZS5fX2V4dGVuZHMobiwgdCksIG4ucHJvdG90eXBlLmF0ID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBnZSgpO1xuICAgIH0sIG4ucHJvdG90eXBlLm90ID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICBnZSgpO1xuICAgIH0sIG4ucHJvdG90eXBlLlB0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICBnZSgpO1xuICAgIH0sIG4ucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0IGluc3RhbmNlb2YgbiAmJiB0aGlzLmtleS5pc0VxdWFsKHQua2V5KSAmJiB0aGlzLlJ0LmlzRXF1YWwodC5SdCk7XG4gICAgfSwgbjtcbn0ocnQpLCBodCA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0KSB7XG4gICAgICAgIHRoaXMucHJvdG8gPSB0O1xuICAgIH1cbiAgICByZXR1cm4gdC5lbXB0eSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IHQoe1xuICAgICAgICAgICAgbWFwVmFsdWU6IHt9XG4gICAgICAgIH0pO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHZhbHVlIGF0IHRoZSBnaXZlbiBwYXRoIG9yIG51bGwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGF0aCB0aGUgcGF0aCB0byBzZWFyY2hcbiAgICAgKiBAcmV0dXJuIFRoZSB2YWx1ZSBhdCB0aGUgcGF0aCBvciBpZiB0aGVyZSBpdCBkb2Vzbid0IGV4aXN0LlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmZpZWxkID0gZnVuY3Rpb24odCkge1xuICAgICAgICBpZiAodC5CKCkpIHJldHVybiB0aGlzLnByb3RvO1xuICAgICAgICBmb3IgKHZhciBlID0gdGhpcy5wcm90bywgbiA9IDA7IG4gPCB0Lmxlbmd0aCAtIDE7ICsrbikge1xuICAgICAgICAgICAgaWYgKCFlLm1hcFZhbHVlLmZpZWxkcykgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBpZiAoIUsoZSA9IGUubWFwVmFsdWUuZmllbGRzW3QuZ2V0KG4pXSkpIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoZSA9IChlLm1hcFZhbHVlLmZpZWxkcyB8fCB7fSlbdC5PKCldKSB8fCBudWxsO1xuICAgIH0sIHQucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBWKHRoaXMucHJvdG8sIHQucHJvdG8pO1xuICAgIH0sIHQ7XG59KCksIGN0ID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gYmFzZU9iamVjdCBUaGUgb2JqZWN0IHRvIG11dGF0ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdm9pZCAwID09PSB0ICYmICh0ID0gaHQuZW1wdHkoKSksIHRoaXMuQ3QgPSB0LCBcbiAgICAgICAgLyoqIEEgbWFwIHRoYXQgY29udGFpbnMgdGhlIGFjY3VtdWxhdGVkIGNoYW5nZXMgaW4gdGhpcyBidWlsZGVyLiAqL1xuICAgICAgICB0aGlzLkZ0ID0gbmV3IE1hcDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZmllbGQgdG8gdGhlIHByb3ZpZGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGggVGhlIGZpZWxkIHBhdGggdG8gc2V0LlxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm4gVGhlIGN1cnJlbnQgQnVpbGRlciBpbnN0YW5jZS5cbiAgICAgKi8gICAgcmV0dXJuIHQucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuTnQodCwgZSksIHRoaXM7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgZmllbGQgYXQgdGhlIHNwZWNpZmllZCBwYXRoLiBJZiB0aGVyZSBpcyBubyBmaWVsZCBhdCB0aGVcbiAgICAgKiBzcGVjaWZpZWQgcGF0aCwgbm90aGluZyBpcyBjaGFuZ2VkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGggVGhlIGZpZWxkIHBhdGggdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm4gVGhlIGN1cnJlbnQgQnVpbGRlciBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLk50KHQsIG51bGwpLCB0aGlzO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIEFkZHMgYHZhbHVlYCB0byB0aGUgb3ZlcmxheSBtYXAgYXQgYHBhdGhgLiBDcmVhdGVzIG5lc3RlZCBtYXAgZW50cmllcyBpZlxuICAgICAqIG5lZWRlZC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5OdCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgZm9yICh2YXIgbiA9IHRoaXMuRnQsIHIgPSAwOyByIDwgdC5sZW5ndGggLSAxOyArK3IpIHtcbiAgICAgICAgICAgIHZhciBpID0gdC5nZXQociksIG8gPSBuLmdldChpKTtcbiAgICAgICAgICAgIG8gaW5zdGFuY2VvZiBNYXAgPyBcbiAgICAgICAgICAgIC8vIFJlLXVzZSBhIHByZXZpb3VzbHkgY3JlYXRlZCBtYXBcbiAgICAgICAgICAgIG4gPSBvIDogbyAmJiAxMCAvKiBPYmplY3RWYWx1ZSAqLyA9PT0gTyhvKSA/IChcbiAgICAgICAgICAgIC8vIENvbnZlcnQgdGhlIGV4aXN0aW5nIFByb3RvYnVmIE1hcFZhbHVlIGludG8gYSBtYXBcbiAgICAgICAgICAgIG8gPSBuZXcgTWFwKE9iamVjdC5lbnRyaWVzKG8ubWFwVmFsdWUuZmllbGRzIHx8IHt9KSksIG4uc2V0KGksIG8pLCBuID0gbykgOiAoXG4gICAgICAgICAgICAvLyBDcmVhdGUgYW4gZW1wdHkgbWFwIHRvIHJlcHJlc2VudCB0aGUgY3VycmVudCBuZXN0aW5nIGxldmVsXG4gICAgICAgICAgICBvID0gbmV3IE1hcCwgbi5zZXQoaSwgbyksIG4gPSBvKTtcbiAgICAgICAgfVxuICAgICAgICBuLnNldCh0Lk8oKSwgZSk7XG4gICAgfSwgXG4gICAgLyoqIFJldHVybnMgYW4gT2JqZWN0VmFsdWUgd2l0aCBhbGwgbXV0YXRpb25zIGFwcGxpZWQuICovIHQucHJvdG90eXBlLnl0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy4kdChiLkcsIHRoaXMuRnQpO1xuICAgICAgICByZXR1cm4gbnVsbCAhPSB0ID8gbmV3IGh0KHQpIDogdGhpcy5DdDtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIGFueSBvdmVybGF5cyBmcm9tIGBjdXJyZW50T3ZlcmxheXNgIHRoYXQgZXhpc3QgYXQgYGN1cnJlbnRQYXRoYFxuICAgICAqIGFuZCByZXR1cm5zIHRoZSBtZXJnZWQgZGF0YSBhdCBgY3VycmVudFBhdGhgIChvciBudWxsIGlmIHRoZXJlIHdlcmUgbm9cbiAgICAgKiBjaGFuZ2VzKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjdXJyZW50UGF0aCBUaGUgcGF0aCBhdCB0aGUgY3VycmVudCBuZXN0aW5nIGxldmVsLiBDYW4gYmUgc2V0IHRvXG4gICAgICogRmllbGRWYWx1ZS5FTVBUWV9QQVRIIHRvIHJlcHJlc2VudCB0aGUgcm9vdC5cbiAgICAgKiBAcGFyYW0gY3VycmVudE92ZXJsYXlzIFRoZSBvdmVybGF5cyBhdCB0aGUgY3VycmVudCBuZXN0aW5nIGxldmVsIGluIHRoZVxuICAgICAqIHNhbWUgZm9ybWF0IGFzIGBvdmVybGF5TWFwYC5cbiAgICAgKiBAcmV0dXJuIFRoZSBtZXJnZWQgZGF0YSBhdCBgY3VycmVudFBhdGhgIG9yIG51bGwgaWYgbm8gbW9kaWZpY2F0aW9uc1xuICAgICAqIHdlcmUgYXBwbGllZC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS4kdCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLCByID0gITEsIGkgPSB0aGlzLkN0LmZpZWxkKHQpLCBvID0gSyhpKSA/IC8vIElmIHRoZXJlIGlzIGFscmVhZHkgZGF0YSBhdCB0aGUgY3VycmVudCBwYXRoLCBiYXNlIG91clxuICAgICAgICBPYmplY3QuYXNzaWduKHt9LCBpLm1hcFZhbHVlLmZpZWxkcykgOiB7fTtcbiAgICAgICAgcmV0dXJuIGUuZm9yRWFjaCgoZnVuY3Rpb24oZSwgaSkge1xuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IG4uJHQodC5jaGlsZChpKSwgZSk7XG4gICAgICAgICAgICAgICAgbnVsbCAhPSBzICYmIChvW2ldID0gcywgciA9ICEwKTtcbiAgICAgICAgICAgIH0gZWxzZSBudWxsICE9PSBlID8gKG9baV0gPSBlLCByID0gITApIDogby5oYXNPd25Qcm9wZXJ0eShpKSAmJiAoZGVsZXRlIG9baV0sIHIgPSAhMCk7XG4gICAgICAgIH0pKSwgciA/IHtcbiAgICAgICAgICAgIG1hcFZhbHVlOiB7XG4gICAgICAgICAgICAgICAgZmllbGRzOiBvXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gOiBudWxsO1xuICAgIH0sIHQ7XG59KCk7XG5cbi8qKiBBIGZpZWxkIHBhdGggYW5kIHRoZSBUcmFuc2Zvcm1PcGVyYXRpb24gdG8gcGVyZm9ybSB1cG9uIGl0LiAqL1xuLyoqXG4gKiBSZXR1cm5zIGEgRmllbGRNYXNrIGJ1aWx0IGZyb20gYWxsIGZpZWxkcyBpbiBhIE1hcFZhbHVlLlxuICovXG5mdW5jdGlvbiBmdCh0KSB7XG4gICAgdmFyIGUgPSBbXTtcbiAgICByZXR1cm4gSSh0LmZpZWxkcyB8fCB7fSwgKGZ1bmN0aW9uKHQsIG4pIHtcbiAgICAgICAgdmFyIHIgPSBuZXcgYihbIHQgXSk7XG4gICAgICAgIGlmIChLKG4pKSB7XG4gICAgICAgICAgICB2YXIgaSA9IGZ0KG4ubWFwVmFsdWUpLmZpZWxkcztcbiAgICAgICAgICAgIGlmICgwID09PSBpLmxlbmd0aCkgXG4gICAgICAgICAgICAvLyBQcmVzZXJ2ZSB0aGUgZW1wdHkgbWFwIGJ5IGFkZGluZyBpdCB0byB0aGUgRmllbGRNYXNrLlxuICAgICAgICAgICAgZS5wdXNoKHIpOyBlbHNlIFxuICAgICAgICAgICAgLy8gRm9yIG5lc3RlZCBhbmQgbm9uLWVtcHR5IE9iamVjdFZhbHVlcywgYWRkIHRoZSBGaWVsZFBhdGggb2YgdGhlXG4gICAgICAgICAgICAvLyBsZWFmIG5vZGVzLlxuICAgICAgICAgICAgZm9yICh2YXIgbyA9IDAsIHMgPSBpOyBvIDwgcy5sZW5ndGg7IG8rKykge1xuICAgICAgICAgICAgICAgIHZhciB1ID0gc1tvXTtcbiAgICAgICAgICAgICAgICBlLnB1c2goci5jaGlsZCh1KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBcbiAgICAgICAgLy8gRm9yIG5lc3RlZCBhbmQgbm9uLWVtcHR5IE9iamVjdFZhbHVlcywgYWRkIHRoZSBGaWVsZFBhdGggb2YgdGhlIGxlYWZcbiAgICAgICAgLy8gbm9kZXMuXG4gICAgICAgIGUucHVzaChyKTtcbiAgICB9KSksIG5ldyBaKGUpXG4gICAgLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbiAgICAvKipcbiAqIFRoZSByZXN1bHQgb2YgYSBsb29rdXAgZm9yIGEgZ2l2ZW4gcGF0aCBtYXkgYmUgYW4gZXhpc3RpbmcgZG9jdW1lbnQgb3IgYVxuICogbWFya2VyIHRoYXQgdGhpcyBkb2N1bWVudCBkb2VzIG5vdCBleGlzdCBhdCBhIGdpdmVuIHZlcnNpb24uXG4gKi87XG59XG5cbnZhciBsdCwgcHQsIGR0ID0gZnVuY3Rpb24odCwgZSkge1xuICAgIHRoaXMua2V5ID0gdCwgdGhpcy52ZXJzaW9uID0gZTtcbn0sIHl0ID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbih0KSB7XG4gICAgZnVuY3Rpb24gbihlLCBuLCByLCBpKSB7XG4gICAgICAgIHZhciBvID0gdGhpcztcbiAgICAgICAgcmV0dXJuIChvID0gdC5jYWxsKHRoaXMsIGUsIG4pIHx8IHRoaXMpLmt0ID0gciwgby5BdCA9ICEhaS5BdCwgby5oYXNDb21taXR0ZWRNdXRhdGlvbnMgPSAhIWkuaGFzQ29tbWl0dGVkTXV0YXRpb25zLCBcbiAgICAgICAgbztcbiAgICB9XG4gICAgcmV0dXJuIGUuX19leHRlbmRzKG4sIHQpLCBuLnByb3RvdHlwZS5maWVsZCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMua3QuZmllbGQodCk7XG4gICAgfSwgbi5wcm90b3R5cGUuZGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5rdDtcbiAgICB9LCBuLnByb3RvdHlwZS5MdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5rdC5wcm90bztcbiAgICB9LCBuLnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdCBpbnN0YW5jZW9mIG4gJiYgdGhpcy5rZXkuaXNFcXVhbCh0LmtleSkgJiYgdGhpcy52ZXJzaW9uLmlzRXF1YWwodC52ZXJzaW9uKSAmJiB0aGlzLkF0ID09PSB0LkF0ICYmIHRoaXMuaGFzQ29tbWl0dGVkTXV0YXRpb25zID09PSB0Lmhhc0NvbW1pdHRlZE11dGF0aW9ucyAmJiB0aGlzLmt0LmlzRXF1YWwodC5rdCk7XG4gICAgfSwgbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFwiRG9jdW1lbnQoXCIgKyB0aGlzLmtleSArIFwiLCBcIiArIHRoaXMudmVyc2lvbiArIFwiLCBcIiArIHRoaXMua3QudG9TdHJpbmcoKSArIFwiLCB7aGFzTG9jYWxNdXRhdGlvbnM6IFwiICsgdGhpcy5BdCArIFwifSksIHtoYXNDb21taXR0ZWRNdXRhdGlvbnM6IFwiICsgdGhpcy5oYXNDb21taXR0ZWRNdXRhdGlvbnMgKyBcIn0pXCI7XG4gICAgfSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KG4ucHJvdG90eXBlLCBcImhhc1BlbmRpbmdXcml0ZXNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuQXQgfHwgdGhpcy5oYXNDb21taXR0ZWRNdXRhdGlvbnM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIG47XG59KGR0KSwgdnQgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKHQpIHtcbiAgICBmdW5jdGlvbiBuKGUsIG4sIHIpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzO1xuICAgICAgICByZXR1cm4gKGkgPSB0LmNhbGwodGhpcywgZSwgbikgfHwgdGhpcykuaGFzQ29tbWl0dGVkTXV0YXRpb25zID0gISghciB8fCAhci5oYXNDb21taXR0ZWRNdXRhdGlvbnMpLCBcbiAgICAgICAgaTtcbiAgICB9XG4gICAgcmV0dXJuIGUuX19leHRlbmRzKG4sIHQpLCBuLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gXCJOb0RvY3VtZW50KFwiICsgdGhpcy5rZXkgKyBcIiwgXCIgKyB0aGlzLnZlcnNpb24gKyBcIilcIjtcbiAgICB9LCBPYmplY3QuZGVmaW5lUHJvcGVydHkobi5wcm90b3R5cGUsIFwiaGFzUGVuZGluZ1dyaXRlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oYXNDb21taXR0ZWRNdXRhdGlvbnM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIG4ucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0IGluc3RhbmNlb2YgbiAmJiB0Lmhhc0NvbW1pdHRlZE11dGF0aW9ucyA9PT0gdGhpcy5oYXNDb21taXR0ZWRNdXRhdGlvbnMgJiYgdC52ZXJzaW9uLmlzRXF1YWwodGhpcy52ZXJzaW9uKSAmJiB0LmtleS5pc0VxdWFsKHRoaXMua2V5KTtcbiAgICB9LCBuO1xufShkdCksIGd0ID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbih0KSB7XG4gICAgZnVuY3Rpb24gbigpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IHQgJiYgdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBlLl9fZXh0ZW5kcyhuLCB0KSwgbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFwiVW5rbm93bkRvY3VtZW50KFwiICsgdGhpcy5rZXkgKyBcIiwgXCIgKyB0aGlzLnZlcnNpb24gKyBcIilcIjtcbiAgICB9LCBPYmplY3QuZGVmaW5lUHJvcGVydHkobi5wcm90b3R5cGUsIFwiaGFzUGVuZGluZ1dyaXRlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gITA7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIG4ucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0IGluc3RhbmNlb2YgbiAmJiB0LnZlcnNpb24uaXNFcXVhbCh0aGlzLnZlcnNpb24pICYmIHQua2V5LmlzRXF1YWwodGhpcy5rZXkpO1xuICAgIH0sIG47XG59KGR0KSwgbXQgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGEgVGFyZ2V0IHdpdGggYSBwYXRoIGFuZCBvcHRpb25hbCBhZGRpdGlvbmFsIHF1ZXJ5IGNvbnN0cmFpbnRzLlxuICAgICAqIFBhdGggbXVzdCBjdXJyZW50bHkgYmUgZW1wdHkgaWYgdGhpcyBpcyBhIGNvbGxlY3Rpb24gZ3JvdXAgcXVlcnkuXG4gICAgICpcbiAgICAgKiBOT1RFOiB5b3Ugc2hvdWxkIGFsd2F5cyBjb25zdHJ1Y3QgYFRhcmdldGAgZnJvbSBgUXVlcnkudG9UYXJnZXRgIGluc3RlYWQgb2ZcbiAgICAgKiB1c2luZyB0aGlzIGNvbnN0cnVjdG9yLCBiZWNhdXNlIGBRdWVyeWAgcHJvdmlkZXMgYW4gaW1wbGljaXQgYG9yZGVyQnlgXG4gICAgICogcHJvcGVydHkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdCh0LCBlLCBuLCByLCBpLCBvLCBzKSB7XG4gICAgICAgIHZvaWQgMCA9PT0gZSAmJiAoZSA9IG51bGwpLCB2b2lkIDAgPT09IG4gJiYgKG4gPSBbXSksIHZvaWQgMCA9PT0gciAmJiAociA9IFtdKSwgXG4gICAgICAgIHZvaWQgMCA9PT0gaSAmJiAoaSA9IG51bGwpLCB2b2lkIDAgPT09IG8gJiYgKG8gPSBudWxsKSwgdm9pZCAwID09PSBzICYmIChzID0gbnVsbCksIFxuICAgICAgICB0aGlzLnBhdGggPSB0LCB0aGlzLmNvbGxlY3Rpb25Hcm91cCA9IGUsIHRoaXMub3JkZXJCeSA9IG4sIHRoaXMuZmlsdGVycyA9IHIsIHRoaXMubGltaXQgPSBpLCBcbiAgICAgICAgdGhpcy5zdGFydEF0ID0gbywgdGhpcy5lbmRBdCA9IHMsIHRoaXMuTXQgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuY2Fub25pY2FsSWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKG51bGwgPT09IHRoaXMuTXQpIHtcbiAgICAgICAgICAgIHZhciB0ID0gdGhpcy5wYXRoLmooKTtcbiAgICAgICAgICAgIG51bGwgIT09IHRoaXMuY29sbGVjdGlvbkdyb3VwICYmICh0ICs9IFwifGNnOlwiICsgdGhpcy5jb2xsZWN0aW9uR3JvdXApLCB0ICs9IFwifGY6XCIsIFxuICAgICAgICAgICAgdCArPSB0aGlzLmZpbHRlcnMubWFwKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQuY2Fub25pY2FsSWQoKTtcbiAgICAgICAgICAgIH0pKS5qb2luKFwiLFwiKSwgdCArPSBcInxvYjpcIiwgdCArPSB0aGlzLm9yZGVyQnkubWFwKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQuY2Fub25pY2FsSWQoKTtcbiAgICAgICAgICAgIH0pKS5qb2luKFwiLFwiKSwgayh0aGlzLmxpbWl0KSB8fCAodCArPSBcInxsOlwiLCB0ICs9IHRoaXMubGltaXQpLCB0aGlzLnN0YXJ0QXQgJiYgKHQgKz0gXCJ8bGI6XCIsIFxuICAgICAgICAgICAgdCArPSB0aGlzLnN0YXJ0QXQuY2Fub25pY2FsSWQoKSksIHRoaXMuZW5kQXQgJiYgKHQgKz0gXCJ8dWI6XCIsIHQgKz0gdGhpcy5lbmRBdC5jYW5vbmljYWxJZCgpKSwgXG4gICAgICAgICAgICB0aGlzLk10ID0gdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5NdDtcbiAgICB9LCB0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXMucGF0aC5qKCk7XG4gICAgICAgIHJldHVybiBudWxsICE9PSB0aGlzLmNvbGxlY3Rpb25Hcm91cCAmJiAodCArPSBcIiBjb2xsZWN0aW9uR3JvdXA9XCIgKyB0aGlzLmNvbGxlY3Rpb25Hcm91cCksIFxuICAgICAgICB0aGlzLmZpbHRlcnMubGVuZ3RoID4gMCAmJiAodCArPSBcIiwgZmlsdGVyczogW1wiICsgdGhpcy5maWx0ZXJzLmpvaW4oXCIsIFwiKSArIFwiXVwiKSwgXG4gICAgICAgIGsodGhpcy5saW1pdCkgfHwgKHQgKz0gXCIsIGxpbWl0OiBcIiArIHRoaXMubGltaXQpLCB0aGlzLm9yZGVyQnkubGVuZ3RoID4gMCAmJiAodCArPSBcIiwgb3JkZXJCeTogW1wiICsgdGhpcy5vcmRlckJ5LmpvaW4oXCIsIFwiKSArIFwiXVwiKSwgXG4gICAgICAgIHRoaXMuc3RhcnRBdCAmJiAodCArPSBcIiwgc3RhcnRBdDogXCIgKyB0aGlzLnN0YXJ0QXQuY2Fub25pY2FsSWQoKSksIHRoaXMuZW5kQXQgJiYgKHQgKz0gXCIsIGVuZEF0OiBcIiArIHRoaXMuZW5kQXQuY2Fub25pY2FsSWQoKSksIFxuICAgICAgICBcIlRhcmdldChcIiArIHQgKyBcIilcIjtcbiAgICB9LCB0LnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24odCkge1xuICAgICAgICBpZiAodGhpcy5saW1pdCAhPT0gdC5saW1pdCkgcmV0dXJuICExO1xuICAgICAgICBpZiAodGhpcy5vcmRlckJ5Lmxlbmd0aCAhPT0gdC5vcmRlckJ5Lmxlbmd0aCkgcmV0dXJuICExO1xuICAgICAgICBmb3IgKHZhciBlID0gMDsgZSA8IHRoaXMub3JkZXJCeS5sZW5ndGg7IGUrKykgaWYgKCF0aGlzLm9yZGVyQnlbZV0uaXNFcXVhbCh0Lm9yZGVyQnlbZV0pKSByZXR1cm4gITE7XG4gICAgICAgIGlmICh0aGlzLmZpbHRlcnMubGVuZ3RoICE9PSB0LmZpbHRlcnMubGVuZ3RoKSByZXR1cm4gITE7XG4gICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgdGhpcy5maWx0ZXJzLmxlbmd0aDsgbisrKSBpZiAoIXRoaXMuZmlsdGVyc1tuXS5pc0VxdWFsKHQuZmlsdGVyc1tuXSkpIHJldHVybiAhMTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sbGVjdGlvbkdyb3VwID09PSB0LmNvbGxlY3Rpb25Hcm91cCAmJiAhIXRoaXMucGF0aC5pc0VxdWFsKHQucGF0aCkgJiYgISEobnVsbCAhPT0gdGhpcy5zdGFydEF0ID8gdGhpcy5zdGFydEF0LmlzRXF1YWwodC5zdGFydEF0KSA6IG51bGwgPT09IHQuc3RhcnRBdCkgJiYgKG51bGwgIT09IHRoaXMuZW5kQXQgPyB0aGlzLmVuZEF0LmlzRXF1YWwodC5lbmRBdCkgOiBudWxsID09PSB0LmVuZEF0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5PdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gXy5ldCh0aGlzLnBhdGgpICYmIG51bGwgPT09IHRoaXMuY29sbGVjdGlvbkdyb3VwICYmIDAgPT09IHRoaXMuZmlsdGVycy5sZW5ndGg7XG4gICAgfSwgdDtcbn0oKSwgd3QgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGEgUXVlcnkgd2l0aCBhIHBhdGggYW5kIG9wdGlvbmFsIGFkZGl0aW9uYWwgcXVlcnkgY29uc3RyYWludHMuXG4gICAgICogUGF0aCBtdXN0IGN1cnJlbnRseSBiZSBlbXB0eSBpZiB0aGlzIGlzIGEgY29sbGVjdGlvbiBncm91cCBxdWVyeS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0KHQsIGUsIG4sIHIsIGksIG8gLyogRmlyc3QgKi8gLCBzLCB1KSB7XG4gICAgICAgIHZvaWQgMCA9PT0gZSAmJiAoZSA9IG51bGwpLCB2b2lkIDAgPT09IG4gJiYgKG4gPSBbXSksIHZvaWQgMCA9PT0gciAmJiAociA9IFtdKSwgXG4gICAgICAgIHZvaWQgMCA9PT0gaSAmJiAoaSA9IG51bGwpLCB2b2lkIDAgPT09IG8gJiYgKG8gPSBcIkZcIiksIHZvaWQgMCA9PT0gcyAmJiAocyA9IG51bGwpLCBcbiAgICAgICAgdm9pZCAwID09PSB1ICYmICh1ID0gbnVsbCksIHRoaXMucGF0aCA9IHQsIHRoaXMuY29sbGVjdGlvbkdyb3VwID0gZSwgdGhpcy54dCA9IG4sIFxuICAgICAgICB0aGlzLmZpbHRlcnMgPSByLCB0aGlzLmxpbWl0ID0gaSwgdGhpcy5CdCA9IG8sIHRoaXMuc3RhcnRBdCA9IHMsIHRoaXMuZW5kQXQgPSB1LCBcbiAgICAgICAgdGhpcy5xdCA9IG51bGwsIFxuICAgICAgICAvLyBUaGUgY29ycmVzcG9uZGluZyBgVGFyZ2V0YCBvZiB0aGlzIGBRdWVyeWAgaW5zdGFuY2UuXG4gICAgICAgIHRoaXMuVXQgPSBudWxsLCB0aGlzLnN0YXJ0QXQgJiYgdGhpcy5RdCh0aGlzLnN0YXJ0QXQpLCB0aGlzLmVuZEF0ICYmIHRoaXMuUXQodGhpcy5lbmRBdCk7XG4gICAgfVxuICAgIHJldHVybiB0Lld0ID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gbmV3IHQoZSk7XG4gICAgfSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcIm9yZGVyQnlcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKG51bGwgPT09IHRoaXMucXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnF0ID0gW107XG4gICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLmp0KCksIGUgPSB0aGlzLkt0KCk7XG4gICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IHQgJiYgbnVsbCA9PT0gZSkgXG4gICAgICAgICAgICAgICAgLy8gSW4gb3JkZXIgdG8gaW1wbGljaXRseSBhZGQga2V5IG9yZGVyaW5nLCB3ZSBtdXN0IGFsc28gYWRkIHRoZVxuICAgICAgICAgICAgICAgIC8vIGluZXF1YWxpdHkgZmlsdGVyIGZpZWxkIGZvciBpdCB0byBiZSBhIHZhbGlkIHF1ZXJ5LlxuICAgICAgICAgICAgICAgIC8vIE5vdGUgdGhhdCB0aGUgZGVmYXVsdCBpbmVxdWFsaXR5IGZpZWxkIGFuZCBrZXkgb3JkZXJpbmcgaXMgYXNjZW5kaW5nLlxuICAgICAgICAgICAgICAgIHQuWSgpIHx8IHRoaXMucXQucHVzaChuZXcga3QodCkpLCB0aGlzLnF0LnB1c2gobmV3IGt0KGIuSigpLCBcImFzY1wiIC8qIEFTQ0VORElORyAqLykpOyBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9ICExLCByID0gMCwgaSA9IHRoaXMueHQ7IHIgPCBpLmxlbmd0aDsgcisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IGlbcl07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnF0LnB1c2gobyksIG8uZmllbGQuWSgpICYmIChuID0gITApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIG9yZGVyIG9mIHRoZSBpbXBsaWNpdCBrZXkgb3JkZXJpbmcgYWx3YXlzIG1hdGNoZXMgdGhlIGxhc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV4cGxpY2l0IG9yZGVyIGJ5XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IHRoaXMueHQubGVuZ3RoID4gMCA/IHRoaXMueHRbdGhpcy54dC5sZW5ndGggLSAxXS5kaXIgOiBcImFzY1wiIC8qIEFTQ0VORElORyAqLztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucXQucHVzaChuZXcga3QoYi5KKCksIHMpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnF0O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCB0LnByb3RvdHlwZS5HdCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLmZpbHRlcnMuY29uY2F0KFsgZSBdKTtcbiAgICAgICAgcmV0dXJuIG5ldyB0KHRoaXMucGF0aCwgdGhpcy5jb2xsZWN0aW9uR3JvdXAsIHRoaXMueHQuc2xpY2UoKSwgbiwgdGhpcy5saW1pdCwgdGhpcy5CdCwgdGhpcy5zdGFydEF0LCB0aGlzLmVuZEF0KTtcbiAgICB9LCB0LnByb3RvdHlwZS56dCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgLy8gVE9ETyhkaW1vbmQpOiB2YWxpZGF0ZSB0aGF0IG9yZGVyQnkgZG9lcyBub3QgbGlzdCB0aGUgc2FtZSBrZXkgdHdpY2UuXG4gICAgICAgIHZhciBuID0gdGhpcy54dC5jb25jYXQoWyBlIF0pO1xuICAgICAgICByZXR1cm4gbmV3IHQodGhpcy5wYXRoLCB0aGlzLmNvbGxlY3Rpb25Hcm91cCwgbiwgdGhpcy5maWx0ZXJzLnNsaWNlKCksIHRoaXMubGltaXQsIHRoaXMuQnQsIHRoaXMuc3RhcnRBdCwgdGhpcy5lbmRBdCk7XG4gICAgfSwgdC5wcm90b3R5cGUuSHQgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBuZXcgdCh0aGlzLnBhdGgsIHRoaXMuY29sbGVjdGlvbkdyb3VwLCB0aGlzLnh0LnNsaWNlKCksIHRoaXMuZmlsdGVycy5zbGljZSgpLCBlLCBcIkZcIiAvKiBGaXJzdCAqLyAsIHRoaXMuc3RhcnRBdCwgdGhpcy5lbmRBdCk7XG4gICAgfSwgdC5wcm90b3R5cGUuWXQgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBuZXcgdCh0aGlzLnBhdGgsIHRoaXMuY29sbGVjdGlvbkdyb3VwLCB0aGlzLnh0LnNsaWNlKCksIHRoaXMuZmlsdGVycy5zbGljZSgpLCBlLCBcIkxcIiAvKiBMYXN0ICovICwgdGhpcy5zdGFydEF0LCB0aGlzLmVuZEF0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5KdCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0KHRoaXMucGF0aCwgdGhpcy5jb2xsZWN0aW9uR3JvdXAsIHRoaXMueHQuc2xpY2UoKSwgdGhpcy5maWx0ZXJzLnNsaWNlKCksIHRoaXMubGltaXQsIHRoaXMuQnQsIGUsIHRoaXMuZW5kQXQpO1xuICAgIH0sIHQucHJvdG90eXBlLlh0ID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gbmV3IHQodGhpcy5wYXRoLCB0aGlzLmNvbGxlY3Rpb25Hcm91cCwgdGhpcy54dC5zbGljZSgpLCB0aGlzLmZpbHRlcnMuc2xpY2UoKSwgdGhpcy5saW1pdCwgdGhpcy5CdCwgdGhpcy5zdGFydEF0LCBlKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBIZWxwZXIgdG8gY29udmVydCBhIGNvbGxlY3Rpb24gZ3JvdXAgcXVlcnkgaW50byBhIGNvbGxlY3Rpb24gcXVlcnkgYXQgYVxuICAgICAqIHNwZWNpZmljIHBhdGguIFRoaXMgaXMgdXNlZCB3aGVuIGV4ZWN1dGluZyBjb2xsZWN0aW9uIGdyb3VwIHF1ZXJpZXMsIHNpbmNlXG4gICAgICogd2UgaGF2ZSB0byBzcGxpdCB0aGUgcXVlcnkgaW50byBhIHNldCBvZiBjb2xsZWN0aW9uIHF1ZXJpZXMgYXQgbXVsdGlwbGVcbiAgICAgKiBwYXRocy5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5adCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0KGUsIFxuICAgICAgICAvKmNvbGxlY3Rpb25Hcm91cD0qLyBudWxsLCB0aGlzLnh0LnNsaWNlKCksIHRoaXMuZmlsdGVycy5zbGljZSgpLCB0aGlzLmxpbWl0LCB0aGlzLkJ0LCB0aGlzLnN0YXJ0QXQsIHRoaXMuZW5kQXQpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIHF1ZXJ5IGRvZXMgbm90IHNwZWNpZnkgYW55IHF1ZXJ5IGNvbnN0cmFpbnRzIHRoYXRcbiAgICAgKiBjb3VsZCByZW1vdmUgcmVzdWx0cy5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS50ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gMCA9PT0gdGhpcy5maWx0ZXJzLmxlbmd0aCAmJiBudWxsID09PSB0aGlzLmxpbWl0ICYmIG51bGwgPT0gdGhpcy5zdGFydEF0ICYmIG51bGwgPT0gdGhpcy5lbmRBdCAmJiAoMCA9PT0gdGhpcy54dC5sZW5ndGggfHwgMSA9PT0gdGhpcy54dC5sZW5ndGggJiYgdGhpcy54dFswXS5maWVsZC5ZKCkpO1xuICAgIH0sIFxuICAgIC8vIFRPRE8oYi8yOTE4MzE2NSk6IFRoaXMgaXMgdXNlZCB0byBnZXQgYSB1bmlxdWUgc3RyaW5nIGZyb20gYSBxdWVyeSB0bywgZm9yXG4gICAgLy8gZXhhbXBsZSwgdXNlIGFzIGEgZGljdGlvbmFyeSBrZXksIGJ1dCB0aGUgaW1wbGVtZW50YXRpb24gaXMgc3ViamVjdCB0b1xuICAgIC8vIGNvbGxpc2lvbnMuIE1ha2UgaXQgY29sbGlzaW9uLWZyZWUuXG4gICAgdC5wcm90b3R5cGUuY2Fub25pY2FsSWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWUoKS5jYW5vbmljYWxJZCgpICsgXCJ8bHQ6XCIgKyB0aGlzLkJ0O1xuICAgIH0sIHQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBcIlF1ZXJ5KHRhcmdldD1cIiArIHRoaXMuZWUoKS50b1N0cmluZygpICsgXCI7IGxpbWl0VHlwZT1cIiArIHRoaXMuQnQgKyBcIilcIjtcbiAgICB9LCB0LnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lZSgpLmlzRXF1YWwodC5lZSgpKSAmJiB0aGlzLkJ0ID09PSB0LkJ0O1xuICAgIH0sIHQucHJvdG90eXBlLnNlID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBmb3IgKHZhciBuID0gITEsIHIgPSAwLCBpID0gdGhpcy5vcmRlckJ5OyByIDwgaS5sZW5ndGg7IHIrKykge1xuICAgICAgICAgICAgdmFyIG8gPSBpW3JdLCBzID0gby5jb21wYXJlKHQsIGUpO1xuICAgICAgICAgICAgaWYgKDAgIT09IHMpIHJldHVybiBzO1xuICAgICAgICAgICAgbiA9IG4gfHwgby5maWVsZC5ZKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSwgdC5wcm90b3R5cGUubWF0Y2hlcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWUodCkgJiYgdGhpcy5uZSh0KSAmJiB0aGlzLnJlKHQpICYmIHRoaXMuaGUodCk7XG4gICAgfSwgdC5wcm90b3R5cGUub2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICFrKHRoaXMubGltaXQpICYmIFwiRlwiIC8qIEZpcnN0ICovID09PSB0aGlzLkJ0O1xuICAgIH0sIHQucHJvdG90eXBlLmFlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAhayh0aGlzLmxpbWl0KSAmJiBcIkxcIiAvKiBMYXN0ICovID09PSB0aGlzLkJ0O1xuICAgIH0sIHQucHJvdG90eXBlLkt0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnh0Lmxlbmd0aCA+IDAgPyB0aGlzLnh0WzBdLmZpZWxkIDogbnVsbDtcbiAgICB9LCB0LnByb3RvdHlwZS5qdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IgKHZhciB0ID0gMCwgZSA9IHRoaXMuZmlsdGVyczsgdCA8IGUubGVuZ3RoOyB0KyspIHtcbiAgICAgICAgICAgIHZhciBuID0gZVt0XTtcbiAgICAgICAgICAgIGlmIChuIGluc3RhbmNlb2YgRXQgJiYgbi51ZSgpKSByZXR1cm4gbi5maWVsZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LCBcbiAgICAvLyBDaGVja3MgaWYgYW55IG9mIHRoZSBwcm92aWRlZCBPcGVyYXRvcnMgYXJlIGluY2x1ZGVkIGluIHRoZSBxdWVyeSBhbmRcbiAgICAvLyByZXR1cm5zIHRoZSBmaXJzdCBvbmUgdGhhdCBpcywgb3IgbnVsbCBpZiBub25lIGFyZS5cbiAgICB0LnByb3RvdHlwZS5jZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgZSA9IDAsIG4gPSB0aGlzLmZpbHRlcnM7IGUgPCBuLmxlbmd0aDsgZSsrKSB7XG4gICAgICAgICAgICB2YXIgciA9IG5bZV07XG4gICAgICAgICAgICBpZiAociBpbnN0YW5jZW9mIEV0ICYmIHQuaW5kZXhPZihyLm9wKSA+PSAwKSByZXR1cm4gci5vcDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LCB0LnByb3RvdHlwZS5PdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lZSgpLk90KCk7XG4gICAgfSwgdC5wcm90b3R5cGUuX2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IHRoaXMuY29sbGVjdGlvbkdyb3VwO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoaXMgYFF1ZXJ5YCBpbnN0YW5jZSB0byBpdCdzIGNvcnJlc3BvbmRpbmcgYFRhcmdldGBcbiAgICAgKiByZXByZXNlbnRhdGlvbi5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5lZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIXRoaXMuVXQpIGlmIChcIkZcIiAvKiBGaXJzdCAqLyA9PT0gdGhpcy5CdCkgdGhpcy5VdCA9IG5ldyBtdCh0aGlzLnBhdGgsIHRoaXMuY29sbGVjdGlvbkdyb3VwLCB0aGlzLm9yZGVyQnksIHRoaXMuZmlsdGVycywgdGhpcy5saW1pdCwgdGhpcy5zdGFydEF0LCB0aGlzLmVuZEF0KTsgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgLy8gRmxpcCB0aGUgb3JkZXJCeSBkaXJlY3Rpb25zIHNpbmNlIHdlIHdhbnQgdGhlIGxhc3QgcmVzdWx0c1xuICAgICAgICAgICAgdmFyIHQgPSBbXSwgZSA9IDAsIG4gPSB0aGlzLm9yZGVyQnk7IGUgPCBuLmxlbmd0aDsgZSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHIgPSBuW2VdLCBpID0gXCJkZXNjXCIgLyogREVTQ0VORElORyAqLyA9PT0gci5kaXIgPyBcImFzY1wiIC8qIEFTQ0VORElORyAqLyA6IFwiZGVzY1wiIC8qIERFU0NFTkRJTkcgKi87XG4gICAgICAgICAgICAgICAgdC5wdXNoKG5ldyBrdChyLmZpZWxkLCBpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIHN3YXAgdGhlIGN1cnNvcnMgdG8gbWF0Y2ggdGhlIG5vdy1mbGlwcGVkIHF1ZXJ5IG9yZGVyaW5nLlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSB0aGlzLmVuZEF0ID8gbmV3IEF0KHRoaXMuZW5kQXQucG9zaXRpb24sICF0aGlzLmVuZEF0LmJlZm9yZSkgOiBudWxsLCBzID0gdGhpcy5zdGFydEF0ID8gbmV3IEF0KHRoaXMuc3RhcnRBdC5wb3NpdGlvbiwgIXRoaXMuc3RhcnRBdC5iZWZvcmUpIDogbnVsbDtcbiAgICAgICAgICAgIC8vIE5vdyByZXR1cm4gYXMgYSBMaW1pdFR5cGUuRmlyc3QgcXVlcnkuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLlV0ID0gbmV3IG10KHRoaXMucGF0aCwgdGhpcy5jb2xsZWN0aW9uR3JvdXAsIHQsIHRoaXMuZmlsdGVycywgdGhpcy5saW1pdCwgbywgcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuVXQ7XG4gICAgfSwgdC5wcm90b3R5cGUuaWUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdC5rZXkucGF0aDtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IHRoaXMuY29sbGVjdGlvbkdyb3VwID8gdC5rZXkudHQodGhpcy5jb2xsZWN0aW9uR3JvdXApICYmIHRoaXMucGF0aC5xKGUpIDogXy5ldCh0aGlzLnBhdGgpID8gdGhpcy5wYXRoLmlzRXF1YWwoZSkgOiB0aGlzLnBhdGguVShlKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBBIGRvY3VtZW50IG11c3QgaGF2ZSBhIHZhbHVlIGZvciBldmVyeSBvcmRlcmluZyBjbGF1c2UgaW4gb3JkZXIgdG8gc2hvdyB1cFxuICAgICAqIGluIHRoZSByZXN1bHRzLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLm5lID0gZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBlID0gMCwgbiA9IHRoaXMueHQ7IGUgPCBuLmxlbmd0aDsgZSsrKSB7XG4gICAgICAgICAgICB2YXIgciA9IG5bZV07XG4gICAgICAgICAgICAvLyBvcmRlciBieSBrZXkgYWx3YXlzIG1hdGNoZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghci5maWVsZC5ZKCkgJiYgbnVsbCA9PT0gdC5maWVsZChyLmZpZWxkKSkgcmV0dXJuICExO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhMDtcbiAgICB9LCB0LnByb3RvdHlwZS5yZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgZSA9IDAsIG4gPSB0aGlzLmZpbHRlcnM7IGUgPCBuLmxlbmd0aDsgZSsrKSB7XG4gICAgICAgICAgICBpZiAoIW5bZV0ubWF0Y2hlcyh0KSkgcmV0dXJuICExO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhMDtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBNYWtlcyBzdXJlIGEgZG9jdW1lbnQgaXMgd2l0aGluIHRoZSBib3VuZHMsIGlmIHByb3ZpZGVkLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmhlID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gISh0aGlzLnN0YXJ0QXQgJiYgIXRoaXMuc3RhcnRBdC5sZSh0aGlzLm9yZGVyQnksIHQpIHx8IHRoaXMuZW5kQXQgJiYgdGhpcy5lbmRBdC5sZSh0aGlzLm9yZGVyQnksIHQpKTtcbiAgICB9LCB0LnByb3RvdHlwZS5RdCA9IGZ1bmN0aW9uKHQpIHt9LCB0O1xufSgpLCBFdCA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24odCkge1xuICAgIGZ1bmN0aW9uIG4oZSwgbiwgcikge1xuICAgICAgICB2YXIgaSA9IHRoaXM7XG4gICAgICAgIHJldHVybiAoaSA9IHQuY2FsbCh0aGlzKSB8fCB0aGlzKS5maWVsZCA9IGUsIGkub3AgPSBuLCBpLnZhbHVlID0gciwgaTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZpbHRlciBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqLyAgICByZXR1cm4gZS5fX2V4dGVuZHMobiwgdCksIG4uY3JlYXRlID0gZnVuY3Rpb24odCwgZSwgcikge1xuICAgICAgICBpZiAodC5ZKCkpIHJldHVybiBcImluXCIgLyogSU4gKi8gPT09IGUgPyBuZXcgX3QodCwgcikgOiBuZXcgYnQodCwgZSwgcik7XG4gICAgICAgIGlmIChXKHIpKSB7XG4gICAgICAgICAgICBpZiAoXCI9PVwiIC8qIEVRVUFMICovICE9PSBlKSB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBxdWVyeS4gTnVsbCBzdXBwb3J0cyBvbmx5IGVxdWFsaXR5IGNvbXBhcmlzb25zLlwiKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgbih0LCBlLCByKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoUShyKSkge1xuICAgICAgICAgICAgaWYgKFwiPT1cIiAvKiBFUVVBTCAqLyAhPT0gZSkgdGhyb3cgbmV3IGMoaC5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgcXVlcnkuIE5hTiBzdXBwb3J0cyBvbmx5IGVxdWFsaXR5IGNvbXBhcmlzb25zLlwiKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgbih0LCBlLCByKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJhcnJheS1jb250YWluc1wiIC8qIEFSUkFZX0NPTlRBSU5TICovID09PSBlID8gbmV3IFR0KHQsIHIpIDogXCJpblwiIC8qIElOICovID09PSBlID8gbmV3IEl0KHQsIHIpIDogXCJhcnJheS1jb250YWlucy1hbnlcIiAvKiBBUlJBWV9DT05UQUlOU19BTlkgKi8gPT09IGUgPyBuZXcgTnQodCwgcikgOiBuZXcgbih0LCBlLCByKTtcbiAgICB9LCBuLnByb3RvdHlwZS5tYXRjaGVzID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHQuZmllbGQodGhpcy5maWVsZCk7XG4gICAgICAgIC8vIE9ubHkgY29tcGFyZSB0eXBlcyB3aXRoIG1hdGNoaW5nIGJhY2tlbmQgb3JkZXIgKHN1Y2ggYXMgZG91YmxlIGFuZCBpbnQpLlxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsICE9PSBlICYmIE8odGhpcy52YWx1ZSkgPT09IE8oZSkgJiYgdGhpcy5kZShVKGUsIHRoaXMudmFsdWUpKTtcbiAgICB9LCBuLnByb3RvdHlwZS5kZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLm9wKSB7XG4gICAgICAgICAgY2FzZSBcIjxcIiAvKiBMRVNTX1RIQU4gKi8gOlxuICAgICAgICAgICAgcmV0dXJuIHQgPCAwO1xuXG4gICAgICAgICAgY2FzZSBcIjw9XCIgLyogTEVTU19USEFOX09SX0VRVUFMICovIDpcbiAgICAgICAgICAgIHJldHVybiB0IDw9IDA7XG5cbiAgICAgICAgICBjYXNlIFwiPT1cIiAvKiBFUVVBTCAqLyA6XG4gICAgICAgICAgICByZXR1cm4gMCA9PT0gdDtcblxuICAgICAgICAgIGNhc2UgXCI+XCIgLyogR1JFQVRFUl9USEFOICovIDpcbiAgICAgICAgICAgIHJldHVybiB0ID4gMDtcblxuICAgICAgICAgIGNhc2UgXCI+PVwiIC8qIEdSRUFURVJfVEhBTl9PUl9FUVVBTCAqLyA6XG4gICAgICAgICAgICByZXR1cm4gdCA+PSAwO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBnZSgpO1xuICAgICAgICB9XG4gICAgfSwgbi5wcm90b3R5cGUudWUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFsgXCI8XCIgLyogTEVTU19USEFOICovICwgXCI8PVwiIC8qIExFU1NfVEhBTl9PUl9FUVVBTCAqLyAsIFwiPlwiIC8qIEdSRUFURVJfVEhBTiAqLyAsIFwiPj1cIiAvKiBHUkVBVEVSX1RIQU5fT1JfRVFVQUwgKi8gXS5pbmRleE9mKHRoaXMub3ApID49IDA7XG4gICAgfSwgbi5wcm90b3R5cGUuY2Fub25pY2FsSWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVE9ETyhiLzI5MTgzMTY1KTogVGVjaG5pY2FsbHksIHRoaXMgd29uJ3QgYmUgdW5pcXVlIGlmIHR3byB2YWx1ZXMgaGF2ZVxuICAgICAgICAvLyB0aGUgc2FtZSBkZXNjcmlwdGlvbiwgc3VjaCBhcyB0aGUgaW50IDMgYW5kIHRoZSBzdHJpbmcgXCIzXCIuIFNvIHdlIHNob3VsZFxuICAgICAgICAvLyBhZGQgdGhlIHR5cGVzIGluIGhlcmUgc29tZWhvdywgdG9vLlxuICAgICAgICByZXR1cm4gdGhpcy5maWVsZC5qKCkgKyB0aGlzLm9wLnRvU3RyaW5nKCkgKyBxKHRoaXMudmFsdWUpO1xuICAgIH0sIG4ucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0IGluc3RhbmNlb2YgbiAmJiB0aGlzLm9wID09PSB0Lm9wICYmIHRoaXMuZmllbGQuaXNFcXVhbCh0LmZpZWxkKSAmJiBWKHRoaXMudmFsdWUsIHQudmFsdWUpO1xuICAgIH0sIG4ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpZWxkLmooKSArIFwiIFwiICsgdGhpcy5vcCArIFwiIFwiICsgcSh0aGlzLnZhbHVlKTtcbiAgICB9LCBuO1xufSgoZnVuY3Rpb24oKSB7fSkpLCBidCA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24odCkge1xuICAgIGZ1bmN0aW9uIG4oZSwgbiwgcikge1xuICAgICAgICB2YXIgaSA9IHRoaXM7XG4gICAgICAgIHJldHVybiAoaSA9IHQuY2FsbCh0aGlzLCBlLCBuLCByKSB8fCB0aGlzKS5rZXkgPSBfLlooci5yZWZlcmVuY2VWYWx1ZSksIGk7XG4gICAgfVxuICAgIHJldHVybiBlLl9fZXh0ZW5kcyhuLCB0KSwgbi5wcm90b3R5cGUubWF0Y2hlcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSBfLk4odC5rZXksIHRoaXMua2V5KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGUoZSk7XG4gICAgfSwgbjtcbn0oRXQpLCBfdCA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24odCkge1xuICAgIGZ1bmN0aW9uIG4oZSwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXM7XG4gICAgICAgIHJldHVybiAociA9IHQuY2FsbCh0aGlzLCBlLCBcImluXCIgLyogSU4gKi8gLCBuKSB8fCB0aGlzKS5rZXlzID0gKG4uYXJyYXlWYWx1ZS52YWx1ZXMgfHwgW10pLm1hcCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIF8uWih0LnJlZmVyZW5jZVZhbHVlKTtcbiAgICAgICAgfSkpLCByO1xuICAgIH1cbiAgICByZXR1cm4gZS5fX2V4dGVuZHMobiwgdCksIG4ucHJvdG90eXBlLm1hdGNoZXMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmtleXMuc29tZSgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmV0dXJuIGUuaXNFcXVhbCh0LmtleSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBuO1xufShFdCksIFR0ID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbih0KSB7XG4gICAgZnVuY3Rpb24gbihlLCBuKSB7XG4gICAgICAgIHJldHVybiB0LmNhbGwodGhpcywgZSwgXCJhcnJheS1jb250YWluc1wiIC8qIEFSUkFZX0NPTlRBSU5TICovICwgbikgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGUuX19leHRlbmRzKG4sIHQpLCBuLnByb3RvdHlwZS5tYXRjaGVzID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHQuZmllbGQodGhpcy5maWVsZCk7XG4gICAgICAgIHJldHVybiBHKGUpICYmIFAoZS5hcnJheVZhbHVlLCB0aGlzLnZhbHVlKTtcbiAgICB9LCBuO1xufShFdCksIEl0ID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbih0KSB7XG4gICAgZnVuY3Rpb24gbihlLCBuKSB7XG4gICAgICAgIHJldHVybiB0LmNhbGwodGhpcywgZSwgXCJpblwiIC8qIElOICovICwgbikgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGUuX19leHRlbmRzKG4sIHQpLCBuLnByb3RvdHlwZS5tYXRjaGVzID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHQuZmllbGQodGhpcy5maWVsZCk7XG4gICAgICAgIHJldHVybiBudWxsICE9PSBlICYmIFAodGhpcy52YWx1ZS5hcnJheVZhbHVlLCBlKTtcbiAgICB9LCBuO1xufShFdCksIE50ID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbih0KSB7XG4gICAgZnVuY3Rpb24gbihlLCBuKSB7XG4gICAgICAgIHJldHVybiB0LmNhbGwodGhpcywgZSwgXCJhcnJheS1jb250YWlucy1hbnlcIiAvKiBBUlJBWV9DT05UQUlOU19BTlkgKi8gLCBuKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gZS5fX2V4dGVuZHMobiwgdCksIG4ucHJvdG90eXBlLm1hdGNoZXMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcywgbiA9IHQuZmllbGQodGhpcy5maWVsZCk7XG4gICAgICAgIHJldHVybiAhKCFHKG4pIHx8ICFuLmFycmF5VmFsdWUudmFsdWVzKSAmJiBuLmFycmF5VmFsdWUudmFsdWVzLnNvbWUoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBQKGUudmFsdWUuYXJyYXlWYWx1ZSwgdCk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBuO1xufShFdCksIEF0ID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQsIGUpIHtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHQsIHRoaXMuYmVmb3JlID0gZTtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLmNhbm9uaWNhbElkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFRPRE8oYi8yOTE4MzE2NSk6IE1ha2UgdGhpcyBjb2xsaXNpb24gcm9idXN0LlxuICAgICAgICByZXR1cm4gKHRoaXMuYmVmb3JlID8gXCJiXCIgOiBcImFcIikgKyBcIjpcIiArIHRoaXMucG9zaXRpb24ubWFwKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gcSh0KTtcbiAgICAgICAgfSkpLmpvaW4oXCIsXCIpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiBhIGRvY3VtZW50IHNvcnRzIGJlZm9yZSBhIGJvdW5kIHVzaW5nIHRoZSBwcm92aWRlZCBzb3J0XG4gICAgICogb3JkZXIuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUubGUgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGZvciAodmFyIG4gPSAwLCByID0gMDsgciA8IHRoaXMucG9zaXRpb24ubGVuZ3RoOyByKyspIHtcbiAgICAgICAgICAgIHZhciBpID0gdFtyXSwgbyA9IHRoaXMucG9zaXRpb25bcl07XG4gICAgICAgICAgICBpZiAobiA9IGkuZmllbGQuWSgpID8gXy5OKF8uWihvLnJlZmVyZW5jZVZhbHVlKSwgZS5rZXkpIDogVShvLCBlLmZpZWxkKGkuZmllbGQpKSwgXG4gICAgICAgICAgICBcImRlc2NcIiAvKiBERVNDRU5ESU5HICovID09PSBpLmRpciAmJiAobiAqPSAtMSksIDAgIT09IG4pIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmJlZm9yZSA/IG4gPD0gMCA6IG4gPCAwO1xuICAgIH0sIHQucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGlmIChudWxsID09PSB0KSByZXR1cm4gITE7XG4gICAgICAgIGlmICh0aGlzLmJlZm9yZSAhPT0gdC5iZWZvcmUgfHwgdGhpcy5wb3NpdGlvbi5sZW5ndGggIT09IHQucG9zaXRpb24ubGVuZ3RoKSByZXR1cm4gITE7XG4gICAgICAgIGZvciAodmFyIGUgPSAwOyBlIDwgdGhpcy5wb3NpdGlvbi5sZW5ndGg7IGUrKykgaWYgKCFWKHRoaXMucG9zaXRpb25bZV0sIHQucG9zaXRpb25bZV0pKSByZXR1cm4gITE7XG4gICAgICAgIHJldHVybiAhMDtcbiAgICB9LCB0O1xufSgpLCBrdCA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlKSB7XG4gICAgICAgIHRoaXMuZmllbGQgPSB0LCB2b2lkIDAgPT09IGUgJiYgKGUgPSBcImFzY1wiIC8qIEFTQ0VORElORyAqLyksIHRoaXMuZGlyID0gZSwgdGhpcy5mZSA9IHQuWSgpO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLmZlID8gXy5OKHQua2V5LCBlLmtleSkgOiBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgICAgICB2YXIgciA9IGUuZmllbGQodCksIGkgPSBuLmZpZWxkKHQpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgIT09IHIgJiYgbnVsbCAhPT0gaSA/IFUociwgaSkgOiBnZSgpO1xuICAgICAgICB9KHRoaXMuZmllbGQsIHQsIGUpO1xuICAgICAgICBzd2l0Y2ggKHRoaXMuZGlyKSB7XG4gICAgICAgICAgY2FzZSBcImFzY1wiIC8qIEFTQ0VORElORyAqLyA6XG4gICAgICAgICAgICByZXR1cm4gbjtcblxuICAgICAgICAgIGNhc2UgXCJkZXNjXCIgLyogREVTQ0VORElORyAqLyA6XG4gICAgICAgICAgICByZXR1cm4gLTEgKiBuO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBnZSgpO1xuICAgICAgICB9XG4gICAgfSwgdC5wcm90b3R5cGUuY2Fub25pY2FsSWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVE9ETyhiLzI5MTgzMTY1KTogTWFrZSB0aGlzIGNvbGxpc2lvbiByb2J1c3QuXG4gICAgICAgIHJldHVybiB0aGlzLmZpZWxkLmooKSArIHRoaXMuZGlyLnRvU3RyaW5nKCk7XG4gICAgfSwgdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGQuaigpICsgXCIgKFwiICsgdGhpcy5kaXIgKyBcIilcIjtcbiAgICB9LCB0LnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXIgPT09IHQuZGlyICYmIHRoaXMuZmllbGQuaXNFcXVhbCh0LmZpZWxkKTtcbiAgICB9LCB0O1xufSgpLCBEdCA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdChcbiAgICAvKiogVGhlIHRhcmdldCBiZWluZyBsaXN0ZW5lZCB0by4gKi9cbiAgICB0LCBcbiAgICAvKipcbiAgICAgKiBUaGUgdGFyZ2V0IElEIHRvIHdoaWNoIHRoZSB0YXJnZXQgY29ycmVzcG9uZHM7IEFzc2lnbmVkIGJ5IHRoZVxuICAgICAqIExvY2FsU3RvcmUgZm9yIHVzZXIgbGlzdGVucyBhbmQgYnkgdGhlIFN5bmNFbmdpbmUgZm9yIGxpbWJvIHdhdGNoZXMuXG4gICAgICovXG4gICAgZSwgXG4gICAgLyoqIFRoZSBwdXJwb3NlIG9mIHRoZSB0YXJnZXQuICovXG4gICAgbiwgXG4gICAgLyoqXG4gICAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGUgbGFzdCB0cmFuc2FjdGlvbiBkdXJpbmcgd2hpY2ggdGhpcyB0YXJnZXQgZGF0YVxuICAgICAqIHdhcyBtb2RpZmllZC5cbiAgICAgKi9cbiAgICByLCBcbiAgICAvKiogVGhlIGxhdGVzdCBzbmFwc2hvdCB2ZXJzaW9uIHNlZW4gZm9yIHRoaXMgdGFyZ2V0LiAqL1xuICAgIGlcbiAgICAvKipcbiAgICAgKiBUaGUgbWF4aW11bSBzbmFwc2hvdCB2ZXJzaW9uIGF0IHdoaWNoIHRoZSBhc3NvY2lhdGVkIHZpZXdcbiAgICAgKiBjb250YWluZWQgbm8gbGltYm8gZG9jdW1lbnRzLlxuICAgICAqLyAsIG9cbiAgICAvKipcbiAgICAgKiBBbiBvcGFxdWUsIHNlcnZlci1hc3NpZ25lZCB0b2tlbiB0aGF0IGFsbG93cyB3YXRjaGluZyBhIHRhcmdldCB0byBiZVxuICAgICAqIHJlc3VtZWQgYWZ0ZXIgZGlzY29ubmVjdGluZyB3aXRob3V0IHJldHJhbnNtaXR0aW5nIGFsbCB0aGUgZGF0YSB0aGF0XG4gICAgICogbWF0Y2hlcyB0aGUgdGFyZ2V0LiBUaGUgcmVzdW1lIHRva2VuIGVzc2VudGlhbGx5IGlkZW50aWZpZXMgYSBwb2ludCBpblxuICAgICAqIHRpbWUgZnJvbSB3aGljaCB0aGUgc2VydmVyIHNob3VsZCByZXN1bWUgc2VuZGluZyByZXN1bHRzLlxuICAgICAqLyAsIHMpIHtcbiAgICAgICAgdm9pZCAwID09PSBpICYmIChpID0gZy5taW4oKSksIHZvaWQgMCA9PT0gbyAmJiAobyA9IGcubWluKCkpLCB2b2lkIDAgPT09IHMgJiYgKHMgPSBBLmh0KSwgXG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdCwgdGhpcy50YXJnZXRJZCA9IGUsIHRoaXMuVGUgPSBuLCB0aGlzLnNlcXVlbmNlTnVtYmVyID0gciwgdGhpcy5FZSA9IGksIFxuICAgICAgICB0aGlzLmxhc3RMaW1ib0ZyZWVTbmFwc2hvdFZlcnNpb24gPSBvLCB0aGlzLnJlc3VtZVRva2VuID0gcztcbiAgICB9XG4gICAgLyoqIENyZWF0ZXMgYSBuZXcgdGFyZ2V0IGRhdGEgaW5zdGFuY2Ugd2l0aCBhbiB1cGRhdGVkIHNlcXVlbmNlIG51bWJlci4gKi8gICAgcmV0dXJuIHQucHJvdG90eXBlLkllID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gbmV3IHQodGhpcy50YXJnZXQsIHRoaXMudGFyZ2V0SWQsIHRoaXMuVGUsIGUsIHRoaXMuRWUsIHRoaXMubGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbiwgdGhpcy5yZXN1bWVUb2tlbik7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyB0YXJnZXQgZGF0YSBpbnN0YW5jZSB3aXRoIGFuIHVwZGF0ZWQgcmVzdW1lIHRva2VuIGFuZFxuICAgICAqIHNuYXBzaG90IHZlcnNpb24uXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUud2UgPSBmdW5jdGlvbihlLCBuKSB7XG4gICAgICAgIHJldHVybiBuZXcgdCh0aGlzLnRhcmdldCwgdGhpcy50YXJnZXRJZCwgdGhpcy5UZSwgdGhpcy5zZXF1ZW5jZU51bWJlciwgbiwgdGhpcy5sYXN0TGltYm9GcmVlU25hcHNob3RWZXJzaW9uLCBlKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHRhcmdldCBkYXRhIGluc3RhbmNlIHdpdGggYW4gdXBkYXRlZCBsYXN0IGxpbWJvIGZyZWVcbiAgICAgKiBzbmFwc2hvdCB2ZXJzaW9uIG51bWJlci5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5SZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0KHRoaXMudGFyZ2V0LCB0aGlzLnRhcmdldElkLCB0aGlzLlRlLCB0aGlzLnNlcXVlbmNlTnVtYmVyLCB0aGlzLkVlLCBlLCB0aGlzLnJlc3VtZVRva2VuKTtcbiAgICB9LCB0O1xufSgpLCB4dCA9IFxuLy8gVE9ETyhiLzMzMDc4MTYzKToganVzdCB1c2Ugc2ltcGxlc3QgZm9ybSBvZiBleGlzdGVuY2UgZmlsdGVyIGZvciBub3dcbmZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLmNvdW50ID0gdDtcbn07XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGRvY3VtZW50IGluIEZpcmVzdG9yZSB3aXRoIGEga2V5LCB2ZXJzaW9uLCBkYXRhIGFuZCB3aGV0aGVyIHRoZVxuICogZGF0YSBoYXMgbG9jYWwgbXV0YXRpb25zIGFwcGxpZWQgdG8gaXQuXG4gKi9cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGFuIGVycm9yIGNvZGUgcmVwcmVzZW50cyBhIHBlcm1hbmVudCBlcnJvciB3aGVuIHJlY2VpdmVkXG4gKiBpbiByZXNwb25zZSB0byBhIG5vbi13cml0ZSBvcGVyYXRpb24uXG4gKlxuICogU2VlIGlzUGVybWFuZW50V3JpdGVFcnJvciBmb3IgY2xhc3NpZnlpbmcgd3JpdGUgZXJyb3JzLlxuICovXG5mdW5jdGlvbiBTdCh0KSB7XG4gICAgc3dpdGNoICh0KSB7XG4gICAgICBjYXNlIGguT0s6XG4gICAgICAgIHJldHVybiBnZSgpO1xuXG4gICAgICBjYXNlIGguQ0FOQ0VMTEVEOlxuICAgICAgY2FzZSBoLlVOS05PV046XG4gICAgICBjYXNlIGguREVBRExJTkVfRVhDRUVERUQ6XG4gICAgICBjYXNlIGguUkVTT1VSQ0VfRVhIQVVTVEVEOlxuICAgICAgY2FzZSBoLklOVEVSTkFMOlxuICAgICAgY2FzZSBoLlVOQVZBSUxBQkxFOlxuIC8vIFVuYXV0aGVudGljYXRlZCBtZWFucyBzb21ldGhpbmcgd2VudCB3cm9uZyB3aXRoIG91ciB0b2tlbiBhbmQgd2UgbmVlZFxuICAgICAgICAvLyB0byByZXRyeSB3aXRoIG5ldyBjcmVkZW50aWFscyB3aGljaCB3aWxsIGhhcHBlbiBhdXRvbWF0aWNhbGx5LlxuICAgICAgICAgICAgICBjYXNlIGguVU5BVVRIRU5USUNBVEVEOlxuICAgICAgICByZXR1cm4gITE7XG5cbiAgICAgIGNhc2UgaC5JTlZBTElEX0FSR1VNRU5UOlxuICAgICAgY2FzZSBoLk5PVF9GT1VORDpcbiAgICAgIGNhc2UgaC5BTFJFQURZX0VYSVNUUzpcbiAgICAgIGNhc2UgaC5QRVJNSVNTSU9OX0RFTklFRDpcbiAgICAgIGNhc2UgaC5GQUlMRURfUFJFQ09ORElUSU9OOlxuIC8vIEFib3J0ZWQgbWlnaHQgYmUgcmV0cmllZCBpbiBzb21lIHNjZW5hcmlvcywgYnV0IHRoYXQgaXMgZGVwZW5kYW50IG9uXG4gICAgICAgIC8vIHRoZSBjb250ZXh0IGFuZCBzaG91bGQgaGFuZGxlZCBpbmRpdmlkdWFsbHkgYnkgdGhlIGNhbGxpbmcgY29kZS5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9hcGlzL2Rlc2lnbi9lcnJvcnMuXG4gICAgICAgICAgICAgIGNhc2UgaC5BQk9SVEVEOlxuICAgICAgY2FzZSBoLk9VVF9PRl9SQU5HRTpcbiAgICAgIGNhc2UgaC5VTklNUExFTUVOVEVEOlxuICAgICAgY2FzZSBoLkRBVEFfTE9TUzpcbiAgICAgICAgcmV0dXJuICEwO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZ2UoKTtcbiAgICB9XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGFuIGVycm9yIGNvZGUgcmVwcmVzZW50cyBhIHBlcm1hbmVudCBlcnJvciB3aGVuIHJlY2VpdmVkXG4gKiBpbiByZXNwb25zZSB0byBhIHdyaXRlIG9wZXJhdGlvbi5cbiAqXG4gKiBXcml0ZSBvcGVyYXRpb25zIG11c3QgYmUgaGFuZGxlZCBzcGVjaWFsbHkgYmVjYXVzZSBhcyBvZiBiLzExOTQzNzc2NCwgQUJPUlRFRFxuICogZXJyb3JzIG9uIHRoZSB3cml0ZSBzdHJlYW0gc2hvdWxkIGJlIHJldHJpZWQgdG9vIChldmVuIHRob3VnaCBBQk9SVEVEIGVycm9yc1xuICogYXJlIG5vdCBnZW5lcmFsbHkgcmV0cnlhYmxlKS5cbiAqXG4gKiBOb3RlIHRoYXQgZHVyaW5nIHRoZSBpbml0aWFsIGhhbmRzaGFrZSBvbiB0aGUgd3JpdGUgc3RyZWFtIGFuIEFCT1JURUQgZXJyb3JcbiAqIHNpZ25hbHMgdGhhdCB3ZSBzaG91bGQgZGlzY2FyZCBvdXIgc3RyZWFtIHRva2VuIChpLmUuIGl0IGlzIHBlcm1hbmVudCkuIFRoaXNcbiAqIG1lYW5zIGEgaGFuZHNoYWtlIGVycm9yIHNob3VsZCBiZSBjbGFzc2lmaWVkIHdpdGggaXNQZXJtYW5lbnRFcnJvciwgYWJvdmUuXG4gKi9cbi8qKlxuICogTWFwcyBhbiBlcnJvciBDb2RlIGZyb20gR1JQQyBzdGF0dXMgY29kZSBudW1iZXIsIGxpa2UgMCwgMSwgb3IgMTQuIFRoZXNlXG4gKiBhcmUgbm90IHRoZSBzYW1lIGFzIEhUVFAgc3RhdHVzIGNvZGVzLlxuICpcbiAqIEByZXR1cm5zIFRoZSBDb2RlIGVxdWl2YWxlbnQgdG8gdGhlIGdpdmVuIEdSUEMgc3RhdHVzIGNvZGUuIEZhaWxzIGlmIHRoZXJlXG4gKiAgICAgaXMgbm8gbWF0Y2guXG4gKi8gZnVuY3Rpb24gUnQodCkge1xuICAgIGlmICh2b2lkIDAgPT09IHQpIFxuICAgIC8vIFRoaXMgc2hvdWxkbid0IG5vcm1hbGx5IGhhcHBlbiwgYnV0IGluIGNlcnRhaW4gZXJyb3IgY2FzZXMgKGxpa2UgdHJ5aW5nXG4gICAgLy8gdG8gc2VuZCBpbnZhbGlkIHByb3RvIG1lc3NhZ2VzKSB3ZSBtYXkgZ2V0IGFuIGVycm9yIHdpdGggbm8gR1JQQyBjb2RlLlxuICAgIHJldHVybiB5ZShcIkdSUEMgZXJyb3IgaGFzIG5vIC5jb2RlXCIpLCBoLlVOS05PV047XG4gICAgc3dpdGNoICh0KSB7XG4gICAgICBjYXNlIGx0Lk9LOlxuICAgICAgICByZXR1cm4gaC5PSztcblxuICAgICAgY2FzZSBsdC5DQU5DRUxMRUQ6XG4gICAgICAgIHJldHVybiBoLkNBTkNFTExFRDtcblxuICAgICAgY2FzZSBsdC5VTktOT1dOOlxuICAgICAgICByZXR1cm4gaC5VTktOT1dOO1xuXG4gICAgICBjYXNlIGx0LkRFQURMSU5FX0VYQ0VFREVEOlxuICAgICAgICByZXR1cm4gaC5ERUFETElORV9FWENFRURFRDtcblxuICAgICAgY2FzZSBsdC5SRVNPVVJDRV9FWEhBVVNURUQ6XG4gICAgICAgIHJldHVybiBoLlJFU09VUkNFX0VYSEFVU1RFRDtcblxuICAgICAgY2FzZSBsdC5JTlRFUk5BTDpcbiAgICAgICAgcmV0dXJuIGguSU5URVJOQUw7XG5cbiAgICAgIGNhc2UgbHQuVU5BVkFJTEFCTEU6XG4gICAgICAgIHJldHVybiBoLlVOQVZBSUxBQkxFO1xuXG4gICAgICBjYXNlIGx0LlVOQVVUSEVOVElDQVRFRDpcbiAgICAgICAgcmV0dXJuIGguVU5BVVRIRU5USUNBVEVEO1xuXG4gICAgICBjYXNlIGx0LklOVkFMSURfQVJHVU1FTlQ6XG4gICAgICAgIHJldHVybiBoLklOVkFMSURfQVJHVU1FTlQ7XG5cbiAgICAgIGNhc2UgbHQuTk9UX0ZPVU5EOlxuICAgICAgICByZXR1cm4gaC5OT1RfRk9VTkQ7XG5cbiAgICAgIGNhc2UgbHQuQUxSRUFEWV9FWElTVFM6XG4gICAgICAgIHJldHVybiBoLkFMUkVBRFlfRVhJU1RTO1xuXG4gICAgICBjYXNlIGx0LlBFUk1JU1NJT05fREVOSUVEOlxuICAgICAgICByZXR1cm4gaC5QRVJNSVNTSU9OX0RFTklFRDtcblxuICAgICAgY2FzZSBsdC5GQUlMRURfUFJFQ09ORElUSU9OOlxuICAgICAgICByZXR1cm4gaC5GQUlMRURfUFJFQ09ORElUSU9OO1xuXG4gICAgICBjYXNlIGx0LkFCT1JURUQ6XG4gICAgICAgIHJldHVybiBoLkFCT1JURUQ7XG5cbiAgICAgIGNhc2UgbHQuT1VUX09GX1JBTkdFOlxuICAgICAgICByZXR1cm4gaC5PVVRfT0ZfUkFOR0U7XG5cbiAgICAgIGNhc2UgbHQuVU5JTVBMRU1FTlRFRDpcbiAgICAgICAgcmV0dXJuIGguVU5JTVBMRU1FTlRFRDtcblxuICAgICAgY2FzZSBsdC5EQVRBX0xPU1M6XG4gICAgICAgIHJldHVybiBoLkRBVEFfTE9TUztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGdlKCk7XG4gICAgfVxufVxuXG4vKipcbiAqIENvbnZlcnRzIGFuIEhUVFAgcmVzcG9uc2UncyBlcnJvciBzdGF0dXMgdG8gdGhlIGVxdWl2YWxlbnQgZXJyb3IgY29kZS5cbiAqXG4gKiBAcGFyYW0gc3RhdHVzIEFuIEhUVFAgZXJyb3IgcmVzcG9uc2Ugc3RhdHVzIChcIkZBSUxFRF9QUkVDT05ESVRJT05cIixcbiAqIFwiVU5LTk9XTlwiLCBldGMuKVxuICogQHJldHVybnMgVGhlIGVxdWl2YWxlbnQgQ29kZS4gTm9uLW1hdGNoaW5nIHJlc3BvbnNlcyBhcmUgbWFwcGVkIHRvXG4gKiAgICAgQ29kZS5VTktOT1dOLlxuICovIChwdCA9IGx0IHx8IChsdCA9IHt9KSlbcHQuT0sgPSAwXSA9IFwiT0tcIiwgcHRbcHQuQ0FOQ0VMTEVEID0gMV0gPSBcIkNBTkNFTExFRFwiLCBcbnB0W3B0LlVOS05PV04gPSAyXSA9IFwiVU5LTk9XTlwiLCBwdFtwdC5JTlZBTElEX0FSR1VNRU5UID0gM10gPSBcIklOVkFMSURfQVJHVU1FTlRcIiwgXG5wdFtwdC5ERUFETElORV9FWENFRURFRCA9IDRdID0gXCJERUFETElORV9FWENFRURFRFwiLCBwdFtwdC5OT1RfRk9VTkQgPSA1XSA9IFwiTk9UX0ZPVU5EXCIsIFxucHRbcHQuQUxSRUFEWV9FWElTVFMgPSA2XSA9IFwiQUxSRUFEWV9FWElTVFNcIiwgcHRbcHQuUEVSTUlTU0lPTl9ERU5JRUQgPSA3XSA9IFwiUEVSTUlTU0lPTl9ERU5JRURcIiwgXG5wdFtwdC5VTkFVVEhFTlRJQ0FURUQgPSAxNl0gPSBcIlVOQVVUSEVOVElDQVRFRFwiLCBwdFtwdC5SRVNPVVJDRV9FWEhBVVNURUQgPSA4XSA9IFwiUkVTT1VSQ0VfRVhIQVVTVEVEXCIsIFxucHRbcHQuRkFJTEVEX1BSRUNPTkRJVElPTiA9IDldID0gXCJGQUlMRURfUFJFQ09ORElUSU9OXCIsIHB0W3B0LkFCT1JURUQgPSAxMF0gPSBcIkFCT1JURURcIiwgXG5wdFtwdC5PVVRfT0ZfUkFOR0UgPSAxMV0gPSBcIk9VVF9PRl9SQU5HRVwiLCBwdFtwdC5VTklNUExFTUVOVEVEID0gMTJdID0gXCJVTklNUExFTUVOVEVEXCIsIFxucHRbcHQuSU5URVJOQUwgPSAxM10gPSBcIklOVEVSTkFMXCIsIHB0W3B0LlVOQVZBSUxBQkxFID0gMTRdID0gXCJVTkFWQUlMQUJMRVwiLCBwdFtwdC5EQVRBX0xPU1MgPSAxNV0gPSBcIkRBVEFfTE9TU1wiO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gQW4gaW1tdXRhYmxlIHNvcnRlZCBtYXAgaW1wbGVtZW50YXRpb24sIGJhc2VkIG9uIGEgTGVmdC1sZWFuaW5nIFJlZC1CbGFja1xuLy8gdHJlZS5cbnZhciBMdCA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlKSB7XG4gICAgICAgIHRoaXMuTiA9IHQsIHRoaXMucm9vdCA9IGUgfHwgVnQuRU1QVFk7XG4gICAgfVxuICAgIC8vIFJldHVybnMgYSBjb3B5IG9mIHRoZSBtYXAsIHdpdGggdGhlIHNwZWNpZmllZCBrZXkvdmFsdWUgYWRkZWQgb3IgcmVwbGFjZWQuXG4gICAgICAgIHJldHVybiB0LnByb3RvdHlwZS5BZSA9IGZ1bmN0aW9uKGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0KHRoaXMuTiwgdGhpcy5yb290LkFlKGUsIG4sIHRoaXMuTikubWUobnVsbCwgbnVsbCwgVnQuUGUsIG51bGwsIG51bGwpKTtcbiAgICB9LCBcbiAgICAvLyBSZXR1cm5zIGEgY29weSBvZiB0aGUgbWFwLCB3aXRoIHRoZSBzcGVjaWZpZWQga2V5IHJlbW92ZWQuXG4gICAgdC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gbmV3IHQodGhpcy5OLCB0aGlzLnJvb3QucmVtb3ZlKGUsIHRoaXMuTikubWUobnVsbCwgbnVsbCwgVnQuUGUsIG51bGwsIG51bGwpKTtcbiAgICB9LCBcbiAgICAvLyBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgbm9kZSB3aXRoIHRoZSBnaXZlbiBrZXksIG9yIG51bGwuXG4gICAgdC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBlID0gdGhpcy5yb290OyAhZS5CKCk7ICkge1xuICAgICAgICAgICAgdmFyIG4gPSB0aGlzLk4odCwgZS5rZXkpO1xuICAgICAgICAgICAgaWYgKDAgPT09IG4pIHJldHVybiBlLnZhbHVlO1xuICAgICAgICAgICAgbiA8IDAgPyBlID0gZS5sZWZ0IDogbiA+IDAgJiYgKGUgPSBlLnJpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LCBcbiAgICAvLyBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCBpbiB0aGlzIHNvcnRlZCBtYXAsIG9yIC0xIGlmIGl0IGRvZXNuJ3RcbiAgICAvLyBleGlzdC5cbiAgICB0LnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKFxuICAgICAgICAvLyBOdW1iZXIgb2Ygbm9kZXMgdGhhdCB3ZXJlIHBydW5lZCB3aGVuIGRlc2NlbmRpbmcgcmlnaHRcbiAgICAgICAgdmFyIGUgPSAwLCBuID0gdGhpcy5yb290OyAhbi5CKCk7ICkge1xuICAgICAgICAgICAgdmFyIHIgPSB0aGlzLk4odCwgbi5rZXkpO1xuICAgICAgICAgICAgaWYgKDAgPT09IHIpIHJldHVybiBlICsgbi5sZWZ0LnNpemU7XG4gICAgICAgICAgICByIDwgMCA/IG4gPSBuLmxlZnQgOiAoXG4gICAgICAgICAgICAvLyBDb3VudCBhbGwgbm9kZXMgbGVmdCBvZiB0aGUgbm9kZSBwbHVzIHRoZSBub2RlIGl0c2VsZlxuICAgICAgICAgICAgZSArPSBuLmxlZnQuc2l6ZSArIDEsIG4gPSBuLnJpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBOb2RlIG5vdCBmb3VuZFxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICB9LCB0LnByb3RvdHlwZS5CID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvb3QuQigpO1xuICAgIH0sIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJzaXplXCIsIHtcbiAgICAgICAgLy8gUmV0dXJucyB0aGUgdG90YWwgbnVtYmVyIG9mIG5vZGVzIGluIHRoZSBtYXAuXG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yb290LnNpemU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIFxuICAgIC8vIFJldHVybnMgdGhlIG1pbmltdW0ga2V5IGluIHRoZSBtYXAuXG4gICAgdC5wcm90b3R5cGUuVmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5WZSgpO1xuICAgIH0sIFxuICAgIC8vIFJldHVybnMgdGhlIG1heGltdW0ga2V5IGluIHRoZSBtYXAuXG4gICAgdC5wcm90b3R5cGUuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5nZSgpO1xuICAgIH0sIFxuICAgIC8vIFRyYXZlcnNlcyB0aGUgbWFwIGluIGtleSBvcmRlciBhbmQgY2FsbHMgdGhlIHNwZWNpZmllZCBhY3Rpb24gZnVuY3Rpb25cbiAgICAvLyBmb3IgZWFjaCBrZXkvdmFsdWUgcGFpci4gSWYgYWN0aW9uIHJldHVybnMgdHJ1ZSwgdHJhdmVyc2FsIGlzIGFib3J0ZWQuXG4gICAgLy8gUmV0dXJucyB0aGUgZmlyc3QgdHJ1dGh5IHZhbHVlIHJldHVybmVkIGJ5IGFjdGlvbiwgb3IgdGhlIGxhc3QgZmFsc2V5XG4gICAgLy8gdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uLlxuICAgIHQucHJvdG90eXBlLnBlID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290LnBlKHQpO1xuICAgIH0sIHQucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMucGUoKGZ1bmN0aW9uKGUsIG4pIHtcbiAgICAgICAgICAgIHJldHVybiB0KGUsIG4pLCAhMTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gW107XG4gICAgICAgIHJldHVybiB0aGlzLnBlKChmdW5jdGlvbihlLCBuKSB7XG4gICAgICAgICAgICByZXR1cm4gdC5wdXNoKGUgKyBcIjpcIiArIG4pLCAhMTtcbiAgICAgICAgfSkpLCBcIntcIiArIHQuam9pbihcIiwgXCIpICsgXCJ9XCI7XG4gICAgfSwgXG4gICAgLy8gVHJhdmVyc2VzIHRoZSBtYXAgaW4gcmV2ZXJzZSBrZXkgb3JkZXIgYW5kIGNhbGxzIHRoZSBzcGVjaWZpZWQgYWN0aW9uXG4gICAgLy8gZnVuY3Rpb24gZm9yIGVhY2gga2V5L3ZhbHVlIHBhaXIuIElmIGFjdGlvbiByZXR1cm5zIHRydWUsIHRyYXZlcnNhbCBpc1xuICAgIC8vIGFib3J0ZWQuXG4gICAgLy8gUmV0dXJucyB0aGUgZmlyc3QgdHJ1dGh5IHZhbHVlIHJldHVybmVkIGJ5IGFjdGlvbiwgb3IgdGhlIGxhc3QgZmFsc2V5XG4gICAgLy8gdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uLlxuICAgIHQucHJvdG90eXBlLnllID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290LnllKHQpO1xuICAgIH0sIFxuICAgIC8vIFJldHVybnMgYW4gaXRlcmF0b3Igb3ZlciB0aGUgU29ydGVkTWFwLlxuICAgIHQucHJvdG90eXBlLmJlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgT3QodGhpcy5yb290LCBudWxsLCB0aGlzLk4sICExKTtcbiAgICB9LCB0LnByb3RvdHlwZS52ZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPdCh0aGlzLnJvb3QsIHQsIHRoaXMuTiwgITEpO1xuICAgIH0sIHQucHJvdG90eXBlLlNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgT3QodGhpcy5yb290LCBudWxsLCB0aGlzLk4sICEwKTtcbiAgICB9LCB0LnByb3RvdHlwZS5EZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPdCh0aGlzLnJvb3QsIHQsIHRoaXMuTiwgITApO1xuICAgIH0sIHQ7XG59KCksIE90ID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQsIGUsIG4sIHIpIHtcbiAgICAgICAgdGhpcy5DZSA9IHIsIHRoaXMuRmUgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7ICF0LkIoKTsgKSBpZiAoaSA9IGUgPyBuKHQua2V5LCBlKSA6IDEsIFxuICAgICAgICAvLyBmbGlwIHRoZSBjb21wYXJpc29uIGlmIHdlJ3JlIGdvaW5nIGluIHJldmVyc2VcbiAgICAgICAgciAmJiAoaSAqPSAtMSksIGkgPCAwKSBcbiAgICAgICAgLy8gVGhpcyBub2RlIGlzIGxlc3MgdGhhbiBvdXIgc3RhcnQga2V5LiBpZ25vcmUgaXRcbiAgICAgICAgdCA9IHRoaXMuQ2UgPyB0LmxlZnQgOiB0LnJpZ2h0OyBlbHNlIHtcbiAgICAgICAgICAgIGlmICgwID09PSBpKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBub2RlIGlzIGV4YWN0bHkgZXF1YWwgdG8gb3VyIHN0YXJ0IGtleS4gUHVzaCBpdCBvbiB0aGUgc3RhY2ssXG4gICAgICAgICAgICAgICAgLy8gYnV0IHN0b3AgaXRlcmF0aW5nO1xuICAgICAgICAgICAgICAgIHRoaXMuRmUucHVzaCh0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRoaXMgbm9kZSBpcyBncmVhdGVyIHRoYW4gb3VyIHN0YXJ0IGtleSwgYWRkIGl0IHRvIHRoZSBzdGFjayBhbmQgbW92ZVxuICAgICAgICAgICAgLy8gdG8gdGhlIG5leHQgb25lXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkZlLnB1c2godCksIHQgPSB0aGlzLkNlID8gdC5yaWdodCA6IHQubGVmdDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuTmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzLkZlLnBvcCgpLCBlID0ge1xuICAgICAgICAgICAga2V5OiB0LmtleSxcbiAgICAgICAgICAgIHZhbHVlOiB0LnZhbHVlXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLkNlKSBmb3IgKHQgPSB0LmxlZnQ7ICF0LkIoKTsgKSB0aGlzLkZlLnB1c2godCksIHQgPSB0LnJpZ2h0OyBlbHNlIGZvciAodCA9IHQucmlnaHQ7ICF0LkIoKTsgKSB0aGlzLkZlLnB1c2godCksIFxuICAgICAgICB0ID0gdC5sZWZ0O1xuICAgICAgICByZXR1cm4gZTtcbiAgICB9LCB0LnByb3RvdHlwZS4kZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5GZS5sZW5ndGggPiAwO1xuICAgIH0sIHQucHJvdG90eXBlLmtlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgwID09PSB0aGlzLkZlLmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gICAgICAgIHZhciB0ID0gdGhpcy5GZVt0aGlzLkZlLmxlbmd0aCAtIDFdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2V5OiB0LmtleSxcbiAgICAgICAgICAgIHZhbHVlOiB0LnZhbHVlXG4gICAgICAgIH07XG4gICAgfSwgdDtcbn0oKSwgVnQgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoZSwgbiwgciwgaSwgbykge1xuICAgICAgICB0aGlzLmtleSA9IGUsIHRoaXMudmFsdWUgPSBuLCB0aGlzLmNvbG9yID0gbnVsbCAhPSByID8gciA6IHQuUkVELCB0aGlzLmxlZnQgPSBudWxsICE9IGkgPyBpIDogdC5FTVBUWSwgXG4gICAgICAgIHRoaXMucmlnaHQgPSBudWxsICE9IG8gPyBvIDogdC5FTVBUWSwgdGhpcy5zaXplID0gdGhpcy5sZWZ0LnNpemUgKyAxICsgdGhpcy5yaWdodC5zaXplO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIGEgY29weSBvZiB0aGUgY3VycmVudCBub2RlLCBvcHRpb25hbGx5IHJlcGxhY2luZyBwaWVjZXMgb2YgaXQuXG4gICAgICAgIHJldHVybiB0LnByb3RvdHlwZS5tZSA9IGZ1bmN0aW9uKGUsIG4sIHIsIGksIG8pIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0KG51bGwgIT0gZSA/IGUgOiB0aGlzLmtleSwgbnVsbCAhPSBuID8gbiA6IHRoaXMudmFsdWUsIG51bGwgIT0gciA/IHIgOiB0aGlzLmNvbG9yLCBudWxsICE9IGkgPyBpIDogdGhpcy5sZWZ0LCBudWxsICE9IG8gPyBvIDogdGhpcy5yaWdodCk7XG4gICAgfSwgdC5wcm90b3R5cGUuQiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gITE7XG4gICAgfSwgXG4gICAgLy8gVHJhdmVyc2VzIHRoZSB0cmVlIGluIGtleSBvcmRlciBhbmQgY2FsbHMgdGhlIHNwZWNpZmllZCBhY3Rpb24gZnVuY3Rpb25cbiAgICAvLyBmb3IgZWFjaCBub2RlLiBJZiBhY3Rpb24gcmV0dXJucyB0cnVlLCB0cmF2ZXJzYWwgaXMgYWJvcnRlZC5cbiAgICAvLyBSZXR1cm5zIHRoZSBmaXJzdCB0cnV0aHkgdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uLCBvciB0aGUgbGFzdCBmYWxzZXlcbiAgICAvLyB2YWx1ZSByZXR1cm5lZCBieSBhY3Rpb24uXG4gICAgdC5wcm90b3R5cGUucGUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxlZnQucGUodCkgfHwgdCh0aGlzLmtleSwgdGhpcy52YWx1ZSkgfHwgdGhpcy5yaWdodC5wZSh0KTtcbiAgICB9LCBcbiAgICAvLyBUcmF2ZXJzZXMgdGhlIHRyZWUgaW4gcmV2ZXJzZSBrZXkgb3JkZXIgYW5kIGNhbGxzIHRoZSBzcGVjaWZpZWQgYWN0aW9uXG4gICAgLy8gZnVuY3Rpb24gZm9yIGVhY2ggbm9kZS4gSWYgYWN0aW9uIHJldHVybnMgdHJ1ZSwgdHJhdmVyc2FsIGlzIGFib3J0ZWQuXG4gICAgLy8gUmV0dXJucyB0aGUgZmlyc3QgdHJ1dGh5IHZhbHVlIHJldHVybmVkIGJ5IGFjdGlvbiwgb3IgdGhlIGxhc3QgZmFsc2V5XG4gICAgLy8gdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uLlxuICAgIHQucHJvdG90eXBlLnllID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yaWdodC55ZSh0KSB8fCB0KHRoaXMua2V5LCB0aGlzLnZhbHVlKSB8fCB0aGlzLmxlZnQueWUodCk7XG4gICAgfSwgXG4gICAgLy8gUmV0dXJucyB0aGUgbWluaW11bSBub2RlIGluIHRoZSB0cmVlLlxuICAgIHQucHJvdG90eXBlLm1pbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sZWZ0LkIoKSA/IHRoaXMgOiB0aGlzLmxlZnQubWluKCk7XG4gICAgfSwgXG4gICAgLy8gUmV0dXJucyB0aGUgbWF4aW11bSBrZXkgaW4gdGhlIHRyZWUuXG4gICAgdC5wcm90b3R5cGUuVmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWluKCkua2V5O1xuICAgIH0sIFxuICAgIC8vIFJldHVybnMgdGhlIG1heGltdW0ga2V5IGluIHRoZSB0cmVlLlxuICAgIHQucHJvdG90eXBlLmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJpZ2h0LkIoKSA/IHRoaXMua2V5IDogdGhpcy5yaWdodC5nZSgpO1xuICAgIH0sIFxuICAgIC8vIFJldHVybnMgbmV3IHRyZWUsIHdpdGggdGhlIGtleS92YWx1ZSBhZGRlZC5cbiAgICB0LnByb3RvdHlwZS5BZSA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzLCBpID0gbih0LCByLmtleSk7XG4gICAgICAgIHJldHVybiAociA9IGkgPCAwID8gci5tZShudWxsLCBudWxsLCBudWxsLCByLmxlZnQuQWUodCwgZSwgbiksIG51bGwpIDogMCA9PT0gaSA/IHIubWUobnVsbCwgZSwgbnVsbCwgbnVsbCwgbnVsbCkgOiByLm1lKG51bGwsIG51bGwsIG51bGwsIG51bGwsIHIucmlnaHQuQWUodCwgZSwgbikpKS5MZSgpO1xuICAgIH0sIHQucHJvdG90eXBlLk1lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmxlZnQuQigpKSByZXR1cm4gdC5FTVBUWTtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICByZXR1cm4gZS5sZWZ0Lk9lKCkgfHwgZS5sZWZ0LmxlZnQuT2UoKSB8fCAoZSA9IGUueGUoKSksIChlID0gZS5tZShudWxsLCBudWxsLCBudWxsLCBlLmxlZnQuTWUoKSwgbnVsbCkpLkxlKCk7XG4gICAgfSwgXG4gICAgLy8gUmV0dXJucyBuZXcgdHJlZSwgd2l0aCB0aGUgc3BlY2lmaWVkIGl0ZW0gcmVtb3ZlZC5cbiAgICB0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihlLCBuKSB7XG4gICAgICAgIHZhciByLCBpID0gdGhpcztcbiAgICAgICAgaWYgKG4oZSwgaS5rZXkpIDwgMCkgaS5sZWZ0LkIoKSB8fCBpLmxlZnQuT2UoKSB8fCBpLmxlZnQubGVmdC5PZSgpIHx8IChpID0gaS54ZSgpKSwgXG4gICAgICAgIGkgPSBpLm1lKG51bGwsIG51bGwsIG51bGwsIGkubGVmdC5yZW1vdmUoZSwgbiksIG51bGwpOyBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpLmxlZnQuT2UoKSAmJiAoaSA9IGkuQmUoKSksIGkucmlnaHQuQigpIHx8IGkucmlnaHQuT2UoKSB8fCBpLnJpZ2h0LmxlZnQuT2UoKSB8fCAoaSA9IGkucWUoKSksIFxuICAgICAgICAgICAgMCA9PT0gbihlLCBpLmtleSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaS5yaWdodC5CKCkpIHJldHVybiB0LkVNUFRZO1xuICAgICAgICAgICAgICAgIHIgPSBpLnJpZ2h0Lm1pbigpLCBpID0gaS5tZShyLmtleSwgci52YWx1ZSwgbnVsbCwgbnVsbCwgaS5yaWdodC5NZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkgPSBpLm1lKG51bGwsIG51bGwsIG51bGwsIG51bGwsIGkucmlnaHQucmVtb3ZlKGUsIG4pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaS5MZSgpO1xuICAgIH0sIHQucHJvdG90eXBlLk9lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbG9yO1xuICAgIH0sIFxuICAgIC8vIFJldHVybnMgbmV3IHRyZWUgYWZ0ZXIgcGVyZm9ybWluZyBhbnkgbmVlZGVkIHJvdGF0aW9ucy5cbiAgICB0LnByb3RvdHlwZS5MZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0LnJpZ2h0Lk9lKCkgJiYgIXQubGVmdC5PZSgpICYmICh0ID0gdC5VZSgpKSwgdC5sZWZ0Lk9lKCkgJiYgdC5sZWZ0LmxlZnQuT2UoKSAmJiAodCA9IHQuQmUoKSksIFxuICAgICAgICB0LmxlZnQuT2UoKSAmJiB0LnJpZ2h0Lk9lKCkgJiYgKHQgPSB0LlFlKCkpLCB0O1xuICAgIH0sIHQucHJvdG90eXBlLnhlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy5RZSgpO1xuICAgICAgICByZXR1cm4gdC5yaWdodC5sZWZ0Lk9lKCkgJiYgKHQgPSAodCA9ICh0ID0gdC5tZShudWxsLCBudWxsLCBudWxsLCBudWxsLCB0LnJpZ2h0LkJlKCkpKS5VZSgpKS5RZSgpKSwgXG4gICAgICAgIHQ7XG4gICAgfSwgdC5wcm90b3R5cGUucWUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzLlFlKCk7XG4gICAgICAgIHJldHVybiB0LmxlZnQubGVmdC5PZSgpICYmICh0ID0gKHQgPSB0LkJlKCkpLlFlKCkpLCB0O1xuICAgIH0sIHQucHJvdG90eXBlLlVlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5tZShudWxsLCBudWxsLCB0LlJFRCwgbnVsbCwgdGhpcy5yaWdodC5sZWZ0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmlnaHQubWUobnVsbCwgbnVsbCwgdGhpcy5jb2xvciwgZSwgbnVsbCk7XG4gICAgfSwgdC5wcm90b3R5cGUuQmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLm1lKG51bGwsIG51bGwsIHQuUkVELCB0aGlzLmxlZnQucmlnaHQsIG51bGwpO1xuICAgICAgICByZXR1cm4gdGhpcy5sZWZ0Lm1lKG51bGwsIG51bGwsIHRoaXMuY29sb3IsIG51bGwsIGUpO1xuICAgIH0sIHQucHJvdG90eXBlLlFlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy5sZWZ0Lm1lKG51bGwsIG51bGwsICF0aGlzLmxlZnQuY29sb3IsIG51bGwsIG51bGwpLCBlID0gdGhpcy5yaWdodC5tZShudWxsLCBudWxsLCAhdGhpcy5yaWdodC5jb2xvciwgbnVsbCwgbnVsbCk7XG4gICAgICAgIHJldHVybiB0aGlzLm1lKG51bGwsIG51bGwsICF0aGlzLmNvbG9yLCB0LCBlKTtcbiAgICB9LCBcbiAgICAvLyBGb3IgdGVzdGluZy5cbiAgICB0LnByb3RvdHlwZS5XZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXMuamUoKTtcbiAgICAgICAgcmV0dXJuIE1hdGgucG93KDIsIHQpIDw9IHRoaXMuc2l6ZSArIDE7XG4gICAgfSwgXG4gICAgLy8gSW4gYSBiYWxhbmNlZCBSQiB0cmVlLCB0aGUgYmxhY2stZGVwdGggKG51bWJlciBvZiBibGFjayBub2RlcykgZnJvbSByb290IHRvXG4gICAgLy8gbGVhdmVzIGlzIGVxdWFsIG9uIGJvdGggc2lkZXMuICBUaGlzIGZ1bmN0aW9uIHZlcmlmaWVzIHRoYXQgb3IgYXNzZXJ0cy5cbiAgICB0LnByb3RvdHlwZS5qZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5PZSgpICYmIHRoaXMubGVmdC5PZSgpKSB0aHJvdyBnZSgpO1xuICAgICAgICBpZiAodGhpcy5yaWdodC5PZSgpKSB0aHJvdyBnZSgpO1xuICAgICAgICB2YXIgdCA9IHRoaXMubGVmdC5qZSgpO1xuICAgICAgICBpZiAodCAhPT0gdGhpcy5yaWdodC5qZSgpKSB0aHJvdyBnZSgpO1xuICAgICAgICByZXR1cm4gdCArICh0aGlzLk9lKCkgPyAwIDogMSk7XG4gICAgfSwgdDtcbn0oKTtcblxuLy8gZW5kIFNvcnRlZE1hcFxuLy8gQW4gaXRlcmF0b3Igb3ZlciBhbiBMTFJCTm9kZS5cbi8vIGVuZCBMTFJCTm9kZVxuLy8gRW1wdHkgbm9kZSBpcyBzaGFyZWQgYmV0d2VlbiBhbGwgTExSQiB0cmVlcy5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5WdC5FTVBUWSA9IG51bGwsIFZ0LlJFRCA9ICEwLCBWdC5QZSA9ICExLCBcbi8vIGVuZCBMTFJCRW1wdHlOb2RlXG5WdC5FTVBUWSA9IG5ldyAoLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KCkge1xuICAgICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcImtleVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aHJvdyBnZSgpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwidmFsdWVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhyb3cgZ2UoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcImNvbG9yXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRocm93IGdlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJsZWZ0XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRocm93IGdlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJyaWdodFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aHJvdyBnZSgpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBcbiAgICAvLyBSZXR1cm5zIGEgY29weSBvZiB0aGUgY3VycmVudCBub2RlLlxuICAgIHQucHJvdG90eXBlLm1lID0gZnVuY3Rpb24odCwgZSwgbiwgciwgaSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBcbiAgICAvLyBSZXR1cm5zIGEgY29weSBvZiB0aGUgdHJlZSwgd2l0aCB0aGUgc3BlY2lmaWVkIGtleS92YWx1ZSBhZGRlZC5cbiAgICB0LnByb3RvdHlwZS5BZSA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWdCh0LCBlKTtcbiAgICB9LCBcbiAgICAvLyBSZXR1cm5zIGEgY29weSBvZiB0aGUgdHJlZSwgd2l0aCB0aGUgc3BlY2lmaWVkIGtleSByZW1vdmVkLlxuICAgIHQucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgdC5wcm90b3R5cGUuQiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gITA7XG4gICAgfSwgdC5wcm90b3R5cGUucGUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9LCB0LnByb3RvdHlwZS55ZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuICExO1xuICAgIH0sIHQucHJvdG90eXBlLlZlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sIHQucHJvdG90eXBlLmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sIHQucHJvdG90eXBlLk9lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9LCBcbiAgICAvLyBGb3IgdGVzdGluZy5cbiAgICB0LnByb3RvdHlwZS5XZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gITA7XG4gICAgfSwgdC5wcm90b3R5cGUuamUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSwgdDtcbn0oKSk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFNvcnRlZFNldCBpcyBhbiBpbW11dGFibGUgKGNvcHktb24td3JpdGUpIGNvbGxlY3Rpb24gdGhhdCBob2xkcyBlbGVtZW50c1xuICogaW4gb3JkZXIgc3BlY2lmaWVkIGJ5IHRoZSBwcm92aWRlZCBjb21wYXJhdG9yLlxuICpcbiAqIE5PVEU6IGlmIHByb3ZpZGVkIGNvbXBhcmF0b3IgcmV0dXJucyAwIGZvciB0d28gZWxlbWVudHMsIHdlIGNvbnNpZGVyIHRoZW0gdG9cbiAqIGJlIGVxdWFsIVxuICovXG52YXIgUHQgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCkge1xuICAgICAgICB0aGlzLk4gPSB0LCB0aGlzLmRhdGEgPSBuZXcgTHQodGhpcy5OKTtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IHRoaXMuZGF0YS5nZXQodCk7XG4gICAgfSwgdC5wcm90b3R5cGUuZmlyc3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5WZSgpO1xuICAgIH0sIHQucHJvdG90eXBlLmxhc3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5nZSgpO1xuICAgIH0sIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJzaXplXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGEuc2l6ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgdC5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5pbmRleE9mKHQpO1xuICAgIH0sIFxuICAgIC8qKiBJdGVyYXRlcyBlbGVtZW50cyBpbiBvcmRlciBkZWZpbmVkIGJ5IFwiY29tcGFyYXRvclwiICovIHQucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuZGF0YS5wZSgoZnVuY3Rpb24oZSwgbikge1xuICAgICAgICAgICAgcmV0dXJuIHQoZSksICExO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqIEl0ZXJhdGVzIG92ZXIgYGVsZW1gcyBzdWNoIHRoYXQ6IHJhbmdlWzBdIDw9IGVsZW0gPCByYW5nZVsxXS4gKi8gdC5wcm90b3R5cGUuS2UgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGZvciAodmFyIG4gPSB0aGlzLmRhdGEudmUodFswXSk7IG4uJGUoKTsgKSB7XG4gICAgICAgICAgICB2YXIgciA9IG4uTmUoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLk4oci5rZXksIHRbMV0pID49IDApIHJldHVybjtcbiAgICAgICAgICAgIGUoci5rZXkpO1xuICAgICAgICB9XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBgZWxlbWBzIHN1Y2ggdGhhdDogc3RhcnQgPD0gZWxlbSB1bnRpbCBmYWxzZSBpcyByZXR1cm5lZC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5HZSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG47XG4gICAgICAgIGZvciAobiA9IHZvaWQgMCAhPT0gZSA/IHRoaXMuZGF0YS52ZShlKSA6IHRoaXMuZGF0YS5iZSgpOyBuLiRlKCk7ICkgaWYgKCF0KG4uTmUoKS5rZXkpKSByZXR1cm47XG4gICAgfSwgXG4gICAgLyoqIEZpbmRzIHRoZSBsZWFzdCBlbGVtZW50IGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgZWxlbWAuICovIHQucHJvdG90eXBlLnplID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMuZGF0YS52ZSh0KTtcbiAgICAgICAgcmV0dXJuIGUuJGUoKSA/IGUuTmUoKS5rZXkgOiBudWxsO1xuICAgIH0sIHQucHJvdG90eXBlLmJlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgVXQodGhpcy5kYXRhLmJlKCkpO1xuICAgIH0sIHQucHJvdG90eXBlLnZlID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gbmV3IFV0KHRoaXMuZGF0YS52ZSh0KSk7XG4gICAgfSwgXG4gICAgLyoqIEluc2VydHMgb3IgdXBkYXRlcyBhbiBlbGVtZW50ICovIHQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWUodGhpcy5kYXRhLnJlbW92ZSh0KS5BZSh0LCAhMCkpO1xuICAgIH0sIFxuICAgIC8qKiBEZWxldGVzIGFuIGVsZW1lbnQgKi8gdC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXModCkgPyB0aGlzLm1lKHRoaXMuZGF0YS5yZW1vdmUodCkpIDogdGhpcztcbiAgICB9LCB0LnByb3RvdHlwZS5CID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuQigpO1xuICAgIH0sIHQucHJvdG90eXBlLkhlID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSBgcmVzdWx0YCBhbHdheXMgcmVmZXJzIHRvIHRoZSBsYXJnZXIgb25lIG9mIHRoZSB0d28gc2V0cy5cbiAgICAgICAgICAgICAgICByZXR1cm4gZS5zaXplIDwgdC5zaXplICYmIChlID0gdCwgdCA9IHRoaXMpLCB0LmZvckVhY2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGUgPSBlLmFkZCh0KTtcbiAgICAgICAgfSkpLCBlO1xuICAgIH0sIHQucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmICghKGUgaW5zdGFuY2VvZiB0KSkgcmV0dXJuICExO1xuICAgICAgICBpZiAodGhpcy5zaXplICE9PSBlLnNpemUpIHJldHVybiAhMTtcbiAgICAgICAgZm9yICh2YXIgbiA9IHRoaXMuZGF0YS5iZSgpLCByID0gZS5kYXRhLmJlKCk7IG4uJGUoKTsgKSB7XG4gICAgICAgICAgICB2YXIgaSA9IG4uTmUoKS5rZXksIG8gPSByLk5lKCkua2V5O1xuICAgICAgICAgICAgaWYgKDAgIT09IHRoaXMuTihpLCBvKSkgcmV0dXJuICExO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhMDtcbiAgICB9LCB0LnByb3RvdHlwZS5XID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gW107XG4gICAgICAgIHJldHVybiB0aGlzLmZvckVhY2goKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHQucHVzaChlKTtcbiAgICAgICAgfSkpLCB0O1xuICAgIH0sIHQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gW107XG4gICAgICAgIHJldHVybiB0aGlzLmZvckVhY2goKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0LnB1c2goZSk7XG4gICAgICAgIH0pKSwgXCJTb3J0ZWRTZXQoXCIgKyB0LnRvU3RyaW5nKCkgKyBcIilcIjtcbiAgICB9LCB0LnByb3RvdHlwZS5tZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIG4gPSBuZXcgdCh0aGlzLk4pO1xuICAgICAgICByZXR1cm4gbi5kYXRhID0gZSwgbjtcbiAgICB9LCB0O1xufSgpLCBVdCA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0KSB7XG4gICAgICAgIHRoaXMuWWUgPSB0O1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuTmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWWUuTmUoKS5rZXk7XG4gICAgfSwgdC5wcm90b3R5cGUuJGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWWUuJGUoKTtcbiAgICB9LCB0O1xufSgpLCBDdCA9IG5ldyBMdChfLk4pO1xuXG5mdW5jdGlvbiBxdCgpIHtcbiAgICByZXR1cm4gQ3Q7XG59XG5cbmZ1bmN0aW9uIE10KCkge1xuICAgIHJldHVybiBxdCgpO1xufVxuXG52YXIganQgPSBuZXcgTHQoXy5OKTtcblxuZnVuY3Rpb24gRnQoKSB7XG4gICAgcmV0dXJuIGp0O1xufVxuXG52YXIgQnQgPSBuZXcgTHQoXy5OKTtcblxuZnVuY3Rpb24genQoKSB7XG4gICAgcmV0dXJuIEJ0O1xufVxuXG52YXIgR3QgPSBuZXcgUHQoXy5OKTtcblxuZnVuY3Rpb24gV3QoKSB7XG4gICAgZm9yICh2YXIgdCA9IFtdLCBlID0gMDsgZSA8IGFyZ3VtZW50cy5sZW5ndGg7IGUrKykgdFtlXSA9IGFyZ3VtZW50c1tlXTtcbiAgICBmb3IgKHZhciBuID0gR3QsIHIgPSAwLCBpID0gdDsgciA8IGkubGVuZ3RoOyByKyspIHtcbiAgICAgICAgdmFyIG8gPSBpW3JdO1xuICAgICAgICBuID0gbi5hZGQobyk7XG4gICAgfVxuICAgIHJldHVybiBuO1xufVxuXG52YXIgUXQgPSBuZXcgUHQoYmUpO1xuXG5mdW5jdGlvbiBLdCgpIHtcbiAgICByZXR1cm4gUXQ7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIERvY3VtZW50U2V0IGlzIGFuIGltbXV0YWJsZSAoY29weS1vbi13cml0ZSkgY29sbGVjdGlvbiB0aGF0IGhvbGRzIGRvY3VtZW50c1xuICogaW4gb3JkZXIgc3BlY2lmaWVkIGJ5IHRoZSBwcm92aWRlZCBjb21wYXJhdG9yLiBXZSBhbHdheXMgYWRkIGEgZG9jdW1lbnQga2V5XG4gKiBjb21wYXJhdG9yIG9uIHRvcCBvZiB3aGF0IGlzIHByb3ZpZGVkIHRvIGd1YXJhbnRlZSBkb2N1bWVudCBlcXVhbGl0eSBiYXNlZCBvblxuICogdGhlIGtleS5cbiAqLyB2YXIgWXQgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIC8qKiBUaGUgZGVmYXVsdCBvcmRlcmluZyBpcyBieSBrZXkgaWYgdGhlIGNvbXBhcmF0b3IgaXMgb21pdHRlZCAqL1xuICAgIGZ1bmN0aW9uIHQodCkge1xuICAgICAgICAvLyBXZSBhcmUgYWRkaW5nIGRvY3VtZW50IGtleSBjb21wYXJhdG9yIHRvIHRoZSBlbmQgYXMgaXQncyB0aGUgb25seVxuICAgICAgICAvLyBndWFyYW50ZWVkIHVuaXF1ZSBwcm9wZXJ0eSBvZiBhIGRvY3VtZW50LlxuICAgICAgICB0aGlzLk4gPSB0ID8gZnVuY3Rpb24oZSwgbikge1xuICAgICAgICAgICAgcmV0dXJuIHQoZSwgbikgfHwgXy5OKGUua2V5LCBuLmtleSk7XG4gICAgICAgIH0gOiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gXy5OKHQua2V5LCBlLmtleSk7XG4gICAgICAgIH0sIHRoaXMuSmUgPSBGdCgpLCB0aGlzLlhlID0gbmV3IEx0KHRoaXMuTilcbiAgICAgICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBlbXB0eSBjb3B5IG9mIHRoZSBleGlzdGluZyBEb2N1bWVudFNldCwgdXNpbmcgdGhlIHNhbWVcbiAgICAgKiBjb21wYXJhdG9yLlxuICAgICAqLztcbiAgICB9XG4gICAgcmV0dXJuIHQuWmUgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBuZXcgdChlLk4pO1xuICAgIH0sIHQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT0gdGhpcy5KZS5nZXQodCk7XG4gICAgfSwgdC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5KZS5nZXQodCk7XG4gICAgfSwgdC5wcm90b3R5cGUuZmlyc3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWGUuVmUoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5sYXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlhlLmdlKCk7XG4gICAgfSwgdC5wcm90b3R5cGUuQiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5YZS5CKCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIHByb3ZpZGVkIGtleSBpbiB0aGUgZG9jdW1lbnQgc2V0LCBvciAtMSBpZiB0aGVcbiAgICAgKiBkb2N1bWVudCBrZXkgaXMgbm90IHByZXNlbnQgaW4gdGhlIHNldDtcbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMuSmUuZ2V0KHQpO1xuICAgICAgICByZXR1cm4gZSA/IHRoaXMuWGUuaW5kZXhPZihlKSA6IC0xO1xuICAgIH0sIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJzaXplXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlhlLnNpemU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIFxuICAgIC8qKiBJdGVyYXRlcyBkb2N1bWVudHMgaW4gb3JkZXIgZGVmaW5lZCBieSBcImNvbXBhcmF0b3JcIiAqLyB0LnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLlhlLnBlKChmdW5jdGlvbihlLCBuKSB7XG4gICAgICAgICAgICByZXR1cm4gdChlKSwgITE7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKiogSW5zZXJ0cyBvciB1cGRhdGVzIGEgZG9jdW1lbnQgd2l0aCB0aGUgc2FtZSBrZXkgKi8gdC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24odCkge1xuICAgICAgICAvLyBGaXJzdCByZW1vdmUgdGhlIGVsZW1lbnQgaWYgd2UgaGF2ZSBpdC5cbiAgICAgICAgdmFyIGUgPSB0aGlzLmRlbGV0ZSh0LmtleSk7XG4gICAgICAgIHJldHVybiBlLm1lKGUuSmUuQWUodC5rZXksIHQpLCBlLlhlLkFlKHQsIG51bGwpKTtcbiAgICB9LCBcbiAgICAvKiogRGVsZXRlcyBhIGRvY3VtZW50IHdpdGggYSBnaXZlbiBrZXkgKi8gdC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMuZ2V0KHQpO1xuICAgICAgICByZXR1cm4gZSA/IHRoaXMubWUodGhpcy5KZS5yZW1vdmUodCksIHRoaXMuWGUucmVtb3ZlKGUpKSA6IHRoaXM7XG4gICAgfSwgdC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKCEoZSBpbnN0YW5jZW9mIHQpKSByZXR1cm4gITE7XG4gICAgICAgIGlmICh0aGlzLnNpemUgIT09IGUuc2l6ZSkgcmV0dXJuICExO1xuICAgICAgICBmb3IgKHZhciBuID0gdGhpcy5YZS5iZSgpLCByID0gZS5YZS5iZSgpOyBuLiRlKCk7ICkge1xuICAgICAgICAgICAgdmFyIGkgPSBuLk5lKCkua2V5LCBvID0gci5OZSgpLmtleTtcbiAgICAgICAgICAgIGlmICghaS5pc0VxdWFsKG8pKSByZXR1cm4gITE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEwO1xuICAgIH0sIHQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gW107XG4gICAgICAgIHJldHVybiB0aGlzLmZvckVhY2goKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHQucHVzaChlLnRvU3RyaW5nKCkpO1xuICAgICAgICB9KSksIDAgPT09IHQubGVuZ3RoID8gXCJEb2N1bWVudFNldCAoKVwiIDogXCJEb2N1bWVudFNldCAoXFxuICBcIiArIHQuam9pbihcIiAgXFxuXCIpICsgXCJcXG4pXCI7XG4gICAgfSwgdC5wcm90b3R5cGUubWUgPSBmdW5jdGlvbihlLCBuKSB7XG4gICAgICAgIHZhciByID0gbmV3IHQ7XG4gICAgICAgIHJldHVybiByLk4gPSB0aGlzLk4sIHIuSmUgPSBlLCByLlhlID0gbiwgcjtcbiAgICB9LCB0O1xufSgpLCAkdCA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCgpIHtcbiAgICAgICAgdGhpcy50cyA9IG5ldyBMdChfLk4pO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUudHJhY2sgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdC5kb2Mua2V5LCBuID0gdGhpcy50cy5nZXQoZSk7XG4gICAgICAgIG4gPyBcbiAgICAgICAgLy8gTWVyZ2UgdGhlIG5ldyBjaGFuZ2Ugd2l0aCB0aGUgZXhpc3RpbmcgY2hhbmdlLlxuICAgICAgICAwIC8qIEFkZGVkICovICE9PSB0LnR5cGUgJiYgMyAvKiBNZXRhZGF0YSAqLyA9PT0gbi50eXBlID8gdGhpcy50cyA9IHRoaXMudHMuQWUoZSwgdCkgOiAzIC8qIE1ldGFkYXRhICovID09PSB0LnR5cGUgJiYgMSAvKiBSZW1vdmVkICovICE9PSBuLnR5cGUgPyB0aGlzLnRzID0gdGhpcy50cy5BZShlLCB7XG4gICAgICAgICAgICB0eXBlOiBuLnR5cGUsXG4gICAgICAgICAgICBkb2M6IHQuZG9jXG4gICAgICAgIH0pIDogMiAvKiBNb2RpZmllZCAqLyA9PT0gdC50eXBlICYmIDIgLyogTW9kaWZpZWQgKi8gPT09IG4udHlwZSA/IHRoaXMudHMgPSB0aGlzLnRzLkFlKGUsIHtcbiAgICAgICAgICAgIHR5cGU6IDIgLyogTW9kaWZpZWQgKi8gLFxuICAgICAgICAgICAgZG9jOiB0LmRvY1xuICAgICAgICB9KSA6IDIgLyogTW9kaWZpZWQgKi8gPT09IHQudHlwZSAmJiAwIC8qIEFkZGVkICovID09PSBuLnR5cGUgPyB0aGlzLnRzID0gdGhpcy50cy5BZShlLCB7XG4gICAgICAgICAgICB0eXBlOiAwIC8qIEFkZGVkICovICxcbiAgICAgICAgICAgIGRvYzogdC5kb2NcbiAgICAgICAgfSkgOiAxIC8qIFJlbW92ZWQgKi8gPT09IHQudHlwZSAmJiAwIC8qIEFkZGVkICovID09PSBuLnR5cGUgPyB0aGlzLnRzID0gdGhpcy50cy5yZW1vdmUoZSkgOiAxIC8qIFJlbW92ZWQgKi8gPT09IHQudHlwZSAmJiAyIC8qIE1vZGlmaWVkICovID09PSBuLnR5cGUgPyB0aGlzLnRzID0gdGhpcy50cy5BZShlLCB7XG4gICAgICAgICAgICB0eXBlOiAxIC8qIFJlbW92ZWQgKi8gLFxuICAgICAgICAgICAgZG9jOiBuLmRvY1xuICAgICAgICB9KSA6IDAgLyogQWRkZWQgKi8gPT09IHQudHlwZSAmJiAxIC8qIFJlbW92ZWQgKi8gPT09IG4udHlwZSA/IHRoaXMudHMgPSB0aGlzLnRzLkFlKGUsIHtcbiAgICAgICAgICAgIHR5cGU6IDIgLyogTW9kaWZpZWQgKi8gLFxuICAgICAgICAgICAgZG9jOiB0LmRvY1xuICAgICAgICB9KSA6IFxuICAgICAgICAvLyBUaGlzIGluY2x1ZGVzIHRoZXNlIGNhc2VzLCB3aGljaCBkb24ndCBtYWtlIHNlbnNlOlxuICAgICAgICAvLyBBZGRlZC0+QWRkZWRcbiAgICAgICAgLy8gUmVtb3ZlZC0+UmVtb3ZlZFxuICAgICAgICAvLyBNb2RpZmllZC0+QWRkZWRcbiAgICAgICAgLy8gUmVtb3ZlZC0+TW9kaWZpZWRcbiAgICAgICAgLy8gTWV0YWRhdGEtPkFkZGVkXG4gICAgICAgIC8vIFJlbW92ZWQtPk1ldGFkYXRhXG4gICAgICAgIGdlKCkgOiB0aGlzLnRzID0gdGhpcy50cy5BZShlLCB0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5lcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IFtdO1xuICAgICAgICByZXR1cm4gdGhpcy50cy5wZSgoZnVuY3Rpb24oZSwgbikge1xuICAgICAgICAgICAgdC5wdXNoKG4pO1xuICAgICAgICB9KSksIHQ7XG4gICAgfSwgdDtcbn0oKSwgSnQgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSwgbiwgciwgaSwgbywgcywgdSkge1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gdCwgdGhpcy5kb2NzID0gZSwgdGhpcy5zcyA9IG4sIHRoaXMuZG9jQ2hhbmdlcyA9IHIsIHRoaXMubnMgPSBpLCB0aGlzLmZyb21DYWNoZSA9IG8sIFxuICAgICAgICB0aGlzLnJzID0gcywgdGhpcy5ocyA9IHVcbiAgICAgICAgLyoqIFJldHVybnMgYSB2aWV3IHNuYXBzaG90IGFzIGlmIGFsbCBkb2N1bWVudHMgaW4gdGhlIHNuYXBzaG90IHdlcmUgYWRkZWQuICovO1xuICAgIH1cbiAgICByZXR1cm4gdC5vcyA9IGZ1bmN0aW9uKGUsIG4sIHIsIGkpIHtcbiAgICAgICAgdmFyIG8gPSBbXTtcbiAgICAgICAgcmV0dXJuIG4uZm9yRWFjaCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgby5wdXNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAwIC8qIEFkZGVkICovICxcbiAgICAgICAgICAgICAgICBkb2M6IHRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KSksIG5ldyB0KGUsIG4sIFl0LlplKG4pLCBvLCByLCBpLCBcbiAgICAgICAgLyogc3luY1N0YXRlQ2hhbmdlZD0gKi8gITAsIFxuICAgICAgICAvKiBleGNsdWRlc01ldGFkYXRhQ2hhbmdlcz0gKi8gITEpO1xuICAgIH0sIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJoYXNQZW5kaW5nV3JpdGVzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAhdGhpcy5ucy5CKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIHQucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGlmICghKHRoaXMuZnJvbUNhY2hlID09PSB0LmZyb21DYWNoZSAmJiB0aGlzLnJzID09PSB0LnJzICYmIHRoaXMubnMuaXNFcXVhbCh0Lm5zKSAmJiB0aGlzLnF1ZXJ5LmlzRXF1YWwodC5xdWVyeSkgJiYgdGhpcy5kb2NzLmlzRXF1YWwodC5kb2NzKSAmJiB0aGlzLnNzLmlzRXF1YWwodC5zcykpKSByZXR1cm4gITE7XG4gICAgICAgIHZhciBlID0gdGhpcy5kb2NDaGFuZ2VzLCBuID0gdC5kb2NDaGFuZ2VzO1xuICAgICAgICBpZiAoZS5sZW5ndGggIT09IG4ubGVuZ3RoKSByZXR1cm4gITE7XG4gICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgZS5sZW5ndGg7IHIrKykgaWYgKGVbcl0udHlwZSAhPT0gbltyXS50eXBlIHx8ICFlW3JdLmRvYy5pc0VxdWFsKG5bcl0uZG9jKSkgcmV0dXJuICExO1xuICAgICAgICByZXR1cm4gITA7XG4gICAgfSwgdDtcbn0oKSwgSHQgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoXG4gICAgLyoqXG4gICAgICogVGhlIHNuYXBzaG90IHZlcnNpb24gdGhpcyBldmVudCBicmluZ3MgdXMgdXAgdG8sIG9yIE1JTiBpZiBub3Qgc2V0LlxuICAgICAqL1xuICAgIHQsIFxuICAgIC8qKlxuICAgICAqIEEgbWFwIGZyb20gdGFyZ2V0IHRvIGNoYW5nZXMgdG8gdGhlIHRhcmdldC4gU2VlIFRhcmdldENoYW5nZS5cbiAgICAgKi9cbiAgICBlLCBcbiAgICAvKipcbiAgICAgKiBBIHNldCBvZiB0YXJnZXRzIHRoYXQgaXMga25vd24gdG8gYmUgaW5jb25zaXN0ZW50LiBMaXN0ZW5zIGZvciB0aGVzZVxuICAgICAqIHRhcmdldHMgc2hvdWxkIGJlIHJlLWVzdGFibGlzaGVkIHdpdGhvdXQgcmVzdW1lIHRva2Vucy5cbiAgICAgKi9cbiAgICBuLCBcbiAgICAvKipcbiAgICAgKiBBIHNldCBvZiB3aGljaCBkb2N1bWVudHMgaGF2ZSBjaGFuZ2VkIG9yIGJlZW4gZGVsZXRlZCwgYWxvbmcgd2l0aCB0aGVcbiAgICAgKiBkb2MncyBuZXcgdmFsdWVzIChpZiBub3QgZGVsZXRlZCkuXG4gICAgICovXG4gICAgciwgXG4gICAgLyoqXG4gICAgICogQSBzZXQgb2Ygd2hpY2ggZG9jdW1lbnQgdXBkYXRlcyBhcmUgZHVlIG9ubHkgdG8gbGltYm8gcmVzb2x1dGlvbiB0YXJnZXRzLlxuICAgICAqL1xuICAgIGkpIHtcbiAgICAgICAgdGhpcy5FZSA9IHQsIHRoaXMuYXMgPSBlLCB0aGlzLnVzID0gbiwgdGhpcy5jcyA9IHIsIHRoaXMuX3MgPSBpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBIQUNLOiBWaWV3cyByZXF1aXJlIFJlbW90ZUV2ZW50cyBpbiBvcmRlciB0byBkZXRlcm1pbmUgd2hldGhlciB0aGUgdmlldyBpc1xuICAgICAqIENVUlJFTlQsIGJ1dCBzZWNvbmRhcnkgdGFicyBkb24ndCByZWNlaXZlIHJlbW90ZSBldmVudHMuIFNvIHRoaXMgbWV0aG9kIGlzXG4gICAgICogdXNlZCB0byBjcmVhdGUgYSBzeW50aGVzaXplZCBSZW1vdGVFdmVudCB0aGF0IGNhbiBiZSB1c2VkIHRvIGFwcGx5IGFcbiAgICAgKiBDVVJSRU5UIHN0YXR1cyBjaGFuZ2UgdG8gYSBWaWV3LCBmb3IgcXVlcmllcyBleGVjdXRlZCBpbiBhIGRpZmZlcmVudCB0YWIuXG4gICAgICovXG4gICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS10YWIgb25seVxuICAgICAgICByZXR1cm4gdC5scyA9IGZ1bmN0aW9uKGUsIG4pIHtcbiAgICAgICAgdmFyIHIgPSBuZXcgTWFwO1xuICAgICAgICByZXR1cm4gci5zZXQoZSwgWHQuZHMoZSwgbikpLCBuZXcgdChnLm1pbigpLCByLCBLdCgpLCBxdCgpLCBXdCgpKTtcbiAgICB9LCB0O1xufSgpLCBYdCA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdChcbiAgICAvKipcbiAgICAgKiBBbiBvcGFxdWUsIHNlcnZlci1hc3NpZ25lZCB0b2tlbiB0aGF0IGFsbG93cyB3YXRjaGluZyBhIHF1ZXJ5IHRvIGJlIHJlc3VtZWRcbiAgICAgKiBhZnRlciBkaXNjb25uZWN0aW5nIHdpdGhvdXQgcmV0cmFuc21pdHRpbmcgYWxsIHRoZSBkYXRhIHRoYXQgbWF0Y2hlcyB0aGVcbiAgICAgKiBxdWVyeS4gVGhlIHJlc3VtZSB0b2tlbiBlc3NlbnRpYWxseSBpZGVudGlmaWVzIGEgcG9pbnQgaW4gdGltZSBmcm9tIHdoaWNoXG4gICAgICogdGhlIHNlcnZlciBzaG91bGQgcmVzdW1lIHNlbmRpbmcgcmVzdWx0cy5cbiAgICAgKi9cbiAgICB0LCBcbiAgICAvKipcbiAgICAgKiBUaGUgXCJjdXJyZW50XCIgKHN5bmNlZCkgc3RhdHVzIG9mIHRoaXMgdGFyZ2V0LiBOb3RlIHRoYXQgXCJjdXJyZW50XCJcbiAgICAgKiBoYXMgc3BlY2lhbCBtZWFuaW5nIGluIHRoZSBSUEMgcHJvdG9jb2wgdGhhdCBpbXBsaWVzIHRoYXQgYSB0YXJnZXQgaXNcbiAgICAgKiBib3RoIHVwLXRvLWRhdGUgYW5kIGNvbnNpc3RlbnQgd2l0aCB0aGUgcmVzdCBvZiB0aGUgd2F0Y2ggc3RyZWFtLlxuICAgICAqL1xuICAgIGUsIFxuICAgIC8qKlxuICAgICAqIFRoZSBzZXQgb2YgZG9jdW1lbnRzIHRoYXQgd2VyZSBuZXdseSBhc3NpZ25lZCB0byB0aGlzIHRhcmdldCBhcyBwYXJ0IG9mXG4gICAgICogdGhpcyByZW1vdGUgZXZlbnQuXG4gICAgICovXG4gICAgbiwgXG4gICAgLyoqXG4gICAgICogVGhlIHNldCBvZiBkb2N1bWVudHMgdGhhdCB3ZXJlIGFscmVhZHkgYXNzaWduZWQgdG8gdGhpcyB0YXJnZXQgYnV0IHJlY2VpdmVkXG4gICAgICogYW4gdXBkYXRlIGR1cmluZyB0aGlzIHJlbW90ZSBldmVudC5cbiAgICAgKi9cbiAgICByLCBcbiAgICAvKipcbiAgICAgKiBUaGUgc2V0IG9mIGRvY3VtZW50cyB0aGF0IHdlcmUgcmVtb3ZlZCBmcm9tIHRoaXMgdGFyZ2V0IGFzIHBhcnQgb2YgdGhpc1xuICAgICAqIHJlbW90ZSBldmVudC5cbiAgICAgKi9cbiAgICBpKSB7XG4gICAgICAgIHRoaXMucmVzdW1lVG9rZW4gPSB0LCB0aGlzLmZzID0gZSwgdGhpcy5UcyA9IG4sIHRoaXMuRXMgPSByLCB0aGlzLklzID0gaVxuICAgICAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIGNyZWF0ZSBhIHN5bnRoZXNpemVkIFRhcmdldENoYW5nZXMgdGhhdCBjYW4gYmUgdXNlZCB0b1xuICAgICAqIGFwcGx5IGEgQ1VSUkVOVCBzdGF0dXMgY2hhbmdlIHRvIGEgVmlldyAoZm9yIHF1ZXJpZXMgZXhlY3V0ZWQgaW4gYSBkaWZmZXJlbnRcbiAgICAgKiB0YWIpIG9yIGZvciBuZXcgcXVlcmllcyAodG8gcmFpc2Ugc25hcHNob3RzIHdpdGggY29ycmVjdCBDVVJSRU5UIHN0YXR1cykuXG4gICAgICovO1xuICAgIH1cbiAgICByZXR1cm4gdC5kcyA9IGZ1bmN0aW9uKGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0KEEuaHQsIG4sIFd0KCksIFd0KCksIFd0KCkpO1xuICAgIH0sIHQ7XG59KCksIFp0ID0gZnVuY3Rpb24oXG4vKiogVGhlIG5ldyBkb2N1bWVudCBhcHBsaWVzIHRvIGFsbCBvZiB0aGVzZSB0YXJnZXRzLiAqL1xudCwgXG4vKiogVGhlIG5ldyBkb2N1bWVudCBpcyByZW1vdmVkIGZyb20gYWxsIG9mIHRoZXNlIHRhcmdldHMuICovXG5lLCBcbi8qKiBUaGUga2V5IG9mIHRoZSBkb2N1bWVudCBmb3IgdGhpcyBjaGFuZ2UuICovXG5uLCBcbi8qKlxuICAgICAqIFRoZSBuZXcgZG9jdW1lbnQgb3IgTm9Eb2N1bWVudCBpZiBpdCB3YXMgZGVsZXRlZC4gSXMgbnVsbCBpZiB0aGVcbiAgICAgKiBkb2N1bWVudCB3ZW50IG91dCBvZiB2aWV3IHdpdGhvdXQgdGhlIHNlcnZlciBzZW5kaW5nIGEgbmV3IGRvY3VtZW50LlxuICAgICAqL1xucikge1xuICAgIHRoaXMud3MgPSB0LCB0aGlzLnJlbW92ZWRUYXJnZXRJZHMgPSBlLCB0aGlzLmtleSA9IG4sIHRoaXMuUnMgPSByO1xufSwgdGUgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgdGhpcy50YXJnZXRJZCA9IHQsIHRoaXMuQXMgPSBlO1xufSwgZWUgPSBmdW5jdGlvbihcbi8qKiBXaGF0IGtpbmQgb2YgY2hhbmdlIG9jY3VycmVkIHRvIHRoZSB3YXRjaCB0YXJnZXQuICovXG50LCBcbi8qKiBUaGUgdGFyZ2V0IElEcyB0aGF0IHdlcmUgYWRkZWQvcmVtb3ZlZC9zZXQuICovXG5lLCBcbi8qKlxuICAgICAqIEFuIG9wYXF1ZSwgc2VydmVyLWFzc2lnbmVkIHRva2VuIHRoYXQgYWxsb3dzIHdhdGNoaW5nIGEgdGFyZ2V0IHRvIGJlXG4gICAgICogcmVzdW1lZCBhZnRlciBkaXNjb25uZWN0aW5nIHdpdGhvdXQgcmV0cmFuc21pdHRpbmcgYWxsIHRoZSBkYXRhIHRoYXRcbiAgICAgKiBtYXRjaGVzIHRoZSB0YXJnZXQuIFRoZSByZXN1bWUgdG9rZW4gZXNzZW50aWFsbHkgaWRlbnRpZmllcyBhIHBvaW50IGluXG4gICAgICogdGltZSBmcm9tIHdoaWNoIHRoZSBzZXJ2ZXIgc2hvdWxkIHJlc3VtZSBzZW5kaW5nIHJlc3VsdHMuXG4gICAgICovXG5uXG4vKiogQW4gUlBDIGVycm9yIGluZGljYXRpbmcgd2h5IHRoZSB3YXRjaCBmYWlsZWQuICovICwgcikge1xuICAgIHZvaWQgMCA9PT0gbiAmJiAobiA9IEEuaHQpLCB2b2lkIDAgPT09IHIgJiYgKHIgPSBudWxsKSwgdGhpcy5zdGF0ZSA9IHQsIHRoaXMudGFyZ2V0SWRzID0gZSwgXG4gICAgdGhpcy5yZXN1bWVUb2tlbiA9IG4sIHRoaXMuY2F1c2UgPSByO1xufSwgbmUgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbnVtYmVyIG9mIHBlbmRpbmcgcmVzcG9uc2VzIChhZGRzIG9yIHJlbW92ZXMpIHRoYXQgd2UgYXJlIHdhaXRpbmcgb24uXG4gICAgICAgICAqIFdlIG9ubHkgY29uc2lkZXIgdGFyZ2V0cyBhY3RpdmUgdGhhdCBoYXZlIG5vIHBlbmRpbmcgcmVzcG9uc2VzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tcyA9IDAsIFxuICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEtlZXBzIHRyYWNrIG9mIHRoZSBkb2N1bWVudCBjaGFuZ2VzIHNpbmNlIHRoZSBsYXN0IHJhaXNlZCBzbmFwc2hvdC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBUaGVzZSBjaGFuZ2VzIGFyZSBjb250aW51b3VzbHkgdXBkYXRlZCBhcyB3ZSByZWNlaXZlIGRvY3VtZW50IHVwZGF0ZXMgYW5kXG4gICAgICAgICAgICAgKiBhbHdheXMgcmVmbGVjdCB0aGUgY3VycmVudCBzZXQgb2YgY2hhbmdlcyBhZ2FpbnN0IHRoZSBsYXN0IGlzc3VlZCBzbmFwc2hvdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICB0aGlzLlBzID0gb2UoKSwgXG4gICAgICAgIC8qKiBTZWUgcHVibGljIGdldHRlcnMgZm9yIGV4cGxhbmF0aW9ucyBvZiB0aGVzZSBmaWVsZHMuICovXG4gICAgICAgIHRoaXMuVnMgPSBBLmh0LCB0aGlzLmdzID0gITEsIFxuICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFdoZXRoZXIgdGhpcyB0YXJnZXQgc3RhdGUgc2hvdWxkIGJlIGluY2x1ZGVkIGluIHRoZSBuZXh0IHNuYXBzaG90LiBXZVxuICAgICAgICAgICAgICogaW5pdGlhbGl6ZSB0byB0cnVlIHNvIHRoYXQgbmV3bHktYWRkZWQgdGFyZ2V0cyBhcmUgaW5jbHVkZWQgaW4gdGhlIG5leHRcbiAgICAgICAgICAgICAqIFJlbW90ZUV2ZW50LlxuICAgICAgICAgICAgICovXG4gICAgICAgIHRoaXMucHMgPSAhMDtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJmc1wiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIHRoaXMgdGFyZ2V0IGhhcyBiZWVuIG1hcmtlZCAnY3VycmVudCcuXG4gICAgICAgICAqXG4gICAgICAgICAqICdDdXJyZW50JyBoYXMgc3BlY2lhbCBtZWFuaW5nIGluIHRoZSBSUEMgcHJvdG9jb2w6IEl0IGltcGxpZXMgdGhhdCB0aGVcbiAgICAgICAgICogV2F0Y2ggYmFja2VuZCBoYXMgc2VudCB1cyBhbGwgY2hhbmdlcyB1cCB0byB0aGUgcG9pbnQgYXQgd2hpY2ggdGhlIHRhcmdldFxuICAgICAgICAgKiB3YXMgYWRkZWQgYW5kIHRoYXQgdGhlIHRhcmdldCBpcyBjb25zaXN0ZW50IHdpdGggdGhlIHJlc3Qgb2YgdGhlIHdhdGNoXG4gICAgICAgICAqIHN0cmVhbS5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ncztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcInJlc3VtZVRva2VuXCIsIHtcbiAgICAgICAgLyoqIFRoZSBsYXN0IHJlc3VtZSB0b2tlbiBzZW50IHRvIHVzIGZvciB0aGlzIHRhcmdldC4gKi8gZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlZzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwieXNcIiwge1xuICAgICAgICAvKiogV2hldGhlciB0aGlzIHRhcmdldCBoYXMgcGVuZGluZyB0YXJnZXQgYWRkcyBvciB0YXJnZXQgcmVtb3Zlcy4gKi8gZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAwICE9PSB0aGlzLm1zO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwiYnNcIiwge1xuICAgICAgICAvKiogV2hldGhlciB3ZSBoYXZlIG1vZGlmaWVkIGFueSBzdGF0ZSB0aGF0IHNob3VsZCB0cmlnZ2VyIGEgc25hcHNob3QuICovIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgXG4gICAgLyoqXG4gICAgICogQXBwbGllcyB0aGUgcmVzdW1lIHRva2VuIHRvIHRoZSBUYXJnZXRDaGFuZ2UsIGJ1dCBvbmx5IHdoZW4gaXQgaGFzIGEgbmV3XG4gICAgICogdmFsdWUuIEVtcHR5IHJlc3VtZVRva2VucyBhcmUgZGlzY2FyZGVkLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLnZzID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0LnJ0KCkgPiAwICYmICh0aGlzLnBzID0gITAsIHRoaXMuVnMgPSB0KTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdGFyZ2V0IGNoYW5nZSBmcm9tIHRoZSBjdXJyZW50IHNldCBvZiBjaGFuZ2VzLlxuICAgICAqXG4gICAgICogVG8gcmVzZXQgdGhlIGRvY3VtZW50IGNoYW5nZXMgYWZ0ZXIgcmFpc2luZyB0aGlzIHNuYXBzaG90LCBjYWxsXG4gICAgICogYGNsZWFyUGVuZGluZ0NoYW5nZXMoKWAuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuU3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSBXdCgpLCBlID0gV3QoKSwgbiA9IFd0KCk7XG4gICAgICAgIHJldHVybiB0aGlzLlBzLmZvckVhY2goKGZ1bmN0aW9uKHIsIGkpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoaSkge1xuICAgICAgICAgICAgICBjYXNlIDAgLyogQWRkZWQgKi8gOlxuICAgICAgICAgICAgICAgIHQgPSB0LmFkZChyKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDIgLyogTW9kaWZpZWQgKi8gOlxuICAgICAgICAgICAgICAgIGUgPSBlLmFkZChyKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDEgLyogUmVtb3ZlZCAqLyA6XG4gICAgICAgICAgICAgICAgbiA9IG4uYWRkKHIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgZ2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpLCBuZXcgWHQodGhpcy5WcywgdGhpcy5ncywgdCwgZSwgbik7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmVzZXRzIHRoZSBkb2N1bWVudCBjaGFuZ2VzIGFuZCBzZXRzIGBoYXNQZW5kaW5nQ2hhbmdlc2AgdG8gZmFsc2UuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuRHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5wcyA9ICExLCB0aGlzLlBzID0gb2UoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5DcyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdGhpcy5wcyA9ICEwLCB0aGlzLlBzID0gdGhpcy5Qcy5BZSh0LCBlKTtcbiAgICB9LCB0LnByb3RvdHlwZS5GcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5wcyA9ICEwLCB0aGlzLlBzID0gdGhpcy5Qcy5yZW1vdmUodCk7XG4gICAgfSwgdC5wcm90b3R5cGUuTnMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5tcyArPSAxO1xuICAgIH0sIHQucHJvdG90eXBlLiRzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMubXMgLT0gMTtcbiAgICB9LCB0LnByb3RvdHlwZS5rcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnBzID0gITAsIHRoaXMuZ3MgPSAhMDtcbiAgICB9LCB0O1xufSgpLCByZSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0KSB7XG4gICAgICAgIHRoaXMuTHMgPSB0LCBcbiAgICAgICAgLyoqIFRoZSBpbnRlcm5hbCBzdGF0ZSBvZiBhbGwgdHJhY2tlZCB0YXJnZXRzLiAqL1xuICAgICAgICB0aGlzLk1zID0gbmV3IE1hcCwgXG4gICAgICAgIC8qKiBLZWVwcyB0cmFjayBvZiB0aGUgZG9jdW1lbnRzIHRvIHVwZGF0ZSBzaW5jZSB0aGUgbGFzdCByYWlzZWQgc25hcHNob3QuICovXG4gICAgICAgIHRoaXMuT3MgPSBxdCgpLCBcbiAgICAgICAgLyoqIEEgbWFwcGluZyBvZiBkb2N1bWVudCBrZXlzIHRvIHRoZWlyIHNldCBvZiB0YXJnZXQgSURzLiAqL1xuICAgICAgICB0aGlzLnhzID0gaWUoKSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgICAgICogQSBsaXN0IG9mIHRhcmdldHMgd2l0aCBleGlzdGVuY2UgZmlsdGVyIG1pc21hdGNoZXMuIFRoZXNlIHRhcmdldHMgYXJlXG4gICAgICAgICAgICAgKiBrbm93biB0byBiZSBpbmNvbnNpc3RlbnQgYW5kIHRoZWlyIGxpc3RlbnMgbmVlZHMgdG8gYmUgcmUtZXN0YWJsaXNoZWQgYnlcbiAgICAgICAgICAgICAqIFJlbW90ZVN0b3JlLlxuICAgICAgICAgICAgICovXG4gICAgICAgIHRoaXMuQnMgPSBuZXcgUHQoYmUpXG4gICAgICAgIC8qKlxuICAgICAqIFByb2Nlc3NlcyBhbmQgYWRkcyB0aGUgRG9jdW1lbnRXYXRjaENoYW5nZSB0byB0aGUgY3VycmVudCBzZXQgb2YgY2hhbmdlcy5cbiAgICAgKi87XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5xcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgZSA9IDAsIG4gPSB0LndzOyBlIDwgbi5sZW5ndGg7IGUrKykge1xuICAgICAgICAgICAgdmFyIHIgPSBuW2VdO1xuICAgICAgICAgICAgdC5ScyBpbnN0YW5jZW9mIHl0ID8gdGhpcy5VcyhyLCB0LlJzKSA6IHQuUnMgaW5zdGFuY2VvZiB2dCAmJiB0aGlzLlFzKHIsIHQua2V5LCB0LlJzKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbyA9IHQucmVtb3ZlZFRhcmdldElkczsgaSA8IG8ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzID0gb1tpXTtcbiAgICAgICAgICAgIHRoaXMuUXMocywgdC5rZXksIHQuUnMpO1xuICAgICAgICB9XG4gICAgfSwgXG4gICAgLyoqIFByb2Nlc3NlcyBhbmQgYWRkcyB0aGUgV2F0Y2hUYXJnZXRDaGFuZ2UgdG8gdGhlIGN1cnJlbnQgc2V0IG9mIGNoYW5nZXMuICovIHQucHJvdG90eXBlLldzID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIHRoaXMuanModCwgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIHZhciByID0gZS5LcyhuKTtcbiAgICAgICAgICAgIHN3aXRjaCAodC5zdGF0ZSkge1xuICAgICAgICAgICAgICBjYXNlIDAgLyogTm9DaGFuZ2UgKi8gOlxuICAgICAgICAgICAgICAgIGUuR3MobikgJiYgci52cyh0LnJlc3VtZVRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDEgLyogQWRkZWQgKi8gOlxuICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gZGVjcmVtZW50IHRoZSBudW1iZXIgb2YgcGVuZGluZyBhY2tzIG5lZWRlZCBmcm9tIHdhdGNoXG4gICAgICAgICAgICAgICAgLy8gZm9yIHRoaXMgdGFyZ2V0SWQuXG4gICAgICAgICAgICAgICAgci4kcygpLCByLnlzIHx8IFxuICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgYSBmcmVzaGx5IGFkZGVkIHRhcmdldCwgc28gd2UgbmVlZCB0byByZXNldCBhbnkgc3RhdGVcbiAgICAgICAgICAgICAgICAvLyB0aGF0IHdlIGhhZCBwcmV2aW91c2x5LiBUaGlzIGNhbiBoYXBwZW4gZS5nLiB3aGVuIHJlbW92ZSBhbmQgYWRkXG4gICAgICAgICAgICAgICAgLy8gYmFjayBhIHRhcmdldCBmb3IgZXhpc3RlbmNlIGZpbHRlciBtaXNtYXRjaGVzLlxuICAgICAgICAgICAgICAgIHIuRHMoKSwgci52cyh0LnJlc3VtZVRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDIgLyogUmVtb3ZlZCAqLyA6XG4gICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBrZWVwIHRyYWNrIG9mIHJlbW92ZWQgdGFyZ2V0cyB0byB3ZSBjYW4gcG9zdC1maWx0ZXIgYW5kXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGFueSB0YXJnZXQgY2hhbmdlcy5cbiAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGRlY3JlbWVudCB0aGUgbnVtYmVyIG9mIHBlbmRpbmcgYWNrcyBuZWVkZWQgZnJvbSB3YXRjaFxuICAgICAgICAgICAgICAgIC8vIGZvciB0aGlzIHRhcmdldElkLlxuICAgICAgICAgICAgICAgIHIuJHMoKSwgci55cyB8fCBlLnJlbW92ZVRhcmdldChuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDMgLyogQ3VycmVudCAqLyA6XG4gICAgICAgICAgICAgICAgZS5HcyhuKSAmJiAoci5rcygpLCByLnZzKHQucmVzdW1lVG9rZW4pKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDQgLyogUmVzZXQgKi8gOlxuICAgICAgICAgICAgICAgIGUuR3MobikgJiYgKFxuICAgICAgICAgICAgICAgIC8vIFJlc2V0IHRoZSB0YXJnZXQgYW5kIHN5bnRoZXNpemVzIHJlbW92ZXMgZm9yIGFsbCBleGlzdGluZ1xuICAgICAgICAgICAgICAgIC8vIGRvY3VtZW50cy4gVGhlIGJhY2tlbmQgd2lsbCByZS1hZGQgYW55IGRvY3VtZW50cyB0aGF0IHN0aWxsXG4gICAgICAgICAgICAgICAgLy8gbWF0Y2ggdGhlIHRhcmdldCBiZWZvcmUgaXQgc2VuZHMgdGhlIG5leHQgZ2xvYmFsIHNuYXBzaG90LlxuICAgICAgICAgICAgICAgIGUuenMobiksIHIudnModC5yZXN1bWVUb2tlbikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgZ2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgYWxsIHRhcmdldElkcyB0aGF0IHRoZSB3YXRjaCBjaGFuZ2UgYXBwbGllcyB0bzogZWl0aGVyIHRoZVxuICAgICAqIHRhcmdldElkcyBleHBsaWNpdGx5IGxpc3RlZCBpbiB0aGUgY2hhbmdlIG9yIHRoZSB0YXJnZXRJZHMgb2YgYWxsIGN1cnJlbnRseVxuICAgICAqIGFjdGl2ZSB0YXJnZXRzLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmpzID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIHQudGFyZ2V0SWRzLmxlbmd0aCA+IDAgPyB0LnRhcmdldElkcy5mb3JFYWNoKGUpIDogdGhpcy5Ncy5mb3JFYWNoKChmdW5jdGlvbih0LCByKSB7XG4gICAgICAgICAgICBuLkdzKHIpICYmIGUocik7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIGV4aXN0ZW5jZSBmaWx0ZXJzIGFuZCBzeW50aGVzaXplcyBkZWxldGVzIGZvciBmaWx0ZXIgbWlzbWF0Y2hlcy5cbiAgICAgKiBUYXJnZXRzIHRoYXQgYXJlIGludmFsaWRhdGVkIGJ5IGZpbHRlciBtaXNtYXRjaGVzIGFyZSBhZGRlZCB0b1xuICAgICAqIGBwZW5kaW5nVGFyZ2V0UmVzZXRzYC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5IcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0LnRhcmdldElkLCBuID0gdC5Bcy5jb3VudCwgciA9IHRoaXMuWXMoZSk7XG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHIudGFyZ2V0O1xuICAgICAgICAgICAgaWYgKGkuT3QoKSkgaWYgKDAgPT09IG4pIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgZXhpc3RlbmNlIGZpbHRlciB0b2xkIHVzIHRoZSBkb2N1bWVudCBkb2VzIG5vdCBleGlzdC4gV2UgZGVkdWNlXG4gICAgICAgICAgICAgICAgLy8gdGhhdCB0aGlzIGRvY3VtZW50IGRvZXMgbm90IGV4aXN0IGFuZCBhcHBseSBhIGRlbGV0ZWQgZG9jdW1lbnQgdG9cbiAgICAgICAgICAgICAgICAvLyBvdXIgdXBkYXRlcy4gV2l0aG91dCBhcHBseWluZyB0aGlzIGRlbGV0ZWQgZG9jdW1lbnQgdGhlcmUgbWlnaHQgYmVcbiAgICAgICAgICAgICAgICAvLyBhbm90aGVyIHF1ZXJ5IHRoYXQgd2lsbCByYWlzZSB0aGlzIGRvY3VtZW50IGFzIHBhcnQgb2YgYSBzbmFwc2hvdFxuICAgICAgICAgICAgICAgIC8vIHVudGlsIGl0IGlzIHJlc29sdmVkLCBlc3NlbnRpYWxseSBleHBvc2luZyBpbmNvbnNpc3RlbmN5IGJldHdlZW5cbiAgICAgICAgICAgICAgICAvLyBxdWVyaWVzLlxuICAgICAgICAgICAgICAgIHZhciBvID0gbmV3IF8oaS5wYXRoKTtcbiAgICAgICAgICAgICAgICB0aGlzLlFzKGUsIG8sIG5ldyB2dChvLCBnLm1pbigpKSk7XG4gICAgICAgICAgICB9IGVsc2UgbWUoMSA9PT0gbik7IGVsc2UgdGhpcy5KcyhlKSAhPT0gbiAmJiAoXG4gICAgICAgICAgICAvLyBFeGlzdGVuY2UgZmlsdGVyIG1pc21hdGNoOiBXZSByZXNldCB0aGUgbWFwcGluZyBhbmQgcmFpc2UgYSBuZXdcbiAgICAgICAgICAgIC8vIHNuYXBzaG90IHdpdGggYGlzRnJvbUNhY2hlOnRydWVgLlxuICAgICAgICAgICAgdGhpcy56cyhlKSwgdGhpcy5CcyA9IHRoaXMuQnMuYWRkKGUpKTtcbiAgICAgICAgfVxuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBjdXJyZW50bHkgYWNjdW11bGF0ZWQgc3RhdGUgaW50byBhIHJlbW90ZSBldmVudCBhdCB0aGVcbiAgICAgKiBwcm92aWRlZCBzbmFwc2hvdCB2ZXJzaW9uLiBSZXNldHMgdGhlIGFjY3VtdWxhdGVkIGNoYW5nZXMgYmVmb3JlIHJldHVybmluZy5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5YcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLCBuID0gbmV3IE1hcDtcbiAgICAgICAgdGhpcy5Ncy5mb3JFYWNoKChmdW5jdGlvbihyLCBpKSB7XG4gICAgICAgICAgICB2YXIgbyA9IGUuWXMoaSk7XG4gICAgICAgICAgICBpZiAobykge1xuICAgICAgICAgICAgICAgIGlmIChyLmZzICYmIG8udGFyZ2V0Lk90KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRG9jdW1lbnQgcXVlcmllcyBmb3IgZG9jdW1lbnQgdGhhdCBkb24ndCBleGlzdCBjYW4gcHJvZHVjZSBhbiBlbXB0eVxuICAgICAgICAgICAgICAgICAgICAvLyByZXN1bHQgc2V0LiBUbyB1cGRhdGUgb3VyIGxvY2FsIGNhY2hlLCB3ZSBzeW50aGVzaXplIGEgZG9jdW1lbnRcbiAgICAgICAgICAgICAgICAgICAgLy8gZGVsZXRlIGlmIHdlIGhhdmUgbm90IHByZXZpb3VzbHkgcmVjZWl2ZWQgdGhlIGRvY3VtZW50LiBUaGlzXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlc29sdmVzIHRoZSBsaW1ibyBzdGF0ZSBvZiB0aGUgZG9jdW1lbnQsIHJlbW92aW5nIGl0IGZyb21cbiAgICAgICAgICAgICAgICAgICAgLy8gbGltYm9Eb2N1bWVudFJlZnMuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE8oZGltb25kKTogSWRlYWxseSB3ZSB3b3VsZCBoYXZlIGFuIGV4cGxpY2l0IGxvb2t1cCB0YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgLy8gaW5zdGVhZCByZXN1bHRpbmcgaW4gYW4gZXhwbGljaXQgZGVsZXRlIG1lc3NhZ2UgYW5kIHdlIGNvdWxkXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSB0aGlzIHNwZWNpYWwgbG9naWMuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gbmV3IF8oby50YXJnZXQucGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIG51bGwgIT09IGUuT3MuZ2V0KHMpIHx8IGUuWnMoaSwgcykgfHwgZS5RcyhpLCBzLCBuZXcgdnQocywgdCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByLmJzICYmIChuLnNldChpLCByLlNzKCkpLCByLkRzKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICAgIHZhciByID0gV3QoKTtcbiAgICAgICAgLy8gV2UgZXh0cmFjdCB0aGUgc2V0IG9mIGxpbWJvLW9ubHkgZG9jdW1lbnQgdXBkYXRlcyBhcyB0aGUgR0MgbG9naWNcbiAgICAgICAgLy8gc3BlY2lhbC1jYXNlcyBkb2N1bWVudHMgdGhhdCBkbyBub3QgYXBwZWFyIGluIHRoZSB0YXJnZXQgY2FjaGUuXG4gICAgICAgIC8vIFRPRE8oZ3NvbHRpcyk6IEV4cGFuZCBvbiB0aGlzIGNvbW1lbnQgb25jZSBHQyBpcyBhdmFpbGFibGUgaW4gdGhlIEpTXG4gICAgICAgIC8vIGNsaWVudC5cbiAgICAgICAgICAgICAgICB0aGlzLnhzLmZvckVhY2goKGZ1bmN0aW9uKHQsIG4pIHtcbiAgICAgICAgICAgIHZhciBpID0gITA7XG4gICAgICAgICAgICBuLkdlKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdmFyIG4gPSBlLllzKHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiAhbiB8fCAyIC8qIExpbWJvUmVzb2x1dGlvbiAqLyA9PT0gbi5UZSB8fCAoaSA9ICExLCAhMSk7XG4gICAgICAgICAgICB9KSksIGkgJiYgKHIgPSByLmFkZCh0KSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdmFyIGkgPSBuZXcgSHQodCwgbiwgdGhpcy5CcywgdGhpcy5Pcywgcik7XG4gICAgICAgIHJldHVybiB0aGlzLk9zID0gcXQoKSwgdGhpcy54cyA9IGllKCksIHRoaXMuQnMgPSBuZXcgUHQoYmUpLCBpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIHByb3ZpZGVkIGRvY3VtZW50IHRvIHRoZSBpbnRlcm5hbCBsaXN0IG9mIGRvY3VtZW50IHVwZGF0ZXMgYW5kXG4gICAgICogaXRzIGRvY3VtZW50IGtleSB0byB0aGUgZ2l2ZW4gdGFyZ2V0J3MgbWFwcGluZy5cbiAgICAgKi9cbiAgICAvLyBWaXNpYmxlIGZvciB0ZXN0aW5nLlxuICAgIHQucHJvdG90eXBlLlVzID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBpZiAodGhpcy5Hcyh0KSkge1xuICAgICAgICAgICAgdmFyIG4gPSB0aGlzLlpzKHQsIGUua2V5KSA/IDIgLyogTW9kaWZpZWQgKi8gOiAwIC8qIEFkZGVkICovO1xuICAgICAgICAgICAgdGhpcy5Lcyh0KS5DcyhlLmtleSwgbiksIHRoaXMuT3MgPSB0aGlzLk9zLkFlKGUua2V5LCBlKSwgdGhpcy54cyA9IHRoaXMueHMuQWUoZS5rZXksIHRoaXMudGkoZS5rZXkpLmFkZCh0KSk7XG4gICAgICAgIH1cbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBwcm92aWRlZCBkb2N1bWVudCBmcm9tIHRoZSB0YXJnZXQgbWFwcGluZy4gSWYgdGhlXG4gICAgICogZG9jdW1lbnQgbm8gbG9uZ2VyIG1hdGNoZXMgdGhlIHRhcmdldCwgYnV0IHRoZSBkb2N1bWVudCdzIHN0YXRlIGlzIHN0aWxsXG4gICAgICoga25vd24gKGUuZy4gd2Uga25vdyB0aGF0IHRoZSBkb2N1bWVudCB3YXMgZGVsZXRlZCBvciB3ZSByZWNlaXZlZCB0aGUgY2hhbmdlXG4gICAgICogdGhhdCBjYXVzZWQgdGhlIGZpbHRlciBtaXNtYXRjaCksIHRoZSBuZXcgZG9jdW1lbnQgY2FuIGJlIHByb3ZpZGVkXG4gICAgICogdG8gdXBkYXRlIHRoZSByZW1vdGUgZG9jdW1lbnQgY2FjaGUuXG4gICAgICovXG4gICAgLy8gVmlzaWJsZSBmb3IgdGVzdGluZy5cbiAgICB0LnByb3RvdHlwZS5RcyA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgaWYgKHRoaXMuR3ModCkpIHtcbiAgICAgICAgICAgIHZhciByID0gdGhpcy5Lcyh0KTtcbiAgICAgICAgICAgIHRoaXMuWnModCwgZSkgPyByLkNzKGUsIDEgLyogUmVtb3ZlZCAqLykgOiBcbiAgICAgICAgICAgIC8vIFRoZSBkb2N1bWVudCBtYXkgaGF2ZSBlbnRlcmVkIGFuZCBsZWZ0IHRoZSB0YXJnZXQgYmVmb3JlIHdlIHJhaXNlZCBhXG4gICAgICAgICAgICAvLyBzbmFwc2hvdCwgc28gd2UgY2FuIGp1c3QgaWdub3JlIHRoZSBjaGFuZ2UuXG4gICAgICAgICAgICByLkZzKGUpLCB0aGlzLnhzID0gdGhpcy54cy5BZShlLCB0aGlzLnRpKGUpLmRlbGV0ZSh0KSksIG4gJiYgKHRoaXMuT3MgPSB0aGlzLk9zLkFlKGUsIG4pKTtcbiAgICAgICAgfVxuICAgIH0sIHQucHJvdG90eXBlLnJlbW92ZVRhcmdldCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5Ncy5kZWxldGUodCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCBjb3VudCBvZiBkb2N1bWVudHMgaW4gdGhlIHRhcmdldC4gVGhpcyBpbmNsdWRlcyBib3RoXG4gICAgICogdGhlIG51bWJlciBvZiBkb2N1bWVudHMgdGhhdCB0aGUgTG9jYWxTdG9yZSBjb25zaWRlcnMgdG8gYmUgcGFydCBvZiB0aGVcbiAgICAgKiB0YXJnZXQgYXMgd2VsbCBhcyBhbnkgYWNjdW11bGF0ZWQgY2hhbmdlcy5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5KcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLktzKHQpLlNzKCk7XG4gICAgICAgIHJldHVybiB0aGlzLkxzLmVpKHQpLnNpemUgKyBlLlRzLnNpemUgLSBlLklzLnNpemU7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogSW5jcmVtZW50IHRoZSBudW1iZXIgb2YgYWNrcyBuZWVkZWQgZnJvbSB3YXRjaCBiZWZvcmUgd2UgY2FuIGNvbnNpZGVyIHRoZVxuICAgICAqIHNlcnZlciB0byBiZSAnaW4tc3luYycgd2l0aCB0aGUgY2xpZW50J3MgYWN0aXZlIHRhcmdldHMuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuTnMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuS3ModCkuTnMoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5LcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLk1zLmdldCh0KTtcbiAgICAgICAgcmV0dXJuIGUgfHwgKGUgPSBuZXcgbmUsIHRoaXMuTXMuc2V0KHQsIGUpKSwgZTtcbiAgICB9LCB0LnByb3RvdHlwZS50aSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLnhzLmdldCh0KTtcbiAgICAgICAgcmV0dXJuIGUgfHwgKGUgPSBuZXcgUHQoYmUpLCB0aGlzLnhzID0gdGhpcy54cy5BZSh0LCBlKSksIGU7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogVmVyaWZpZXMgdGhhdCB0aGUgdXNlciBpcyBzdGlsbCBpbnRlcmVzdGVkIGluIHRoaXMgdGFyZ2V0IChieSBjYWxsaW5nXG4gICAgICogYGdldFRhcmdldERhdGFGb3JUYXJnZXQoKWApIGFuZCB0aGF0IHdlIGFyZSBub3Qgd2FpdGluZyBmb3IgcGVuZGluZyBBRERzXG4gICAgICogZnJvbSB3YXRjaC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5HcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSBudWxsICE9PSB0aGlzLllzKHQpO1xuICAgICAgICByZXR1cm4gZSB8fCBkZShcIldhdGNoQ2hhbmdlQWdncmVnYXRvclwiLCBcIkRldGVjdGVkIGluYWN0aXZlIHRhcmdldFwiLCB0KSwgZTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBUYXJnZXREYXRhIGZvciBhbiBhY3RpdmUgdGFyZ2V0IChpLmUuIGEgdGFyZ2V0IHRoYXQgdGhlIHVzZXJcbiAgICAgKiBpcyBzdGlsbCBpbnRlcmVzdGVkIGluIHRoYXQgaGFzIG5vIG91dHN0YW5kaW5nIHRhcmdldCBjaGFuZ2UgcmVxdWVzdHMpLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLllzID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMuTXMuZ2V0KHQpO1xuICAgICAgICByZXR1cm4gZSAmJiBlLnlzID8gbnVsbCA6IHRoaXMuTHMuc2kodCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmVzZXRzIHRoZSBzdGF0ZSBvZiBhIFdhdGNoIHRhcmdldCB0byBpdHMgaW5pdGlhbCBzdGF0ZSAoZS5nLiBzZXRzXG4gICAgICogJ2N1cnJlbnQnIHRvIGZhbHNlLCBjbGVhcnMgdGhlIHJlc3VtZSB0b2tlbiBhbmQgcmVtb3ZlcyBpdHMgdGFyZ2V0IG1hcHBpbmdcbiAgICAgKiBmcm9tIGFsbCBkb2N1bWVudHMpLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLnpzID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIHRoaXMuTXMuc2V0KHQsIG5ldyBuZSksIHRoaXMuTHMuZWkodCkuZm9yRWFjaCgoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgZS5Rcyh0LCBuLCAvKnVwZGF0ZWREb2N1bWVudD0qLyBudWxsKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgTG9jYWxTdG9yZSBjb25zaWRlcnMgdGhlIGRvY3VtZW50IHRvIGJlIHBhcnQgb2YgdGhlXG4gICAgICogc3BlY2lmaWVkIHRhcmdldC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5acyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuTHMuZWkodCkuaGFzKGUpO1xuICAgIH0sIHQ7XG59KCk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIERvY3VtZW50Q2hhbmdlU2V0IGtlZXBzIHRyYWNrIG9mIGEgc2V0IG9mIGNoYW5nZXMgdG8gZG9jcyBpbiBhIHF1ZXJ5LCBtZXJnaW5nXG4gKiBkdXBsaWNhdGUgZXZlbnRzIGZvciB0aGUgc2FtZSBkb2MuXG4gKi8gZnVuY3Rpb24gaWUoKSB7XG4gICAgcmV0dXJuIG5ldyBMdChfLk4pO1xufVxuXG5mdW5jdGlvbiBvZSgpIHtcbiAgICByZXR1cm4gbmV3IEx0KF8uTik7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIHZhciBzZSA9IHtcbiAgICBhc2M6IFwiQVNDRU5ESU5HXCIsXG4gICAgZGVzYzogXCJERVNDRU5ESU5HXCJcbn0sIHVlID0ge1xuICAgIFwiPFwiOiBcIkxFU1NfVEhBTlwiLFxuICAgIFwiPD1cIjogXCJMRVNTX1RIQU5fT1JfRVFVQUxcIixcbiAgICBcIj5cIjogXCJHUkVBVEVSX1RIQU5cIixcbiAgICBcIj49XCI6IFwiR1JFQVRFUl9USEFOX09SX0VRVUFMXCIsXG4gICAgXCI9PVwiOiBcIkVRVUFMXCIsXG4gICAgXCJhcnJheS1jb250YWluc1wiOiBcIkFSUkFZX0NPTlRBSU5TXCIsXG4gICAgaW46IFwiSU5cIixcbiAgICBcImFycmF5LWNvbnRhaW5zLWFueVwiOiBcIkFSUkFZX0NPTlRBSU5TX0FOWVwiXG59LCBhZSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlKSB7XG4gICAgICAgIHRoaXMuaWkgPSB0LCB0aGlzLm9wdGlvbnMgPSBlO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUubmkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdm9pZCAwID09PSB0LmNvZGUgPyBoLlVOS05PV04gOiBSdCh0LmNvZGUpO1xuICAgICAgICByZXR1cm4gbmV3IGMoZSwgdC5tZXNzYWdlIHx8IFwiXCIpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSB2YWx1ZSBmb3IgYSBudW1iZXIgKG9yIG51bGwpIHRoYXQncyBhcHByb3ByaWF0ZSB0byBwdXQgaW50b1xuICAgICAqIGEgZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUgcHJvdG8uXG4gICAgICogRE8gTk9UIFVTRSBUSElTIEZPUiBBTllUSElORyBFTFNFLlxuICAgICAqIFRoaXMgbWV0aG9kIGNoZWF0cy4gSXQncyB0eXBlZCBhcyByZXR1cm5pbmcgXCJudW1iZXJcIiBiZWNhdXNlIHRoYXQncyB3aGF0XG4gICAgICogb3VyIGdlbmVyYXRlZCBwcm90byBpbnRlcmZhY2VzIHNheSBJbnQzMlZhbHVlIG11c3QgYmUuIEJ1dCBHUlBDIGFjdHVhbGx5XG4gICAgICogZXhwZWN0cyBhIHsgdmFsdWU6IDxudW1iZXI+IH0gc3RydWN0LlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLnJpID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmhpIHx8IGsodCkgPyB0IDoge1xuICAgICAgICAgICAgdmFsdWU6IHRcbiAgICAgICAgfTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbnVtYmVyIChvciBudWxsKSBmcm9tIGEgZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUgcHJvdG8uXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUub2kgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlO1xuICAgICAgICByZXR1cm4gayhlID0gXCJvYmplY3RcIiA9PSB0eXBlb2YgdCA/IHQudmFsdWUgOiB0KSA/IG51bGwgOiBlO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gSW50ZWdlclZhbHVlIGZvciBgdmFsdWVgLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLl90ID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW50ZWdlclZhbHVlOiBcIlwiICsgdFxuICAgICAgICB9O1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gRG91YmxlVmFsdWUgZm9yIGB2YWx1ZWAgdGhhdCBpcyBlbmNvZGVkIGJhc2VkIHRoZSBzZXJpYWxpemVyJ3NcbiAgICAgKiBgdXNlUHJvdG8zSnNvbmAgc2V0dGluZy5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5sdCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5oaSkge1xuICAgICAgICAgICAgaWYgKGlzTmFOKHQpKSByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRvdWJsZVZhbHVlOiBcIk5hTlwiXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHQgPT09IDEgLyAwKSByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRvdWJsZVZhbHVlOiBcIkluZmluaXR5XCJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodCA9PT0gLTEgLyAwKSByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRvdWJsZVZhbHVlOiBcIi1JbmZpbml0eVwiXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkb3VibGVWYWx1ZTogRCh0KSA/IFwiLTBcIiA6IHRcbiAgICAgICAgfTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgdmFsdWUgZm9yIGEgbnVtYmVyIHRoYXQncyBhcHByb3ByaWF0ZSB0byBwdXQgaW50byBhIHByb3RvLlxuICAgICAqIFRoZSByZXR1cm4gdmFsdWUgaXMgYW4gSW50ZWdlclZhbHVlIGlmIGl0IGNhbiBzYWZlbHkgcmVwcmVzZW50IHRoZSB2YWx1ZSxcbiAgICAgKiBvdGhlcndpc2UgYSBEb3VibGVWYWx1ZSBpcyByZXR1cm5lZC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5haSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHgodCkgPyB0aGlzLl90KHQpIDogdGhpcy5sdCh0KTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgdmFsdWUgZm9yIGEgRGF0ZSB0aGF0J3MgYXBwcm9wcmlhdGUgdG8gcHV0IGludG8gYSBwcm90by5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5DID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmhpID8gbmV3IERhdGUoMWUzICogdC5zZWNvbmRzKS50b0lTT1N0cmluZygpLnJlcGxhY2UoL1xcLlxcZCovLCBcIlwiKS5yZXBsYWNlKFwiWlwiLCBcIlwiKSArIFwiLlwiICsgKFwiMDAwMDAwMDAwXCIgKyB0Lm5hbm9zZWNvbmRzKS5zbGljZSgtOSkgKyBcIlpcIiA6IHtcbiAgICAgICAgICAgIHNlY29uZHM6IFwiXCIgKyB0LnNlY29uZHMsXG4gICAgICAgICAgICBuYW5vczogdC5uYW5vc2Vjb25kc1xuICAgICAgICB9O1xuICAgIH0sIHQucHJvdG90eXBlLnYgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gTSh0KTtcbiAgICAgICAgcmV0dXJuIG5ldyB2KGUuc2Vjb25kcywgZS5uYW5vcyk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHZhbHVlIGZvciBieXRlcyB0aGF0J3MgYXBwcm9wcmlhdGUgdG8gcHV0IGluIGEgcHJvdG8uXG4gICAgICpcbiAgICAgKiBWaXNpYmxlIGZvciB0ZXN0aW5nLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLnVpID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmhpID8gdC50b0Jhc2U2NCgpIDogdC50b1VpbnQ4QXJyYXkoKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQnl0ZVN0cmluZyBiYXNlZCBvbiB0aGUgcHJvdG8gc3RyaW5nIHZhbHVlLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmNpID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmhpID8gKG1lKHZvaWQgMCA9PT0gdCB8fCBcInN0cmluZ1wiID09IHR5cGVvZiB0KSwgQS5mcm9tQmFzZTY0U3RyaW5nKHQgfHwgXCJcIikpIDogKG1lKHZvaWQgMCA9PT0gdCB8fCB0IGluc3RhbmNlb2YgVWludDhBcnJheSksIFxuICAgICAgICBBLmZyb21VaW50OEFycmF5KHQgfHwgbmV3IFVpbnQ4QXJyYXkpKTtcbiAgICB9LCB0LnByb3RvdHlwZS50b1ZlcnNpb24gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLkModC5DKCkpO1xuICAgIH0sIHQucHJvdG90eXBlLmZyb21WZXJzaW9uID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gbWUoISF0KSwgZy52KHRoaXMudih0KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuX2kgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpKGUgfHwgdGhpcy5paSkuY2hpbGQoXCJkb2N1bWVudHNcIikuY2hpbGQodCkuaigpO1xuICAgIH0sIHQucHJvdG90eXBlLmRpID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHcuSyh0KTtcbiAgICAgICAgcmV0dXJuIG1lKGhlKGUpKSwgZTtcbiAgICB9LCB0LnByb3RvdHlwZS5maSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2kodC5wYXRoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5aID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMuZGkodCk7XG4gICAgICAgIHJldHVybiBtZShlLmdldCgxKSA9PT0gdGhpcy5paS5wcm9qZWN0SWQpLCBtZSghZS5nZXQoMykgJiYgIXRoaXMuaWkuZGF0YWJhc2UgfHwgZS5nZXQoMykgPT09IHRoaXMuaWkuZGF0YWJhc2UpLCBcbiAgICAgICAgbmV3IF8odGhpcy5UaShlKSk7XG4gICAgfSwgdC5wcm90b3R5cGUuRWkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pKHQpO1xuICAgIH0sIHQucHJvdG90eXBlLklpID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMuZGkodCk7XG4gICAgICAgIC8vIEluIHYxYmV0YTEgcXVlcmllcyBmb3IgY29sbGVjdGlvbnMgYXQgdGhlIHJvb3QgZGlkIG5vdCBoYXZlIGEgdHJhaWxpbmdcbiAgICAgICAgLy8gXCIvZG9jdW1lbnRzXCIuIEluIHYxIGFsbCByZXNvdXJjZSBwYXRocyBjb250YWluIFwiL2RvY3VtZW50c1wiLiBQcmVzZXJ2ZSB0aGVcbiAgICAgICAgLy8gYWJpbGl0eSB0byByZWFkIHRoZSB2MWJldGExIGZvcm0gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBxdWVyaWVzIHBlcnNpc3RlZFxuICAgICAgICAvLyBpbiB0aGUgbG9jYWwgdGFyZ2V0IGNhY2hlLlxuICAgICAgICAgICAgICAgIHJldHVybiA0ID09PSBlLmxlbmd0aCA/IHcuRyA6IHRoaXMuVGkoZSk7XG4gICAgfSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcIndpXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgdyhbIFwicHJvamVjdHNcIiwgdGhpcy5paS5wcm9qZWN0SWQsIFwiZGF0YWJhc2VzXCIsIHRoaXMuaWkuZGF0YWJhc2UgXSkuaigpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCB0LnByb3RvdHlwZS5saSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB3KFsgXCJwcm9qZWN0c1wiLCB0LnByb2plY3RJZCwgXCJkYXRhYmFzZXNcIiwgdC5kYXRhYmFzZSBdKTtcbiAgICB9LCB0LnByb3RvdHlwZS5UaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG1lKHQubGVuZ3RoID4gNCAmJiBcImRvY3VtZW50c1wiID09PSB0LmdldCg0KSksIHQuayg1KTtcbiAgICB9LCBcbiAgICAvKiogQ3JlYXRlcyBhbiBhcGkuRG9jdW1lbnQgZnJvbSBrZXkgYW5kIGZpZWxkcyAoYnV0IG5vIGNyZWF0ZS91cGRhdGUgdGltZSkgKi8gdC5wcm90b3R5cGUuUmkgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLmZpKHQpLFxuICAgICAgICAgICAgZmllbGRzOiBlLnByb3RvLm1hcFZhbHVlLmZpZWxkc1xuICAgICAgICB9O1xuICAgIH0sIHQucHJvdG90eXBlLkFpID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogdGhpcy5maSh0LmtleSksXG4gICAgICAgICAgICBmaWVsZHM6IHQuTHQoKS5tYXBWYWx1ZS5maWVsZHMsXG4gICAgICAgICAgICB1cGRhdGVUaW1lOiB0aGlzLkModC52ZXJzaW9uLkMoKSlcbiAgICAgICAgfTtcbiAgICB9LCB0LnByb3RvdHlwZS5taSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLloodC5uYW1lKSwgciA9IHRoaXMuZnJvbVZlcnNpb24odC51cGRhdGVUaW1lKSwgaSA9IG5ldyBodCh7XG4gICAgICAgICAgICBtYXBWYWx1ZToge1xuICAgICAgICAgICAgICAgIGZpZWxkczogdC5maWVsZHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgeXQobiwgciwgaSwge1xuICAgICAgICAgICAgaGFzQ29tbWl0dGVkTXV0YXRpb25zOiAhIWVcbiAgICAgICAgfSk7XG4gICAgfSwgdC5wcm90b3R5cGUuUGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIG1lKCEhdC5mb3VuZCksIHQuZm91bmQubmFtZSwgdC5mb3VuZC51cGRhdGVUaW1lO1xuICAgICAgICB2YXIgZSA9IHRoaXMuWih0LmZvdW5kLm5hbWUpLCBuID0gdGhpcy5mcm9tVmVyc2lvbih0LmZvdW5kLnVwZGF0ZVRpbWUpLCByID0gbmV3IGh0KHtcbiAgICAgICAgICAgIG1hcFZhbHVlOiB7XG4gICAgICAgICAgICAgICAgZmllbGRzOiB0LmZvdW5kLmZpZWxkc1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyB5dChlLCBuLCByLCB7fSk7XG4gICAgfSwgdC5wcm90b3R5cGUuVmkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIG1lKCEhdC5taXNzaW5nKSwgbWUoISF0LnJlYWRUaW1lKTtcbiAgICAgICAgdmFyIGUgPSB0aGlzLloodC5taXNzaW5nKSwgbiA9IHRoaXMuZnJvbVZlcnNpb24odC5yZWFkVGltZSk7XG4gICAgICAgIHJldHVybiBuZXcgdnQoZSwgbik7XG4gICAgfSwgdC5wcm90b3R5cGUuZ2kgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBcImZvdW5kXCIgaW4gdCA/IHRoaXMuUGkodCkgOiBcIm1pc3NpbmdcIiBpbiB0ID8gdGhpcy5WaSh0KSA6IGdlKCk7XG4gICAgfSwgdC5wcm90b3R5cGUucGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlO1xuICAgICAgICBpZiAoXCJ0YXJnZXRDaGFuZ2VcIiBpbiB0KSB7XG4gICAgICAgICAgICB0LnRhcmdldENoYW5nZTtcbiAgICAgICAgICAgIC8vIHByb3RvMyBkZWZhdWx0IHZhbHVlIGlzIHVuc2V0IGluIEpTT04gKHVuZGVmaW5lZCksIHNvIHVzZSAnTk9fQ0hBTkdFJ1xuICAgICAgICAgICAgLy8gaWYgdW5zZXRcbiAgICAgICAgICAgIHZhciBuID0gdGhpcy55aSh0LnRhcmdldENoYW5nZS50YXJnZXRDaGFuZ2VUeXBlIHx8IFwiTk9fQ0hBTkdFXCIpLCByID0gdC50YXJnZXRDaGFuZ2UudGFyZ2V0SWRzIHx8IFtdLCBpID0gdGhpcy5jaSh0LnRhcmdldENoYW5nZS5yZXN1bWVUb2tlbiksIG8gPSB0LnRhcmdldENoYW5nZS5jYXVzZSwgcyA9IG8gJiYgdGhpcy5uaShvKTtcbiAgICAgICAgICAgIGUgPSBuZXcgZWUobiwgciwgaSwgcyB8fCBudWxsKTtcbiAgICAgICAgfSBlbHNlIGlmIChcImRvY3VtZW50Q2hhbmdlXCIgaW4gdCkge1xuICAgICAgICAgICAgdC5kb2N1bWVudENoYW5nZTtcbiAgICAgICAgICAgIHZhciB1ID0gdC5kb2N1bWVudENoYW5nZTtcbiAgICAgICAgICAgIHUuZG9jdW1lbnQsIHUuZG9jdW1lbnQubmFtZSwgdS5kb2N1bWVudC51cGRhdGVUaW1lO1xuICAgICAgICAgICAgdmFyIGEgPSB0aGlzLloodS5kb2N1bWVudC5uYW1lKSwgaCA9IHRoaXMuZnJvbVZlcnNpb24odS5kb2N1bWVudC51cGRhdGVUaW1lKSwgYyA9IG5ldyBodCh7XG4gICAgICAgICAgICAgICAgbWFwVmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRzOiB1LmRvY3VtZW50LmZpZWxkc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLCBmID0gbmV3IHl0KGEsIGgsIGMsIHt9KSwgbCA9IHUudGFyZ2V0SWRzIHx8IFtdLCBwID0gdS5yZW1vdmVkVGFyZ2V0SWRzIHx8IFtdO1xuICAgICAgICAgICAgZSA9IG5ldyBadChsLCBwLCBmLmtleSwgZik7XG4gICAgICAgIH0gZWxzZSBpZiAoXCJkb2N1bWVudERlbGV0ZVwiIGluIHQpIHtcbiAgICAgICAgICAgIHQuZG9jdW1lbnREZWxldGU7XG4gICAgICAgICAgICB2YXIgZCA9IHQuZG9jdW1lbnREZWxldGU7XG4gICAgICAgICAgICBkLmRvY3VtZW50O1xuICAgICAgICAgICAgdmFyIHkgPSB0aGlzLlooZC5kb2N1bWVudCksIHYgPSBkLnJlYWRUaW1lID8gdGhpcy5mcm9tVmVyc2lvbihkLnJlYWRUaW1lKSA6IGcubWluKCksIG0gPSBuZXcgdnQoeSwgdiksIHcgPSBkLnJlbW92ZWRUYXJnZXRJZHMgfHwgW107XG4gICAgICAgICAgICBlID0gbmV3IFp0KFtdLCB3LCBtLmtleSwgbSk7XG4gICAgICAgIH0gZWxzZSBpZiAoXCJkb2N1bWVudFJlbW92ZVwiIGluIHQpIHtcbiAgICAgICAgICAgIHQuZG9jdW1lbnRSZW1vdmU7XG4gICAgICAgICAgICB2YXIgRSA9IHQuZG9jdW1lbnRSZW1vdmU7XG4gICAgICAgICAgICBFLmRvY3VtZW50O1xuICAgICAgICAgICAgdmFyIGIgPSB0aGlzLlooRS5kb2N1bWVudCksIF8gPSBFLnJlbW92ZWRUYXJnZXRJZHMgfHwgW107XG4gICAgICAgICAgICBlID0gbmV3IFp0KFtdLCBfLCBiLCBudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghKFwiZmlsdGVyXCIgaW4gdCkpIHJldHVybiBnZSgpO1xuICAgICAgICAgICAgdC5maWx0ZXI7XG4gICAgICAgICAgICB2YXIgVCA9IHQuZmlsdGVyO1xuICAgICAgICAgICAgVC50YXJnZXRJZDtcbiAgICAgICAgICAgIHZhciBJID0gVC5jb3VudCB8fCAwLCBOID0gbmV3IHh0KEkpLCBBID0gVC50YXJnZXRJZDtcbiAgICAgICAgICAgIGUgPSBuZXcgdGUoQSwgTik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfSwgdC5wcm90b3R5cGUueWkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBcIk5PX0NIQU5HRVwiID09PSB0ID8gMCAvKiBOb0NoYW5nZSAqLyA6IFwiQUREXCIgPT09IHQgPyAxIC8qIEFkZGVkICovIDogXCJSRU1PVkVcIiA9PT0gdCA/IDIgLyogUmVtb3ZlZCAqLyA6IFwiQ1VSUkVOVFwiID09PSB0ID8gMyAvKiBDdXJyZW50ICovIDogXCJSRVNFVFwiID09PSB0ID8gNCAvKiBSZXNldCAqLyA6IGdlKCk7XG4gICAgfSwgdC5wcm90b3R5cGUuYmkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIC8vIFdlIGhhdmUgb25seSByZWFjaGVkIGEgY29uc2lzdGVudCBzbmFwc2hvdCBmb3IgdGhlIGVudGlyZSBzdHJlYW0gaWYgdGhlcmVcbiAgICAgICAgLy8gaXMgYSByZWFkX3RpbWUgc2V0IGFuZCBpdCBhcHBsaWVzIHRvIGFsbCB0YXJnZXRzIChpLmUuIHRoZSBsaXN0IG9mXG4gICAgICAgIC8vIHRhcmdldHMgaXMgZW1wdHkpLiBUaGUgYmFja2VuZCBpcyBndWFyYW50ZWVkIHRvIHNlbmQgc3VjaCByZXNwb25zZXMuXG4gICAgICAgIGlmICghKFwidGFyZ2V0Q2hhbmdlXCIgaW4gdCkpIHJldHVybiBnLm1pbigpO1xuICAgICAgICB2YXIgZSA9IHQudGFyZ2V0Q2hhbmdlO1xuICAgICAgICByZXR1cm4gZS50YXJnZXRJZHMgJiYgZS50YXJnZXRJZHMubGVuZ3RoID8gZy5taW4oKSA6IGUucmVhZFRpbWUgPyB0aGlzLmZyb21WZXJzaW9uKGUucmVhZFRpbWUpIDogZy5taW4oKTtcbiAgICB9LCB0LnByb3RvdHlwZS52aSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUsIG4gPSB0aGlzO1xuICAgICAgICBpZiAodCBpbnN0YW5jZW9mIGl0KSBlID0ge1xuICAgICAgICAgICAgdXBkYXRlOiB0aGlzLlJpKHQua2V5LCB0LnZhbHVlKVxuICAgICAgICB9OyBlbHNlIGlmICh0IGluc3RhbmNlb2YgdXQpIGUgPSB7XG4gICAgICAgICAgICBkZWxldGU6IHRoaXMuZmkodC5rZXkpXG4gICAgICAgIH07IGVsc2UgaWYgKHQgaW5zdGFuY2VvZiBvdCkgZSA9IHtcbiAgICAgICAgICAgIHVwZGF0ZTogdGhpcy5SaSh0LmtleSwgdC5kYXRhKSxcbiAgICAgICAgICAgIHVwZGF0ZU1hc2s6IHRoaXMuU2kodC5WdClcbiAgICAgICAgfTsgZWxzZSBpZiAodCBpbnN0YW5jZW9mIHN0KSBlID0ge1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQ6IHRoaXMuZmkodC5rZXkpLFxuICAgICAgICAgICAgICAgIGZpZWxkVHJhbnNmb3JtczogdC5maWVsZFRyYW5zZm9ybXMubWFwKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuLkRpKHQpO1xuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgfVxuICAgICAgICB9OyBlbHNlIHtcbiAgICAgICAgICAgIGlmICghKHQgaW5zdGFuY2VvZiBhdCkpIHJldHVybiBnZSgpO1xuICAgICAgICAgICAgZSA9IHtcbiAgICAgICAgICAgICAgICB2ZXJpZnk6IHRoaXMuZmkodC5rZXkpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0LlJ0LlR0IHx8IChlLmN1cnJlbnREb2N1bWVudCA9IHRoaXMuQ2kodC5SdCkpLCBlO1xuICAgIH0sIHQucHJvdG90eXBlLkZpID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMsIG4gPSB0LmN1cnJlbnREb2N1bWVudCA/IHRoaXMuTmkodC5jdXJyZW50RG9jdW1lbnQpIDogbnQuZnQoKTtcbiAgICAgICAgaWYgKHQudXBkYXRlKSB7XG4gICAgICAgICAgICB0LnVwZGF0ZS5uYW1lO1xuICAgICAgICAgICAgdmFyIHIgPSB0aGlzLloodC51cGRhdGUubmFtZSksIGkgPSBuZXcgaHQoe1xuICAgICAgICAgICAgICAgIG1hcFZhbHVlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkczogdC51cGRhdGUuZmllbGRzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAodC51cGRhdGVNYXNrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG8gPSB0aGlzLiRpKHQudXBkYXRlTWFzayk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBvdChyLCBpLCBvLCBuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgaXQociwgaSwgbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHQuZGVsZXRlKSB7XG4gICAgICAgICAgICB2YXIgcyA9IHRoaXMuWih0LmRlbGV0ZSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IHV0KHMsIG4pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0LnRyYW5zZm9ybSkge1xuICAgICAgICAgICAgdmFyIHUgPSB0aGlzLloodC50cmFuc2Zvcm0uZG9jdW1lbnQpLCBhID0gdC50cmFuc2Zvcm0uZmllbGRUcmFuc2Zvcm1zLm1hcCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLmtpKHQpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgcmV0dXJuIG1lKCEwID09PSBuLmV4aXN0cyksIG5ldyBzdCh1LCBhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodC52ZXJpZnkpIHtcbiAgICAgICAgICAgIHZhciBoID0gdGhpcy5aKHQudmVyaWZ5KTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgYXQoaCwgbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdlKCk7XG4gICAgfSwgdC5wcm90b3R5cGUuQ2kgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB2b2lkIDAgIT09IHQudXBkYXRlVGltZSA/IHtcbiAgICAgICAgICAgIHVwZGF0ZVRpbWU6IHRoaXMudG9WZXJzaW9uKHQudXBkYXRlVGltZSlcbiAgICAgICAgfSA6IHZvaWQgMCAhPT0gdC5leGlzdHMgPyB7XG4gICAgICAgICAgICBleGlzdHM6IHQuZXhpc3RzXG4gICAgICAgIH0gOiBnZSgpO1xuICAgIH0sIHQucHJvdG90eXBlLk5pID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdm9pZCAwICE9PSB0LnVwZGF0ZVRpbWUgPyBudC51cGRhdGVUaW1lKHRoaXMuZnJvbVZlcnNpb24odC51cGRhdGVUaW1lKSkgOiB2b2lkIDAgIT09IHQuZXhpc3RzID8gbnQuZXhpc3RzKHQuZXhpc3RzKSA6IG50LmZ0KCk7XG4gICAgfSwgdC5wcm90b3R5cGUuTGkgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIC8vIE5PVEU6IERlbGV0ZXMgZG9uJ3QgaGF2ZSBhbiB1cGRhdGVUaW1lLlxuICAgICAgICB2YXIgbiA9IHQudXBkYXRlVGltZSA/IHRoaXMuZnJvbVZlcnNpb24odC51cGRhdGVUaW1lKSA6IHRoaXMuZnJvbVZlcnNpb24oZSk7XG4gICAgICAgIG4uaXNFcXVhbChnLm1pbigpKSAmJiAoXG4gICAgICAgIC8vIFRoZSBGaXJlc3RvcmUgRW11bGF0b3IgY3VycmVudGx5IHJldHVybnMgYW4gdXBkYXRlIHRpbWUgb2YgMCBmb3JcbiAgICAgICAgLy8gZGVsZXRlcyBvZiBub24tZXhpc3RpbmcgZG9jdW1lbnRzIChyYXRoZXIgdGhhbiBudWxsKS4gVGhpcyBicmVha3MgdGhlXG4gICAgICAgIC8vIHRlc3QgXCJnZXQgZGVsZXRlZCBkb2Mgd2hpbGUgb2ZmbGluZSB3aXRoIHNvdXJjZT1jYWNoZVwiIGFzIE5vRG9jdW1lbnRzXG4gICAgICAgIC8vIHdpdGggdmVyc2lvbiAwIGFyZSBmaWx0ZXJlZCBieSBJbmRleGVkRGIncyBSZW1vdGVEb2N1bWVudENhY2hlLlxuICAgICAgICAvLyBUT0RPKCMyMTQ5KTogUmVtb3ZlIHRoaXMgd2hlbiBFbXVsYXRvciBpcyBmaXhlZFxuICAgICAgICBuID0gdGhpcy5mcm9tVmVyc2lvbihlKSk7XG4gICAgICAgIHZhciByID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHQudHJhbnNmb3JtUmVzdWx0cyAmJiB0LnRyYW5zZm9ybVJlc3VsdHMubGVuZ3RoID4gMCAmJiAociA9IHQudHJhbnNmb3JtUmVzdWx0cyksIFxuICAgICAgICBuZXcgZXQobiwgcik7XG4gICAgfSwgdC5wcm90b3R5cGUuTWkgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHQgJiYgdC5sZW5ndGggPiAwID8gKG1lKHZvaWQgMCAhPT0gZSksIHQubWFwKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gbi5MaSh0LCBlKTtcbiAgICAgICAgfSkpKSA6IFtdO1xuICAgIH0sIHQucHJvdG90eXBlLkRpID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHQudHJhbnNmb3JtO1xuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIFkpIHJldHVybiB7XG4gICAgICAgICAgICBmaWVsZFBhdGg6IHQuZmllbGQuaigpLFxuICAgICAgICAgICAgc2V0VG9TZXJ2ZXJWYWx1ZTogXCJSRVFVRVNUX1RJTUVcIlxuICAgICAgICB9O1xuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mICQpIHJldHVybiB7XG4gICAgICAgICAgICBmaWVsZFBhdGg6IHQuZmllbGQuaigpLFxuICAgICAgICAgICAgYXBwZW5kTWlzc2luZ0VsZW1lbnRzOiB7XG4gICAgICAgICAgICAgICAgdmFsdWVzOiBlLmVsZW1lbnRzXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmIChlIGluc3RhbmNlb2YgSikgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpZWxkUGF0aDogdC5maWVsZC5qKCksXG4gICAgICAgICAgICByZW1vdmVBbGxGcm9tQXJyYXk6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IGUuZWxlbWVudHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBIKSByZXR1cm4ge1xuICAgICAgICAgICAgZmllbGRQYXRoOiB0LmZpZWxkLmooKSxcbiAgICAgICAgICAgIGluY3JlbWVudDogZS5jdFxuICAgICAgICB9O1xuICAgICAgICB0aHJvdyBnZSgpO1xuICAgIH0sIHQucHJvdG90eXBlLmtpID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IG51bGw7XG4gICAgICAgIGlmIChcInNldFRvU2VydmVyVmFsdWVcIiBpbiB0KSBtZShcIlJFUVVFU1RfVElNRVwiID09PSB0LnNldFRvU2VydmVyVmFsdWUpLCBlID0gWS5pbnN0YW5jZTsgZWxzZSBpZiAoXCJhcHBlbmRNaXNzaW5nRWxlbWVudHNcIiBpbiB0KSB7XG4gICAgICAgICAgICB2YXIgbiA9IHQuYXBwZW5kTWlzc2luZ0VsZW1lbnRzLnZhbHVlcyB8fCBbXTtcbiAgICAgICAgICAgIGUgPSBuZXcgJChuKTtcbiAgICAgICAgfSBlbHNlIGlmIChcInJlbW92ZUFsbEZyb21BcnJheVwiIGluIHQpIHtcbiAgICAgICAgICAgIHZhciByID0gdC5yZW1vdmVBbGxGcm9tQXJyYXkudmFsdWVzIHx8IFtdO1xuICAgICAgICAgICAgZSA9IG5ldyBKKHIpO1xuICAgICAgICB9IGVsc2UgXCJpbmNyZW1lbnRcIiBpbiB0ID8gZSA9IG5ldyBIKHRoaXMsIHQuaW5jcmVtZW50KSA6IGdlKCk7XG4gICAgICAgIHZhciBpID0gYi5YKHQuZmllbGRQYXRoKTtcbiAgICAgICAgcmV0dXJuIG5ldyB0dChpLCBlKTtcbiAgICB9LCB0LnByb3RvdHlwZS5PaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRvY3VtZW50czogWyB0aGlzLkVpKHQucGF0aCkgXVxuICAgICAgICB9O1xuICAgIH0sIHQucHJvdG90eXBlLnhpID0gZnVuY3Rpb24odCkge1xuICAgICAgICBtZSgxID09PSB0LmRvY3VtZW50cy5sZW5ndGgpO1xuICAgICAgICB2YXIgZSA9IHQuZG9jdW1lbnRzWzBdO1xuICAgICAgICByZXR1cm4gd3QuV3QodGhpcy5JaShlKSkuZWUoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5CaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgLy8gRGlzc2VjdCB0aGUgcGF0aCBpbnRvIHBhcmVudCwgY29sbGVjdGlvbklkLCBhbmQgb3B0aW9uYWwga2V5IGZpbHRlci5cbiAgICAgICAgdmFyIGUgPSB7XG4gICAgICAgICAgICBzdHJ1Y3R1cmVkUXVlcnk6IHt9XG4gICAgICAgIH0sIG4gPSB0LnBhdGg7XG4gICAgICAgIG51bGwgIT09IHQuY29sbGVjdGlvbkdyb3VwID8gKGUucGFyZW50ID0gdGhpcy5FaShuKSwgZS5zdHJ1Y3R1cmVkUXVlcnkuZnJvbSA9IFsge1xuICAgICAgICAgICAgY29sbGVjdGlvbklkOiB0LmNvbGxlY3Rpb25Hcm91cCxcbiAgICAgICAgICAgIGFsbERlc2NlbmRhbnRzOiAhMFxuICAgICAgICB9IF0pIDogKGUucGFyZW50ID0gdGhpcy5FaShuLkwoKSksIGUuc3RydWN0dXJlZFF1ZXJ5LmZyb20gPSBbIHtcbiAgICAgICAgICAgIGNvbGxlY3Rpb25JZDogbi5PKClcbiAgICAgICAgfSBdKTtcbiAgICAgICAgdmFyIHIgPSB0aGlzLnFpKHQuZmlsdGVycyk7XG4gICAgICAgIHIgJiYgKGUuc3RydWN0dXJlZFF1ZXJ5LndoZXJlID0gcik7XG4gICAgICAgIHZhciBpID0gdGhpcy5VaSh0Lm9yZGVyQnkpO1xuICAgICAgICBpICYmIChlLnN0cnVjdHVyZWRRdWVyeS5vcmRlckJ5ID0gaSk7XG4gICAgICAgIHZhciBvID0gdGhpcy5yaSh0LmxpbWl0KTtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IG8gJiYgKGUuc3RydWN0dXJlZFF1ZXJ5LmxpbWl0ID0gbyksIHQuc3RhcnRBdCAmJiAoZS5zdHJ1Y3R1cmVkUXVlcnkuc3RhcnRBdCA9IHRoaXMuUWkodC5zdGFydEF0KSksIFxuICAgICAgICB0LmVuZEF0ICYmIChlLnN0cnVjdHVyZWRRdWVyeS5lbmRBdCA9IHRoaXMuUWkodC5lbmRBdCkpLCBlO1xuICAgIH0sIHQucHJvdG90eXBlLldpID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMuSWkodC5wYXJlbnQpLCBuID0gdC5zdHJ1Y3R1cmVkUXVlcnksIHIgPSBuLmZyb20gPyBuLmZyb20ubGVuZ3RoIDogMCwgaSA9IG51bGw7XG4gICAgICAgIGlmIChyID4gMCkge1xuICAgICAgICAgICAgbWUoMSA9PT0gcik7XG4gICAgICAgICAgICB2YXIgbyA9IG4uZnJvbVswXTtcbiAgICAgICAgICAgIG8uYWxsRGVzY2VuZGFudHMgPyBpID0gby5jb2xsZWN0aW9uSWQgOiBlID0gZS5jaGlsZChvLmNvbGxlY3Rpb25JZCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHMgPSBbXTtcbiAgICAgICAgbi53aGVyZSAmJiAocyA9IHRoaXMuamkobi53aGVyZSkpO1xuICAgICAgICB2YXIgdSA9IFtdO1xuICAgICAgICBuLm9yZGVyQnkgJiYgKHUgPSB0aGlzLktpKG4ub3JkZXJCeSkpO1xuICAgICAgICB2YXIgYSA9IG51bGw7XG4gICAgICAgIG4ubGltaXQgJiYgKGEgPSB0aGlzLm9pKG4ubGltaXQpKTtcbiAgICAgICAgdmFyIGggPSBudWxsO1xuICAgICAgICBuLnN0YXJ0QXQgJiYgKGggPSB0aGlzLkdpKG4uc3RhcnRBdCkpO1xuICAgICAgICB2YXIgYyA9IG51bGw7XG4gICAgICAgIHJldHVybiBuLmVuZEF0ICYmIChjID0gdGhpcy5HaShuLmVuZEF0KSksIG5ldyB3dChlLCBpLCB1LCBzLCBhLCBcIkZcIiAvKiBGaXJzdCAqLyAsIGgsIGMpLmVlKCk7XG4gICAgfSwgdC5wcm90b3R5cGUuemkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5IaSh0LlRlKTtcbiAgICAgICAgcmV0dXJuIG51bGwgPT0gZSA/IG51bGwgOiB7XG4gICAgICAgICAgICBcImdvb2ctbGlzdGVuLXRhZ3NcIjogZVxuICAgICAgICB9O1xuICAgIH0sIHQucHJvdG90eXBlLkhpID0gZnVuY3Rpb24odCkge1xuICAgICAgICBzd2l0Y2ggKHQpIHtcbiAgICAgICAgICBjYXNlIDAgLyogTGlzdGVuICovIDpcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgICAgICAgY2FzZSAxIC8qIEV4aXN0ZW5jZUZpbHRlck1pc21hdGNoICovIDpcbiAgICAgICAgICAgIHJldHVybiBcImV4aXN0ZW5jZS1maWx0ZXItbWlzbWF0Y2hcIjtcblxuICAgICAgICAgIGNhc2UgMiAvKiBMaW1ib1Jlc29sdXRpb24gKi8gOlxuICAgICAgICAgICAgcmV0dXJuIFwibGltYm8tZG9jdW1lbnRcIjtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gZ2UoKTtcbiAgICAgICAgfVxuICAgIH0sIHQucHJvdG90eXBlLmVlID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSwgbiA9IHQudGFyZ2V0O1xuICAgICAgICByZXR1cm4gKGUgPSBuLk90KCkgPyB7XG4gICAgICAgICAgICBkb2N1bWVudHM6IHRoaXMuT2kobilcbiAgICAgICAgfSA6IHtcbiAgICAgICAgICAgIHF1ZXJ5OiB0aGlzLkJpKG4pXG4gICAgICAgIH0pLnRhcmdldElkID0gdC50YXJnZXRJZCwgdC5yZXN1bWVUb2tlbi5ydCgpID4gMCAmJiAoZS5yZXN1bWVUb2tlbiA9IHRoaXMudWkodC5yZXN1bWVUb2tlbikpLCBcbiAgICAgICAgZTtcbiAgICB9LCB0LnByb3RvdHlwZS5xaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICBpZiAoMCAhPT0gdC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBuID0gdC5tYXAoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdCBpbnN0YW5jZW9mIEV0ID8gZS5ZaSh0KSA6IGdlKCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZXR1cm4gMSA9PT0gbi5sZW5ndGggPyBuWzBdIDoge1xuICAgICAgICAgICAgICAgIGNvbXBvc2l0ZUZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICBvcDogXCJBTkRcIixcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyczogblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9LCB0LnByb3RvdHlwZS5qaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdCA/IHZvaWQgMCAhPT0gdC51bmFyeUZpbHRlciA/IFsgdGhpcy5KaSh0KSBdIDogdm9pZCAwICE9PSB0LmZpZWxkRmlsdGVyID8gWyB0aGlzLlhpKHQpIF0gOiB2b2lkIDAgIT09IHQuY29tcG9zaXRlRmlsdGVyID8gdC5jb21wb3NpdGVGaWx0ZXIuZmlsdGVycy5tYXAoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBlLmppKHQpO1xuICAgICAgICB9KSkucmVkdWNlKChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gdC5jb25jYXQoZSk7XG4gICAgICAgIH0pKSA6IGdlKCkgOiBbXTtcbiAgICB9LCB0LnByb3RvdHlwZS5VaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICBpZiAoMCAhPT0gdC5sZW5ndGgpIHJldHVybiB0Lm1hcCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIGUuWmkodCk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5LaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdC5tYXAoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBlLnRuKHQpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuUWkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBiZWZvcmU6IHQuYmVmb3JlLFxuICAgICAgICAgICAgdmFsdWVzOiB0LnBvc2l0aW9uXG4gICAgICAgIH07XG4gICAgfSwgdC5wcm90b3R5cGUuR2kgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gISF0LmJlZm9yZSwgbiA9IHQudmFsdWVzIHx8IFtdO1xuICAgICAgICByZXR1cm4gbmV3IEF0KG4sIGUpO1xuICAgIH0sIFxuICAgIC8vIHZpc2libGUgZm9yIHRlc3RpbmdcbiAgICB0LnByb3RvdHlwZS5lbiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHNlW3RdO1xuICAgIH0sIFxuICAgIC8vIHZpc2libGUgZm9yIHRlc3RpbmdcbiAgICB0LnByb3RvdHlwZS5zbiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgc3dpdGNoICh0KSB7XG4gICAgICAgICAgY2FzZSBcIkFTQ0VORElOR1wiOlxuICAgICAgICAgICAgcmV0dXJuIFwiYXNjXCIgLyogQVNDRU5ESU5HICovO1xuXG4gICAgICAgICAgY2FzZSBcIkRFU0NFTkRJTkdcIjpcbiAgICAgICAgICAgIHJldHVybiBcImRlc2NcIiAvKiBERVNDRU5ESU5HICovO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH0sIFxuICAgIC8vIHZpc2libGUgZm9yIHRlc3RpbmdcbiAgICB0LnByb3RvdHlwZS5ubiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHVlW3RdO1xuICAgIH0sIHQucHJvdG90eXBlLnJuID0gZnVuY3Rpb24odCkge1xuICAgICAgICBzd2l0Y2ggKHQpIHtcbiAgICAgICAgICBjYXNlIFwiRVFVQUxcIjpcbiAgICAgICAgICAgIHJldHVybiBcIj09XCIgLyogRVFVQUwgKi87XG5cbiAgICAgICAgICBjYXNlIFwiR1JFQVRFUl9USEFOXCI6XG4gICAgICAgICAgICByZXR1cm4gXCI+XCIgLyogR1JFQVRFUl9USEFOICovO1xuXG4gICAgICAgICAgY2FzZSBcIkdSRUFURVJfVEhBTl9PUl9FUVVBTFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiPj1cIiAvKiBHUkVBVEVSX1RIQU5fT1JfRVFVQUwgKi87XG5cbiAgICAgICAgICBjYXNlIFwiTEVTU19USEFOXCI6XG4gICAgICAgICAgICByZXR1cm4gXCI8XCIgLyogTEVTU19USEFOICovO1xuXG4gICAgICAgICAgY2FzZSBcIkxFU1NfVEhBTl9PUl9FUVVBTFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiPD1cIiAvKiBMRVNTX1RIQU5fT1JfRVFVQUwgKi87XG5cbiAgICAgICAgICBjYXNlIFwiQVJSQVlfQ09OVEFJTlNcIjpcbiAgICAgICAgICAgIHJldHVybiBcImFycmF5LWNvbnRhaW5zXCIgLyogQVJSQVlfQ09OVEFJTlMgKi87XG5cbiAgICAgICAgICBjYXNlIFwiSU5cIjpcbiAgICAgICAgICAgIHJldHVybiBcImluXCIgLyogSU4gKi87XG5cbiAgICAgICAgICBjYXNlIFwiQVJSQVlfQ09OVEFJTlNfQU5ZXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJhcnJheS1jb250YWlucy1hbnlcIiAvKiBBUlJBWV9DT05UQUlOU19BTlkgKi87XG5cbiAgICAgICAgICBjYXNlIFwiT1BFUkFUT1JfVU5TUEVDSUZJRURcIjpcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGdlKCk7XG4gICAgICAgIH1cbiAgICB9LCB0LnByb3RvdHlwZS5obiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpZWxkUGF0aDogdC5qKClcbiAgICAgICAgfTtcbiAgICB9LCB0LnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIGIuWCh0LmZpZWxkUGF0aCk7XG4gICAgfSwgXG4gICAgLy8gdmlzaWJsZSBmb3IgdGVzdGluZ1xuICAgIHQucHJvdG90eXBlLlppID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmllbGQ6IHRoaXMuaG4odC5maWVsZCksXG4gICAgICAgICAgICBkaXJlY3Rpb246IHRoaXMuZW4odC5kaXIpXG4gICAgICAgIH07XG4gICAgfSwgdC5wcm90b3R5cGUudG4gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBuZXcga3QodGhpcy5vbih0LmZpZWxkKSwgdGhpcy5zbih0LmRpcmVjdGlvbikpO1xuICAgIH0sIHQucHJvdG90eXBlLlhpID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gRXQuY3JlYXRlKHRoaXMub24odC5maWVsZEZpbHRlci5maWVsZCksIHRoaXMucm4odC5maWVsZEZpbHRlci5vcCksIHQuZmllbGRGaWx0ZXIudmFsdWUpO1xuICAgIH0sIFxuICAgIC8vIHZpc2libGUgZm9yIHRlc3RpbmdcbiAgICB0LnByb3RvdHlwZS5ZaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgaWYgKFwiPT1cIiAvKiBFUVVBTCAqLyA9PT0gdC5vcCkge1xuICAgICAgICAgICAgaWYgKFEodC52YWx1ZSkpIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdW5hcnlGaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGQ6IHRoaXMuaG4odC5maWVsZCksXG4gICAgICAgICAgICAgICAgICAgIG9wOiBcIklTX05BTlwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChXKHQudmFsdWUpKSByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVuYXJ5RmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkOiB0aGlzLmhuKHQuZmllbGQpLFxuICAgICAgICAgICAgICAgICAgICBvcDogXCJJU19OVUxMXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmaWVsZEZpbHRlcjoge1xuICAgICAgICAgICAgICAgIGZpZWxkOiB0aGlzLmhuKHQuZmllbGQpLFxuICAgICAgICAgICAgICAgIG9wOiB0aGlzLm5uKHQub3ApLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB0LnZhbHVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSwgdC5wcm90b3R5cGUuSmkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHN3aXRjaCAodC51bmFyeUZpbHRlci5vcCkge1xuICAgICAgICAgIGNhc2UgXCJJU19OQU5cIjpcbiAgICAgICAgICAgIHZhciBlID0gdGhpcy5vbih0LnVuYXJ5RmlsdGVyLmZpZWxkKTtcbiAgICAgICAgICAgIHJldHVybiBFdC5jcmVhdGUoZSwgXCI9PVwiIC8qIEVRVUFMICovICwge1xuICAgICAgICAgICAgICAgIGRvdWJsZVZhbHVlOiBOYU5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgY2FzZSBcIklTX05VTExcIjpcbiAgICAgICAgICAgIHZhciBuID0gdGhpcy5vbih0LnVuYXJ5RmlsdGVyLmZpZWxkKTtcbiAgICAgICAgICAgIHJldHVybiBFdC5jcmVhdGUobiwgXCI9PVwiIC8qIEVRVUFMICovICwge1xuICAgICAgICAgICAgICAgIG51bGxWYWx1ZTogXCJOVUxMX1ZBTFVFXCJcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgY2FzZSBcIk9QRVJBVE9SX1VOU1BFQ0lGSUVEXCI6XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBnZSgpO1xuICAgICAgICB9XG4gICAgfSwgdC5wcm90b3R5cGUuU2kgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gW107XG4gICAgICAgIHJldHVybiB0LmZpZWxkcy5mb3JFYWNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gZS5wdXNoKHQuaigpKTtcbiAgICAgICAgfSkpLCB7XG4gICAgICAgICAgICBmaWVsZFBhdGhzOiBlXG4gICAgICAgIH07XG4gICAgfSwgdC5wcm90b3R5cGUuJGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdC5maWVsZFBhdGhzIHx8IFtdO1xuICAgICAgICByZXR1cm4gbmV3IFooZS5tYXAoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBiLlgodCk7XG4gICAgICAgIH0pKSk7XG4gICAgfSwgdDtcbn0oKTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgSnNvbk9iamVjdCB2YWx1ZXMgZm9yIHRoZSBEYXRhc3RvcmUgQVBJIHN1aXRhYmxlIGZvciBzZW5kaW5nIHRvXG4gKiBlaXRoZXIgR1JQQyBzdHViIG1ldGhvZHMgb3IgdmlhIHRoZSBKU09OL0hUVFAgUkVTVCBBUEkuXG4gKiBUT0RPKGtsaW10KTogV2UgY2FuIHJlbW92ZSB0aGUgZGF0YWJhc2VJZCBhcmd1bWVudCBpZiB3ZSBrZWVwIHRoZSBmdWxsXG4gKiByZXNvdXJjZSBuYW1lIGluIGRvY3VtZW50cy5cbiAqLyBmdW5jdGlvbiBoZSh0KSB7XG4gICAgLy8gUmVzb3VyY2UgbmFtZXMgaGF2ZSBhdCBsZWFzdCA0IGNvbXBvbmVudHMgKHByb2plY3QgSUQsIGRhdGFiYXNlIElEKVxuICAgIHJldHVybiB0Lmxlbmd0aCA+PSA0ICYmIFwicHJvamVjdHNcIiA9PT0gdC5nZXQoMCkgJiYgXCJkYXRhYmFzZXNcIiA9PT0gdC5nZXQoMik7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFByb3ZpZGVzIHNpbmdsZXRvbiBoZWxwZXJzIHdoZXJlIHNldHVwIGNvZGUgY2FuIGluamVjdCBhIHBsYXRmb3JtIGF0IHJ1bnRpbWUuXG4gKiBzZXRQbGF0Zm9ybSBuZWVkcyB0byBiZSBzZXQgYmVmb3JlIEZpcmVzdG9yZSBpcyB1c2VkIGFuZCBtdXN0IGJlIHNldCBleGFjdGx5XG4gKiBvbmNlLlxuICovIHZhciBjZSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCgpIHt9XG4gICAgcmV0dXJuIHQuYW4gPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHQucGxhdGZvcm0gJiYgZ2UoKSwgdC5wbGF0Zm9ybSA9IGU7XG4gICAgfSwgdC5udCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdC5wbGF0Zm9ybSB8fCBnZSgpLCB0LnBsYXRmb3JtO1xuICAgIH0sIHQ7XG59KCksIGZlID0gbmV3IHIuTG9nZ2VyKFwiQGZpcmViYXNlL2ZpcmVzdG9yZVwiKTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIEhlbHBlciBtZXRob2RzIGFyZSBuZWVkZWQgYmVjYXVzZSB2YXJpYWJsZXMgY2FuJ3QgYmUgZXhwb3J0ZWQgYXMgcmVhZC93cml0ZVxuZnVuY3Rpb24gbGUoKSB7XG4gICAgcmV0dXJuIGZlLmxvZ0xldmVsO1xufVxuXG5mdW5jdGlvbiBwZSh0KSB7XG4gICAgZmUubG9nTGV2ZWwgPSB0O1xufVxuXG5mdW5jdGlvbiBkZSh0KSB7XG4gICAgZm9yICh2YXIgbiA9IFtdLCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgbltpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgaWYgKGZlLmxvZ0xldmVsIDw9IHIuTG9nTGV2ZWwuREVCVUcpIHtcbiAgICAgICAgdmFyIG8gPSBuLm1hcCh2ZSk7XG4gICAgICAgIGZlLmRlYnVnLmFwcGx5KGZlLCBlLl9fc3ByZWFkQXJyYXlzKFsgXCJGaXJlc3RvcmUgKFwiICsgdSArIFwiKTogXCIgKyB0IF0sIG8pKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHllKHQpIHtcbiAgICBmb3IgKHZhciBuID0gW10sIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBuW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICBpZiAoZmUubG9nTGV2ZWwgPD0gci5Mb2dMZXZlbC5FUlJPUikge1xuICAgICAgICB2YXIgbyA9IG4ubWFwKHZlKTtcbiAgICAgICAgZmUuZXJyb3IuYXBwbHkoZmUsIGUuX19zcHJlYWRBcnJheXMoWyBcIkZpcmVzdG9yZSAoXCIgKyB1ICsgXCIpOiBcIiArIHQgXSwgbykpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBhZGRpdGlvbmFsIGxvZyBwYXJhbWV0ZXIgdG8gYSBzdHJpbmcgcmVwcmVzZW50YXRpb24uXG4gKi8gZnVuY3Rpb24gdmUodCkge1xuICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiB0KSByZXR1cm4gdDtcbiAgICB2YXIgZSA9IGNlLm50KCk7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGUudW4odCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBDb252ZXJ0aW5nIHRvIEpTT04gZmFpbGVkLCBqdXN0IGxvZyB0aGUgb2JqZWN0IGRpcmVjdGx5XG4gICAgICAgIHJldHVybiB0O1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogVW5jb25kaXRpb25hbGx5IGZhaWxzLCB0aHJvd2luZyBhbiBFcnJvciB3aXRoIHRoZSBnaXZlbiBtZXNzYWdlLlxuICogTWVzc2FnZXMgYXJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzLlxuICpcbiAqIFJldHVybnMgYG5ldmVyYCBhbmQgY2FuIGJlIHVzZWQgaW4gZXhwcmVzc2lvbnM6XG4gKiBAZXhhbXBsZVxuICogbGV0IGZ1dHVyZVZhciA9IGZhaWwoJ25vdCBpbXBsZW1lbnRlZCB5ZXQnKTtcbiAqLyBmdW5jdGlvbiBnZSh0KSB7XG4gICAgdm9pZCAwID09PSB0ICYmICh0ID0gXCJVbmV4cGVjdGVkIHN0YXRlXCIpO1xuICAgIC8vIExvZyB0aGUgZmFpbHVyZSBpbiBhZGRpdGlvbiB0byB0aHJvdyBhbiBleGNlcHRpb24sIGp1c3QgaW4gY2FzZSB0aGVcbiAgICAvLyBleGNlcHRpb24gaXMgc3dhbGxvd2VkLlxuICAgICAgICB2YXIgZSA9IFwiRklSRVNUT1JFIChcIiArIHUgKyBcIikgSU5URVJOQUwgQVNTRVJUSU9OIEZBSUxFRDogXCIgKyB0O1xuICAgIC8vIE5PVEU6IFdlIGRvbid0IHVzZSBGaXJlc3RvcmVFcnJvciBoZXJlIGJlY2F1c2UgdGhlc2UgYXJlIGludGVybmFsIGZhaWx1cmVzXG4gICAgLy8gdGhhdCBjYW5ub3QgYmUgaGFuZGxlZCBieSB0aGUgdXNlci4gKEFsc28gaXQgd291bGQgY3JlYXRlIGEgY2lyY3VsYXJcbiAgICAvLyBkZXBlbmRlbmN5IGJldHdlZW4gdGhlIGVycm9yIGFuZCBhc3NlcnQgbW9kdWxlcyB3aGljaCBkb2Vzbid0IHdvcmsuKVxuICAgICAgICB0aHJvdyB5ZShlKSwgbmV3IEVycm9yKGUpXG4gICAgLyoqXG4gKiBGYWlscyBpZiB0aGUgZ2l2ZW4gYXNzZXJ0aW9uIGNvbmRpdGlvbiBpcyBmYWxzZSwgdGhyb3dpbmcgYW4gRXJyb3Igd2l0aCB0aGVcbiAqIGdpdmVuIG1lc3NhZ2UgaWYgaXQgZGlkLlxuICpcbiAqIE1lc3NhZ2VzIGFyZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcy5cbiAqLztcbn1cblxuZnVuY3Rpb24gbWUodCwgZSkge1xuICAgIHQgfHwgZ2UoKTtcbn1cblxuLyoqXG4gKiBDYXN0cyBgb2JqYCB0byBgVGAuIEluIG5vbi1wcm9kdWN0aW9uIGJ1aWxkcywgdmVyaWZpZXMgdGhhdCBgb2JqYCBpcyBhblxuICogaW5zdGFuY2Ugb2YgYFRgIGJlZm9yZSBjYXN0aW5nLlxuICovIGZ1bmN0aW9uIHdlKHQsIFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmUpIHtcbiAgICByZXR1cm4gdDtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gdmFyIEVlID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KCkge31cbiAgICByZXR1cm4gdC5jbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IgKFxuICAgICAgICAvLyBBbHBoYW51bWVyaWMgY2hhcmFjdGVyc1xuICAgICAgICB2YXIgdCA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODlcIiwgZSA9IE1hdGguZmxvb3IoMjU2IC8gdC5sZW5ndGgpICogdC5sZW5ndGgsIG4gPSBcIlwiXG4gICAgICAgIC8vIFRoZSBsYXJnZXN0IGJ5dGUgdmFsdWUgdGhhdCBpcyBhIG11bHRpcGxlIG9mIGBjaGFyLmxlbmd0aGAuXG4gICAgICAgIDsgbi5sZW5ndGggPCAyMDsgKSBmb3IgKHZhciByID0gY2UubnQoKS5fbig0MCksIGkgPSAwOyBpIDwgci5sZW5ndGg7ICsraSkgXG4gICAgICAgIC8vIE9ubHkgYWNjZXB0IHZhbHVlcyB0aGF0IGFyZSBbMCwgbWF4TXVsdGlwbGUpLCB0aGlzIGVuc3VyZXMgdGhleSBjYW5cbiAgICAgICAgLy8gYmUgZXZlbmx5IG1hcHBlZCB0byBpbmRpY2VzIG9mIGBjaGFyc2AgdmlhIGEgbW9kdWxvIG9wZXJhdGlvbi5cbiAgICAgICAgbi5sZW5ndGggPCAyMCAmJiByW2ldIDwgZSAmJiAobiArPSB0LmNoYXJBdChyW2ldICUgdC5sZW5ndGgpKTtcbiAgICAgICAgcmV0dXJuIG47XG4gICAgfSwgdDtcbn0oKTtcblxuZnVuY3Rpb24gYmUodCwgZSkge1xuICAgIHJldHVybiB0IDwgZSA/IC0xIDogdCA+IGUgPyAxIDogMDtcbn1cblxuLyoqIEhlbHBlciB0byBjb21wYXJlIGFycmF5cyB1c2luZyBpc0VxdWFsKCkuICovIGZ1bmN0aW9uIF9lKHQsIGUsIG4pIHtcbiAgICByZXR1cm4gdC5sZW5ndGggPT09IGUubGVuZ3RoICYmIHQuZXZlcnkoKGZ1bmN0aW9uKHQsIHIpIHtcbiAgICAgICAgcmV0dXJuIG4odCwgZVtyXSk7XG4gICAgfSkpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGltbWVkaWF0ZSBsZXhpY29ncmFwaGljYWxseS1mb2xsb3dpbmcgc3RyaW5nLiBUaGlzIGlzIHVzZWZ1bCB0b1xuICogY29uc3RydWN0IGFuIGluY2x1c2l2ZSByYW5nZSBmb3IgaW5kZXhlZGRiIGl0ZXJhdG9ycy5cbiAqLyBmdW5jdGlvbiBUZSh0KSB7XG4gICAgLy8gUmV0dXJuIHRoZSBpbnB1dCBzdHJpbmcsIHdpdGggYW4gYWRkaXRpb25hbCBOVUwgYnl0ZSBhcHBlbmRlZC5cbiAgICByZXR1cm4gdCArIFwiXFwwXCI7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIHZhciBJZSA9IFxuLyoqXG4gICAgICogQ29uc3RydWN0cyBhIERhdGFiYXNlSW5mbyB1c2luZyB0aGUgcHJvdmlkZWQgaG9zdCwgZGF0YWJhc2VJZCBhbmRcbiAgICAgKiBwZXJzaXN0ZW5jZUtleS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkYXRhYmFzZUlkIFRoZSBkYXRhYmFzZSB0byB1c2UuXG4gICAgICogQHBhcmFtIHBlcnNpc3RlbmNlS2V5IEEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgRmlyZXN0b3JlJ3MgbG9jYWxcbiAgICAgKiBzdG9yYWdlICh1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIGRhdGFiYXNlSWQpLlxuICAgICAqIEBwYXJhbSBob3N0IFRoZSBGaXJlc3RvcmUgYmFja2VuZCBob3N0IHRvIGNvbm5lY3QgdG8uXG4gICAgICogQHBhcmFtIHNzbCBXaGV0aGVyIHRvIHVzZSBTU0wgd2hlbiBjb25uZWN0aW5nLlxuICAgICAqIEBwYXJhbSBmb3JjZUxvbmdQb2xsaW5nIFdoZXRoZXIgdG8gdXNlIHRoZSBmb3JjZUxvbmdQb2xsaW5nIG9wdGlvblxuICAgICAqIHdoZW4gdXNpbmcgV2ViQ2hhbm5lbCBhcyB0aGUgbmV0d29yayB0cmFuc3BvcnQuXG4gICAgICovXG5mdW5jdGlvbih0LCBlLCBuLCByLCBpKSB7XG4gICAgdGhpcy5paSA9IHQsIHRoaXMucGVyc2lzdGVuY2VLZXkgPSBlLCB0aGlzLmhvc3QgPSBuLCB0aGlzLnNzbCA9IHIsIHRoaXMuZm9yY2VMb25nUG9sbGluZyA9IGk7XG59LCBOZSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlKSB7XG4gICAgICAgIHRoaXMucHJvamVjdElkID0gdCwgdGhpcy5kYXRhYmFzZSA9IGUgfHwgXCIoZGVmYXVsdClcIjtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJsblwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gXCIoZGVmYXVsdClcIiA9PT0gdGhpcy5kYXRhYmFzZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgdC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIGUgaW5zdGFuY2VvZiB0ICYmIGUucHJvamVjdElkID09PSB0aGlzLnByb2plY3RJZCAmJiBlLmRhdGFiYXNlID09PSB0aGlzLmRhdGFiYXNlO1xuICAgIH0sIHQucHJvdG90eXBlLlMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBiZSh0aGlzLnByb2plY3RJZCwgdC5wcm9qZWN0SWQpIHx8IGJlKHRoaXMuZGF0YWJhc2UsIHQuZGF0YWJhc2UpO1xuICAgIH0sIHQ7XG59KCksIEFlID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdGhpcy5kbiA9IHQsIFxuICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoZSBpbm5lciBtYXAgZm9yIGEga2V5IC0+IHZhbHVlIHBhaXIuIER1ZSB0byB0aGUgcG9zc2liaWxpdHkgb2ZcbiAgICAgICAgICAgICAqIGNvbGxpc2lvbnMgd2Uga2VlcCBhIGxpc3Qgb2YgZW50cmllcyB0aGF0IHdlIGRvIGEgbGluZWFyIHNlYXJjaCB0aHJvdWdoXG4gICAgICAgICAgICAgKiB0byBmaW5kIGFuIGFjdHVhbCBtYXRjaC4gTm90ZSB0aGF0IGNvbGxpc2lvbnMgc2hvdWxkIGJlIHJhcmUsIHNvIHdlIHN0aWxsXG4gICAgICAgICAgICAgKiBleHBlY3QgbmVhciBjb25zdGFudCB0aW1lIGxvb2t1cHMgaW4gcHJhY3RpY2UuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5mbiA9IHt9XG4gICAgICAgIC8qKiBHZXQgYSB2YWx1ZSBmb3IgdGhpcyBrZXksIG9yIHVuZGVmaW5lZCBpZiBpdCBkb2VzIG5vdCBleGlzdC4gKi87XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5kbih0KSwgbiA9IHRoaXMuZm5bZV07XG4gICAgICAgIGlmICh2b2lkIDAgIT09IG4pIGZvciAodmFyIHIgPSAwLCBpID0gbjsgciA8IGkubGVuZ3RoOyByKyspIHtcbiAgICAgICAgICAgIHZhciBvID0gaVtyXSwgcyA9IG9bMF0sIHUgPSBvWzFdO1xuICAgICAgICAgICAgaWYgKHMuaXNFcXVhbCh0KSkgcmV0dXJuIHU7XG4gICAgICAgIH1cbiAgICB9LCB0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB2b2lkIDAgIT09IHRoaXMuZ2V0KHQpO1xuICAgIH0sIFxuICAgIC8qKiBQdXQgdGhpcyBrZXkgYW5kIHZhbHVlIGluIHRoZSBtYXAuICovIHQucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLmRuKHQpLCByID0gdGhpcy5mbltuXTtcbiAgICAgICAgaWYgKHZvaWQgMCAhPT0gcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByLmxlbmd0aDsgaSsrKSBpZiAocltpXVswXS5pc0VxdWFsKHQpKSByZXR1cm4gdm9pZCAocltpXSA9IFsgdCwgZSBdKTtcbiAgICAgICAgICAgIHIucHVzaChbIHQsIGUgXSk7XG4gICAgICAgIH0gZWxzZSB0aGlzLmZuW25dID0gWyBbIHQsIGUgXSBdO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGlzIGtleSBmcm9tIHRoZSBtYXAuIFJldHVybnMgYSBib29sZWFuIGlmIGFueXRoaW5nIHdhcyBkZWxldGVkLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLmRuKHQpLCBuID0gdGhpcy5mbltlXTtcbiAgICAgICAgaWYgKHZvaWQgMCA9PT0gbikgcmV0dXJuICExO1xuICAgICAgICBmb3IgKHZhciByID0gMDsgciA8IG4ubGVuZ3RoOyByKyspIGlmIChuW3JdWzBdLmlzRXF1YWwodCkpIHJldHVybiAxID09PSBuLmxlbmd0aCA/IGRlbGV0ZSB0aGlzLmZuW2VdIDogbi5zcGxpY2UociwgMSksIFxuICAgICAgICAhMDtcbiAgICAgICAgcmV0dXJuICExO1xuICAgIH0sIHQucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIEkodGhpcy5mbiwgKGZ1bmN0aW9uKGUsIG4pIHtcbiAgICAgICAgICAgIGZvciAodmFyIHIgPSAwLCBpID0gbjsgciA8IGkubGVuZ3RoOyByKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbyA9IGlbcl0sIHMgPSBvWzBdLCB1ID0gb1sxXTtcbiAgICAgICAgICAgICAgICB0KHMsIHUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuQiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gTih0aGlzLmZuKTtcbiAgICB9LCB0O1xufSgpLCBrZSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGJhdGNoSWQgVGhlIHVuaXF1ZSBJRCBvZiB0aGlzIG11dGF0aW9uIGJhdGNoLlxuICAgICAqIEBwYXJhbSBsb2NhbFdyaXRlVGltZSBUaGUgb3JpZ2luYWwgd3JpdGUgdGltZSBvZiB0aGlzIG11dGF0aW9uLlxuICAgICAqIEBwYXJhbSBiYXNlTXV0YXRpb25zIE11dGF0aW9ucyB0aGF0IGFyZSB1c2VkIHRvIHBvcHVsYXRlIHRoZSBiYXNlXG4gICAgICogdmFsdWVzIHdoZW4gdGhpcyBtdXRhdGlvbiBpcyBhcHBsaWVkIGxvY2FsbHkuIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9jYWxseVxuICAgICAqIG92ZXJ3cml0ZSB2YWx1ZXMgdGhhdCBhcmUgcGVyc2lzdGVkIGluIHRoZSByZW1vdGUgZG9jdW1lbnQgY2FjaGUuIEJhc2VcbiAgICAgKiBtdXRhdGlvbnMgYXJlIG5ldmVyIHNlbnQgdG8gdGhlIGJhY2tlbmQuXG4gICAgICogQHBhcmFtIG11dGF0aW9ucyBUaGUgdXNlci1wcm92aWRlZCBtdXRhdGlvbnMgaW4gdGhpcyBtdXRhdGlvbiBiYXRjaC5cbiAgICAgKiBVc2VyLXByb3ZpZGVkIG11dGF0aW9ucyBhcmUgYXBwbGllZCBib3RoIGxvY2FsbHkgYW5kIHJlbW90ZWx5IG9uIHRoZVxuICAgICAqIGJhY2tlbmQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdCh0LCBlLCBuLCByKSB7XG4gICAgICAgIHRoaXMuYmF0Y2hJZCA9IHQsIHRoaXMuVG4gPSBlLCB0aGlzLmJhc2VNdXRhdGlvbnMgPSBuLCB0aGlzLm11dGF0aW9ucyA9IHJcbiAgICAgICAgLyoqXG4gICAgICogQXBwbGllcyBhbGwgdGhlIG11dGF0aW9ucyBpbiB0aGlzIE11dGF0aW9uQmF0Y2ggdG8gdGhlIHNwZWNpZmllZCBkb2N1bWVudFxuICAgICAqIHRvIGNyZWF0ZSBhIG5ldyByZW1vdGUgZG9jdW1lbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBkb2NLZXkgVGhlIGtleSBvZiB0aGUgZG9jdW1lbnQgdG8gYXBwbHkgbXV0YXRpb25zIHRvLlxuICAgICAqIEBwYXJhbSBtYXliZURvYyBUaGUgZG9jdW1lbnQgdG8gYXBwbHkgbXV0YXRpb25zIHRvLlxuICAgICAqIEBwYXJhbSBiYXRjaFJlc3VsdCBUaGUgcmVzdWx0IG9mIGFwcGx5aW5nIHRoZSBNdXRhdGlvbkJhdGNoIHRvIHRoZVxuICAgICAqIGJhY2tlbmQuXG4gICAgICovO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuYXQgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIGZvciAodmFyIHIgPSBuLkVuLCBpID0gMDsgaSA8IHRoaXMubXV0YXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbyA9IHRoaXMubXV0YXRpb25zW2ldO1xuICAgICAgICAgICAgaWYgKG8ua2V5LmlzRXF1YWwodCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IHJbaV07XG4gICAgICAgICAgICAgICAgZSA9IG8uYXQoZSwgcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIGxvY2FsIHZpZXcgb2YgYSBkb2N1bWVudCBnaXZlbiBhbGwgdGhlIG11dGF0aW9ucyBpbiB0aGlzXG4gICAgICogYmF0Y2guXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZG9jS2V5IFRoZSBrZXkgb2YgdGhlIGRvY3VtZW50IHRvIGFwcGx5IG11dGF0aW9ucyB0by5cbiAgICAgKiBAcGFyYW0gbWF5YmVEb2MgVGhlIGRvY3VtZW50IHRvIGFwcGx5IG11dGF0aW9ucyB0by5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5vdCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgLy8gRmlyc3QsIGFwcGx5IHRoZSBiYXNlIHN0YXRlLiBUaGlzIGFsbG93cyB1cyB0byBhcHBseSBub24taWRlbXBvdGVudFxuICAgICAgICAvLyB0cmFuc2Zvcm0gYWdhaW5zdCBhIGNvbnNpc3RlbnQgc2V0IG9mIHZhbHVlcy5cbiAgICAgICAgZm9yICh2YXIgbiA9IDAsIHIgPSB0aGlzLmJhc2VNdXRhdGlvbnM7IG4gPCByLmxlbmd0aDsgbisrKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHJbbl07XG4gICAgICAgICAgICBpLmtleS5pc0VxdWFsKHQpICYmIChlID0gaS5vdChlLCBlLCB0aGlzLlRuKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2Vjb25kLCBhcHBseSBhbGwgdXNlci1wcm92aWRlZCBtdXRhdGlvbnMuXG4gICAgICAgIGZvciAodmFyIG8gPSBlLCBzID0gMCwgdSA9IHRoaXMubXV0YXRpb25zOyBzIDwgdS5sZW5ndGg7IHMrKykge1xuICAgICAgICAgICAgdmFyIGEgPSB1W3NdO1xuICAgICAgICAgICAgYS5rZXkuaXNFcXVhbCh0KSAmJiAoZSA9IGEub3QoZSwgbywgdGhpcy5UbikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBsb2NhbCB2aWV3IGZvciBhbGwgcHJvdmlkZWQgZG9jdW1lbnRzIGdpdmVuIHRoZSBtdXRhdGlvbnMgaW5cbiAgICAgKiB0aGlzIGJhdGNoLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLkluID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMsIG4gPSB0O1xuICAgICAgICAvLyBUT0RPKG1yc2NobWlkdCk6IFRoaXMgaW1wbGVtZW50YXRpb24gaXMgTyhuXjIpLiBJZiB3ZSBhcHBseSB0aGUgbXV0YXRpb25zXG4gICAgICAgIC8vIGRpcmVjdGx5IChhcyBkb25lIGluIGBhcHBseVRvTG9jYWxWaWV3KClgKSwgd2UgY2FuIHJlZHVjZSB0aGUgY29tcGxleGl0eVxuICAgICAgICAvLyB0byBPKG4pLlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm11dGF0aW9ucy5mb3JFYWNoKChmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICB2YXIgaSA9IGUub3Qoci5rZXksIHQuZ2V0KHIua2V5KSk7XG4gICAgICAgICAgICBpICYmIChuID0gbi5BZShyLmtleSwgaSkpO1xuICAgICAgICB9KSksIG47XG4gICAgfSwgdC5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tdXRhdGlvbnMucmVkdWNlKChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gdC5hZGQoZS5rZXkpO1xuICAgICAgICB9KSwgV3QoKSk7XG4gICAgfSwgdC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmF0Y2hJZCA9PT0gdC5iYXRjaElkICYmIF9lKHRoaXMubXV0YXRpb25zLCB0Lm11dGF0aW9ucywgKGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0LmlzRXF1YWwoZSk7XG4gICAgICAgIH0pKSAmJiBfZSh0aGlzLmJhc2VNdXRhdGlvbnMsIHQuYmFzZU11dGF0aW9ucywgKGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0LmlzRXF1YWwoZSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0O1xufSgpLCBEZSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlLCBuLCByLCBcbiAgICAvKipcbiAgICAgKiBBIHByZS1jb21wdXRlZCBtYXBwaW5nIGZyb20gZWFjaCBtdXRhdGVkIGRvY3VtZW50IHRvIHRoZSByZXN1bHRpbmdcbiAgICAgKiB2ZXJzaW9uLlxuICAgICAqL1xuICAgIGkpIHtcbiAgICAgICAgdGhpcy5iYXRjaCA9IHQsIHRoaXMud24gPSBlLCB0aGlzLkVuID0gbiwgdGhpcy5zdHJlYW1Ub2tlbiA9IHIsIHRoaXMuUm4gPSBpXG4gICAgICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgTXV0YXRpb25CYXRjaFJlc3VsdCBmb3IgdGhlIGdpdmVuIGJhdGNoIGFuZCByZXN1bHRzLiBUaGVyZVxuICAgICAqIG11c3QgYmUgb25lIHJlc3VsdCBmb3IgZWFjaCBtdXRhdGlvbiBpbiB0aGUgYmF0Y2guIFRoaXMgc3RhdGljIGZhY3RvcnlcbiAgICAgKiBjYWNoZXMgYSBkb2N1bWVudD0+dmVyc2lvbiBtYXBwaW5nIChkb2NWZXJzaW9ucykuXG4gICAgICovO1xuICAgIH1cbiAgICByZXR1cm4gdC5mcm9tID0gZnVuY3Rpb24oZSwgbiwgciwgaSkge1xuICAgICAgICBtZShlLm11dGF0aW9ucy5sZW5ndGggPT09IHIubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgbyA9IHp0KCksIHMgPSBlLm11dGF0aW9ucywgdSA9IDA7IHUgPCBzLmxlbmd0aDsgdSsrKSBvID0gby5BZShzW3VdLmtleSwgclt1XS52ZXJzaW9uKTtcbiAgICAgICAgcmV0dXJuIG5ldyB0KGUsIG4sIHIsIGksIG8pO1xuICAgIH0sIHQ7XG59KCksIHhlID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICAvLyBOT1RFOiBuZXh0L2NhdGNoQ2FsbGJhY2sgd2lsbCBhbHdheXMgcG9pbnQgdG8gb3VyIG93biB3cmFwcGVyIGZ1bmN0aW9ucyxcbiAgICAgICAgLy8gbm90IHRoZSB1c2VyJ3MgcmF3IG5leHQoKSBvciBjYXRjaCgpIGNhbGxiYWNrcy5cbiAgICAgICAgICAgICAgICB0aGlzLkFuID0gbnVsbCwgdGhpcy5tbiA9IG51bGwsIFxuICAgICAgICAvLyBXaGVuIHRoZSBvcGVyYXRpb24gcmVzb2x2ZXMsIHdlJ2xsIHNldCByZXN1bHQgb3IgZXJyb3IgYW5kIG1hcmsgaXNEb25lLlxuICAgICAgICB0aGlzLnJlc3VsdCA9IHZvaWQgMCwgdGhpcy5lcnJvciA9IHZvaWQgMCwgdGhpcy5QbiA9ICExLCBcbiAgICAgICAgLy8gU2V0IHRvIHRydWUgd2hlbiAudGhlbigpIG9yIC5jYXRjaCgpIGFyZSBjYWxsZWQgYW5kIHByZXZlbnRzIGFkZGl0aW9uYWxcbiAgICAgICAgLy8gY2hhaW5pbmcuXG4gICAgICAgIHRoaXMuVm4gPSAhMSwgdCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgZS5QbiA9ICEwLCBlLnJlc3VsdCA9IHQsIGUuQW4gJiYgXG4gICAgICAgICAgICAvLyB2YWx1ZSBzaG91bGQgYmUgZGVmaW5lZCB1bmxlc3MgVCBpcyBWb2lkLCBidXQgd2UgY2FuJ3QgZXhwcmVzc1xuICAgICAgICAgICAgLy8gdGhhdCBpbiB0aGUgdHlwZSBzeXN0ZW0uXG4gICAgICAgICAgICBlLkFuKHQpO1xuICAgICAgICB9KSwgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGUuUG4gPSAhMCwgZS5lcnJvciA9IHQsIGUubW4gJiYgZS5tbih0KTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuY2F0Y2ggPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5leHQodm9pZCAwLCB0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oZSwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLlZuICYmIGdlKCksIHRoaXMuVm4gPSAhMCwgdGhpcy5QbiA/IHRoaXMuZXJyb3IgPyB0aGlzLmduKG4sIHRoaXMuZXJyb3IpIDogdGhpcy5wbihlLCB0aGlzLnJlc3VsdCkgOiBuZXcgdCgoZnVuY3Rpb24odCwgaSkge1xuICAgICAgICAgICAgci5BbiA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICByLnBuKGUsIG4pLm5leHQodCwgaSk7XG4gICAgICAgICAgICB9LCByLm1uID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHIuZ24obiwgZSkubmV4dCh0LCBpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS55biA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSwgbikge1xuICAgICAgICAgICAgdC5uZXh0KGUsIG4pO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuYm4gPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgbiA9IGUoKTtcbiAgICAgICAgICAgIHJldHVybiBuIGluc3RhbmNlb2YgdCA/IG4gOiB0LnJlc29sdmUobik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0LnJlamVjdChlKTtcbiAgICAgICAgfVxuICAgIH0sIHQucHJvdG90eXBlLnBuID0gZnVuY3Rpb24oZSwgbikge1xuICAgICAgICByZXR1cm4gZSA/IHRoaXMuYm4oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGUobik7XG4gICAgICAgIH0pKSA6IHQucmVzb2x2ZShuKTtcbiAgICB9LCB0LnByb3RvdHlwZS5nbiA9IGZ1bmN0aW9uKGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIGUgPyB0aGlzLmJuKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBlKG4pO1xuICAgICAgICB9KSkgOiB0LnJlamVjdChuKTtcbiAgICB9LCB0LnJlc29sdmUgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBuZXcgdCgoZnVuY3Rpb24odCwgbikge1xuICAgICAgICAgICAgdChlKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucmVqZWN0ID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gbmV3IHQoKGZ1bmN0aW9uKHQsIG4pIHtcbiAgICAgICAgICAgIG4oZSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnZuID0gZnVuY3Rpb24oXG4gICAgLy8gQWNjZXB0IGFsbCBQcm9taXNlIHR5cGVzIGluIHdhaXRGb3IoKS5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0KChmdW5jdGlvbih0LCBuKSB7XG4gICAgICAgICAgICB2YXIgciA9IDAsIGkgPSAwLCBvID0gITE7XG4gICAgICAgICAgICBlLmZvckVhY2goKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICArK3IsIGUubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICsraSwgbyAmJiBpID09PSByICYmIHQoKTtcbiAgICAgICAgICAgICAgICB9KSwgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4odCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSkpLCBvID0gITAsIGkgPT09IHIgJiYgdCgpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogR2l2ZW4gYW4gYXJyYXkgb2YgcHJlZGljYXRlIGZ1bmN0aW9ucyB0aGF0IGFzeW5jaHJvbm91c2x5IGV2YWx1YXRlIHRvIGFcbiAgICAgKiBib29sZWFuLCBpbXBsZW1lbnRzIGEgc2hvcnQtY2lyY3VpdGluZyBgb3JgIGJldHdlZW4gdGhlIHJlc3VsdHMuIFByZWRpY2F0ZXNcbiAgICAgKiB3aWxsIGJlIGV2YWx1YXRlZCB1bnRpbCBvbmUgb2YgdGhlbSByZXR1cm5zIGB0cnVlYCwgdGhlbiBzdG9wLiBUaGUgZmluYWxcbiAgICAgKiByZXN1bHQgd2lsbCBiZSB3aGV0aGVyIGFueSBvZiB0aGVtIHJldHVybmVkIGB0cnVlYC5cbiAgICAgKi9cbiAgICB0LlNuID0gZnVuY3Rpb24oZSkge1xuICAgICAgICBmb3IgKHZhciBuID0gdC5yZXNvbHZlKCExKSwgciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIG4gPSBuLm5leHQoKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbiA/IHQucmVzb2x2ZShuKSA6IGUoKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSwgaSA9IDAsIG8gPSBlOyBpIDwgby5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcihvW2ldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbjtcbiAgICB9LCB0LmZvckVhY2ggPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcywgciA9IFtdO1xuICAgICAgICByZXR1cm4gdC5mb3JFYWNoKChmdW5jdGlvbih0LCBpKSB7XG4gICAgICAgICAgICByLnB1c2goZS5jYWxsKG4sIHQsIGkpKTtcbiAgICAgICAgfSkpLCB0aGlzLnZuKHIpO1xuICAgIH0sIHQ7XG59KCksIFNlID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KCkge1xuICAgICAgICAvLyBBIG1hcHBpbmcgb2YgZG9jdW1lbnQga2V5IHRvIHRoZSBuZXcgY2FjaGUgZW50cnkgdGhhdCBzaG91bGQgYmUgd3JpdHRlbiAob3IgbnVsbCBpZiBhbnlcbiAgICAgICAgLy8gZXhpc3RpbmcgY2FjaGUgZW50cnkgc2hvdWxkIGJlIHJlbW92ZWQpLlxuICAgICAgICB0aGlzLkRuID0gbmV3IEFlKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gdC50b1N0cmluZygpO1xuICAgICAgICB9KSksIHRoaXMuQ24gPSAhMTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJyZWFkVGltZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5GbjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB0aGlzLkZuID0gdDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgXG4gICAgLyoqXG4gICAgICogQnVmZmVycyBhIGBSZW1vdGVEb2N1bWVudENhY2hlLmFkZEVudHJ5KClgIGNhbGwuXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIG9ubHkgbW9kaWZ5IGRvY3VtZW50cyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIHJldHJpZXZlZCB2aWFcbiAgICAgKiBgZ2V0RW50cnkoKS9nZXRFbnRyaWVzKClgIChlbmZvcmNlZCB2aWEgSW5kZXhlZERicyBgYXBwbHkoKWApLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLk5uID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB0aGlzLiRuKCksIHRoaXMucmVhZFRpbWUgPSBlLCB0aGlzLkRuLnNldCh0LmtleSwgdCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQnVmZmVycyBhIGBSZW1vdGVEb2N1bWVudENhY2hlLnJlbW92ZUVudHJ5KClgIGNhbGwuXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIG9ubHkgcmVtb3ZlIGRvY3VtZW50cyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIHJldHJpZXZlZCB2aWFcbiAgICAgKiBgZ2V0RW50cnkoKS9nZXRFbnRyaWVzKClgIChlbmZvcmNlZCB2aWEgSW5kZXhlZERicyBgYXBwbHkoKWApLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmtuID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB0aGlzLiRuKCksIGUgJiYgKHRoaXMucmVhZFRpbWUgPSBlKSwgdGhpcy5Ebi5zZXQodCwgbnVsbCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogTG9va3MgdXAgYW4gZW50cnkgaW4gdGhlIGNhY2hlLiBUaGUgYnVmZmVyZWQgY2hhbmdlcyB3aWxsIGZpcnN0IGJlIGNoZWNrZWQsXG4gICAgICogYW5kIGlmIG5vIGJ1ZmZlcmVkIGNoYW5nZSBhcHBsaWVzLCB0aGlzIHdpbGwgZm9yd2FyZCB0b1xuICAgICAqIGBSZW1vdGVEb2N1bWVudENhY2hlLmdldEVudHJ5KClgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uIFRoZSB0cmFuc2FjdGlvbiBpbiB3aGljaCB0byBwZXJmb3JtIGFueSBwZXJzaXN0ZW5jZVxuICAgICAqICAgICBvcGVyYXRpb25zLlxuICAgICAqIEBwYXJhbSBkb2N1bWVudEtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBsb29rIHVwLlxuICAgICAqIEByZXR1cm4gVGhlIGNhY2hlZCBEb2N1bWVudCBvciBOb0RvY3VtZW50IGVudHJ5LCBvciBudWxsIGlmIHdlIGhhdmUgbm90aGluZ1xuICAgICAqIGNhY2hlZC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5MbiA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdGhpcy4kbigpO1xuICAgICAgICB2YXIgbiA9IHRoaXMuRG4uZ2V0KGUpO1xuICAgICAgICByZXR1cm4gdm9pZCAwICE9PSBuID8geGUucmVzb2x2ZShuKSA6IHRoaXMuTW4odCwgZSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogTG9va3MgdXAgc2V2ZXJhbCBlbnRyaWVzIGluIHRoZSBjYWNoZSwgZm9yd2FyZGluZyB0b1xuICAgICAqIGBSZW1vdGVEb2N1bWVudENhY2hlLmdldEVudHJ5KClgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uIFRoZSB0cmFuc2FjdGlvbiBpbiB3aGljaCB0byBwZXJmb3JtIGFueSBwZXJzaXN0ZW5jZVxuICAgICAqICAgICBvcGVyYXRpb25zLlxuICAgICAqIEBwYXJhbSBkb2N1bWVudEtleXMgVGhlIGtleXMgb2YgdGhlIGVudHJpZXMgdG8gbG9vayB1cC5cbiAgICAgKiBAcmV0dXJuIEEgbWFwIG9mIGNhY2hlZCBgRG9jdW1lbnRgcyBvciBgTm9Eb2N1bWVudGBzLCBpbmRleGVkIGJ5IGtleS4gSWYgYW5cbiAgICAgKiAgICAgZW50cnkgY2Fubm90IGJlIGZvdW5kLCB0aGUgY29ycmVzcG9uZGluZyBrZXkgd2lsbCBiZSBtYXBwZWQgdG8gYSBudWxsXG4gICAgICogICAgIHZhbHVlLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmdldEVudHJpZXMgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLk9uKHQsIGUpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgYnVmZmVyZWQgY2hhbmdlcyB0byB0aGUgdW5kZXJseWluZyBSZW1vdGVEb2N1bWVudENhY2hlLCB1c2luZ1xuICAgICAqIHRoZSBwcm92aWRlZCB0cmFuc2FjdGlvbi5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5hcHBseSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJG4oKSwgdGhpcy5DbiA9ICEwLCB0aGlzLnhuKHQpO1xuICAgIH0sIFxuICAgIC8qKiBIZWxwZXIgdG8gYXNzZXJ0IHRoaXMuY2hhbmdlcyBpcyBub3QgbnVsbCAgKi8gdC5wcm90b3R5cGUuJG4gPSBmdW5jdGlvbigpIHt9LCBcbiAgICB0O1xufSgpLCBSZSA9IFwiVGhlIGN1cnJlbnQgdGFiIGlzIG5vdCBpbiB0aGUgcmVxdWlyZWQgc3RhdGUgdG8gcGVyZm9ybSB0aGlzIG9wZXJhdGlvbi4gSXQgbWlnaHQgYmUgbmVjZXNzYXJ5IHRvIHJlZnJlc2ggdGhlIGJyb3dzZXIgdGFiLlwiLCBMZSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCgpIHtcbiAgICAgICAgdGhpcy5CbiA9IFtdO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUucW4gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuQm4ucHVzaCh0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5VbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLkJuLmZvckVhY2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0KCk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0O1xufSgpLCBPZSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMuUW4gPSB0LCB0aGlzLlduID0gZSwgdGhpcy5qbiA9IG5cbiAgICAgICAgLyoqXG4gICAgICogR2V0IHRoZSBsb2NhbCB2aWV3IG9mIHRoZSBkb2N1bWVudCBpZGVudGlmaWVkIGJ5IGBrZXlgLlxuICAgICAqXG4gICAgICogQHJldHVybiBMb2NhbCB2aWV3IG9mIHRoZSBkb2N1bWVudCBvciBudWxsIGlmIHdlIGRvbid0IGhhdmUgYW55IGNhY2hlZFxuICAgICAqIHN0YXRlIGZvciBpdC5cbiAgICAgKi87XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5LbiA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5Xbi5Hbih0LCBlKS5uZXh0KChmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICByZXR1cm4gbi56bih0LCBlLCByKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKiBJbnRlcm5hbCB2ZXJzaW9uIG9mIGBnZXREb2N1bWVudGAgdGhhdCBhbGxvd3MgcmV1c2luZyBiYXRjaGVzLiAqLyB0LnByb3RvdHlwZS56biA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuUW4uTG4odCwgZSkubmV4dCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgZm9yICh2YXIgciA9IDAsIGkgPSBuOyByIDwgaS5sZW5ndGg7IHIrKykge1xuICAgICAgICAgICAgICAgIHQgPSBpW3JdLm90KGUsIHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvLyBSZXR1cm5zIHRoZSB2aWV3IG9mIHRoZSBnaXZlbiBgZG9jc2AgYXMgdGhleSB3b3VsZCBhcHBlYXIgYWZ0ZXIgYXBwbHlpbmdcbiAgICAvLyBhbGwgbXV0YXRpb25zIGluIHRoZSBnaXZlbiBgYmF0Y2hlc2AuXG4gICAgdC5wcm90b3R5cGUuSG4gPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHZhciByID0gTXQoKTtcbiAgICAgICAgcmV0dXJuIGUuZm9yRWFjaCgoZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG8gPSBuOyBpIDwgby5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGUgPSBvW2ldLm90KHQsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgciA9IHIuQWUodCwgZSk7XG4gICAgICAgIH0pKSwgcjtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsb2NhbCB2aWV3IG9mIHRoZSBkb2N1bWVudHMgaWRlbnRpZmllZCBieSBga2V5c2AuXG4gICAgICpcbiAgICAgKiBJZiB3ZSBkb24ndCBoYXZlIGNhY2hlZCBzdGF0ZSBmb3IgYSBkb2N1bWVudCBpbiBga2V5c2AsIGEgTm9Eb2N1bWVudCB3aWxsXG4gICAgICogYmUgc3RvcmVkIGZvciB0aGF0IGtleSBpbiB0aGUgcmVzdWx0aW5nIHNldC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5ZbiA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5Rbi5nZXRFbnRyaWVzKHQsIGUpLm5leHQoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBuLkpuKHQsIGUpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogU2ltaWxhciB0byBgZ2V0RG9jdW1lbnRzYCwgYnV0IGNyZWF0ZXMgdGhlIGxvY2FsIHZpZXcgZnJvbSB0aGUgZ2l2ZW5cbiAgICAgKiBgYmFzZURvY3NgIHdpdGhvdXQgcmV0cmlldmluZyBkb2N1bWVudHMgZnJvbSB0aGUgbG9jYWwgc3RvcmUuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuSm4gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMuV24uWG4odCwgZSkubmV4dCgoZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgdmFyIGkgPSBuLkhuKHQsIGUsIHIpLCBvID0gcXQoKTtcbiAgICAgICAgICAgIHJldHVybiBpLmZvckVhY2goKGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPKGh0dHA6Ly9iLzMyMjc1Mzc4KTogRG9uJ3QgY29uZmxhdGUgbWlzc2luZyAvIGRlbGV0ZWQuXG4gICAgICAgICAgICAgICAgZSB8fCAoZSA9IG5ldyB2dCh0LCBnLm1pbigpKSksIG8gPSBvLkFlKHQsIGUpO1xuICAgICAgICAgICAgfSkpLCBvO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBxdWVyeSBhZ2FpbnN0IHRoZSBsb2NhbCB2aWV3IG9mIGFsbCBkb2N1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb24gVGhlIHBlcnNpc3RlbmNlIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSBxdWVyeSBUaGUgcXVlcnkgdG8gbWF0Y2ggZG9jdW1lbnRzIGFnYWluc3QuXG4gICAgICogQHBhcmFtIHNpbmNlUmVhZFRpbWUgSWYgbm90IHNldCB0byBTbmFwc2hvdFZlcnNpb24ubWluKCksIHJldHVybiBvbmx5XG4gICAgICogICAgIGRvY3VtZW50cyB0aGF0IGhhdmUgYmVlbiByZWFkIHNpbmNlIHRoaXMgc25hcHNob3QgdmVyc2lvbiAoZXhjbHVzaXZlKS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5abiA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIGUuT3QoKSA/IHRoaXMudHIodCwgZS5wYXRoKSA6IGUuX2UoKSA/IHRoaXMuZXIodCwgZSwgbikgOiB0aGlzLnNyKHQsIGUsIG4pO1xuICAgIH0sIHQucHJvdG90eXBlLnRyID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAvLyBKdXN0IGRvIGEgc2ltcGxlIGRvY3VtZW50IGxvb2t1cC5cbiAgICAgICAgcmV0dXJuIHRoaXMuS24odCwgbmV3IF8oZSkpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gRnQoKTtcbiAgICAgICAgICAgIHJldHVybiB0IGluc3RhbmNlb2YgeXQgJiYgKGUgPSBlLkFlKHQua2V5LCB0KSksIGU7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5lciA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzLCBpID0gZS5jb2xsZWN0aW9uR3JvdXAsIG8gPSBGdCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5qbi5pcih0LCBpKS5uZXh0KChmdW5jdGlvbihzKSB7XG4gICAgICAgICAgICByZXR1cm4geGUuZm9yRWFjaChzLCAoZnVuY3Rpb24ocykge1xuICAgICAgICAgICAgICAgIHZhciB1ID0gZS5adChzLmNoaWxkKGkpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gci5zcih0LCB1LCBuKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgIHQuZm9yRWFjaCgoZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbyA9IG8uQWUodCwgZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG87XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5zciA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgdmFyIHIsIGksIG8gPSB0aGlzO1xuICAgICAgICAvLyBRdWVyeSB0aGUgcmVtb3RlIGRvY3VtZW50cyBhbmQgb3ZlcmxheSBtdXRhdGlvbnMuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuUW4uWm4odCwgZSwgbikubmV4dCgoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgcmV0dXJuIHIgPSBuLCBvLlduLm5yKHQsIGUpO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmV0dXJuIGkgPSBlLCBvLnJyKHQsIGksIHIpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICByID0gdDtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBlID0gMCwgbiA9IGk7IGUgPCBuLmxlbmd0aDsgZSsrKSBmb3IgKHZhciBvID0gbltlXSwgcyA9IDAsIHUgPSBvLm11dGF0aW9uczsgcyA8IHUubGVuZ3RoOyBzKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSB1W3NdLCBoID0gYS5rZXksIGMgPSByLmdldChoKSwgZiA9IGEub3QoYywgYywgby5Ubik7XG4gICAgICAgICAgICAgICAgICAgIHIgPSBmIGluc3RhbmNlb2YgeXQgPyByLkFlKGgsIGYpIDogci5yZW1vdmUoaCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBGaW5hbGx5LCBmaWx0ZXIgb3V0IGFueSBkb2N1bWVudHMgdGhhdCBkb24ndCBhY3R1YWxseSBtYXRjaFxuICAgICAgICAgICAgLy8gdGhlIHF1ZXJ5LlxuICAgICAgICAgICAgcmV0dXJuIHIuZm9yRWFjaCgoZnVuY3Rpb24odCwgbikge1xuICAgICAgICAgICAgICAgIGUubWF0Y2hlcyhuKSB8fCAociA9IHIucmVtb3ZlKHQpKTtcbiAgICAgICAgICAgIH0pKSwgcjtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLnJyID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICBmb3IgKHZhciByID0gV3QoKSwgaSA9IDAsIG8gPSBlOyBpIDwgby5sZW5ndGg7IGkrKykgZm9yICh2YXIgcyA9IDAsIHUgPSBvW2ldLm11dGF0aW9uczsgcyA8IHUubGVuZ3RoOyBzKyspIHtcbiAgICAgICAgICAgIHZhciBhID0gdVtzXTtcbiAgICAgICAgICAgIGEgaW5zdGFuY2VvZiBvdCAmJiBudWxsID09PSBuLmdldChhLmtleSkgJiYgKHIgPSByLmFkZChhLmtleSkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBoID0gbjtcbiAgICAgICAgcmV0dXJuIHRoaXMuUW4uZ2V0RW50cmllcyh0LCByKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gdC5mb3JFYWNoKChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgbnVsbCAhPT0gZSAmJiBlIGluc3RhbmNlb2YgeXQgJiYgKGggPSBoLkFlKHQsIGUpKTtcbiAgICAgICAgICAgIH0pKSwgaDtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQ7XG59KCksIFZlID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQsIGUsIG4sIHIpIHtcbiAgICAgICAgdGhpcy50YXJnZXRJZCA9IHQsIHRoaXMuZnJvbUNhY2hlID0gZSwgdGhpcy5ociA9IG4sIHRoaXMub3IgPSByO1xuICAgIH1cbiAgICByZXR1cm4gdC5hciA9IGZ1bmN0aW9uKGUsIG4pIHtcbiAgICAgICAgZm9yICh2YXIgciA9IFd0KCksIGkgPSBXdCgpLCBvID0gMCwgcyA9IG4uZG9jQ2hhbmdlczsgbyA8IHMubGVuZ3RoOyBvKyspIHtcbiAgICAgICAgICAgIHZhciB1ID0gc1tvXTtcbiAgICAgICAgICAgIHN3aXRjaCAodS50eXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgMCAvKiBBZGRlZCAqLyA6XG4gICAgICAgICAgICAgICAgciA9IHIuYWRkKHUuZG9jLmtleSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAxIC8qIFJlbW92ZWQgKi8gOlxuICAgICAgICAgICAgICAgIGkgPSBpLmFkZCh1LmRvYy5rZXkpO1xuICAgICAgICAgICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IHQoZSwgbi5mcm9tQ2FjaGUsIHIsIGkpO1xuICAgIH0sIHQ7XG59KCksIFBlID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICB0aGlzLnByZXZpb3VzVmFsdWUgPSB0LCBlICYmIChlLnVyID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIG4uY3IodCk7XG4gICAgICAgIH0sIHRoaXMuX3IgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gZS5scih0KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5jciA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJldmlvdXNWYWx1ZSA9IE1hdGgubWF4KHQsIHRoaXMucHJldmlvdXNWYWx1ZSksIHRoaXMucHJldmlvdXNWYWx1ZTtcbiAgICB9LCB0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gKyt0aGlzLnByZXZpb3VzVmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzLl9yICYmIHRoaXMuX3IodCksIHQ7XG4gICAgfSwgdDtcbn0oKTtcblxuLyoqIFRoZSBkZWZhdWx0IGRhdGFiYXNlIG5hbWUgZm9yIGEgcHJvamVjdC4gKi9cbi8qKiBSZXByZXNlbnRzIHRoZSBkYXRhYmFzZSBJRCBhIEZpcmVzdG9yZSBjbGllbnQgaXMgYXNzb2NpYXRlZCB3aXRoLiAqLyBQZS5kciA9IC0xO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIFVlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHQgPSB0aGlzO1xuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKChmdW5jdGlvbihlLCBuKSB7XG4gICAgICAgIHQucmVzb2x2ZSA9IGUsIHQucmVqZWN0ID0gbjtcbiAgICB9KSk7XG59LCBDZSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdChcbiAgICAvKipcbiAgICAgKiBUaGUgQXN5bmNRdWV1ZSB0byBydW4gYmFja29mZiBvcGVyYXRpb25zIG9uLlxuICAgICAqL1xuICAgIHQsIFxuICAgIC8qKlxuICAgICAqIFRoZSBJRCB0byB1c2Ugd2hlbiBzY2hlZHVsaW5nIGJhY2tvZmYgb3BlcmF0aW9ucyBvbiB0aGUgQXN5bmNRdWV1ZS5cbiAgICAgKi9cbiAgICBlLCBcbiAgICAvKipcbiAgICAgKiBUaGUgaW5pdGlhbCBkZWxheSAodXNlZCBhcyB0aGUgYmFzZSBkZWxheSBvbiB0aGUgZmlyc3QgcmV0cnkgYXR0ZW1wdCkuXG4gICAgICogTm90ZSB0aGF0IGppdHRlciB3aWxsIHN0aWxsIGJlIGFwcGxpZWQsIHNvIHRoZSBhY3R1YWwgZGVsYXkgY291bGQgYmUgYXNcbiAgICAgKiBsaXR0bGUgYXMgMC41KmluaXRpYWxEZWxheU1zLlxuICAgICAqL1xuICAgIG5cbiAgICAvKipcbiAgICAgKiBUaGUgbXVsdGlwbGllciB0byB1c2UgdG8gZGV0ZXJtaW5lIHRoZSBleHRlbmRlZCBiYXNlIGRlbGF5IGFmdGVyIGVhY2hcbiAgICAgKiBhdHRlbXB0LlxuICAgICAqLyAsIHJcbiAgICAvKipcbiAgICAgKiBUaGUgbWF4aW11bSBiYXNlIGRlbGF5IGFmdGVyIHdoaWNoIG5vIGZ1cnRoZXIgYmFja29mZiBpcyBwZXJmb3JtZWQuXG4gICAgICogTm90ZSB0aGF0IGppdHRlciB3aWxsIHN0aWxsIGJlIGFwcGxpZWQsIHNvIHRoZSBhY3R1YWwgZGVsYXkgY291bGQgYmUgYXNcbiAgICAgKiBtdWNoIGFzIDEuNSptYXhEZWxheU1zLlxuICAgICAqLyAsIGkpIHtcbiAgICAgICAgdm9pZCAwID09PSBuICYmIChuID0gMWUzKSwgdm9pZCAwID09PSByICYmIChyID0gMS41KSwgdm9pZCAwID09PSBpICYmIChpID0gNmU0KSwgXG4gICAgICAgIHRoaXMuVHIgPSB0LCB0aGlzLkVyID0gZSwgdGhpcy5JciA9IG4sIHRoaXMud3IgPSByLCB0aGlzLlJyID0gaSwgdGhpcy5BciA9IDAsIHRoaXMubXIgPSBudWxsLCBcbiAgICAgICAgLyoqIFRoZSBsYXN0IGJhY2tvZmYgYXR0ZW1wdCwgYXMgZXBvY2ggbWlsbGlzZWNvbmRzLiAqL1xuICAgICAgICB0aGlzLlByID0gRGF0ZS5ub3coKSwgdGhpcy5yZXNldCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIGJhY2tvZmYgZGVsYXkuXG4gICAgICpcbiAgICAgKiBUaGUgdmVyeSBuZXh0IGJhY2tvZmZBbmRXYWl0KCkgd2lsbCBoYXZlIG5vIGRlbGF5LiBJZiBpdCBpcyBjYWxsZWQgYWdhaW5cbiAgICAgKiAoaS5lLiBkdWUgdG8gYW4gZXJyb3IpLCBpbml0aWFsRGVsYXlNcyAocGx1cyBqaXR0ZXIpIHdpbGwgYmUgdXNlZCwgYW5kXG4gICAgICogc3Vic2VxdWVudCBvbmVzIHdpbGwgaW5jcmVhc2UgYWNjb3JkaW5nIHRvIHRoZSBiYWNrb2ZmRmFjdG9yLlxuICAgICAqLyAgICByZXR1cm4gdC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5BciA9IDA7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmVzZXRzIHRoZSBiYWNrb2ZmIGRlbGF5IHRvIHRoZSBtYXhpbXVtIGRlbGF5IChlLmcuIGZvciB1c2UgYWZ0ZXIgYVxuICAgICAqIFJFU09VUkNFX0VYSEFVU1RFRCBlcnJvcikuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuVnIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5BciA9IHRoaXMuUnI7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBhZnRlciBjdXJyZW50RGVsYXlNcywgYW5kIGluY3JlYXNlcyB0aGVcbiAgICAgKiBkZWxheSBmb3IgYW55IHN1YnNlcXVlbnQgYXR0ZW1wdHMuIElmIHRoZXJlIHdhcyBhIHBlbmRpbmcgYmFja29mZiBvcGVyYXRpb25cbiAgICAgKiBhbHJlYWR5LCBpdCB3aWxsIGJlIGNhbmNlbGVkLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmdyID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIC8vIENhbmNlbCBhbnkgcGVuZGluZyBiYWNrb2ZmIG9wZXJhdGlvbi5cbiAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbCgpO1xuICAgICAgICAvLyBGaXJzdCBzY2hlZHVsZSB1c2luZyB0aGUgY3VycmVudCBiYXNlICh3aGljaCBtYXkgYmUgMCBhbmQgc2hvdWxkIGJlXG4gICAgICAgIC8vIGhvbm9yZWQgYXMgc3VjaCkuXG4gICAgICAgIHZhciBuID0gTWF0aC5mbG9vcih0aGlzLkFyICsgdGhpcy5wcigpKSwgciA9IE1hdGgubWF4KDAsIERhdGUubm93KCkgLSB0aGlzLlByKSwgaSA9IE1hdGgubWF4KDAsIG4gLSByKTtcbiAgICAgICAgLy8gR3VhcmQgYWdhaW5zdCBsYXN0QXR0ZW1wdFRpbWUgYmVpbmcgaW4gdGhlIGZ1dHVyZSBkdWUgdG8gYSBjbG9jayBjaGFuZ2UuXG4gICAgICAgICAgICAgICAgaSA+IDAgJiYgZGUoXCJFeHBvbmVudGlhbEJhY2tvZmZcIiwgXCJCYWNraW5nIG9mZiBmb3IgXCIgKyBpICsgXCIgbXMgKGJhc2UgZGVsYXk6IFwiICsgdGhpcy5BciArIFwiIG1zLCBkZWxheSB3aXRoIGppdHRlcjogXCIgKyBuICsgXCIgbXMsIGxhc3QgYXR0ZW1wdDogXCIgKyByICsgXCIgbXMgYWdvKVwiKSwgXG4gICAgICAgIHRoaXMubXIgPSB0aGlzLlRyLnlyKHRoaXMuRXIsIGksIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBlLlByID0gRGF0ZS5ub3coKSwgdCgpO1xuICAgICAgICB9KSksIFxuICAgICAgICAvLyBBcHBseSBiYWNrb2ZmIGZhY3RvciB0byBkZXRlcm1pbmUgbmV4dCBkZWxheSBhbmQgZW5zdXJlIGl0IGlzIHdpdGhpblxuICAgICAgICAvLyBib3VuZHMuXG4gICAgICAgIHRoaXMuQXIgKj0gdGhpcy53ciwgdGhpcy5BciA8IHRoaXMuSXIgJiYgKHRoaXMuQXIgPSB0aGlzLklyKSwgdGhpcy5BciA+IHRoaXMuUnIgJiYgKHRoaXMuQXIgPSB0aGlzLlJyKTtcbiAgICB9LCB0LnByb3RvdHlwZS5iciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBudWxsICE9PSB0aGlzLm1yICYmICh0aGlzLm1yLnZyKCksIHRoaXMubXIgPSBudWxsKTtcbiAgICB9LCB0LnByb3RvdHlwZS5jYW5jZWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgbnVsbCAhPT0gdGhpcy5tciAmJiAodGhpcy5tci5jYW5jZWwoKSwgdGhpcy5tciA9IG51bGwpO1xuICAgIH0sIFxuICAgIC8qKiBSZXR1cm5zIGEgcmFuZG9tIHZhbHVlIGluIHRoZSByYW5nZSBbLWN1cnJlbnRCYXNlTXMvMiwgY3VycmVudEJhc2VNcy8yXSAqLyB0LnByb3RvdHlwZS5wciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKE1hdGgucmFuZG9tKCkgLSAuNSkgKiB0aGlzLkFyO1xuICAgIH0sIHQ7XG59KCk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgaGVscGVyIGZvciBydW5uaW5nIGRlbGF5ZWQgdGFza3MgZm9sbG93aW5nIGFuIGV4cG9uZW50aWFsIGJhY2tvZmYgY3VydmVcbiAqIGJldHdlZW4gYXR0ZW1wdHMuXG4gKlxuICogRWFjaCBkZWxheSBpcyBtYWRlIHVwIG9mIGEgXCJiYXNlXCIgZGVsYXkgd2hpY2ggZm9sbG93cyB0aGUgZXhwb25lbnRpYWxcbiAqIGJhY2tvZmYgY3VydmUsIGFuZCBhICsvLSA1MCUgXCJqaXR0ZXJcIiB0aGF0IGlzIGNhbGN1bGF0ZWQgYW5kIGFkZGVkIHRvIHRoZVxuICogYmFzZSBkZWxheS4gVGhpcyBwcmV2ZW50cyBjbGllbnRzIGZyb20gYWNjaWRlbnRhbGx5IHN5bmNocm9uaXppbmcgdGhlaXJcbiAqIGRlbGF5cyBjYXVzaW5nIHNwaWtlcyBvZiBsb2FkIHRvIHRoZSBiYWNrZW5kLlxuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBFbmNvZGVzIGEgcmVzb3VyY2UgcGF0aCBpbnRvIGEgSW5kZXhlZERiLWNvbXBhdGlibGUgc3RyaW5nIGZvcm0uXG4gKi9cbmZ1bmN0aW9uIHFlKHQpIHtcbiAgICBmb3IgKHZhciBlID0gXCJcIiwgbiA9IDA7IG4gPCB0Lmxlbmd0aDsgbisrKSBlLmxlbmd0aCA+IDAgJiYgKGUgPSBqZShlKSksIGUgPSBNZSh0LmdldChuKSwgZSk7XG4gICAgcmV0dXJuIGplKGUpO1xufVxuXG4vKiogRW5jb2RlcyBhIHNpbmdsZSBzZWdtZW50IG9mIGEgcmVzb3VyY2UgcGF0aCBpbnRvIHRoZSBnaXZlbiByZXN1bHQgKi8gZnVuY3Rpb24gTWUodCwgZSkge1xuICAgIGZvciAodmFyIG4gPSBlLCByID0gdC5sZW5ndGgsIGkgPSAwOyBpIDwgcjsgaSsrKSB7XG4gICAgICAgIHZhciBvID0gdC5jaGFyQXQoaSk7XG4gICAgICAgIHN3aXRjaCAobykge1xuICAgICAgICAgIGNhc2UgXCJcXDBcIjpcbiAgICAgICAgICAgIG4gKz0gXCJcdTAwMDFcdTAwMTBcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcIlx1MDAwMVwiOlxuICAgICAgICAgICAgbiArPSBcIlx1MDAwMVx1MDAxMVwiO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgbiArPSBvO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuO1xufVxuXG4vKiogRW5jb2RlcyBhIHBhdGggc2VwYXJhdG9yIGludG8gdGhlIGdpdmVuIHJlc3VsdCAqLyBmdW5jdGlvbiBqZSh0KSB7XG4gICAgcmV0dXJuIHQgKyBcIlx1MDAwMVx1MDAwMVwiO1xufVxuXG4vKipcbiAqIERlY29kZXMgdGhlIGdpdmVuIEluZGV4ZWREYi1jb21wYXRpYmxlIHN0cmluZyBmb3JtIG9mIGEgcmVzb3VyY2UgcGF0aCBpbnRvXG4gKiBhIFJlc291cmNlUGF0aCBpbnN0YW5jZS4gTm90ZSB0aGF0IHRoaXMgbWV0aG9kIGlzIG5vdCBzdWl0YWJsZSBmb3IgdXNlIHdpdGhcbiAqIGRlY29kaW5nIHJlc291cmNlIG5hbWVzIGZyb20gdGhlIHNlcnZlcjsgdGhvc2UgYXJlIE9uZSBQbGF0Zm9ybSBmb3JtYXRcbiAqIHN0cmluZ3MuXG4gKi8gZnVuY3Rpb24gRmUodCkge1xuICAgIC8vIEV2ZW50IHRoZSBlbXB0eSBwYXRoIG11c3QgZW5jb2RlIGFzIGEgcGF0aCBvZiBhdCBsZWFzdCBsZW5ndGggMi4gQSBwYXRoXG4gICAgLy8gd2l0aCBleGFjdGx5IDIgbXVzdCBiZSB0aGUgZW1wdHkgcGF0aC5cbiAgICB2YXIgZSA9IHQubGVuZ3RoO1xuICAgIGlmIChtZShlID49IDIpLCAyID09PSBlKSByZXR1cm4gbWUoXCJcdTAwMDFcIiA9PT0gdC5jaGFyQXQoMCkgJiYgXCJcdTAwMDFcIiA9PT0gdC5jaGFyQXQoMSkpLCBcbiAgICB3Lkc7XG4gICAgLy8gRXNjYXBlIGNoYXJhY3RlcnMgY2Fubm90IGV4aXN0IHBhc3QgdGhlIHNlY29uZC10by1sYXN0IHBvc2l0aW9uIGluIHRoZVxuICAgIC8vIHNvdXJjZSB2YWx1ZS5cbiAgICAgICAgZm9yICh2YXIgbiA9IGUgLSAyLCByID0gW10sIGkgPSBcIlwiLCBvID0gMDsgbyA8IGU7ICkge1xuICAgICAgICAvLyBUaGUgbGFzdCB0d28gY2hhcmFjdGVycyBvZiBhIHZhbGlkIGVuY29kZWQgcGF0aCBtdXN0IGJlIGEgc2VwYXJhdG9yLCBzb1xuICAgICAgICAvLyB0aGVyZSBtdXN0IGJlIGFuIGVuZCB0byB0aGlzIHNlZ21lbnQuXG4gICAgICAgIHZhciBzID0gdC5pbmRleE9mKFwiXHUwMDAxXCIsIG8pO1xuICAgICAgICBzd2l0Y2ggKChzIDwgMCB8fCBzID4gbikgJiYgZ2UoKSwgdC5jaGFyQXQocyArIDEpKSB7XG4gICAgICAgICAgY2FzZSBcIlx1MDAwMVwiOlxuICAgICAgICAgICAgdmFyIHUgPSB0LnN1YnN0cmluZyhvLCBzKSwgYSA9IHZvaWQgMDtcbiAgICAgICAgICAgIDAgPT09IGkubGVuZ3RoID8gXG4gICAgICAgICAgICAvLyBBdm9pZCBjb3B5aW5nIGZvciB0aGUgY29tbW9uIGNhc2Ugb2YgYSBzZWdtZW50IHRoYXQgZXhjbHVkZXMgXFwwXG4gICAgICAgICAgICAvLyBhbmQgXFwwMDFcbiAgICAgICAgICAgIGEgPSB1IDogKGEgPSBpICs9IHUsIGkgPSBcIlwiKSwgci5wdXNoKGEpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFwiXHUwMDEwXCI6XG4gICAgICAgICAgICBpICs9IHQuc3Vic3RyaW5nKG8sIHMpLCBpICs9IFwiXFwwXCI7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCJcdTAwMTFcIjpcbiAgICAgICAgICAgIC8vIFRoZSBlc2NhcGUgY2hhcmFjdGVyIGNhbiBiZSB1c2VkIGluIHRoZSBvdXRwdXQgdG8gZW5jb2RlIGl0c2VsZi5cbiAgICAgICAgICAgIGkgKz0gdC5zdWJzdHJpbmcobywgcyArIDEpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgZ2UoKTtcbiAgICAgICAgfVxuICAgICAgICBvID0gcyArIDI7XG4gICAgfVxuICAgIHJldHVybiBuZXcgdyhyKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQW4gaW4tbWVtb3J5IGltcGxlbWVudGF0aW9uIG9mIEluZGV4TWFuYWdlci5cbiAqLyB2YXIgQmUgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgICAgIHRoaXMuU3IgPSBuZXcgemU7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5EciA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuU3IuYWRkKGUpLCB4ZS5yZXNvbHZlKCk7XG4gICAgfSwgdC5wcm90b3R5cGUuaXIgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB4ZS5yZXNvbHZlKHRoaXMuU3IuZ2V0RW50cmllcyhlKSk7XG4gICAgfSwgdDtcbn0oKSwgemUgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgICAgIHRoaXMuaW5kZXggPSB7fTtcbiAgICB9XG4gICAgLy8gUmV0dXJucyBmYWxzZSBpZiB0aGUgZW50cnkgYWxyZWFkeSBleGlzdGVkLlxuICAgICAgICByZXR1cm4gdC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHQuTygpLCBuID0gdC5MKCksIHIgPSB0aGlzLmluZGV4W2VdIHx8IG5ldyBQdCh3Lk4pLCBpID0gIXIuaGFzKG4pO1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRleFtlXSA9IHIuYWRkKG4pLCBpO1xuICAgIH0sIHQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0Lk8oKSwgbiA9IHQuTCgpLCByID0gdGhpcy5pbmRleFtlXTtcbiAgICAgICAgcmV0dXJuIHIgJiYgci5oYXMobik7XG4gICAgfSwgdC5wcm90b3R5cGUuZ2V0RW50cmllcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmluZGV4W3RdIHx8IG5ldyBQdCh3Lk4pKS5XKCk7XG4gICAgfSwgdDtcbn0oKSwgR2UgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBpbi1tZW1vcnkgY29weSBvZiB0aGUgaW5kZXggZW50cmllcyB3ZSd2ZSBhbHJlYWR5IHdyaXR0ZW4gc2luY2UgdGhlIFNES1xuICAgICAgICAgKiBsYXVuY2hlZC4gVXNlZCB0byBhdm9pZCByZS13cml0aW5nIHRoZSBzYW1lIGVudHJ5IHJlcGVhdGVkbHkuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgaXMgKk5PVCogYSBjb21wbGV0ZSBjYWNoZSBvZiB3aGF0J3MgaW4gcGVyc2lzdGVuY2UgYW5kIHNvIGNhbiBuZXZlciBiZSB1c2VkIHRvXG4gICAgICAgICAqIHNhdGlzZnkgcmVhZHMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLkNyID0gbmV3IHplO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbmV3IGVudHJ5IHRvIHRoZSBjb2xsZWN0aW9uIHBhcmVudCBpbmRleC5cbiAgICAgKlxuICAgICAqIFJlcGVhdGVkIGNhbGxzIGZvciB0aGUgc2FtZSBjb2xsZWN0aW9uUGF0aCBzaG91bGQgYmUgYXZvaWRlZCB3aXRoaW4gYVxuICAgICAqIHRyYW5zYWN0aW9uIGFzIEluZGV4ZWREYkluZGV4TWFuYWdlciBvbmx5IGNhY2hlcyB3cml0ZXMgb25jZSBhIHRyYW5zYWN0aW9uXG4gICAgICogaGFzIGJlZW4gY29tbWl0dGVkLlxuICAgICAqLyAgICByZXR1cm4gdC5wcm90b3R5cGUuRHIgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLkNyLmhhcyhlKSkge1xuICAgICAgICAgICAgdmFyIHIgPSBlLk8oKSwgaSA9IGUuTCgpO1xuICAgICAgICAgICAgdC5xbigoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBjb2xsZWN0aW9uIHRvIHRoZSBpbiBtZW1vcnkgY2FjaGUgb25seSBpZiB0aGUgdHJhbnNhY3Rpb24gd2FzXG4gICAgICAgICAgICAgICAgLy8gc3VjY2Vzc2Z1bGx5IGNvbW1pdHRlZC5cbiAgICAgICAgICAgICAgICBuLkNyLmFkZChlKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHZhciBvID0ge1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25JZDogcixcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IHFlKGkpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIFdlKHQpLnB1dChvKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geGUucmVzb2x2ZSgpO1xuICAgIH0sIHQucHJvdG90eXBlLmlyID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IFtdLCByID0gSURCS2V5UmFuZ2UuYm91bmQoWyBlLCBcIlwiIF0sIFsgVGUoZSksIFwiXCIgXSwgXG4gICAgICAgIC8qbG93ZXJPcGVuPSovICExLCBcbiAgICAgICAgLyp1cHBlck9wZW49Ki8gITApO1xuICAgICAgICByZXR1cm4gV2UodCkuRnIocikubmV4dCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgZm9yICh2YXIgciA9IDAsIGkgPSB0OyByIDwgaS5sZW5ndGg7IHIrKykge1xuICAgICAgICAgICAgICAgIHZhciBvID0gaVtyXTtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGNvbGxlY3Rpb25JZCBndWFyZCBzaG91bGRuJ3QgYmUgbmVjZXNzYXJ5IChhbmQgaXNuJ3QgYXMgbG9uZ1xuICAgICAgICAgICAgICAgIC8vIGFzIHdlJ3JlIHJ1bm5pbmcgaW4gYSByZWFsIGJyb3dzZXIpLCBidXQgdGhlcmUncyBhIGJ1ZyBpblxuICAgICAgICAgICAgICAgIC8vIGluZGV4ZWRkYnNoaW0gdGhhdCBicmVha3Mgb3VyIHJhbmdlIGluIG91ciB0ZXN0cyBydW5uaW5nIGluIG5vZGU6XG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2F4ZW1jbGlvbi9JbmRleGVkREJTaGltL2lzc3Vlcy8zMzRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8uY29sbGVjdGlvbklkICE9PSBlKSBicmVhaztcbiAgICAgICAgICAgICAgICBuLnB1c2goRmUoby5wYXJlbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICB9KSk7XG4gICAgfSwgdDtcbn0oKTtcblxuLyoqXG4gKiBJbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgY29sbGVjdGlvbi1wYXJlbnQgaW5kZXggZXhwb3NlZCBieSBNZW1vcnlJbmRleE1hbmFnZXIuXG4gKiBBbHNvIHVzZWQgZm9yIGluLW1lbW9yeSBjYWNoaW5nIGJ5IEluZGV4ZWREYkluZGV4TWFuYWdlciBhbmQgaW5pdGlhbCBpbmRleCBwb3B1bGF0aW9uXG4gKiBpbiBpbmRleGVkZGJfc2NoZW1hLnRzXG4gKi9cbi8qKlxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSBjb2xsZWN0aW9uUGFyZW50c1xuICogZG9jdW1lbnQgc3RvcmUuXG4gKi9cbmZ1bmN0aW9uIFdlKHQpIHtcbiAgICByZXR1cm4gc24uTnIodCwgUm4uc3RvcmUpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyB2YXIgUWUgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TG9jYWxTZXJpYWxpemVyfSBzZXJpYWxpemVyIFRoZSBkb2N1bWVudCBzZXJpYWxpemVyLlxuICAgICAqIEBwYXJhbSB7SW5kZXhNYW5hZ2VyfSBpbmRleE1hbmFnZXIgVGhlIHF1ZXJ5IGluZGV4ZXMgdGhhdCBuZWVkIHRvIGJlIG1haW50YWluZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdCh0LCBlKSB7XG4gICAgICAgIHRoaXMuc2VyaWFsaXplciA9IHQsIHRoaXMuam4gPSBlXG4gICAgICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIHN1cHBsaWVkIGVudHJpZXMgdG8gdGhlIGNhY2hlLlxuICAgICAqXG4gICAgICogQWxsIGNhbGxzIG9mIGBhZGRFbnRyeWAgYXJlIHJlcXVpcmVkIHRvIGdvIHRocm91Z2ggdGhlIFJlbW90ZURvY3VtZW50Q2hhbmdlQnVmZmVyXG4gICAgICogcmV0dXJuZWQgYnkgYG5ld0NoYW5nZUJ1ZmZlcigpYCB0byBlbnN1cmUgcHJvcGVyIGFjY291bnRpbmcgb2YgbWV0YWRhdGEuXG4gICAgICovO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuTm4gPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiBZZSh0KS5wdXQoJGUoZSksIG4pO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBkb2N1bWVudCBmcm9tIHRoZSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEFsbCBjYWxscyBvZiBgcmVtb3ZlRW50cnlgICBhcmUgcmVxdWlyZWQgdG8gZ28gdGhyb3VnaCB0aGUgUmVtb3RlRG9jdW1lbnRDaGFuZ2VCdWZmZXJcbiAgICAgKiByZXR1cm5lZCBieSBgbmV3Q2hhbmdlQnVmZmVyKClgIHRvIGVuc3VyZSBwcm9wZXIgYWNjb3VudGluZyBvZiBtZXRhZGF0YS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5rbiA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSBZZSh0KSwgciA9ICRlKGUpO1xuICAgICAgICByZXR1cm4gbi5kZWxldGUocik7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgY3VycmVudCBjYWNoZSBzaXplLlxuICAgICAqXG4gICAgICogQ2FsbGVycyB0byBgYWRkRW50cnkoKWAgYW5kIGByZW1vdmVFbnRyeSgpYCAqbXVzdCogY2FsbCB0aGlzIGFmdGVyd2FyZHMgdG8gdXBkYXRlIHRoZVxuICAgICAqIGNhY2hlJ3MgbWV0YWRhdGEuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUudXBkYXRlTWV0YWRhdGEgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWV0YWRhdGEodCkubmV4dCgoZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgcmV0dXJuIHIuYnl0ZVNpemUgKz0gZSwgbi4kcih0LCByKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLkxuID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIHJldHVybiBZZSh0KS5nZXQoJGUoZSkpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBuLmtyKHQpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogTG9va3MgdXAgYW4gZW50cnkgaW4gdGhlIGNhY2hlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRvY3VtZW50S2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGxvb2sgdXAuXG4gICAgICogQHJldHVybiBUaGUgY2FjaGVkIE1heWJlRG9jdW1lbnQgZW50cnkgYW5kIGl0cyBzaXplLCBvciBudWxsIGlmIHdlIGhhdmUgbm90aGluZyBjYWNoZWQuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuTHIgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgcmV0dXJuIFllKHQpLmdldCgkZShlKSkubmV4dCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdmFyIGUgPSBuLmtyKHQpO1xuICAgICAgICAgICAgcmV0dXJuIGUgPyB7XG4gICAgICAgICAgICAgICAgTXI6IGUsXG4gICAgICAgICAgICAgICAgc2l6ZTogSmUodClcbiAgICAgICAgICAgIH0gOiBudWxsO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuZ2V0RW50cmllcyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLCByID0gTXQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuT3IodCwgZSwgKGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIHZhciBpID0gbi5rcihlKTtcbiAgICAgICAgICAgIHIgPSByLkFlKHQsIGkpO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIExvb2tzIHVwIHNldmVyYWwgZW50cmllcyBpbiB0aGUgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZG9jdW1lbnRLZXlzIFRoZSBzZXQgb2Yga2V5cyBlbnRyaWVzIHRvIGxvb2sgdXAuXG4gICAgICogQHJldHVybiBBIG1hcCBvZiBNYXliZURvY3VtZW50cyBpbmRleGVkIGJ5IGtleSAoaWYgYSBkb2N1bWVudCBjYW5ub3QgYmVcbiAgICAgKiAgICAgZm91bmQsIHRoZSBrZXkgd2lsbCBiZSBtYXBwZWQgdG8gbnVsbCkgYW5kIGEgbWFwIG9mIHNpemVzIGluZGV4ZWQgYnlcbiAgICAgKiAgICAga2V5ICh6ZXJvIGlmIHRoZSBrZXkgY2Fubm90IGJlIGZvdW5kKS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS54ciA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLCByID0gTXQoKSwgaSA9IG5ldyBMdChfLk4pO1xuICAgICAgICByZXR1cm4gdGhpcy5Pcih0LCBlLCAoZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgdmFyIG8gPSBuLmtyKGUpO1xuICAgICAgICAgICAgbyA/IChyID0gci5BZSh0LCBvKSwgaSA9IGkuQWUodCwgSmUoZSkpKSA6IChyID0gci5BZSh0LCBudWxsKSwgaSA9IGkuQWUodCwgMCkpO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIEJyOiByLFxuICAgICAgICAgICAgICAgIHFyOiBpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuT3IgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIGlmIChlLkIoKSkgcmV0dXJuIHhlLnJlc29sdmUoKTtcbiAgICAgICAgdmFyIHIgPSBJREJLZXlSYW5nZS5ib3VuZChlLmZpcnN0KCkucGF0aC5XKCksIGUubGFzdCgpLnBhdGguVygpKSwgaSA9IGUuYmUoKSwgbyA9IGkuTmUoKTtcbiAgICAgICAgcmV0dXJuIFllKHQpLlVyKHtcbiAgICAgICAgICAgIHJhbmdlOiByXG4gICAgICAgIH0sIChmdW5jdGlvbih0LCBlLCByKSB7XG4gICAgICAgICAgICAvLyBHbyB0aHJvdWdoIGtleXMgbm90IGZvdW5kIGluIGNhY2hlLlxuICAgICAgICAgICAgZm9yICh2YXIgcyA9IF8uc3QodCk7IG8gJiYgXy5OKG8sIHMpIDwgMDsgKSBuKG8sIG51bGwpLCBvID0gaS5OZSgpO1xuICAgICAgICAgICAgbyAmJiBvLmlzRXF1YWwocykgJiYgKFxuICAgICAgICAgICAgLy8gS2V5IGZvdW5kIGluIGNhY2hlLlxuICAgICAgICAgICAgbihvLCBlKSwgbyA9IGkuJGUoKSA/IGkuTmUoKSA6IG51bGwpLCBcbiAgICAgICAgICAgIC8vIFNraXAgdG8gdGhlIG5leHQga2V5IChpZiB0aGVyZSBpcyBvbmUpLlxuICAgICAgICAgICAgbyA/IHIuUXIoby5wYXRoLlcoKSkgOiByLmRvbmUoKTtcbiAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gVGhlIHJlc3Qgb2YgdGhlIGtleXMgYXJlIG5vdCBpbiB0aGUgY2FjaGUuIE9uZSBjYXNlIHdoZXJlIGBpdGVyYXRlYFxuICAgICAgICAgICAgLy8gYWJvdmUgd29uJ3QgZ28gdGhyb3VnaCB0aGVtIGlzIHdoZW4gdGhlIGNhY2hlIGlzIGVtcHR5LlxuICAgICAgICAgICAgZm9yICg7bzsgKSBuKG8sIG51bGwpLCBvID0gaS4kZSgpID8gaS5OZSgpIDogbnVsbDtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLlpuID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXMsIGkgPSBGdCgpLCBvID0gZS5wYXRoLmxlbmd0aCArIDEsIHMgPSB7fTtcbiAgICAgICAgaWYgKG4uaXNFcXVhbChnLm1pbigpKSkge1xuICAgICAgICAgICAgLy8gRG9jdW1lbnRzIGFyZSBvcmRlcmVkIGJ5IGtleSwgc28gd2UgY2FuIHVzZSBhIHByZWZpeCBzY2FuIHRvIG5hcnJvd1xuICAgICAgICAgICAgLy8gZG93biB0aGUgZG9jdW1lbnRzIHdlIG5lZWQgdG8gbWF0Y2ggdGhlIHF1ZXJ5IGFnYWluc3QuXG4gICAgICAgICAgICB2YXIgdSA9IGUucGF0aC5XKCk7XG4gICAgICAgICAgICBzLnJhbmdlID0gSURCS2V5UmFuZ2UubG93ZXJCb3VuZCh1KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEV4ZWN1dGUgYW4gaW5kZXgtZnJlZSBxdWVyeSBhbmQgZmlsdGVyIGJ5IHJlYWQgdGltZS4gVGhpcyBpcyBzYWZlXG4gICAgICAgICAgICAvLyBzaW5jZSBhbGwgZG9jdW1lbnQgY2hhbmdlcyB0byBxdWVyaWVzIHRoYXQgaGF2ZSBhXG4gICAgICAgICAgICAvLyBsYXN0TGltYm9GcmVlU25hcHNob3RWZXJzaW9uIChgc2luY2VSZWFkVGltZWApIGhhdmUgYSByZWFkIHRpbWUgc2V0LlxuICAgICAgICAgICAgdmFyIGEgPSBlLnBhdGguVygpLCBoID0gdGhpcy5zZXJpYWxpemVyLldyKG4pO1xuICAgICAgICAgICAgcy5yYW5nZSA9IElEQktleVJhbmdlLmxvd2VyQm91bmQoWyBhLCBoIF0sIFxuICAgICAgICAgICAgLyogb3Blbj0gKi8gITApLCBzLmluZGV4ID0gQW4uY29sbGVjdGlvblJlYWRUaW1lSW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFllKHQpLlVyKHMsIChmdW5jdGlvbih0LCBuLCBzKSB7XG4gICAgICAgICAgICAvLyBUaGUgcXVlcnkgaXMgYWN0dWFsbHkgcmV0dXJuaW5nIGFueSBwYXRoIHRoYXQgc3RhcnRzIHdpdGggdGhlIHF1ZXJ5XG4gICAgICAgICAgICAvLyBwYXRoIHByZWZpeCB3aGljaCBtYXkgaW5jbHVkZSBkb2N1bWVudHMgaW4gc3ViY29sbGVjdGlvbnMuIEZvclxuICAgICAgICAgICAgLy8gZXhhbXBsZSwgYSBxdWVyeSBvbiAncm9vbXMnIHdpbGwgcmV0dXJuIHJvb21zL2FiYy9tZXNzYWdlcy94eXggYnV0IHdlXG4gICAgICAgICAgICAvLyBzaG91bGRuJ3QgbWF0Y2ggaXQuIEZpeCB0aGlzIGJ5IGRpc2NhcmRpbmcgcm93cyB3aXRoIGRvY3VtZW50IGtleXNcbiAgICAgICAgICAgIC8vIG1vcmUgdGhhbiBvbmUgc2VnbWVudCBsb25nZXIgdGhhbiB0aGUgcXVlcnkgcGF0aC5cbiAgICAgICAgICAgIGlmICh0Lmxlbmd0aCA9PT0gbykge1xuICAgICAgICAgICAgICAgIHZhciB1ID0gci5zZXJpYWxpemVyLmpyKG4pO1xuICAgICAgICAgICAgICAgIGUucGF0aC5xKHUua2V5LnBhdGgpID8gdSBpbnN0YW5jZW9mIHl0ICYmIGUubWF0Y2hlcyh1KSAmJiAoaSA9IGkuQWUodS5rZXksIHUpKSA6IHMuZG9uZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHNldCBvZiBkb2N1bWVudHMgdGhhdCBoYXZlIGNoYW5nZWQgc2luY2UgdGhlIHNwZWNpZmllZCByZWFkXG4gICAgICogdGltZS5cbiAgICAgKi9cbiAgICAvLyBQT1JUSU5HIE5PVEU6IFRoaXMgaXMgb25seSB1c2VkIGZvciBtdWx0aS10YWIgc3luY2hyb25pemF0aW9uLlxuICAgIHQucHJvdG90eXBlLktyID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXMsIHIgPSBxdCgpLCBpID0gdGhpcy5zZXJpYWxpemVyLldyKGUpLCBvID0gWWUodCksIHMgPSBJREJLZXlSYW5nZS5sb3dlckJvdW5kKGksICEwKTtcbiAgICAgICAgcmV0dXJuIG8uVXIoe1xuICAgICAgICAgICAgaW5kZXg6IEFuLnJlYWRUaW1lSW5kZXgsXG4gICAgICAgICAgICByYW5nZTogc1xuICAgICAgICB9LCAoZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgLy8gVW5saWtlIGBnZXRFbnRyeSgpYCBhbmQgb3RoZXJzLCBgZ2V0TmV3RG9jdW1lbnRDaGFuZ2VzKClgIHBhcnNlc1xuICAgICAgICAgICAgLy8gdGhlIGRvY3VtZW50cyBkaXJlY3RseSBzaW5jZSB3ZSB3YW50IHRvIGtlZXAgc2VudGluZWwgZGVsZXRlcy5cbiAgICAgICAgICAgIHZhciBvID0gbi5zZXJpYWxpemVyLmpyKGUpO1xuICAgICAgICAgICAgciA9IHIuQWUoby5rZXksIG8pLCBpID0gZS5yZWFkVGltZTtcbiAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBHcjogcixcbiAgICAgICAgICAgICAgICByZWFkVGltZTogbi5zZXJpYWxpemVyLnpyKGkpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcmVhZCB0aW1lIG9mIHRoZSBtb3N0IHJlY2VudGx5IHJlYWQgZG9jdW1lbnQgaW4gdGhlIGNhY2hlLCBvclxuICAgICAqIFNuYXBzaG90VmVyc2lvbi5taW4oKSBpZiBub3QgYXZhaWxhYmxlLlxuICAgICAqL1xuICAgIC8vIFBPUlRJTkcgTk9URTogVGhpcyBpcyBvbmx5IHVzZWQgZm9yIG11bHRpLXRhYiBzeW5jaHJvbml6YXRpb24uXG4gICAgdC5wcm90b3R5cGUuSHIgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcywgbiA9IFllKHQpLCByID0gZy5taW4oKTtcbiAgICAgICAgcmV0dXJuIG4uVXIoe1xuICAgICAgICAgICAgaW5kZXg6IEFuLnJlYWRUaW1lSW5kZXgsXG4gICAgICAgICAgICByZXZlcnNlOiAhMFxuICAgICAgICB9LCAoZnVuY3Rpb24odCwgbiwgaSkge1xuICAgICAgICAgICAgbi5yZWFkVGltZSAmJiAociA9IGUuc2VyaWFsaXplci56cihuLnJlYWRUaW1lKSksIGkuZG9uZSgpO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLllyID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gbmV3IHQuSnIodGhpcywgISFlICYmIGUuWHIpO1xuICAgIH0sIHQucHJvdG90eXBlLlpyID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRNZXRhZGF0YSh0KS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gdC5ieXRlU2l6ZTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLmdldE1ldGFkYXRhID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gS2UodCkuZ2V0KGtuLmtleSkubmV4dCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIG1lKCEhdCksIHQ7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS4kciA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIEtlKHQpLnB1dChrbi5rZXksIGUpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIERlY29kZXMgYHJlbW90ZURvY2AgYW5kIHJldHVybnMgdGhlIGRvY3VtZW50IChvciBudWxsLCBpZiB0aGUgZG9jdW1lbnRcbiAgICAgKiBjb3JyZXNwb25kcyB0byB0aGUgZm9ybWF0IHVzZWQgZm9yIHNlbnRpbmVsIGRlbGV0ZXMpLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmtyID0gZnVuY3Rpb24odCkge1xuICAgICAgICBpZiAodCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0aGlzLnNlcmlhbGl6ZXIuanIodCk7XG4gICAgICAgICAgICByZXR1cm4gZSBpbnN0YW5jZW9mIHZ0ICYmIGUudmVyc2lvbi5pc0VxdWFsKGcubWluKCkpID8gbnVsbCA6IGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSwgdDtcbn0oKTtcblxuLyoqXG4gKiBIYW5kbGVzIHRoZSBkZXRhaWxzIG9mIGFkZGluZyBhbmQgdXBkYXRpbmcgZG9jdW1lbnRzIGluIHRoZSBJbmRleGVkRGJSZW1vdGVEb2N1bWVudENhY2hlLlxuICpcbiAqIFVubGlrZSB0aGUgTWVtb3J5UmVtb3RlRG9jdW1lbnRDaGFuZ2VCdWZmZXIsIHRoZSBJbmRleGVkRGIgaW1wbGVtZW50YXRpb24gY29tcHV0ZXMgdGhlIHNpemVcbiAqIGRlbHRhIGZvciBhbGwgc3VibWl0dGVkIGNoYW5nZXMuIFRoaXMgYXZvaWRzIGhhdmluZyB0byByZS1yZWFkIGFsbCBkb2N1bWVudHMgZnJvbSBJbmRleGVkRGJcbiAqIHdoZW4gd2UgYXBwbHkgdGhlIGNoYW5nZXMuXG4gKi8gZnVuY3Rpb24gS2UodCkge1xuICAgIHJldHVybiBzbi5Ocih0LCBrbi5zdG9yZSk7XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSByZW1vdGVEb2N1bWVudHMgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIFllKHQpIHtcbiAgICByZXR1cm4gc24uTnIodCwgQW4uc3RvcmUpO1xufVxuXG5mdW5jdGlvbiAkZSh0KSB7XG4gICAgcmV0dXJuIHQucGF0aC5XKCk7XG59XG5cbi8qKlxuICogUmV0cnVzbiBhbiBhcHByb3hpbWF0ZSBzaXplIGZvciB0aGUgZ2l2ZW4gZG9jdW1lbnQuXG4gKi8gZnVuY3Rpb24gSmUodCkge1xuICAgIHZhciBlO1xuICAgIGlmICh0LmRvY3VtZW50KSBlID0gdC5kb2N1bWVudDsgZWxzZSBpZiAodC51bmtub3duRG9jdW1lbnQpIGUgPSB0LnVua25vd25Eb2N1bWVudDsgZWxzZSB7XG4gICAgICAgIGlmICghdC5ub0RvY3VtZW50KSB0aHJvdyBnZSgpO1xuICAgICAgICBlID0gdC5ub0RvY3VtZW50O1xuICAgIH1cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZSkubGVuZ3RoO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqIE9mZnNldCB0byBlbnN1cmUgbm9uLW92ZXJsYXBwaW5nIHRhcmdldCBpZHMuICovIFFlLkpyID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbih0KSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGRvY3VtZW50Q2FjaGUgVGhlIEluZGV4ZWREYlJlbW90ZURvY3VtZW50Q2FjaGUgdG8gYXBwbHkgdGhlIGNoYW5nZXMgdG8uXG4gICAgICogQHBhcmFtIHRyYWNrUmVtb3ZhbHMgV2hldGhlciB0byBjcmVhdGUgc2VudGluZWwgZGVsZXRlcyB0aGF0IGNhbiBiZSB0cmFja2VkIGJ5XG4gICAgICogYGdldE5ld0RvY3VtZW50Q2hhbmdlcygpYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuKGUsIG4pIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzO1xuICAgICAgICByZXR1cm4gKHIgPSB0LmNhbGwodGhpcykgfHwgdGhpcykudGggPSBlLCByLlhyID0gbiwgXG4gICAgICAgIC8vIEEgbWFwIG9mIGRvY3VtZW50IHNpemVzIHByaW9yIHRvIGFwcGx5aW5nIHRoZSBjaGFuZ2VzIGluIHRoaXMgYnVmZmVyLlxuICAgICAgICByLmVoID0gbmV3IEFlKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gdC50b1N0cmluZygpO1xuICAgICAgICB9KSksIHI7XG4gICAgfVxuICAgIHJldHVybiBlLl9fZXh0ZW5kcyhuLCB0KSwgbi5wcm90b3R5cGUueG4gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcywgbiA9IFtdLCByID0gMCwgaSA9IG5ldyBQdCgoZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgcmV0dXJuIGJlKHQuaigpLCBlLmooKSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuRG4uZm9yRWFjaCgoZnVuY3Rpb24obywgcykge1xuICAgICAgICAgICAgdmFyIHUgPSBlLmVoLmdldChvKTtcbiAgICAgICAgICAgIGlmIChzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSBlLnRoLnNlcmlhbGl6ZXIuc2gocywgZS5yZWFkVGltZSk7XG4gICAgICAgICAgICAgICAgaSA9IGkuYWRkKG8ucGF0aC5MKCkpO1xuICAgICAgICAgICAgICAgIHZhciBoID0gSmUoYSk7XG4gICAgICAgICAgICAgICAgciArPSBoIC0gdSwgbi5wdXNoKGUudGguTm4odCwgbywgYSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyIC09IHUsIGUuWHIpIHtcbiAgICAgICAgICAgICAgICAvLyBJbiBvcmRlciB0byB0cmFjayByZW1vdmFscywgd2Ugc3RvcmUgYSBcInNlbnRpbmVsIGRlbGV0ZVwiIGluIHRoZVxuICAgICAgICAgICAgICAgIC8vIFJlbW90ZURvY3VtZW50Q2FjaGUuIFRoaXMgZW50cnkgaXMgcmVwcmVzZW50ZWQgYnkgYSBOb0RvY3VtZW50XG4gICAgICAgICAgICAgICAgLy8gd2l0aCBhIHZlcnNpb24gb2YgMCBhbmQgaWdub3JlZCBieSBgbWF5YmVEZWNvZGVEb2N1bWVudCgpYCBidXRcbiAgICAgICAgICAgICAgICAvLyBwcmVzZXJ2ZWQgaW4gYGdldE5ld0RvY3VtZW50Q2hhbmdlcygpYC5cbiAgICAgICAgICAgICAgICB2YXIgYyA9IGUudGguc2VyaWFsaXplci5zaChuZXcgdnQobywgZy5taW4oKSksIGUucmVhZFRpbWUpO1xuICAgICAgICAgICAgICAgIG4ucHVzaChlLnRoLk5uKHQsIG8sIGMpKTtcbiAgICAgICAgICAgIH0gZWxzZSBuLnB1c2goZS50aC5rbih0LCBvKSk7XG4gICAgICAgIH0pKSwgaS5mb3JFYWNoKChmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICBuLnB1c2goZS50aC5qbi5Ecih0LCByKSk7XG4gICAgICAgIH0pKSwgbi5wdXNoKHRoaXMudGgudXBkYXRlTWV0YWRhdGEodCwgcikpLCB4ZS52bihuKTtcbiAgICB9LCBuLnByb3RvdHlwZS5NbiA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICAvLyBSZWNvcmQgdGhlIHNpemUgb2YgZXZlcnl0aGluZyB3ZSBsb2FkIGZyb20gdGhlIGNhY2hlIHNvIHdlIGNhbiBjb21wdXRlIGEgZGVsdGEgbGF0ZXIuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGguTHIodCwgZSkubmV4dCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgPT09IHQgPyAobi5laC5zZXQoZSwgMCksIG51bGwpIDogKG4uZWguc2V0KGUsIHQuc2l6ZSksIHQuTXIpO1xuICAgICAgICB9KSk7XG4gICAgfSwgbi5wcm90b3R5cGUuT24gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgLy8gUmVjb3JkIHRoZSBzaXplIG9mIGV2ZXJ5dGhpbmcgd2UgbG9hZCBmcm9tIHRoZSBjYWNoZSBzbyB3ZSBjYW4gY29tcHV0ZVxuICAgICAgICAvLyBhIGRlbHRhIGxhdGVyLlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRoLnhyKHQsIGUpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gdC5CcjtcbiAgICAgICAgICAgIC8vIE5vdGU6IGBnZXRBbGxGcm9tQ2FjaGVgIHJldHVybnMgdHdvIG1hcHMgaW5zdGVhZCBvZiBhIHNpbmdsZSBtYXAgZnJvbVxuICAgICAgICAgICAgLy8ga2V5cyB0byBgRG9jdW1lbnRTaXplRW50cnlgcy4gVGhpcyBpcyB0byBhbGxvdyByZXR1cm5pbmcgdGhlXG4gICAgICAgICAgICAvLyBgTnVsbGFibGVNYXliZURvY3VtZW50TWFwYCBkaXJlY3RseSwgd2l0aG91dCBhIGNvbnZlcnNpb24uXG4gICAgICAgICAgICByZXR1cm4gdC5xci5mb3JFYWNoKChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgbi5laC5zZXQodCwgZSk7XG4gICAgICAgICAgICB9KSksIGU7XG4gICAgICAgIH0pKTtcbiAgICB9LCBuO1xufShTZSk7XG5cbi8qKlxuICogR2VuZXJhdGVzIG1vbm90b25pY2FsbHkgaW5jcmVhc2luZyB0YXJnZXQgSURzIGZvciBzZW5kaW5nIHRhcmdldHMgdG8gdGhlXG4gKiB3YXRjaCBzdHJlYW0uXG4gKlxuICogVGhlIGNsaWVudCBjb25zdHJ1Y3RzIHR3byBnZW5lcmF0b3JzLCBvbmUgZm9yIHRoZSB0YXJnZXQgY2FjaGUsIGFuZCBvbmUgZm9yXG4gKiBmb3IgdGhlIHN5bmMgZW5naW5lICh0byBnZW5lcmF0ZSBsaW1ibyBkb2N1bWVudHMgdGFyZ2V0cykuIFRoZXNlXG4gKiBnZW5lcmF0b3JzIHByb2R1Y2Ugbm9uLW92ZXJsYXBwaW5nIElEcyAoYnkgdXNpbmcgZXZlbiBhbmQgb2RkIElEc1xuICogcmVzcGVjdGl2ZWx5KS5cbiAqXG4gKiBCeSBzZXBhcmF0aW5nIHRoZSB0YXJnZXQgSUQgc3BhY2UsIHRoZSBxdWVyeSBjYWNoZSBjYW4gZ2VuZXJhdGUgdGFyZ2V0IElEc1xuICogdGhhdCBwZXJzaXN0IGFjcm9zcyBjbGllbnQgcmVzdGFydHMsIHdoaWxlIHN5bmMgZW5naW5lIGNhbiBpbmRlcGVuZGVudGx5XG4gKiBnZW5lcmF0ZSBpbi1tZW1vcnkgdGFyZ2V0IElEcyB0aGF0IGFyZSB0cmFuc2llbnQgYW5kIGNhbiBiZSByZXVzZWQgYWZ0ZXIgYVxuICogcmVzdGFydC5cbiAqL1xudmFyIEhlID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdGhpcy5paCA9IHQ7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmloICs9IDIsIHRoaXMuaWg7XG4gICAgfSwgdC5uaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBUaGUgdGFyZ2V0IGNhY2hlIGdlbmVyYXRvciBtdXN0IHJldHVybiAnMicgaW4gaXRzIGZpcnN0IGNhbGwgdG8gYG5leHQoKWBcbiAgICAgICAgLy8gYXMgdGhlcmUgaXMgbm8gZGlmZmVyZW50aWF0aW9uIGluIHRoZSBwcm90b2NvbCBsYXllciBiZXR3ZWVuIGFuIHVuc2V0XG4gICAgICAgIC8vIG51bWJlciBhbmQgdGhlIG51bWJlciAnMCcuIElmIHdlIHdlcmUgdG8gc2VudCBhIHRhcmdldCB3aXRoIHRhcmdldCBJRFxuICAgICAgICAvLyAnMCcsIHRoZSBiYWNrZW5kIHdvdWxkIGNvbnNpZGVyIGl0IHVuc2V0IGFuZCByZXBsYWNlIGl0IHdpdGggaXRzIG93biBJRC5cbiAgICAgICAgcmV0dXJuIG5ldyB0KDApO1xuICAgIH0sIHQucmggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gU3luYyBlbmdpbmUgYXNzaWducyB0YXJnZXQgSURzIGZvciBsaW1ibyBkb2N1bWVudCBkZXRlY3Rpb24uXG4gICAgICAgIHJldHVybiBuZXcgdCgtMSk7XG4gICAgfSwgdDtcbn0oKSwgWGUgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSkge1xuICAgICAgICB0aGlzLmhoID0gdCwgdGhpcy5zZXJpYWxpemVyID0gZTtcbiAgICB9XG4gICAgLy8gUE9SVElORyBOT1RFOiBXZSBkb24ndCBjYWNoZSBnbG9iYWwgbWV0YWRhdGEgZm9yIHRoZSB0YXJnZXQgY2FjaGUsIHNpbmNlXG4gICAgLy8gc29tZSBvZiBpdCAoaW4gcGFydGljdWxhciBgaGlnaGVzdFRhcmdldElkYCkgY2FuIGJlIG1vZGlmaWVkIGJ5IHNlY29uZGFyeVxuICAgIC8vIHRhYnMuIFdlIGNvdWxkIHBlcmhhcHMgYmUgbW9yZSBncmFudWxhciAoYW5kIGUuZy4gc3RpbGwgY2FjaGVcbiAgICAvLyBgbGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbmAgaW4gbWVtb3J5KSBidXQgZm9yIHNpbXBsaWNpdHkgd2UgY3VycmVudGx5IGdvXG4gICAgLy8gdG8gSW5kZXhlZERiIHdoZW5ldmVyIHdlIG5lZWQgdG8gcmVhZCBtZXRhZGF0YS4gV2UgY2FuIHJldmlzaXQgaWYgaXQgdHVybnNcbiAgICAvLyBvdXQgdG8gaGF2ZSBhIG1lYW5pbmdmdWwgcGVyZm9ybWFuY2UgaW1wYWN0LlxuICAgICAgICByZXR1cm4gdC5wcm90b3R5cGUub2ggPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMuYWgodCkubmV4dCgoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgdmFyIHIgPSBuZXcgSGUobi5oaWdoZXN0VGFyZ2V0SWQpO1xuICAgICAgICAgICAgcmV0dXJuIG4uaGlnaGVzdFRhcmdldElkID0gci5uZXh0KCksIGUudWgodCwgbikubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4uaGlnaGVzdFRhcmdldElkO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuX2ggPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFoKHQpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBnLnYobmV3IHYodC5sYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uLnNlY29uZHMsIHQubGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbi5uYW5vc2Vjb25kcykpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUubGggPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFoKHQpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0LmhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlcjtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLmRoID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLmFoKHQpLm5leHQoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgIHJldHVybiBpLmhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlciA9IGUsIG4gJiYgKGkubGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbiA9IG4uQygpKSwgXG4gICAgICAgICAgICBlID4gaS5oaWdoZXN0TGlzdGVuU2VxdWVuY2VOdW1iZXIgJiYgKGkuaGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyID0gZSksIHIudWgodCwgaSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5maCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5UaCh0LCBlKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBuLmFoKHQpLm5leHQoKGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gci50YXJnZXRDb3VudCArPSAxLCBuLkVoKGUsIHIpLCBuLnVoKHQsIHIpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuSWggPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlRoKHQsIGUpO1xuICAgIH0sIHQucHJvdG90eXBlLndoID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLlJoKHQsIGUudGFyZ2V0SWQpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIFplKHQpLmRlbGV0ZShlLnRhcmdldElkKTtcbiAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG4uYWgodCk7XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICByZXR1cm4gbWUoZS50YXJnZXRDb3VudCA+IDApLCBlLnRhcmdldENvdW50IC09IDEsIG4udWgodCwgZSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBEcm9wcyBhbnkgdGFyZ2V0cyB3aXRoIHNlcXVlbmNlIG51bWJlciBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHVwcGVyIGJvdW5kLCBleGNlcHRpbmcgdGhvc2VcbiAgICAgKiBwcmVzZW50IGluIGBhY3RpdmVUYXJnZXRJZHNgLiBEb2N1bWVudCBhc3NvY2lhdGlvbnMgZm9yIHRoZSByZW1vdmVkIHRhcmdldHMgYXJlIGFsc28gcmVtb3ZlZC5cbiAgICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgdGFyZ2V0cyByZW1vdmVkLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLkFoID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXMsIGkgPSAwLCBvID0gW107XG4gICAgICAgIHJldHVybiBaZSh0KS5VcigoZnVuY3Rpb24ocywgdSkge1xuICAgICAgICAgICAgdmFyIGEgPSByLnNlcmlhbGl6ZXIubWgodSk7XG4gICAgICAgICAgICBhLnNlcXVlbmNlTnVtYmVyIDw9IGUgJiYgbnVsbCA9PT0gbi5nZXQoYS50YXJnZXRJZCkgJiYgKGkrKywgby5wdXNoKHIud2godCwgYSkpKTtcbiAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHhlLnZuKG8pO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIENhbGwgcHJvdmlkZWQgZnVuY3Rpb24gd2l0aCBlYWNoIGBUYXJnZXREYXRhYCB0aGF0IHdlIGhhdmUgY2FjaGVkLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmpzID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIHJldHVybiBaZSh0KS5VcigoZnVuY3Rpb24odCwgcikge1xuICAgICAgICAgICAgdmFyIGkgPSBuLnNlcmlhbGl6ZXIubWgocik7XG4gICAgICAgICAgICBlKGkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuYWggPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0bih0KS5nZXQoU24ua2V5KS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gbWUobnVsbCAhPT0gdCksIHQ7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS51aCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRuKHQpLnB1dChTbi5rZXksIGUpO1xuICAgIH0sIHQucHJvdG90eXBlLlRoID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gWmUodCkucHV0KHRoaXMuc2VyaWFsaXplci5QaChlKSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogSW4tcGxhY2UgdXBkYXRlcyB0aGUgcHJvdmlkZWQgbWV0YWRhdGEgdG8gYWNjb3VudCBmb3IgdmFsdWVzIGluIHRoZSBnaXZlblxuICAgICAqIFRhcmdldERhdGEuIFNhdmluZyBpcyBkb25lIHNlcGFyYXRlbHkuIFJldHVybnMgdHJ1ZSBpZiB0aGVyZSB3ZXJlIGFueVxuICAgICAqIGNoYW5nZXMgdG8gdGhlIG1ldGFkYXRhLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLkVoID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9ICExO1xuICAgICAgICByZXR1cm4gdC50YXJnZXRJZCA+IGUuaGlnaGVzdFRhcmdldElkICYmIChlLmhpZ2hlc3RUYXJnZXRJZCA9IHQudGFyZ2V0SWQsIG4gPSAhMCksIFxuICAgICAgICB0LnNlcXVlbmNlTnVtYmVyID4gZS5oaWdoZXN0TGlzdGVuU2VxdWVuY2VOdW1iZXIgJiYgKGUuaGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyID0gdC5zZXF1ZW5jZU51bWJlciwgXG4gICAgICAgIG4gPSAhMCksIG47XG4gICAgfSwgdC5wcm90b3R5cGUuVmggPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFoKHQpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0LnRhcmdldENvdW50O1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuZ2ggPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcywgciA9IGUuY2Fub25pY2FsSWQoKSwgaSA9IElEQktleVJhbmdlLmJvdW5kKFsgciwgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZIF0sIFsgciwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIF0pLCBvID0gbnVsbDtcbiAgICAgICAgLy8gSXRlcmF0aW5nIGJ5IHRoZSBjYW5vbmljYWxJZCBtYXkgeWllbGQgbW9yZSB0aGFuIG9uZSByZXN1bHQgYmVjYXVzZVxuICAgICAgICAvLyBjYW5vbmljYWxJZCB2YWx1ZXMgYXJlIG5vdCByZXF1aXJlZCB0byBiZSB1bmlxdWUgcGVyIHRhcmdldC4gVGhpcyBxdWVyeVxuICAgICAgICAvLyBkZXBlbmRzIG9uIHRoZSBxdWVyeVRhcmdldHMgaW5kZXggdG8gYmUgZWZmaWNpZW50LlxuICAgICAgICAgICAgICAgIHJldHVybiBaZSh0KS5Vcih7XG4gICAgICAgICAgICByYW5nZTogaSxcbiAgICAgICAgICAgIGluZGV4OiBEbi5xdWVyeVRhcmdldHNJbmRleE5hbWVcbiAgICAgICAgfSwgKGZ1bmN0aW9uKHQsIHIsIGkpIHtcbiAgICAgICAgICAgIHZhciBzID0gbi5zZXJpYWxpemVyLm1oKHIpO1xuICAgICAgICAgICAgLy8gQWZ0ZXIgZmluZGluZyBhIHBvdGVudGlhbCBtYXRjaCwgY2hlY2sgdGhhdCB0aGUgdGFyZ2V0IGlzXG4gICAgICAgICAgICAvLyBhY3R1YWxseSBlcXVhbCB0byB0aGUgcmVxdWVzdGVkIHRhcmdldC5cbiAgICAgICAgICAgICAgICAgICAgICAgIGUuaXNFcXVhbChzLnRhcmdldCkgJiYgKG8gPSBzLCBpLmRvbmUoKSk7XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUucGggPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHZhciByID0gdGhpcywgaSA9IFtdLCBvID0gZW4odCk7XG4gICAgICAgIC8vIFBPUlRJTkcgTk9URTogVGhlIHJldmVyc2UgaW5kZXggKGRvY3VtZW50c1RhcmdldHMpIGlzIG1haW50YWluZWQgYnlcbiAgICAgICAgLy8gSW5kZXhlZERiLlxuICAgICAgICAgICAgICAgIHJldHVybiBlLmZvckVhY2goKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHZhciBzID0gcWUoZS5wYXRoKTtcbiAgICAgICAgICAgIGkucHVzaChvLnB1dChuZXcgeG4obiwgcykpKSwgaS5wdXNoKHIuaGgueWgodCwgbiwgZSkpO1xuICAgICAgICB9KSksIHhlLnZuKGkpO1xuICAgIH0sIHQucHJvdG90eXBlLmJoID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXMsIGkgPSBlbih0KTtcbiAgICAgICAgLy8gUE9SVElORyBOT1RFOiBUaGUgcmV2ZXJzZSBpbmRleCAoZG9jdW1lbnRzVGFyZ2V0cykgaXMgbWFpbnRhaW5lZCBieVxuICAgICAgICAvLyBJbmRleGVkRGIuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHhlLmZvckVhY2goZSwgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHZhciBvID0gcWUoZS5wYXRoKTtcbiAgICAgICAgICAgIHJldHVybiB4ZS52bihbIGkuZGVsZXRlKFsgbiwgbyBdKSwgci5oaC52aCh0LCBuLCBlKSBdKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLlJoID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IGVuKHQpLCByID0gSURCS2V5UmFuZ2UuYm91bmQoWyBlIF0sIFsgZSArIDEgXSwgXG4gICAgICAgIC8qbG93ZXJPcGVuPSovICExLCBcbiAgICAgICAgLyp1cHBlck9wZW49Ki8gITApO1xuICAgICAgICByZXR1cm4gbi5kZWxldGUocik7XG4gICAgfSwgdC5wcm90b3R5cGUuU2ggPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gSURCS2V5UmFuZ2UuYm91bmQoWyBlIF0sIFsgZSArIDEgXSwgXG4gICAgICAgIC8qbG93ZXJPcGVuPSovICExLCBcbiAgICAgICAgLyp1cHBlck9wZW49Ki8gITApLCByID0gZW4odCksIGkgPSBXdCgpO1xuICAgICAgICByZXR1cm4gci5Vcih7XG4gICAgICAgICAgICByYW5nZTogbixcbiAgICAgICAgICAgIERoOiAhMFxuICAgICAgICB9LCAoZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICAgICAgdmFyIHIgPSBGZSh0WzFdKSwgbyA9IG5ldyBfKHIpO1xuICAgICAgICAgICAgaSA9IGkuYWRkKG8pO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLkNoID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHFlKGUucGF0aCksIHIgPSBJREJLZXlSYW5nZS5ib3VuZChbIG4gXSwgWyBUZShuKSBdLCBcbiAgICAgICAgLypsb3dlck9wZW49Ki8gITEsIFxuICAgICAgICAvKnVwcGVyT3Blbj0qLyAhMCksIGkgPSAwO1xuICAgICAgICByZXR1cm4gZW4odCkuVXIoe1xuICAgICAgICAgICAgaW5kZXg6IHhuLmRvY3VtZW50VGFyZ2V0c0luZGV4LFxuICAgICAgICAgICAgRGg6ICEwLFxuICAgICAgICAgICAgcmFuZ2U6IHJcbiAgICAgICAgfSwgKGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgICAgIHZhciByID0gdFswXTtcbiAgICAgICAgICAgIC8vIEhhdmluZyBhIHNlbnRpbmVsIHJvdyBmb3IgYSBkb2N1bWVudCBkb2VzIG5vdCBjb3VudCBhcyBjb250YWluaW5nIHRoYXQgZG9jdW1lbnQ7XG4gICAgICAgICAgICAvLyBGb3IgdGhlIHRhcmdldCBjYWNoZSwgY29udGFpbmluZyB0aGUgZG9jdW1lbnQgbWVhbnMgdGhlIGRvY3VtZW50IGlzIHBhcnQgb2Ygc29tZVxuICAgICAgICAgICAgLy8gdGFyZ2V0LlxuICAgICAgICAgICAgICAgICAgICAgICAgdFsxXTtcbiAgICAgICAgICAgIDAgIT09IHIgJiYgKGkrKywgbi5kb25lKCkpO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gaSA+IDA7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBMb29rcyB1cCBhIFRhcmdldERhdGEgZW50cnkgYnkgdGFyZ2V0IElELlxuICAgICAqXG4gICAgICogQHBhcmFtIHRhcmdldElkIFRoZSB0YXJnZXQgSUQgb2YgdGhlIFRhcmdldERhdGEgZW50cnkgdG8gbG9vayB1cC5cbiAgICAgKiBAcmV0dXJuIFRoZSBjYWNoZWQgVGFyZ2V0RGF0YSBlbnRyeSwgb3IgbnVsbCBpZiB0aGUgY2FjaGUgaGFzIG5vIGVudHJ5IGZvclxuICAgICAqIHRoZSB0YXJnZXQuXG4gICAgICovXG4gICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS10YWIgb25seS5cbiAgICB0LnByb3RvdHlwZS5zaSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICByZXR1cm4gWmUodCkuZ2V0KGUpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0ID8gbi5zZXJpYWxpemVyLm1oKHQpIDogbnVsbDtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQ7XG59KCk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgcXVlcmllcyBvYmplY3Qgc3RvcmUuXG4gKi9cbmZ1bmN0aW9uIFplKHQpIHtcbiAgICByZXR1cm4gc24uTnIodCwgRG4uc3RvcmUpO1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgdGFyZ2V0IGdsb2JhbHMgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIHRuKHQpIHtcbiAgICByZXR1cm4gc24uTnIodCwgU24uc3RvcmUpO1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgZG9jdW1lbnQgdGFyZ2V0IG9iamVjdCBzdG9yZS5cbiAqLyBmdW5jdGlvbiBlbih0KSB7XG4gICAgcmV0dXJuIHNuLk5yKHQsIHhuLnN0b3JlKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKiBTZXJpYWxpemVyIGZvciB2YWx1ZXMgc3RvcmVkIGluIHRoZSBMb2NhbFN0b3JlLiAqLyB2YXIgbm4gPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCkge1xuICAgICAgICB0aGlzLkZoID0gdDtcbiAgICB9XG4gICAgLyoqIERlY29kZXMgYSByZW1vdGUgZG9jdW1lbnQgZnJvbSBzdG9yYWdlIGxvY2FsbHkgdG8gYSBEb2N1bWVudC4gKi8gICAgcmV0dXJuIHQucHJvdG90eXBlLmpyID0gZnVuY3Rpb24odCkge1xuICAgICAgICBpZiAodC5kb2N1bWVudCkgcmV0dXJuIHRoaXMuRmgubWkodC5kb2N1bWVudCwgISF0Lmhhc0NvbW1pdHRlZE11dGF0aW9ucyk7XG4gICAgICAgIGlmICh0Lm5vRG9jdW1lbnQpIHtcbiAgICAgICAgICAgIHZhciBlID0gXy5zdCh0Lm5vRG9jdW1lbnQucGF0aCksIG4gPSB0aGlzLk5oKHQubm9Eb2N1bWVudC5yZWFkVGltZSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IHZ0KGUsIG4sIHtcbiAgICAgICAgICAgICAgICBoYXNDb21taXR0ZWRNdXRhdGlvbnM6ICEhdC5oYXNDb21taXR0ZWRNdXRhdGlvbnNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0LnVua25vd25Eb2N1bWVudCkge1xuICAgICAgICAgICAgdmFyIHIgPSBfLnN0KHQudW5rbm93bkRvY3VtZW50LnBhdGgpLCBpID0gdGhpcy5OaCh0LnVua25vd25Eb2N1bWVudC52ZXJzaW9uKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgZ3QociwgaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdlKCk7XG4gICAgfSwgXG4gICAgLyoqIEVuY29kZXMgYSBkb2N1bWVudCBmb3Igc3RvcmFnZSBsb2NhbGx5LiAqLyB0LnByb3RvdHlwZS5zaCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLldyKGUpLCByID0gdC5rZXkucGF0aC5MKCkuVygpO1xuICAgICAgICBpZiAodCBpbnN0YW5jZW9mIHl0KSB7XG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMuRmguQWkodCksIG8gPSB0Lmhhc0NvbW1pdHRlZE11dGF0aW9ucztcbiAgICAgICAgICAgIHJldHVybiBuZXcgQW4oXG4gICAgICAgICAgICAvKiB1bmtub3duRG9jdW1lbnQ9ICovIG51bGwsIFxuICAgICAgICAgICAgLyogbm9Eb2N1bWVudD0gKi8gbnVsbCwgaSwgbywgbiwgcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiB2dCkge1xuICAgICAgICAgICAgdmFyIHMgPSB0LmtleS5wYXRoLlcoKSwgdSA9IHRoaXMuJGgodC52ZXJzaW9uKSwgYSA9IHQuaGFzQ29tbWl0dGVkTXV0YXRpb25zO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBBbihcbiAgICAgICAgICAgIC8qIHVua25vd25Eb2N1bWVudD0gKi8gbnVsbCwgbmV3IEluKHMsIHUpLCBcbiAgICAgICAgICAgIC8qIGRvY3VtZW50PSAqLyBudWxsLCBhLCBuLCByKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodCBpbnN0YW5jZW9mIGd0KSB7XG4gICAgICAgICAgICB2YXIgaCA9IHQua2V5LnBhdGguVygpLCBjID0gdGhpcy4kaCh0LnZlcnNpb24pO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBBbihuZXcgTm4oaCwgYyksIFxuICAgICAgICAgICAgLyogbm9Eb2N1bWVudD0gKi8gbnVsbCwgXG4gICAgICAgICAgICAvKiBkb2N1bWVudD0gKi8gbnVsbCwgXG4gICAgICAgICAgICAvKiBoYXNDb21taXR0ZWRNdXRhdGlvbnM9ICovICEwLCBuLCByKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2UoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5XciA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0LkMoKTtcbiAgICAgICAgcmV0dXJuIFsgZS5zZWNvbmRzLCBlLm5hbm9zZWNvbmRzIF07XG4gICAgfSwgdC5wcm90b3R5cGUuenIgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gbmV3IHYodFswXSwgdFsxXSk7XG4gICAgICAgIHJldHVybiBnLnYoZSk7XG4gICAgfSwgdC5wcm90b3R5cGUuJGggPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdC5DKCk7XG4gICAgICAgIHJldHVybiBuZXcgd24oZS5zZWNvbmRzLCBlLm5hbm9zZWNvbmRzKTtcbiAgICB9LCB0LnByb3RvdHlwZS5OaCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSBuZXcgdih0LnNlY29uZHMsIHQubmFub3NlY29uZHMpO1xuICAgICAgICByZXR1cm4gZy52KGUpO1xuICAgIH0sIFxuICAgIC8qKiBFbmNvZGVzIGEgYmF0Y2ggb2YgbXV0YXRpb25zIGludG8gYSBEYk11dGF0aW9uQmF0Y2ggZm9yIGxvY2FsIHN0b3JhZ2UuICovIHQucHJvdG90eXBlLmtoID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXMsIHIgPSBlLmJhc2VNdXRhdGlvbnMubWFwKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gbi5GaC52aSh0KTtcbiAgICAgICAgfSkpLCBpID0gZS5tdXRhdGlvbnMubWFwKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gbi5GaC52aSh0KTtcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gbmV3IF9uKHQsIGUuYmF0Y2hJZCwgZS5Ubi50b01pbGxpcygpLCByLCBpKTtcbiAgICB9LCBcbiAgICAvKiogRGVjb2RlcyBhIERiTXV0YXRpb25CYXRjaCBpbnRvIGEgTXV0YXRpb25CYXRjaCAqLyB0LnByb3RvdHlwZS5MaCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLCBuID0gKHQuYmFzZU11dGF0aW9ucyB8fCBbXSkubWFwKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gZS5GaC5GaSh0KTtcbiAgICAgICAgfSkpLCByID0gdC5tdXRhdGlvbnMubWFwKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gZS5GaC5GaSh0KTtcbiAgICAgICAgfSkpLCBpID0gdi5mcm9tTWlsbGlzKHQubG9jYWxXcml0ZVRpbWVNcyk7XG4gICAgICAgIHJldHVybiBuZXcga2UodC5iYXRjaElkLCBpLCBuLCByKTtcbiAgICB9LCBcbiAgICAvKiogRGVjb2RlcyBhIERiVGFyZ2V0IGludG8gVGFyZ2V0RGF0YSAqLyB0LnByb3RvdHlwZS5taCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUsIG4gPSB0aGlzLk5oKHQucmVhZFRpbWUpLCByID0gdm9pZCAwICE9PSB0Lmxhc3RMaW1ib0ZyZWVTbmFwc2hvdFZlcnNpb24gPyB0aGlzLk5oKHQubGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbikgOiBnLm1pbigpO1xuICAgICAgICByZXR1cm4gZSA9IHZvaWQgMCAhPT0gdC5xdWVyeS5kb2N1bWVudHMgPyB0aGlzLkZoLnhpKHQucXVlcnkpIDogdGhpcy5GaC5XaSh0LnF1ZXJ5KSwgXG4gICAgICAgIG5ldyBEdChlLCB0LnRhcmdldElkLCAwIC8qIExpc3RlbiAqLyAsIHQubGFzdExpc3RlblNlcXVlbmNlTnVtYmVyLCBuLCByLCBBLmZyb21CYXNlNjRTdHJpbmcodC5yZXN1bWVUb2tlbikpO1xuICAgIH0sIFxuICAgIC8qKiBFbmNvZGVzIFRhcmdldERhdGEgaW50byBhIERiVGFyZ2V0IGZvciBzdG9yYWdlIGxvY2FsbHkuICovIHQucHJvdG90eXBlLlBoID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSwgbiA9IHRoaXMuJGgodC5FZSksIHIgPSB0aGlzLiRoKHQubGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbik7XG4gICAgICAgIGUgPSB0LnRhcmdldC5PdCgpID8gdGhpcy5GaC5PaSh0LnRhcmdldCkgOiB0aGlzLkZoLkJpKHQudGFyZ2V0KTtcbiAgICAgICAgLy8gV2UgY2FuJ3Qgc3RvcmUgdGhlIHJlc3VtZVRva2VuIGFzIGEgQnl0ZVN0cmluZyBpbiBJbmRleGVkRGIsIHNvIHdlXG4gICAgICAgIC8vIGNvbnZlcnQgaXQgdG8gYSBiYXNlNjQgc3RyaW5nIGZvciBzdG9yYWdlLlxuICAgICAgICB2YXIgaSA9IHQucmVzdW1lVG9rZW4udG9CYXNlNjQoKTtcbiAgICAgICAgLy8gbGFzdExpc3RlblNlcXVlbmNlTnVtYmVyIGlzIGFsd2F5cyAwIHVudGlsIHdlIGRvIHJlYWwgR0MuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEbih0LnRhcmdldElkLCB0LnRhcmdldC5jYW5vbmljYWxJZCgpLCBuLCBpLCB0LnNlcXVlbmNlTnVtYmVyLCByLCBlKTtcbiAgICB9LCB0O1xufSgpLCBybiA9IFwiRmFpbGVkIHRvIG9idGFpbiBleGNsdXNpdmUgYWNjZXNzIHRvIHRoZSBwZXJzaXN0ZW5jZSBsYXllci4gVG8gYWxsb3cgc2hhcmVkIGFjY2VzcywgbWFrZSBzdXJlIHRvIGludm9rZSBgZW5hYmxlUGVyc2lzdGVuY2UoKWAgd2l0aCBgc3luY2hyb25pemVUYWJzOnRydWVgIGluIGFsbCB0YWJzLlwiLCBvbiA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24odCkge1xuICAgIGZ1bmN0aW9uIG4oZSwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXM7XG4gICAgICAgIHJldHVybiAociA9IHQuY2FsbCh0aGlzKSB8fCB0aGlzKS5NaCA9IGUsIHIuT2ggPSBuLCByO1xuICAgIH1cbiAgICByZXR1cm4gZS5fX2V4dGVuZHMobiwgdCksIG47XG59KExlKSwgc24gPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoZSwgbiwgciwgaSwgbywgcywgdSwgYSkge1xuICAgICAgICBpZiAodGhpcy5hbGxvd1RhYlN5bmNocm9uaXphdGlvbiA9IGUsIHRoaXMucGVyc2lzdGVuY2VLZXkgPSBuLCB0aGlzLmNsaWVudElkID0gciwgXG4gICAgICAgIHRoaXMuVHIgPSBzLCB0aGlzLnhoID0gYSwgdGhpcy5CaCA9IG51bGwsIHRoaXMucWggPSAhMSwgdGhpcy5pc1ByaW1hcnkgPSAhMSwgdGhpcy5uZXR3b3JrRW5hYmxlZCA9ICEwLCBcbiAgICAgICAgLyoqIE91ciB3aW5kb3cudW5sb2FkIGhhbmRsZXIsIGlmIHJlZ2lzdGVyZWQuICovXG4gICAgICAgIHRoaXMuVWggPSBudWxsLCB0aGlzLmluRm9yZWdyb3VuZCA9ICExLCBcbiAgICAgICAgLyoqIE91ciAndmlzaWJpbGl0eWNoYW5nZScgbGlzdGVuZXIgaWYgcmVnaXN0ZXJlZC4gKi9cbiAgICAgICAgdGhpcy5RaCA9IG51bGwsIFxuICAgICAgICAvKiogVGhlIGNsaWVudCBtZXRhZGF0YSByZWZyZXNoIHRhc2suICovXG4gICAgICAgIHRoaXMuV2ggPSBudWxsLCBcbiAgICAgICAgLyoqIFRoZSBsYXN0IHRpbWUgd2UgZ2FyYmFnZSBjb2xsZWN0ZWQgdGhlIGNsaWVudCBtZXRhZGF0YSBvYmplY3Qgc3RvcmUuICovXG4gICAgICAgIHRoaXMuamggPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksIFxuICAgICAgICAvKiogQSBsaXN0ZW5lciB0byBub3RpZnkgb24gcHJpbWFyeSBzdGF0ZSBjaGFuZ2VzLiAqL1xuICAgICAgICB0aGlzLktoID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB9LCAhdC5HaCgpKSB0aHJvdyBuZXcgYyhoLlVOSU1QTEVNRU5URUQsIFwiVGhpcyBwbGF0Zm9ybSBpcyBlaXRoZXIgbWlzc2luZyBJbmRleGVkREIgb3IgaXMga25vd24gdG8gaGF2ZSBhbiBpbmNvbXBsZXRlIGltcGxlbWVudGF0aW9uLiBPZmZsaW5lIHBlcnNpc3RlbmNlIGhhcyBiZWVuIGRpc2FibGVkLlwiKTtcbiAgICAgICAgaWYgKHRoaXMuaGggPSBuZXcgaG4odGhpcywgbyksIHRoaXMuemggPSBuICsgdC5IaCwgdGhpcy5zZXJpYWxpemVyID0gbmV3IG5uKHUpLCBcbiAgICAgICAgdGhpcy5kb2N1bWVudCA9IGkuZG9jdW1lbnQsIHRoaXMuWWggPSBuZXcgWGUodGhpcy5oaCwgdGhpcy5zZXJpYWxpemVyKSwgdGhpcy5qbiA9IG5ldyBHZSwgXG4gICAgICAgIHRoaXMuUW4gPSBuZXcgUWUodGhpcy5zZXJpYWxpemVyLCB0aGlzLmpuKSwgIWkud2luZG93IHx8ICFpLndpbmRvdy5sb2NhbFN0b3JhZ2UpIHRocm93IG5ldyBjKGguVU5JTVBMRU1FTlRFRCwgXCJJbmRleGVkREIgcGVyc2lzdGVuY2UgaXMgb25seSBhdmFpbGFibGUgb24gcGxhdGZvcm1zIHRoYXQgc3VwcG9ydCBMb2NhbFN0b3JhZ2UuXCIpO1xuICAgICAgICB0aGlzLndpbmRvdyA9IGkud2luZG93LCB0aGlzLkpoID0gdGhpcy53aW5kb3cubG9jYWxTdG9yYWdlO1xuICAgIH1cbiAgICByZXR1cm4gdC5OciA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBvbikgcmV0dXJuIFBuLk5yKHQuTWgsIGUpO1xuICAgICAgICB0aHJvdyBnZSgpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIEF0dGVtcHQgdG8gc3RhcnQgSW5kZXhlZERiIHBlcnNpc3RlbmNlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn0gV2hldGhlciBwZXJzaXN0ZW5jZSB3YXMgZW5hYmxlZC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgIHJldHVybiBQbi5YaCh0aGlzLnpoLCBnbiwgbmV3IG1uKHRoaXMuc2VyaWFsaXplcikpLnRoZW4oKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0LlpoID0gZSwgdC50bygpO1xuICAgICAgICB9KSkudGhlbigoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoIXQuaXNQcmltYXJ5ICYmICF0LmFsbG93VGFiU3luY2hyb25pemF0aW9uKSBcbiAgICAgICAgICAgIC8vIEZhaWwgYHN0YXJ0KClgIGlmIGBzeW5jaHJvbml6ZVRhYnNgIGlzIGRpc2FibGVkIGFuZCB3ZSBjYW5ub3RcbiAgICAgICAgICAgIC8vIG9idGFpbiB0aGUgcHJpbWFyeSBsZWFzZS5cbiAgICAgICAgICAgIHRocm93IG5ldyBjKGguRkFJTEVEX1BSRUNPTkRJVElPTiwgcm4pO1xuICAgICAgICAgICAgcmV0dXJuIHQuZW8oKSwgdC5zbygpLCB0LmlvKCksIHQucnVuVHJhbnNhY3Rpb24oXCJnZXRIaWdoZXN0TGlzdGVuU2VxdWVuY2VOdW1iZXJcIiwgXCJyZWFkb25seVwiLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0LlloLmxoKGUpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSkudGhlbigoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdC5CaCA9IG5ldyBQZShlLCB0LnhoKTtcbiAgICAgICAgfSkpLnRoZW4oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdC5xaCA9ICEwO1xuICAgICAgICB9KSkuY2F0Y2goKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0LlpoICYmIHQuWmguY2xvc2UoKSwgUHJvbWlzZS5yZWplY3QoZSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgYSBsaXN0ZW5lciB0aGF0IGdldHMgY2FsbGVkIHdoZW4gdGhlIHByaW1hcnkgc3RhdGUgb2YgdGhlXG4gICAgICogaW5zdGFuY2UgY2hhbmdlcy4gVXBvbiByZWdpc3RlcmluZywgdGhpcyBsaXN0ZW5lciBpcyBpbnZva2VkIGltbWVkaWF0ZWx5XG4gICAgICogd2l0aCB0aGUgY3VycmVudCBwcmltYXJ5IHN0YXRlLlxuICAgICAqXG4gICAgICogUE9SVElORyBOT1RFOiBUaGlzIGlzIG9ubHkgdXNlZCBmb3IgV2ViIG11bHRpLXRhYi5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5ubyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5LaCA9IGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgICAgIHJldHVybiBlLl9fYXdhaXRlcihuLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJvID8gWyAyIC8qcmV0dXJuKi8gLCB0KHIpIF0gOiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSwgdCh0aGlzLmlzUHJpbWFyeSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGEgbGlzdGVuZXIgdGhhdCBnZXRzIGNhbGxlZCB3aGVuIHRoZSBkYXRhYmFzZSByZWNlaXZlcyBhXG4gICAgICogdmVyc2lvbiBjaGFuZ2UgZXZlbnQgaW5kaWNhdGluZyB0aGF0IGl0IGhhcyBkZWxldGVkLlxuICAgICAqXG4gICAgICogUE9SVElORyBOT1RFOiBUaGlzIGlzIG9ubHkgdXNlZCBmb3IgV2ViIG11bHRpLXRhYi5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5obyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICB0aGlzLlpoLm9vKChmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIobiwgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5fX2dlbmVyYXRvcih0aGlzLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbCA9PT0gci5uZXdWZXJzaW9uID8gWyA0IC8qeWllbGQqLyAsIHQoKSBdIDogWyAzIC8qYnJlYWsqLyAsIDIgXTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc2VudCgpLCBlLmxhYmVsID0gMjtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQWRqdXN0cyB0aGUgY3VycmVudCBuZXR3b3JrIHN0YXRlIGluIHRoZSBjbGllbnQncyBtZXRhZGF0YSwgcG90ZW50aWFsbHlcbiAgICAgKiBhZmZlY3RpbmcgdGhlIHByaW1hcnkgbGVhc2UuXG4gICAgICpcbiAgICAgKiBQT1JUSU5HIE5PVEU6IFRoaXMgaXMgb25seSB1c2VkIGZvciBXZWIgbXVsdGktdGFiLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmFvID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIHRoaXMubmV0d29ya0VuYWJsZWQgIT09IHQgJiYgKHRoaXMubmV0d29ya0VuYWJsZWQgPSB0LCBcbiAgICAgICAgLy8gU2NoZWR1bGUgYSBwcmltYXJ5IGxlYXNlIHJlZnJlc2ggZm9yIGltbWVkaWF0ZSBleGVjdXRpb24uIFRoZSBldmVudHVhbFxuICAgICAgICAvLyBsZWFzZSB1cGRhdGUgd2lsbCBiZSBwcm9wYWdhdGVkIHZpYSBgcHJpbWFyeVN0YXRlTGlzdGVuZXJgLlxuICAgICAgICB0aGlzLlRyLnVvKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBlLl9fYXdhaXRlcihuLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodC5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJvID8gWyA0IC8qeWllbGQqLyAsIHRoaXMudG8oKSBdIDogWyAzIC8qYnJlYWsqLyAsIDIgXTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuc2VudCgpLCB0LmxhYmVsID0gMjtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGNsaWVudCBtZXRhZGF0YSBpbiBJbmRleGVkRGIgYW5kIGF0dGVtcHRzIHRvIGVpdGhlciBvYnRhaW4gb3JcbiAgICAgKiBleHRlbmQgdGhlIHByaW1hcnkgbGVhc2UgZm9yIHRoZSBsb2NhbCBjbGllbnQuIEFzeW5jaHJvbm91c2x5IG5vdGlmaWVzIHRoZVxuICAgICAqIHByaW1hcnkgc3RhdGUgbGlzdGVuZXIgaWYgdGhlIGNsaWVudCBlaXRoZXIgbmV3bHkgb2J0YWluZWQgb3IgcmVsZWFzZWQgaXRzXG4gICAgICogcHJpbWFyeSBsZWFzZS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS50byA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLnJ1blRyYW5zYWN0aW9uKFwidXBkYXRlQ2xpZW50TWV0YWRhdGFBbmRUcnlCZWNvbWVQcmltYXJ5XCIsIFwicmVhZHdyaXRlXCIsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICByZXR1cm4gYW4oZSkucHV0KG5ldyBPbih0LmNsaWVudElkLCBEYXRlLm5vdygpLCB0Lm5ldHdvcmtFbmFibGVkLCB0LmluRm9yZWdyb3VuZCkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICh0LmlzUHJpbWFyeSkgcmV0dXJuIHQuY28oZSkubmV4dCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBlIHx8ICh0LmlzUHJpbWFyeSA9ICExLCB0LlRyLnVvKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LktoKCExKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQuX28oZSk7XG4gICAgICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0LmlzUHJpbWFyeSAmJiAhbiA/IHQubG8oZSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICB9KSkgOiAhIW4gJiYgdC5kbyhlKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpLmNhdGNoKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBpZiAoIXQuYWxsb3dUYWJTeW5jaHJvbml6YXRpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAocW4oZSkpIFxuICAgICAgICAgICAgICAgIC8vIFByb2NlZWQgd2l0aCB0aGUgZXhpc3Rpbmcgc3RhdGUuIEFueSBzdWJzZXF1ZW50IGFjY2VzcyB0b1xuICAgICAgICAgICAgICAgIC8vIEluZGV4ZWREQiB3aWxsIHZlcmlmeSB0aGUgbGVhc2UuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlKFwiSW5kZXhlZERiUGVyc2lzdGVuY2VcIiwgXCJGYWlsZWQgdG8gZXh0ZW5kIG93bmVyIGxlYXNlOiBcIiwgZSksIHQuaXNQcmltYXJ5O1xuICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGUoXCJJbmRleGVkRGJQZXJzaXN0ZW5jZVwiLCBcIlJlbGVhc2luZyBvd25lciBsZWFzZSBhZnRlciBlcnJvciBkdXJpbmcgbGVhc2UgcmVmcmVzaFwiLCBlKSwgXG4gICAgICAgICAgICAvKiBpc1ByaW1hcnk9ICovICExO1xuICAgICAgICB9KSkudGhlbigoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdC5pc1ByaW1hcnkgIT09IGUgJiYgdC5Uci51bygoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQuS2goZSk7XG4gICAgICAgICAgICB9KSksIHQuaXNQcmltYXJ5ID0gZTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLmNvID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB1bih0KS5nZXQoRW4ua2V5KS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4geGUucmVzb2x2ZShlLmZvKHQpKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLlRvID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gYW4odCkuZGVsZXRlKHRoaXMuY2xpZW50SWQpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIElmIHRoZSBnYXJiYWdlIGNvbGxlY3Rpb24gdGhyZXNob2xkIGhhcyBwYXNzZWQsIHBydW5lcyB0aGVcbiAgICAgKiBSZW1vdGVEb2N1bWVudENoYW5nZXMgYW5kIHRoZSBDbGllbnRNZXRhZGF0YSBzdG9yZSBiYXNlZCBvbiB0aGUgbGFzdCB1cGRhdGVcbiAgICAgKiB0aW1lIG9mIGFsbCBjbGllbnRzLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLkVvID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBlLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGUubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICF0aGlzLmlzUHJpbWFyeSB8fCB0aGlzLklvKHRoaXMuamgsIDE4ZTUpID8gWyAzIC8qYnJlYWsqLyAsIDIgXSA6ICh0aGlzLmpoID0gRGF0ZS5ub3coKSwgXG4gICAgICAgICAgICAgICAgICAgIFsgNCAvKnlpZWxkKi8gLCB0aGlzLnJ1blRyYW5zYWN0aW9uKFwibWF5YmVHYXJiYWdlQ29sbGVjdE11bHRpQ2xpZW50U3RhdGVcIiwgXCJyZWFkd3JpdGUtcHJpbWFyeVwiLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB0Lk5yKGUsIE9uLnN0b3JlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByLkZyKCkubmV4dCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gbi53byh0LCAxOGU1KSwgaSA9IHQuZmlsdGVyKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMSA9PT0gZS5pbmRleE9mKHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZWxldGUgbWV0YWRhdGEgZm9yIGNsaWVudHMgdGhhdCBhcmUgbm8gbG9uZ2VyIGNvbnNpZGVyZWQgYWN0aXZlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geGUuZm9yRWFjaChpLCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5kZWxldGUodC5jbGllbnRJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKS5jYXRjaCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgICAgIH0pKSBdKTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAvLyBEZWxldGUgcG90ZW50aWFsIGxlZnRvdmVyIGVudHJpZXMgdGhhdCBtYXkgY29udGludWUgdG8gbWFyayB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy8gaW5hY3RpdmUgY2xpZW50cyBhcyB6b21iaWVkIGluIExvY2FsU3RvcmFnZS5cbiAgICAgICAgICAgICAgICAgICAgLy8gSWRlYWxseSB3ZSdkIGRlbGV0ZSB0aGUgSW5kZXhlZERiIGFuZCBMb2NhbFN0b3JhZ2Ugem9tYmllIGVudHJpZXMgZm9yXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBjbGllbnQgYXRvbWljYWxseSwgYnV0IHdlIGNhbid0LiBTbyB3ZSBvcHQgdG8gZGVsZXRlIHRoZSBJbmRleGVkRGJcbiAgICAgICAgICAgICAgICAgICAgLy8gZW50cmllcyBmaXJzdCB0byBhdm9pZCBwb3RlbnRpYWxseSByZXZpdmluZyBhIHpvbWJpZWQgY2xpZW50LlxuICAgICAgICAgICAgICAgICAgICBlLnNlbnQoKS5mb3JFYWNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuLndpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShuLlJvKHQuY2xpZW50SWQpKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpLCBlLmxhYmVsID0gMjtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBTY2hlZHVsZXMgYSByZWN1cnJpbmcgdGltZXIgdG8gdXBkYXRlIHRoZSBjbGllbnQgbWV0YWRhdGEgYW5kIHRvIGVpdGhlclxuICAgICAqIGV4dGVuZCBvciBhY3F1aXJlIHRoZSBwcmltYXJ5IGxlYXNlIGlmIHRoZSBjbGllbnQgaXMgZWxpZ2libGUuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuaW8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICB0aGlzLldoID0gdGhpcy5Uci55cihcImNsaWVudF9tZXRhZGF0YV9yZWZyZXNoXCIgLyogQ2xpZW50TWV0YWRhdGFSZWZyZXNoICovICwgNGUzLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdC50bygpLnRoZW4oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0LkVvKCk7XG4gICAgICAgICAgICB9KSkudGhlbigoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQuaW8oKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKiBDaGVja3Mgd2hldGhlciBgY2xpZW50YCBpcyB0aGUgbG9jYWwgY2xpZW50LiAqLyB0LnByb3RvdHlwZS5mbyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuICEhdCAmJiB0Lm93bmVySWQgPT09IHRoaXMuY2xpZW50SWQ7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogRXZhbHVhdGUgdGhlIHN0YXRlIG9mIGFsbCBhY3RpdmUgY2xpZW50cyBhbmQgZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGxvY2FsXG4gICAgICogY2xpZW50IGlzIG9yIGNhbiBhY3QgYXMgdGhlIGhvbGRlciBvZiB0aGUgcHJpbWFyeSBsZWFzZS4gUmV0dXJucyB3aGV0aGVyXG4gICAgICogdGhlIGNsaWVudCBpcyBlbGlnaWJsZSBmb3IgdGhlIGxlYXNlLCBidXQgZG9lcyBub3QgYWN0dWFsbHkgYWNxdWlyZSBpdC5cbiAgICAgKiBNYXkgcmV0dXJuICdmYWxzZScgZXZlbiBpZiB0aGVyZSBpcyBubyBhY3RpdmUgbGVhc2Vob2xkZXIgYW5kIGFub3RoZXJcbiAgICAgKiAoZm9yZWdyb3VuZCkgY2xpZW50IHNob3VsZCBiZWNvbWUgbGVhc2Vob2xkZXIgaW5zdGVhZC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5fbyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdW4odCkuZ2V0KEVuLmtleSkubmV4dCgoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgLy8gQSBjbGllbnQgaXMgZWxpZ2libGUgZm9yIHRoZSBwcmltYXJ5IGxlYXNlIGlmOlxuICAgICAgICAgICAgLy8gLSBpdHMgbmV0d29yayBpcyBlbmFibGVkIGFuZCB0aGUgY2xpZW50J3MgdGFiIGlzIGluIHRoZSBmb3JlZ3JvdW5kLlxuICAgICAgICAgICAgLy8gLSBpdHMgbmV0d29yayBpcyBlbmFibGVkIGFuZCBubyBvdGhlciBjbGllbnQncyB0YWIgaXMgaW4gdGhlXG4gICAgICAgICAgICAvLyAgIGZvcmVncm91bmQuXG4gICAgICAgICAgICAvLyAtIGV2ZXJ5IGNsaWVudHMgbmV0d29yayBpcyBkaXNhYmxlZCBhbmQgdGhlIGNsaWVudCdzIHRhYiBpcyBpbiB0aGVcbiAgICAgICAgICAgIC8vICAgZm9yZWdyb3VuZC5cbiAgICAgICAgICAgIC8vIC0gZXZlcnkgY2xpZW50cyBuZXR3b3JrIGlzIGRpc2FibGVkIGFuZCBubyBvdGhlciBjbGllbnQncyB0YWIgaXMgaW5cbiAgICAgICAgICAgIC8vICAgdGhlIGZvcmVncm91bmQuXG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gbiAmJiBlLklvKG4ubGVhc2VUaW1lc3RhbXBNcywgNWUzKSAmJiAhZS5BbyhuLm93bmVySWQpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUuZm8obikgJiYgZS5uZXR3b3JrRW5hYmxlZCkgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgIGlmICghZS5mbyhuKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW4uYWxsb3dUYWJTeW5jaHJvbml6YXRpb24pIFxuICAgICAgICAgICAgICAgICAgICAvLyBGYWlsIHRoZSBgY2FuQWN0QXNQcmltYXJ5YCBjaGVjayBpZiB0aGUgY3VycmVudCBsZWFzZWhvbGRlciBoYXNcbiAgICAgICAgICAgICAgICAgICAgLy8gbm90IG9wdGVkIGludG8gbXVsdGktdGFiIHN5bmNocm9uaXphdGlvbi4gSWYgdGhpcyBoYXBwZW5zIGF0XG4gICAgICAgICAgICAgICAgICAgIC8vIGNsaWVudCBzdGFydHVwLCB3ZSByZWplY3QgdGhlIFByb21pc2UgcmV0dXJuZWQgYnlcbiAgICAgICAgICAgICAgICAgICAgLy8gYGVuYWJsZVBlcnNpc3RlbmNlKClgIGFuZCB0aGUgdXNlciBjYW4gY29udGludWUgdG8gdXNlIEZpcmVzdG9yZVxuICAgICAgICAgICAgICAgICAgICAvLyB3aXRoIGluLW1lbW9yeSBwZXJzaXN0ZW5jZS5cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBmYWlscyBkdXJpbmcgYSBsZWFzZSByZWZyZXNoLCB3ZSB3aWxsIGluc3RlYWQgYmxvY2sgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIEFzeW5jUXVldWUgZnJvbSBleGVjdXRpbmcgZnVydGhlciBvcGVyYXRpb25zLiBOb3RlIHRoYXQgdGhpcyBpc1xuICAgICAgICAgICAgICAgICAgICAvLyBhY2NlcHRhYmxlIHNpbmNlIG1peGluZyAmIG1hdGNoaW5nIGRpZmZlcmVudCBgc3luY2hyb25pemVUYWJzYFxuICAgICAgICAgICAgICAgICAgICAvLyBzZXR0aW5ncyBpcyBub3Qgc3VwcG9ydGVkLlxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPKGIvMTE0MjI2MjM0KTogUmVtb3ZlIHRoaXMgY2hlY2sgd2hlbiBgc3luY2hyb25pemVUYWJzYCBjYW5cbiAgICAgICAgICAgICAgICAgICAgLy8gbm8gbG9uZ2VyIGJlIHR1cm5lZCBvZmYuXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBjKGguRkFJTEVEX1BSRUNPTkRJVElPTiwgcm4pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICEoIWUubmV0d29ya0VuYWJsZWQgfHwgIWUuaW5Gb3JlZ3JvdW5kKSB8fCBhbih0KS5GcigpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwID09PSBlLndvKHQsIDVlMykuZmluZCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5jbGllbnRJZCAhPT0gdC5jbGllbnRJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSAhZS5uZXR3b3JrRW5hYmxlZCAmJiB0Lm5ldHdvcmtFbmFibGVkLCByID0gIWUuaW5Gb3JlZ3JvdW5kICYmIHQuaW5Gb3JlZ3JvdW5kLCBpID0gZS5uZXR3b3JrRW5hYmxlZCA9PT0gdC5uZXR3b3JrRW5hYmxlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuIHx8IHIgJiYgaSkgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gZS5pc1ByaW1hcnkgIT09IHQgJiYgZGUoXCJJbmRleGVkRGJQZXJzaXN0ZW5jZVwiLCBcIkNsaWVudCBcIiArICh0ID8gXCJpc1wiIDogXCJpcyBub3RcIikgKyBcIiBlbGlnaWJsZSBmb3IgYSBwcmltYXJ5IGxlYXNlLlwiKSwgXG4gICAgICAgICAgICB0O1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUubW8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gZS5fX2dlbmVyYXRvcih0aGlzLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgc2h1dGRvd24oKSBvcGVyYXRpb25zIGFyZSBpZGVtcG90ZW50IGFuZCBjYW4gYmUgY2FsbGVkIGV2ZW4gd2hlblxuICAgICAgICAgICAgICAgICAgICAvLyBzdGFydCgpIGFib3J0ZWQgKGUuZy4gYmVjYXVzZSBpdCBjb3VsZG4ndCBhY3F1aXJlIHRoZSBwZXJzaXN0ZW5jZSBsZWFzZSkuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnFoID0gITEsIHRoaXMuUG8oKSwgdGhpcy5XaCAmJiAodGhpcy5XaC5jYW5jZWwoKSwgdGhpcy5XaCA9IG51bGwpLCB0aGlzLlZvKCksIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvKCksIFsgNCAvKnlpZWxkKi8gLCB0aGlzLnJ1blRyYW5zYWN0aW9uKFwic2h1dGRvd25cIiwgXCJyZWFkd3JpdGVcIiwgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmxvKGUpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LlRvKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KSkuY2F0Y2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlKFwiSW5kZXhlZERiUGVyc2lzdGVuY2VcIiwgXCJQcm9jZWVkaW5nIHdpdGggc2h1dGRvd24gZGVzcGl0ZSBmYWlsdXJlOiBcIiwgdCk7XG4gICAgICAgICAgICAgICAgICAgIH0pKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBzaHV0ZG93bigpIG9wZXJhdGlvbnMgYXJlIGlkZW1wb3RlbnQgYW5kIGNhbiBiZSBjYWxsZWQgZXZlbiB3aGVuXG4gICAgICAgICAgICAgICAgICAgIC8vIHN0YXJ0KCkgYWJvcnRlZCAoZS5nLiBiZWNhdXNlIGl0IGNvdWxkbid0IGFjcXVpcmUgdGhlIHBlcnNpc3RlbmNlIGxlYXNlKS5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuc2VudCgpLCB0aGlzLlpoLmNsb3NlKCksIFxuICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGVudHJ5IG1hcmtpbmcgdGhlIGNsaWVudCBhcyB6b21iaWVkIGZyb20gTG9jYWxTdG9yYWdlIHNpbmNlXG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIHN1Y2Nlc3NmdWxseSBkZWxldGVkIGl0cyBtZXRhZGF0YSBmcm9tIEluZGV4ZWREYi5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy55bygpLCBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY2xpZW50cyB0aGF0IGFyZSBub3Qgem9tYmllZCBhbmQgaGF2ZSBhbiB1cGRhdGVUaW1lIHdpdGhpbiB0aGVcbiAgICAgKiBwcm92aWRlZCB0aHJlc2hvbGQuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUud28gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHQuZmlsdGVyKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gbi5Jbyh0LnVwZGF0ZVRpbWVNcywgZSkgJiYgIW4uQW8odC5jbGllbnRJZCk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBJRHMgb2YgdGhlIGNsaWVudHMgdGhhdCBhcmUgY3VycmVudGx5IGFjdGl2ZS4gSWYgbXVsdGktdGFiXG4gICAgICogaXMgbm90IHN1cHBvcnRlZCwgcmV0dXJucyBhbiBhcnJheSB0aGF0IG9ubHkgY29udGFpbnMgdGhlIGxvY2FsIGNsaWVudCdzXG4gICAgICogSUQuXG4gICAgICpcbiAgICAgKiBQT1JUSU5HIE5PVEU6IFRoaXMgaXMgb25seSB1c2VkIGZvciBXZWIgbXVsdGktdGFiLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmJvID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMucnVuVHJhbnNhY3Rpb24oXCJnZXRBY3RpdmVDbGllbnRzXCIsIFwicmVhZG9ubHlcIiwgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBhbihlKS5GcigpLm5leHQoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdC53byhlLCAxOGU1KS5tYXAoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuY2xpZW50SWQ7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5jbGVhclBlcnNpc3RlbmNlID0gZnVuY3Rpb24obikge1xuICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciByO1xuICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGUubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuR2goKSA/IChyID0gbiArIHQuSGgsIFsgNCAvKnlpZWxkKi8gLCBQbi5kZWxldGUocikgXSkgOiBbIDIgLypyZXR1cm4qLyAsIFByb21pc2UucmVzb2x2ZSgpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuc2VudCgpLCBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJyb1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5xaDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgdC5wcm90b3R5cGUudm8gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBmbi5Tbyh0LCB0aGlzLnNlcmlhbGl6ZXIsIHRoaXMuam4sIHRoaXMuaGgpO1xuICAgIH0sIHQucHJvdG90eXBlLkRvID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlloO1xuICAgIH0sIHQucHJvdG90eXBlLkNvID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlFuO1xuICAgIH0sIHQucHJvdG90eXBlLkZvID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmpuO1xuICAgIH0sIHQucHJvdG90eXBlLnJ1blRyYW5zYWN0aW9uID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXM7XG4gICAgICAgIGRlKFwiSW5kZXhlZERiUGVyc2lzdGVuY2VcIiwgXCJTdGFydGluZyB0cmFuc2FjdGlvbjpcIiwgdCk7XG4gICAgICAgIHZhciBpLCBvID0gXCJyZWFkb25seVwiID09PSBlID8gXCJyZWFkb25seVwiIDogXCJyZWFkd3JpdGVcIjtcbiAgICAgICAgLy8gRG8gYWxsIHRyYW5zYWN0aW9ucyBhcyByZWFkd3JpdGUgYWdhaW5zdCBhbGwgb2JqZWN0IHN0b3Jlcywgc2luY2Ugd2VcbiAgICAgICAgLy8gYXJlIHRoZSBvbmx5IHJlYWRlci93cml0ZXIuXG4gICAgICAgIHJldHVybiB0aGlzLlpoLnJ1blRyYW5zYWN0aW9uKG8sIFZuLCAoZnVuY3Rpb24obykge1xuICAgICAgICAgICAgcmV0dXJuIGkgPSBuZXcgb24obywgci5CaCA/IHIuQmgubmV4dCgpIDogUGUuZHIpLCBcInJlYWR3cml0ZS1wcmltYXJ5XCIgPT09IGUgPyByLmNvKGkpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISF0IHx8IHIuX28oaSk7XG4gICAgICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGlmICghZSkgdGhyb3cgeWUoXCJGYWlsZWQgdG8gb2J0YWluIHByaW1hcnkgbGVhc2UgZm9yIGFjdGlvbiAnXCIgKyB0ICsgXCInLlwiKSwgci5pc1ByaW1hcnkgPSAhMSwgXG4gICAgICAgICAgICAgICAgci5Uci51bygoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByLktoKCExKTtcbiAgICAgICAgICAgICAgICB9KSksIG5ldyBjKGguRkFJTEVEX1BSRUNPTkRJVElPTiwgUmUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuKGkpO1xuICAgICAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gci5kbyhpKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSkpIDogci5ObyhpKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbihpKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpLnRoZW4oKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBpLlVuKCksIHQ7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBWZXJpZmllcyB0aGF0IHRoZSBjdXJyZW50IHRhYiBpcyB0aGUgcHJpbWFyeSBsZWFzZWhvbGRlciBvciBhbHRlcm5hdGl2ZWx5XG4gICAgICogdGhhdCB0aGUgbGVhc2Vob2xkZXIgaGFzIG9wdGVkIGludG8gbXVsdGktdGFiIHN5bmNocm9uaXphdGlvbi5cbiAgICAgKi9cbiAgICAvLyBUT0RPKGIvMTE0MjI2MjM0KTogUmVtb3ZlIHRoaXMgY2hlY2sgd2hlbiBgc3luY2hyb25pemVUYWJzYCBjYW4gbm8gbG9uZ2VyXG4gICAgLy8gYmUgdHVybmVkIG9mZi5cbiAgICB0LnByb3RvdHlwZS5ObyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdW4odCkuZ2V0KEVuLmtleSkubmV4dCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgaWYgKG51bGwgIT09IHQgJiYgZS5Jbyh0LmxlYXNlVGltZXN0YW1wTXMsIDVlMykgJiYgIWUuQW8odC5vd25lcklkKSAmJiAhZS5mbyh0KSAmJiAoIWUuYWxsb3dUYWJTeW5jaHJvbml6YXRpb24gfHwgIXQuYWxsb3dUYWJTeW5jaHJvbml6YXRpb24pKSB0aHJvdyBuZXcgYyhoLkZBSUxFRF9QUkVDT05ESVRJT04sIHJuKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIE9idGFpbnMgb3IgZXh0ZW5kcyB0aGUgbmV3IHByaW1hcnkgbGVhc2UgZm9yIHRoZSBsb2NhbCBjbGllbnQuIFRoaXNcbiAgICAgKiBtZXRob2QgZG9lcyBub3QgdmVyaWZ5IHRoYXQgdGhlIGNsaWVudCBpcyBlbGlnaWJsZSBmb3IgdGhpcyBsZWFzZS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5kbyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSBuZXcgRW4odGhpcy5jbGllbnRJZCwgdGhpcy5hbGxvd1RhYlN5bmNocm9uaXphdGlvbiwgRGF0ZS5ub3coKSk7XG4gICAgICAgIHJldHVybiB1bih0KS5wdXQoRW4ua2V5LCBlKTtcbiAgICB9LCB0LkdoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBQbi5HaCgpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIHN0cmluZyB1c2VkIGFzIGEgcHJlZml4IHdoZW4gc3RvcmluZyBkYXRhIGluIEluZGV4ZWREQiBhbmRcbiAgICAgKiBMb2NhbFN0b3JhZ2UuXG4gICAgICovXG4gICAgdC4kbyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgLy8gVXNlIHR3byBkaWZmZXJlbnQgcHJlZml4IGZvcm1hdHM6XG4gICAgICAgIC8vICAgKiBmaXJlc3RvcmUgLyBwZXJzaXN0ZW5jZUtleSAvIHByb2plY3RJRCAuIGRhdGFiYXNlSUQgLyAuLi5cbiAgICAgICAgLy8gICAqIGZpcmVzdG9yZSAvIHBlcnNpc3RlbmNlS2V5IC8gcHJvamVjdElEIC8gLi4uXG4gICAgICAgIC8vIHByb2plY3RJRHMgYXJlIEROUy1jb21wYXRpYmxlIG5hbWVzIGFuZCBjYW5ub3QgY29udGFpbiBkb3RzXG4gICAgICAgIC8vIHNvIHRoZXJlJ3Mgbm8gZGFuZ2VyIG9mIGNvbGxpc2lvbnMuXG4gICAgICAgIHZhciBlID0gdC5paS5wcm9qZWN0SWQ7XG4gICAgICAgIHJldHVybiB0LmlpLmxuIHx8IChlICs9IFwiLlwiICsgdC5paS5kYXRhYmFzZSksIFwiZmlyZXN0b3JlL1wiICsgdC5wZXJzaXN0ZW5jZUtleSArIFwiL1wiICsgZSArIFwiL1wiO1xuICAgIH0sIFxuICAgIC8qKiBDaGVja3MgdGhlIHByaW1hcnkgbGVhc2UgYW5kIHJlbW92ZXMgaXQgaWYgd2UgYXJlIHRoZSBjdXJyZW50IHByaW1hcnkuICovIHQucHJvdG90eXBlLmxvID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMsIG4gPSB1bih0KTtcbiAgICAgICAgcmV0dXJuIG4uZ2V0KEVuLmtleSkubmV4dCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIGUuZm8odCkgPyAoZGUoXCJJbmRleGVkRGJQZXJzaXN0ZW5jZVwiLCBcIlJlbGVhc2luZyBwcmltYXJ5IGxlYXNlLlwiKSwgbi5kZWxldGUoRW4ua2V5KSkgOiB4ZS5yZXNvbHZlKCk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKiogVmVyaWZpZXMgdGhhdCBgdXBkYXRlVGltZU1zYCBpcyB3aXRoaW4gYG1heEFnZU1zYC4gKi8gdC5wcm90b3R5cGUuSW8gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gRGF0ZS5ub3coKTtcbiAgICAgICAgcmV0dXJuICEodCA8IG4gLSBlIHx8IHQgPiBuICYmICh5ZShcIkRldGVjdGVkIGFuIHVwZGF0ZSB0aW1lIHRoYXQgaXMgaW4gdGhlIGZ1dHVyZTogXCIgKyB0ICsgXCIgPiBcIiArIG4pLCBcbiAgICAgICAgMSkpO1xuICAgIH0sIHQucHJvdG90eXBlLmVvID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgbnVsbCAhPT0gdGhpcy5kb2N1bWVudCAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHRoaXMuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciAmJiAodGhpcy5RaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdC5Uci51bygoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQuaW5Gb3JlZ3JvdW5kID0gXCJ2aXNpYmxlXCIgPT09IHQuZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlLCB0LnRvKCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0sIHRoaXMuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgdGhpcy5RaCksIHRoaXMuaW5Gb3JlZ3JvdW5kID0gXCJ2aXNpYmxlXCIgPT09IHRoaXMuZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlKTtcbiAgICB9LCB0LnByb3RvdHlwZS5WbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLlFoICYmICh0aGlzLmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIHRoaXMuUWgpLCB0aGlzLlFoID0gbnVsbCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQXR0YWNoZXMgYSB3aW5kb3cudW5sb2FkIGhhbmRsZXIgdGhhdCB3aWxsIHN5bmNocm9ub3VzbHkgd3JpdGUgb3VyXG4gICAgICogY2xpZW50SWQgdG8gYSBcInpvbWJpZSBjbGllbnQgaWRcIiBsb2NhdGlvbiBpbiBMb2NhbFN0b3JhZ2UuIFRoaXMgY2FuIGJlIHVzZWRcbiAgICAgKiBieSB0YWJzIHRyeWluZyB0byBhY3F1aXJlIHRoZSBwcmltYXJ5IGxlYXNlIHRvIGRldGVybWluZSB0aGF0IHRoZSBsZWFzZVxuICAgICAqIGlzIG5vIGxvbmdlciB2YWxpZCBldmVuIGlmIHRoZSB0aW1lc3RhbXAgaXMgcmVjZW50LiBUaGlzIGlzIHBhcnRpY3VsYXJseVxuICAgICAqIGltcG9ydGFudCBmb3IgdGhlIHJlZnJlc2ggY2FzZSAoc28gdGhlIHRhYiBjb3JyZWN0bHkgcmUtYWNxdWlyZXMgdGhlXG4gICAgICogcHJpbWFyeSBsZWFzZSkuIExvY2FsU3RvcmFnZSBpcyB1c2VkIGZvciB0aGlzIHJhdGhlciB0aGFuIEluZGV4ZWREYiBiZWNhdXNlXG4gICAgICogaXQgaXMgYSBzeW5jaHJvbm91cyBBUEkgYW5kIHNvIGNhbiBiZSB1c2VkIHJlbGlhYmx5IGZyb20gIGFuIHVubG9hZFxuICAgICAqIGhhbmRsZXIuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuc28gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHRoaXMud2luZG93LmFkZEV2ZW50TGlzdGVuZXIgJiYgKHRoaXMuVWggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIE5vdGU6IEluIHRoZW9yeSwgdGhpcyBzaG91bGQgYmUgc2NoZWR1bGVkIG9uIHRoZSBBc3luY1F1ZXVlIHNpbmNlIGl0XG4gICAgICAgICAgICAvLyBhY2Nlc3NlcyBpbnRlcm5hbCBzdGF0ZS4gV2UgZXhlY3V0ZSB0aGlzIGNvZGUgZGlyZWN0bHkgZHVyaW5nIHNodXRkb3duXG4gICAgICAgICAgICAvLyB0byBtYWtlIHN1cmUgaXQgZ2V0cyBhIGNoYW5jZSB0byBydW4uXG4gICAgICAgICAgICB0LlBvKCksIHQuVHIudW8oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0Lm1vKCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0sIHRoaXMud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ1bmxvYWRcIiwgdGhpcy5VaCkpO1xuICAgIH0sIHQucHJvdG90eXBlLnBvID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuVWggJiYgKHRoaXMud2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ1bmxvYWRcIiwgdGhpcy5VaCksIHRoaXMuVWggPSBudWxsKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgYSBjbGllbnQgaXMgXCJ6b21iaWVkXCIgYmFzZWQgb24gaXRzIExvY2FsU3RvcmFnZSBlbnRyeS5cbiAgICAgKiBDbGllbnRzIGJlY29tZSB6b21iaWVkIHdoZW4gdGhlaXIgdGFiIGNsb3NlcyB3aXRob3V0IHJ1bm5pbmcgYWxsIG9mIHRoZVxuICAgICAqIGNsZWFudXAgbG9naWMgaW4gYHNodXRkb3duKClgLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLkFvID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGUgPSBudWxsICE9PSB0aGlzLkpoLmdldEl0ZW0odGhpcy5Sbyh0KSk7XG4gICAgICAgICAgICByZXR1cm4gZGUoXCJJbmRleGVkRGJQZXJzaXN0ZW5jZVwiLCBcIkNsaWVudCAnXCIgKyB0ICsgXCInIFwiICsgKGUgPyBcImlzXCIgOiBcImlzIG5vdFwiKSArIFwiIHpvbWJpZWQgaW4gTG9jYWxTdG9yYWdlXCIpLCBcbiAgICAgICAgICAgIGU7XG4gICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgIC8vIEdyYWNlZnVsbHkgaGFuZGxlIGlmIExvY2FsU3RvcmFnZSBpc24ndCB3b3JraW5nLlxuICAgICAgICAgICAgcmV0dXJuIHllKFwiSW5kZXhlZERiUGVyc2lzdGVuY2VcIiwgXCJGYWlsZWQgdG8gZ2V0IHpvbWJpZWQgY2xpZW50IGlkLlwiLCB0KSwgITE7XG4gICAgICAgIH1cbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZWNvcmQgY2xpZW50IGFzIHpvbWJpZWQgKGEgY2xpZW50IHRoYXQgaGFkIGl0cyB0YWIgY2xvc2VkKS4gWm9tYmllZFxuICAgICAqIGNsaWVudHMgYXJlIGlnbm9yZWQgZHVyaW5nIHByaW1hcnkgdGFiIHNlbGVjdGlvbi5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5QbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5KaC5zZXRJdGVtKHRoaXMuUm8odGhpcy5jbGllbnRJZCksIFN0cmluZyhEYXRlLm5vdygpKSk7XG4gICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgIC8vIEdyYWNlZnVsbHkgaGFuZGxlIGlmIExvY2FsU3RvcmFnZSBpc24ndCBhdmFpbGFibGUgLyB3b3JraW5nLlxuICAgICAgICAgICAgeWUoXCJGYWlsZWQgdG8gc2V0IHpvbWJpZSBjbGllbnQgaWQuXCIsIHQpO1xuICAgICAgICB9XG4gICAgfSwgXG4gICAgLyoqIFJlbW92ZXMgdGhlIHpvbWJpZWQgY2xpZW50IGVudHJ5IGlmIGl0IGV4aXN0cy4gKi8gdC5wcm90b3R5cGUueW8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuSmgucmVtb3ZlSXRlbSh0aGlzLlJvKHRoaXMuY2xpZW50SWQpKTtcbiAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgLy8gSWdub3JlXG4gICAgICAgIH1cbiAgICB9LCB0LnByb3RvdHlwZS5SbyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIFwiZmlyZXN0b3JlX3pvbWJpZV9cIiArIHRoaXMucGVyc2lzdGVuY2VLZXkgKyBcIl9cIiArIHQ7XG4gICAgfSwgdDtcbn0oKTtcblxuLyoqXG4gKiBBIGhlbHBlciBmdW5jdGlvbiBmb3IgZmlndXJpbmcgb3V0IHdoYXQga2luZCBvZiBxdWVyeSBoYXMgYmVlbiBzdG9yZWQuXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFRoZSBuYW1lIG9mIHRoZSBtYWluIChhbmQgY3VycmVudGx5IG9ubHkpIEluZGV4ZWREQiBkYXRhYmFzZS4gdGhpcyBuYW1lIGlzXG4gKiBhcHBlbmRlZCB0byB0aGUgcHJlZml4IHByb3ZpZGVkIHRvIHRoZSBJbmRleGVkRGJQZXJzaXN0ZW5jZSBjb25zdHJ1Y3Rvci5cbiAqL1xuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIHByaW1hcnkgY2xpZW50IG9iamVjdCBzdG9yZS5cbiAqL1xuZnVuY3Rpb24gdW4odCkge1xuICAgIHJldHVybiBzbi5Ocih0LCBFbi5zdG9yZSk7XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSBjbGllbnQgbWV0YWRhdGEgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIGFuKHQpIHtcbiAgICByZXR1cm4gc24uTnIodCwgT24uc3RvcmUpO1xufVxuXG4vKiogUHJvdmlkZXMgTFJVIGZ1bmN0aW9uYWxpdHkgZm9yIEluZGV4ZWREQiBwZXJzaXN0ZW5jZS4gKi8gc24uSGggPSBcIm1haW5cIjtcblxudmFyIGhuID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQsIGUpIHtcbiAgICAgICAgdGhpcy5kYiA9IHQsIHRoaXMua28gPSBuZXcgWG4odGhpcywgZSk7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5MbyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLk1vKHQpO1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5EbygpLlZoKHQpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBlLm5leHQoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdCArIGU7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5NbyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcy5Pbyh0LCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgZSsrO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLmpzID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5EbygpLmpzKHQsIGUpO1xuICAgIH0sIHQucHJvdG90eXBlLk9vID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy54byh0LCAoZnVuY3Rpb24odCwgbikge1xuICAgICAgICAgICAgcmV0dXJuIGUobik7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS55aCA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIGNuKHQsIG4pO1xuICAgIH0sIHQucHJvdG90eXBlLnZoID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICByZXR1cm4gY24odCwgbik7XG4gICAgfSwgdC5wcm90b3R5cGUuQWggPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRiLkRvKCkuQWgodCwgZSwgbik7XG4gICAgfSwgdC5wcm90b3R5cGUuQm8gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiBjbih0LCBlKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgYW55dGhpbmcgd291bGQgcHJldmVudCB0aGlzIGRvY3VtZW50IGZyb20gYmVpbmcgZ2FyYmFnZVxuICAgICAqIGNvbGxlY3RlZCwgZ2l2ZW4gdGhhdCB0aGUgZG9jdW1lbnQgaW4gcXVlc3Rpb24gaXMgbm90IHByZXNlbnQgaW4gYW55XG4gICAgICogdGFyZ2V0cyBhbmQgaGFzIGEgc2VxdWVuY2UgbnVtYmVyIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgdXBwZXIgYm91bmQgZm9yXG4gICAgICogdGhlIGNvbGxlY3Rpb24gcnVuLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLnFvID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAvKiogUmV0dXJucyB0cnVlIGlmIGFueSBtdXRhdGlvbiBxdWV1ZSBjb250YWlucyB0aGUgZ2l2ZW4gZG9jdW1lbnQuICovXG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICB2YXIgbiA9ICExO1xuICAgICAgICAgICAgcmV0dXJuIHZuKHQpLlVvKChmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxuKHQsIHIsIGUpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgJiYgKG4gPSAhMCksIHhlLnJlc29sdmUoIXQpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSh0LCBlKTtcbiAgICB9LCB0LnByb3RvdHlwZS5RbyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLCByID0gdGhpcy5kYi5DbygpLllyKCksIGkgPSBbXSwgbyA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzLnhvKHQsIChmdW5jdGlvbihzLCB1KSB7XG4gICAgICAgICAgICBpZiAodSA8PSBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSBuLnFvKHQsIHMpLm5leHQoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlKSBcbiAgICAgICAgICAgICAgICAgICAgLy8gT3VyIHNpemUgYWNjb3VudGluZyByZXF1aXJlcyB1cyB0byByZWFkIGFsbCBkb2N1bWVudHMgYmVmb3JlXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92aW5nIHRoZW0uXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvKyssIHIuTG4odCwgcykubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5rbihzKSwgZW4odCkuZGVsZXRlKFsgMCwgcWUocy5wYXRoKSBdKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBpLnB1c2goYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB4ZS52bihpKTtcbiAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHIuYXBwbHkodCk7XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUucmVtb3ZlVGFyZ2V0ID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IGUuSWUodC5PaCk7XG4gICAgICAgIHJldHVybiB0aGlzLmRiLkRvKCkuSWgodCwgbik7XG4gICAgfSwgdC5wcm90b3R5cGUuV28gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiBjbih0LCBlKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBDYWxsIHByb3ZpZGVkIGZ1bmN0aW9uIGZvciBlYWNoIGRvY3VtZW50IGluIHRoZSBjYWNoZSB0aGF0IGlzICdvcnBoYW5lZCcuIE9ycGhhbmVkXG4gICAgICogbWVhbnMgbm90IGEgcGFydCBvZiBhbnkgdGFyZ2V0LCBzbyB0aGUgb25seSBlbnRyeSBpbiB0aGUgdGFyZ2V0LWRvY3VtZW50IGluZGV4IGZvclxuICAgICAqIHRoYXQgZG9jdW1lbnQgd2lsbCBiZSB0aGUgc2VudGluZWwgcm93ICh0YXJnZXRJZCAwKSwgd2hpY2ggd2lsbCBhbHNvIGhhdmUgdGhlIHNlcXVlbmNlXG4gICAgICogbnVtYmVyIGZvciB0aGUgbGFzdCB0aW1lIHRoZSBkb2N1bWVudCB3YXMgYWNjZXNzZWQuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUueG8gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuLCByID0gZW4odCksIGkgPSBQZS5kcjtcbiAgICAgICAgcmV0dXJuIHIuVXIoe1xuICAgICAgICAgICAgaW5kZXg6IHhuLmRvY3VtZW50VGFyZ2V0c0luZGV4XG4gICAgICAgIH0sIChmdW5jdGlvbih0LCByKSB7XG4gICAgICAgICAgICB2YXIgbyA9IHRbMF0sIHMgPSAodFsxXSwgci5wYXRoKSwgdSA9IHIuc2VxdWVuY2VOdW1iZXI7XG4gICAgICAgICAgICAwID09PSBvID8gKFxuICAgICAgICAgICAgLy8gaWYgbmV4dFRvUmVwb3J0IGlzIHZhbGlkLCByZXBvcnQgaXQsIHRoaXMgaXMgYSBuZXcga2V5IHNvIHRoZVxuICAgICAgICAgICAgLy8gbGFzdCBvbmUgbXVzdCBub3QgYmUgYSBtZW1iZXIgb2YgYW55IHRhcmdldHMuXG4gICAgICAgICAgICBpICE9PSBQZS5kciAmJiBlKG5ldyBfKEZlKG4pKSwgaSksIFxuICAgICAgICAgICAgLy8gc2V0IG5leHRUb1JlcG9ydCB0byBiZSB0aGlzIHNlcXVlbmNlIG51bWJlci4gSXQncyB0aGUgbmV4dCBvbmUgd2VcbiAgICAgICAgICAgIC8vIG1pZ2h0IHJlcG9ydCwgaWYgd2UgZG9uJ3QgZmluZCBhbnkgdGFyZ2V0cyBmb3IgdGhpcyBkb2N1bWVudC5cbiAgICAgICAgICAgIC8vIE5vdGUgdGhhdCB0aGUgc2VxdWVuY2UgbnVtYmVyIG11c3QgYmUgZGVmaW5lZCB3aGVuIHRoZSB0YXJnZXRJZFxuICAgICAgICAgICAgLy8gaXMgMC5cbiAgICAgICAgICAgIGkgPSB1LCBuID0gcykgOiBcbiAgICAgICAgICAgIC8vIHNldCBuZXh0VG9SZXBvcnQgdG8gYmUgaW52YWxpZCwgd2Uga25vdyB3ZSBkb24ndCBuZWVkIHRvIHJlcG9ydFxuICAgICAgICAgICAgLy8gdGhpcyBvbmUgc2luY2Ugd2UgZm91bmQgYSB0YXJnZXQgZm9yIGl0LlxuICAgICAgICAgICAgaSA9IFBlLmRyO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBTaW5jZSB3ZSByZXBvcnQgc2VxdWVuY2UgbnVtYmVycyBhZnRlciBnZXR0aW5nIHRvIHRoZSBuZXh0IGtleSwgd2VcbiAgICAgICAgICAgIC8vIG5lZWQgdG8gY2hlY2sgaWYgdGhlIGxhc3Qga2V5IHdlIGl0ZXJhdGVkIG92ZXIgd2FzIGFuIG9ycGhhbmVkXG4gICAgICAgICAgICAvLyBkb2N1bWVudCBhbmQgcmVwb3J0IGl0LlxuICAgICAgICAgICAgaSAhPT0gUGUuZHIgJiYgZShuZXcgXyhGZShuKSksIGkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuam8gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRiLkNvKCkuWnIodCk7XG4gICAgfSwgdDtcbn0oKTtcblxuZnVuY3Rpb24gY24odCwgZSkge1xuICAgIHJldHVybiBlbih0KS5wdXQoXG4gICAgLyoqXG4gKiBAcmV0dXJuIEEgdmFsdWUgc3VpdGFibGUgZm9yIHdyaXRpbmcgYSBzZW50aW5lbCByb3cgaW4gdGhlIHRhcmdldC1kb2N1bWVudFxuICogc3RvcmUuXG4gKi9cbiAgICBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiBuZXcgeG4oMCwgcWUodC5wYXRoKSwgZSk7XG4gICAgfShlLCB0Lk9oKSk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKiogQSBtdXRhdGlvbiBxdWV1ZSBmb3IgYSBzcGVjaWZpYyB1c2VyLCBiYWNrZWQgYnkgSW5kZXhlZERCLiAqLyB2YXIgZm4gPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoXG4gICAgLyoqXG4gICAgICogVGhlIG5vcm1hbGl6ZWQgdXNlcklkIChlLmcuIG51bGwgVUlEID0+IFwiXCIgdXNlcklkKSB1c2VkIHRvIHN0b3JlIC9cbiAgICAgKiByZXRyaWV2ZSBtdXRhdGlvbnMuXG4gICAgICovXG4gICAgdCwgZSwgbiwgcikge1xuICAgICAgICB0aGlzLnVzZXJJZCA9IHQsIHRoaXMuc2VyaWFsaXplciA9IGUsIHRoaXMuam4gPSBuLCB0aGlzLmhoID0gciwgXG4gICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FjaGVzIHRoZSBkb2N1bWVudCBrZXlzIGZvciBwZW5kaW5nIG11dGF0aW9uIGJhdGNoZXMuIElmIHRoZSBtdXRhdGlvblxuICAgICAgICAgICAgICogaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIEluZGV4ZWREYiwgdGhlIGNhY2hlZCB2YWx1ZSBtYXkgY29udGludWUgdG9cbiAgICAgICAgICAgICAqIGJlIHVzZWQgdG8gcmV0cmlldmUgdGhlIGJhdGNoJ3MgZG9jdW1lbnQga2V5cy4gVG8gcmVtb3ZlIGEgY2FjaGVkIHZhbHVlXG4gICAgICAgICAgICAgKiBsb2NhbGx5LCBgcmVtb3ZlQ2FjaGVkTXV0YXRpb25LZXlzKClgIHNob3VsZCBiZSBpbnZva2VkIGVpdGhlciBkaXJlY3RseVxuICAgICAgICAgICAgICogb3IgdGhyb3VnaCBgcmVtb3ZlTXV0YXRpb25CYXRjaGVzKClgLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFdpdGggbXVsdGktdGFiLCB3aGVuIHRoZSBwcmltYXJ5IGNsaWVudCBhY2tub3dsZWRnZXMgb3IgcmVqZWN0cyBhIG11dGF0aW9uLFxuICAgICAgICAgICAgICogdGhpcyBjYWNoZSBpcyB1c2VkIGJ5IHNlY29uZGFyeSBjbGllbnRzIHRvIGludmFsaWRhdGUgdGhlIGxvY2FsXG4gICAgICAgICAgICAgKiB2aWV3IG9mIHRoZSBkb2N1bWVudHMgdGhhdCB3ZXJlIHByZXZpb3VzbHkgYWZmZWN0ZWQgYnkgdGhlIG11dGF0aW9uLlxuICAgICAgICAgICAgICovXG4gICAgICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktdGFiIG9ubHkuXG4gICAgICAgIHRoaXMuS28gPSB7fVxuICAgICAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IG11dGF0aW9uIHF1ZXVlIGZvciB0aGUgZ2l2ZW4gdXNlci5cbiAgICAgKiBAcGFyYW0gdXNlciBUaGUgdXNlciBmb3Igd2hpY2ggdG8gY3JlYXRlIGEgbXV0YXRpb24gcXVldWUuXG4gICAgICogQHBhcmFtIHNlcmlhbGl6ZXIgVGhlIHNlcmlhbGl6ZXIgdG8gdXNlIHdoZW4gcGVyc2lzdGluZyB0byBJbmRleGVkRGIuXG4gICAgICovO1xuICAgIH1cbiAgICByZXR1cm4gdC5TbyA9IGZ1bmN0aW9uKGUsIG4sIHIsIGkpIHtcbiAgICAgICAgLy8gVE9ETyhtY2cpOiBGaWd1cmUgb3V0IHdoYXQgY29uc3RyYWludHMgdGhlcmUgYXJlIG9uIHVzZXJJRHNcbiAgICAgICAgLy8gSW4gcGFydGljdWxhciwgYXJlIHRoZXJlIGFueSByZXNlcnZlZCBjaGFyYWN0ZXJzPyBhcmUgZW1wdHkgaWRzIGFsbG93ZWQ/XG4gICAgICAgIC8vIEZvciB0aGUgbW9tZW50IHN0b3JlIHRoZXNlIHRvZ2V0aGVyIGluIHRoZSBzYW1lIG11dGF0aW9ucyB0YWJsZSBhc3N1bWluZ1xuICAgICAgICAvLyB0aGF0IGVtcHR5IHVzZXJJRHMgYXJlbid0IGFsbG93ZWQuXG4gICAgICAgIHJldHVybiBtZShcIlwiICE9PSBlLnVpZCksIG5ldyB0KGUudCgpID8gZS51aWQgOiBcIlwiLCBuLCByLCBpKTtcbiAgICB9LCB0LnByb3RvdHlwZS5HbyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSAhMCwgbiA9IElEQktleVJhbmdlLmJvdW5kKFsgdGhpcy51c2VySWQsIE51bWJlci5ORUdBVElWRV9JTkZJTklUWSBdLCBbIHRoaXMudXNlcklkLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgXSk7XG4gICAgICAgIHJldHVybiBkbih0KS5Vcih7XG4gICAgICAgICAgICBpbmRleDogX24udXNlck11dGF0aW9uc0luZGV4LFxuICAgICAgICAgICAgcmFuZ2U6IG5cbiAgICAgICAgfSwgKGZ1bmN0aW9uKHQsIG4sIHIpIHtcbiAgICAgICAgICAgIGUgPSAhMSwgci5kb25lKCk7XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuem8gPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkhvKHQpLm5leHQoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIC8vIFdlIGNhbid0IHN0b3JlIHRoZSByZXN1bWVUb2tlbiBhcyBhIEJ5dGVTdHJpbmcgaW4gSW5kZXhlZERCLCBzbyB3ZVxuICAgICAgICAgICAgLy8gY29udmVydCBpdCB0byBhIEJhc2U2NCBzdHJpbmcgZm9yIHN0b3JhZ2UuXG4gICAgICAgICAgICByZXR1cm4gZS5sYXN0U3RyZWFtVG9rZW4gPSBuLnRvQmFzZTY0KCksIHZuKHQpLnB1dChlKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLllvID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5Ibyh0KS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gQS5mcm9tQmFzZTY0U3RyaW5nKHQubGFzdFN0cmVhbVRva2VuKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLkpvID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5Ibyh0KS5uZXh0KChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAvLyBXZSBjYW4ndCBzdG9yZSB0aGUgcmVzdW1lVG9rZW4gYXMgYSBCeXRlU3RyaW5nIGluIEluZGV4ZWREQiwgc28gd2VcbiAgICAgICAgICAgIC8vIGNvbnZlcnQgaXQgdG8gYSBCYXNlNjQgc3RyaW5nIGZvciBzdG9yYWdlLlxuICAgICAgICAgICAgcmV0dXJuIG4ubGFzdFN0cmVhbVRva2VuID0gZS50b0Jhc2U2NCgpLCB2bih0KS5wdXQobik7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5YbyA9IGZ1bmN0aW9uKHQsIGUsIG4sIHIpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzLCBvID0geW4odCksIHMgPSBkbih0KTtcbiAgICAgICAgLy8gVGhlIEluZGV4ZWREYiBpbXBsZW1lbnRhdGlvbiBpbiBDaHJvbWUgKGFuZCBGaXJlZm94KSBkb2VzIG5vdCBoYW5kbGVcbiAgICAgICAgLy8gY29tcG91bmQgaW5kaWNlcyB0aGF0IGluY2x1ZGUgYXV0by1nZW5lcmF0ZWQga2V5cyBjb3JyZWN0bHkuIFRvIGVuc3VyZVxuICAgICAgICAvLyB0aGF0IHRoZSBpbmRleCBlbnRyeSBpcyBhZGRlZCBjb3JyZWN0bHkgaW4gYWxsIGJyb3dzZXJzLCB3ZSBwZXJmb3JtIHR3b1xuICAgICAgICAvLyB3cml0ZXM6IFRoZSBmaXJzdCB3cml0ZSBpcyB1c2VkIHRvIHJldHJpZXZlIHRoZSBuZXh0IGF1dG8tZ2VuZXJhdGVkIEJhdGNoXG4gICAgICAgIC8vIElELCBhbmQgdGhlIHNlY29uZCB3cml0ZSBwb3B1bGF0ZXMgdGhlIGluZGV4IGFuZCBzdG9yZXMgdGhlIGFjdHVhbFxuICAgICAgICAvLyBtdXRhdGlvbiBiYXRjaC5cbiAgICAgICAgLy8gU2VlOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD03MDE5NzJcbiAgICAgICAgLy8gV2Ugd3JpdGUgYW4gZW1wdHkgb2JqZWN0IHRvIG9idGFpbiBrZXlcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgcmV0dXJuIHMuYWRkKHt9KS5uZXh0KChmdW5jdGlvbih1KSB7XG4gICAgICAgICAgICBtZShcIm51bWJlclwiID09IHR5cGVvZiB1KTtcbiAgICAgICAgICAgIGZvciAodmFyIGEgPSBuZXcga2UodSwgZSwgbiwgciksIGggPSBpLnNlcmlhbGl6ZXIua2goaS51c2VySWQsIGEpLCBjID0gW10sIGYgPSBuZXcgUHQoKGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYmUodC5qKCksIGUuaigpKTtcbiAgICAgICAgICAgIH0pKSwgbCA9IDAsIHAgPSByOyBsIDwgcC5sZW5ndGg7IGwrKykge1xuICAgICAgICAgICAgICAgIHZhciBkID0gcFtsXSwgeSA9IFRuLmtleShpLnVzZXJJZCwgZC5rZXkucGF0aCwgdSk7XG4gICAgICAgICAgICAgICAgZiA9IGYuYWRkKGQua2V5LnBhdGguTCgpKSwgYy5wdXNoKHMucHV0KGgpKSwgYy5wdXNoKG8ucHV0KHksIFRuLlBMQUNFSE9MREVSKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZi5mb3JFYWNoKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgYy5wdXNoKGkuam4uRHIodCwgZSkpO1xuICAgICAgICAgICAgfSkpLCB0LnFuKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpLktvW3VdID0gYS5rZXlzKCk7XG4gICAgICAgICAgICB9KSksIHhlLnZuKGMpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuWm8gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGRuKHQpLmdldChlKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gdCA/IChtZSh0LnVzZXJJZCA9PT0gbi51c2VySWQpLCBuLnNlcmlhbGl6ZXIuTGgodCkpIDogbnVsbDtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGRvY3VtZW50IGtleXMgZm9yIHRoZSBtdXRhdGlvbiBiYXRjaCB3aXRoIHRoZSBnaXZlbiBiYXRjaElkLlxuICAgICAqIEZvciBwcmltYXJ5IGNsaWVudHMsIHRoaXMgbWV0aG9kIHJldHVybnMgYG51bGxgIGFmdGVyXG4gICAgICogYHJlbW92ZU11dGF0aW9uQmF0Y2hlcygpYCBoYXMgYmVlbiBjYWxsZWQuIFNlY29uZGFyeSBjbGllbnRzIHJldHVybiBhXG4gICAgICogY2FjaGVkIHJlc3VsdCB1bnRpbCBgcmVtb3ZlQ2FjaGVkTXV0YXRpb25LZXlzKClgIGlzIGludm9rZWQuXG4gICAgICovXG4gICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS10YWIgb25seS5cbiAgICB0LnByb3RvdHlwZS50YSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5Lb1tlXSA/IHhlLnJlc29sdmUodGhpcy5Lb1tlXSkgOiB0aGlzLlpvKHQsIGUpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGlmICh0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHIgPSB0LmtleXMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbi5Lb1tlXSA9IHIsIHI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLmVhID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXMsIHIgPSBlICsgMSwgaSA9IElEQktleVJhbmdlLmxvd2VyQm91bmQoWyB0aGlzLnVzZXJJZCwgciBdKSwgbyA9IG51bGw7XG4gICAgICAgIHJldHVybiBkbih0KS5Vcih7XG4gICAgICAgICAgICBpbmRleDogX24udXNlck11dGF0aW9uc0luZGV4LFxuICAgICAgICAgICAgcmFuZ2U6IGlcbiAgICAgICAgfSwgKGZ1bmN0aW9uKHQsIGUsIGkpIHtcbiAgICAgICAgICAgIGUudXNlcklkID09PSBuLnVzZXJJZCAmJiAobWUoZS5iYXRjaElkID49IHIpLCBvID0gbi5zZXJpYWxpemVyLkxoKGUpKSwgaS5kb25lKCk7XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuc2EgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gSURCS2V5UmFuZ2UudXBwZXJCb3VuZChbIHRoaXMudXNlcklkLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgXSksIG4gPSAtMTtcbiAgICAgICAgcmV0dXJuIGRuKHQpLlVyKHtcbiAgICAgICAgICAgIGluZGV4OiBfbi51c2VyTXV0YXRpb25zSW5kZXgsXG4gICAgICAgICAgICByYW5nZTogZSxcbiAgICAgICAgICAgIHJldmVyc2U6ICEwXG4gICAgICAgIH0sIChmdW5jdGlvbih0LCBlLCByKSB7XG4gICAgICAgICAgICBuID0gZS5iYXRjaElkLCByLmRvbmUoKTtcbiAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5pYSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLCBuID0gSURCS2V5UmFuZ2UuYm91bmQoWyB0aGlzLnVzZXJJZCwgLTEgXSwgWyB0aGlzLnVzZXJJZCwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIF0pO1xuICAgICAgICByZXR1cm4gZG4odCkuRnIoX24udXNlck11dGF0aW9uc0luZGV4LCBuKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gdC5tYXAoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5zZXJpYWxpemVyLkxoKHQpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuR24gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcywgciA9IFRuLnByZWZpeEZvclBhdGgodGhpcy51c2VySWQsIGUucGF0aCksIGkgPSBJREJLZXlSYW5nZS5sb3dlckJvdW5kKHIpLCBvID0gW107XG4gICAgICAgIC8vIFNjYW4gdGhlIGRvY3VtZW50LW11dGF0aW9uIGluZGV4IHN0YXJ0aW5nIHdpdGggYSBwcmVmaXggc3RhcnRpbmcgd2l0aFxuICAgICAgICAvLyB0aGUgZ2l2ZW4gZG9jdW1lbnRLZXkuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHluKHQpLlVyKHtcbiAgICAgICAgICAgIHJhbmdlOiBpXG4gICAgICAgIH0sIChmdW5jdGlvbihyLCBpLCBzKSB7XG4gICAgICAgICAgICB2YXIgdSA9IHJbMF0sIGEgPSByWzFdLCBoID0gclsyXSwgYyA9IEZlKGEpO1xuICAgICAgICAgICAgLy8gT25seSBjb25zaWRlciByb3dzIG1hdGNoaW5nIGV4YWN0bHkgdGhlIHNwZWNpZmljIGtleSBvZlxuICAgICAgICAgICAgLy8gaW50ZXJlc3QuIE5vdGUgdGhhdCBiZWNhdXNlIHdlIG9yZGVyIGJ5IHBhdGggZmlyc3QsIGFuZCB3ZVxuICAgICAgICAgICAgLy8gb3JkZXIgdGVybWluYXRvcnMgYmVmb3JlIHBhdGggc2VwYXJhdG9ycywgd2UnbGwgZW5jb3VudGVyIGFsbFxuICAgICAgICAgICAgLy8gdGhlIGluZGV4IHJvd3MgZm9yIGRvY3VtZW50S2V5IGNvbnRpZ3VvdXNseS4gSW4gcGFydGljdWxhciwgYWxsXG4gICAgICAgICAgICAvLyB0aGUgcm93cyBmb3IgZG9jdW1lbnRLZXkgd2lsbCBvY2N1ciBiZWZvcmUgYW55IHJvd3MgZm9yXG4gICAgICAgICAgICAvLyBkb2N1bWVudHMgbmVzdGVkIGluIGEgc3ViY29sbGVjdGlvbiBiZW5lYXRoIGRvY3VtZW50S2V5IHNvIHdlXG4gICAgICAgICAgICAvLyBjYW4gc3RvcCBhcyBzb29uIGFzIHdlIGhpdCBhbnkgc3VjaCByb3cuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodSA9PT0gbi51c2VySWQgJiYgZS5wYXRoLmlzRXF1YWwoYykpIFxuICAgICAgICAgICAgLy8gTG9vayB1cCB0aGUgbXV0YXRpb24gYmF0Y2ggaW4gdGhlIHN0b3JlLlxuICAgICAgICAgICAgcmV0dXJuIGRuKHQpLmdldChoKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0KSB0aHJvdyBnZSgpO1xuICAgICAgICAgICAgICAgIG1lKHQudXNlcklkID09PSBuLnVzZXJJZCksIG8ucHVzaChuLnNlcmlhbGl6ZXIuTGgodCkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgcy5kb25lKCk7XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuWG4gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcywgciA9IG5ldyBQdChiZSksIGkgPSBbXTtcbiAgICAgICAgcmV0dXJuIGUuZm9yRWFjaCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIG8gPSBUbi5wcmVmaXhGb3JQYXRoKG4udXNlcklkLCBlLnBhdGgpLCBzID0gSURCS2V5UmFuZ2UubG93ZXJCb3VuZChvKSwgdSA9IHluKHQpLlVyKHtcbiAgICAgICAgICAgICAgICByYW5nZTogc1xuICAgICAgICAgICAgfSwgKGZ1bmN0aW9uKHQsIGksIG8pIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IHRbMF0sIHUgPSB0WzFdLCBhID0gdFsyXSwgaCA9IEZlKHUpO1xuICAgICAgICAgICAgICAgIC8vIE9ubHkgY29uc2lkZXIgcm93cyBtYXRjaGluZyBleGFjdGx5IHRoZSBzcGVjaWZpYyBrZXkgb2ZcbiAgICAgICAgICAgICAgICAvLyBpbnRlcmVzdC4gTm90ZSB0aGF0IGJlY2F1c2Ugd2Ugb3JkZXIgYnkgcGF0aCBmaXJzdCwgYW5kIHdlXG4gICAgICAgICAgICAgICAgLy8gb3JkZXIgdGVybWluYXRvcnMgYmVmb3JlIHBhdGggc2VwYXJhdG9ycywgd2UnbGwgZW5jb3VudGVyIGFsbFxuICAgICAgICAgICAgICAgIC8vIHRoZSBpbmRleCByb3dzIGZvciBkb2N1bWVudEtleSBjb250aWd1b3VzbHkuIEluIHBhcnRpY3VsYXIsIGFsbFxuICAgICAgICAgICAgICAgIC8vIHRoZSByb3dzIGZvciBkb2N1bWVudEtleSB3aWxsIG9jY3VyIGJlZm9yZSBhbnkgcm93cyBmb3JcbiAgICAgICAgICAgICAgICAvLyBkb2N1bWVudHMgbmVzdGVkIGluIGEgc3ViY29sbGVjdGlvbiBiZW5lYXRoIGRvY3VtZW50S2V5IHNvIHdlXG4gICAgICAgICAgICAgICAgLy8gY2FuIHN0b3AgYXMgc29vbiBhcyB3ZSBoaXQgYW55IHN1Y2ggcm93LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID09PSBuLnVzZXJJZCAmJiBlLnBhdGguaXNFcXVhbChoKSA/IHIgPSByLmFkZChhKSA6IG8uZG9uZSgpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgaS5wdXNoKHUpO1xuICAgICAgICB9KSksIHhlLnZuKGkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG4ubmEodCwgcik7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5uciA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLCByID0gZS5wYXRoLCBpID0gci5sZW5ndGggKyAxLCBvID0gVG4ucHJlZml4Rm9yUGF0aCh0aGlzLnVzZXJJZCwgciksIHMgPSBJREJLZXlSYW5nZS5sb3dlckJvdW5kKG8pLCB1ID0gbmV3IFB0KGJlKTtcbiAgICAgICAgcmV0dXJuIHluKHQpLlVyKHtcbiAgICAgICAgICAgIHJhbmdlOiBzXG4gICAgICAgIH0sIChmdW5jdGlvbih0LCBlLCBvKSB7XG4gICAgICAgICAgICB2YXIgcyA9IHRbMF0sIGEgPSB0WzFdLCBoID0gdFsyXSwgYyA9IEZlKGEpO1xuICAgICAgICAgICAgcyA9PT0gbi51c2VySWQgJiYgci5xKGMpID8gXG4gICAgICAgICAgICAvLyBSb3dzIHdpdGggZG9jdW1lbnQga2V5cyBtb3JlIHRoYW4gb25lIHNlZ21lbnQgbG9uZ2VyIHRoYW4gdGhlXG4gICAgICAgICAgICAvLyBxdWVyeSBwYXRoIGNhbid0IGJlIG1hdGNoZXMuIEZvciBleGFtcGxlLCBhIHF1ZXJ5IG9uICdyb29tcydcbiAgICAgICAgICAgIC8vIGNhbid0IG1hdGNoIHRoZSBkb2N1bWVudCAvcm9vbXMvYWJjL21lc3NhZ2VzL3h5eC5cbiAgICAgICAgICAgIC8vIFRPRE8obWNnKTogd2UnbGwgbmVlZCBhIGRpZmZlcmVudCBzY2FubmVyIHdoZW4gd2UgaW1wbGVtZW50XG4gICAgICAgICAgICAvLyBhbmNlc3RvciBxdWVyaWVzLlxuICAgICAgICAgICAgYy5sZW5ndGggPT09IGkgJiYgKHUgPSB1LmFkZChoKSkgOiBvLmRvbmUoKTtcbiAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG4ubmEodCwgdSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5uYSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLCByID0gW10sIGkgPSBbXTtcbiAgICAgICAgLy8gVE9ETyhyb2Nrd29vZCk6IEltcGxlbWVudCB0aGlzIHVzaW5nIGl0ZXJhdGUuXG4gICAgICAgIHJldHVybiBlLmZvckVhY2goKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGkucHVzaChkbih0KS5nZXQoZSkubmV4dCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIGlmIChudWxsID09PSB0KSB0aHJvdyBnZSgpO1xuICAgICAgICAgICAgICAgIG1lKHQudXNlcklkID09PSBuLnVzZXJJZCksIHIucHVzaChuLnNlcmlhbGl6ZXIuTGgodCkpO1xuICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgfSkpLCB4ZS52bihpKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUucmEgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHBuKHQuTWgsIHRoaXMudXNlcklkLCBlKS5uZXh0KChmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICByZXR1cm4gdC5xbigoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgbi5oYShlLmJhdGNoSWQpO1xuICAgICAgICAgICAgfSkpLCB4ZS5mb3JFYWNoKHIsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4uaGguQm8odCwgZSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBDbGVhcnMgdGhlIGNhY2hlZCBrZXlzIGZvciBhIG11dGF0aW9uIGJhdGNoLiBUaGlzIG1ldGhvZCBzaG91bGQgYmVcbiAgICAgKiBjYWxsZWQgYnkgc2Vjb25kYXJ5IGNsaWVudHMgYWZ0ZXIgdGhleSBwcm9jZXNzIG11dGF0aW9uIHVwZGF0ZXMuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgdGhpcyBtZXRob2QgZG9lcyBub3QgaGF2ZSB0byBiZSBjYWxsZWQgZnJvbSBwcmltYXJ5IGNsaWVudHMgYXNcbiAgICAgKiB0aGUgY29ycmVzcG9uZGluZyBjYWNoZSBlbnRyaWVzIGFyZSBjbGVhcmVkIHdoZW4gYW4gYWNrbm93bGVkZ2VkIG9yXG4gICAgICogcmVqZWN0ZWQgYmF0Y2ggaXMgcmVtb3ZlZCBmcm9tIHRoZSBtdXRhdGlvbiBxdWV1ZS5cbiAgICAgKi9cbiAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLXRhYiBvbmx5XG4gICAgdC5wcm90b3R5cGUuaGEgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLktvW3RdO1xuICAgIH0sIHQucHJvdG90eXBlLm9hID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLkdvKHQpLm5leHQoKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIGlmICghbikgcmV0dXJuIHhlLnJlc29sdmUoKTtcbiAgICAgICAgICAgIC8vIFZlcmlmeSB0aGF0IHRoZXJlIGFyZSBubyBlbnRyaWVzIGluIHRoZSBkb2N1bWVudE11dGF0aW9ucyBpbmRleCBpZlxuICAgICAgICAgICAgLy8gdGhlIHF1ZXVlIGlzIGVtcHR5LlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBJREJLZXlSYW5nZS5sb3dlckJvdW5kKFRuLnByZWZpeEZvclVzZXIoZS51c2VySWQpKSwgaSA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuIHluKHQpLlVyKHtcbiAgICAgICAgICAgICAgICByYW5nZTogclxuICAgICAgICAgICAgfSwgKGZ1bmN0aW9uKHQsIG4sIHIpIHtcbiAgICAgICAgICAgICAgICBpZiAodFswXSA9PT0gZS51c2VySWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBGZSh0WzFdKTtcbiAgICAgICAgICAgICAgICAgICAgaS5wdXNoKG8pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSByLmRvbmUoKTtcbiAgICAgICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBtZSgwID09PSBpLmxlbmd0aCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5DaCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIGxuKHQsIHRoaXMudXNlcklkLCBlKTtcbiAgICB9LCBcbiAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLXRhYiBvbmx5IChzdGF0ZSBpcyBoZWxkIGluIG1lbW9yeSBpbiBvdGhlciBjbGllbnRzKS5cbiAgICAvKiogUmV0dXJucyB0aGUgbXV0YXRpb24gcXVldWUncyBtZXRhZGF0YSBmcm9tIEluZGV4ZWREYi4gKi9cbiAgICB0LnByb3RvdHlwZS5IbyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdm4odCkuZ2V0KHRoaXMudXNlcklkKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gdCB8fCBuZXcgYm4oZS51c2VySWQsIC0xLCBcbiAgICAgICAgICAgIC8qbGFzdFN0cmVhbVRva2VuPSovIFwiXCIpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdDtcbn0oKTtcblxuLyoqXG4gKiBAcmV0dXJuIHRydWUgaWYgdGhlIG11dGF0aW9uIHF1ZXVlIGZvciB0aGUgZ2l2ZW4gdXNlciBjb250YWlucyBhIHBlbmRpbmdcbiAqICAgICAgICAgbXV0YXRpb24gZm9yIHRoZSBnaXZlbiBrZXkuXG4gKi8gZnVuY3Rpb24gbG4odCwgZSwgbikge1xuICAgIHZhciByID0gVG4ucHJlZml4Rm9yUGF0aChlLCBuLnBhdGgpLCBpID0gclsxXSwgbyA9IElEQktleVJhbmdlLmxvd2VyQm91bmQociksIHMgPSAhMTtcbiAgICByZXR1cm4geW4odCkuVXIoe1xuICAgICAgICByYW5nZTogbyxcbiAgICAgICAgRGg6ICEwXG4gICAgfSwgKGZ1bmN0aW9uKHQsIG4sIHIpIHtcbiAgICAgICAgdmFyIG8gPSB0WzBdLCB1ID0gdFsxXTtcbiAgICAgICAgdFsyXTtcbiAgICAgICAgbyA9PT0gZSAmJiB1ID09PSBpICYmIChzID0gITApLCByLmRvbmUoKTtcbiAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzO1xuICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gcG4odCwgZSwgbikge1xuICAgIHZhciByID0gdC5zdG9yZShfbi5zdG9yZSksIGkgPSB0LnN0b3JlKFRuLnN0b3JlKSwgbyA9IFtdLCBzID0gSURCS2V5UmFuZ2Uub25seShuLmJhdGNoSWQpLCB1ID0gMCwgYSA9IHIuVXIoe1xuICAgICAgICByYW5nZTogc1xuICAgIH0sIChmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiB1KyssIG4uZGVsZXRlKCk7XG4gICAgfSkpO1xuICAgIG8ucHVzaChhLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICBtZSgxID09PSB1KTtcbiAgICB9KSkpO1xuICAgIGZvciAodmFyIGggPSBbXSwgYyA9IDAsIGYgPSBuLm11dGF0aW9uczsgYyA8IGYubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgdmFyIGwgPSBmW2NdLCBwID0gVG4ua2V5KGUsIGwua2V5LnBhdGgsIG4uYmF0Y2hJZCk7XG4gICAgICAgIG8ucHVzaChpLmRlbGV0ZShwKSksIGgucHVzaChsLmtleSk7XG4gICAgfVxuICAgIHJldHVybiB4ZS52bihvKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGg7XG4gICAgfSkpO1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgbXV0YXRpb25zIG9iamVjdCBzdG9yZS5cbiAqLyBmdW5jdGlvbiBkbih0KSB7XG4gICAgcmV0dXJuIHNuLk5yKHQsIF9uLnN0b3JlKTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIG11dGF0aW9uUXVldWVzIG9iamVjdCBzdG9yZS5cbiAqLyBmdW5jdGlvbiB5bih0KSB7XG4gICAgcmV0dXJuIHNuLk5yKHQsIFRuLnN0b3JlKTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIG11dGF0aW9uUXVldWVzIG9iamVjdCBzdG9yZS5cbiAqLyBmdW5jdGlvbiB2bih0KSB7XG4gICAgcmV0dXJuIHNuLk5yKHQsIGJuLnN0b3JlKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogU2NoZW1hIFZlcnNpb24gZm9yIHRoZSBXZWIgY2xpZW50OlxuICogMS4gIEluaXRpYWwgdmVyc2lvbiBpbmNsdWRpbmcgTXV0YXRpb24gUXVldWUsIFF1ZXJ5IENhY2hlLCBhbmQgUmVtb3RlXG4gKiAgICAgRG9jdW1lbnQgQ2FjaGVcbiAqIDIuICBVc2VkIHRvIGVuc3VyZSBhIHRhcmdldEdsb2JhbCBvYmplY3QgZXhpc3RzIGFuZCBhZGQgdGFyZ2V0Q291bnQgdG8gaXQuIE5vXG4gKiAgICAgbG9uZ2VyIHJlcXVpcmVkIGJlY2F1c2UgbWlncmF0aW9uIDMgdW5jb25kaXRpb25hbGx5IGNsZWFycyBpdC5cbiAqIDMuICBEcm9wcGVkIGFuZCByZS1jcmVhdGVkIFF1ZXJ5IENhY2hlIHRvIGRlYWwgd2l0aCBjYWNoZSBjb3JydXB0aW9uIHJlbGF0ZWRcbiAqICAgICB0byBsaW1ibyByZXNvbHV0aW9uLiBBZGRyZXNzZXNcbiAqICAgICBodHRwczovL2dpdGh1Yi5jb20vZmlyZWJhc2UvZmlyZWJhc2UtaW9zLXNkay9pc3N1ZXMvMTU0OFxuICogNC4gIE11bHRpLVRhYiBTdXBwb3J0LlxuICogNS4gIFJlbW92YWwgb2YgaGVsZCB3cml0ZSBhY2tzLlxuICogNi4gIENyZWF0ZSBkb2N1bWVudCBnbG9iYWwgZm9yIHRyYWNraW5nIGRvY3VtZW50IGNhY2hlIHNpemUuXG4gKiA3LiAgRW5zdXJlIGV2ZXJ5IGNhY2hlZCBkb2N1bWVudCBoYXMgYSBzZW50aW5lbCByb3cgd2l0aCBhIHNlcXVlbmNlIG51bWJlci5cbiAqIDguICBBZGQgY29sbGVjdGlvbi1wYXJlbnQgaW5kZXggZm9yIENvbGxlY3Rpb24gR3JvdXAgcXVlcmllcy5cbiAqIDkuICBDaGFuZ2UgUmVtb3RlRG9jdW1lbnRDaGFuZ2VzIHN0b3JlIHRvIGJlIGtleWVkIGJ5IHJlYWRUaW1lIHJhdGhlciB0aGFuXG4gKiAgICAgYW4gYXV0by1pbmNyZW1lbnRpbmcgSUQuIFRoaXMgaXMgcmVxdWlyZWQgZm9yIEluZGV4LUZyZWUgcXVlcmllcy5cbiAqIDEwLiBSZXdyaXRlIHRoZSBjYW5vbmljYWwgSURzIHRvIHRoZSBleHBsaWNpdCBQcm90b2J1Zi1iYXNlZCBmb3JtYXQuXG4gKi8gdmFyIGduID0gMTAsIG1uID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdGhpcy5zZXJpYWxpemVyID0gdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgZGF0YWJhc2UgY3JlYXRpb24gYW5kIHNjaGVtYSB1cGdyYWRlcy5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCBpbiBwcm9kdWN0aW9uLCB0aGlzIG1ldGhvZCBpcyBvbmx5IGV2ZXIgdXNlZCB0byB1cGdyYWRlIHRoZSBzY2hlbWFcbiAgICAgKiB0byBTQ0hFTUFfVkVSU0lPTi4gRGlmZmVyZW50IHZhbHVlcyBvZiB0b1ZlcnNpb24gYXJlIG9ubHkgdXNlZCBmb3IgdGVzdGluZ1xuICAgICAqIGFuZCBsb2NhbCBmZWF0dXJlIGRldmVsb3BtZW50LlxuICAgICAqLyAgICByZXR1cm4gdC5wcm90b3R5cGUuY3JlYXRlT3JVcGdyYWRlID0gZnVuY3Rpb24odCwgZSwgbiwgcikge1xuICAgICAgICB2YXIgaSA9IHRoaXM7XG4gICAgICAgIG1lKG4gPCByICYmIG4gPj0gMCAmJiByIDw9IGduKTtcbiAgICAgICAgdmFyIG8gPSBuZXcgTW4oZSk7XG4gICAgICAgIG4gPCAxICYmIHIgPj0gMSAmJiAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdC5jcmVhdGVPYmplY3RTdG9yZShFbi5zdG9yZSk7XG4gICAgICAgIH0odCksIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHQuY3JlYXRlT2JqZWN0U3RvcmUoYm4uc3RvcmUsIHtcbiAgICAgICAgICAgICAgICBrZXlQYXRoOiBibi5rZXlQYXRoXG4gICAgICAgICAgICB9KSwgdC5jcmVhdGVPYmplY3RTdG9yZShfbi5zdG9yZSwge1xuICAgICAgICAgICAgICAgIGtleVBhdGg6IF9uLmtleVBhdGgsXG4gICAgICAgICAgICAgICAgYXV0b0luY3JlbWVudDogITBcbiAgICAgICAgICAgIH0pLmNyZWF0ZUluZGV4KF9uLnVzZXJNdXRhdGlvbnNJbmRleCwgX24udXNlck11dGF0aW9uc0tleVBhdGgsIHtcbiAgICAgICAgICAgICAgICB1bmlxdWU6ICEwXG4gICAgICAgICAgICB9KSwgdC5jcmVhdGVPYmplY3RTdG9yZShUbi5zdG9yZSk7XG4gICAgICAgIH0odCksIExuKHQpLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB0LmNyZWF0ZU9iamVjdFN0b3JlKEFuLnN0b3JlKTtcbiAgICAgICAgfSh0KSk7XG4gICAgICAgIC8vIE1pZ3JhdGlvbiAyIHRvIHBvcHVsYXRlIHRoZSB0YXJnZXRHbG9iYWwgb2JqZWN0IG5vIGxvbmdlciBuZWVkZWQgc2luY2VcbiAgICAgICAgLy8gbWlncmF0aW9uIDMgdW5jb25kaXRpb25hbGx5IGNsZWFycyBpdC5cbiAgICAgICAgdmFyIHMgPSB4ZS5yZXNvbHZlKCk7XG4gICAgICAgIHJldHVybiBuIDwgMyAmJiByID49IDMgJiYgKFxuICAgICAgICAvLyBCcmFuZCBuZXcgY2xpZW50cyBkb24ndCBuZWVkIHRvIGRyb3AgYW5kIHJlY3JlYXRlLS1vbmx5IGNsaWVudHMgdGhhdFxuICAgICAgICAvLyBwb3RlbnRpYWxseSBoYXZlIGNvcnJ1cHQgZGF0YS5cbiAgICAgICAgMCAhPT0gbiAmJiAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdC5kZWxldGVPYmplY3RTdG9yZSh4bi5zdG9yZSksIHQuZGVsZXRlT2JqZWN0U3RvcmUoRG4uc3RvcmUpLCB0LmRlbGV0ZU9iamVjdFN0b3JlKFNuLnN0b3JlKTtcbiAgICAgICAgfSh0KSwgTG4odCkpLCBzID0gcy5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIHRhcmdldCBnbG9iYWwgc2luZ2xldG9uIHJvdy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7SURCVHJhbnNhY3Rpb259IHR4biBUaGUgdmVyc2lvbiB1cGdyYWRlIHRyYW5zYWN0aW9uIGZvciBpbmRleGVkZGJcbiAgICAgKi9cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSB0LnN0b3JlKFNuLnN0b3JlKSwgbiA9IG5ldyBTbihcbiAgICAgICAgICAgICAgICAvKmhpZ2hlc3RUYXJnZXRJZD0qLyAwLCBcbiAgICAgICAgICAgICAgICAvKmxhc3RMaXN0ZW5TZXF1ZW5jZU51bWJlcj0qLyAwLCBnLm1pbigpLkMoKSwgXG4gICAgICAgICAgICAgICAgLyp0YXJnZXRDb3VudD0qLyAwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5wdXQoU24ua2V5LCBuKTtcbiAgICAgICAgICAgIH0obyk7XG4gICAgICAgIH0pKSksIG4gPCA0ICYmIHIgPj0gNCAmJiAoMCAhPT0gbiAmJiAoXG4gICAgICAgIC8vIFNjaGVtYSB2ZXJzaW9uIDMgdXNlcyBhdXRvLWdlbmVyYXRlZCBrZXlzIHRvIGdlbmVyYXRlIGdsb2JhbGx5IHVuaXF1ZVxuICAgICAgICAvLyBtdXRhdGlvbiBiYXRjaCBJRHMgKHRoaXMgd2FzIHByZXZpb3VzbHkgZW5zdXJlZCBpbnRlcm5hbGx5IGJ5IHRoZVxuICAgICAgICAvLyBjbGllbnQpLiBUbyBtaWdyYXRlIHRvIHRoZSBuZXcgc2NoZW1hLCB3ZSBoYXZlIHRvIHJlYWQgYWxsIG11dGF0aW9uc1xuICAgICAgICAvLyBhbmQgd3JpdGUgdGhlbSBiYWNrIG91dC4gV2UgcHJlc2VydmUgdGhlIGV4aXN0aW5nIGJhdGNoIElEcyB0byBndWFyYW50ZWVcbiAgICAgICAgLy8gY29uc2lzdGVuY3kgd2l0aCBvdGhlciBvYmplY3Qgc3RvcmVzLiBBbnkgZnVydGhlciBtdXRhdGlvbiBiYXRjaCBJRHMgd2lsbFxuICAgICAgICAvLyBiZSBhdXRvLWdlbmVyYXRlZC5cbiAgICAgICAgcyA9IHMubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLnN0b3JlKF9uLnN0b3JlKS5GcigpLm5leHQoKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgdC5kZWxldGVPYmplY3RTdG9yZShfbi5zdG9yZSksIHQuY3JlYXRlT2JqZWN0U3RvcmUoX24uc3RvcmUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleVBhdGg6IF9uLmtleVBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvSW5jcmVtZW50OiAhMFxuICAgICAgICAgICAgICAgICAgICB9KS5jcmVhdGVJbmRleChfbi51c2VyTXV0YXRpb25zSW5kZXgsIF9uLnVzZXJNdXRhdGlvbnNLZXlQYXRoLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bmlxdWU6ICEwXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgciA9IGUuc3RvcmUoX24uc3RvcmUpLCBpID0gbi5tYXAoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByLnB1dCh0KTtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geGUudm4oaSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSh0LCBvKTtcbiAgICAgICAgfSkpKSwgcyA9IHMubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAhZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHQuY3JlYXRlT2JqZWN0U3RvcmUoT24uc3RvcmUsIHtcbiAgICAgICAgICAgICAgICAgICAga2V5UGF0aDogT24ua2V5UGF0aFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSh0KTtcbiAgICAgICAgfSkpKSwgbiA8IDUgJiYgciA+PSA1ICYmIChzID0gcy5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBpLnJlbW92ZUFja25vd2xlZGdlZE11dGF0aW9ucyhvKTtcbiAgICAgICAgfSkpKSwgbiA8IDYgJiYgciA+PSA2ICYmIChzID0gcy5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdC5jcmVhdGVPYmplY3RTdG9yZShrbi5zdG9yZSk7XG4gICAgICAgICAgICB9KHQpLCBpLmFkZERvY3VtZW50R2xvYmFsKG8pO1xuICAgICAgICB9KSkpLCBuIDwgNyAmJiByID49IDcgJiYgKHMgPSBzLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGkuZW5zdXJlU2VxdWVuY2VOdW1iZXJzKG8pO1xuICAgICAgICB9KSkpLCBuIDwgOCAmJiByID49IDggJiYgKHMgPSBzLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGkuY3JlYXRlQ29sbGVjdGlvblBhcmVudEluZGV4KHQsIG8pO1xuICAgICAgICB9KSkpLCBuIDwgOSAmJiByID49IDkgJiYgKHMgPSBzLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gTXVsdGktVGFiIHVzZWQgdG8gbWFuYWdlIGl0cyBvd24gY2hhbmdlbG9nLCBidXQgdGhpcyBoYXMgYmVlbiBtb3ZlZFxuICAgICAgICAgICAgLy8gdG8gdGhlIERiUmVtb3RlRG9jdW1lbnQgb2JqZWN0IHN0b3JlIGl0c2VsZi4gU2luY2UgdGhlIHByZXZpb3VzIGNoYW5nZVxuICAgICAgICAgICAgLy8gbG9nIG9ubHkgY29udGFpbmVkIHRyYW5zaWVudCBkYXRhLCB3ZSBjYW4gZHJvcCBpdHMgb2JqZWN0IHN0b3JlLlxuICAgICAgICAgICAgIWZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICB0Lm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoXCJyZW1vdGVEb2N1bWVudENoYW5nZXNcIikgJiYgdC5kZWxldGVPYmplY3RTdG9yZShcInJlbW90ZURvY3VtZW50Q2hhbmdlc1wiKTtcbiAgICAgICAgICAgIH0odCksIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IHQub2JqZWN0U3RvcmUoQW4uc3RvcmUpO1xuICAgICAgICAgICAgICAgIGUuY3JlYXRlSW5kZXgoQW4ucmVhZFRpbWVJbmRleCwgQW4ucmVhZFRpbWVJbmRleFBhdGgsIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pcXVlOiAhMVxuICAgICAgICAgICAgICAgIH0pLCBlLmNyZWF0ZUluZGV4KEFuLmNvbGxlY3Rpb25SZWFkVGltZUluZGV4LCBBbi5jb2xsZWN0aW9uUmVhZFRpbWVJbmRleFBhdGgsIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pcXVlOiAhMVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfShlKTtcbiAgICAgICAgfSkpKSwgbiA8IDEwICYmIHIgPj0gMTAgJiYgKHMgPSBzLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGkucmV3cml0ZUNhbm9uaWNhbElkcyhvKTtcbiAgICAgICAgfSkpKSwgcztcbiAgICB9LCB0LnByb3RvdHlwZS5hZGREb2N1bWVudEdsb2JhbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSAwO1xuICAgICAgICByZXR1cm4gdC5zdG9yZShBbi5zdG9yZSkuVXIoKGZ1bmN0aW9uKHQsIG4pIHtcbiAgICAgICAgICAgIGUgKz0gSmUobik7XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBuID0gbmV3IGtuKGUpO1xuICAgICAgICAgICAgcmV0dXJuIHQuc3RvcmUoa24uc3RvcmUpLnB1dChrbi5rZXksIG4pO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUucmVtb3ZlQWNrbm93bGVkZ2VkTXV0YXRpb25zID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMsIG4gPSB0LnN0b3JlKGJuLnN0b3JlKSwgciA9IHQuc3RvcmUoX24uc3RvcmUpO1xuICAgICAgICByZXR1cm4gbi5GcigpLm5leHQoKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIHJldHVybiB4ZS5mb3JFYWNoKG4sIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBJREJLZXlSYW5nZS5ib3VuZChbIG4udXNlcklkLCAtMSBdLCBbIG4udXNlcklkLCBuLmxhc3RBY2tub3dsZWRnZWRCYXRjaElkIF0pO1xuICAgICAgICAgICAgICAgIHJldHVybiByLkZyKF9uLnVzZXJNdXRhdGlvbnNJbmRleCwgaSkubmV4dCgoZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geGUuZm9yRWFjaChyLCAoZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWUoci51c2VySWQgPT09IG4udXNlcklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gZS5zZXJpYWxpemVyLkxoKHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBuKHQsIG4udXNlcklkLCBpKS5uZXh0KChmdW5jdGlvbigpIHt9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBFbnN1cmVzIHRoYXQgZXZlcnkgZG9jdW1lbnQgaW4gdGhlIHJlbW90ZSBkb2N1bWVudCBjYWNoZSBoYXMgYSBjb3JyZXNwb25kaW5nIHNlbnRpbmVsIHJvd1xuICAgICAqIHdpdGggYSBzZXF1ZW5jZSBudW1iZXIuIE1pc3Npbmcgcm93cyBhcmUgZ2l2ZW4gdGhlIG1vc3QgcmVjZW50bHkgdXNlZCBzZXF1ZW5jZSBudW1iZXIuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuZW5zdXJlU2VxdWVuY2VOdW1iZXJzID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHQuc3RvcmUoeG4uc3RvcmUpLCBuID0gdC5zdG9yZShBbi5zdG9yZSk7XG4gICAgICAgIHJldHVybiB0LnN0b3JlKFNuLnN0b3JlKS5nZXQoU24ua2V5KS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB2YXIgciA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuIG4uVXIoKGZ1bmN0aW9uKG4sIGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbyA9IG5ldyB3KG4pLCBzID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAwLCBxZSh0KSBdO1xuICAgICAgICAgICAgICAgIH0obyk7XG4gICAgICAgICAgICAgICAgci5wdXNoKGUuZ2V0KHMpLm5leHQoKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4gPyB4ZS5yZXNvbHZlKCkgOiBmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5wdXQobmV3IHhuKDAsIHFlKG4pLCB0LmhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlcikpO1xuICAgICAgICAgICAgICAgICAgICB9KG8pO1xuICAgICAgICAgICAgICAgIH0pKSk7XG4gICAgICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHhlLnZuKHIpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuY3JlYXRlQ29sbGVjdGlvblBhcmVudEluZGV4ID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAvLyBDcmVhdGUgdGhlIGluZGV4LlxuICAgICAgICB0LmNyZWF0ZU9iamVjdFN0b3JlKFJuLnN0b3JlLCB7XG4gICAgICAgICAgICBrZXlQYXRoOiBSbi5rZXlQYXRoXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgbiA9IGUuc3RvcmUoUm4uc3RvcmUpLCByID0gbmV3IHplLCBpID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgaWYgKHIuYWRkKHQpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSB0Lk8oKSwgaSA9IHQuTCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuLnB1dCh7XG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25JZDogZSxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBxZShpKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBIZWxwZXIgdG8gYWRkIGFuIGluZGV4IGVudHJ5IGlmZiB3ZSBoYXZlbid0IGFscmVhZHkgd3JpdHRlbiBpdC5cbiAgICAgICAgLy8gSW5kZXggZXhpc3RpbmcgcmVtb3RlIGRvY3VtZW50cy5cbiAgICAgICAgICAgICAgICByZXR1cm4gZS5zdG9yZShBbi5zdG9yZSkuVXIoe1xuICAgICAgICAgICAgRGg6ICEwXG4gICAgICAgIH0sIChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICB2YXIgbiA9IG5ldyB3KHQpO1xuICAgICAgICAgICAgcmV0dXJuIGkobi5MKCkpO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZS5zdG9yZShUbi5zdG9yZSkuVXIoe1xuICAgICAgICAgICAgICAgIERoOiAhMFxuICAgICAgICAgICAgfSwgKGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgICAgICB0WzBdO1xuICAgICAgICAgICAgICAgIHZhciBuID0gdFsxXSwgciA9ICh0WzJdLCBGZShuKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGkoci5MKCkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUucmV3cml0ZUNhbm9uaWNhbElkcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLCBuID0gdC5zdG9yZShEbi5zdG9yZSk7XG4gICAgICAgIHJldHVybiBuLlVyKChmdW5jdGlvbih0LCByKSB7XG4gICAgICAgICAgICB2YXIgaSA9IGUuc2VyaWFsaXplci5taChyKSwgbyA9IGUuc2VyaWFsaXplci5QaChpKTtcbiAgICAgICAgICAgIHJldHVybiBuLnB1dChvKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQ7XG59KCksIHduID0gZnVuY3Rpb24odCwgZSkge1xuICAgIHRoaXMuc2Vjb25kcyA9IHQsIHRoaXMubmFub3NlY29uZHMgPSBlO1xufSwgRW4gPSBmdW5jdGlvbih0LCBcbi8qKiBXaGV0aGVyIHRvIGFsbG93IHNoYXJlZCBhY2Nlc3MgZnJvbSBtdWx0aXBsZSB0YWJzLiAqL1xuZSwgbikge1xuICAgIHRoaXMub3duZXJJZCA9IHQsIHRoaXMuYWxsb3dUYWJTeW5jaHJvbml6YXRpb24gPSBlLCB0aGlzLmxlYXNlVGltZXN0YW1wTXMgPSBuO1xufTtcblxuLyoqIFBlcmZvcm1zIGRhdGFiYXNlIGNyZWF0aW9uIGFuZCBzY2hlbWEgdXBncmFkZXMuICovXG4vKipcbiAqIE5hbWUgb2YgdGhlIEluZGV4ZWREYiBvYmplY3Qgc3RvcmUuXG4gKlxuICogTm90ZSB0aGF0IHRoZSBuYW1lICdvd25lcicgaXMgY2hvc2VuIHRvIGVuc3VyZSBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoXG4gKiBvbGRlciBjbGllbnRzIHRoYXQgb25seSBzdXBwb3J0ZWQgc2luZ2xlIGxvY2tlZCBhY2Nlc3MgdG8gdGhlIHBlcnNpc3RlbmNlXG4gKiBsYXllci5cbiAqL1xuRW4uc3RvcmUgPSBcIm93bmVyXCIsIFxuLyoqXG4gICAgICogVGhlIGtleSBzdHJpbmcgdXNlZCBmb3IgdGhlIHNpbmdsZSBvYmplY3QgdGhhdCBleGlzdHMgaW4gdGhlXG4gICAgICogRGJQcmltYXJ5Q2xpZW50IHN0b3JlLlxuICAgICAqL1xuRW4ua2V5ID0gXCJvd25lclwiO1xuXG52YXIgYm4gPSBmdW5jdGlvbihcbi8qKlxuICAgICAqIFRoZSBub3JtYWxpemVkIHVzZXIgSUQgdG8gd2hpY2ggdGhpcyBxdWV1ZSBiZWxvbmdzLlxuICAgICAqL1xudCwgXG4vKipcbiAgICAgKiBBbiBpZGVudGlmaWVyIGZvciB0aGUgaGlnaGVzdCBudW1iZXJlZCBiYXRjaCB0aGF0IGhhcyBiZWVuIGFja25vd2xlZGdlZFxuICAgICAqIGJ5IHRoZSBzZXJ2ZXIuIEFsbCBNdXRhdGlvbkJhdGNoZXMgaW4gdGhpcyBxdWV1ZSB3aXRoIGJhdGNoSWRzIGxlc3NcbiAgICAgKiB0aGFuIG9yIGVxdWFsIHRvIHRoaXMgdmFsdWUgYXJlIGNvbnNpZGVyZWQgdG8gaGF2ZSBiZWVuIGFja25vd2xlZGdlZCBieVxuICAgICAqIHRoZSBzZXJ2ZXIuXG4gICAgICpcbiAgICAgKiBOT1RFOiB0aGlzIGlzIGRlcHJlY2F0ZWQgYW5kIG5vIGxvbmdlciB1c2VkIGJ5IHRoZSBjb2RlLlxuICAgICAqL1xuZSwgXG4vKipcbiAgICAgKiBBIHN0cmVhbSB0b2tlbiB0aGF0IHdhcyBwcmV2aW91c2x5IHNlbnQgYnkgdGhlIHNlcnZlci5cbiAgICAgKlxuICAgICAqIFNlZSBTdHJlYW1pbmdXcml0ZVJlcXVlc3QgaW4gZGF0YXN0b3JlLnByb3RvIGZvciBtb3JlIGRldGFpbHMgYWJvdXRcbiAgICAgKiB1c2FnZS5cbiAgICAgKlxuICAgICAqIEFmdGVyIHNlbmRpbmcgdGhpcyB0b2tlbiwgZWFybGllciB0b2tlbnMgbWF5IG5vdCBiZSB1c2VkIGFueW1vcmUgc29cbiAgICAgKiBvbmx5IGEgc2luZ2xlIHN0cmVhbSB0b2tlbiBpcyByZXRhaW5lZC5cbiAgICAgKi9cbm4pIHtcbiAgICB0aGlzLnVzZXJJZCA9IHQsIHRoaXMubGFzdEFja25vd2xlZGdlZEJhdGNoSWQgPSBlLCB0aGlzLmxhc3RTdHJlYW1Ub2tlbiA9IG47XG59O1xuXG4vKiogTmFtZSBvZiB0aGUgSW5kZXhlZERiIG9iamVjdCBzdG9yZS4gICovIGJuLnN0b3JlID0gXCJtdXRhdGlvblF1ZXVlc1wiLCBcbi8qKiBLZXlzIGFyZSBhdXRvbWF0aWNhbGx5IGFzc2lnbmVkIHZpYSB0aGUgdXNlcklkIHByb3BlcnR5LiAqL1xuYm4ua2V5UGF0aCA9IFwidXNlcklkXCI7XG5cbi8qKlxuICogQW4gb2JqZWN0IHRvIGJlIHN0b3JlZCBpbiB0aGUgJ211dGF0aW9ucycgc3RvcmUgaW4gSW5kZXhlZERiLlxuICpcbiAqIFJlcHJlc2VudHMgYSBiYXRjaCBvZiB1c2VyLWxldmVsIG11dGF0aW9ucyBpbnRlbmRlZCB0byBiZSBzZW50IHRvIHRoZSBzZXJ2ZXJcbiAqIGluIGEgc2luZ2xlIHdyaXRlLiBFYWNoIHVzZXItbGV2ZWwgYmF0Y2ggZ2V0cyBhIHNlcGFyYXRlIERiTXV0YXRpb25CYXRjaFxuICogd2l0aCBhIG5ldyBiYXRjaElkLlxuICovXG52YXIgX24gPSBmdW5jdGlvbihcbi8qKlxuICAgICAqIFRoZSBub3JtYWxpemVkIHVzZXIgSUQgdG8gd2hpY2ggdGhpcyBiYXRjaCBiZWxvbmdzLlxuICAgICAqL1xudCwgXG4vKipcbiAgICAgKiBBbiBpZGVudGlmaWVyIGZvciB0aGlzIGJhdGNoLCBhbGxvY2F0ZWQgdXNpbmcgYW4gYXV0by1nZW5lcmF0ZWQga2V5LlxuICAgICAqL1xuZSwgXG4vKipcbiAgICAgKiBUaGUgbG9jYWwgd3JpdGUgdGltZSBvZiB0aGUgYmF0Y2gsIHN0b3JlZCBhcyBtaWxsaXNlY29uZHMgc2luY2UgdGhlXG4gICAgICogZXBvY2guXG4gICAgICovXG5uLCBcbi8qKlxuICAgICAqIEEgbGlzdCBvZiBcIm11dGF0aW9uc1wiIHRoYXQgcmVwcmVzZW50IGEgcGFydGlhbCBiYXNlIHN0YXRlIGZyb20gd2hlbiB0aGlzXG4gICAgICogd3JpdGUgYmF0Y2ggd2FzIGluaXRpYWxseSBjcmVhdGVkLiBEdXJpbmcgbG9jYWwgYXBwbGljYXRpb24gb2YgdGhlIHdyaXRlXG4gICAgICogYmF0Y2gsIHRoZXNlIGJhc2VNdXRhdGlvbnMgYXJlIGFwcGxpZWQgcHJpb3IgdG8gdGhlIHJlYWwgd3JpdGVzIGluIG9yZGVyXG4gICAgICogdG8gb3ZlcnJpZGUgY2VydGFpbiBkb2N1bWVudCBmaWVsZHMgZnJvbSB0aGUgcmVtb3RlIGRvY3VtZW50IGNhY2hlLiBUaGlzXG4gICAgICogaXMgbmVjZXNzYXJ5IGluIHRoZSBjYXNlIG9mIG5vbi1pZGVtcG90ZW50IHdyaXRlcyAoZS5nLiBgaW5jcmVtZW50KClgXG4gICAgICogdHJhbnNmb3JtcykgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGxvY2FsIHZpZXcgb2YgdGhlIG1vZGlmaWVkIGRvY3VtZW50c1xuICAgICAqIGRvZXNuJ3QgZmxpY2tlciBpZiB0aGUgcmVtb3RlIGRvY3VtZW50IGNhY2hlIHJlY2VpdmVzIHRoZSByZXN1bHQgb2YgdGhlXG4gICAgICogbm9uLWlkZW1wb3RlbnQgd3JpdGUgYmVmb3JlIHRoZSB3cml0ZSBpcyByZW1vdmVkIGZyb20gdGhlIHF1ZXVlLlxuICAgICAqXG4gICAgICogVGhlc2UgbXV0YXRpb25zIGFyZSBuZXZlciBzZW50IHRvIHRoZSBiYWNrZW5kLlxuICAgICAqL1xuciwgXG4vKipcbiAgICAgKiBBIGxpc3Qgb2YgbXV0YXRpb25zIHRvIGFwcGx5LiBBbGwgbXV0YXRpb25zIHdpbGwgYmUgYXBwbGllZCBhdG9taWNhbGx5LlxuICAgICAqXG4gICAgICogTXV0YXRpb25zIGFyZSBzZXJpYWxpemVkIHZpYSBKc29uUHJvdG9TZXJpYWxpemVyLnRvTXV0YXRpb24oKS5cbiAgICAgKi9cbmkpIHtcbiAgICB0aGlzLnVzZXJJZCA9IHQsIHRoaXMuYmF0Y2hJZCA9IGUsIHRoaXMubG9jYWxXcml0ZVRpbWVNcyA9IG4sIHRoaXMuYmFzZU11dGF0aW9ucyA9IHIsIFxuICAgIHRoaXMubXV0YXRpb25zID0gaTtcbn07XG5cbi8qKiBOYW1lIG9mIHRoZSBJbmRleGVkRGIgb2JqZWN0IHN0b3JlLiAgKi8gX24uc3RvcmUgPSBcIm11dGF0aW9uc1wiLCBcbi8qKiBLZXlzIGFyZSBhdXRvbWF0aWNhbGx5IGFzc2lnbmVkIHZpYSB0aGUgdXNlcklkLCBiYXRjaElkIHByb3BlcnRpZXMuICovXG5fbi5rZXlQYXRoID0gXCJiYXRjaElkXCIsIFxuLyoqIFRoZSBpbmRleCBuYW1lIGZvciBsb29rdXAgb2YgbXV0YXRpb25zIGJ5IHVzZXIuICovXG5fbi51c2VyTXV0YXRpb25zSW5kZXggPSBcInVzZXJNdXRhdGlvbnNJbmRleFwiLCBcbi8qKiBUaGUgdXNlciBtdXRhdGlvbnMgaW5kZXggaXMga2V5ZWQgYnkgW3VzZXJJZCwgYmF0Y2hJZF0gcGFpcnMuICovXG5fbi51c2VyTXV0YXRpb25zS2V5UGF0aCA9IFsgXCJ1c2VySWRcIiwgXCJiYXRjaElkXCIgXTtcblxudmFyIFRuID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KCkge31cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgW3VzZXJJZF0ga2V5IGZvciB1c2UgaW4gdGhlIERiRG9jdW1lbnRNdXRhdGlvbnMgaW5kZXggdG8gaXRlcmF0ZVxuICAgICAqIG92ZXIgYWxsIG9mIGEgdXNlcidzIGRvY3VtZW50IG11dGF0aW9ucy5cbiAgICAgKi8gICAgcmV0dXJuIHQucHJlZml4Rm9yVXNlciA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIFsgdCBdO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBbdXNlcklkLCBlbmNvZGVkUGF0aF0ga2V5IGZvciB1c2UgaW4gdGhlIERiRG9jdW1lbnRNdXRhdGlvbnNcbiAgICAgKiBpbmRleCB0byBpdGVyYXRlIG92ZXIgYWxsIGF0IGRvY3VtZW50IG11dGF0aW9ucyBmb3IgYSBnaXZlbiBwYXRoIG9yIGxvd2VyLlxuICAgICAqL1xuICAgIHQucHJlZml4Rm9yUGF0aCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIFsgdCwgcWUoZSkgXTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVsbCBpbmRleCBrZXkgb2YgW3VzZXJJZCwgZW5jb2RlZFBhdGgsIGJhdGNoSWRdIGZvciBpbnNlcnRpbmdcbiAgICAgKiBhbmQgZGVsZXRpbmcgaW50byB0aGUgRGJEb2N1bWVudE11dGF0aW9ucyBpbmRleC5cbiAgICAgKi9cbiAgICB0LmtleSA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIFsgdCwgcWUoZSksIG4gXTtcbiAgICB9LCB0O1xufSgpO1xuXG5Ubi5zdG9yZSA9IFwiZG9jdW1lbnRNdXRhdGlvbnNcIiwgXG4vKipcbiAgICAgKiBCZWNhdXNlIHdlIHN0b3JlIGFsbCB0aGUgdXNlZnVsIGluZm9ybWF0aW9uIGZvciB0aGlzIHN0b3JlIGluIHRoZSBrZXksXG4gICAgICogdGhlcmUgaXMgbm8gdXNlZnVsIGluZm9ybWF0aW9uIHRvIHN0b3JlIGFzIHRoZSB2YWx1ZS4gVGhlIHJhdyAodW5lbmNvZGVkKVxuICAgICAqIHBhdGggY2Fubm90IGJlIHN0b3JlZCBiZWNhdXNlIEluZGV4ZWREYiBkb2Vzbid0IHN0b3JlIHByb3RvdHlwZVxuICAgICAqIGluZm9ybWF0aW9uLlxuICAgICAqL1xuVG4uUExBQ0VIT0xERVIgPSBuZXcgVG47XG5cbnZhciBJbiA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICB0aGlzLnBhdGggPSB0LCB0aGlzLnJlYWRUaW1lID0gZTtcbn0sIE5uID0gZnVuY3Rpb24odCwgZSkge1xuICAgIHRoaXMucGF0aCA9IHQsIHRoaXMudmVyc2lvbiA9IGU7XG59LCBBbiA9IFxuLy8gVE9ETzogV2UgYXJlIGN1cnJlbnRseSBzdG9yaW5nIGZ1bGwgZG9jdW1lbnQga2V5cyBhbG1vc3QgdGhyZWUgdGltZXNcbi8vIChvbmNlIGFzIHBhcnQgb2YgdGhlIHByaW1hcnkga2V5LCBvbmNlIC0gcGFydGx5IC0gYXMgYHBhcmVudFBhdGhgIGFuZCBvbmNlXG4vLyBpbnNpZGUgdGhlIGVuY29kZWQgZG9jdW1lbnRzKS4gRHVyaW5nIG91ciBuZXh0IG1pZ3JhdGlvbiwgd2Ugc2hvdWxkXG4vLyByZXdyaXRlIHRoZSBwcmltYXJ5IGtleSBhcyBwYXJlbnRQYXRoICsgZG9jdW1lbnQgSUQgd2hpY2ggd291bGQgYWxsb3cgdXNcbi8vIHRvIGRyb3Agb25lIHZhbHVlLlxuZnVuY3Rpb24oXG4vKipcbiAgICAgKiBTZXQgdG8gYW4gaW5zdGFuY2Ugb2YgRGJVbmtub3duRG9jdW1lbnQgaWYgdGhlIGRhdGEgZm9yIGEgZG9jdW1lbnQgaXNcbiAgICAgKiBub3Qga25vd24sIGJ1dCBpdCBpcyBrbm93biB0aGF0IGEgZG9jdW1lbnQgZXhpc3RzIGF0IHRoZSBzcGVjaWZpZWRcbiAgICAgKiB2ZXJzaW9uIChlLmcuIGl0IGhhZCBhIHN1Y2Nlc3NmdWwgdXBkYXRlIGFwcGxpZWQgdG8gaXQpXG4gICAgICovXG50LCBcbi8qKlxuICAgICAqIFNldCB0byBhbiBpbnN0YW5jZSBvZiBhIERiTm9Eb2N1bWVudCBpZiBpdCBpcyBrbm93biB0aGF0IG5vIGRvY3VtZW50XG4gICAgICogZXhpc3RzLlxuICAgICAqL1xuZSwgXG4vKipcbiAgICAgKiBTZXQgdG8gYW4gaW5zdGFuY2Ugb2YgYSBEb2N1bWVudCBpZiB0aGVyZSdzIGEgY2FjaGVkIHZlcnNpb24gb2YgdGhlXG4gICAgICogZG9jdW1lbnQuXG4gICAgICovXG5uLCBcbi8qKlxuICAgICAqIERvY3VtZW50cyB0aGF0IHdlcmUgd3JpdHRlbiB0byB0aGUgcmVtb3RlIGRvY3VtZW50IHN0b3JlIGJhc2VkIG9uXG4gICAgICogYSB3cml0ZSBhY2tub3dsZWRnbWVudCBhcmUgbWFya2VkIHdpdGggYGhhc0NvbW1pdHRlZE11dGF0aW9uc2AuIFRoZXNlXG4gICAgICogZG9jdW1lbnRzIGFyZSBwb3RlbnRpYWxseSBpbmNvbnNpc3RlbnQgd2l0aCB0aGUgYmFja2VuZCdzIGNvcHkgYW5kIHVzZVxuICAgICAqIHRoZSB3cml0ZSdzIGNvbW1pdCB2ZXJzaW9uIGFzIHRoZWlyIGRvY3VtZW50IHZlcnNpb24uXG4gICAgICovXG5yLCBcbi8qKlxuICAgICAqIFdoZW4gdGhlIGRvY3VtZW50IHdhcyByZWFkIGZyb20gdGhlIGJhY2tlbmQuIFVuZGVmaW5lZCBmb3IgZGF0YSB3cml0dGVuXG4gICAgICogcHJpb3IgdG8gc2NoZW1hIHZlcnNpb24gOS5cbiAgICAgKi9cbmksIFxuLyoqXG4gICAgICogVGhlIHBhdGggb2YgdGhlIGNvbGxlY3Rpb24gdGhpcyBkb2N1bWVudCBpcyBwYXJ0IG9mLiBVbmRlZmluZWQgZm9yIGRhdGFcbiAgICAgKiB3cml0dGVuIHByaW9yIHRvIHNjaGVtYSB2ZXJzaW9uIDkuXG4gICAgICovXG5vKSB7XG4gICAgdGhpcy51bmtub3duRG9jdW1lbnQgPSB0LCB0aGlzLm5vRG9jdW1lbnQgPSBlLCB0aGlzLmRvY3VtZW50ID0gbiwgdGhpcy5oYXNDb21taXR0ZWRNdXRhdGlvbnMgPSByLCBcbiAgICB0aGlzLnJlYWRUaW1lID0gaSwgdGhpcy5wYXJlbnRQYXRoID0gbztcbn07XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGRvY3VtZW50IHRoYXQgaXMga25vd24gdG8gZXhpc3QgYnV0IHdob3NlIGRhdGEgaXMgdW5rbm93bi5cbiAqIFN0b3JlZCBpbiBJbmRleGVkRGIgYXMgcGFydCBvZiBhIERiUmVtb3RlRG9jdW1lbnQgb2JqZWN0LlxuICovIEFuLnN0b3JlID0gXCJyZW1vdGVEb2N1bWVudHNcIiwgXG4vKipcbiAgICAgKiBBbiBpbmRleCB0aGF0IHByb3ZpZGVzIGFjY2VzcyB0byBhbGwgZW50cmllcyBzb3J0ZWQgYnkgcmVhZCB0aW1lICh3aGljaFxuICAgICAqIGNvcnJlc3BvbmRzIHRvIHRoZSBsYXN0IG1vZGlmaWNhdGlvbiB0aW1lIG9mIGVhY2ggcm93KS5cbiAgICAgKlxuICAgICAqIFRoaXMgaW5kZXggaXMgdXNlZCB0byBwcm92aWRlIGEgY2hhbmdlbG9nIGZvciBNdWx0aS1UYWIuXG4gICAgICovXG5Bbi5yZWFkVGltZUluZGV4ID0gXCJyZWFkVGltZUluZGV4XCIsIEFuLnJlYWRUaW1lSW5kZXhQYXRoID0gXCJyZWFkVGltZVwiLCBcbi8qKlxuICAgICAqIEFuIGluZGV4IHRoYXQgcHJvdmlkZXMgYWNjZXNzIHRvIGRvY3VtZW50cyBpbiBhIGNvbGxlY3Rpb24gc29ydGVkIGJ5IHJlYWRcbiAgICAgKiB0aW1lLlxuICAgICAqXG4gICAgICogVGhpcyBpbmRleCBpcyB1c2VkIHRvIGFsbG93IHRoZSBSZW1vdGVEb2N1bWVudENhY2hlIHRvIGZldGNoIG5ld2x5IGNoYW5nZWRcbiAgICAgKiBkb2N1bWVudHMgaW4gYSBjb2xsZWN0aW9uLlxuICAgICAqL1xuQW4uY29sbGVjdGlvblJlYWRUaW1lSW5kZXggPSBcImNvbGxlY3Rpb25SZWFkVGltZUluZGV4XCIsIEFuLmNvbGxlY3Rpb25SZWFkVGltZUluZGV4UGF0aCA9IFsgXCJwYXJlbnRQYXRoXCIsIFwicmVhZFRpbWVcIiBdO1xuXG4vKipcbiAqIENvbnRhaW5zIGEgc2luZ2xlIGVudHJ5IHRoYXQgaGFzIG1ldGFkYXRhIGFib3V0IHRoZSByZW1vdGUgZG9jdW1lbnQgY2FjaGUuXG4gKi9cbnZhciBrbiA9IFxuLyoqXG4gICAgICogQHBhcmFtIGJ5dGVTaXplIEFwcHJveGltYXRlbHkgdGhlIHRvdGFsIHNpemUgaW4gYnl0ZXMgb2YgYWxsIHRoZSBkb2N1bWVudHMgaW4gdGhlIGRvY3VtZW50XG4gICAgICogY2FjaGUuXG4gICAgICovXG5mdW5jdGlvbih0KSB7XG4gICAgdGhpcy5ieXRlU2l6ZSA9IHQ7XG59O1xuXG5rbi5zdG9yZSA9IFwicmVtb3RlRG9jdW1lbnRHbG9iYWxcIiwga24ua2V5ID0gXCJyZW1vdGVEb2N1bWVudEdsb2JhbEtleVwiO1xuXG52YXIgRG4gPSBmdW5jdGlvbihcbi8qKlxuICAgICAqIEFuIGF1dG8tZ2VuZXJhdGVkIHNlcXVlbnRpYWwgbnVtZXJpYyBpZGVudGlmaWVyIGZvciB0aGUgcXVlcnkuXG4gICAgICpcbiAgICAgKiBRdWVyaWVzIGFyZSBzdG9yZWQgdXNpbmcgdGhlaXIgY2Fub25pY2FsSWQgYXMgdGhlIGtleSwgYnV0IHRoZXNlXG4gICAgICogY2Fub25pY2FsSWRzIGNhbiBiZSBxdWl0ZSBsb25nIHNvIHdlIGFkZGl0aW9uYWxseSBhc3NpZ24gYSB1bmlxdWVcbiAgICAgKiBxdWVyeUlkIHdoaWNoIGNhbiBiZSB1c2VkIGJ5IHJlZmVyZW5jZWQgZGF0YSBzdHJ1Y3R1cmVzIChlLmcuXG4gICAgICogaW5kZXhlcykgdG8gbWluaW1pemUgdGhlIG9uLWRpc2sgY29zdC5cbiAgICAgKi9cbnQsIFxuLyoqXG4gICAgICogVGhlIGNhbm9uaWNhbCBzdHJpbmcgcmVwcmVzZW50aW5nIHRoaXMgcXVlcnkuIFRoaXMgaXMgbm90IHVuaXF1ZS5cbiAgICAgKi9cbmUsIFxuLyoqXG4gICAgICogVGhlIGxhc3QgcmVhZFRpbWUgcmVjZWl2ZWQgZnJvbSB0aGUgV2F0Y2ggU2VydmljZSBmb3IgdGhpcyBxdWVyeS5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgdGhlIHNhbWUgdmFsdWUgYXMgVGFyZ2V0Q2hhbmdlLnJlYWRfdGltZSBpbiB0aGUgcHJvdG9zLlxuICAgICAqL1xubiwgXG4vKipcbiAgICAgKiBBbiBvcGFxdWUsIHNlcnZlci1hc3NpZ25lZCB0b2tlbiB0aGF0IGFsbG93cyB3YXRjaGluZyBhIHF1ZXJ5IHRvIGJlXG4gICAgICogcmVzdW1lZCBhZnRlciBkaXNjb25uZWN0aW5nIHdpdGhvdXQgcmV0cmFuc21pdHRpbmcgYWxsIHRoZSBkYXRhXG4gICAgICogdGhhdCBtYXRjaGVzIHRoZSBxdWVyeS4gVGhlIHJlc3VtZSB0b2tlbiBlc3NlbnRpYWxseSBpZGVudGlmaWVzIGFcbiAgICAgKiBwb2ludCBpbiB0aW1lIGZyb20gd2hpY2ggdGhlIHNlcnZlciBzaG91bGQgcmVzdW1lIHNlbmRpbmcgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgcmVsYXRlZCB0byB0aGUgc25hcHNob3RWZXJzaW9uIGluIHRoYXQgdGhlIHJlc3VtZVRva2VuXG4gICAgICogZWZmZWN0aXZlbHkgYWxzbyBlbmNvZGVzIHRoYXQgdmFsdWUsIGJ1dCB0aGUgcmVzdW1lVG9rZW4gaXMgb3BhcXVlXG4gICAgICogYW5kIHNvbWV0aW1lcyBlbmNvZGVzIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBBIGNvbnNlcXVlbmNlIG9mIHRoaXMgaXMgdGhhdCB0aGUgcmVzdW1lVG9rZW4gc2hvdWxkIGJlIHVzZWQgd2hlblxuICAgICAqIGFza2luZyB0aGUgc2VydmVyIHRvIHJlYXNvbiBhYm91dCB3aGVyZSB0aGlzIGNsaWVudCBpcyBpbiB0aGUgd2F0Y2hcbiAgICAgKiBzdHJlYW0sIGJ1dCB0aGUgY2xpZW50IHNob3VsZCB1c2UgdGhlIHNuYXBzaG90VmVyc2lvbiBmb3IgaXRzIG93blxuICAgICAqIHB1cnBvc2VzLlxuICAgICAqXG4gICAgICogVGhpcyBpcyB0aGUgc2FtZSB2YWx1ZSBhcyBUYXJnZXRDaGFuZ2UucmVzdW1lX3Rva2VuIGluIHRoZSBwcm90b3MuXG4gICAgICovXG5yLCBcbi8qKlxuICAgICAqIEEgc2VxdWVuY2UgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgbGFzdCB0aW1lIHRoaXMgcXVlcnkgd2FzXG4gICAgICogbGlzdGVuZWQgdG8sIHVzZWQgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbiBwdXJwb3Nlcy5cbiAgICAgKlxuICAgICAqIENvbnZlbnRpb25hbGx5IHRoaXMgd291bGQgYmUgYSB0aW1lc3RhbXAgdmFsdWUsIGJ1dCBkZXZpY2UtbG9jYWxcbiAgICAgKiBjbG9ja3MgYXJlIHVucmVsaWFibGUgYW5kIHRoZXkgbXVzdCBiZSBhYmxlIHRvIGNyZWF0ZSBuZXcgbGlzdGVuc1xuICAgICAqIGV2ZW4gd2hpbGUgZGlzY29ubmVjdGVkLiBJbnN0ZWFkIHRoaXMgc2hvdWxkIGJlIGEgbW9ub3RvbmljYWxseVxuICAgICAqIGluY3JlYXNpbmcgbnVtYmVyIHRoYXQncyBpbmNyZW1lbnRlZCBvbiBlYWNoIGxpc3RlbiBjYWxsLlxuICAgICAqXG4gICAgICogVGhpcyBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgcXVlcnlJZCBzaW5jZSB0aGUgcXVlcnlJZCBpcyBhblxuICAgICAqIGltbXV0YWJsZSBpZGVudGlmaWVyIGFzc2lnbmVkIHRvIHRoZSBRdWVyeSBvbiBmaXJzdCB1c2Ugd2hpbGVcbiAgICAgKiBsYXN0TGlzdGVuU2VxdWVuY2VOdW1iZXIgaXMgdXBkYXRlZCBldmVyeSB0aW1lIHRoZSBxdWVyeSBpc1xuICAgICAqIGxpc3RlbmVkIHRvLlxuICAgICAqL1xuaSwgXG4vKipcbiAgICAgKiBEZW5vdGVzIHRoZSBtYXhpbXVtIHNuYXBzaG90IHZlcnNpb24gYXQgd2hpY2ggdGhlIGFzc29jaWF0ZWQgcXVlcnkgdmlld1xuICAgICAqIGNvbnRhaW5lZCBubyBsaW1ibyBkb2N1bWVudHMuICBVbmRlZmluZWQgZm9yIGRhdGEgd3JpdHRlbiBwcmlvciB0b1xuICAgICAqIHNjaGVtYSB2ZXJzaW9uIDkuXG4gICAgICovXG5vLCBcbi8qKlxuICAgICAqIFRoZSBxdWVyeSBmb3IgdGhpcyB0YXJnZXQuXG4gICAgICpcbiAgICAgKiBCZWNhdXNlIGNhbm9uaWNhbCBpZHMgYXJlIG5vdCB1bmlxdWUgd2UgbXVzdCBzdG9yZSB0aGUgYWN0dWFsIHF1ZXJ5LiBXZVxuICAgICAqIHVzZSB0aGUgcHJvdG8gdG8gaGF2ZSBhbiBvYmplY3Qgd2UgY2FuIHBlcnNpc3Qgd2l0aG91dCBoYXZpbmcgdG9cbiAgICAgKiBkdXBsaWNhdGUgdHJhbnNsYXRpb24gbG9naWMgdG8gYW5kIGZyb20gYSBgUXVlcnlgIG9iamVjdC5cbiAgICAgKi9cbnMpIHtcbiAgICB0aGlzLnRhcmdldElkID0gdCwgdGhpcy5jYW5vbmljYWxJZCA9IGUsIHRoaXMucmVhZFRpbWUgPSBuLCB0aGlzLnJlc3VtZVRva2VuID0gciwgXG4gICAgdGhpcy5sYXN0TGlzdGVuU2VxdWVuY2VOdW1iZXIgPSBpLCB0aGlzLmxhc3RMaW1ib0ZyZWVTbmFwc2hvdFZlcnNpb24gPSBvLCB0aGlzLnF1ZXJ5ID0gcztcbn07XG5cbkRuLnN0b3JlID0gXCJ0YXJnZXRzXCIsIFxuLyoqIEtleXMgYXJlIGF1dG9tYXRpY2FsbHkgYXNzaWduZWQgdmlhIHRoZSB0YXJnZXRJZCBwcm9wZXJ0eS4gKi9cbkRuLmtleVBhdGggPSBcInRhcmdldElkXCIsIFxuLyoqIFRoZSBuYW1lIG9mIHRoZSBxdWVyeVRhcmdldHMgaW5kZXguICovXG5Ebi5xdWVyeVRhcmdldHNJbmRleE5hbWUgPSBcInF1ZXJ5VGFyZ2V0c0luZGV4XCIsIFxuLyoqXG4gICAgICogVGhlIGluZGV4IG9mIGFsbCBjYW5vbmljYWxJZHMgdG8gdGhlIHRhcmdldHMgdGhhdCB0aGV5IG1hdGNoLiBUaGlzIGlzIG5vdFxuICAgICAqIGEgdW5pcXVlIG1hcHBpbmcgYmVjYXVzZSBjYW5vbmljYWxJZCBkb2VzIG5vdCBwcm9taXNlIGEgdW5pcXVlIG5hbWUgZm9yIGFsbFxuICAgICAqIHBvc3NpYmxlIHF1ZXJpZXMsIHNvIHdlIGFwcGVuZCB0aGUgdGFyZ2V0SWQgdG8gbWFrZSB0aGUgbWFwcGluZyB1bmlxdWUuXG4gICAgICovXG5Ebi5xdWVyeVRhcmdldHNLZXlQYXRoID0gWyBcImNhbm9uaWNhbElkXCIsIFwidGFyZ2V0SWRcIiBdO1xuXG4vKipcbiAqIEFuIG9iamVjdCByZXByZXNlbnRpbmcgYW4gYXNzb2NpYXRpb24gYmV0d2VlbiBhIHRhcmdldCBhbmQgYSBkb2N1bWVudCwgb3IgYVxuICogc2VudGluZWwgcm93IG1hcmtpbmcgdGhlIGxhc3Qgc2VxdWVuY2UgbnVtYmVyIGF0IHdoaWNoIGEgZG9jdW1lbnQgd2FzIHVzZWQuXG4gKiBFYWNoIGRvY3VtZW50IGNhY2hlZCBtdXN0IGhhdmUgYSBjb3JyZXNwb25kaW5nIHNlbnRpbmVsIHJvdyBiZWZvcmUgbHJ1XG4gKiBnYXJiYWdlIGNvbGxlY3Rpb24gaXMgZW5hYmxlZC5cbiAqXG4gKiBUaGUgdGFyZ2V0IGFzc29jaWF0aW9ucyBhbmQgc2VudGluZWwgcm93cyBhcmUgY28tbG9jYXRlZCBzbyB0aGF0IG9ycGhhbmVkXG4gKiBkb2N1bWVudHMgYW5kIHRoZWlyIHNlcXVlbmNlIG51bWJlcnMgY2FuIGJlIGlkZW50aWZpZWQgZWZmaWNpZW50bHkgdmlhIGEgc2NhblxuICogb2YgdGhpcyBzdG9yZS5cbiAqL1xudmFyIHhuID0gZnVuY3Rpb24oXG4vKipcbiAgICAgKiBUaGUgdGFyZ2V0SWQgaWRlbnRpZnlpbmcgYSB0YXJnZXQgb3IgMCBmb3IgYSBzZW50aW5lbCByb3cuXG4gICAgICovXG50LCBcbi8qKlxuICAgICAqIFRoZSBwYXRoIHRvIHRoZSBkb2N1bWVudCwgYXMgZW5jb2RlZCBpbiB0aGUga2V5LlxuICAgICAqL1xuZSwgXG4vKipcbiAgICAgKiBJZiB0aGlzIGlzIGEgc2VudGluZWwgcm93LCB0aGlzIHNob3VsZCBiZSB0aGUgc2VxdWVuY2UgbnVtYmVyIG9mIHRoZSBsYXN0XG4gICAgICogdGltZSB0aGUgZG9jdW1lbnQgc3BlY2lmaWVkIGJ5IGBwYXRoYCB3YXMgdXNlZC4gT3RoZXJ3aXNlLCBpdCBzaG91bGQgYmVcbiAgICAgKiBgdW5kZWZpbmVkYC5cbiAgICAgKi9cbm4pIHtcbiAgICB0aGlzLnRhcmdldElkID0gdCwgdGhpcy5wYXRoID0gZSwgdGhpcy5zZXF1ZW5jZU51bWJlciA9IG47XG59O1xuXG4vKiogTmFtZSBvZiB0aGUgSW5kZXhlZERiIG9iamVjdCBzdG9yZS4gICovIHhuLnN0b3JlID0gXCJ0YXJnZXREb2N1bWVudHNcIiwgXG4vKiogS2V5cyBhcmUgYXV0b21hdGljYWxseSBhc3NpZ25lZCB2aWEgdGhlIHRhcmdldElkLCBwYXRoIHByb3BlcnRpZXMuICovXG54bi5rZXlQYXRoID0gWyBcInRhcmdldElkXCIsIFwicGF0aFwiIF0sIFxuLyoqIFRoZSBpbmRleCBuYW1lIGZvciB0aGUgcmV2ZXJzZSBpbmRleC4gKi9cbnhuLmRvY3VtZW50VGFyZ2V0c0luZGV4ID0gXCJkb2N1bWVudFRhcmdldHNJbmRleFwiLCBcbi8qKiBXZSBhbHNvIG5lZWQgdG8gY3JlYXRlIHRoZSByZXZlcnNlIGluZGV4IGZvciB0aGVzZSBwcm9wZXJ0aWVzLiAqL1xueG4uZG9jdW1lbnRUYXJnZXRzS2V5UGF0aCA9IFsgXCJwYXRoXCIsIFwidGFyZ2V0SWRcIiBdO1xuXG4vKipcbiAqIEEgcmVjb3JkIG9mIGdsb2JhbCBzdGF0ZSB0cmFja2VkIGFjcm9zcyBhbGwgVGFyZ2V0cywgdHJhY2tlZCBzZXBhcmF0ZWx5XG4gKiB0byBhdm9pZCB0aGUgbmVlZCBmb3IgZXh0cmEgaW5kZXhlcy5cbiAqXG4gKiBUaGlzIHNob3VsZCBiZSBrZXB0IGluLXN5bmMgd2l0aCB0aGUgcHJvdG8gdXNlZCBpbiB0aGUgaU9TIGNsaWVudC5cbiAqL1xudmFyIFNuID0gZnVuY3Rpb24oXG4vKipcbiAgICAgKiBUaGUgaGlnaGVzdCBudW1iZXJlZCB0YXJnZXQgaWQgYWNyb3NzIGFsbCB0YXJnZXRzLlxuICAgICAqXG4gICAgICogU2VlIERiVGFyZ2V0LnRhcmdldElkLlxuICAgICAqL1xudCwgXG4vKipcbiAgICAgKiBUaGUgaGlnaGVzdCBudW1iZXJlZCBsYXN0TGlzdGVuU2VxdWVuY2VOdW1iZXIgYWNyb3NzIGFsbCB0YXJnZXRzLlxuICAgICAqXG4gICAgICogU2VlIERiVGFyZ2V0Lmxhc3RMaXN0ZW5TZXF1ZW5jZU51bWJlci5cbiAgICAgKi9cbmUsIFxuLyoqXG4gICAgICogQSBnbG9iYWwgc25hcHNob3QgdmVyc2lvbiByZXByZXNlbnRpbmcgdGhlIGxhc3QgY29uc2lzdGVudCBzbmFwc2hvdCB3ZVxuICAgICAqIHJlY2VpdmVkIGZyb20gdGhlIGJhY2tlbmQuIFRoaXMgaXMgbW9ub3RvbmljYWxseSBpbmNyZWFzaW5nIGFuZCBhbnlcbiAgICAgKiBzbmFwc2hvdHMgcmVjZWl2ZWQgZnJvbSB0aGUgYmFja2VuZCBwcmlvciB0byB0aGlzIHZlcnNpb24gKGUuZy4gZm9yXG4gICAgICogdGFyZ2V0cyByZXN1bWVkIHdpdGggYSByZXN1bWVUb2tlbikgc2hvdWxkIGJlIHN1cHByZXNzZWQgKGJ1ZmZlcmVkKVxuICAgICAqIHVudGlsIHRoZSBiYWNrZW5kIGhhcyBjYXVnaHQgdXAgdG8gdGhpcyBzbmFwc2hvdCB2ZXJzaW9uIGFnYWluLiBUaGlzXG4gICAgICogcHJldmVudHMgb3VyIGNhY2hlIGZyb20gZXZlciBnb2luZyBiYWNrd2FyZHMgaW4gdGltZS5cbiAgICAgKi9cbm4sIFxuLyoqXG4gICAgICogVGhlIG51bWJlciBvZiB0YXJnZXRzIHBlcnNpc3RlZC5cbiAgICAgKi9cbnIpIHtcbiAgICB0aGlzLmhpZ2hlc3RUYXJnZXRJZCA9IHQsIHRoaXMuaGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyID0gZSwgdGhpcy5sYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uID0gbiwgXG4gICAgdGhpcy50YXJnZXRDb3VudCA9IHI7XG59O1xuXG4vKipcbiAqIFRoZSBrZXkgc3RyaW5nIHVzZWQgZm9yIHRoZSBzaW5nbGUgb2JqZWN0IHRoYXQgZXhpc3RzIGluIHRoZVxuICogRGJUYXJnZXRHbG9iYWwgc3RvcmUuXG4gKi8gU24ua2V5ID0gXCJ0YXJnZXRHbG9iYWxLZXlcIiwgU24uc3RvcmUgPSBcInRhcmdldEdsb2JhbFwiO1xuXG4vKipcbiAqIEFuIG9iamVjdCByZXByZXNlbnRpbmcgYW4gYXNzb2NpYXRpb24gYmV0d2VlbiBhIENvbGxlY3Rpb24gaWQgKGUuZy4gJ21lc3NhZ2VzJylcbiAqIHRvIGEgcGFyZW50IHBhdGggKGUuZy4gJy9jaGF0cy8xMjMnKSB0aGF0IGNvbnRhaW5zIGl0IGFzIGEgKHN1Yiljb2xsZWN0aW9uLlxuICogVGhpcyBpcyB1c2VkIHRvIGVmZmljaWVudGx5IGZpbmQgYWxsIGNvbGxlY3Rpb25zIHRvIHF1ZXJ5IHdoZW4gcGVyZm9ybWluZ1xuICogYSBDb2xsZWN0aW9uIEdyb3VwIHF1ZXJ5LlxuICovXG52YXIgUm4gPSBmdW5jdGlvbihcbi8qKlxuICAgICAqIFRoZSBjb2xsZWN0aW9uSWQgKGUuZy4gJ21lc3NhZ2VzJylcbiAgICAgKi9cbnQsIFxuLyoqXG4gICAgICogVGhlIHBhdGggdG8gdGhlIHBhcmVudCAoZWl0aGVyIGEgZG9jdW1lbnQgbG9jYXRpb24gb3IgYW4gZW1wdHkgcGF0aCBmb3JcbiAgICAgKiBhIHJvb3QtbGV2ZWwgY29sbGVjdGlvbikuXG4gICAgICovXG5lKSB7XG4gICAgdGhpcy5jb2xsZWN0aW9uSWQgPSB0LCB0aGlzLnBhcmVudCA9IGU7XG59O1xuXG4vKiogTmFtZSBvZiB0aGUgSW5kZXhlZERiIG9iamVjdCBzdG9yZS4gKi8gZnVuY3Rpb24gTG4odCkge1xuICAgIHQuY3JlYXRlT2JqZWN0U3RvcmUoeG4uc3RvcmUsIHtcbiAgICAgICAga2V5UGF0aDogeG4ua2V5UGF0aFxuICAgIH0pLmNyZWF0ZUluZGV4KHhuLmRvY3VtZW50VGFyZ2V0c0luZGV4LCB4bi5kb2N1bWVudFRhcmdldHNLZXlQYXRoLCB7XG4gICAgICAgIHVuaXF1ZTogITBcbiAgICB9KSwgXG4gICAgLy8gTk9URTogVGhpcyBpcyB1bmlxdWUgb25seSBiZWNhdXNlIHRoZSBUYXJnZXRJZCBpcyB0aGUgc3VmZml4LlxuICAgIHQuY3JlYXRlT2JqZWN0U3RvcmUoRG4uc3RvcmUsIHtcbiAgICAgICAga2V5UGF0aDogRG4ua2V5UGF0aFxuICAgIH0pLmNyZWF0ZUluZGV4KERuLnF1ZXJ5VGFyZ2V0c0luZGV4TmFtZSwgRG4ucXVlcnlUYXJnZXRzS2V5UGF0aCwge1xuICAgICAgICB1bmlxdWU6ICEwXG4gICAgfSksIHQuY3JlYXRlT2JqZWN0U3RvcmUoU24uc3RvcmUpO1xufVxuXG5Sbi5zdG9yZSA9IFwiY29sbGVjdGlvblBhcmVudHNcIiwgXG4vKiogS2V5cyBhcmUgYXV0b21hdGljYWxseSBhc3NpZ25lZCB2aWEgdGhlIGNvbGxlY3Rpb25JZCwgcGFyZW50IHByb3BlcnRpZXMuICovXG5Sbi5rZXlQYXRoID0gWyBcImNvbGxlY3Rpb25JZFwiLCBcInBhcmVudFwiIF07XG5cbnZhciBPbiA9IGZ1bmN0aW9uKFxuLy8gTm90ZTogUHJldmlvdXMgc2NoZW1hIHZlcnNpb25zIGluY2x1ZGVkIGEgZmllbGRcbi8vIFwibGFzdFByb2Nlc3NlZERvY3VtZW50Q2hhbmdlSWRcIi4gRG9uJ3QgdXNlIGFueW1vcmUuXG4vKiogVGhlIGF1dG8tZ2VuZXJhdGVkIGNsaWVudCBpZCBhc3NpZ25lZCBhdCBjbGllbnQgc3RhcnR1cC4gKi9cbnQsIFxuLyoqIFRoZSBsYXN0IHRpbWUgdGhpcyBzdGF0ZSB3YXMgdXBkYXRlZC4gKi9cbmUsIFxuLyoqIFdoZXRoZXIgdGhlIGNsaWVudCdzIG5ldHdvcmsgY29ubmVjdGlvbiBpcyBlbmFibGVkLiAqL1xubiwgXG4vKiogV2hldGhlciB0aGlzIGNsaWVudCBpcyBydW5uaW5nIGluIGEgZm9yZWdyb3VuZCB0YWIuICovXG5yKSB7XG4gICAgdGhpcy5jbGllbnRJZCA9IHQsIHRoaXMudXBkYXRlVGltZU1zID0gZSwgdGhpcy5uZXR3b3JrRW5hYmxlZCA9IG4sIHRoaXMuaW5Gb3JlZ3JvdW5kID0gcjtcbn07XG5cbi8qKiBOYW1lIG9mIHRoZSBJbmRleGVkRGIgb2JqZWN0IHN0b3JlLiAqLyBPbi5zdG9yZSA9IFwiY2xpZW50TWV0YWRhdGFcIiwgXG4vKiogS2V5cyBhcmUgYXV0b21hdGljYWxseSBhc3NpZ25lZCB2aWEgdGhlIGNsaWVudElkIHByb3BlcnRpZXMuICovXG5Pbi5rZXlQYXRoID0gXCJjbGllbnRJZFwiO1xuXG52YXIgVm4gPSBlLl9fc3ByZWFkQXJyYXlzKGUuX19zcHJlYWRBcnJheXMoZS5fX3NwcmVhZEFycmF5cyhbIGJuLnN0b3JlLCBfbi5zdG9yZSwgVG4uc3RvcmUsIEFuLnN0b3JlLCBEbi5zdG9yZSwgRW4uc3RvcmUsIFNuLnN0b3JlLCB4bi5zdG9yZSBdLCBbIE9uLnN0b3JlIF0pLCBbIGtuLnN0b3JlIF0pLCBbIFJuLnN0b3JlIF0pLCBQbiA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdChlKSB7XG4gICAgICAgIHRoaXMuZGIgPSBlLCBcbiAgICAgICAgLy8gTk9URTogQWNjb3JkaW5nIHRvIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xOTcwNTAsIHRoZVxuICAgICAgICAvLyBidWcgd2UncmUgY2hlY2tpbmcgZm9yIHNob3VsZCBleGlzdCBpbiBpT1MgPj0gMTIuMiBhbmQgPCAxMywgYnV0IGZvclxuICAgICAgICAvLyB3aGF0ZXZlciByZWFzb24gaXQncyBtdWNoIGhhcmRlciB0byBoaXQgYWZ0ZXIgMTIuMiBzbyB3ZSBvbmx5IHByb2FjdGl2ZWx5XG4gICAgICAgIC8vIGxvZyBvbiAxMi4yLlxuICAgICAgICAxMi4yID09PSB0LmFhKGkuZ2V0VUEoKSkgJiYgeWUoXCJGaXJlc3RvcmUgcGVyc2lzdGVuY2Ugc3VmZmVycyBmcm9tIGEgYnVnIGluIGlPUyAxMi4yIFNhZmFyaSB0aGF0IG1heSBjYXVzZSB5b3VyIGFwcCB0byBzdG9wIHdvcmtpbmcuIFNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3EvNTY0OTYyOTYvMTEwOTE1IGZvciBkZXRhaWxzIGFuZCBhIHBvdGVudGlhbCB3b3JrYXJvdW5kLlwiKVxuICAgICAgICAvKipcbiAgICAgKiBPcGVucyB0aGUgc3BlY2lmaWVkIGRhdGFiYXNlLCBjcmVhdGluZyBvciB1cGdyYWRpbmcgaXQgaWYgbmVjZXNzYXJ5LlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IGB2ZXJzaW9uYCBtdXN0IG5vdCBiZSBhIGRvd25ncmFkZS4gSW5kZXhlZERCIGRvZXMgbm90IHN1cHBvcnQgZG93bmdyYWRpbmcgdGhlIHNjaGVtYVxuICAgICAqIHZlcnNpb24uIFdlIGN1cnJlbnRseSBkbyBub3Qgc3VwcG9ydCBhbnkgd2F5IHRvIGRvIHZlcnNpb25pbmcgb3V0c2lkZSBvZiBJbmRleGVkREIncyB2ZXJzaW9uaW5nXG4gICAgICogbWVjaGFuaXNtLCBhcyBvbmx5IHZlcnNpb24tdXBncmFkZSB0cmFuc2FjdGlvbnMgYXJlIGFsbG93ZWQgdG8gZG8gdGhpbmdzIGxpa2UgY3JlYXRlXG4gICAgICogb2JqZWN0c3RvcmVzLlxuICAgICAqLztcbiAgICB9XG4gICAgcmV0dXJuIHQuWGggPSBmdW5jdGlvbihlLCBuLCByKSB7XG4gICAgICAgIHJldHVybiBkZShcIlNpbXBsZURiXCIsIFwiT3BlbmluZyBkYXRhYmFzZTpcIiwgZSksIG5ldyB4ZSgoZnVuY3Rpb24oaSwgbykge1xuICAgICAgICAgICAgLy8gVE9ETyhtaWtlbGVoZW4pOiBJbnZlc3RpZ2F0ZSBicm93c2VyIGNvbXBhdGliaWxpdHkuXG4gICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSW5kZXhlZERCX0FQSS9Vc2luZ19JbmRleGVkREJcbiAgICAgICAgICAgIC8vIHN1Z2dlc3RzIElFOSBhbmQgb2xkZXIgV2ViS2l0IGJyb3dzZXJzIGhhbmRsZSB1cGdyYWRlXG4gICAgICAgICAgICAvLyBkaWZmZXJlbnRseS4gVGhleSBleHBlY3Qgc2V0VmVyc2lvbiwgYXMgZGVzY3JpYmVkIGhlcmU6XG4gICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSURCVmVyc2lvbkNoYW5nZVJlcXVlc3Qvc2V0VmVyc2lvblxuICAgICAgICAgICAgdmFyIHMgPSB3aW5kb3cuaW5kZXhlZERCLm9wZW4oZSwgbik7XG4gICAgICAgICAgICBzLm9uc3VjY2VzcyA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbiA9IGUudGFyZ2V0LnJlc3VsdDtcbiAgICAgICAgICAgICAgICBpKG5ldyB0KG4pKTtcbiAgICAgICAgICAgIH0sIHMub25ibG9ja2VkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgbyhuZXcgYyhoLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiQ2Fubm90IHVwZ3JhZGUgSW5kZXhlZERCIHNjaGVtYSB3aGlsZSBhbm90aGVyIHRhYiBpcyBvcGVuLiBDbG9zZSBhbGwgdGFicyB0aGF0IGFjY2VzcyBGaXJlc3RvcmUgYW5kIHJlbG9hZCB0aGlzIHBhZ2UgdG8gcHJvY2VlZC5cIikpO1xuICAgICAgICAgICAgfSwgcy5vbmVycm9yID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gdC50YXJnZXQuZXJyb3I7XG4gICAgICAgICAgICAgICAgXCJWZXJzaW9uRXJyb3JcIiA9PT0gZS5uYW1lID8gbyhuZXcgYyhoLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiQSBuZXdlciB2ZXJzaW9uIG9mIHRoZSBGaXJlc3RvcmUgU0RLIHdhcyBwcmV2aW91c2x5IHVzZWQgYW5kIHNvIHRoZSBwZXJzaXN0ZWQgZGF0YSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoZSB2ZXJzaW9uIG9mIHRoZSBTREsgeW91IGFyZSBub3cgdXNpbmcuIFRoZSBTREsgd2lsbCBvcGVyYXRlIHdpdGggcGVyc2lzdGVuY2UgZGlzYWJsZWQuIElmIHlvdSBuZWVkIHBlcnNpc3RlbmNlLCBwbGVhc2UgcmUtdXBncmFkZSB0byBhIG5ld2VyIHZlcnNpb24gb2YgdGhlIFNESyBvciBlbHNlIGNsZWFyIHRoZSBwZXJzaXN0ZWQgSW5kZXhlZERCIGRhdGEgZm9yIHlvdXIgYXBwIHRvIHN0YXJ0IGZyZXNoLlwiKSkgOiBvKGUpO1xuICAgICAgICAgICAgfSwgcy5vbnVwZ3JhZGVuZWVkZWQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgZGUoXCJTaW1wbGVEYlwiLCAnRGF0YWJhc2UgXCInICsgZSArICdcIiByZXF1aXJlcyB1cGdyYWRlIGZyb20gdmVyc2lvbjonLCB0Lm9sZFZlcnNpb24pO1xuICAgICAgICAgICAgICAgIHZhciBuID0gdC50YXJnZXQucmVzdWx0O1xuICAgICAgICAgICAgICAgIHIuY3JlYXRlT3JVcGdyYWRlKG4sIHMudHJhbnNhY3Rpb24sIHQub2xkVmVyc2lvbiwgZ24pLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBkZShcIlNpbXBsZURiXCIsIFwiRGF0YWJhc2UgdXBncmFkZSB0byB2ZXJzaW9uIFwiICsgZ24gKyBcIiBjb21wbGV0ZVwiKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSkueW4oKTtcbiAgICB9LCBcbiAgICAvKiogRGVsZXRlcyB0aGUgc3BlY2lmaWVkIGRhdGFiYXNlLiAqLyB0LmRlbGV0ZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIGRlKFwiU2ltcGxlRGJcIiwgXCJSZW1vdmluZyBkYXRhYmFzZTpcIiwgdCksIEZuKHdpbmRvdy5pbmRleGVkREIuZGVsZXRlRGF0YWJhc2UodCkpLnluKCk7XG4gICAgfSwgXG4gICAgLyoqIFJldHVybnMgdHJ1ZSBpZiBJbmRleGVkREIgaXMgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGVudmlyb25tZW50LiAqLyB0LkdoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChcInVuZGVmaW5lZFwiID09IHR5cGVvZiB3aW5kb3cgfHwgbnVsbCA9PSB3aW5kb3cuaW5kZXhlZERCKSByZXR1cm4gITE7XG4gICAgICAgIGlmICh0LnVhKCkpIHJldHVybiAhMDtcbiAgICAgICAgLy8gSW4gc29tZSBOb2RlIGVudmlyb25tZW50cywgYHdpbmRvd2AgaXMgZGVmaW5lZCwgYnV0IGB3aW5kb3cubmF2aWdhdG9yYCBpc1xuICAgICAgICAvLyBub3QuIFdlIGRvbid0IHN1cHBvcnQgSW5kZXhlZERCIHBlcnNpc3RlbmNlIGluIE5vZGUgaWYgdGhlXG4gICAgICAgIC8vIGlzTW9ja1BlcnNpc3RlbmNlKCkgY2hlY2sgYWJvdmUgcmV0dXJucyBmYWxzZS5cbiAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSB3aW5kb3cubmF2aWdhdG9yKSByZXR1cm4gITE7XG4gICAgICAgIC8vIFdlIGV4dGVuc2l2ZWx5IHVzZSBpbmRleGVkIGFycmF5IHZhbHVlcyBhbmQgY29tcG91bmQga2V5cyxcbiAgICAgICAgLy8gd2hpY2ggSUUgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQuIEhvd2V2ZXIsIHRoZXkgc3RpbGwgaGF2ZSBpbmRleGVkREJcbiAgICAgICAgLy8gZGVmaW5lZCBvbiB0aGUgd2luZG93LCBzbyB3ZSBuZWVkIHRvIGNoZWNrIGZvciB0aGVtIGhlcmUgYW5kIG1ha2Ugc3VyZVxuICAgICAgICAvLyB0byByZXR1cm4gdGhhdCBwZXJzaXN0ZW5jZSBpcyBub3QgZW5hYmxlZCBmb3IgdGhvc2UgYnJvd3NlcnMuXG4gICAgICAgIC8vIEZvciB0cmFja2luZyBzdXBwb3J0IG9mIHRoaXMgZmVhdHVyZSwgc2VlIGhlcmU6XG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vZW4tdXMvbWljcm9zb2Z0LWVkZ2UvcGxhdGZvcm0vc3RhdHVzL2luZGV4ZWRkYmFycmF5c2FuZG11bHRpZW50cnlzdXBwb3J0L1xuICAgICAgICAvLyBDaGVjayB0aGUgVUEgc3RyaW5nIHRvIGZpbmQgb3V0IHRoZSBicm93c2VyLlxuICAgICAgICAgICAgICAgIHZhciBlID0gaS5nZXRVQSgpLCBuID0gdC5hYShlKSwgciA9IDAgPCBuICYmIG4gPCAxMCwgbyA9IHQuY2EoZSksIHMgPSAwIDwgbyAmJiBvIDwgNC41O1xuICAgICAgICAvLyBJRSAxMFxuICAgICAgICAvLyB1YSA9ICdNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSAxMC4wOyBXaW5kb3dzIE5UIDYuMjsgVHJpZGVudC82LjApJztcbiAgICAgICAgLy8gSUUgMTFcbiAgICAgICAgLy8gdWEgPSAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4zOyBUcmlkZW50LzcuMDsgcnY6MTEuMCkgbGlrZSBHZWNrbyc7XG4gICAgICAgIC8vIEVkZ2VcbiAgICAgICAgLy8gdWEgPSAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsXG4gICAgICAgIC8vIGxpa2UgR2Vja28pIENocm9tZS8zOS4wLjIxNzEuNzEgU2FmYXJpLzUzNy4zNiBFZGdlLzEyLjAnO1xuICAgICAgICAvLyBpT1MgU2FmYXJpOiBEaXNhYmxlIGZvciB1c2VycyBydW5uaW5nIGlPUyB2ZXJzaW9uIDwgMTAuXG4gICAgICAgICAgICAgICAgcmV0dXJuICEoZS5pbmRleE9mKFwiTVNJRSBcIikgPiAwIHx8IGUuaW5kZXhPZihcIlRyaWRlbnQvXCIpID4gMCB8fCBlLmluZGV4T2YoXCJFZGdlL1wiKSA+IDAgfHwgciB8fCBzKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGJhY2tpbmcgSW5kZXhlZERCIHN0b3JlIGlzIHRoZSBOb2RlIEluZGV4ZWREQlNoaW1cbiAgICAgKiAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9heGVtY2xpb24vSW5kZXhlZERCU2hpbSkuXG4gICAgICovXG4gICAgdC51YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdDtcbiAgICAgICAgcmV0dXJuIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIF9fUFJJVkFURV9wcm9jZXNzICYmIFwiWUVTXCIgPT09IChudWxsID09PSAodCA9IF9fUFJJVkFURV9wcm9jZXNzLl9fUFJJVkFURV9lbnYpIHx8IHZvaWQgMCA9PT0gdCA/IHZvaWQgMCA6IHQuX2EpO1xuICAgIH0sIFxuICAgIC8qKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmcm9tIGEgdHJhbnNhY3Rpb24uICovIHQuTnIgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB0LnN0b3JlKGUpO1xuICAgIH0sIFxuICAgIC8vIHZpc2libGUgZm9yIHRlc3RpbmdcbiAgICAvKiogUGFyc2UgVXNlciBBZ2VudCB0byBkZXRlcm1pbmUgaU9TIHZlcnNpb24uIFJldHVybnMgLTEgaWYgbm90IGZvdW5kLiAqL1xuICAgIHQuYWEgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdC5tYXRjaCgvaSg/OnBob25lfHBhZHxwb2QpIG9zIChbXFxkX10rKS9pKSwgbiA9IGUgPyBlWzFdLnNwbGl0KFwiX1wiKS5zbGljZSgwLCAyKS5qb2luKFwiLlwiKSA6IFwiLTFcIjtcbiAgICAgICAgcmV0dXJuIE51bWJlcihuKTtcbiAgICB9LCBcbiAgICAvLyB2aXNpYmxlIGZvciB0ZXN0aW5nXG4gICAgLyoqIFBhcnNlIFVzZXIgQWdlbnQgdG8gZGV0ZXJtaW5lIEFuZHJvaWQgdmVyc2lvbi4gUmV0dXJucyAtMSBpZiBub3QgZm91bmQuICovXG4gICAgdC5jYSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0Lm1hdGNoKC9BbmRyb2lkIChbXFxkLl0rKS9pKSwgbiA9IGUgPyBlWzFdLnNwbGl0KFwiLlwiKS5zbGljZSgwLCAyKS5qb2luKFwiLlwiKSA6IFwiLTFcIjtcbiAgICAgICAgcmV0dXJuIE51bWJlcihuKTtcbiAgICB9LCB0LnByb3RvdHlwZS5vbyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5kYi5vbnZlcnNpb25jaGFuZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICByZXR1cm4gdChlKTtcbiAgICAgICAgfTtcbiAgICB9LCB0LnByb3RvdHlwZS5ydW5UcmFuc2FjdGlvbiA9IGZ1bmN0aW9uKHQsIG4sIHIpIHtcbiAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaSwgbywgcywgdSwgYTtcbiAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbihoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChoLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGkgPSBcInJlYWRvbmx5XCIgPT09IHQsIG8gPSAwLCBzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCwgcywgYSwgaCwgYztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsrbywgdCA9IE1uLm9wZW4odS5kYiwgaSA/IFwicmVhZG9ubHlcIiA6IFwicmVhZHdyaXRlXCIsIG4pLCBlLmxhYmVsID0gMTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXYWl0IGZvciB0aGUgdHJhbnNhY3Rpb24gdG8gY29tcGxldGUgKGkuZS4gSW5kZXhlZERiJ3Mgb25zdWNjZXNzIGV2ZW50IHRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZpcmUpLCBidXQgc3RpbGwgcmV0dXJuIHRoZSBvcmlnaW5hbCB0cmFuc2FjdGlvbkZuUmVzdWx0IGJhY2sgdG8gdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGxlci5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUudHJ5cy5wdXNoKFsgMSwgMywgLCA0IF0pLCBzID0gcih0KS5jYXRjaCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWJvcnQgdGhlIHRyYW5zYWN0aW9uIGlmIHRoZXJlIHdhcyBhbiBlcnJvci5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmFib3J0KGUpLCB4ZS5yZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS55bigpLCBhID0ge30sIHMuY2F0Y2goKGZ1bmN0aW9uKCkge30pKSwgWyA0IC8qeWllbGQqLyAsIHQubGEgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gLCAoYS52YWx1ZSA9IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2FpdCBmb3IgdGhlIHRyYW5zYWN0aW9uIHRvIGNvbXBsZXRlIChpLmUuIEluZGV4ZWREYidzIG9uc3VjY2VzcyBldmVudCB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmaXJlKSwgYnV0IHN0aWxsIHJldHVybiB0aGUgb3JpZ2luYWwgdHJhbnNhY3Rpb25GblJlc3VsdCBiYWNrIHRvIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc2VudCgpLCBzKSwgYSkgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaCA9IGUuc2VudCgpLCBjID0gXCJGaXJlYmFzZUVycm9yXCIgIT09IGgubmFtZSAmJiBvIDwgMywgZGUoXCJTaW1wbGVEYlwiLCBcIlRyYW5zYWN0aW9uIGZhaWxlZCB3aXRoIGVycm9yOiAlcy4gUmV0cnlpbmc6ICVzLlwiLCBoLm1lc3NhZ2UsIGMpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA/IFsgMyAvKmJyZWFrKi8gLCA0IF0gOiBbIDIgLypyZXR1cm4qLyAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBQcm9taXNlLnJlamVjdChoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9LCB1ID0gdGhpcywgaC5sYWJlbCA9IDE7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgNSAvKnlpZWxkKiovICwgcygpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwib2JqZWN0XCIgPT0gdHlwZW9mIChhID0gaC5zZW50KCkpKSByZXR1cm4gWyAyIC8qcmV0dXJuKi8gLCBhLnZhbHVlIF07XG4gICAgICAgICAgICAgICAgICAgIGgubGFiZWwgPSAzO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDMgLypicmVhayovICwgMSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZGIuY2xvc2UoKTtcbiAgICB9LCB0O1xufSgpLCBVbiA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0KSB7XG4gICAgICAgIHRoaXMuZGEgPSB0LCB0aGlzLmZhID0gITEsIHRoaXMuVGEgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcIlBuXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZhO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwiRWFcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuVGE7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJjdXJzb3JcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHRoaXMuZGEgPSB0O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBcbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgdG8gc3RvcCBpdGVyYXRpb24gYXQgYW55IHBvaW50LlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmRvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5mYSA9ICEwO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gY2FuIGJlIGNhbGxlZCB0byBza2lwIHRvIHRoYXQgbmV4dCBrZXksIHdoaWNoIGNvdWxkIGJlXG4gICAgICogYW4gaW5kZXggb3IgYSBwcmltYXJ5IGtleS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5RciA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5UYSA9IHQ7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogRGVsZXRlIHRoZSBjdXJyZW50IGN1cnNvciB2YWx1ZSBmcm9tIHRoZSBvYmplY3Qgc3RvcmUuXG4gICAgICpcbiAgICAgKiBOT1RFOiBZb3UgQ0FOTk9UIGRvIHRoaXMgd2l0aCBhIGtleXNPbmx5IHF1ZXJ5LlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gRm4odGhpcy5kYS5kZWxldGUoKSk7XG4gICAgfSwgdDtcbn0oKSwgQ24gPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKHQpIHtcbiAgICBmdW5jdGlvbiBuKGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICByZXR1cm4gKG4gPSB0LmNhbGwodGhpcywgaC5VTkFWQUlMQUJMRSwgXCJJbmRleGVkREIgdHJhbnNhY3Rpb24gZmFpbGVkOiBcIiArIGUpIHx8IHRoaXMpLm5hbWUgPSBcIkluZGV4ZWREYlRyYW5zYWN0aW9uRXJyb3JcIiwgXG4gICAgICAgIG47XG4gICAgfVxuICAgIHJldHVybiBlLl9fZXh0ZW5kcyhuLCB0KSwgbjtcbn0oYyk7XG5cbi8vIFYyIGlzIG5vIGxvbmdlciB1c2FibGUgKHNlZSBjb21tZW50IGF0IHRvcCBvZiBmaWxlKVxuLy8gVmlzaWJsZSBmb3IgdGVzdGluZ1xuLyoqXG4gKiBQcm92aWRlcyBhIHdyYXBwZXIgYXJvdW5kIEluZGV4ZWREYiB3aXRoIGEgc2ltcGxpZmllZCBpbnRlcmZhY2UgdGhhdCB1c2VzXG4gKiBQcm9taXNlLWxpa2UgcmV0dXJuIHZhbHVlcyB0byBjaGFpbiBvcGVyYXRpb25zLiBSZWFsIHByb21pc2VzIGNhbm5vdCBiZSB1c2VkXG4gKiBzaW5jZSAudGhlbigpIGNvbnRpbnVhdGlvbnMgYXJlIGV4ZWN1dGVkIGFzeW5jaHJvbm91c2x5IChlLmcuIHZpYVxuICogLnNldEltbWVkaWF0ZSksIHdoaWNoIHdvdWxkIGNhdXNlIEluZGV4ZWREQiB0byBlbmQgdGhlIHRyYW5zYWN0aW9uLlxuICogU2VlIFBlcnNpc3RlbmNlUHJvbWlzZSBmb3IgbW9yZSBkZXRhaWxzLlxuICovXG4vKiogVmVyaWZpZXMgd2hldGhlciBgZWAgaXMgYW4gSW5kZXhlZERiVHJhbnNhY3Rpb25FcnJvci4gKi8gZnVuY3Rpb24gcW4odCkge1xuICAgIC8vIFVzZSBuYW1lIGVxdWFsaXR5LCBhcyBpbnN0YW5jZW9mIGNoZWNrcyBvbiBlcnJvcnMgZG9uJ3Qgd29yayB3aXRoIGVycm9yc1xuICAgIC8vIHRoYXQgd3JhcCBvdGhlciBlcnJvcnMuXG4gICAgcmV0dXJuIFwiSW5kZXhlZERiVHJhbnNhY3Rpb25FcnJvclwiID09PSB0Lm5hbWU7XG59XG5cbi8qKlxuICogV3JhcHMgYW4gSURCVHJhbnNhY3Rpb24gYW5kIGV4cG9zZXMgYSBzdG9yZSgpIG1ldGhvZCB0byBnZXQgYSBoYW5kbGUgdG8gYVxuICogc3BlY2lmaWMgb2JqZWN0IHN0b3JlLlxuICovIHZhciBNbiA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgdGhpcy50cmFuc2FjdGlvbiA9IHQsIHRoaXMuYWJvcnRlZCA9ICExLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIEluZGV4ZWREYiB0cmFuc2FjdGlvbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICB0aGlzLklhID0gbmV3IFVlLCB0aGlzLnRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGUuSWEucmVzb2x2ZSgpO1xuICAgICAgICB9LCB0aGlzLnRyYW5zYWN0aW9uLm9uYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHQuZXJyb3IgPyBlLklhLnJlamVjdChuZXcgQ24odC5lcnJvcikpIDogZS5JYS5yZXNvbHZlKCk7XG4gICAgICAgIH0sIHRoaXMudHJhbnNhY3Rpb24ub25lcnJvciA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHZhciBuID0gem4odC50YXJnZXQuZXJyb3IpO1xuICAgICAgICAgICAgZS5JYS5yZWplY3QobmV3IENuKG4pKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHQub3BlbiA9IGZ1bmN0aW9uKGUsIG4sIHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0KGUudHJhbnNhY3Rpb24ociwgbikpO1xuICAgIH0sIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJsYVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5JYS5wcm9taXNlO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCB0LnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdCAmJiB0aGlzLklhLnJlamVjdCh0KSwgdGhpcy5hYm9ydGVkIHx8IChkZShcIlNpbXBsZURiXCIsIFwiQWJvcnRpbmcgdHJhbnNhY3Rpb246XCIsIHQgPyB0Lm1lc3NhZ2UgOiBcIkNsaWVudC1pbml0aWF0ZWQgYWJvcnRcIiksIFxuICAgICAgICB0aGlzLmFib3J0ZWQgPSAhMCwgdGhpcy50cmFuc2FjdGlvbi5hYm9ydCgpKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgU2ltcGxlRGJTdG9yZTxLZXlUeXBlLCBWYWx1ZVR5cGU+IGZvciB0aGUgc3BlY2lmaWVkIHN0b3JlLiBBbGxcbiAgICAgKiBvcGVyYXRpb25zIHBlcmZvcm1lZCBvbiB0aGUgU2ltcGxlRGJTdG9yZSBoYXBwZW4gd2l0aGluIHRoZSBjb250ZXh0IG9mIHRoaXNcbiAgICAgKiB0cmFuc2FjdGlvbiBhbmQgaXQgY2Fubm90IGJlIHVzZWQgYW55bW9yZSBvbmNlIHRoZSB0cmFuc2FjdGlvbiBpc1xuICAgICAqIGNvbXBsZXRlZC5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCB3ZSBjYW4ndCBhY3R1YWxseSBlbmZvcmNlIHRoYXQgdGhlIEtleVR5cGUgYW5kIFZhbHVlVHlwZSBhcmVcbiAgICAgKiBjb3JyZWN0LCBidXQgdGhleSBhbGxvdyB0eXBlIHNhZmV0eSB0aHJvdWdoIHRoZSByZXN0IG9mIHRoZSBjb25zdW1pbmcgY29kZS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5zdG9yZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLnRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHQpO1xuICAgICAgICByZXR1cm4gbmV3IGpuKGUpO1xuICAgIH0sIHQ7XG59KCksIGpuID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdGhpcy5zdG9yZSA9IHQ7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuO1xuICAgICAgICByZXR1cm4gdm9pZCAwICE9PSBlID8gKGRlKFwiU2ltcGxlRGJcIiwgXCJQVVRcIiwgdGhpcy5zdG9yZS5uYW1lLCB0LCBlKSwgbiA9IHRoaXMuc3RvcmUucHV0KGUsIHQpKSA6IChkZShcIlNpbXBsZURiXCIsIFwiUFVUXCIsIHRoaXMuc3RvcmUubmFtZSwgXCI8YXV0by1rZXk+XCIsIHQpLCBcbiAgICAgICAgbiA9IHRoaXMuc3RvcmUucHV0KHQpKSwgRm4obik7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQWRkcyBhIG5ldyB2YWx1ZSBpbnRvIGFuIE9iamVjdCBTdG9yZSBhbmQgcmV0dXJucyB0aGUgbmV3IGtleS4gU2ltaWxhciB0b1xuICAgICAqIEluZGV4ZWREYidzIGBhZGQoKWAsIHRoaXMgbWV0aG9kIHdpbGwgZmFpbCBvbiBwcmltYXJ5IGtleSBjb2xsaXNpb25zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSBvYmplY3QgdG8gd3JpdGUuXG4gICAgICogQHJldHVybiBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBhZGQuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gZGUoXCJTaW1wbGVEYlwiLCBcIkFERFwiLCB0aGlzLnN0b3JlLm5hbWUsIHQsIHQpLCBGbih0aGlzLnN0b3JlLmFkZCh0KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgb2JqZWN0IHdpdGggdGhlIHNwZWNpZmllZCBrZXkgZnJvbSB0aGUgc3BlY2lmaWVkIHN0b3JlLCBvciBudWxsXG4gICAgICogaWYgbm8gb2JqZWN0IGV4aXN0cyB3aXRoIHRoZSBzcGVjaWZpZWQga2V5LlxuICAgICAqXG4gICAgICogQGtleSBUaGUga2V5IG9mIHRoZSBvYmplY3QgdG8gZ2V0LlxuICAgICAqIEByZXR1cm4gVGhlIG9iamVjdCB3aXRoIHRoZSBzcGVjaWZpZWQga2V5IG9yIG51bGwgaWYgbm8gb2JqZWN0IGV4aXN0cy5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgLy8gV2UncmUgZG9pbmcgYW4gdW5zYWZlIGNhc3QgdG8gVmFsdWVUeXBlLlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgIHJldHVybiBGbih0aGlzLnN0b3JlLmdldCh0KSkubmV4dCgoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgLy8gTm9ybWFsaXplIG5vbmV4aXN0ZW5jZSB0byBudWxsLlxuICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gbiAmJiAobiA9IG51bGwpLCBkZShcIlNpbXBsZURiXCIsIFwiR0VUXCIsIGUuc3RvcmUubmFtZSwgdCwgbiksIG47XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBkZShcIlNpbXBsZURiXCIsIFwiREVMRVRFXCIsIHRoaXMuc3RvcmUubmFtZSwgdCksIEZuKHRoaXMuc3RvcmUuZGVsZXRlKHQpKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBJZiB3ZSBldmVyIG5lZWQgbW9yZSBvZiB0aGUgY291bnQgdmFyaWFudHMsIHdlIGNhbiBhZGQgb3ZlcmxvYWRzLiBGb3Igbm93LFxuICAgICAqIGFsbCB3ZSBuZWVkIGlzIHRvIGNvdW50IGV2ZXJ5dGhpbmcgaW4gYSBzdG9yZS5cbiAgICAgKlxuICAgICAqIFJldHVybnMgdGhlIG51bWJlciBvZiByb3dzIGluIHRoZSBzdG9yZS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5jb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZGUoXCJTaW1wbGVEYlwiLCBcIkNPVU5UXCIsIHRoaXMuc3RvcmUubmFtZSksIEZuKHRoaXMuc3RvcmUuY291bnQoKSk7XG4gICAgfSwgdC5wcm90b3R5cGUuRnIgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcy5jdXJzb3IodGhpcy5vcHRpb25zKHQsIGUpKSwgciA9IFtdO1xuICAgICAgICByZXR1cm4gdGhpcy53YShuLCAoZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgci5wdXNoKGUpO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLlJhID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBkZShcIlNpbXBsZURiXCIsIFwiREVMRVRFIEFMTFwiLCB0aGlzLnN0b3JlLm5hbWUpO1xuICAgICAgICB2YXIgbiA9IHRoaXMub3B0aW9ucyh0LCBlKTtcbiAgICAgICAgbi5EaCA9ICExO1xuICAgICAgICB2YXIgciA9IHRoaXMuY3Vyc29yKG4pO1xuICAgICAgICByZXR1cm4gdGhpcy53YShyLCAoZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICAgICAgcmV0dXJuIG4uZGVsZXRlKCk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5VciA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG47XG4gICAgICAgIGUgPyBuID0gdCA6IChuID0ge30sIGUgPSB0KTtcbiAgICAgICAgdmFyIHIgPSB0aGlzLmN1cnNvcihuKTtcbiAgICAgICAgcmV0dXJuIHRoaXMud2EociwgZSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBhIHN0b3JlLCBidXQgd2FpdHMgZm9yIHRoZSBnaXZlbiBjYWxsYmFjayB0byBjb21wbGV0ZSBmb3JcbiAgICAgKiBlYWNoIGVudHJ5IGJlZm9yZSBpdGVyYXRpbmcgdGhlIG5leHQgZW50cnkuIFRoaXMgYWxsb3dzIHRoZSBjYWxsYmFjayB0byBkb1xuICAgICAqIGFzeW5jaHJvbm91cyB3b3JrIHRvIGRldGVybWluZSBpZiB0aGlzIGl0ZXJhdGlvbiBzaG91bGQgY29udGludWUuXG4gICAgICpcbiAgICAgKiBUaGUgcHJvdmlkZWQgY2FsbGJhY2sgc2hvdWxkIHJldHVybiBgdHJ1ZWAgdG8gY29udGludWUgaXRlcmF0aW9uLCBhbmRcbiAgICAgKiBgZmFsc2VgIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5VbyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLmN1cnNvcih7fSk7XG4gICAgICAgIHJldHVybiBuZXcgeGUoKGZ1bmN0aW9uKG4sIHIpIHtcbiAgICAgICAgICAgIGUub25lcnJvciA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IHpuKHQudGFyZ2V0LmVycm9yKTtcbiAgICAgICAgICAgICAgICByKGUpO1xuICAgICAgICAgICAgfSwgZS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHIgPSBlLnRhcmdldC5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgciA/IHQoci5wcmltYXJ5S2V5LCByLnZhbHVlKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgIHQgPyByLmNvbnRpbnVlKCkgOiBuKCk7XG4gICAgICAgICAgICAgICAgfSkpIDogbigpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLndhID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IFtdO1xuICAgICAgICByZXR1cm4gbmV3IHhlKChmdW5jdGlvbihyLCBpKSB7XG4gICAgICAgICAgICB0Lm9uZXJyb3IgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgaSh0LnRhcmdldC5lcnJvcik7XG4gICAgICAgICAgICB9LCB0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IHQudGFyZ2V0LnJlc3VsdDtcbiAgICAgICAgICAgICAgICBpZiAoaSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IG5ldyBVbihpKSwgcyA9IGUoaS5wcmltYXJ5S2V5LCBpLnZhbHVlLCBvKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMgaW5zdGFuY2VvZiB4ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHUgPSBzLmNhdGNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8uZG9uZSgpLCB4ZS5yZWplY3QodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuLnB1c2godSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgby5QbiA/IHIoKSA6IG51bGwgPT09IG8uRWEgPyBpLmNvbnRpbnVlKCkgOiBpLmNvbnRpbnVlKG8uRWEpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSByKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4geGUudm4obik7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5vcHRpb25zID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHZvaWQgMDtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gdCAmJiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCA/IG4gPSB0IDogZSA9IHQpLCB7XG4gICAgICAgICAgICBpbmRleDogbixcbiAgICAgICAgICAgIHJhbmdlOiBlXG4gICAgICAgIH07XG4gICAgfSwgdC5wcm90b3R5cGUuY3Vyc29yID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IFwibmV4dFwiO1xuICAgICAgICBpZiAodC5yZXZlcnNlICYmIChlID0gXCJwcmV2XCIpLCB0LmluZGV4KSB7XG4gICAgICAgICAgICB2YXIgbiA9IHRoaXMuc3RvcmUuaW5kZXgodC5pbmRleCk7XG4gICAgICAgICAgICByZXR1cm4gdC5EaCA/IG4ub3BlbktleUN1cnNvcih0LnJhbmdlLCBlKSA6IG4ub3BlbkN1cnNvcih0LnJhbmdlLCBlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zdG9yZS5vcGVuQ3Vyc29yKHQucmFuZ2UsIGUpO1xuICAgIH0sIHQ7XG59KCk7XG5cbi8qKlxuICogQSB3cmFwcGVyIGFyb3VuZCBhbiBJREJPYmplY3RTdG9yZSBwcm92aWRpbmcgYW4gQVBJIHRoYXQ6XG4gKlxuICogMSkgSGFzIGdlbmVyaWMgS2V5VHlwZSAvIFZhbHVlVHlwZSBwYXJhbWV0ZXJzIHRvIHByb3ZpZGUgc3Ryb25nbHktdHlwZWRcbiAqIG1ldGhvZHMgZm9yIGFjdGluZyBhZ2FpbnN0IHRoZSBvYmplY3Qgc3RvcmUuXG4gKiAyKSBEZWFscyB3aXRoIEluZGV4ZWREQidzIG9uc3VjY2VzcyAvIG9uZXJyb3IgZXZlbnQgY2FsbGJhY2tzLCBtYWtpbmcgZXZlcnlcbiAqIG1ldGhvZCByZXR1cm4gYSBQZXJzaXN0ZW5jZVByb21pc2UgaW5zdGVhZC5cbiAqIDMpIFByb3ZpZGVzIGEgaGlnaGVyLWxldmVsIEFQSSB0byBhdm9pZCBuZWVkaW5nIHRvIGRvIGV4Y2Vzc2l2ZSB3cmFwcGluZyBvZlxuICogaW50ZXJtZWRpYXRlIEluZGV4ZWREQiB0eXBlcyAoSURCQ3Vyc29yV2l0aFZhbHVlLCBldGMuKVxuICovXG4vKipcbiAqIFdyYXBzIGFuIElEQlJlcXVlc3QgaW4gYSBQZXJzaXN0ZW5jZVByb21pc2UsIHVzaW5nIHRoZSBvbnN1Y2Nlc3MgLyBvbmVycm9yXG4gKiBoYW5kbGVycyB0byByZXNvbHZlIC8gcmVqZWN0IHRoZSBQZXJzaXN0ZW5jZVByb21pc2UgYXMgYXBwcm9wcmlhdGUuXG4gKi9cbmZ1bmN0aW9uIEZuKHQpIHtcbiAgICByZXR1cm4gbmV3IHhlKChmdW5jdGlvbihlLCBuKSB7XG4gICAgICAgIHQub25zdWNjZXNzID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdmFyIG4gPSB0LnRhcmdldC5yZXN1bHQ7XG4gICAgICAgICAgICBlKG4pO1xuICAgICAgICB9LCB0Lm9uZXJyb3IgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHpuKHQudGFyZ2V0LmVycm9yKTtcbiAgICAgICAgICAgIG4oZSk7XG4gICAgICAgIH07XG4gICAgfSkpO1xufVxuXG4vLyBHdWFyZCBzbyB3ZSBvbmx5IHJlcG9ydCB0aGUgZXJyb3Igb25jZS5cbnZhciBCbiA9ICExO1xuXG5mdW5jdGlvbiB6bih0KSB7XG4gICAgdmFyIGUgPSBQbi5hYShpLmdldFVBKCkpO1xuICAgIGlmIChlID49IDEyLjIgJiYgZSA8IDEzKSB7XG4gICAgICAgIHZhciBuID0gXCJBbiBpbnRlcm5hbCBlcnJvciB3YXMgZW5jb3VudGVyZWQgaW4gdGhlIEluZGV4ZWQgRGF0YWJhc2Ugc2VydmVyXCI7XG4gICAgICAgIGlmICh0Lm1lc3NhZ2UuaW5kZXhPZihuKSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBXcmFwIGVycm9yIGluIGEgbW9yZSBkZXNjcmlwdGl2ZSBvbmUuXG4gICAgICAgICAgICB2YXIgciA9IG5ldyBjKFwiaW50ZXJuYWxcIiwgXCJJT1NfSU5ERVhFRERCX0JVRzE6IEluZGV4ZWREYiBoYXMgdGhyb3duICdcIiArIG4gKyBcIicuIFRoaXMgaXMgbGlrZWx5IGR1ZSB0byBhbiB1bmF2b2lkYWJsZSBidWcgaW4gaU9TLiBTZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xLzU2NDk2Mjk2LzExMDkxNSBmb3IgZGV0YWlscyBhbmQgYSBwb3RlbnRpYWwgd29ya2Fyb3VuZC5cIik7XG4gICAgICAgICAgICByZXR1cm4gQm4gfHwgKEJuID0gITAsIFxuICAgICAgICAgICAgLy8gVGhyb3cgYSBnbG9iYWwgZXhjZXB0aW9uIG91dHNpZGUgb2YgdGhpcyBwcm9taXNlIGNoYWluLCBmb3IgdGhlIHVzZXIgdG9cbiAgICAgICAgICAgIC8vIHBvdGVudGlhbGx5IGNhdGNoLlxuICAgICAgICAgICAgc2V0VGltZW91dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgcjtcbiAgICAgICAgICAgIH0pLCAwKSksIHI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHQ7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFJlcHJlc2VudHMgYW4gb3BlcmF0aW9uIHNjaGVkdWxlZCB0byBiZSBydW4gaW4gdGhlIGZ1dHVyZSBvbiBhbiBBc3luY1F1ZXVlLlxuICpcbiAqIEl0IGlzIGNyZWF0ZWQgdmlhIERlbGF5ZWRPcGVyYXRpb24uY3JlYXRlQW5kU2NoZWR1bGUoKS5cbiAqXG4gKiBTdXBwb3J0cyBjYW5jZWxsYXRpb24gKHZpYSBjYW5jZWwoKSkgYW5kIGVhcmx5IGV4ZWN1dGlvbiAodmlhIHNraXBEZWxheSgpKS5cbiAqXG4gKiBOb3RlOiBXZSBpbXBsZW1lbnQgYFByb21pc2VMaWtlYCBpbnN0ZWFkIG9mIGBQcm9taXNlYCwgYXMgdGhlIGBQcm9taXNlYCB0eXBlXG4gKiBpbiBuZXdlciB2ZXJzaW9ucyBvZiBUeXBlU2NyaXB0IGRlZmluZXMgYGZpbmFsbHlgLCB3aGljaCBpcyBub3QgYXZhaWxhYmxlIGluXG4gKiBJRS5cbiAqLyB2YXIgR24gPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSwgbiwgciwgaSkge1xuICAgICAgICB0aGlzLkFhID0gdCwgdGhpcy5FciA9IGUsIHRoaXMubWEgPSBuLCB0aGlzLm9wID0gciwgdGhpcy5QYSA9IGksIHRoaXMuVmEgPSBuZXcgVWUsIFxuICAgICAgICB0aGlzLnRoZW4gPSB0aGlzLlZhLnByb21pc2UudGhlbi5iaW5kKHRoaXMuVmEucHJvbWlzZSksIFxuICAgICAgICAvLyBJdCdzIG5vcm1hbCBmb3IgdGhlIGRlZmVycmVkIHByb21pc2UgdG8gYmUgY2FuY2VsZWQgKGR1ZSB0byBjYW5jZWxsYXRpb24pXG4gICAgICAgIC8vIGFuZCBzbyB3ZSBhdHRhY2ggYSBkdW1teSBjYXRjaCBjYWxsYmFjayB0byBhdm9pZFxuICAgICAgICAvLyAnVW5oYW5kbGVkUHJvbWlzZVJlamVjdGlvbldhcm5pbmcnIGxvZyBzcGFtLlxuICAgICAgICB0aGlzLlZhLnByb21pc2UuY2F0Y2goKGZ1bmN0aW9uKHQpIHt9KSlcbiAgICAgICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhIERlbGF5ZWRPcGVyYXRpb24gdGhhdCBoYXMgYmVlbiBzY2hlZHVsZWQgdG8gYmVcbiAgICAgKiBleGVjdXRlZCBvbiB0aGUgcHJvdmlkZWQgYXN5bmNRdWV1ZSBhZnRlciB0aGUgcHJvdmlkZWQgZGVsYXlNcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhc3luY1F1ZXVlIFRoZSBxdWV1ZSB0byBzY2hlZHVsZSB0aGUgb3BlcmF0aW9uIG9uLlxuICAgICAqIEBwYXJhbSBpZCBBIFRpbWVyIElEIGlkZW50aWZ5aW5nIHRoZSB0eXBlIG9mIG9wZXJhdGlvbiB0aGlzIGlzLlxuICAgICAqIEBwYXJhbSBkZWxheU1zIFRoZSBkZWxheSAobXMpIGJlZm9yZSB0aGUgb3BlcmF0aW9uIHNob3VsZCBiZSBzY2hlZHVsZWQuXG4gICAgICogQHBhcmFtIG9wIFRoZSBvcGVyYXRpb24gdG8gcnVuLlxuICAgICAqIEBwYXJhbSByZW1vdmFsQ2FsbGJhY2sgQSBjYWxsYmFjayB0byBiZSBjYWxsZWQgc3luY2hyb25vdXNseSBvbmNlIHRoZVxuICAgICAqICAgb3BlcmF0aW9uIGlzIGV4ZWN1dGVkIG9yIGNhbmNlbGVkLCBub3RpZnlpbmcgdGhlIEFzeW5jUXVldWUgdG8gcmVtb3ZlIGl0XG4gICAgICogICBmcm9tIGl0cyBkZWxheWVkT3BlcmF0aW9ucyBsaXN0LlxuICAgICAqICAgUE9SVElORyBOT1RFOiBUaGlzIGV4aXN0cyB0byBwcmV2ZW50IG1ha2luZyByZW1vdmVEZWxheWVkT3BlcmF0aW9uKCkgYW5kXG4gICAgICogICB0aGUgRGVsYXllZE9wZXJhdGlvbiBjbGFzcyBwdWJsaWMuXG4gICAgICovO1xuICAgIH1cbiAgICByZXR1cm4gdC5nYSA9IGZ1bmN0aW9uKGUsIG4sIHIsIGksIG8pIHtcbiAgICAgICAgdmFyIHMgPSBuZXcgdChlLCBuLCBEYXRlLm5vdygpICsgciwgaSwgbyk7XG4gICAgICAgIHJldHVybiBzLnN0YXJ0KHIpLCBzO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyB0aGUgdGltZXIuIFRoaXMgaXMgY2FsbGVkIGltbWVkaWF0ZWx5IGFmdGVyIGNvbnN0cnVjdGlvbiBieVxuICAgICAqIGNyZWF0ZUFuZFNjaGVkdWxlKCkuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgdGhpcy5wYSA9IHNldFRpbWVvdXQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGUueWEoKTtcbiAgICAgICAgfSksIHQpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFF1ZXVlcyB0aGUgb3BlcmF0aW9uIHRvIHJ1biBpbW1lZGlhdGVseSAoaWYgaXQgaGFzbid0IGFscmVhZHkgYmVlbiBydW4gb3JcbiAgICAgKiBjYW5jZWxlZCkuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUudnIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueWEoKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBDYW5jZWxzIHRoZSBvcGVyYXRpb24gaWYgaXQgaGFzbid0IGFscmVhZHkgYmVlbiBleGVjdXRlZCBvciBjYW5jZWxlZC4gVGhlXG4gICAgICogcHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkLlxuICAgICAqXG4gICAgICogQXMgbG9uZyBhcyB0aGUgb3BlcmF0aW9uIGhhcyBub3QgeWV0IGJlZW4gcnVuLCBjYWxsaW5nIGNhbmNlbCgpIHByb3ZpZGVzIGFcbiAgICAgKiBndWFyYW50ZWUgdGhhdCB0aGUgb3BlcmF0aW9uIHdpbGwgbm90IGJlIHJ1bi5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5jYW5jZWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIG51bGwgIT09IHRoaXMucGEgJiYgKHRoaXMuY2xlYXJUaW1lb3V0KCksIHRoaXMuVmEucmVqZWN0KG5ldyBjKGguQ0FOQ0VMTEVELCBcIk9wZXJhdGlvbiBjYW5jZWxsZWRcIiArICh0ID8gXCI6IFwiICsgdCA6IFwiXCIpKSkpO1xuICAgIH0sIHQucHJvdG90eXBlLnlhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgdGhpcy5BYS51bygoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbCAhPT0gdC5wYSA/ICh0LmNsZWFyVGltZW91dCgpLCB0Lm9wKCkudGhlbigoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0LlZhLnJlc29sdmUoZSk7XG4gICAgICAgICAgICB9KSkpIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5jbGVhclRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgbnVsbCAhPT0gdGhpcy5wYSAmJiAodGhpcy5QYSh0aGlzKSwgY2xlYXJUaW1lb3V0KHRoaXMucGEpLCB0aGlzLnBhID0gbnVsbCk7XG4gICAgfSwgdDtcbn0oKSwgV24gPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgLy8gVGhlIGxhc3QgcHJvbWlzZSBpbiB0aGUgcXVldWUuXG4gICAgICAgICAgICAgICAgdGhpcy5iYSA9IFByb21pc2UucmVzb2x2ZSgpLCBcbiAgICAgICAgLy8gVGhlIGxhc3QgcmV0cnlhYmxlIG9wZXJhdGlvbi4gUmV0cnlhYmxlIG9wZXJhdGlvbiBhcmUgcnVuIGluIG9yZGVyIGFuZFxuICAgICAgICAvLyByZXRyaWVkIHdpdGggYmFja29mZi5cbiAgICAgICAgdGhpcy52YSA9IFByb21pc2UucmVzb2x2ZSgpLCBcbiAgICAgICAgLy8gSXMgdGhpcyBBc3luY1F1ZXVlIGJlaW5nIHNodXQgZG93bj8gT25jZSBpdCBpcyBzZXQgdG8gdHJ1ZSwgaXQgd2lsbCBub3RcbiAgICAgICAgLy8gYmUgY2hhbmdlZCBhZ2Fpbi5cbiAgICAgICAgdGhpcy5TYSA9ICExLCBcbiAgICAgICAgLy8gT3BlcmF0aW9ucyBzY2hlZHVsZWQgdG8gYmUgcXVldWVkIGluIHRoZSBmdXR1cmUuIE9wZXJhdGlvbnMgYXJlXG4gICAgICAgIC8vIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCBhZnRlciB0aGV5IGFyZSBydW4gb3IgY2FuY2VsZWQuXG4gICAgICAgIHRoaXMuRGEgPSBbXSwgXG4gICAgICAgIC8vIHZpc2libGUgZm9yIHRlc3RpbmdcbiAgICAgICAgdGhpcy5DYSA9IG51bGwsIFxuICAgICAgICAvLyBGbGFnIHNldCB3aGlsZSB0aGVyZSdzIGFuIG91dHN0YW5kaW5nIEFzeW5jUXVldWUgb3BlcmF0aW9uLCB1c2VkIGZvclxuICAgICAgICAvLyBhc3NlcnRpb24gc2FuaXR5LWNoZWNrcy5cbiAgICAgICAgdGhpcy5GYSA9ICExLCBcbiAgICAgICAgLy8gTGlzdCBvZiBUaW1lcklkcyB0byBmYXN0LWZvcndhcmQgZGVsYXlzIGZvci5cbiAgICAgICAgdGhpcy5OYSA9IFtdLCBcbiAgICAgICAgLy8gQmFja29mZiB0aW1lciB1c2VkIHRvIHNjaGVkdWxlIHJldHJpZXMgZm9yIHJldHJ5YWJsZSBvcGVyYXRpb25zXG4gICAgICAgIHRoaXMuJGEgPSBuZXcgQ2UodGhpcywgXCJhc3luY19xdWV1ZV9yZXRyeVwiIC8qIEFzeW5jUXVldWVSZXRyeSAqLyksIFxuICAgICAgICAvLyBWaXNpYmlsaXR5IGhhbmRsZXIgdGhhdCB0cmlnZ2VycyBhbiBpbW1lZGlhdGUgcmV0cnkgb2YgYWxsIHJldHJ5YWJsZVxuICAgICAgICAvLyBvcGVyYXRpb25zLiBNZWFudCB0byBzcGVlZCB1cCByZWNvdmVyeSB3aGVuIHdlIHJlZ2FpbiBmaWxlIHN5c3RlbSBhY2Nlc3NcbiAgICAgICAgLy8gYWZ0ZXIgcGFnZSBjb21lcyBpbnRvIGZvcmVncm91bmQuXG4gICAgICAgIHRoaXMua2EgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0LiRhLmJyKCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBlID0gY2UubnQoKS53aW5kb3c7XG4gICAgICAgIGUgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBlLmFkZEV2ZW50TGlzdGVuZXIgJiYgZS5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCB0aGlzLmthKTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJMYVwiLCB7XG4gICAgICAgIC8vIElzIHRoaXMgQXN5bmNRdWV1ZSBiZWluZyBzaHV0IGRvd24/IElmIHRydWUsIHRoaXMgaW5zdGFuY2Ugd2lsbCBub3QgZW5xdWV1ZVxuICAgICAgICAvLyBhbnkgbmV3IG9wZXJhdGlvbnMsIFByb21pc2VzIGZyb20gZW5xdWV1ZSByZXF1ZXN0cyB3aWxsIG5vdCByZXNvbHZlLlxuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuU2E7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIFxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBuZXcgb3BlcmF0aW9uIHRvIHRoZSBxdWV1ZSB3aXRob3V0IHdhaXRpbmcgZm9yIGl0IHRvIGNvbXBsZXRlIChpLmUuXG4gICAgICogd2UgaWdub3JlIHRoZSBQcm9taXNlIHJlc3VsdCkuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUudW8gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICAgICAgdGhpcy5lbnF1ZXVlKHQpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJlZ2FyZGxlc3MgaWYgdGhlIHF1ZXVlIGhhcyBpbml0aWFsaXplZCBzaHV0ZG93biwgYWRkcyBhIG5ldyBvcGVyYXRpb24gdG8gdGhlXG4gICAgICogcXVldWUgd2l0aG91dCB3YWl0aW5nIGZvciBpdCB0byBjb21wbGV0ZSAoaS5lLiB3ZSBpZ25vcmUgdGhlIFByb21pc2UgcmVzdWx0KS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5NYSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5PYSgpLCBcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xuICAgICAgICB0aGlzLnhhKHQpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJlZ2FyZGxlc3MgaWYgdGhlIHF1ZXVlIGhhcyBpbml0aWFsaXplZCBzaHV0ZG93biwgYWRkcyBhIG5ldyBvcGVyYXRpb24gdG8gdGhlXG4gICAgICogcXVldWUuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuQmEgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLk9hKCksIHRoaXMueGEodCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQWRkcyBhIG5ldyBvcGVyYXRpb24gdG8gdGhlIHF1ZXVlIGFuZCBpbml0aWFsaXplIHRoZSBzaHV0IGRvd24gb2YgdGhpcyBxdWV1ZS5cbiAgICAgKiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2hlbiB0aGUgcHJvbWlzZSByZXR1cm5lZCBieSB0aGUgbmV3XG4gICAgICogb3BlcmF0aW9uIGlzICh3aXRoIGl0cyB2YWx1ZSkuXG4gICAgICogT25jZSB0aGlzIG1ldGhvZCBpcyBjYWxsZWQsIHRoZSBvbmx5IHBvc3NpYmxlIHdheSB0byByZXF1ZXN0IHJ1bm5pbmcgYW4gb3BlcmF0aW9uXG4gICAgICogaXMgdGhyb3VnaCBgZW5xdWV1ZUFuZEZvcmdldEV2ZW5BZnRlclNodXRkb3duYC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5xYSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbjtcbiAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLk9hKCksIHRoaXMuU2EgPyBbIDMgLypicmVhayovICwgMiBdIDogKHRoaXMuU2EgPSAhMCwgKG4gPSBjZS5udCgpLndpbmRvdykgJiYgbi5yZW1vdmVFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCB0aGlzLmthKSwgXG4gICAgICAgICAgICAgICAgICAgIFsgNCAvKnlpZWxkKi8gLCB0aGlzLkJhKHQpIF0pO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGUuc2VudCgpLCBlLmxhYmVsID0gMjtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbmV3IG9wZXJhdGlvbiB0byB0aGUgcXVldWUuIFJldHVybnMgYSBwcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZFxuICAgICAqIHdoZW4gdGhlIHByb21pc2UgcmV0dXJuZWQgYnkgdGhlIG5ldyBvcGVyYXRpb24gaXMgKHdpdGggaXRzIHZhbHVlKS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5lbnF1ZXVlID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5PYSgpLCB0aGlzLlNhID8gbmV3IFByb21pc2UoKGZ1bmN0aW9uKHQpIHt9KSkgOiB0aGlzLnhhKHQpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIEVucXVldWUgYSByZXRyeWFibGUgb3BlcmF0aW9uLlxuICAgICAqXG4gICAgICogQSByZXRyeWFibGUgb3BlcmF0aW9uIGlzIHJlc2NoZWR1bGVkIHdpdGggYmFja29mZiBpZiBpdCBmYWlscyB3aXRoIGFcbiAgICAgKiBJbmRleGVkRGJUcmFuc2FjdGlvbkVycm9yICh0aGUgZXJyb3IgdHlwZSB1c2VkIGJ5IFNpbXBsZURiKS4gQWxsXG4gICAgICogcmV0cnlhYmxlIG9wZXJhdGlvbnMgYXJlIGV4ZWN1dGVkIGluIG9yZGVyIGFuZCBvbmx5IHJ1biBpZiBhbGwgcHJpb3JcbiAgICAgKiBvcGVyYXRpb25zIHdlcmUgcmV0cmllZCBzdWNjZXNzZnVsbHkuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuVWEgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgdGhpcy5PYSgpLCB0aGlzLlNhIHx8ICh0aGlzLnZhID0gdGhpcy52YS50aGVuKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciByID0gbmV3IFVlLCBpID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKG4sIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5fX2dlbmVyYXRvcih0aGlzLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS50cnlzLnB1c2goWyAwLCAyLCAsIDMgXSksIFsgNCAvKnlpZWxkKi8gLCB0KCkgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuc2VudCgpLCByLnJlc29sdmUoKSwgdGhpcy4kYS5yZXNldCgpLCBbIDMgLypicmVhayovICwgMyBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXFuKG4gPSBlLnNlbnQoKSkpIHRocm93IHIucmVzb2x2ZSgpLCBuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZhaWx1cmUgd2lsbCBiZSBoYW5kbGVkIGJ5IEFzeW5jUXVldWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlKFwiQXN5bmNRdWV1ZVwiLCBcIk9wZXJhdGlvbiBmYWlsZWQgd2l0aCByZXRyeWFibGUgZXJyb3I6IFwiICsgbiksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGEuZ3IoaSksIFsgMyAvKmJyZWFrKi8gLCAzIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBuLnVvKGkpLCByLnByb21pc2U7XG4gICAgICAgIH0pKSk7XG4gICAgfSwgdC5wcm90b3R5cGUueGEgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcywgbiA9IHRoaXMuYmEudGhlbigoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZS5GYSA9ICEwLCB0KCkuY2F0Y2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAvLyBSZS10aHJvdyB0aGUgZXJyb3Igc28gdGhhdCB0aGlzLnRhaWwgYmVjb21lcyBhIHJlamVjdGVkIFByb21pc2UgYW5kXG4gICAgICAgICAgICAgICAgLy8gYWxsIGZ1cnRoZXIgYXR0ZW1wdHMgdG8gY2hhaW4gKHZpYSAudGhlbikgd2lsbCBqdXN0IHNob3J0LWNpcmN1aXRcbiAgICAgICAgICAgICAgICAvLyBhbmQgcmV0dXJuIHRoZSByZWplY3RlZCBQcm9taXNlLlxuICAgICAgICAgICAgICAgIHRocm93IGUuQ2EgPSB0LCBlLkZhID0gITEsIHllKFwiSU5URVJOQUwgVU5IQU5ETEVEIEVSUk9SOiBcIiwgdC5zdGFjayB8fCB0Lm1lc3NhZ2UgfHwgXCJcIiksIFxuICAgICAgICAgICAgICAgIHQ7XG4gICAgICAgICAgICB9KSkudGhlbigoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLkZhID0gITEsIHQ7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmEgPSBuLCBuO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFNjaGVkdWxlcyBhbiBvcGVyYXRpb24gdG8gYmUgcXVldWVkIG9uIHRoZSBBc3luY1F1ZXVlIG9uY2UgdGhlIHNwZWNpZmllZFxuICAgICAqIGBkZWxheU1zYCBoYXMgZWxhcHNlZC4gVGhlIHJldHVybmVkIERlbGF5ZWRPcGVyYXRpb24gY2FuIGJlIHVzZWQgdG8gY2FuY2VsXG4gICAgICogb3IgZmFzdC1mb3J3YXJkIHRoZSBvcGVyYXRpb24gcHJpb3IgdG8gaXRzIHJ1bm5pbmcuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUueXIgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHZhciByID0gdGhpcztcbiAgICAgICAgdGhpcy5PYSgpLCBcbiAgICAgICAgLy8gRmFzdC1mb3J3YXJkIGRlbGF5cyBmb3IgdGltZXJJZHMgdGhhdCBoYXZlIGJlZW4gb3ZlcnJpZGVuLlxuICAgICAgICB0aGlzLk5hLmluZGV4T2YodCkgPiAtMSAmJiAoZSA9IDApO1xuICAgICAgICB2YXIgaSA9IEduLmdhKHRoaXMsIHQsIGUsIG4sIChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gci5RYSh0KTtcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gdGhpcy5EYS5wdXNoKGkpLCBpO1xuICAgIH0sIHQucHJvdG90eXBlLk9hID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuQ2EgJiYgZ2UoKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBWZXJpZmllcyB0aGVyZSdzIGFuIG9wZXJhdGlvbiBjdXJyZW50bHkgaW4tcHJvZ3Jlc3Mgb24gdGhlIEFzeW5jUXVldWUuXG4gICAgICogVW5mb3J0dW5hdGVseSB3ZSBjYW4ndCB2ZXJpZnkgdGhhdCB0aGUgcnVubmluZyBjb2RlIGlzIGluIHRoZSBwcm9taXNlIGNoYWluXG4gICAgICogb2YgdGhhdCBvcGVyYXRpb24sIHNvIHRoaXMgaXNuJ3QgYSBmb29scHJvb2YgY2hlY2ssIGJ1dCBpdCBzaG91bGQgYmUgZW5vdWdoXG4gICAgICogdG8gY2F0Y2ggc29tZSBidWdzLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLldhID0gZnVuY3Rpb24oKSB7fSwgXG4gICAgLyoqXG4gICAgICogV2FpdHMgdW50aWwgYWxsIGN1cnJlbnRseSBxdWV1ZWQgdGFza3MgYXJlIGZpbmlzaGVkIGV4ZWN1dGluZy4gRGVsYXllZFxuICAgICAqIG9wZXJhdGlvbnMgYXJlIG5vdCBydW4uXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuamEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdDtcbiAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDQgLyp5aWVsZCovICwgdCA9IHRoaXMuYmEgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBlLnNlbnQoKSwgZS5sYWJlbCA9IDI7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgIT09IHRoaXMuYmEpIHJldHVybiBbIDMgLypicmVhayovICwgMCBdO1xuICAgICAgICAgICAgICAgICAgICBlLmxhYmVsID0gMztcblxuICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBGb3IgVGVzdHM6IERldGVybWluZSBpZiBhIGRlbGF5ZWQgb3BlcmF0aW9uIHdpdGggYSBwYXJ0aWN1bGFyIFRpbWVySWRcbiAgICAgKiBleGlzdHMuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuS2EgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIGUgPSAwLCBuID0gdGhpcy5EYTsgZSA8IG4ubGVuZ3RoOyBlKyspIHtcbiAgICAgICAgICAgIGlmIChuW2VdLkVyID09PSB0KSByZXR1cm4gITA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICExO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIEZvciBUZXN0czogUnVucyBzb21lIG9yIGFsbCBkZWxheWVkIG9wZXJhdGlvbnMgZWFybHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGFzdFRpbWVySWQgRGVsYXllZCBvcGVyYXRpb25zIHVwIHRvIGFuZCBpbmNsdWRpbmcgdGhpcyBUaW1lcklkIHdpbGxcbiAgICAgKiAgYmUgZHJhaW5lZC4gUGFzcyBUaW1lcklkLkFsbCB0byBydW4gYWxsIGRlbGF5ZWQgb3BlcmF0aW9ucy5cbiAgICAgKiBAcmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyBvbmNlIGFsbCBvcGVyYXRpb25zIGhhdmUgYmVlbiBydW4uXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuR2EgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgLy8gTm90ZSB0aGF0IGRyYWluaW5nIG1heSBnZW5lcmF0ZSBtb3JlIGRlbGF5ZWQgb3BzLCBzbyB3ZSBkbyB0aGF0IGZpcnN0LlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmphKCkudGhlbigoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBSdW4gb3BzIGluIHRoZSBzYW1lIG9yZGVyIHRoZXknZCBydW4gaWYgdGhleSByYW4gbmF0dXJhbGx5LlxuICAgICAgICAgICAgZS5EYS5zb3J0KChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQubWEgLSBlLm1hO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgZm9yICh2YXIgbiA9IDAsIHIgPSBlLkRhOyBuIDwgci5sZW5ndGg7IG4rKykge1xuICAgICAgICAgICAgICAgIHZhciBpID0gcltuXTtcbiAgICAgICAgICAgICAgICBpZiAoaS52cigpLCBcImFsbFwiIC8qIEFsbCAqLyAhPT0gdCAmJiBpLkVyID09PSB0KSBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlLmphKCk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBGb3IgVGVzdHM6IFNraXAgYWxsIHN1YnNlcXVlbnQgZGVsYXlzIGZvciBhIHRpbWVyIGlkLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLnphID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLk5hLnB1c2godCk7XG4gICAgfSwgXG4gICAgLyoqIENhbGxlZCBvbmNlIGEgRGVsYXllZE9wZXJhdGlvbiBpcyBydW4gb3IgY2FuY2VsZWQuICovIHQucHJvdG90eXBlLlFhID0gZnVuY3Rpb24odCkge1xuICAgICAgICAvLyBOT1RFOiBpbmRleE9mIC8gc2xpY2UgYXJlIE8obiksIGJ1dCBkZWxheWVkT3BlcmF0aW9ucyBpcyBleHBlY3RlZCB0byBiZSBzbWFsbC5cbiAgICAgICAgdmFyIGUgPSB0aGlzLkRhLmluZGV4T2YodCk7XG4gICAgICAgIHRoaXMuRGEuc3BsaWNlKGUsIDEpO1xuICAgIH0sIHQ7XG59KCk7XG5cbi8qKlxuICogUmV0dXJucyBhIEZpcmVzdG9yZUVycm9yIHRoYXQgY2FuIGJlIHN1cmZhY2VkIHRvIHRoZSB1c2VyIGlmIHRoZSBwcm92aWRlZFxuICogZXJyb3IgaXMgYW4gSW5kZXhlZERiVHJhbnNhY3Rpb25FcnJvci4gUmUtdGhyb3dzIHRoZSBlcnJvciBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIFFuKHQsIGUpIHtcbiAgICBpZiAoeWUoXCJBc3luY1F1ZXVlXCIsIGUgKyBcIjogXCIgKyB0KSwgcW4odCkpIHJldHVybiBuZXcgYyhoLlVOQVZBSUxBQkxFLCBlICsgXCI6IFwiICsgdCk7XG4gICAgdGhyb3cgdDtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gZnVuY3Rpb24gS24odCwgZSkge1xuICAgIHZhciBuID0gdFswXSwgciA9IHRbMV0sIGkgPSBlWzBdLCBvID0gZVsxXSwgcyA9IGJlKG4sIGkpO1xuICAgIHJldHVybiAwID09PSBzID8gYmUociwgbykgOiBzO1xufVxuXG4vKipcbiAqIFVzZWQgdG8gY2FsY3VsYXRlIHRoZSBudGggc2VxdWVuY2UgbnVtYmVyLiBLZWVwcyBhIHJvbGxpbmcgYnVmZmVyIG9mIHRoZVxuICogbG93ZXN0IG4gdmFsdWVzIHBhc3NlZCB0byBgYWRkRWxlbWVudGAsIGFuZCBmaW5hbGx5IHJlcG9ydHMgdGhlIGxhcmdlc3Qgb2ZcbiAqIHRoZW0gaW4gYG1heFZhbHVlYC5cbiAqLyB2YXIgWW4gPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCkge1xuICAgICAgICB0aGlzLkhhID0gdCwgdGhpcy5idWZmZXIgPSBuZXcgUHQoS24pLCB0aGlzLllhID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLkphID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiArK3RoaXMuWWE7XG4gICAgfSwgdC5wcm90b3R5cGUuWGEgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gWyB0LCB0aGlzLkphKCkgXTtcbiAgICAgICAgaWYgKHRoaXMuYnVmZmVyLnNpemUgPCB0aGlzLkhhKSB0aGlzLmJ1ZmZlciA9IHRoaXMuYnVmZmVyLmFkZChlKTsgZWxzZSB7XG4gICAgICAgICAgICB2YXIgbiA9IHRoaXMuYnVmZmVyLmxhc3QoKTtcbiAgICAgICAgICAgIEtuKGUsIG4pIDwgMCAmJiAodGhpcy5idWZmZXIgPSB0aGlzLmJ1ZmZlci5kZWxldGUobikuYWRkKGUpKTtcbiAgICAgICAgfVxuICAgIH0sIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJtYXhWYWx1ZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBHdWFyYW50ZWVkIHRvIGJlIG5vbi1lbXB0eS4gSWYgd2UgZGVjaWRlIHdlIGFyZSBub3QgY29sbGVjdGluZyBhbnlcbiAgICAgICAgICAgIC8vIHNlcXVlbmNlIG51bWJlcnMsIG50aFNlcXVlbmNlTnVtYmVyIGJlbG93IHNob3J0LWNpcmN1aXRzLiBJZiB3ZSBoYXZlXG4gICAgICAgICAgICAvLyBkZWNpZGVkIHRoYXQgd2UgYXJlIGNvbGxlY3RpbmcgbiBzZXF1ZW5jZSBudW1iZXJzLCBpdCdzIGJlY2F1c2UgbiBpcyBzb21lXG4gICAgICAgICAgICAvLyBwZXJjZW50YWdlIG9mIHRoZSBleGlzdGluZyBzZXF1ZW5jZSBudW1iZXJzLiBUaGF0IG1lYW5zIHdlIHNob3VsZCBuZXZlclxuICAgICAgICAgICAgLy8gYmUgaW4gYSBzaXR1YXRpb24gd2hlcmUgd2UgYXJlIGNvbGxlY3Rpbmcgc2VxdWVuY2UgbnVtYmVycyBidXQgZG9uJ3RcbiAgICAgICAgICAgIC8vIGFjdHVhbGx5IGhhdmUgYW55LlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLmxhc3QoKVswXTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgdDtcbn0oKSwgJG4gPSB7XG4gICAgWmE6ICExLFxuICAgIHR1OiAwLFxuICAgIGV1OiAwLFxuICAgIHN1OiAwXG59LCBKbiA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdChcbiAgICAvLyBXaGVuIHdlIGF0dGVtcHQgdG8gY29sbGVjdCwgd2Ugd2lsbCBvbmx5IGRvIHNvIGlmIHRoZSBjYWNoZSBzaXplIGlzIGdyZWF0ZXIgdGhhbiB0aGlzXG4gICAgLy8gdGhyZXNob2xkLiBQYXNzaW5nIGBDT0xMRUNUSU9OX0RJU0FCTEVEYCBoZXJlIHdpbGwgY2F1c2UgY29sbGVjdGlvbiB0byBhbHdheXMgYmUgc2tpcHBlZC5cbiAgICB0LCBcbiAgICAvLyBUaGUgcGVyY2VudGFnZSBvZiBzZXF1ZW5jZSBudW1iZXJzIHRoYXQgd2Ugd2lsbCBhdHRlbXB0IHRvIGNvbGxlY3RcbiAgICBlLCBcbiAgICAvLyBBIGNhcCBvbiB0aGUgdG90YWwgbnVtYmVyIG9mIHNlcXVlbmNlIG51bWJlcnMgdGhhdCB3aWxsIGJlIGNvbGxlY3RlZC4gVGhpcyBwcmV2ZW50c1xuICAgIC8vIHVzIGZyb20gY29sbGVjdGluZyBhIGh1Z2UgbnVtYmVyIG9mIHNlcXVlbmNlIG51bWJlcnMgaWYgdGhlIGNhY2hlIGhhcyBncm93biB2ZXJ5IGxhcmdlLlxuICAgIG4pIHtcbiAgICAgICAgdGhpcy5pdSA9IHQsIHRoaXMubnUgPSBlLCB0aGlzLnJ1ID0gbjtcbiAgICB9XG4gICAgcmV0dXJuIHQuaHUgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBuZXcgdChlLCB0Lm91LCB0LmF1KTtcbiAgICB9LCB0O1xufSgpO1xuXG5Kbi51dSA9IC0xLCBKbi5jdSA9IDEwNDg1NzYsIEpuLl91ID0gNDE5NDMwNDAsIEpuLm91ID0gMTAsIEpuLmF1ID0gMWUzLCBKbi5sdSA9IG5ldyBKbihKbi5fdSwgSm4ub3UsIEpuLmF1KSwgXG5Kbi5ESVNBQkxFRCA9IG5ldyBKbihKbi51dSwgMCwgMCk7XG5cbi8qKlxuICogVGhpcyBjbGFzcyBpcyByZXNwb25zaWJsZSBmb3IgdGhlIHNjaGVkdWxpbmcgb2YgTFJVIGdhcmJhZ2UgY29sbGVjdGlvbi4gSXQgaGFuZGxlcyBjaGVja2luZ1xuICogd2hldGhlciBvciBub3QgR0MgaXMgZW5hYmxlZCwgYXMgd2VsbCBhcyB3aGljaCBkZWxheSB0byB1c2UgYmVmb3JlIHRoZSBuZXh0IHJ1bi5cbiAqL1xudmFyIEhuID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQsIGUpIHtcbiAgICAgICAgdGhpcy5rbyA9IHQsIHRoaXMuQWEgPSBlLCB0aGlzLmR1ID0gITEsIHRoaXMuZnUgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMua28uVHUuaXUgIT09IEpuLnV1ICYmIHRoaXMuRXUodCk7XG4gICAgfSwgdC5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmZ1ICYmICh0aGlzLmZ1LmNhbmNlbCgpLCB0aGlzLmZ1ID0gbnVsbCk7XG4gICAgfSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcInJvXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsICE9PSB0aGlzLmZ1O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCB0LnByb3RvdHlwZS5FdSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLCByID0gdGhpcy5kdSA/IDNlNSA6IDZlNDtcbiAgICAgICAgZGUoXCJMcnVHYXJiYWdlQ29sbGVjdG9yXCIsIFwiR2FyYmFnZSBjb2xsZWN0aW9uIHNjaGVkdWxlZCBpbiBcIiArIHIgKyBcIm1zXCIpLCB0aGlzLmZ1ID0gdGhpcy5BYS55cihcImxydV9nYXJiYWdlX2NvbGxlY3Rpb25cIiAvKiBMcnVHYXJiYWdlQ29sbGVjdGlvbiAqLyAsIHIsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBlLl9fYXdhaXRlcihuLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBuO1xuICAgICAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZnUgPSBudWxsLCB0aGlzLmR1ID0gITAsIGUubGFiZWwgPSAxO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUudHJ5cy5wdXNoKFsgMSwgMywgLCA3IF0pLCBbIDQgLyp5aWVsZCovICwgdC5JdSh0aGlzLmtvKSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuc2VudCgpLCBbIDMgLypicmVhayovICwgNyBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHFuKG4gPSBlLnNlbnQoKSkgPyAoZGUoXCJMcnVHYXJiYWdlQ29sbGVjdG9yXCIsIFwiSWdub3JpbmcgSW5kZXhlZERCIGVycm9yIGR1cmluZyBnYXJiYWdlIGNvbGxlY3Rpb246IFwiLCBuKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBbIDMgLypicmVhayovICwgNiBdKSA6IFsgMyAvKmJyZWFrKi8gLCA0IF07XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyA0IC8qeWllbGQqLyAsIGVyKG4pIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnNlbnQoKSwgZS5sYWJlbCA9IDY7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAzIC8qYnJlYWsqLyAsIDcgXTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDQgLyp5aWVsZCovICwgdGhpcy5FdSh0KSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuc2VudCgpLCBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdDtcbn0oKSwgWG4gPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSkge1xuICAgICAgICB0aGlzLnd1ID0gdCwgdGhpcy5UdSA9IGVcbiAgICAgICAgLyoqIEdpdmVuIGEgcGVyY2VudGlsZSBvZiB0YXJnZXQgdG8gY29sbGVjdCwgcmV0dXJucyB0aGUgbnVtYmVyIG9mIHRhcmdldHMgdG8gY29sbGVjdC4gKi87XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5SdSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud3UuTG8odCkubmV4dCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoZSAvIDEwMCAqIHQpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqIFJldHVybnMgdGhlIG50aCBzZXF1ZW5jZSBudW1iZXIsIGNvdW50aW5nIGluIG9yZGVyIGZyb20gdGhlIHNtYWxsZXN0LiAqLyB0LnByb3RvdHlwZS5BdSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICBpZiAoMCA9PT0gZSkgcmV0dXJuIHhlLnJlc29sdmUoUGUuZHIpO1xuICAgICAgICB2YXIgciA9IG5ldyBZbihlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMud3UuanModCwgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiByLlhhKHQuc2VxdWVuY2VOdW1iZXIpO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbi53dS5Pbyh0LCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByLlhhKHQpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gci5tYXhWYWx1ZTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGFyZ2V0cyB3aXRoIGEgc2VxdWVuY2UgbnVtYmVyIGVxdWFsIHRvIG9yIGxlc3MgdGhhbiB0aGUgZ2l2ZW4gdXBwZXIgYm91bmQsIGFuZCByZW1vdmVzXG4gICAgICogZG9jdW1lbnQgYXNzb2NpYXRpb25zIHdpdGggdGhvc2UgdGFyZ2V0cy5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5BaCA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud3UuQWgodCwgZSwgbik7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBkb2N1bWVudHMgdGhhdCBoYXZlIGEgc2VxdWVuY2UgbnVtYmVyIGVxdWFsIHRvIG9yIGxlc3MgdGhhbiB0aGUgdXBwZXIgYm91bmQgYW5kIGFyZSBub3RcbiAgICAgKiBvdGhlcndpc2UgcGlubmVkLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLlFvID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy53dS5Rbyh0LCBlKTtcbiAgICB9LCB0LnByb3RvdHlwZS5tdSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5UdS5pdSA9PT0gSm4udXUgPyAoZGUoXCJMcnVHYXJiYWdlQ29sbGVjdG9yXCIsIFwiR2FyYmFnZSBjb2xsZWN0aW9uIHNraXBwZWQ7IGRpc2FibGVkXCIpLCBcbiAgICAgICAgeGUucmVzb2x2ZSgkbikpIDogdGhpcy5qbyh0KS5uZXh0KChmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICByZXR1cm4gciA8IG4uVHUuaXUgPyAoZGUoXCJMcnVHYXJiYWdlQ29sbGVjdG9yXCIsIFwiR2FyYmFnZSBjb2xsZWN0aW9uIHNraXBwZWQ7IENhY2hlIHNpemUgXCIgKyByICsgXCIgaXMgbG93ZXIgdGhhbiB0aHJlc2hvbGQgXCIgKyBuLlR1Lml1KSwgXG4gICAgICAgICAgICAkbikgOiBuLlB1KHQsIGUpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuam8gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnd1LmpvKHQpO1xuICAgIH0sIHQucHJvdG90eXBlLlB1ID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiwgaSwgbywgcywgdSwgYSwgaCwgYyA9IHRoaXMsIGYgPSBEYXRlLm5vdygpO1xuICAgICAgICByZXR1cm4gdGhpcy5SdSh0LCB0aGlzLlR1Lm51KS5uZXh0KChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAvLyBDYXAgYXQgdGhlIGNvbmZpZ3VyZWQgbWF4XG4gICAgICAgICAgICByZXR1cm4gZSA+IGMuVHUucnUgPyAoZGUoXCJMcnVHYXJiYWdlQ29sbGVjdG9yXCIsIFwiQ2FwcGluZyBzZXF1ZW5jZSBudW1iZXJzIHRvIGNvbGxlY3QgZG93biB0byB0aGUgbWF4aW11bSBvZiBcIiArIGMuVHUucnUgKyBcIiBmcm9tIFwiICsgZSksIFxuICAgICAgICAgICAgaSA9IGMuVHUucnUpIDogaSA9IGUsIHMgPSBEYXRlLm5vdygpLCBjLkF1KHQsIGkpO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgcmV0dXJuIG4gPSByLCB1ID0gRGF0ZS5ub3coKSwgYy5BaCh0LCBuLCBlKTtcbiAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBvID0gZSwgYSA9IERhdGUubm93KCksIGMuUW8odCwgbik7XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gaCA9IERhdGUubm93KCksIGxlKCkgPD0gci5Mb2dMZXZlbC5ERUJVRyAmJiBkZShcIkxydUdhcmJhZ2VDb2xsZWN0b3JcIiwgXCJMUlUgR2FyYmFnZSBDb2xsZWN0aW9uXFxuXFx0Q291bnRlZCB0YXJnZXRzIGluIFwiICsgKHMgLSBmKSArIFwibXNcXG5cXHREZXRlcm1pbmVkIGxlYXN0IHJlY2VudGx5IHVzZWQgXCIgKyBpICsgXCIgaW4gXCIgKyAodSAtIHMpICsgXCJtc1xcblxcdFJlbW92ZWQgXCIgKyBvICsgXCIgdGFyZ2V0cyBpbiBcIiArIChhIC0gdSkgKyBcIm1zXFxuXFx0UmVtb3ZlZCBcIiArIHQgKyBcIiBkb2N1bWVudHMgaW4gXCIgKyAoaCAtIGEpICsgXCJtc1xcblRvdGFsIER1cmF0aW9uOiBcIiArIChoIC0gZikgKyBcIm1zXCIpLCBcbiAgICAgICAgICAgIHhlLnJlc29sdmUoe1xuICAgICAgICAgICAgICAgIFphOiAhMCxcbiAgICAgICAgICAgICAgICB0dTogaSxcbiAgICAgICAgICAgICAgICBldTogbyxcbiAgICAgICAgICAgICAgICBzdTogdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0O1xufSgpLCBabiA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdChcbiAgICAvKiogTWFuYWdlcyBvdXIgaW4tbWVtb3J5IG9yIGR1cmFibGUgcGVyc2lzdGVuY2UuICovXG4gICAgdCwgZSwgbikge1xuICAgICAgICB0aGlzLnBlcnNpc3RlbmNlID0gdCwgdGhpcy5WdSA9IGUsIFxuICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE1hcHMgYSB0YXJnZXRJRCB0byBkYXRhIGFib3V0IGl0cyB0YXJnZXQuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogUE9SVElORyBOT1RFOiBXZSBhcmUgdXNpbmcgYW4gaW1tdXRhYmxlIGRhdGEgc3RydWN0dXJlIG9uIFdlYiB0byBtYWtlIHJlLXJ1bnNcbiAgICAgICAgICAgICAqIG9mIGBhcHBseVJlbW90ZUV2ZW50KClgIGlkZW1wb3RlbnQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ndSA9IG5ldyBMdChiZSksIFxuICAgICAgICAvKiogTWFwcyBhIHRhcmdldCB0byBpdHMgdGFyZ2V0SUQuICovXG4gICAgICAgIC8vIFRPRE8od3VhbmR5KTogRXZhbHVhdGUgaWYgVGFyZ2V0SWQgY2FuIGJlIHBhcnQgb2YgVGFyZ2V0LlxuICAgICAgICB0aGlzLnB1ID0gbmV3IEFlKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gdC5jYW5vbmljYWxJZCgpO1xuICAgICAgICB9KSksIFxuICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoZSByZWFkIHRpbWUgb2YgdGhlIGxhc3QgZW50cnkgcHJvY2Vzc2VkIGJ5IGBnZXROZXdEb2N1bWVudENoYW5nZXMoKWAuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogUE9SVElORyBOT1RFOiBUaGlzIGlzIG9ubHkgdXNlZCBmb3IgbXVsdGktdGFiIHN5bmNocm9uaXphdGlvbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICB0aGlzLnl1ID0gZy5taW4oKSwgdGhpcy5XbiA9IHQudm8obiksIHRoaXMuYnUgPSB0LkNvKCksIHRoaXMuWWggPSB0LkRvKCksIHRoaXMudnUgPSBuZXcgT2UodGhpcy5idSwgdGhpcy5XbiwgdGhpcy5wZXJzaXN0ZW5jZS5GbygpKSwgXG4gICAgICAgIHRoaXMuVnUuU3UodGhpcy52dSlcbiAgICAgICAgLyoqIFN0YXJ0cyB0aGUgTG9jYWxTdG9yZS4gKi87XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogVGVsbHMgdGhlIExvY2FsU3RvcmUgdGhhdCB0aGUgY3VycmVudGx5IGF1dGhlbnRpY2F0ZWQgdXNlciBoYXMgY2hhbmdlZC5cbiAgICAgKlxuICAgICAqIEluIHJlc3BvbnNlIHRoZSBsb2NhbCBzdG9yZSBzd2l0Y2hlcyB0aGUgbXV0YXRpb24gcXVldWUgdG8gdGhlIG5ldyB1c2VyIGFuZFxuICAgICAqIHJldHVybnMgYW55IHJlc3VsdGluZyBkb2N1bWVudCBjaGFuZ2VzLlxuICAgICAqL1xuICAgIC8vIFBPUlRJTkcgTk9URTogQW5kcm9pZCBhbmQgaU9TIG9ubHkgcmV0dXJuIHRoZSBkb2N1bWVudHMgYWZmZWN0ZWQgYnkgdGhlXG4gICAgLy8gY2hhbmdlLlxuICAgIHQucHJvdG90eXBlLkR1ID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBuLCByLCBpLCBvID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuID0gdGhpcy5XbiwgciA9IHRoaXMudnUsIFsgNCAvKnlpZWxkKi8gLCB0aGlzLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiSGFuZGxlIHVzZXIgY2hhbmdlXCIsIFwicmVhZG9ubHlcIiwgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN3YXAgb3V0IHRoZSBtdXRhdGlvbiBxdWV1ZSwgZ3JhYmJpbmcgdGhlIHBlbmRpbmcgbXV0YXRpb24gYmF0Y2hlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmVmb3JlIGFuZCBhZnRlci5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8uV24uaWEoZSkubmV4dCgoZnVuY3Rpb24ocykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpID0gcywgbiA9IG8ucGVyc2lzdGVuY2Uudm8odCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlY3JlYXRlIG91ciBMb2NhbERvY3VtZW50c1ZpZXcgdXNpbmcgdGhlIG5ld1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE11dGF0aW9uUXVldWUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IG5ldyBPZShvLmJ1LCBuLCBvLnBlcnNpc3RlbmNlLkZvKCkpLCBuLmlhKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gW10sIG8gPSBbXSwgcyA9IFd0KCksIHUgPSAwLCBhID0gaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVuaW9uIHRoZSBvbGQvbmV3IGNoYW5nZWQga2V5cy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA7IHUgPCBhLmxlbmd0aDsgdSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoID0gYVt1XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5wdXNoKGguYmF0Y2hJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGMgPSAwLCBmID0gaC5tdXRhdGlvbnM7IGMgPCBmLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IGZbY107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gcy5hZGQobC5rZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHAgPSAwLCBkID0gdDsgcCA8IGQubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHkgPSBkW3BdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLnB1c2goeS5iYXRjaElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdiA9IDAsIGcgPSB5Lm11dGF0aW9uczsgdiA8IGcubGVuZ3RoOyB2KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtID0gZ1t2XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSBzLmFkZChtLmtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBzZXQgb2YgYWxsIChwb3RlbnRpYWxseSkgY2hhbmdlZCBkb2N1bWVudHMgYW5kIHRoZSBsaXN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb2YgbXV0YXRpb24gYmF0Y2ggSURzIHRoYXQgd2VyZSBhZmZlY3RlZCBieSBjaGFuZ2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByLlluKGUsIHMpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1OiB0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRnU6IG4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOdTogb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPSBlLnNlbnQoKSwgWyAyIC8qcmV0dXJuKi8gLCAodGhpcy5XbiA9IG4sIHRoaXMudnUgPSByLCB0aGlzLlZ1LlN1KHRoaXMudnUpLCBcbiAgICAgICAgICAgICAgICAgICAgaSkgXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKiBBY2NlcHQgbG9jYWxseSBnZW5lcmF0ZWQgTXV0YXRpb25zIGFuZCBjb21taXQgdGhlbSB0byBzdG9yYWdlLiAqLyB0LnByb3RvdHlwZS4kdSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUsIG4gPSB0aGlzLCByID0gdi5ub3coKSwgaSA9IHQucmVkdWNlKChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gdC5hZGQoZS5rZXkpO1xuICAgICAgICB9KSwgV3QoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiTG9jYWxseSB3cml0ZSBtdXRhdGlvbnNcIiwgXCJyZWFkd3JpdGVcIiwgKGZ1bmN0aW9uKG8pIHtcbiAgICAgICAgICAgIHJldHVybiBuLnZ1LlluKG8sIGkpLm5leHQoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICBlID0gaTtcbiAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgIC8vIEZvciBub24taWRlbXBvdGVudCBtdXRhdGlvbnMgKHN1Y2ggYXMgYEZpZWxkVmFsdWUuaW5jcmVtZW50KClgKSxcbiAgICAgICAgICAgICAgICAvLyB3ZSByZWNvcmQgdGhlIGJhc2Ugc3RhdGUgaW4gYSBzZXBhcmF0ZSBwYXRjaCBtdXRhdGlvbi4gVGhpcyBpc1xuICAgICAgICAgICAgICAgIC8vIGxhdGVyIHVzZWQgdG8gZ3VhcmFudGVlIGNvbnNpc3RlbnQgdmFsdWVzIGFuZCBwcmV2ZW50cyBmbGlja2VyXG4gICAgICAgICAgICAgICAgLy8gZXZlbiBpZiB0aGUgYmFja2VuZCBzZW5kcyB1cyBhbiB1cGRhdGUgdGhhdCBhbHJlYWR5IGluY2x1ZGVzIG91clxuICAgICAgICAgICAgICAgIC8vIHRyYW5zZm9ybS5cbiAgICAgICAgICAgICAgICB2YXIgcyA9IFtdLCB1ID0gMCwgYSA9IHQ7IHUgPCBhLmxlbmd0aDsgdSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoID0gYVt1XSwgYyA9IGguUHQoZS5nZXQoaC5rZXkpKTtcbiAgICAgICAgICAgICAgICAgICAgbnVsbCAhPSBjICYmIFxuICAgICAgICAgICAgICAgICAgICAvLyBOT1RFOiBUaGUgYmFzZSBzdGF0ZSBzaG91bGQgb25seSBiZSBhcHBsaWVkIGlmIHRoZXJlJ3Mgc29tZVxuICAgICAgICAgICAgICAgICAgICAvLyBleGlzdGluZyBkb2N1bWVudCB0byBvdmVycmlkZSwgc28gdXNlIGEgUHJlY29uZGl0aW9uIG9mXG4gICAgICAgICAgICAgICAgICAgIC8vIGV4aXN0cz10cnVlXG4gICAgICAgICAgICAgICAgICAgIHMucHVzaChuZXcgb3QoaC5rZXksIGMsIGZ0KGMucHJvdG8ubWFwVmFsdWUpLCBudC5leGlzdHMoITApKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBuLlduLlhvKG8sIHIsIHMsIHQpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSkudGhlbigoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdmFyIG4gPSB0LkluKGUpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBiYXRjaElkOiB0LmJhdGNoSWQsXG4gICAgICAgICAgICAgICAgRG46IG5cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBBY2tub3dsZWRnZSB0aGUgZ2l2ZW4gYmF0Y2guXG4gICAgICpcbiAgICAgKiBPbiB0aGUgaGFwcHkgcGF0aCB3aGVuIGEgYmF0Y2ggaXMgYWNrbm93bGVkZ2VkLCB0aGUgbG9jYWwgc3RvcmUgd2lsbFxuICAgICAqXG4gICAgICogICsgcmVtb3ZlIHRoZSBiYXRjaCBmcm9tIHRoZSBtdXRhdGlvbiBxdWV1ZTtcbiAgICAgKiAgKyBhcHBseSB0aGUgY2hhbmdlcyB0byB0aGUgcmVtb3RlIGRvY3VtZW50IGNhY2hlO1xuICAgICAqICArIHJlY2FsY3VsYXRlIHRoZSBsYXRlbmN5IGNvbXBlbnNhdGVkIHZpZXcgaW1wbGllZCBieSB0aG9zZSBjaGFuZ2VzICh0aGVyZVxuICAgICAqICAgIG1heSBiZSBtdXRhdGlvbnMgaW4gdGhlIHF1ZXVlIHRoYXQgYWZmZWN0IHRoZSBkb2N1bWVudHMgYnV0IGhhdmVuJ3QgYmVlblxuICAgICAqICAgIGFja25vd2xlZGdlZCB5ZXQpOyBhbmRcbiAgICAgKiAgKyBnaXZlIHRoZSBjaGFuZ2VkIGRvY3VtZW50cyBiYWNrIHRoZSBzeW5jIGVuZ2luZVxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIHJlc3VsdGluZyAobW9kaWZpZWQpIGRvY3VtZW50cy5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS56byA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkFja25vd2xlZGdlIGJhdGNoXCIsIFwicmVhZHdyaXRlLXByaW1hcnlcIiwgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIHZhciByID0gdC5iYXRjaC5rZXlzKCksIGkgPSBlLmJ1LllyKHtcbiAgICAgICAgICAgICAgICBYcjogITBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGUuV24uem8obiwgdC5iYXRjaCwgdC5zdHJlYW1Ub2tlbikubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUua3UobiwgdCwgaSk7XG4gICAgICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGkuYXBwbHkobik7XG4gICAgICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUuV24ub2Eobik7XG4gICAgICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUudnUuWW4obiwgcik7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgbXV0YXRpb25zIGZyb20gdGhlIE11dGF0aW9uUXVldWUgZm9yIHRoZSBzcGVjaWZpZWQgYmF0Y2g7XG4gICAgICogTG9jYWxEb2N1bWVudHMgd2lsbCBiZSByZWNhbGN1bGF0ZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgcmVzdWx0aW5nIG1vZGlmaWVkIGRvY3VtZW50cy5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5MdSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIlJlamVjdCBiYXRjaFwiLCBcInJlYWR3cml0ZS1wcmltYXJ5XCIsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICB2YXIgcjtcbiAgICAgICAgICAgIHJldHVybiBlLlduLlpvKG4sIHQpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWUobnVsbCAhPT0gdCksIHIgPSB0LmtleXMoKSwgZS5Xbi5yYShuLCB0KTtcbiAgICAgICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5Xbi5vYShuKTtcbiAgICAgICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS52dS5ZbihuLCByKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxhcmdlc3QgKGxhdGVzdCkgYmF0Y2ggaWQgaW4gbXV0YXRpb24gcXVldWUgdGhhdCBpcyBwZW5kaW5nIHNlcnZlciByZXNwb25zZS5cbiAgICAgKiBSZXR1cm5zIGBCQVRDSElEX1VOS05PV05gIGlmIHRoZSBxdWV1ZSBpcyBlbXB0eS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5zYSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiR2V0IGhpZ2hlc3QgdW5hY2tub3dsZWRnZWQgYmF0Y2ggaWRcIiwgXCJyZWFkb25seVwiLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmV0dXJuIHQuV24uc2EoZSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKiogUmV0dXJucyB0aGUgbGFzdCByZWNvcmRlZCBzdHJlYW0gdG9rZW4gZm9yIHRoZSBjdXJyZW50IHVzZXIuICovIHQucHJvdG90eXBlLllvID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJHZXQgbGFzdCBzdHJlYW0gdG9rZW5cIiwgXCJyZWFkb25seVwiLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmV0dXJuIHQuV24uWW8oZSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzdHJlYW0gdG9rZW4gZm9yIHRoZSBjdXJyZW50IHVzZXIgd2l0aG91dCBhY2tub3dsZWRnaW5nIGFueVxuICAgICAqIG11dGF0aW9uIGJhdGNoLiBUaGlzIGlzIHVzdWFsbHkgb25seSB1c2VmdWwgYWZ0ZXIgYSBzdHJlYW0gaGFuZHNoYWtlIG9yIGluXG4gICAgICogcmVzcG9uc2UgdG8gYW4gZXJyb3IgdGhhdCByZXF1aXJlcyBjbGVhcmluZyB0aGUgc3RyZWFtIHRva2VuLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLkpvID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiU2V0IGxhc3Qgc3RyZWFtIHRva2VuXCIsIFwicmVhZHdyaXRlLXByaW1hcnlcIiwgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIHJldHVybiBlLlduLkpvKG4sIHQpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGFzdCBjb25zaXN0ZW50IHNuYXBzaG90IHByb2Nlc3NlZCAodXNlZCBieSB0aGUgUmVtb3RlU3RvcmUgdG9cbiAgICAgKiBkZXRlcm1pbmUgd2hldGhlciB0byBidWZmZXIgaW5jb21pbmcgc25hcHNob3RzIGZyb20gdGhlIGJhY2tlbmQpLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLl9oID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJHZXQgbGFzdCByZW1vdGUgc25hcHNob3QgdmVyc2lvblwiLCBcInJlYWRvbmx5XCIsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICByZXR1cm4gdC5ZaC5faChlKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgXCJncm91bmQtc3RhdGVcIiAocmVtb3RlKSBkb2N1bWVudHMuIFdlIGFzc3VtZSB0aGF0IHRoZSByZW1vdGVcbiAgICAgKiBldmVudCByZWZsZWN0cyBhbnkgd3JpdGUgYmF0Y2hlcyB0aGF0IGhhdmUgYmVlbiBhY2tub3dsZWRnZWQgb3IgcmVqZWN0ZWRcbiAgICAgKiAoaS5lLiB3ZSBkbyBub3QgcmUtYXBwbHkgbG9jYWwgbXV0YXRpb25zIHRvIHVwZGF0ZXMgZnJvbSB0aGlzIGV2ZW50KS5cbiAgICAgKlxuICAgICAqIExvY2FsRG9jdW1lbnRzIGFyZSByZS1jYWxjdWxhdGVkIGlmIHRoZXJlIGFyZSByZW1haW5pbmcgbXV0YXRpb25zIGluIHRoZVxuICAgICAqIHF1ZXVlLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLk11ID0gZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXMsIHIgPSBlLkVlLCBpID0gdGhpcy5ndTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJBcHBseSByZW1vdGUgZXZlbnRcIiwgXCJyZWFkd3JpdGUtcHJpbWFyeVwiLCAoZnVuY3Rpb24obykge1xuICAgICAgICAgICAgdmFyIHMgPSBuLmJ1LllyKHtcbiAgICAgICAgICAgICAgICBYcjogITBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gUmVzZXQgbmV3VGFyZ2V0RGF0YUJ5VGFyZ2V0TWFwIGluIGNhc2UgdGhpcyB0cmFuc2FjdGlvbiBnZXRzIHJlLXJ1bi5cbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBuLmd1O1xuICAgICAgICAgICAgdmFyIHUgPSBbXTtcbiAgICAgICAgICAgIGUuYXMuZm9yRWFjaCgoZnVuY3Rpb24oZSwgcykge1xuICAgICAgICAgICAgICAgIHZhciBhID0gaS5nZXQocyk7XG4gICAgICAgICAgICAgICAgaWYgKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gT25seSB1cGRhdGUgdGhlIHJlbW90ZSBrZXlzIGlmIHRoZSB0YXJnZXQgaXMgc3RpbGwgYWN0aXZlLiBUaGlzXG4gICAgICAgICAgICAgICAgICAgIC8vIGVuc3VyZXMgdGhhdCB3ZSBjYW4gcGVyc2lzdCB0aGUgdXBkYXRlZCB0YXJnZXQgZGF0YSBhbG9uZyB3aXRoXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSB1cGRhdGVkIGFzc2lnbm1lbnQuXG4gICAgICAgICAgICAgICAgICAgIHUucHVzaChuLlloLmJoKG8sIGUuSXMsIHMpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uWWgucGgobywgZS5Ucywgcyk7XG4gICAgICAgICAgICAgICAgICAgIH0pKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoID0gZS5yZXN1bWVUb2tlbjtcbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSByZXN1bWUgdG9rZW4gaWYgdGhlIGNoYW5nZSBpbmNsdWRlcyBvbmUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGgucnQoKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gYS53ZShoLCByKS5JZShvLk9oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBpLkFlKHMsIGMpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgdGFyZ2V0IGRhdGEgaWYgdGhlcmUgYXJlIHRhcmdldCBjaGFuZ2VzIChvciBpZlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3VmZmljaWVudCB0aW1lIGhhcyBwYXNzZWQgc2luY2UgdGhlIGxhc3QgdXBkYXRlKS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHQuT3UoYSwgYywgZSkgJiYgdS5wdXNoKG4uWWguSWgobywgYykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgdmFyIGEgPSBxdCgpLCBoID0gV3QoKTtcbiAgICAgICAgICAgIC8vIEhBQ0s6IFRoZSBvbmx5IHJlYXNvbiB3ZSBhbGxvdyBhIG51bGwgc25hcHNob3QgdmVyc2lvbiBpcyBzbyB0aGF0IHdlXG4gICAgICAgICAgICAvLyBjYW4gc3ludGhlc2l6ZSByZW1vdGUgZXZlbnRzIHdoZW4gd2UgZ2V0IHBlcm1pc3Npb24gZGVuaWVkIGVycm9ycyB3aGlsZVxuICAgICAgICAgICAgLy8gdHJ5aW5nIHRvIHJlc29sdmUgdGhlIHN0YXRlIG9mIGEgbG9jYWxseSBjYWNoZWQgZG9jdW1lbnQgdGhhdCBpcyBpblxuICAgICAgICAgICAgLy8gbGltYm8uXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5jcy5mb3JFYWNoKChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgaCA9IGguYWRkKHQpO1xuICAgICAgICAgICAgfSkpLCBcbiAgICAgICAgICAgIC8vIEVhY2ggbG9vcCBpdGVyYXRpb24gb25seSBhZmZlY3RzIGl0cyBcIm93blwiIGRvYywgc28gaXQncyBzYWZlIHRvIGdldCBhbGwgdGhlIHJlbW90ZVxuICAgICAgICAgICAgLy8gZG9jdW1lbnRzIGluIGFkdmFuY2UgaW4gYSBzaW5nbGUgY2FsbC5cbiAgICAgICAgICAgIHUucHVzaChzLmdldEVudHJpZXMobywgaCkubmV4dCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIGUuY3MuZm9yRWFjaCgoZnVuY3Rpb24oaSwgaCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IHQuZ2V0KGkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBOb3RlOiBUaGUgb3JkZXIgb2YgdGhlIHN0ZXBzIGJlbG93IGlzIGltcG9ydGFudCwgc2luY2Ugd2Ugd2FudFxuICAgICAgICAgICAgICAgICAgICAvLyB0byBlbnN1cmUgdGhhdCByZWplY3RlZCBsaW1ibyByZXNvbHV0aW9ucyAod2hpY2ggZmFicmljYXRlXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vRG9jdW1lbnRzIHdpdGggU25hcHNob3RWZXJzaW9uLm1pbigpKSBuZXZlciBhZGQgZG9jdW1lbnRzIHRvXG4gICAgICAgICAgICAgICAgICAgIC8vIGNhY2hlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggaW5zdGFuY2VvZiB2dCAmJiBoLnZlcnNpb24uaXNFcXVhbChnLm1pbigpKSA/IChcbiAgICAgICAgICAgICAgICAgICAgLy8gTm9Eb2N1bWVudHMgd2l0aCBTbmFwc2hvdFZlcnNpb24ubWluKCkgYXJlIHVzZWQgaW4gbWFudWZhY3R1cmVkXG4gICAgICAgICAgICAgICAgICAgIC8vIGV2ZW50cy4gV2UgcmVtb3ZlIHRoZXNlIGRvY3VtZW50cyBmcm9tIGNhY2hlIHNpbmNlIHdlIGxvc3RcbiAgICAgICAgICAgICAgICAgICAgLy8gYWNjZXNzLlxuICAgICAgICAgICAgICAgICAgICBzLmtuKGksIHIpLCBhID0gYS5BZShpLCBoKSkgOiBudWxsID09IGMgfHwgaC52ZXJzaW9uLlMoYy52ZXJzaW9uKSA+IDAgfHwgMCA9PT0gaC52ZXJzaW9uLlMoYy52ZXJzaW9uKSAmJiBjLmhhc1BlbmRpbmdXcml0ZXMgPyAocy5ObihoLCByKSwgXG4gICAgICAgICAgICAgICAgICAgIGEgPSBhLkFlKGksIGgpKSA6IGRlKFwiTG9jYWxTdG9yZVwiLCBcIklnbm9yaW5nIG91dGRhdGVkIHdhdGNoIHVwZGF0ZSBmb3IgXCIsIGksIFwiLiBDdXJyZW50IHZlcnNpb246XCIsIGMudmVyc2lvbiwgXCIgV2F0Y2ggdmVyc2lvbjpcIiwgaC52ZXJzaW9uKSwgXG4gICAgICAgICAgICAgICAgICAgIGUuX3MuaGFzKGkpICYmIHUucHVzaChuLnBlcnNpc3RlbmNlLmhoLldvKG8sIGkpKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSkpLCAhci5pc0VxdWFsKGcubWluKCkpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGMgPSBuLlloLl9oKG8pLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uWWguZGgobywgby5PaCwgcik7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIHUucHVzaChjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB4ZS52bih1KS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcy5hcHBseShvKTtcbiAgICAgICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbi52dS5KbihvLCBhKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpLnRoZW4oKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBuLmd1ID0gaSwgdDtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgbmV3VGFyZ2V0RGF0YSBzaG91bGQgYmUgcGVyc2lzdGVkIGR1cmluZyBhbiB1cGRhdGUgb2ZcbiAgICAgKiBhbiBhY3RpdmUgdGFyZ2V0LiBUYXJnZXREYXRhIHNob3VsZCBhbHdheXMgYmUgcGVyc2lzdGVkIHdoZW4gYSB0YXJnZXQgaXNcbiAgICAgKiBiZWluZyByZWxlYXNlZCBhbmQgc2hvdWxkIG5vdCBjYWxsIHRoaXMgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBXaGlsZSB0aGUgdGFyZ2V0IGlzIGFjdGl2ZSwgVGFyZ2V0RGF0YSB1cGRhdGVzIGNhbiBiZSBvbWl0dGVkIHdoZW4gbm90aGluZ1xuICAgICAqIGFib3V0IHRoZSB0YXJnZXQgaGFzIGNoYW5nZWQgZXhjZXB0IG1ldGFkYXRhIGxpa2UgdGhlIHJlc3VtZSB0b2tlbiBvclxuICAgICAqIHNuYXBzaG90IHZlcnNpb24uIE9jY2FzaW9uYWxseSBpdCdzIHdvcnRoIHRoZSBleHRyYSB3cml0ZSB0byBwcmV2ZW50IHRoZXNlXG4gICAgICogdmFsdWVzIGZyb20gZ2V0dGluZyB0b28gc3RhbGUgYWZ0ZXIgYSBjcmFzaCwgYnV0IHRoaXMgZG9lc24ndCBoYXZlIHRvIGJlXG4gICAgICogdG9vIGZyZXF1ZW50LlxuICAgICAqL1xuICAgIHQuT3UgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIC8vIEFsd2F5cyBwZXJzaXN0IHRhcmdldCBkYXRhIGlmIHdlIGRvbid0IGFscmVhZHkgaGF2ZSBhIHJlc3VtZSB0b2tlbi5cbiAgICAgICAgcmV0dXJuIG1lKGUucmVzdW1lVG9rZW4ucnQoKSA+IDApLCAwID09PSB0LnJlc3VtZVRva2VuLnJ0KCkgfHwgKGUuRWUuRCgpIC0gdC5FZS5EKCkgPj0gdGhpcy54dSB8fCBuLlRzLnNpemUgKyBuLkVzLnNpemUgKyBuLklzLnNpemUgPiAwKTtcbiAgICAgICAgLy8gRG9uJ3QgYWxsb3cgcmVzdW1lIHRva2VuIGNoYW5nZXMgdG8gYmUgYnVmZmVyZWQgaW5kZWZpbml0ZWx5LiBUaGlzXG4gICAgICAgIC8vIGFsbG93cyB1cyB0byBiZSByZWFzb25hYmx5IHVwLXRvLWRhdGUgYWZ0ZXIgYSBjcmFzaCBhbmQgYXZvaWRzIG5lZWRpbmdcbiAgICAgICAgLy8gdG8gbG9vcCBvdmVyIGFsbCBhY3RpdmUgcXVlcmllcyBvbiBzaHV0ZG93bi4gRXNwZWNpYWxseSBpbiB0aGUgYnJvd3NlclxuICAgICAgICAvLyB3ZSBtYXkgbm90IGdldCB0aW1lIHRvIGRvIGFueXRoaW5nIGludGVyZXN0aW5nIHdoaWxlIHRoZSBjdXJyZW50IHRhYiBpc1xuICAgICAgICAvLyBjbG9zaW5nLlxuICAgICAgICB9LCBcbiAgICAvKipcbiAgICAgKiBOb3RpZnkgbG9jYWwgc3RvcmUgb2YgdGhlIGNoYW5nZWQgdmlld3MgdG8gbG9jYWxseSBwaW4gZG9jdW1lbnRzLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLkJ1ID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBuLCByLCBpLCBvLCBzLCB1LCBhLCBoLCBjID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnRyeXMucHVzaChbIDAsIDIsICwgMyBdKSwgWyA0IC8qeWllbGQqLyAsIHRoaXMucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJub3RpZnlMb2NhbFZpZXdDaGFuZ2VzXCIsIFwicmVhZHdyaXRlXCIsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geGUuZm9yRWFjaCh0LCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB4ZS5mb3JFYWNoKHQuaHIsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjLnBlcnNpc3RlbmNlLmhoLnloKGUsIHQudGFyZ2V0SWQsIG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHhlLmZvckVhY2godC5vciwgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjLnBlcnNpc3RlbmNlLmhoLnZoKGUsIHQudGFyZ2V0SWQsIG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KSkgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5zZW50KCksIFsgMyAvKmJyZWFrKi8gLCAzIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFxbihuID0gZS5zZW50KCkpKSB0aHJvdyBuO1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiBgbm90aWZ5TG9jYWxWaWV3Q2hhbmdlc2AgZmFpbHMsIHdlIGRpZCBub3QgYWR2YW5jZSB0aGUgc2VxdWVuY2VcbiAgICAgICAgICAgICAgICAgICAgLy8gbnVtYmVyIGZvciB0aGUgZG9jdW1lbnRzIHRoYXQgd2VyZSBpbmNsdWRlZCBpbiB0aGlzIHRyYW5zYWN0aW9uLlxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIG1pZ2h0IHRyaWdnZXIgdGhlbSB0byBiZSBkZWxldGVkIGVhcmxpZXIgdGhhbiB0aGV5IG90aGVyd2lzZVxuICAgICAgICAgICAgICAgICAgICAvLyB3b3VsZCBoYXZlLCBidXQgaXQgc2hvdWxkIG5vdCBpbnZhbGlkYXRlIHRoZSBpbnRlZ3JpdHkgb2YgdGhlIGRhdGEuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlKFwiTG9jYWxTdG9yZVwiLCBcIkZhaWxlZCB0byB1cGRhdGUgc2VxdWVuY2UgbnVtYmVyczogXCIgKyBuKSwgXG4gICAgICAgICAgICAgICAgICAgIFsgMyAvKmJyZWFrKi8gLCAzIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgZm9yIChyID0gMCwgaSA9IHQ7IHIgPCBpLmxlbmd0aDsgcisrKSBvID0gaVtyXSwgcyA9IG8udGFyZ2V0SWQsIG8uZnJvbUNhY2hlIHx8ICh1ID0gdGhpcy5ndS5nZXQocyksIFxuICAgICAgICAgICAgICAgICAgICBhID0gdS5FZSwgaCA9IHUuUmUoYSksIFxuICAgICAgICAgICAgICAgICAgICAvLyBBZHZhbmNlIHRoZSBsYXN0IGxpbWJvIGZyZWUgc25hcHNob3QgdmVyc2lvblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmd1ID0gdGhpcy5ndS5BZShzLCBoKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG11dGF0aW9uIGJhdGNoIGFmdGVyIHRoZSBwYXNzZWQgaW4gYmF0Y2hJZCBpbiB0aGUgbXV0YXRpb24gcXVldWVcbiAgICAgKiBvciBudWxsIGlmIGVtcHR5LlxuICAgICAqIEBwYXJhbSBhZnRlckJhdGNoSWQgSWYgcHJvdmlkZWQsIHRoZSBiYXRjaCB0byBzZWFyY2ggYWZ0ZXIuXG4gICAgICogQHJldHVybnMgVGhlIG5leHQgbXV0YXRpb24gb3IgbnVsbCBpZiB0aGVyZSB3YXNuJ3Qgb25lLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLnF1ID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiR2V0IG5leHQgbXV0YXRpb24gYmF0Y2hcIiwgXCJyZWFkb25seVwiLCAoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gdCAmJiAodCA9IC0xKSwgZS5Xbi5lYShuLCB0KTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJlYWQgdGhlIGN1cnJlbnQgdmFsdWUgb2YgYSBEb2N1bWVudCB3aXRoIGEgZ2l2ZW4ga2V5IG9yIG51bGwgaWYgbm90XG4gICAgICogZm91bmQgLSB1c2VkIGZvciB0ZXN0aW5nLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLlV1ID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwicmVhZCBkb2N1bWVudFwiLCBcInJlYWRvbmx5XCIsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICByZXR1cm4gZS52dS5LbihuLCB0KTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgdGhlIGdpdmVuIHRhcmdldCBhbiBpbnRlcm5hbCBJRCBzbyB0aGF0IGl0cyByZXN1bHRzIGNhbiBiZSBwaW5uZWQgc29cbiAgICAgKiB0aGV5IGRvbid0IGdldCBHQydkLiBBIHRhcmdldCBtdXN0IGJlIGFsbG9jYXRlZCBpbiB0aGUgbG9jYWwgc3RvcmUgYmVmb3JlXG4gICAgICogdGhlIHN0b3JlIGNhbiBiZSB1c2VkIHRvIG1hbmFnZSBpdHMgdmlldy5cbiAgICAgKlxuICAgICAqIEFsbG9jYXRpbmcgYW4gYWxyZWFkeSBhbGxvY2F0ZWQgYFRhcmdldGAgd2lsbCByZXR1cm4gdGhlIGV4aXN0aW5nIGBUYXJnZXREYXRhYFxuICAgICAqIGZvciB0aGF0IGBUYXJnZXRgLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLlF1ID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiQWxsb2NhdGUgdGFyZ2V0XCIsIFwicmVhZHdyaXRlXCIsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICB2YXIgcjtcbiAgICAgICAgICAgIHJldHVybiBlLlloLmdoKG4sIHQpLm5leHQoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaSA/IChcbiAgICAgICAgICAgICAgICAvLyBUaGlzIHRhcmdldCBoYXMgYmVlbiBsaXN0ZW5lZCB0byBwcmV2aW91c2x5LCBzbyByZXVzZSB0aGVcbiAgICAgICAgICAgICAgICAvLyBwcmV2aW91cyB0YXJnZXRJRC5cbiAgICAgICAgICAgICAgICAvLyBUT0RPKG1jZyk6IGZyZXNoZW4gbGFzdCBhY2Nlc3NlZCBkYXRlP1xuICAgICAgICAgICAgICAgIHIgPSBpLCB4ZS5yZXNvbHZlKHIpKSA6IGUuWWgub2gobikubmV4dCgoZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gciA9IG5ldyBEdCh0LCBpLCAwIC8qIExpc3RlbiAqLyAsIG4uT2gpLCBlLlloLmZoKG4sIHIpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKS50aGVuKChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbCA9PT0gZS5ndS5nZXQobi50YXJnZXRJZCkgJiYgKGUuZ3UgPSBlLmd1LkFlKG4udGFyZ2V0SWQsIG4pLCBlLnB1LnNldCh0LCBuLnRhcmdldElkKSksIFxuICAgICAgICAgICAgbjtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIFRhcmdldERhdGEgYXMgc2VlbiBieSB0aGUgTG9jYWxTdG9yZSwgaW5jbHVkaW5nIHVwZGF0ZXMgdGhhdCBtYXlcbiAgICAgKiBoYXZlIG5vdCB5ZXQgYmVlbiBwZXJzaXN0ZWQgdG8gdGhlIFRhcmdldENhY2hlLlxuICAgICAqL1xuICAgIC8vIFZpc2libGUgZm9yIHRlc3RpbmcuXG4gICAgdC5wcm90b3R5cGUuZ2ggPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcy5wdS5nZXQoZSk7XG4gICAgICAgIHJldHVybiB2b2lkIDAgIT09IG4gPyB4ZS5yZXNvbHZlKHRoaXMuZ3UuZ2V0KG4pKSA6IHRoaXMuWWguZ2godCwgZSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogVW5waW4gYWxsIHRoZSBkb2N1bWVudHMgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiB0YXJnZXQuIElmXG4gICAgICogYGtlZXBQZXJzaXN0ZWRUYXJnZXREYXRhYCBpcyBzZXQgdG8gZmFsc2UgYW5kIEVhZ2VyIEdDIGVuYWJsZWQsIHRoZSBtZXRob2RcbiAgICAgKiBkaXJlY3RseSByZW1vdmVzIHRoZSBhc3NvY2lhdGVkIHRhcmdldCBkYXRhIGZyb20gdGhlIHRhcmdldCBjYWNoZS5cbiAgICAgKlxuICAgICAqIFJlbGVhc2luZyBhIG5vbi1leGlzdGluZyBgVGFyZ2V0YCBpcyBhIG5vLW9wLlxuICAgICAqL1xuICAgIC8vIFBPUlRJTkcgTk9URTogYGtlZXBQZXJzaXN0ZWRUYXJnZXREYXRhYCBpcyBtdWx0aS10YWIgb25seS5cbiAgICB0LnByb3RvdHlwZS5XdSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLCByID0gdGhpcy5ndS5nZXQodCksIGkgPSBlID8gXCJyZWFkd3JpdGVcIiA6IFwicmVhZHdyaXRlLXByaW1hcnlcIjtcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJSZWxlYXNlIHRhcmdldFwiLCBpLCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIGUgPyB4ZS5yZXNvbHZlKCkgOiBuLnBlcnNpc3RlbmNlLmhoLnJlbW92ZVRhcmdldCh0LCByKTtcbiAgICAgICAgfSkpLnRoZW4oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbi5ndSA9IG4uZ3UucmVtb3ZlKHQpLCBuLnB1LmRlbGV0ZShyLnRhcmdldCk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSdW5zIHRoZSBzcGVjaWZpZWQgcXVlcnkgYWdhaW5zdCB0aGUgbG9jYWwgc3RvcmUgYW5kIHJldHVybnMgdGhlIHJlc3VsdHMsXG4gICAgICogcG90ZW50aWFsbHkgdGFraW5nIGFkdmFudGFnZSBvZiBxdWVyeSBkYXRhIGZyb20gcHJldmlvdXMgZXhlY3V0aW9ucyAoc3VjaFxuICAgICAqIGFzIHRoZSBzZXQgb2YgcmVtb3RlIGtleXMpLlxuICAgICAqXG4gICAgICogQHBhcmFtIHVzZVByZXZpb3VzUmVzdWx0cyBXaGV0aGVyIHJlc3VsdHMgZnJvbSBwcmV2aW91cyBleGVjdXRpb25zIGNhblxuICAgICAqIGJlIHVzZWQgdG8gb3B0aW1pemUgdGhpcyBxdWVyeSBleGVjdXRpb24uXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuanUgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcywgciA9IGcubWluKCksIGkgPSBXdCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkV4ZWN1dGUgcXVlcnlcIiwgXCJyZWFkb25seVwiLCAoZnVuY3Rpb24obykge1xuICAgICAgICAgICAgcmV0dXJuIG4uZ2gobywgdC5lZSgpKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHQpIHJldHVybiByID0gdC5sYXN0TGltYm9GcmVlU25hcHNob3RWZXJzaW9uLCBuLlloLlNoKG8sIHQudGFyZ2V0SWQpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaSA9IHQ7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuLlZ1LlpuKG8sIHQsIGUgPyByIDogZy5taW4oKSwgZSA/IGkgOiBXdCgpKTtcbiAgICAgICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRzOiB0LFxuICAgICAgICAgICAgICAgICAgICBLdTogaVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5rdSA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzLCBpID0gZS5iYXRjaCwgbyA9IGkua2V5cygpLCBzID0geGUucmVzb2x2ZSgpO1xuICAgICAgICByZXR1cm4gby5mb3JFYWNoKChmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICBzID0gcy5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbi5Mbih0LCByKTtcbiAgICAgICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdmFyIG8gPSB0LCBzID0gZS5Sbi5nZXQocik7XG4gICAgICAgICAgICAgICAgbWUobnVsbCAhPT0gcyksICghbyB8fCBvLnZlcnNpb24uUyhzKSA8IDApICYmICgobyA9IGkuYXQociwgbywgZSkpICYmIFxuICAgICAgICAgICAgICAgIC8vIFdlIHVzZSB0aGUgY29tbWl0VmVyc2lvbiBhcyB0aGUgcmVhZFRpbWUgcmF0aGVyIHRoYW4gdGhlXG4gICAgICAgICAgICAgICAgLy8gZG9jdW1lbnQncyB1cGRhdGVUaW1lIHNpbmNlIHRoZSB1cGRhdGVUaW1lIGlzIG5vdCBhZHZhbmNlZFxuICAgICAgICAgICAgICAgIC8vIGZvciB1cGRhdGVzIHRoYXQgZG8gbm90IG1vZGlmeSB0aGUgdW5kZXJseWluZyBkb2N1bWVudC5cbiAgICAgICAgICAgICAgICBuLk5uKG8sIGUud24pKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpLCBzLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHIuV24ucmEodCwgaSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5JdSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkNvbGxlY3QgZ2FyYmFnZVwiLCBcInJlYWR3cml0ZS1wcmltYXJ5XCIsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICByZXR1cm4gdC5tdShuLCBlLmd1KTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQ7XG59KCk7XG5cbi8qKiBJbXBsZW1lbnRzIHRoZSBzdGVwcyBmb3IgTFJVIGdhcmJhZ2UgY29sbGVjdGlvbi4gKi9cbi8qKlxuICogVGhlIG1heGltdW0gdGltZSB0byBsZWF2ZSBhIHJlc3VtZSB0b2tlbiBidWZmZXJlZCB3aXRob3V0IHdyaXRpbmcgaXQgb3V0LlxuICogVGhpcyB2YWx1ZSBpcyBhcmJpdHJhcnk6IGl0J3MgbG9uZyBlbm91Z2ggdG8gYXZvaWQgc2V2ZXJhbCB3cml0ZXNcbiAqIChwb3NzaWJseSBpbmRlZmluaXRlbHkgaWYgdXBkYXRlcyBjb21lIG1vcmUgZnJlcXVlbnRseSB0aGFuIHRoaXMpIGJ1dFxuICogc2hvcnQgZW5vdWdoIHRoYXQgcmVzdGFydGluZyBhZnRlciBjcmFzaGluZyB3aWxsIHN0aWxsIGhhdmUgYSBwcmV0dHlcbiAqIHJlY2VudCByZXN1bWUgdG9rZW4uXG4gKi9cblpuLnh1ID0gM2U4O1xuXG4vKipcbiAqIEFuIGltcGxlbWVudGF0aW9uIG9mIExvY2FsU3RvcmUgdGhhdCBwcm92aWRlcyBhZGRpdGlvbmFsIGZ1bmN0aW9uYWxpdHlcbiAqIGZvciBNdWx0aVRhYlN5bmNFbmdpbmUuXG4gKi9cbi8vIFBPUlRJTkcgTk9URTogV2ViIG9ubHkuXG52YXIgdHIgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKHQpIHtcbiAgICBmdW5jdGlvbiBuKGUsIG4sIHIpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzO1xuICAgICAgICByZXR1cm4gKGkgPSB0LmNhbGwodGhpcywgZSwgbiwgcikgfHwgdGhpcykucGVyc2lzdGVuY2UgPSBlLCBpLlduID0gZS52byhyKSwgaS5idSA9IGUuQ28oKSwgXG4gICAgICAgIGkuWWggPSBlLkRvKCksIGk7XG4gICAgfVxuICAgIC8qKiBTdGFydHMgdGhlIExvY2FsU3RvcmUuICovICAgIHJldHVybiBlLl9fZXh0ZW5kcyhuLCB0KSwgbi5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuR3UoKTtcbiAgICB9LCBcbiAgICAvKiogUmV0dXJucyB0aGUgbG9jYWwgdmlldyBvZiB0aGUgZG9jdW1lbnRzIGFmZmVjdGVkIGJ5IGEgbXV0YXRpb24gYmF0Y2guICovIG4ucHJvdG90eXBlLnp1ID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiTG9va3VwIG11dGF0aW9uIGRvY3VtZW50c1wiLCBcInJlYWRvbmx5XCIsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICByZXR1cm4gZS5Xbi50YShuLCB0KS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgPyBlLnZ1LlluKG4sIHQpIDogeGUucmVzb2x2ZShudWxsKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIG4ucHJvdG90eXBlLkh1ID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLlduLmhhKHQpO1xuICAgIH0sIG4ucHJvdG90eXBlLmFvID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLnBlcnNpc3RlbmNlLmFvKHQpO1xuICAgIH0sIG4ucHJvdG90eXBlLmJvID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBlcnNpc3RlbmNlLmJvKCk7XG4gICAgfSwgbi5wcm90b3R5cGUuWXUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcywgbiA9IHRoaXMuZ3UuZ2V0KHQpO1xuICAgICAgICByZXR1cm4gbiA/IFByb21pc2UucmVzb2x2ZShuLnRhcmdldCkgOiB0aGlzLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiR2V0IHRhcmdldCBkYXRhXCIsIFwicmVhZG9ubHlcIiwgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIHJldHVybiBlLlloLnNpKG4sIHQpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdCA/IHQudGFyZ2V0IDogbnVsbDtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHNldCBvZiBkb2N1bWVudHMgdGhhdCBoYXZlIGJlZW4gdXBkYXRlZCBzaW5jZSB0aGUgbGFzdCBjYWxsLlxuICAgICAqIElmIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIHJldHVybnMgdGhlIHNldCBvZiBjaGFuZ2VzIHNpbmNlIGNsaWVudFxuICAgICAqIGluaXRpYWxpemF0aW9uLiBGdXJ0aGVyIGludm9jYXRpb25zIHdpbGwgcmV0dXJuIGRvY3VtZW50IGNoYW5nZXMgc2luY2VcbiAgICAgKiB0aGUgcG9pbnQgb2YgcmVqZWN0aW9uLlxuICAgICAqL1xuICAgIG4ucHJvdG90eXBlLktyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJHZXQgbmV3IGRvY3VtZW50IGNoYW5nZXNcIiwgXCJyZWFkb25seVwiLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmV0dXJuIHQuYnUuS3IoZSwgdC55dSk7XG4gICAgICAgIH0pKS50aGVuKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgbiA9IGUuR3IsIHIgPSBlLnJlYWRUaW1lO1xuICAgICAgICAgICAgcmV0dXJuIHQueXUgPSByLCBuO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmVhZHMgdGhlIG5ld2VzdCBkb2N1bWVudCBjaGFuZ2UgZnJvbSBwZXJzaXN0ZW5jZSBhbmQgZm9yd2FyZHMgdGhlIGludGVybmFsXG4gICAgICogc3luY2hyb25pemF0aW9uIG1hcmtlciBzbyB0aGF0IGNhbGxzIHRvIGBnZXROZXdEb2N1bWVudENoYW5nZXMoKWBcbiAgICAgKiBvbmx5IHJldHVybiBjaGFuZ2VzIHRoYXQgaGFwcGVuZWQgYWZ0ZXIgY2xpZW50IGluaXRpYWxpemF0aW9uLlxuICAgICAqL1xuICAgIG4ucHJvdG90eXBlLkd1ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBlLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHQsIG4gPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGUubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgPSB0aGlzLCBbIDQgLyp5aWVsZCovICwgdGhpcy5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIlN5bmNocm9uaXplIGxhc3QgZG9jdW1lbnQgY2hhbmdlIHJlYWQgdGltZVwiLCBcInJlYWRvbmx5XCIsIChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5idS5Icih0KTtcbiAgICAgICAgICAgICAgICAgICAgfSkpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQueXUgPSBlLnNlbnQoKSwgWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBuO1xufShabik7XG5cbi8qKlxuICogVmVyaWZpZXMgdGhlIGVycm9yIHRocm93biBieSBhIExvY2FsU3RvcmUgb3BlcmF0aW9uLiBJZiBhIExvY2FsU3RvcmVcbiAqIG9wZXJhdGlvbiBmYWlscyBiZWNhdXNlIHRoZSBwcmltYXJ5IGxlYXNlIGhhcyBiZWVuIHRha2VuIGJ5IGFub3RoZXIgY2xpZW50LFxuICogd2UgaWdub3JlIHRoZSBlcnJvciAodGhlIHBlcnNpc3RlbmNlIGxheWVyIHdpbGwgaW1tZWRpYXRlbHkgY2FsbFxuICogYGFwcGx5UHJpbWFyeUxlYXNlYCB0byBwcm9wYWdhdGUgdGhlIHByaW1hcnkgc3RhdGUgY2hhbmdlKS4gQWxsIG90aGVyIGVycm9yc1xuICogYXJlIHJlLXRocm93bi5cbiAqXG4gKiBAcGFyYW0gZXJyIEFuIGVycm9yIHJldHVybmVkIGJ5IGEgTG9jYWxTdG9yZSBvcGVyYXRpb24uXG4gKiBAcmV0dXJuIEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIGFmdGVyIHdlIHJlY292ZXJlZCwgb3IgdGhlIG9yaWdpbmFsIGVycm9yLlxuICovIGZ1bmN0aW9uIGVyKHQpIHtcbiAgICByZXR1cm4gZS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGlmICh0LmNvZGUgIT09IGguRkFJTEVEX1BSRUNPTkRJVElPTiB8fCB0Lm1lc3NhZ2UgIT09IFJlKSB0aHJvdyB0O1xuICAgICAgICAgICAgcmV0dXJuIGRlKFwiTG9jYWxTdG9yZVwiLCBcIlVuZXhwZWN0ZWRseSBsb3N0IHByaW1hcnkgbGVhc2VcIiksIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgIH0pKTtcbiAgICB9KSk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgY29sbGVjdGlvbiBvZiByZWZlcmVuY2VzIHRvIGEgZG9jdW1lbnQgZnJvbSBzb21lIGtpbmQgb2YgbnVtYmVyZWQgZW50aXR5XG4gKiAoZWl0aGVyIGEgdGFyZ2V0IElEIG9yIGJhdGNoIElEKS4gQXMgcmVmZXJlbmNlcyBhcmUgYWRkZWQgdG8gb3IgcmVtb3ZlZCBmcm9tXG4gKiB0aGUgc2V0IGNvcnJlc3BvbmRpbmcgZXZlbnRzIGFyZSBlbWl0dGVkIHRvIGEgcmVnaXN0ZXJlZCBnYXJiYWdlIGNvbGxlY3Rvci5cbiAqXG4gKiBFYWNoIHJlZmVyZW5jZSBpcyByZXByZXNlbnRlZCBieSBhIERvY3VtZW50UmVmZXJlbmNlIG9iamVjdC4gRWFjaCBvZiB0aGVtXG4gKiBjb250YWlucyBlbm91Z2ggaW5mb3JtYXRpb24gdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhlIHJlZmVyZW5jZS4gVGhleSBhcmUgYWxsXG4gKiBzdG9yZWQgcHJpbWFyaWx5IGluIGEgc2V0IHNvcnRlZCBieSBrZXkuIEEgZG9jdW1lbnQgaXMgY29uc2lkZXJlZCBnYXJiYWdlIGlmXG4gKiB0aGVyZSdzIG5vIHJlZmVyZW5jZXMgaW4gdGhhdCBzZXQgKHRoaXMgY2FuIGJlIGVmZmljaWVudGx5IGNoZWNrZWQgdGhhbmtzIHRvXG4gKiBzb3J0aW5nIGJ5IGtleSkuXG4gKlxuICogUmVmZXJlbmNlU2V0IGFsc28ga2VlcHMgYSBzZWNvbmRhcnkgc2V0IHRoYXQgY29udGFpbnMgcmVmZXJlbmNlcyBzb3J0ZWQgYnlcbiAqIElEcy4gVGhpcyBvbmUgaXMgdXNlZCB0byBlZmZpY2llbnRseSBpbXBsZW1lbnQgcmVtb3ZhbCBvZiBhbGwgcmVmZXJlbmNlcyBieVxuICogc29tZSB0YXJnZXQgSUQuXG4gKi8gdmFyIG5yID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KCkge1xuICAgICAgICAvLyBBIHNldCBvZiBvdXRzdGFuZGluZyByZWZlcmVuY2VzIHRvIGEgZG9jdW1lbnQgc29ydGVkIGJ5IGtleS5cbiAgICAgICAgdGhpcy5KdSA9IG5ldyBQdChyci5YdSksIFxuICAgICAgICAvLyBBIHNldCBvZiBvdXRzdGFuZGluZyByZWZlcmVuY2VzIHRvIGEgZG9jdW1lbnQgc29ydGVkIGJ5IHRhcmdldCBpZC5cbiAgICAgICAgdGhpcy5adSA9IG5ldyBQdChyci50YylcbiAgICAgICAgLyoqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcmVmZXJlbmNlIHNldCBjb250YWlucyBubyByZWZlcmVuY2VzLiAqLztcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLkIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuSnUuQigpO1xuICAgIH0sIFxuICAgIC8qKiBBZGRzIGEgcmVmZXJlbmNlIHRvIHRoZSBnaXZlbiBkb2N1bWVudCBrZXkgZm9yIHRoZSBnaXZlbiBJRC4gKi8gdC5wcm90b3R5cGUueWggPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gbmV3IHJyKHQsIGUpO1xuICAgICAgICB0aGlzLkp1ID0gdGhpcy5KdS5hZGQobiksIHRoaXMuWnUgPSB0aGlzLlp1LmFkZChuKTtcbiAgICB9LCBcbiAgICAvKiogQWRkIHJlZmVyZW5jZXMgdG8gdGhlIGdpdmVuIGRvY3VtZW50IGtleXMgZm9yIHRoZSBnaXZlbiBJRC4gKi8gdC5wcm90b3R5cGUuZWMgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgdC5mb3JFYWNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gbi55aCh0LCBlKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSByZWZlcmVuY2UgdG8gdGhlIGdpdmVuIGRvY3VtZW50IGtleSBmb3IgdGhlIGdpdmVuXG4gICAgICogSUQuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUudmggPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHRoaXMuc2MobmV3IHJyKHQsIGUpKTtcbiAgICB9LCB0LnByb3RvdHlwZS5pYyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICB0LmZvckVhY2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBuLnZoKHQsIGUpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQ2xlYXJzIGFsbCByZWZlcmVuY2VzIHdpdGggYSBnaXZlbiBJRC4gQ2FsbHMgcmVtb3ZlUmVmKCkgZm9yIGVhY2gga2V5XG4gICAgICogcmVtb3ZlZC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5uYyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLCBuID0gXy5FTVBUWSwgciA9IG5ldyBycihuLCB0KSwgaSA9IG5ldyBycihuLCB0ICsgMSksIG8gPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuWnUuS2UoWyByLCBpIF0sIChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBlLnNjKHQpLCBvLnB1c2godC5rZXkpO1xuICAgICAgICB9KSksIG87XG4gICAgfSwgdC5wcm90b3R5cGUucmMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICB0aGlzLkp1LmZvckVhY2goKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0LnNjKGUpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuc2MgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuSnUgPSB0aGlzLkp1LmRlbGV0ZSh0KSwgdGhpcy5adSA9IHRoaXMuWnUuZGVsZXRlKHQpO1xuICAgIH0sIHQucHJvdG90eXBlLmhjID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IF8uRU1QVFksIG4gPSBuZXcgcnIoZSwgdCksIHIgPSBuZXcgcnIoZSwgdCArIDEpLCBpID0gV3QoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuWnUuS2UoWyBuLCByIF0sIChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBpID0gaS5hZGQodC5rZXkpO1xuICAgICAgICB9KSksIGk7XG4gICAgfSwgdC5wcm90b3R5cGUuQ2ggPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gbmV3IHJyKHQsIDApLCBuID0gdGhpcy5KdS56ZShlKTtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IG4gJiYgdC5pc0VxdWFsKG4ua2V5KTtcbiAgICB9LCB0O1xufSgpLCByciA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlKSB7XG4gICAgICAgIHRoaXMua2V5ID0gdCwgdGhpcy5vYyA9IGVcbiAgICAgICAgLyoqIENvbXBhcmUgYnkga2V5IHRoZW4gYnkgSUQgKi87XG4gICAgfVxuICAgIHJldHVybiB0Llh1ID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gXy5OKHQua2V5LCBlLmtleSkgfHwgYmUodC5vYywgZS5vYyk7XG4gICAgfSwgXG4gICAgLyoqIENvbXBhcmUgYnkgSUQgdGhlbiBieSBrZXkgKi8gdC50YyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIGJlKHQub2MsIGUub2MpIHx8IF8uTih0LmtleSwgZS5rZXkpO1xuICAgIH0sIHQ7XG59KCk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFZhbGlkYXRlcyB0aGF0IG5vIGFyZ3VtZW50cyB3ZXJlIHBhc3NlZCBpbiB0aGUgaW52b2NhdGlvbiBvZiBmdW5jdGlvbk5hbWUuXG4gKlxuICogRm9yd2FyZCB0aGUgbWFnaWMgXCJhcmd1bWVudHNcIiB2YXJpYWJsZSBhcyBzZWNvbmQgcGFyYW1ldGVyIG9uIHdoaWNoIHRoZVxuICogcGFyYW1ldGVyIHZhbGlkYXRpb24gaXMgcGVyZm9ybWVkOlxuICogdmFsaWRhdGVOb0FyZ3MoJ215RnVuY3Rpb24nLCBhcmd1bWVudHMpO1xuICovXG5mdW5jdGlvbiBpcih0LCBlKSB7XG4gICAgaWYgKDAgIT09IGUubGVuZ3RoKSB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiRnVuY3Rpb24gXCIgKyB0ICsgXCIoKSBkb2VzIG5vdCBzdXBwb3J0IGFyZ3VtZW50cywgYnV0IHdhcyBjYWxsZWQgd2l0aCBcIiArIGJyKGUubGVuZ3RoLCBcImFyZ3VtZW50XCIpICsgXCIuXCIpO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlcyB0aGUgaW52b2NhdGlvbiBvZiBmdW5jdGlvbk5hbWUgaGFzIHRoZSBleGFjdCBudW1iZXIgb2YgYXJndW1lbnRzLlxuICpcbiAqIEZvcndhcmQgdGhlIG1hZ2ljIFwiYXJndW1lbnRzXCIgdmFyaWFibGUgYXMgc2Vjb25kIHBhcmFtZXRlciBvbiB3aGljaCB0aGVcbiAqIHBhcmFtZXRlciB2YWxpZGF0aW9uIGlzIHBlcmZvcm1lZDpcbiAqIHZhbGlkYXRlRXhhY3ROdW1iZXJPZkFyZ3MoJ215RnVuY3Rpb24nLCBhcmd1bWVudHMsIDIpO1xuICovIGZ1bmN0aW9uIG9yKHQsIGUsIG4pIHtcbiAgICBpZiAoZS5sZW5ndGggIT09IG4pIHRocm93IG5ldyBjKGguSU5WQUxJRF9BUkdVTUVOVCwgXCJGdW5jdGlvbiBcIiArIHQgKyBcIigpIHJlcXVpcmVzIFwiICsgYnIobiwgXCJhcmd1bWVudFwiKSArIFwiLCBidXQgd2FzIGNhbGxlZCB3aXRoIFwiICsgYnIoZS5sZW5ndGgsIFwiYXJndW1lbnRcIikgKyBcIi5cIik7XG59XG5cbi8qKlxuICogVmFsaWRhdGVzIHRoZSBpbnZvY2F0aW9uIG9mIGZ1bmN0aW9uTmFtZSBoYXMgYXQgbGVhc3QgdGhlIHByb3ZpZGVkIG51bWJlciBvZlxuICogYXJndW1lbnRzIChidXQgY2FuIGhhdmUgbWFueSBtb3JlKS5cbiAqXG4gKiBGb3J3YXJkIHRoZSBtYWdpYyBcImFyZ3VtZW50c1wiIHZhcmlhYmxlIGFzIHNlY29uZCBwYXJhbWV0ZXIgb24gd2hpY2ggdGhlXG4gKiBwYXJhbWV0ZXIgdmFsaWRhdGlvbiBpcyBwZXJmb3JtZWQ6XG4gKiB2YWxpZGF0ZUF0TGVhc3ROdW1iZXJPZkFyZ3MoJ215RnVuY3Rpb24nLCBhcmd1bWVudHMsIDIpO1xuICovIGZ1bmN0aW9uIHNyKHQsIGUsIG4pIHtcbiAgICBpZiAoZS5sZW5ndGggPCBuKSB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiRnVuY3Rpb24gXCIgKyB0ICsgXCIoKSByZXF1aXJlcyBhdCBsZWFzdCBcIiArIGJyKG4sIFwiYXJndW1lbnRcIikgKyBcIiwgYnV0IHdhcyBjYWxsZWQgd2l0aCBcIiArIGJyKGUubGVuZ3RoLCBcImFyZ3VtZW50XCIpICsgXCIuXCIpO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlcyB0aGUgaW52b2NhdGlvbiBvZiBmdW5jdGlvbk5hbWUgaGFzIG51bWJlciBvZiBhcmd1bWVudHMgYmV0d2VlblxuICogdGhlIHZhbHVlcyBwcm92aWRlZC5cbiAqXG4gKiBGb3J3YXJkIHRoZSBtYWdpYyBcImFyZ3VtZW50c1wiIHZhcmlhYmxlIGFzIHNlY29uZCBwYXJhbWV0ZXIgb24gd2hpY2ggdGhlXG4gKiBwYXJhbWV0ZXIgdmFsaWRhdGlvbiBpcyBwZXJmb3JtZWQ6XG4gKiB2YWxpZGF0ZUJldHdlZW5OdW1iZXJPZkFyZ3MoJ215RnVuY3Rpb24nLCBhcmd1bWVudHMsIDIsIDMpO1xuICovIGZ1bmN0aW9uIHVyKHQsIGUsIG4sIHIpIHtcbiAgICBpZiAoZS5sZW5ndGggPCBuIHx8IGUubGVuZ3RoID4gcikgdGhyb3cgbmV3IGMoaC5JTlZBTElEX0FSR1VNRU5ULCBcIkZ1bmN0aW9uIFwiICsgdCArIFwiKCkgcmVxdWlyZXMgYmV0d2VlbiBcIiArIG4gKyBcIiBhbmQgXCIgKyByICsgXCIgYXJndW1lbnRzLCBidXQgd2FzIGNhbGxlZCB3aXRoIFwiICsgYnIoZS5sZW5ndGgsIFwiYXJndW1lbnRcIikgKyBcIi5cIik7XG59XG5cbi8qKlxuICogVmFsaWRhdGVzIHRoZSBwcm92aWRlZCBhcmd1bWVudCBpcyBhbiBhcnJheSBhbmQgaGFzIGFzIGxlYXN0IHRoZSBleHBlY3RlZFxuICogbnVtYmVyIG9mIGVsZW1lbnRzLlxuICovXG4vKipcbiAqIFZhbGlkYXRlcyB0aGUgcHJvdmlkZWQgcG9zaXRpb25hbCBhcmd1bWVudCBoYXMgdGhlIG5hdGl2ZSBKYXZhU2NyaXB0IHR5cGVcbiAqIHVzaW5nIHR5cGVvZiBjaGVja3MuXG4gKi8gZnVuY3Rpb24gYXIodCwgZSwgbiwgcikge1xuICAgIHByKHQsIGUsIEVyKG4pICsgXCIgYXJndW1lbnRcIiwgcik7XG59XG5cbi8qKlxuICogVmFsaWRhdGVzIHRoZSBwcm92aWRlZCBhcmd1bWVudCBoYXMgdGhlIG5hdGl2ZSBKYXZhU2NyaXB0IHR5cGUgdXNpbmdcbiAqIHR5cGVvZiBjaGVja3Mgb3IgaXMgdW5kZWZpbmVkLlxuICovIGZ1bmN0aW9uIGhyKHQsIGUsIG4sIHIpIHtcbiAgICB2b2lkIDAgIT09IHIgJiYgYXIodCwgZSwgbiwgcik7XG59XG5cbi8qKlxuICogVmFsaWRhdGVzIHRoZSBwcm92aWRlZCBuYW1lZCBvcHRpb24gaGFzIHRoZSBuYXRpdmUgSmF2YVNjcmlwdCB0eXBlIHVzaW5nXG4gKiB0eXBlb2YgY2hlY2tzLlxuICovIGZ1bmN0aW9uIGNyKHQsIGUsIG4sIHIpIHtcbiAgICBwcih0LCBlLCBuICsgXCIgb3B0aW9uXCIsIHIpO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlcyB0aGUgcHJvdmlkZWQgbmFtZWQgb3B0aW9uIGhhcyB0aGUgbmF0aXZlIEphdmFTY3JpcHQgdHlwZSB1c2luZ1xuICogdHlwZW9mIGNoZWNrcyBvciBpcyB1bmRlZmluZWQuXG4gKi8gZnVuY3Rpb24gZnIodCwgZSwgbiwgcikge1xuICAgIHZvaWQgMCAhPT0gciAmJiBjcih0LCBlLCBuLCByKTtcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZXMgdGhhdCB0aGUgcHJvdmlkZWQgbmFtZWQgb3B0aW9uIGVxdWFscyBvbmUgb2YgdGhlIGV4cGVjdGVkIHZhbHVlcy5cbiAqL1xuLyoqXG4gKiBWYWxpZGF0ZXMgdGhhdCB0aGUgcHJvdmlkZWQgbmFtZWQgb3B0aW9uIGVxdWFscyBvbmUgb2YgdGhlIGV4cGVjdGVkIHZhbHVlcyBvclxuICogaXMgdW5kZWZpbmVkLlxuICovXG5mdW5jdGlvbiBscih0LCBlLCBuLCByLCBpKSB7XG4gICAgdm9pZCAwICE9PSByICYmIGZ1bmN0aW9uKHQsIGUsIG4sIHIsIGkpIHtcbiAgICAgICAgZm9yICh2YXIgbyA9IFtdLCBzID0gMCwgdSA9IGk7IHMgPCB1Lmxlbmd0aDsgcysrKSB7XG4gICAgICAgICAgICB2YXIgYSA9IHVbc107XG4gICAgICAgICAgICBpZiAoYSA9PT0gcikgcmV0dXJuO1xuICAgICAgICAgICAgby5wdXNoKHlyKGEpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZiA9IHlyKHIpO1xuICAgICAgICB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCB2YWx1ZSBcIiArIGYgKyBcIiBwcm92aWRlZCB0byBmdW5jdGlvbiBcIiArIHQgKyAnKCkgZm9yIG9wdGlvbiBcIicgKyBuICsgJ1wiLiBBY2NlcHRhYmxlIHZhbHVlczogJyArIG8uam9pbihcIiwgXCIpKTtcbiAgICB9KHQsIDAsIG4sIHIsIGkpO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlcyB0aGF0IHRoZSBwcm92aWRlZCBhcmd1bWVudCBpcyBhIHZhbGlkIGVudW0uXG4gKlxuICogQHBhcmFtIGZ1bmN0aW9uTmFtZSBGdW5jdGlvbiBtYWtpbmcgdGhlIHZhbGlkYXRpb24gY2FsbC5cbiAqIEBwYXJhbSBlbnVtcyBBcnJheSBjb250YWluaW5nIGFsbCBwb3NzaWJsZSB2YWx1ZXMgZm9yIHRoZSBlbnVtLlxuICogQHBhcmFtIHBvc2l0aW9uIFBvc2l0aW9uIG9mIHRoZSBhcmd1bWVudCBpbiBgZnVuY3Rpb25OYW1lYC5cbiAqIEBwYXJhbSBhcmd1bWVudCBBcmd1bWVudCB0byB2YWxpZGF0ZS5cbiAqIEByZXR1cm4gVGhlIHZhbHVlIGFzIFQgaWYgdGhlIGFyZ3VtZW50IGNhbiBiZSBjb252ZXJ0ZWQuXG4gKi9cbi8qKiBIZWxwZXIgdG8gdmFsaWRhdGUgdGhlIHR5cGUgb2YgYSBwcm92aWRlZCBpbnB1dC4gKi8gZnVuY3Rpb24gcHIodCwgZSwgbiwgcikge1xuICAgIGlmICghKFwib2JqZWN0XCIgPT09IGUgPyBkcihyKSA6IFwibm9uLWVtcHR5IHN0cmluZ1wiID09PSBlID8gXCJzdHJpbmdcIiA9PSB0eXBlb2YgciAmJiBcIlwiICE9PSByIDogdHlwZW9mIHIgPT09IGUpKSB7XG4gICAgICAgIHZhciBpID0geXIocik7XG4gICAgICAgIHRocm93IG5ldyBjKGguSU5WQUxJRF9BUkdVTUVOVCwgXCJGdW5jdGlvbiBcIiArIHQgKyBcIigpIHJlcXVpcmVzIGl0cyBcIiArIG4gKyBcIiB0byBiZSBvZiB0eXBlIFwiICsgZSArIFwiLCBidXQgaXQgd2FzOiBcIiArIGkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgaXQncyBhIG5vbi1udWxsIG9iamVjdCB3aXRob3V0IGEgY3VzdG9tIHByb3RvdHlwZVxuICogKGkuZS4gZXhjbHVkZXMgQXJyYXksIERhdGUsIGV0Yy4pLlxuICovIGZ1bmN0aW9uIGRyKHQpIHtcbiAgICByZXR1cm4gXCJvYmplY3RcIiA9PSB0eXBlb2YgdCAmJiBudWxsICE9PSB0ICYmIChPYmplY3QuZ2V0UHJvdG90eXBlT2YodCkgPT09IE9iamVjdC5wcm90b3R5cGUgfHwgbnVsbCA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpKTtcbn1cblxuLyoqIFJldHVybnMgYSBzdHJpbmcgZGVzY3JpYmluZyB0aGUgdHlwZSAvIHZhbHVlIG9mIHRoZSBwcm92aWRlZCBpbnB1dC4gKi8gZnVuY3Rpb24geXIodCkge1xuICAgIGlmICh2b2lkIDAgPT09IHQpIHJldHVybiBcInVuZGVmaW5lZFwiO1xuICAgIGlmIChudWxsID09PSB0KSByZXR1cm4gXCJudWxsXCI7XG4gICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHQpIHJldHVybiB0Lmxlbmd0aCA+IDIwICYmICh0ID0gdC5zdWJzdHJpbmcoMCwgMjApICsgXCIuLi5cIiksIFxuICAgIEpTT04uc3RyaW5naWZ5KHQpO1xuICAgIGlmIChcIm51bWJlclwiID09IHR5cGVvZiB0IHx8IFwiYm9vbGVhblwiID09IHR5cGVvZiB0KSByZXR1cm4gXCJcIiArIHQ7XG4gICAgaWYgKFwib2JqZWN0XCIgPT0gdHlwZW9mIHQpIHtcbiAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBBcnJheSkgcmV0dXJuIFwiYW4gYXJyYXlcIjtcbiAgICAgICAgdmFyIGUgPSBcbiAgICAgICAgLyoqIEhhY2t5IG1ldGhvZCB0byB0cnkgdG8gZ2V0IHRoZSBjb25zdHJ1Y3RvciBuYW1lIGZvciBhbiBvYmplY3QuICovXG4gICAgICAgIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGlmICh0LmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSAvZnVuY3Rpb25cXHMrKFteXFxzKF0rKVxccypcXCgvLmV4ZWModC5jb25zdHJ1Y3Rvci50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICBpZiAoZSAmJiBlLmxlbmd0aCA+IDEpIHJldHVybiBlWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0odCk7XG4gICAgICAgIHJldHVybiBlID8gXCJhIGN1c3RvbSBcIiArIGUgKyBcIiBvYmplY3RcIiA6IFwiYW4gb2JqZWN0XCI7XG4gICAgfVxuICAgIHJldHVybiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQgPyBcImEgZnVuY3Rpb25cIiA6IGdlKCk7XG59XG5cbmZ1bmN0aW9uIHZyKHQsIGUsIG4pIHtcbiAgICBpZiAodm9pZCAwID09PSBuKSB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiRnVuY3Rpb24gXCIgKyB0ICsgXCIoKSByZXF1aXJlcyBhIHZhbGlkIFwiICsgRXIoZSkgKyBcIiBhcmd1bWVudCwgYnV0IGl0IHdhcyB1bmRlZmluZWQuXCIpO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlcyB0aGUgcHJvdmlkZWQgcG9zaXRpb25hbCBhcmd1bWVudCBpcyBhbiBvYmplY3QsIGFuZCBpdHMga2V5cyBhbmRcbiAqIHZhbHVlcyBtYXRjaCB0aGUgZXhwZWN0ZWQga2V5cyBhbmQgdHlwZXMgcHJvdmlkZWQgaW4gb3B0aW9uVHlwZXMuXG4gKi8gZnVuY3Rpb24gZ3IodCwgZSwgbikge1xuICAgIEkoZSwgKGZ1bmN0aW9uKGUsIHIpIHtcbiAgICAgICAgaWYgKG4uaW5kZXhPZihlKSA8IDApIHRocm93IG5ldyBjKGguSU5WQUxJRF9BUkdVTUVOVCwgXCJVbmtub3duIG9wdGlvbiAnXCIgKyBlICsgXCInIHBhc3NlZCB0byBmdW5jdGlvbiBcIiArIHQgKyBcIigpLiBBdmFpbGFibGUgb3B0aW9uczogXCIgKyBuLmpvaW4oXCIsIFwiKSk7XG4gICAgfSkpO1xufVxuXG4vKipcbiAqIEhlbHBlciBtZXRob2QgdG8gdGhyb3cgYW4gZXJyb3IgdGhhdCB0aGUgcHJvdmlkZWQgYXJndW1lbnQgZGlkIG5vdCBwYXNzXG4gKiBhbiBpbnN0YW5jZW9mIGNoZWNrLlxuICovIGZ1bmN0aW9uIG1yKHQsIGUsIG4sIHIpIHtcbiAgICB2YXIgaSA9IHlyKHIpO1xuICAgIHJldHVybiBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiRnVuY3Rpb24gXCIgKyB0ICsgXCIoKSByZXF1aXJlcyBpdHMgXCIgKyBFcihuKSArIFwiIGFyZ3VtZW50IHRvIGJlIGEgXCIgKyBlICsgXCIsIGJ1dCBpdCB3YXM6IFwiICsgaSk7XG59XG5cbmZ1bmN0aW9uIHdyKHQsIGUsIG4pIHtcbiAgICBpZiAobiA8PSAwKSB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiRnVuY3Rpb24gXCIgKyB0ICsgXCIoKSByZXF1aXJlcyBpdHMgXCIgKyBFcihlKSArIFwiIGFyZ3VtZW50IHRvIGJlIGEgcG9zaXRpdmUgbnVtYmVyLCBidXQgaXQgd2FzOiBcIiArIG4gKyBcIi5cIik7XG59XG5cbi8qKiBDb252ZXJ0cyBhIG51bWJlciB0byBpdHMgZW5nbGlzaCB3b3JkIHJlcHJlc2VudGF0aW9uICovIGZ1bmN0aW9uIEVyKHQpIHtcbiAgICBzd2l0Y2ggKHQpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIFwiZmlyc3RcIjtcblxuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gXCJzZWNvbmRcIjtcblxuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gXCJ0aGlyZFwiO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdCArIFwidGhcIjtcbiAgICB9XG59XG5cbi8qKlxuICogRm9ybWF0cyB0aGUgZ2l2ZW4gd29yZCBhcyBwbHVyYWwgY29uZGl0aW9uYWxseSBnaXZlbiB0aGUgcHJlY2VkaW5nIG51bWJlci5cbiAqLyBmdW5jdGlvbiBicih0LCBlKSB7XG4gICAgcmV0dXJuIHQgKyBcIiBcIiArIGUgKyAoMSA9PT0gdCA/IFwiXCIgOiBcInNcIik7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKiogSGVscGVyIGZ1bmN0aW9uIHRvIGFzc2VydCBVaW50OEFycmF5IGlzIGF2YWlsYWJsZSBhdCBydW50aW1lLiAqLyBmdW5jdGlvbiBfcigpIHtcbiAgICBpZiAoXCJ1bmRlZmluZWRcIiA9PSB0eXBlb2YgVWludDhBcnJheSkgdGhyb3cgbmV3IGMoaC5VTklNUExFTUVOVEVELCBcIlVpbnQ4QXJyYXlzIGFyZSBub3QgYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnQuXCIpO1xufVxuXG4vKiogSGVscGVyIGZ1bmN0aW9uIHRvIGFzc2VydCBCYXNlNjQgZnVuY3Rpb25zIGFyZSBhdmFpbGFibGUgYXQgcnVudGltZS4gKi8gZnVuY3Rpb24gVHIoKSB7XG4gICAgaWYgKCFjZS5udCgpLmFjKSB0aHJvdyBuZXcgYyhoLlVOSU1QTEVNRU5URUQsIFwiQmxvYnMgYXJlIHVuYXZhaWxhYmxlIGluIEZpcmVzdG9yZSBpbiB0aGlzIGVudmlyb25tZW50LlwiKTtcbn1cblxuLyoqXG4gKiBJbW11dGFibGUgY2xhc3MgaG9sZGluZyBhIGJsb2IgKGJpbmFyeSBkYXRhKS5cbiAqIFRoaXMgY2xhc3MgaXMgZGlyZWN0bHkgZXhwb3NlZCBpbiB0aGUgcHVibGljIEFQSS5cbiAqXG4gKiBOb3RlIHRoYXQgd2hpbGUgeW91IGNhbid0IGhpZGUgdGhlIGNvbnN0cnVjdG9yIGluIEphdmFTY3JpcHQgY29kZSwgd2UgYXJlXG4gKiB1c2luZyB0aGUgaGFjayBhYm92ZSB0byBtYWtlIHN1cmUgbm8tb25lIG91dHNpZGUgdGhpcyBtb2R1bGUgY2FuIGNhbGwgaXQuXG4gKi8gdmFyIElyID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgVHIoKSwgdGhpcy51YyA9IHQ7XG4gICAgfVxuICAgIHJldHVybiB0LmZyb21CYXNlNjRTdHJpbmcgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIG9yKFwiQmxvYi5mcm9tQmFzZTY0U3RyaW5nXCIsIGFyZ3VtZW50cywgMSksIGFyKFwiQmxvYi5mcm9tQmFzZTY0U3RyaW5nXCIsIFwic3RyaW5nXCIsIDEsIGUpLCBcbiAgICAgICAgVHIoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgdChBLmZyb21CYXNlNjRTdHJpbmcoZSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiRmFpbGVkIHRvIGNvbnN0cnVjdCBCbG9iIGZyb20gQmFzZTY0IHN0cmluZzogXCIgKyBlKTtcbiAgICAgICAgfVxuICAgIH0sIHQuZnJvbVVpbnQ4QXJyYXkgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmIChvcihcIkJsb2IuZnJvbVVpbnQ4QXJyYXlcIiwgYXJndW1lbnRzLCAxKSwgX3IoKSwgIShlIGluc3RhbmNlb2YgVWludDhBcnJheSkpIHRocm93IG1yKFwiQmxvYi5mcm9tVWludDhBcnJheVwiLCBcIlVpbnQ4QXJyYXlcIiwgMSwgZSk7XG4gICAgICAgIHJldHVybiBuZXcgdChBLmZyb21VaW50OEFycmF5KGUpKTtcbiAgICB9LCB0LnByb3RvdHlwZS50b0Jhc2U2NCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gb3IoXCJCbG9iLnRvQmFzZTY0XCIsIGFyZ3VtZW50cywgMCksIFRyKCksIHRoaXMudWMudG9CYXNlNjQoKTtcbiAgICB9LCB0LnByb3RvdHlwZS50b1VpbnQ4QXJyYXkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG9yKFwiQmxvYi50b1VpbnQ4QXJyYXlcIiwgYXJndW1lbnRzLCAwKSwgX3IoKSwgdGhpcy51Yy50b1VpbnQ4QXJyYXkoKTtcbiAgICB9LCB0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gXCJCbG9iKGJhc2U2NDogXCIgKyB0aGlzLnRvQmFzZTY0KCkgKyBcIilcIjtcbiAgICB9LCB0LnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy51Yy5pc0VxdWFsKHQudWMpO1xuICAgIH0sIHQ7XG59KCksIE5yID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgRmllbGRQYXRoIGZyb20gdGhlIHByb3ZpZGVkIGZpZWxkIG5hbWVzLiBJZiBtb3JlIHRoYW4gb25lIGZpZWxkXG4gICAgICogbmFtZSBpcyBwcm92aWRlZCwgdGhlIHBhdGggd2lsbCBwb2ludCB0byBhIG5lc3RlZCBmaWVsZCBpbiBhIGRvY3VtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGZpZWxkTmFtZXMgQSBsaXN0IG9mIGZpZWxkIG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgICAgIGZvciAodmFyIHQgPSBbXSwgZSA9IDA7IGUgPCBhcmd1bWVudHMubGVuZ3RoOyBlKyspIHRbZV0gPSBhcmd1bWVudHNbZV07XG4gICAgICAgICFmdW5jdGlvbih0LCBlLCBuLCByKSB7XG4gICAgICAgICAgICBpZiAoIShlIGluc3RhbmNlb2YgQXJyYXkpIHx8IGUubGVuZ3RoIDwgMSkgdGhyb3cgbmV3IGMoaC5JTlZBTElEX0FSR1VNRU5ULCBcIkZ1bmN0aW9uIEZpZWxkUGF0aCgpIHJlcXVpcmVzIGl0cyBmaWVsZE5hbWVzIGFyZ3VtZW50IHRvIGJlIGFuIGFycmF5IHdpdGggYXQgbGVhc3QgXCIgKyBicigxLCBcImVsZW1lbnRcIikgKyBcIi5cIik7XG4gICAgICAgIH0oMCwgdCk7XG4gICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgdC5sZW5ndGg7ICsrbikgaWYgKGFyKFwiRmllbGRQYXRoXCIsIFwic3RyaW5nXCIsIG4sIHRbbl0pLCAwID09PSB0W25dLmxlbmd0aCkgdGhyb3cgbmV3IGMoaC5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgZmllbGQgbmFtZSBhdCBhcmd1bWVudCAkKGkgKyAxKS4gRmllbGQgbmFtZXMgbXVzdCBub3QgYmUgZW1wdHkuXCIpO1xuICAgICAgICB0aGlzLmNjID0gbmV3IGIodCk7XG4gICAgfVxuICAgIHJldHVybiB0LmRvY3VtZW50SWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHQuX2M7XG4gICAgfSwgdC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKCEoZSBpbnN0YW5jZW9mIHQpKSB0aHJvdyBtcihcImlzRXF1YWxcIiwgXCJGaWVsZFBhdGhcIiwgMSwgZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmNjLmlzRXF1YWwoZS5jYyk7XG4gICAgfSwgdDtcbn0oKTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIFRoZSBvYmplY3RzIHRoYXQgYXJlIGEgcGFydCBvZiB0aGlzIEFQSSBhcmUgZXhwb3NlZCB0byB0aGlyZC1wYXJ0aWVzIGFzXG4vLyBjb21waWxlZCBqYXZhc2NyaXB0IHNvIHdlIHdhbnQgdG8gZmxhZyBvdXIgcHJpdmF0ZSBtZW1iZXJzIHdpdGggYSBsZWFkaW5nXG4vLyB1bmRlcnNjb3JlIHRvIGRpc2NvdXJhZ2UgdGhlaXIgdXNlLlxuLyoqXG4gKiBBIEZpZWxkUGF0aCByZWZlcnMgdG8gYSBmaWVsZCBpbiBhIGRvY3VtZW50LiBUaGUgcGF0aCBtYXkgY29uc2lzdCBvZiBhIHNpbmdsZVxuICogZmllbGQgbmFtZSAocmVmZXJyaW5nIHRvIGEgdG9wLWxldmVsIGZpZWxkIGluIHRoZSBkb2N1bWVudCksIG9yIGEgbGlzdCBvZlxuICogZmllbGQgbmFtZXMgKHJlZmVycmluZyB0byBhIG5lc3RlZCBmaWVsZCBpbiB0aGUgZG9jdW1lbnQpLlxuICovXG4vKipcbiAqIEludGVybmFsIE5vdGU6IFRoZSBiYWNrZW5kIGRvZXNuJ3QgdGVjaG5pY2FsbHkgc3VwcG9ydCBxdWVyeWluZyBieVxuICogZG9jdW1lbnQgSUQuIEluc3RlYWQgaXQgcXVlcmllcyBieSB0aGUgZW50aXJlIGRvY3VtZW50IG5hbWUgKGZ1bGwgcGF0aFxuICogaW5jbHVkZWQpLCBidXQgaW4gdGhlIGNhc2VzIHdlIGN1cnJlbnRseSBzdXBwb3J0IGRvY3VtZW50SWQoKSwgdGhlIG5ldFxuICogZWZmZWN0IGlzIHRoZSBzYW1lLlxuICovXG5Oci5fYyA9IG5ldyBOcihiLkooKS5qKCkpO1xuXG4vKipcbiAqIE1hdGNoZXMgYW55IGNoYXJhY3RlcnMgaW4gYSBmaWVsZCBwYXRoIHN0cmluZyB0aGF0IGFyZSByZXNlcnZlZC5cbiAqL1xudmFyIEFyID0gbmV3IFJlZ0V4cChcIlt+XFxcXCovXFxcXFtcXFxcXV1cIiksIGtyID0gZnVuY3Rpb24odCkge1xuICAgIHRoaXMubGMgPSB0O1xufSwgRHIgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKHQpIHtcbiAgICBmdW5jdGlvbiBuKCkge1xuICAgICAgICByZXR1cm4gdC5jYWxsKHRoaXMsIFwiRmllbGRWYWx1ZS5kZWxldGVcIikgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGUuX19leHRlbmRzKG4sIHQpLCBuLnByb3RvdHlwZS5EaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgaWYgKDIgLyogTWVyZ2VTZXQgKi8gIT09IHQuZGMpIHRocm93IDEgLyogVXBkYXRlICovID09PSB0LmRjID8gdC5mYyhcIkZpZWxkVmFsdWUuZGVsZXRlKCkgY2FuIG9ubHkgYXBwZWFyIGF0IHRoZSB0b3AgbGV2ZWwgb2YgeW91ciB1cGRhdGUgZGF0YVwiKSA6IHQuZmMoXCJGaWVsZFZhbHVlLmRlbGV0ZSgpIGNhbm5vdCBiZSB1c2VkIHdpdGggc2V0KCkgdW5sZXNzIHlvdSBwYXNzIHttZXJnZTp0cnVlfVwiKTtcbiAgICAgICAgLy8gTm8gdHJhbnNmb3JtIHRvIGFkZCBmb3IgYSBkZWxldGUsIGJ1dCB3ZSBuZWVkIHRvIGFkZCBpdCB0byBvdXJcbiAgICAgICAgLy8gZmllbGRNYXNrIHNvIGl0IGdldHMgZGVsZXRlZC5cbiAgICAgICAgICAgICAgICByZXR1cm4gdC5WdC5wdXNoKHQucGF0aCksIG51bGw7XG4gICAgfSwgbi5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBuO1xuICAgIH0sIG47XG59KGtyKSwgeHIgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKHQpIHtcbiAgICBmdW5jdGlvbiBuKCkge1xuICAgICAgICByZXR1cm4gdC5jYWxsKHRoaXMsIFwiRmllbGRWYWx1ZS5zZXJ2ZXJUaW1lc3RhbXBcIikgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGUuX19leHRlbmRzKG4sIHQpLCBuLnByb3RvdHlwZS5EaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0dCh0LnBhdGgsIFkuaW5zdGFuY2UpO1xuICAgIH0sIG4ucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0IGluc3RhbmNlb2YgbjtcbiAgICB9LCBuO1xufShrciksIFNyID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbih0KSB7XG4gICAgZnVuY3Rpb24gbihlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgcmV0dXJuIChuID0gdC5jYWxsKHRoaXMsIFwiRmllbGRWYWx1ZS5hcnJheVVuaW9uXCIpIHx8IHRoaXMpLlRjID0gZSwgbjtcbiAgICB9XG4gICAgcmV0dXJuIGUuX19leHRlbmRzKG4sIHQpLCBuLnByb3RvdHlwZS5EaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgLy8gQWx0aG91Z2ggYXJyYXkgdHJhbnNmb3JtcyBhcmUgdXNlZCB3aXRoIHdyaXRlcywgdGhlIGFjdHVhbCBlbGVtZW50c1xuICAgICAgICAvLyBiZWluZyB1bmlvbWVkIG9yIHJlbW92ZWQgYXJlIG5vdCBjb25zaWRlcmVkIHdyaXRlcyBzaW5jZSB0aGV5IGNhbm5vdFxuICAgICAgICAvLyBjb250YWluIGFueSBGaWVsZFZhbHVlIHNlbnRpbmVscywgZXRjLlxuICAgICAgICB2YXIgZSA9IG5ldyBxcih7XG4gICAgICAgICAgICBkYzogMyAvKiBBcmd1bWVudCAqLyAsXG4gICAgICAgICAgICBtZXRob2ROYW1lOiB0aGlzLmxjLFxuICAgICAgICAgICAgRWM6ICEwXG4gICAgICAgIH0sIHQuaWksIHQuc2VyaWFsaXplciwgdC5pZ25vcmVVbmRlZmluZWRQcm9wZXJ0aWVzKSwgbiA9IHRoaXMuVGMubWFwKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4ganIodCwgZSk7XG4gICAgICAgIH0pKSwgciA9IG5ldyAkKG4pO1xuICAgICAgICByZXR1cm4gbmV3IHR0KHQucGF0aCwgcik7XG4gICAgfSwgbi5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgLy8gVE9ETyhtcnNjaG1pZHQpOiBJbXBsZW1lbnQgaXNFcXVhbHNcbiAgICAgICAgcmV0dXJuIHRoaXMgPT09IHQ7XG4gICAgfSwgbjtcbn0oa3IpLCBSciA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24odCkge1xuICAgIGZ1bmN0aW9uIG4oZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIHJldHVybiAobiA9IHQuY2FsbCh0aGlzLCBcIkZpZWxkVmFsdWUuYXJyYXlSZW1vdmVcIikgfHwgdGhpcykuVGMgPSBlLCBuO1xuICAgIH1cbiAgICByZXR1cm4gZS5fX2V4dGVuZHMobiwgdCksIG4ucHJvdG90eXBlLkRpID0gZnVuY3Rpb24odCkge1xuICAgICAgICAvLyBBbHRob3VnaCBhcnJheSB0cmFuc2Zvcm1zIGFyZSB1c2VkIHdpdGggd3JpdGVzLCB0aGUgYWN0dWFsIGVsZW1lbnRzXG4gICAgICAgIC8vIGJlaW5nIHVuaW9uZWQgb3IgcmVtb3ZlZCBhcmUgbm90IGNvbnNpZGVyZWQgd3JpdGVzIHNpbmNlIHRoZXkgY2Fubm90XG4gICAgICAgIC8vIGNvbnRhaW4gYW55IEZpZWxkVmFsdWUgc2VudGluZWxzLCBldGMuXG4gICAgICAgIHZhciBlID0gbmV3IHFyKHtcbiAgICAgICAgICAgIGRjOiAzIC8qIEFyZ3VtZW50ICovICxcbiAgICAgICAgICAgIG1ldGhvZE5hbWU6IHRoaXMubGMsXG4gICAgICAgICAgICBFYzogITBcbiAgICAgICAgfSwgdC5paSwgdC5zZXJpYWxpemVyLCB0Lmlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMpLCBuID0gdGhpcy5UYy5tYXAoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBqcih0LCBlKTtcbiAgICAgICAgfSkpLCByID0gbmV3IEoobik7XG4gICAgICAgIHJldHVybiBuZXcgdHQodC5wYXRoLCByKTtcbiAgICB9LCBuLnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24odCkge1xuICAgICAgICAvLyBUT0RPKG1yc2NobWlkdCk6IEltcGxlbWVudCBpc0VxdWFsc1xuICAgICAgICByZXR1cm4gdGhpcyA9PT0gdDtcbiAgICB9LCBuO1xufShrciksIExyID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbih0KSB7XG4gICAgZnVuY3Rpb24gbihlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgcmV0dXJuIChuID0gdC5jYWxsKHRoaXMsIFwiRmllbGRWYWx1ZS5pbmNyZW1lbnRcIikgfHwgdGhpcykuSWMgPSBlLCBuO1xuICAgIH1cbiAgICByZXR1cm4gZS5fX2V4dGVuZHMobiwgdCksIG4ucHJvdG90eXBlLkRpID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IG5ldyBxcih7XG4gICAgICAgICAgICBkYzogMyAvKiBBcmd1bWVudCAqLyAsXG4gICAgICAgICAgICBtZXRob2ROYW1lOiB0aGlzLmxjXG4gICAgICAgIH0sIHQuaWksIHQuc2VyaWFsaXplciwgdC5pZ25vcmVVbmRlZmluZWRQcm9wZXJ0aWVzKSwgbiA9IGpyKHRoaXMuSWMsIGUpLCByID0gbmV3IEgodC5zZXJpYWxpemVyLCBuKTtcbiAgICAgICAgcmV0dXJuIG5ldyB0dCh0LnBhdGgsIHIpO1xuICAgIH0sIG4ucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIC8vIFRPRE8obXJzY2htaWR0KTogSW1wbGVtZW50IGlzRXF1YWxzXG4gICAgICAgIHJldHVybiB0aGlzID09PSB0O1xuICAgIH0sIG47XG59KGtyKSwgT3IgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSkge1xuICAgICAgICBpZiAob3IoXCJHZW9Qb2ludFwiLCBhcmd1bWVudHMsIDIpLCBhcihcIkdlb1BvaW50XCIsIFwibnVtYmVyXCIsIDEsIHQpLCBhcihcIkdlb1BvaW50XCIsIFwibnVtYmVyXCIsIDIsIGUpLCBcbiAgICAgICAgIWlzRmluaXRlKHQpIHx8IHQgPCAtOTAgfHwgdCA+IDkwKSB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiTGF0aXR1ZGUgbXVzdCBiZSBhIG51bWJlciBiZXR3ZWVuIC05MCBhbmQgOTAsIGJ1dCB3YXM6IFwiICsgdCk7XG4gICAgICAgIGlmICghaXNGaW5pdGUoZSkgfHwgZSA8IC0xODAgfHwgZSA+IDE4MCkgdGhyb3cgbmV3IGMoaC5JTlZBTElEX0FSR1VNRU5ULCBcIkxvbmdpdHVkZSBtdXN0IGJlIGEgbnVtYmVyIGJldHdlZW4gLTE4MCBhbmQgMTgwLCBidXQgd2FzOiBcIiArIGUpO1xuICAgICAgICB0aGlzLndjID0gdCwgdGhpcy5SYyA9IGU7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwibGF0aXR1ZGVcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgbGF0aXR1ZGUgb2YgdGhpcyBnZW8gcG9pbnQsIGEgbnVtYmVyIGJldHdlZW4gLTkwIGFuZCA5MC5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53YztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcImxvbmdpdHVkZVwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBsb25naXR1ZGUgb2YgdGhpcyBnZW8gcG9pbnQsIGEgbnVtYmVyIGJldHdlZW4gLTE4MCBhbmQgMTgwLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlJjO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCB0LnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy53YyA9PT0gdC53YyAmJiB0aGlzLlJjID09PSB0LlJjO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIEFjdHVhbGx5IHByaXZhdGUgdG8gSlMgY29uc3VtZXJzIG9mIG91ciBBUEksIHNvIHRoaXMgZnVuY3Rpb24gaXMgcHJlZml4ZWRcbiAgICAgKiB3aXRoIGFuIHVuZGVyc2NvcmUuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUucCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIGJlKHRoaXMud2MsIHQud2MpIHx8IGJlKHRoaXMuUmMsIHQuUmMpO1xuICAgIH0sIHQ7XG59KCksIFZyID0gL15fXy4qX18kLywgUHIgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSwgbikge1xuICAgICAgICB0aGlzLmRhdGEgPSB0LCB0aGlzLlZ0ID0gZSwgdGhpcy5maWVsZFRyYW5zZm9ybXMgPSBuO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuQWMgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gW107XG4gICAgICAgIHJldHVybiBudWxsICE9PSB0aGlzLlZ0ID8gbi5wdXNoKG5ldyBvdCh0LCB0aGlzLmRhdGEsIHRoaXMuVnQsIGUpKSA6IG4ucHVzaChuZXcgaXQodCwgdGhpcy5kYXRhLCBlKSksIFxuICAgICAgICB0aGlzLmZpZWxkVHJhbnNmb3Jtcy5sZW5ndGggPiAwICYmIG4ucHVzaChuZXcgc3QodCwgdGhpcy5maWVsZFRyYW5zZm9ybXMpKSwgbjtcbiAgICB9LCB0O1xufSgpLCBVciA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IHQsIHRoaXMuVnQgPSBlLCB0aGlzLmZpZWxkVHJhbnNmb3JtcyA9IG47XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5BYyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSBbIG5ldyBvdCh0LCB0aGlzLmRhdGEsIHRoaXMuVnQsIGUpIF07XG4gICAgICAgIHJldHVybiB0aGlzLmZpZWxkVHJhbnNmb3Jtcy5sZW5ndGggPiAwICYmIG4ucHVzaChuZXcgc3QodCwgdGhpcy5maWVsZFRyYW5zZm9ybXMpKSwgXG4gICAgICAgIG47XG4gICAgfSwgdDtcbn0oKTtcblxuLyoqXG4gKiBQYXJzZXMgYSBmaWVsZCBwYXRoIHN0cmluZyBpbnRvIGEgRmllbGRQYXRoLCB0cmVhdGluZyBkb3RzIGFzIHNlcGFyYXRvcnMuXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEFuIG9wYXF1ZSBiYXNlIGNsYXNzIGZvciBGaWVsZFZhbHVlIHNlbnRpbmVsIG9iamVjdHMgaW4gb3VyIHB1YmxpYyBBUEksXG4gKiB3aXRoIHB1YmxpYyBzdGF0aWMgbWV0aG9kcyBmb3IgY3JlYXRpbmcgc2FpZCBzZW50aW5lbCBvYmplY3RzLlxuICovIGZ1bmN0aW9uIENyKHQpIHtcbiAgICBzd2l0Y2ggKHQpIHtcbiAgICAgIGNhc2UgMCAvKiBTZXQgKi8gOlxuIC8vIGZhbGwgdGhyb3VnaFxuICAgICAgICAgICAgICBjYXNlIDIgLyogTWVyZ2VTZXQgKi8gOlxuIC8vIGZhbGwgdGhyb3VnaFxuICAgICAgICAgICAgICBjYXNlIDEgLyogVXBkYXRlICovIDpcbiAgICAgICAgcmV0dXJuICEwO1xuXG4gICAgICBjYXNlIDMgLyogQXJndW1lbnQgKi8gOlxuICAgICAgY2FzZSA0IC8qIEFycmF5QXJndW1lbnQgKi8gOlxuICAgICAgICByZXR1cm4gITE7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IGdlKCk7XG4gICAgfVxufVxuXG4vKiogQSBcImNvbnRleHRcIiBvYmplY3QgcGFzc2VkIGFyb3VuZCB3aGlsZSBwYXJzaW5nIHVzZXIgZGF0YS4gKi8gdmFyIHFyID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhIFBhcnNlQ29udGV4dCB3aXRoIHRoZSBnaXZlbiBzb3VyY2UgYW5kIHBhdGguXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2V0dGluZ3MgVGhlIHNldHRpbmdzIGZvciB0aGUgcGFyc2VyLlxuICAgICAqIEBwYXJhbSBkYXRhYmFzZUlkIFRoZSBkYXRhYmFzZSBJRCBvZiB0aGUgRmlyZXN0b3JlIGluc3RhbmNlLlxuICAgICAqIEBwYXJhbSBzZXJpYWxpemVyIFRoZSBzZXJpYWxpemVyIHRvIHVzZSB0byBnZW5lcmF0ZSB0aGUgVmFsdWUgcHJvdG8uXG4gICAgICogQHBhcmFtIGlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMgV2hldGhlciB0byBpZ25vcmUgdW5kZWZpbmVkIHByb3BlcnRpZXNcbiAgICAgKiByYXRoZXIgdGhhbiB0aHJvdy5cbiAgICAgKiBAcGFyYW0gZmllbGRUcmFuc2Zvcm1zIEEgbXV0YWJsZSBsaXN0IG9mIGZpZWxkIHRyYW5zZm9ybXMgZW5jb3VudGVyZWQgd2hpbGVcbiAgICAgKiAgICAgcGFyc2luZyB0aGUgZGF0YS5cbiAgICAgKiBAcGFyYW0gZmllbGRNYXNrIEEgbXV0YWJsZSBsaXN0IG9mIGZpZWxkIHBhdGhzIGVuY291bnRlcmVkIHdoaWxlIHBhcnNpbmdcbiAgICAgKiAgICAgdGhlIGRhdGEuXG4gICAgICpcbiAgICAgKiBUT0RPKGIvMzQ4NzExMzEpOiBXZSBkb24ndCBzdXBwb3J0IGFycmF5IHBhdGhzIHJpZ2h0IG5vdywgc28gcGF0aCBjYW4gYmVcbiAgICAgKiBudWxsIHRvIGluZGljYXRlIHRoZSBjb250ZXh0IHJlcHJlc2VudHMgYW55IGxvY2F0aW9uIHdpdGhpbiBhbiBhcnJheSAoaW5cbiAgICAgKiB3aGljaCBjYXNlIGNlcnRhaW4gZmVhdHVyZXMgd2lsbCBub3Qgd29yayBhbmQgZXJyb3JzIHdpbGwgYmUgc29tZXdoYXRcbiAgICAgKiBjb21wcm9taXNlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdCh0LCBlLCBuLCByLCBpLCBvKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSB0LCB0aGlzLmlpID0gZSwgdGhpcy5zZXJpYWxpemVyID0gbiwgdGhpcy5pZ25vcmVVbmRlZmluZWRQcm9wZXJ0aWVzID0gciwgXG4gICAgICAgIC8vIE1pbm9yIGhhY2s6IElmIGZpZWxkVHJhbnNmb3JtcyBpcyB1bmRlZmluZWQsIHdlIGFzc3VtZSB0aGlzIGlzIGFuXG4gICAgICAgIC8vIGV4dGVybmFsIGNhbGwgYW5kIHdlIG5lZWQgdG8gdmFsaWRhdGUgdGhlIGVudGlyZSBwYXRoLlxuICAgICAgICB2b2lkIDAgPT09IGkgJiYgdGhpcy5tYygpLCB0aGlzLmZpZWxkVHJhbnNmb3JtcyA9IGkgfHwgW10sIHRoaXMuVnQgPSBvIHx8IFtdO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcInBhdGhcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3MucGF0aDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcImRjXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLmRjO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBcbiAgICAvKiogUmV0dXJucyBhIG5ldyBjb250ZXh0IHdpdGggdGhlIHNwZWNpZmllZCBzZXR0aW5ncyBvdmVyd3JpdHRlbi4gKi8gdC5wcm90b3R5cGUuUGMgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBuZXcgdChPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc2V0dGluZ3MpLCBlKSwgdGhpcy5paSwgdGhpcy5zZXJpYWxpemVyLCB0aGlzLmlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMsIHRoaXMuZmllbGRUcmFuc2Zvcm1zLCB0aGlzLlZ0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5WYyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUsIG4gPSBudWxsID09PSAoZSA9IHRoaXMucGF0aCkgfHwgdm9pZCAwID09PSBlID8gdm9pZCAwIDogZS5jaGlsZCh0KSwgciA9IHRoaXMuUGMoe1xuICAgICAgICAgICAgcGF0aDogbixcbiAgICAgICAgICAgIEVjOiAhMVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHIuZ2ModCksIHI7XG4gICAgfSwgdC5wcm90b3R5cGUucGMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlLCBuID0gbnVsbCA9PT0gKGUgPSB0aGlzLnBhdGgpIHx8IHZvaWQgMCA9PT0gZSA/IHZvaWQgMCA6IGUuY2hpbGQodCksIHIgPSB0aGlzLlBjKHtcbiAgICAgICAgICAgIHBhdGg6IG4sXG4gICAgICAgICAgICBFYzogITFcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByLm1jKCksIHI7XG4gICAgfSwgdC5wcm90b3R5cGUueWMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIC8vIFRPRE8oYi8zNDg3MTEzMSk6IFdlIGRvbid0IHN1cHBvcnQgYXJyYXkgcGF0aHMgcmlnaHQgbm93OyBzbyBtYWtlIHBhdGhcbiAgICAgICAgLy8gdW5kZWZpbmVkLlxuICAgICAgICByZXR1cm4gdGhpcy5QYyh7XG4gICAgICAgICAgICBwYXRoOiB2b2lkIDAsXG4gICAgICAgICAgICBFYzogITBcbiAgICAgICAgfSk7XG4gICAgfSwgdC5wcm90b3R5cGUuZmMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gIXRoaXMucGF0aCB8fCB0aGlzLnBhdGguQigpID8gXCJcIiA6IFwiIChmb3VuZCBpbiBmaWVsZCBcIiArIHRoaXMucGF0aC50b1N0cmluZygpICsgXCIpXCI7XG4gICAgICAgIHJldHVybiBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiRnVuY3Rpb24gXCIgKyB0aGlzLnNldHRpbmdzLm1ldGhvZE5hbWUgKyBcIigpIGNhbGxlZCB3aXRoIGludmFsaWQgZGF0YS4gXCIgKyB0ICsgZSk7XG4gICAgfSwgXG4gICAgLyoqIFJldHVybnMgJ3RydWUnIGlmICdmaWVsZFBhdGgnIHdhcyB0cmF2ZXJzZWQgd2hlbiBjcmVhdGluZyB0aGlzIGNvbnRleHQuICovIHQucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdm9pZCAwICE9PSB0aGlzLlZ0LmZpbmQoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0LnEoZSk7XG4gICAgICAgIH0pKSB8fCB2b2lkIDAgIT09IHRoaXMuZmllbGRUcmFuc2Zvcm1zLmZpbmQoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0LnEoZS5maWVsZCk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5tYyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBUT0RPKGIvMzQ4NzExMzEpOiBSZW1vdmUgbnVsbCBjaGVjayBvbmNlIHdlIGhhdmUgcHJvcGVyIHBhdGhzIGZvciBmaWVsZHNcbiAgICAgICAgLy8gd2l0aGluIGFycmF5cy5cbiAgICAgICAgaWYgKHRoaXMucGF0aCkgZm9yICh2YXIgdCA9IDA7IHQgPCB0aGlzLnBhdGgubGVuZ3RoOyB0KyspIHRoaXMuZ2ModGhpcy5wYXRoLmdldCh0KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuZ2MgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGlmICgwID09PSB0Lmxlbmd0aCkgdGhyb3cgdGhpcy5mYyhcIkRvY3VtZW50IGZpZWxkcyBtdXN0IG5vdCBiZSBlbXB0eVwiKTtcbiAgICAgICAgaWYgKENyKHRoaXMuZGMpICYmIFZyLnRlc3QodCkpIHRocm93IHRoaXMuZmMoJ0RvY3VtZW50IGZpZWxkcyBjYW5ub3QgYmVnaW4gYW5kIGVuZCB3aXRoIFwiX19cIicpO1xuICAgIH0sIHQ7XG59KCksIE1yID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQsIGUsIG4pIHtcbiAgICAgICAgdGhpcy5paSA9IHQsIHRoaXMuaWdub3JlVW5kZWZpbmVkUHJvcGVydGllcyA9IGUsIHRoaXMuc2VyaWFsaXplciA9IG4gfHwgY2UubnQoKS5iYyh0KVxuICAgICAgICAvKiogUGFyc2UgZG9jdW1lbnQgZGF0YSBmcm9tIGEgbm9uLW1lcmdlIHNldCgpIGNhbGwuICovO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUudmMgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcy5TYygwIC8qIFNldCAqLyAsIHQpO1xuICAgICAgICB6cihcIkRhdGEgbXVzdCBiZSBhbiBvYmplY3QsIGJ1dCBpdCB3YXM6XCIsIG4sIGUpO1xuICAgICAgICB2YXIgciA9IEZyKGUsIG4pO1xuICAgICAgICByZXR1cm4gbmV3IFByKG5ldyBodChyKSwgXG4gICAgICAgIC8qIGZpZWxkTWFzaz0gKi8gbnVsbCwgbi5maWVsZFRyYW5zZm9ybXMpO1xuICAgIH0sIFxuICAgIC8qKiBQYXJzZSBkb2N1bWVudCBkYXRhIGZyb20gYSBzZXQoKSBjYWxsIHdpdGggJ3ttZXJnZTp0cnVlfScuICovIHQucHJvdG90eXBlLkRjID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXMuU2MoMiAvKiBNZXJnZVNldCAqLyAsIHQpO1xuICAgICAgICB6cihcIkRhdGEgbXVzdCBiZSBhbiBvYmplY3QsIGJ1dCBpdCB3YXM6XCIsIHIsIGUpO1xuICAgICAgICB2YXIgaSwgbywgcyA9IEZyKGUsIHIpO1xuICAgICAgICBpZiAobikge1xuICAgICAgICAgICAgZm9yICh2YXIgdSA9IFtdLCBhID0gMCwgZiA9IG47IGEgPCBmLmxlbmd0aDsgYSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGwgPSBmW2FdLCBwID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIGlmIChsIGluc3RhbmNlb2YgTnIpIHAgPSBsLmNjOyBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwic3RyaW5nXCIgIT0gdHlwZW9mIGwpIHRocm93IGdlKCk7XG4gICAgICAgICAgICAgICAgICAgIHAgPSBXcih0LCBsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFyLmNvbnRhaW5zKHApKSB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiRmllbGQgJ1wiICsgcCArIFwiJyBpcyBzcGVjaWZpZWQgaW4geW91ciBmaWVsZCBtYXNrIGJ1dCBtaXNzaW5nIGZyb20geW91ciBpbnB1dCBkYXRhLlwiKTtcbiAgICAgICAgICAgICAgICBRcih1LCBwKSB8fCB1LnB1c2gocCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpID0gbmV3IFoodSksIG8gPSByLmZpZWxkVHJhbnNmb3Jtcy5maWx0ZXIoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaS5kdCh0LmZpZWxkKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSBlbHNlIGkgPSBuZXcgWihyLlZ0KSwgbyA9IHIuZmllbGRUcmFuc2Zvcm1zO1xuICAgICAgICByZXR1cm4gbmV3IFByKG5ldyBodChzKSwgaSwgbyk7XG4gICAgfSwgXG4gICAgLyoqIFBhcnNlIHVwZGF0ZSBkYXRhIGZyb20gYW4gdXBkYXRlKCkgY2FsbC4gKi8gdC5wcm90b3R5cGUuQ2MgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcy5TYygxIC8qIFVwZGF0ZSAqLyAsIHQpO1xuICAgICAgICB6cihcIkRhdGEgbXVzdCBiZSBhbiBvYmplY3QsIGJ1dCBpdCB3YXM6XCIsIG4sIGUpO1xuICAgICAgICB2YXIgciA9IFtdLCBpID0gbmV3IGN0O1xuICAgICAgICBJKGUsIChmdW5jdGlvbihlLCBvKSB7XG4gICAgICAgICAgICB2YXIgcyA9IFdyKHQsIGUpLCB1ID0gbi5wYyhzKTtcbiAgICAgICAgICAgIGlmIChvIGluc3RhbmNlb2YgRHIpIFxuICAgICAgICAgICAgLy8gQWRkIGl0IHRvIHRoZSBmaWVsZCBtYXNrLCBidXQgZG9uJ3QgYWRkIGFueXRoaW5nIHRvIHVwZGF0ZURhdGEuXG4gICAgICAgICAgICByLnB1c2gocyk7IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBhID0ganIobywgdSk7XG4gICAgICAgICAgICAgICAgbnVsbCAhPSBhICYmIChyLnB1c2gocyksIGkuc2V0KHMsIGEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgICB2YXIgbyA9IG5ldyBaKHIpO1xuICAgICAgICByZXR1cm4gbmV3IFVyKGkueXQoKSwgbywgbi5maWVsZFRyYW5zZm9ybXMpO1xuICAgIH0sIFxuICAgIC8qKiBQYXJzZSB1cGRhdGUgZGF0YSBmcm9tIGEgbGlzdCBvZiBmaWVsZC92YWx1ZSBhcmd1bWVudHMuICovIHQucHJvdG90eXBlLkZjID0gZnVuY3Rpb24odCwgZSwgbiwgcikge1xuICAgICAgICB2YXIgaSA9IHRoaXMuU2MoMSAvKiBVcGRhdGUgKi8gLCB0KSwgbyA9IFsgR3IodCwgZSkgXSwgcyA9IFsgbiBdO1xuICAgICAgICBpZiAoci5sZW5ndGggJSAyICE9IDApIHRocm93IG5ldyBjKGguSU5WQUxJRF9BUkdVTUVOVCwgXCJGdW5jdGlvbiBcIiArIHQgKyBcIigpIG5lZWRzIHRvIGJlIGNhbGxlZCB3aXRoIGFuIGV2ZW4gbnVtYmVyIG9mIGFyZ3VtZW50cyB0aGF0IGFsdGVybmF0ZSBiZXR3ZWVuIGZpZWxkIG5hbWVzIGFuZCB2YWx1ZXMuXCIpO1xuICAgICAgICBmb3IgKHZhciB1ID0gMDsgdSA8IHIubGVuZ3RoOyB1ICs9IDIpIG8ucHVzaChHcih0LCByW3VdKSksIHMucHVzaChyW3UgKyAxXSk7XG4gICAgICAgIC8vIFdlIGl0ZXJhdGUgaW4gcmV2ZXJzZSBvcmRlciB0byBwaWNrIHRoZSBsYXN0IHZhbHVlIGZvciBhIGZpZWxkIGlmIHRoZVxuICAgICAgICAvLyB1c2VyIHNwZWNpZmllZCB0aGUgZmllbGQgbXVsdGlwbGUgdGltZXMuXG4gICAgICAgIGZvciAodmFyIGEgPSBbXSwgZiA9IG5ldyBjdCwgbCA9IG8ubGVuZ3RoIC0gMTsgbCA+PSAwOyAtLWwpIGlmICghUXIoYSwgb1tsXSkpIHtcbiAgICAgICAgICAgIHZhciBwID0gb1tsXSwgZCA9IHNbbF0sIHkgPSBpLnBjKHApO1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiBEcikgXG4gICAgICAgICAgICAvLyBBZGQgaXQgdG8gdGhlIGZpZWxkIG1hc2ssIGJ1dCBkb24ndCBhZGQgYW55dGhpbmcgdG8gdXBkYXRlRGF0YS5cbiAgICAgICAgICAgIGEucHVzaChwKTsgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHYgPSBqcihkLCB5KTtcbiAgICAgICAgICAgICAgICBudWxsICE9IHYgJiYgKGEucHVzaChwKSwgZi5zZXQocCwgdikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBnID0gbmV3IFooYSk7XG4gICAgICAgIHJldHVybiBuZXcgVXIoZi55dCgpLCBnLCBpLmZpZWxkVHJhbnNmb3Jtcyk7XG4gICAgfSwgXG4gICAgLyoqIENyZWF0ZXMgYSBuZXcgdG9wLWxldmVsIHBhcnNlIGNvbnRleHQuICovIHQucHJvdG90eXBlLlNjID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gbmV3IHFyKHtcbiAgICAgICAgICAgIGRjOiB0LFxuICAgICAgICAgICAgbWV0aG9kTmFtZTogZSxcbiAgICAgICAgICAgIHBhdGg6IGIuRyxcbiAgICAgICAgICAgIEVjOiAhMVxuICAgICAgICB9LCB0aGlzLmlpLCB0aGlzLnNlcmlhbGl6ZXIsIHRoaXMuaWdub3JlVW5kZWZpbmVkUHJvcGVydGllcyk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUGFyc2UgYSBcInF1ZXJ5IHZhbHVlXCIgKGUuZy4gdmFsdWUgaW4gYSB3aGVyZSBmaWx0ZXIgb3IgYSB2YWx1ZSBpbiBhIGN1cnNvclxuICAgICAqIGJvdW5kKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhbGxvd0FycmF5cyBXaGV0aGVyIHRoZSBxdWVyeSB2YWx1ZSBpcyBhbiBhcnJheSB0aGF0IG1heSBkaXJlY3RseVxuICAgICAqIGNvbnRhaW4gYWRkaXRpb25hbCBhcnJheXMgKGUuZy4gdGhlIG9wZXJhbmQgb2YgYW4gYGluYCBxdWVyeSkuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuTmMgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDAgPT09IG4gJiYgKG4gPSAhMSksIGpyKGUsIHRoaXMuU2MobiA/IDQgLyogQXJyYXlBcmd1bWVudCAqLyA6IDMgLyogQXJndW1lbnQgKi8gLCB0KSk7XG4gICAgfSwgdDtcbn0oKTtcblxuLyoqXG4gKiBIZWxwZXIgZm9yIHBhcnNpbmcgcmF3IHVzZXIgaW5wdXQgKHByb3ZpZGVkIHZpYSB0aGUgQVBJKSBpbnRvIGludGVybmFsIG1vZGVsXG4gKiBjbGFzc2VzLlxuICovXG4vKipcbiAqIFBhcnNlcyB1c2VyIGRhdGEgdG8gUHJvdG9idWYgVmFsdWVzLlxuICpcbiAqIEBwYXJhbSBpbnB1dCBEYXRhIHRvIGJlIHBhcnNlZC5cbiAqIEBwYXJhbSBjb250ZXh0IEEgY29udGV4dCBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IHBhdGggYmVpbmcgcGFyc2VkLFxuICogdGhlIHNvdXJjZSBvZiB0aGUgZGF0YSBiZWluZyBwYXJzZWQsIGV0Yy5cbiAqIEByZXR1cm4gVGhlIHBhcnNlZCB2YWx1ZSwgb3IgbnVsbCBpZiB0aGUgdmFsdWUgd2FzIGEgRmllbGRWYWx1ZSBzZW50aW5lbFxuICogdGhhdCBzaG91bGQgbm90IGJlIGluY2x1ZGVkIGluIHRoZSByZXN1bHRpbmcgcGFyc2VkIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGpyKHQsIGUpIHtcbiAgICBpZiAoQnIodCkpIHJldHVybiB6cihcIlVuc3VwcG9ydGVkIGZpZWxkIHZhbHVlOlwiLCBlLCB0KSwgRnIodCwgZSk7XG4gICAgaWYgKHQgaW5zdGFuY2VvZiBrcikgXG4gICAgLy8gRmllbGRWYWx1ZXMgdXN1YWxseSBwYXJzZSBpbnRvIHRyYW5zZm9ybXMgKGV4Y2VwdCBGaWVsZFZhbHVlLmRlbGV0ZSgpKVxuICAgIC8vIGluIHdoaWNoIGNhc2Ugd2UgZG8gbm90IHdhbnQgdG8gaW5jbHVkZSB0aGlzIGZpZWxkIGluIG91ciBwYXJzZWQgZGF0YVxuICAgIC8vIChhcyBkb2luZyBzbyB3aWxsIG92ZXJ3cml0ZSB0aGUgZmllbGQgZGlyZWN0bHkgcHJpb3IgdG8gdGhlIHRyYW5zZm9ybVxuICAgIC8vIHRyeWluZyB0byB0cmFuc2Zvcm0gaXQpLiBTbyB3ZSBkb24ndCBhZGQgdGhpcyBsb2NhdGlvbiB0b1xuICAgIC8vIGNvbnRleHQuZmllbGRNYXNrIGFuZCB3ZSByZXR1cm4gbnVsbCBhcyBvdXIgcGFyc2luZyByZXN1bHQuXG4gICAgLyoqXG4gICAgICogXCJQYXJzZXNcIiB0aGUgcHJvdmlkZWQgRmllbGRWYWx1ZUltcGwsIGFkZGluZyBhbnkgbmVjZXNzYXJ5IHRyYW5zZm9ybXMgdG9cbiAgICAgKiBjb250ZXh0LmZpZWxkVHJhbnNmb3Jtcy5cbiAgICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAvLyBTZW50aW5lbHMgYXJlIG9ubHkgc3VwcG9ydGVkIHdpdGggd3JpdGVzLCBhbmQgbm90IHdpdGhpbiBhcnJheXMuXG4gICAgICAgIGlmICghQ3IoZS5kYykpIHRocm93IGUuZmModC5sYyArIFwiKCkgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIHVwZGF0ZSgpIGFuZCBzZXQoKVwiKTtcbiAgICAgICAgaWYgKG51bGwgPT09IGUucGF0aCkgdGhyb3cgZS5mYyh0LmxjICsgXCIoKSBpcyBub3QgY3VycmVudGx5IHN1cHBvcnRlZCBpbnNpZGUgYXJyYXlzXCIpO1xuICAgICAgICB2YXIgbiA9IHQuRGkoZSk7XG4gICAgICAgIG4gJiYgZS5maWVsZFRyYW5zZm9ybXMucHVzaChuKTtcbiAgICB9KHQsIGUpLCBudWxsO1xuICAgIGlmIChcbiAgICAvLyBJZiBjb250ZXh0LnBhdGggaXMgbnVsbCB3ZSBhcmUgaW5zaWRlIGFuIGFycmF5IGFuZCB3ZSBkb24ndCBzdXBwb3J0XG4gICAgLy8gZmllbGQgbWFzayBwYXRocyBtb3JlIGdyYW51bGFyIHRoYW4gdGhlIHRvcC1sZXZlbCBhcnJheS5cbiAgICBlLnBhdGggJiYgZS5WdC5wdXNoKGUucGF0aCksIHQgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAvLyBUT0RPKGIvMzQ4NzExMzEpOiBJbmNsdWRlIHRoZSBwYXRoIGNvbnRhaW5pbmcgdGhlIGFycmF5IGluIHRoZSBlcnJvclxuICAgICAgICAvLyBtZXNzYWdlLlxuICAgICAgICAvLyBJbiB0aGUgY2FzZSBvZiBJTiBxdWVyaWVzLCB0aGUgcGFyc2VkIGRhdGEgaXMgYW4gYXJyYXkgKHJlcHJlc2VudGluZ1xuICAgICAgICAvLyB0aGUgc2V0IG9mIHZhbHVlcyB0byBiZSBpbmNsdWRlZCBmb3IgdGhlIElOIHF1ZXJ5KSB0aGF0IG1heSBkaXJlY3RseVxuICAgICAgICAvLyBjb250YWluIGFkZGl0aW9uYWwgYXJyYXlzIChlYWNoIHJlcHJlc2VudGluZyBhbiBpbmRpdmlkdWFsIGZpZWxkXG4gICAgICAgIC8vIHZhbHVlKSwgc28gd2UgZGlzYWJsZSB0aGlzIHZhbGlkYXRpb24uXG4gICAgICAgIGlmIChlLnNldHRpbmdzLkVjICYmIDQgLyogQXJyYXlBcmd1bWVudCAqLyAhPT0gZS5kYykgdGhyb3cgZS5mYyhcIk5lc3RlZCBhcnJheXMgYXJlIG5vdCBzdXBwb3J0ZWRcIik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBuID0gW10sIHIgPSAwLCBpID0gMCwgbyA9IHQ7IGkgPCBvLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBqcihvW2ldLCBlLnljKHIpKTtcbiAgICAgICAgICAgICAgICBudWxsID09IHMgJiYgKFxuICAgICAgICAgICAgICAgIC8vIEp1c3QgaW5jbHVkZSBudWxscyBpbiB0aGUgYXJyYXkgZm9yIGZpZWxkcyBiZWluZyByZXBsYWNlZCB3aXRoIGFcbiAgICAgICAgICAgICAgICAvLyBzZW50aW5lbC5cbiAgICAgICAgICAgICAgICBzID0ge1xuICAgICAgICAgICAgICAgICAgICBudWxsVmFsdWU6IFwiTlVMTF9WQUxVRVwiXG4gICAgICAgICAgICAgICAgfSksIG4ucHVzaChzKSwgcisrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhcnJheVZhbHVlOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlczogblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0odCwgZSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGlmIChudWxsID09PSB0KSByZXR1cm4ge1xuICAgICAgICAgICAgbnVsbFZhbHVlOiBcIk5VTExfVkFMVUVcIlxuICAgICAgICB9O1xuICAgICAgICBpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgdCkgcmV0dXJuIGUuc2VyaWFsaXplci5haSh0KTtcbiAgICAgICAgaWYgKFwiYm9vbGVhblwiID09IHR5cGVvZiB0KSByZXR1cm4ge1xuICAgICAgICAgICAgYm9vbGVhblZhbHVlOiB0XG4gICAgICAgIH07XG4gICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiB0KSByZXR1cm4ge1xuICAgICAgICAgICAgc3RyaW5nVmFsdWU6IHRcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICB2YXIgbiA9IHYuZnJvbURhdGUodCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRpbWVzdGFtcFZhbHVlOiBlLnNlcmlhbGl6ZXIuQyhuKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodCBpbnN0YW5jZW9mIHYpIHtcbiAgICAgICAgICAgIC8vIEZpcmVzdG9yZSBiYWNrZW5kIHRydW5jYXRlcyBwcmVjaXNpb24gZG93biB0byBtaWNyb3NlY29uZHMuIFRvIGVuc3VyZVxuICAgICAgICAgICAgLy8gb2ZmbGluZSBtb2RlIHdvcmtzIHRoZSBzYW1lIHdpdGggcmVnYXJkcyB0byB0cnVuY2F0aW9uLCBwZXJmb3JtIHRoZVxuICAgICAgICAgICAgLy8gdHJ1bmNhdGlvbiBpbW1lZGlhdGVseSB3aXRob3V0IHdhaXRpbmcgZm9yIHRoZSBiYWNrZW5kIHRvIGRvIHRoYXQuXG4gICAgICAgICAgICB2YXIgciA9IG5ldyB2KHQuc2Vjb25kcywgMWUzICogTWF0aC5mbG9vcih0Lm5hbm9zZWNvbmRzIC8gMWUzKSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRpbWVzdGFtcFZhbHVlOiBlLnNlcmlhbGl6ZXIuQyhyKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodCBpbnN0YW5jZW9mIE9yKSByZXR1cm4ge1xuICAgICAgICAgICAgZ2VvUG9pbnRWYWx1ZToge1xuICAgICAgICAgICAgICAgIGxhdGl0dWRlOiB0LmxhdGl0dWRlLFxuICAgICAgICAgICAgICAgIGxvbmdpdHVkZTogdC5sb25naXR1ZGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBJcikgcmV0dXJuIHtcbiAgICAgICAgICAgIGJ5dGVzVmFsdWU6IGUuc2VyaWFsaXplci51aSh0KVxuICAgICAgICB9O1xuICAgICAgICBpZiAodCBpbnN0YW5jZW9mIE1pKSB7XG4gICAgICAgICAgICB2YXIgaSA9IGUuaWksIG8gPSB0LmZpcmVzdG9yZS4kYztcbiAgICAgICAgICAgIGlmICghby5pc0VxdWFsKGkpKSB0aHJvdyBlLmZjKFwiRG9jdW1lbnQgcmVmZXJlbmNlIGlzIGZvciBkYXRhYmFzZSBcIiArIG8ucHJvamVjdElkICsgXCIvXCIgKyBvLmRhdGFiYXNlICsgXCIgYnV0IHNob3VsZCBiZSBmb3IgZGF0YWJhc2UgXCIgKyBpLnByb2plY3RJZCArIFwiL1wiICsgaS5kYXRhYmFzZSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHJlZmVyZW5jZVZhbHVlOiBlLnNlcmlhbGl6ZXIuX2kodC5rYy5wYXRoLCB0LmZpcmVzdG9yZS4kYylcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZvaWQgMCA9PT0gdCAmJiBlLmlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMpIHJldHVybiBudWxsO1xuICAgICAgICB0aHJvdyBlLmZjKFwiVW5zdXBwb3J0ZWQgZmllbGQgdmFsdWU6IFwiICsgeXIodCkpO1xuICAgIH0odCwgZSk7XG59XG5cbmZ1bmN0aW9uIEZyKHQsIGUpIHtcbiAgICB2YXIgbiA9IHt9O1xuICAgIHJldHVybiBOKHQpID8gXG4gICAgLy8gSWYgd2UgZW5jb3VudGVyIGFuIGVtcHR5IG9iamVjdCwgd2UgZXhwbGljaXRseSBhZGQgaXQgdG8gdGhlIHVwZGF0ZVxuICAgIC8vIG1hc2sgdG8gZW5zdXJlIHRoYXQgdGhlIHNlcnZlciBjcmVhdGVzIGEgbWFwIGVudHJ5LlxuICAgIGUucGF0aCAmJiBlLnBhdGgubGVuZ3RoID4gMCAmJiBlLlZ0LnB1c2goZS5wYXRoKSA6IEkodCwgKGZ1bmN0aW9uKHQsIHIpIHtcbiAgICAgICAgdmFyIGkgPSBqcihyLCBlLlZjKHQpKTtcbiAgICAgICAgbnVsbCAhPSBpICYmIChuW3RdID0gaSk7XG4gICAgfSkpLCB7XG4gICAgICAgIG1hcFZhbHVlOiB7XG4gICAgICAgICAgICBmaWVsZHM6IG5cbiAgICAgICAgfVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIEJyKHQpIHtcbiAgICByZXR1cm4gIShcIm9iamVjdFwiICE9IHR5cGVvZiB0IHx8IG51bGwgPT09IHQgfHwgdCBpbnN0YW5jZW9mIEFycmF5IHx8IHQgaW5zdGFuY2VvZiBEYXRlIHx8IHQgaW5zdGFuY2VvZiB2IHx8IHQgaW5zdGFuY2VvZiBPciB8fCB0IGluc3RhbmNlb2YgSXIgfHwgdCBpbnN0YW5jZW9mIE1pIHx8IHQgaW5zdGFuY2VvZiBrcik7XG59XG5cbmZ1bmN0aW9uIHpyKHQsIGUsIG4pIHtcbiAgICBpZiAoIUJyKG4pIHx8ICFkcihuKSkge1xuICAgICAgICB2YXIgciA9IHlyKG4pO1xuICAgICAgICB0aHJvdyBcImFuIG9iamVjdFwiID09PSByID8gZS5mYyh0ICsgXCIgYSBjdXN0b20gb2JqZWN0XCIpIDogZS5mYyh0ICsgXCIgXCIgKyByKTtcbiAgICB9XG59XG5cbi8qKlxuICogSGVscGVyIHRoYXQgY2FsbHMgZnJvbURvdFNlcGFyYXRlZFN0cmluZygpIGJ1dCB3cmFwcyBhbnkgZXJyb3IgdGhyb3duLlxuICovIGZ1bmN0aW9uIEdyKHQsIGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIE5yKSByZXR1cm4gZS5jYztcbiAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSkgcmV0dXJuIFdyKHQsIGUpO1xuICAgIHRocm93IG5ldyBjKGguSU5WQUxJRF9BUkdVTUVOVCwgXCJGdW5jdGlvbiBcIiArIHQgKyBcIigpIGNhbGxlZCB3aXRoIGludmFsaWQgZGF0YS4gRmllbGQgcGF0aCBhcmd1bWVudHMgbXVzdCBiZSBvZiB0eXBlIHN0cmluZyBvciBGaWVsZFBhdGguXCIpO1xufVxuXG4vKipcbiAqIFdyYXBzIGZyb21Eb3RTZXBhcmF0ZWRTdHJpbmcgd2l0aCBhbiBlcnJvciBtZXNzYWdlIGFib3V0IHRoZSBtZXRob2QgdGhhdFxuICogd2FzIHRocm93bi5cbiAqIEBwYXJhbSBtZXRob2ROYW1lIFRoZSBwdWJsaWNseSB2aXNpYmxlIG1ldGhvZCBuYW1lXG4gKiBAcGFyYW0gcGF0aCBUaGUgZG90LXNlcGFyYXRlZCBzdHJpbmcgZm9ybSBvZiBhIGZpZWxkIHBhdGggd2hpY2ggd2lsbCBiZSBzcGxpdFxuICogb24gZG90cy5cbiAqLyBmdW5jdGlvbiBXcih0LCBuKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGlmICh0LnNlYXJjaChBcikgPj0gMCkgdGhyb3cgbmV3IGMoaC5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgZmllbGQgcGF0aCAoXCIgKyB0ICsgXCIpLiBQYXRocyBtdXN0IG5vdCBjb250YWluICd+JywgJyonLCAnLycsICdbJywgb3IgJ10nXCIpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IChOci5iaW5kLmFwcGx5KE5yLCBlLl9fc3ByZWFkQXJyYXlzKFsgdm9pZCAwIF0sIHQuc3BsaXQoXCIuXCIpKSkpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBjKGguSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIGZpZWxkIHBhdGggKFwiICsgdCArIFwiKS4gUGF0aHMgbXVzdCBub3QgYmUgZW1wdHksIGJlZ2luIHdpdGggJy4nLCBlbmQgd2l0aCAnLicsIG9yIGNvbnRhaW4gJy4uJ1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfShuKS5jYztcbiAgICB9IGNhdGNoIChuKSB7XG4gICAgICAgIHZhciByID0gKGkgPSBuKSBpbnN0YW5jZW9mIEVycm9yID8gaS5tZXNzYWdlIDogaS50b1N0cmluZygpO1xuICAgICAgICB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiRnVuY3Rpb24gXCIgKyB0ICsgXCIoKSBjYWxsZWQgd2l0aCBpbnZhbGlkIGRhdGEuIFwiICsgcik7XG4gICAgfVxuICAgIC8qKlxuICogRXh0cmFjdHMgdGhlIG1lc3NhZ2UgZnJvbSBhIGNhdWdodCBleGNlcHRpb24sIHdoaWNoIHNob3VsZCBiZSBhbiBFcnJvciBvYmplY3RcbiAqIHRob3VnaCBKUyBkb2Vzbid0IGd1YXJhbnRlZSB0aGF0LlxuICovICAgIHZhciBpO1xuICAgIC8qKiBDaGVja3MgYGhheXN0YWNrYCBpZiBGaWVsZFBhdGggYG5lZWRsZWAgaXMgcHJlc2VudC4gUnVucyBpbiBPKG4pLiAqL31cblxuZnVuY3Rpb24gUXIodCwgZSkge1xuICAgIHJldHVybiB0LnNvbWUoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHQuaXNFcXVhbChlKTtcbiAgICB9KSk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgUGVyc2lzdGVudFN0cmVhbSBpcyBhbiBhYnN0cmFjdCBiYXNlIGNsYXNzIHRoYXQgcmVwcmVzZW50cyBhIHN0cmVhbWluZyBSUENcbiAqIHRvIHRoZSBGaXJlc3RvcmUgYmFja2VuZC4gSXQncyBidWlsdCBvbiB0b3Agb2YgdGhlIGNvbm5lY3Rpb25zIG93biBzdXBwb3J0XG4gKiBmb3Igc3RyZWFtaW5nIFJQQ3MsIGFuZCBhZGRzIHNldmVyYWwgY3JpdGljYWwgZmVhdHVyZXMgZm9yIG91ciBjbGllbnRzOlxuICpcbiAqICAgLSBFeHBvbmVudGlhbCBiYWNrb2ZmIG9uIGZhaWx1cmVcbiAqICAgLSBBdXRoZW50aWNhdGlvbiB2aWEgQ3JlZGVudGlhbHNQcm92aWRlclxuICogICAtIERpc3BhdGNoaW5nIGFsbCBjYWxsYmFja3MgaW50byB0aGUgc2hhcmVkIHdvcmtlciBxdWV1ZVxuICogICAtIENsb3NpbmcgaWRsZSBzdHJlYW1zIGFmdGVyIDYwIHNlY29uZHMgb2YgaW5hY3Rpdml0eVxuICpcbiAqIFN1YmNsYXNzZXMgb2YgUGVyc2lzdGVudFN0cmVhbSBpbXBsZW1lbnQgc2VyaWFsaXphdGlvbiBvZiBtb2RlbHMgdG8gYW5kXG4gKiBmcm9tIHRoZSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBwcm90b2NvbCBidWZmZXJzIGZvciBhIHNwZWNpZmljXG4gKiBzdHJlYW1pbmcgUlBDLlxuICpcbiAqICMjIFN0YXJ0aW5nIGFuZCBTdG9wcGluZ1xuICpcbiAqIFN0cmVhbWluZyBSUENzIGFyZSBzdGF0ZWZ1bCBhbmQgbmVlZCB0byBiZSBzdGFydCgpZWQgYmVmb3JlIG1lc3NhZ2VzIGNhblxuICogYmUgc2VudCBhbmQgcmVjZWl2ZWQuIFRoZSBQZXJzaXN0ZW50U3RyZWFtIHdpbGwgY2FsbCB0aGUgb25PcGVuKCkgZnVuY3Rpb25cbiAqIG9mIHRoZSBsaXN0ZW5lciBvbmNlIHRoZSBzdHJlYW0gaXMgcmVhZHkgdG8gYWNjZXB0IHJlcXVlc3RzLlxuICpcbiAqIFNob3VsZCBhIHN0YXJ0KCkgZmFpbCwgUGVyc2lzdGVudFN0cmVhbSB3aWxsIGNhbGwgdGhlIHJlZ2lzdGVyZWQgb25DbG9zZSgpXG4gKiBsaXN0ZW5lciB3aXRoIGEgRmlyZXN0b3JlRXJyb3IgaW5kaWNhdGluZyB3aGF0IHdlbnQgd3JvbmcuXG4gKlxuICogQSBQZXJzaXN0ZW50U3RyZWFtIGNhbiBiZSBzdGFydGVkIGFuZCBzdG9wcGVkIHJlcGVhdGVkbHkuXG4gKlxuICogR2VuZXJpYyB0eXBlczpcbiAqICBTZW5kVHlwZTogVGhlIHR5cGUgb2YgdGhlIG91dGdvaW5nIG1lc3NhZ2Ugb2YgdGhlIHVuZGVybHlpbmdcbiAqICAgIGNvbm5lY3Rpb24gc3RyZWFtXG4gKiAgUmVjZWl2ZVR5cGU6IFRoZSB0eXBlIG9mIHRoZSBpbmNvbWluZyBtZXNzYWdlIG9mIHRoZSB1bmRlcmx5aW5nXG4gKiAgICBjb25uZWN0aW9uIHN0cmVhbVxuICogIExpc3RlbmVyVHlwZTogVGhlIHR5cGUgb2YgdGhlIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSB1c2VkIGZvciBjYWxsYmFja3NcbiAqLyB2YXIgS3IgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSwgbiwgciwgaSwgbykge1xuICAgICAgICB0aGlzLlRyID0gdCwgdGhpcy5MYyA9IG4sIHRoaXMuTWMgPSByLCB0aGlzLk9jID0gaSwgdGhpcy5saXN0ZW5lciA9IG8sIHRoaXMuc3RhdGUgPSAwIC8qIEluaXRpYWwgKi8gLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBIGNsb3NlIGNvdW50IHRoYXQncyBpbmNyZW1lbnRlZCBldmVyeSB0aW1lIHRoZSBzdHJlYW0gaXMgY2xvc2VkOyB1c2VkIGJ5XG4gICAgICAgICAgICAgKiBnZXRDbG9zZUd1YXJkZWREaXNwYXRjaGVyKCkgdG8gaW52YWxpZGF0ZSBjYWxsYmFja3MgdGhhdCBoYXBwZW4gYWZ0ZXJcbiAgICAgICAgICAgICAqIGNsb3NlLlxuICAgICAgICAgICAgICovXG4gICAgICAgIHRoaXMueGMgPSAwLCB0aGlzLkJjID0gbnVsbCwgdGhpcy5zdHJlYW0gPSBudWxsLCB0aGlzLiRhID0gbmV3IENlKHQsIGUpXG4gICAgICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiBzdGFydCgpIGhhcyBiZWVuIGNhbGxlZCBhbmQgbm8gZXJyb3IgaGFzIG9jY3VycmVkLiBUcnVlXG4gICAgICogaW5kaWNhdGVzIHRoZSBzdHJlYW0gaXMgb3BlbiBvciBpbiB0aGUgcHJvY2VzcyBvZiBvcGVuaW5nICh3aGljaFxuICAgICAqIGVuY29tcGFzc2VzIHJlc3BlY3RpbmcgYmFja29mZiwgZ2V0dGluZyBhdXRoIHRva2VucywgYW5kIHN0YXJ0aW5nIHRoZVxuICAgICAqIGFjdHVhbCBSUEMpLiBVc2UgaXNPcGVuKCkgdG8gZGV0ZXJtaW5lIGlmIHRoZSBzdHJlYW0gaXMgb3BlbiBhbmQgcmVhZHkgZm9yXG4gICAgICogb3V0Ym91bmQgcmVxdWVzdHMuXG4gICAgICovO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUucWMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIDEgLyogU3RhcnRpbmcgKi8gPT09IHRoaXMuc3RhdGUgfHwgMiAvKiBPcGVuICovID09PSB0aGlzLnN0YXRlIHx8IDQgLyogQmFja29mZiAqLyA9PT0gdGhpcy5zdGF0ZTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHVuZGVybHlpbmcgUlBDIGlzIG9wZW4gKHRoZSBvbk9wZW4oKSBsaXN0ZW5lciBoYXMgYmVlblxuICAgICAqIGNhbGxlZCkgYW5kIHRoZSBzdHJlYW0gaXMgcmVhZHkgZm9yIG91dGJvdW5kIHJlcXVlc3RzLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLlVjID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAyIC8qIE9wZW4gKi8gPT09IHRoaXMuc3RhdGU7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogU3RhcnRzIHRoZSBSUEMuIE9ubHkgYWxsb3dlZCBpZiBpc1N0YXJ0ZWQoKSByZXR1cm5zIGZhbHNlLiBUaGUgc3RyZWFtIGlzXG4gICAgICogbm90IGltbWVkaWF0ZWx5IHJlYWR5IGZvciB1c2U6IG9uT3BlbigpIHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSBSUEMgaXNcbiAgICAgKiByZWFkeSBmb3Igb3V0Ym91bmQgcmVxdWVzdHMsIGF0IHdoaWNoIHBvaW50IGlzT3BlbigpIHdpbGwgcmV0dXJuIHRydWUuXG4gICAgICpcbiAgICAgKiBXaGVuIHN0YXJ0IHJldHVybnMsIGlzU3RhcnRlZCgpIHdpbGwgcmV0dXJuIHRydWUuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgMyAvKiBFcnJvciAqLyAhPT0gdGhpcy5zdGF0ZSA/IHRoaXMuYXV0aCgpIDogdGhpcy5RYygpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFN0b3BzIHRoZSBSUEMuIFRoaXMgY2FsbCBpcyBpZGVtcG90ZW50IGFuZCBhbGxvd2VkIHJlZ2FyZGxlc3Mgb2YgdGhlXG4gICAgICogY3VycmVudCBpc1N0YXJ0ZWQoKSBzdGF0ZS5cbiAgICAgKlxuICAgICAqIFdoZW4gc3RvcCByZXR1cm5zLCBpc1N0YXJ0ZWQoKSBhbmQgaXNPcGVuKCkgd2lsbCBib3RoIHJldHVybiBmYWxzZS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBlLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucWMoKSA/IFsgNCAvKnlpZWxkKi8gLCB0aGlzLmNsb3NlKDAgLyogSW5pdGlhbCAqLykgXSA6IFsgMyAvKmJyZWFrKi8gLCAyIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgdC5zZW50KCksIHQubGFiZWwgPSAyO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIEFmdGVyIGFuIGVycm9yIHRoZSBzdHJlYW0gd2lsbCB1c3VhbGx5IGJhY2sgb2ZmIG9uIHRoZSBuZXh0IGF0dGVtcHQgdG9cbiAgICAgKiBzdGFydCBpdC4gSWYgdGhlIGVycm9yIHdhcnJhbnRzIGFuIGltbWVkaWF0ZSByZXN0YXJ0IG9mIHRoZSBzdHJlYW0sIHRoZVxuICAgICAqIHNlbmRlciBjYW4gdXNlIHRoaXMgdG8gaW5kaWNhdGUgdGhhdCB0aGUgcmVjZWl2ZXIgc2hvdWxkIG5vdCBiYWNrIG9mZi5cbiAgICAgKlxuICAgICAqIEVhY2ggZXJyb3Igd2lsbCBjYWxsIHRoZSBvbkNsb3NlKCkgbGlzdGVuZXIuIFRoYXQgZnVuY3Rpb24gY2FuIGRlY2lkZSB0b1xuICAgICAqIGluaGliaXQgYmFja29mZiBpZiByZXF1aXJlZC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5XYyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnN0YXRlID0gMCAvKiBJbml0aWFsICovICwgdGhpcy4kYS5yZXNldCgpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIE1hcmtzIHRoaXMgc3RyZWFtIGFzIGlkbGUuIElmIG5vIGZ1cnRoZXIgYWN0aW9ucyBhcmUgcGVyZm9ybWVkIG9uIHRoZVxuICAgICAqIHN0cmVhbSBmb3Igb25lIG1pbnV0ZSwgdGhlIHN0cmVhbSB3aWxsIGF1dG9tYXRpY2FsbHkgY2xvc2UgaXRzZWxmIGFuZFxuICAgICAqIG5vdGlmeSB0aGUgc3RyZWFtJ3Mgb25DbG9zZSgpIGhhbmRsZXIgd2l0aCBTdGF0dXMuT0suIFRoZSBzdHJlYW0gd2lsbCB0aGVuXG4gICAgICogYmUgaW4gYSAhaXNTdGFydGVkKCkgc3RhdGUsIHJlcXVpcmluZyB0aGUgY2FsbGVyIHRvIHN0YXJ0IHRoZSBzdHJlYW0gYWdhaW5cbiAgICAgKiBiZWZvcmUgZnVydGhlciB1c2UuXG4gICAgICpcbiAgICAgKiBPbmx5IHN0cmVhbXMgdGhhdCBhcmUgaW4gc3RhdGUgJ09wZW4nIGNhbiBiZSBtYXJrZWQgaWRsZSwgYXMgYWxsIG90aGVyXG4gICAgICogc3RhdGVzIGltcGx5IHBlbmRpbmcgbmV0d29yayBvcGVyYXRpb25zLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmpjID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgLy8gU3RhcnRzIHRoZSBpZGxlIHRpbWUgaWYgd2UgYXJlIGluIHN0YXRlICdPcGVuJyBhbmQgYXJlIG5vdCB5ZXQgYWxyZWFkeVxuICAgICAgICAvLyBydW5uaW5nIGEgdGltZXIgKGluIHdoaWNoIGNhc2UgdGhlIHByZXZpb3VzIGlkbGUgdGltZW91dCBzdGlsbCBhcHBsaWVzKS5cbiAgICAgICAgICAgICAgICB0aGlzLlVjKCkgJiYgbnVsbCA9PT0gdGhpcy5CYyAmJiAodGhpcy5CYyA9IHRoaXMuVHIueXIodGhpcy5MYywgNmU0LCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdC5LYygpO1xuICAgICAgICB9KSkpO1xuICAgIH0sIFxuICAgIC8qKiBTZW5kcyBhIG1lc3NhZ2UgdG8gdGhlIHVuZGVybHlpbmcgc3RyZWFtLiAqLyB0LnByb3RvdHlwZS5HYyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy56YygpLCB0aGlzLnN0cmVhbS5zZW5kKHQpO1xuICAgIH0sIFxuICAgIC8qKiBDYWxsZWQgYnkgdGhlIGlkbGUgdGltZXIgd2hlbiB0aGUgc3RyZWFtIHNob3VsZCBjbG9zZSBkdWUgdG8gaW5hY3Rpdml0eS4gKi8gdC5wcm90b3R5cGUuS2MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZS5fX2dlbmVyYXRvcih0aGlzLCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlVjKCkgPyBbIDIgLypyZXR1cm4qLyAsIHRoaXMuY2xvc2UoMCAvKiBJbml0aWFsICovKSBdIDogWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKiBNYXJrcyB0aGUgc3RyZWFtIGFzIGFjdGl2ZSBhZ2Fpbi4gKi8gdC5wcm90b3R5cGUuemMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5CYyAmJiAodGhpcy5CYy5jYW5jZWwoKSwgdGhpcy5CYyA9IG51bGwpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGUgc3RyZWFtIGFuZCBjbGVhbnMgdXAgYXMgbmVjZXNzYXJ5OlxuICAgICAqXG4gICAgICogKiBjbG9zZXMgdGhlIHVuZGVybHlpbmcgR1JQQyBzdHJlYW07XG4gICAgICogKiBjYWxscyB0aGUgb25DbG9zZSBoYW5kbGVyIHdpdGggdGhlIGdpdmVuICdlcnJvcic7XG4gICAgICogKiBzZXRzIGludGVybmFsIHN0cmVhbSBzdGF0ZSB0byAnZmluYWxTdGF0ZSc7XG4gICAgICogKiBhZGp1c3RzIHRoZSBiYWNrb2ZmIHRpbWVyIGJhc2VkIG9uIHRoZSBlcnJvclxuICAgICAqXG4gICAgICogQSBuZXcgc3RyZWFtIGNhbiBiZSBvcGVuZWQgYnkgY2FsbGluZyBzdGFydCgpLlxuICAgICAqXG4gICAgICogQHBhcmFtIGZpbmFsU3RhdGUgdGhlIGludGVuZGVkIHN0YXRlIG9mIHRoZSBzdHJlYW0gYWZ0ZXIgY2xvc2luZy5cbiAgICAgKiBAcGFyYW0gZXJyb3IgdGhlIGVycm9yIHRoZSBjb25uZWN0aW9uIHdhcyBjbG9zZWQgd2l0aC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKHQsIG4pIHtcbiAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZS5fX2dlbmVyYXRvcih0aGlzLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAvLyBOb3RpZnkgdGhlIGxpc3RlbmVyIHRoYXQgdGhlIHN0cmVhbSBjbG9zZWQuXG4gICAgICAgICAgICAgICAgICAgIC8vIENhbmNlbCBhbnkgb3V0c3RhbmRpbmcgdGltZXJzICh0aGV5J3JlIGd1YXJhbnRlZWQgbm90IHRvIGV4ZWN1dGUpLlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy56YygpLCB0aGlzLiRhLmNhbmNlbCgpLCBcbiAgICAgICAgICAgICAgICAgICAgLy8gSW52YWxpZGF0ZXMgYW55IHN0cmVhbS1yZWxhdGVkIGNhbGxiYWNrcyAoZS5nLiBmcm9tIGF1dGggb3IgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIHVuZGVybHlpbmcgc3RyZWFtKSwgZ3VhcmFudGVlaW5nIHRoZXkgd29uJ3QgZXhlY3V0ZS5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy54YysrLCAzIC8qIEVycm9yICovICE9PSB0ID8gXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgYW4gaW50ZW50aW9uYWwgY2xvc2UgZW5zdXJlIHdlIGRvbid0IGRlbGF5IG91ciBuZXh0IGNvbm5lY3Rpb24gYXR0ZW1wdC5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kYS5yZXNldCgpIDogbiAmJiBuLmNvZGUgPT09IGguUkVTT1VSQ0VfRVhIQVVTVEVEID8gKFxuICAgICAgICAgICAgICAgICAgICAvLyBMb2cgdGhlIGVycm9yLiAoUHJvYmFibHkgZWl0aGVyICdxdW90YSBleGNlZWRlZCcgb3IgJ21heCBxdWV1ZSBsZW5ndGggcmVhY2hlZCcuKVxuICAgICAgICAgICAgICAgICAgICB5ZShuLnRvU3RyaW5nKCkpLCB5ZShcIlVzaW5nIG1heGltdW0gYmFja29mZiBkZWxheSB0byBwcmV2ZW50IG92ZXJsb2FkaW5nIHRoZSBiYWNrZW5kLlwiKSwgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGEuVnIoKSkgOiBuICYmIG4uY29kZSA9PT0gaC5VTkFVVEhFTlRJQ0FURUQgJiYgXG4gICAgICAgICAgICAgICAgICAgIC8vIFwidW5hdXRoZW50aWNhdGVkXCIgZXJyb3IgbWVhbnMgdGhlIHRva2VuIHdhcyByZWplY3RlZC4gVHJ5IGZvcmNlIHJlZnJlc2hpbmcgaXQgaW4gY2FzZSBpdFxuICAgICAgICAgICAgICAgICAgICAvLyBqdXN0IGV4cGlyZWQuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuT2MuXygpLCBcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2xlYW4gdXAgdGhlIHVuZGVybHlpbmcgc3RyZWFtIGJlY2F1c2Ugd2UgYXJlIG5vIGxvbmdlciBpbnRlcmVzdGVkIGluIGV2ZW50cy5cbiAgICAgICAgICAgICAgICAgICAgbnVsbCAhPT0gdGhpcy5zdHJlYW0gJiYgKHRoaXMuSGMoKSwgdGhpcy5zdHJlYW0uY2xvc2UoKSwgdGhpcy5zdHJlYW0gPSBudWxsKSwgXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgc3RhdGUgbXVzdCBiZSBhc3NpZ25lZCBiZWZvcmUgY2FsbGluZyBvbkNsb3NlKCkgdG8gYWxsb3cgdGhlIGNhbGxiYWNrIHRvXG4gICAgICAgICAgICAgICAgICAgIC8vIGluaGliaXQgYmFja29mZiBvciBvdGhlcndpc2UgbWFuaXB1bGF0ZSB0aGUgc3RhdGUgaW4gaXRzIG5vbi1zdGFydGVkIHN0YXRlLlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gdCwgWyA0IC8qeWllbGQqLyAsIHRoaXMubGlzdGVuZXIuWWMobikgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAvLyBDYW5jZWwgYW55IG91dHN0YW5kaW5nIHRpbWVycyAodGhleSdyZSBndWFyYW50ZWVkIG5vdCB0byBleGVjdXRlKS5cbiAgICAgICAgICAgICAgICAgICAgLy8gTm90aWZ5IHRoZSBsaXN0ZW5lciB0aGF0IHRoZSBzdHJlYW0gY2xvc2VkLlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5zZW50KCksIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQ2FuIGJlIG92ZXJyaWRkZW4gdG8gcGVyZm9ybSBhZGRpdGlvbmFsIGNsZWFudXAgYmVmb3JlIHRoZSBzdHJlYW0gaXMgY2xvc2VkLlxuICAgICAqIENhbGxpbmcgc3VwZXIudGVhckRvd24oKSBpcyBub3QgcmVxdWlyZWQuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuSGMgPSBmdW5jdGlvbigpIHt9LCB0LnByb3RvdHlwZS5hdXRoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgdGhpcy5zdGF0ZSA9IDEgLyogU3RhcnRpbmcgKi87XG4gICAgICAgIHZhciBlID0gdGhpcy5KYyh0aGlzLnhjKSwgbiA9IHRoaXMueGM7XG4gICAgICAgIC8vIFRPRE8obWlrZWxlaGVuKTogSnVzdCB1c2UgZGlzcGF0Y2hJZk5vdENsb3NlZCwgYnV0IHNlZSBUT0RPIGJlbG93LlxuICAgICAgICAgICAgICAgIHRoaXMuT2MuZ2V0VG9rZW4oKS50aGVuKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAvLyBTdHJlYW0gY2FuIGJlIHN0b3BwZWQgd2hpbGUgd2FpdGluZyBmb3IgYXV0aGVudGljYXRpb24uXG4gICAgICAgICAgICAvLyBUT0RPKG1pa2VsZWhlbik6IFdlIHJlYWxseSBzaG91bGQganVzdCB1c2UgZGlzcGF0Y2hJZk5vdENsb3NlZFxuICAgICAgICAgICAgLy8gYW5kIGxldCB0aGlzIGRpc3BhdGNoIG9udG8gdGhlIHF1ZXVlLCBidXQgdGhhdCBvcGVuZWQgYSBzcGVjIHRlc3QgY2FuXG4gICAgICAgICAgICAvLyBvZiB3b3JtcyB0aGF0IEkgZG9uJ3Qgd2FudCB0byBkZWFsIHdpdGggaW4gdGhpcyBQUi5cbiAgICAgICAgICAgIHQueGMgPT09IG4gJiYgXG4gICAgICAgICAgICAvLyBOb3JtYWxseSB3ZSdkIGhhdmUgdG8gc2NoZWR1bGUgdGhlIGNhbGxiYWNrIG9uIHRoZSBBc3luY1F1ZXVlLlxuICAgICAgICAgICAgLy8gSG93ZXZlciwgdGhlIGZvbGxvd2luZyBjYWxscyBhcmUgc2FmZSB0byBiZSBjYWxsZWQgb3V0c2lkZSB0aGVcbiAgICAgICAgICAgIC8vIEFzeW5jUXVldWUgc2luY2UgdGhleSBkb24ndCBjaGFpbiBhc3luY2hyb25vdXMgY2FsbHNcbiAgICAgICAgICAgIHQuWGMoZSk7XG4gICAgICAgIH0pLCAoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgZSgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSBuZXcgYyhoLlVOS05PV04sIFwiRmV0Y2hpbmcgYXV0aCB0b2tlbiBmYWlsZWQ6IFwiICsgbi5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5aYyhlKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLlhjID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMsIG4gPSB0aGlzLkpjKHRoaXMueGMpO1xuICAgICAgICB0aGlzLnN0cmVhbSA9IHRoaXMudF8odCksIHRoaXMuc3RyZWFtLmVfKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG4oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLnN0YXRlID0gMiAvKiBPcGVuICovICwgZS5saXN0ZW5lci5lXygpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSksIHRoaXMuc3RyZWFtLlljKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBuKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5aYyh0KTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpLCB0aGlzLnN0cmVhbS5vbk1lc3NhZ2UoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIG4oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLm9uTWVzc2FnZSh0KTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLlFjID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgdGhpcy5zdGF0ZSA9IDQgLyogQmFja29mZiAqLyAsIHRoaXMuJGEuZ3IoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHQsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUgPSAwIC8qIEluaXRpYWwgKi8gLCB0aGlzLnN0YXJ0KCksIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLy8gVmlzaWJsZSBmb3IgdGVzdHNcbiAgICB0LnByb3RvdHlwZS5aYyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgLy8gSW4gdGhlb3J5IHRoZSBzdHJlYW0gY291bGQgY2xvc2UgY2xlYW5seSwgaG93ZXZlciwgaW4gb3VyIGN1cnJlbnQgbW9kZWxcbiAgICAgICAgLy8gd2UgbmV2ZXIgZXhwZWN0IHRoaXMgdG8gaGFwcGVuIGJlY2F1c2UgaWYgd2Ugc3RvcCBhIHN0cmVhbSBvdXJzZWx2ZXMsXG4gICAgICAgIC8vIHRoaXMgY2FsbGJhY2sgd2lsbCBuZXZlciBiZSBjYWxsZWQuIFRvIHByZXZlbnQgY2FzZXMgd2hlcmUgd2UgcmV0cnlcbiAgICAgICAgLy8gd2l0aG91dCBhIGJhY2tvZmYgYWNjaWRlbnRhbGx5LCB3ZSBzZXQgdGhlIHN0cmVhbSB0byBlcnJvciBpbiBhbGwgY2FzZXMuXG4gICAgICAgIHJldHVybiBkZShcIlBlcnNpc3RlbnRTdHJlYW1cIiwgXCJjbG9zZSB3aXRoIGVycm9yOiBcIiArIHQpLCB0aGlzLnN0cmVhbSA9IG51bGwsIHRoaXMuY2xvc2UoMyAvKiBFcnJvciAqLyAsIHQpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBcImRpc3BhdGNoZXJcIiBmdW5jdGlvbiB0aGF0IGRpc3BhdGNoZXMgb3BlcmF0aW9ucyBvbnRvIHRoZVxuICAgICAqIEFzeW5jUXVldWUgYnV0IG9ubHkgcnVucyB0aGVtIGlmIGNsb3NlQ291bnQgcmVtYWlucyB1bmNoYW5nZWQuIFRoaXMgYWxsb3dzXG4gICAgICogdXMgdG8gdHVybiBhdXRoIC8gc3RyZWFtIGNhbGxiYWNrcyBpbnRvIG5vLW9wcyBpZiB0aGUgc3RyZWFtIGlzIGNsb3NlZCAvXG4gICAgICogcmUtb3BlbmVkLCBldGMuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuSmMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIGUuVHIudW8oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLnhjID09PSB0ID8gbigpIDogKGRlKFwiUGVyc2lzdGVudFN0cmVhbVwiLCBcInN0cmVhbSBjYWxsYmFjayBza2lwcGVkIGJ5IGdldENsb3NlR3VhcmRlZERpc3BhdGNoZXIuXCIpLCBcbiAgICAgICAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG4gICAgfSwgdDtcbn0oKSwgWXIgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKHQpIHtcbiAgICBmdW5jdGlvbiBuKGUsIG4sIHIsIGksIG8pIHtcbiAgICAgICAgdmFyIHMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gKHMgPSB0LmNhbGwodGhpcywgZSwgXCJsaXN0ZW5fc3RyZWFtX2Nvbm5lY3Rpb25fYmFja29mZlwiIC8qIExpc3RlblN0cmVhbUNvbm5lY3Rpb25CYWNrb2ZmICovICwgXCJsaXN0ZW5fc3RyZWFtX2lkbGVcIiAvKiBMaXN0ZW5TdHJlYW1JZGxlICovICwgbiwgciwgbykgfHwgdGhpcykuc2VyaWFsaXplciA9IGksIFxuICAgICAgICBzO1xuICAgIH1cbiAgICByZXR1cm4gZS5fX2V4dGVuZHMobiwgdCksIG4ucHJvdG90eXBlLnRfID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5NYy5zXyhcIkxpc3RlblwiLCB0KTtcbiAgICB9LCBuLnByb3RvdHlwZS5vbk1lc3NhZ2UgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIC8vIEEgc3VjY2Vzc2Z1bCByZXNwb25zZSBtZWFucyB0aGUgc3RyZWFtIGlzIGhlYWx0aHlcbiAgICAgICAgdGhpcy4kYS5yZXNldCgpO1xuICAgICAgICB2YXIgZSA9IHRoaXMuc2VyaWFsaXplci5waSh0KSwgbiA9IHRoaXMuc2VyaWFsaXplci5iaSh0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXIuaV8oZSwgbik7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGludGVyZXN0IGluIHRoZSByZXN1bHRzIG9mIHRoZSBnaXZlbiB0YXJnZXQuIElmIHRoZSB0YXJnZXRcbiAgICAgKiBpbmNsdWRlcyBhIHJlc3VtZVRva2VuIGl0IHdpbGwgYmUgaW5jbHVkZWQgaW4gdGhlIHJlcXVlc3QuIFJlc3VsdHMgdGhhdFxuICAgICAqIGFmZmVjdCB0aGUgdGFyZ2V0IHdpbGwgYmUgc3RyZWFtZWQgYmFjayBhcyBXYXRjaENoYW5nZSBtZXNzYWdlcyB0aGF0XG4gICAgICogcmVmZXJlbmNlIHRoZSB0YXJnZXRJZC5cbiAgICAgKi9cbiAgICBuLnByb3RvdHlwZS5uXyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB7fTtcbiAgICAgICAgZS5kYXRhYmFzZSA9IHRoaXMuc2VyaWFsaXplci53aSwgZS5hZGRUYXJnZXQgPSB0aGlzLnNlcmlhbGl6ZXIuZWUodCk7XG4gICAgICAgIHZhciBuID0gdGhpcy5zZXJpYWxpemVyLnppKHQpO1xuICAgICAgICBuICYmIChlLmxhYmVscyA9IG4pLCB0aGlzLkdjKGUpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFVucmVnaXN0ZXJzIGludGVyZXN0IGluIHRoZSByZXN1bHRzIG9mIHRoZSB0YXJnZXQgYXNzb2NpYXRlZCB3aXRoIHRoZVxuICAgICAqIGdpdmVuIHRhcmdldElkLlxuICAgICAqL1xuICAgIG4ucHJvdG90eXBlLnJfID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHt9O1xuICAgICAgICBlLmRhdGFiYXNlID0gdGhpcy5zZXJpYWxpemVyLndpLCBlLnJlbW92ZVRhcmdldCA9IHQsIHRoaXMuR2MoZSk7XG4gICAgfSwgbjtcbn0oS3IpLCAkciA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24odCkge1xuICAgIGZ1bmN0aW9uIG4oZSwgbiwgciwgaSwgbykge1xuICAgICAgICB2YXIgcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiAocyA9IHQuY2FsbCh0aGlzLCBlLCBcIndyaXRlX3N0cmVhbV9jb25uZWN0aW9uX2JhY2tvZmZcIiAvKiBXcml0ZVN0cmVhbUNvbm5lY3Rpb25CYWNrb2ZmICovICwgXCJ3cml0ZV9zdHJlYW1faWRsZVwiIC8qIFdyaXRlU3RyZWFtSWRsZSAqLyAsIG4sIHIsIG8pIHx8IHRoaXMpLnNlcmlhbGl6ZXIgPSBpLCBcbiAgICAgICAgcy5oXyA9ICExLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGUgbGFzdCByZWNlaXZlZCBzdHJlYW0gdG9rZW4gZnJvbSB0aGUgc2VydmVyLCB1c2VkIHRvIGFja25vd2xlZGdlIHdoaWNoXG4gICAgICAgICAgICAgKiByZXNwb25zZXMgdGhlIGNsaWVudCBoYXMgcHJvY2Vzc2VkLiBTdHJlYW0gdG9rZW5zIGFyZSBvcGFxdWUgY2hlY2twb2ludFxuICAgICAgICAgICAgICogbWFya2VycyB3aG9zZSBvbmx5IHJlYWwgdmFsdWUgaXMgdGhlaXIgaW5jbHVzaW9uIGluIHRoZSBuZXh0IHJlcXVlc3QuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogUGVyc2lzdGVudFdyaXRlU3RyZWFtIG1hbmFnZXMgcHJvcGFnYXRpbmcgdGhpcyB2YWx1ZSBmcm9tIHJlc3BvbnNlcyB0byB0aGVcbiAgICAgICAgICAgICAqIG5leHQgcmVxdWVzdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICBzLmxhc3RTdHJlYW1Ub2tlbiA9IEEuaHQsIHM7XG4gICAgfVxuICAgIHJldHVybiBlLl9fZXh0ZW5kcyhuLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KG4ucHJvdG90eXBlLCBcIm9fXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyYWNrcyB3aGV0aGVyIG9yIG5vdCBhIGhhbmRzaGFrZSBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgZXhjaGFuZ2VkIGFuZFxuICAgICAgICAgKiB0aGUgc3RyZWFtIGlzIHJlYWR5IHRvIGFjY2VwdCBtdXRhdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaF87XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIFxuICAgIC8vIE92ZXJyaWRlIG9mIFBlcnNpc3RlbnRTdHJlYW0uc3RhcnRcbiAgICBuLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmhfID0gITEsIHQucHJvdG90eXBlLnN0YXJ0LmNhbGwodGhpcyk7XG4gICAgfSwgbi5wcm90b3R5cGUuSGMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5oXyAmJiB0aGlzLmFfKFtdKTtcbiAgICB9LCBuLnByb3RvdHlwZS50XyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuTWMuc18oXCJXcml0ZVwiLCB0KTtcbiAgICB9LCBuLnByb3RvdHlwZS5vbk1lc3NhZ2UgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgLy8gQWx3YXlzIGNhcHR1cmUgdGhlIGxhc3Qgc3RyZWFtIHRva2VuLlxuICAgICAgICBtZSghIXQuc3RyZWFtVG9rZW4pLCB0aGlzLmxhc3RTdHJlYW1Ub2tlbiA9IHRoaXMuc2VyaWFsaXplci5jaSh0LnN0cmVhbVRva2VuKSwgdGhpcy5oXykge1xuICAgICAgICAgICAgLy8gQSBzdWNjZXNzZnVsIGZpcnN0IHdyaXRlIHJlc3BvbnNlIG1lYW5zIHRoZSBzdHJlYW0gaXMgaGVhbHRoeSxcbiAgICAgICAgICAgIC8vIE5vdGUsIHRoYXQgd2UgY291bGQgY29uc2lkZXIgYSBzdWNjZXNzZnVsIGhhbmRzaGFrZSBoZWFsdGh5LCBob3dldmVyLFxuICAgICAgICAgICAgLy8gdGhlIHdyaXRlIGl0c2VsZiBtaWdodCBiZSBjYXVzaW5nIGFuIGVycm9yIHdlIHdhbnQgdG8gYmFjayBvZmYgZnJvbS5cbiAgICAgICAgICAgIHRoaXMuJGEucmVzZXQoKTtcbiAgICAgICAgICAgIHZhciBlID0gdGhpcy5zZXJpYWxpemVyLk1pKHQud3JpdGVSZXN1bHRzLCB0LmNvbW1pdFRpbWUpLCBuID0gdGhpcy5zZXJpYWxpemVyLmZyb21WZXJzaW9uKHQuY29tbWl0VGltZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci51XyhuLCBlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgZmlyc3QgcmVzcG9uc2UgaXMgYWx3YXlzIHRoZSBoYW5kc2hha2UgcmVzcG9uc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gbWUoIXQud3JpdGVSZXN1bHRzIHx8IDAgPT09IHQud3JpdGVSZXN1bHRzLmxlbmd0aCksIHRoaXMuaF8gPSAhMCwgXG4gICAgICAgIHRoaXMubGlzdGVuZXIuY18oKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBTZW5kcyBhbiBpbml0aWFsIHN0cmVhbVRva2VuIHRvIHRoZSBzZXJ2ZXIsIHBlcmZvcm1pbmcgdGhlIGhhbmRzaGFrZVxuICAgICAqIHJlcXVpcmVkIHRvIG1ha2UgdGhlIFN0cmVhbWluZ1dyaXRlIFJQQyB3b3JrLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgc2hvdWxkIHdhaXQgdW50aWwgb25IYW5kc2hha2VDb21wbGV0ZSB3YXMgY2FsbGVkLlxuICAgICAqL1xuICAgIG4ucHJvdG90eXBlLl9fID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFRPRE8oZGltb25kKTogU3VwcG9ydCBzdHJlYW0gcmVzdW1wdGlvbi4gV2UgaW50ZW50aW9uYWxseSBkbyBub3Qgc2V0IHRoZVxuICAgICAgICAvLyBzdHJlYW0gdG9rZW4gb24gdGhlIGhhbmRzaGFrZSwgaWdub3JpbmcgYW55IHN0cmVhbSB0b2tlbiB3ZSBtaWdodCBoYXZlLlxuICAgICAgICB2YXIgdCA9IHt9O1xuICAgICAgICB0LmRhdGFiYXNlID0gdGhpcy5zZXJpYWxpemVyLndpLCB0aGlzLkdjKHQpO1xuICAgIH0sIFxuICAgIC8qKiBTZW5kcyBhIGdyb3VwIG9mIG11dGF0aW9ucyB0byB0aGUgRmlyZXN0b3JlIGJhY2tlbmQgdG8gYXBwbHkuICovIG4ucHJvdG90eXBlLmFfID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMsIG4gPSB7XG4gICAgICAgICAgICBzdHJlYW1Ub2tlbjogdGhpcy5zZXJpYWxpemVyLnVpKHRoaXMubGFzdFN0cmVhbVRva2VuKSxcbiAgICAgICAgICAgIHdyaXRlczogdC5tYXAoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5zZXJpYWxpemVyLnZpKHQpO1xuICAgICAgICAgICAgfSkpXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuR2Mobik7XG4gICAgfSwgbjtcbn0oS3IpLCBKciA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24odCkge1xuICAgIGZ1bmN0aW9uIG4oZSwgbiwgcikge1xuICAgICAgICB2YXIgaSA9IHRoaXM7XG4gICAgICAgIHJldHVybiAoaSA9IHQuY2FsbCh0aGlzKSB8fCB0aGlzKS5NYyA9IGUsIGkuY3JlZGVudGlhbHMgPSBuLCBpLnNlcmlhbGl6ZXIgPSByLCBpO1xuICAgIH1cbiAgICAvKiogR2V0cyBhbiBhdXRoIHRva2VuIGFuZCBpbnZva2VzIHRoZSBwcm92aWRlZCBSUEMuICovICAgIHJldHVybiBlLl9fZXh0ZW5kcyhuLCB0KSwgXG4gICAgbi5wcm90b3R5cGUuZF8gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlZGVudGlhbHMuZ2V0VG9rZW4oKS50aGVuKChmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICByZXR1cm4gbi5NYy5kXyh0LCBlLCByKTtcbiAgICAgICAgfSkpLmNhdGNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB0aHJvdyB0LmNvZGUgPT09IGguVU5BVVRIRU5USUNBVEVEICYmIG4uY3JlZGVudGlhbHMuXygpLCB0O1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqIEdldHMgYW4gYXV0aCB0b2tlbiBhbmQgaW52b2tlcyB0aGUgcHJvdmlkZWQgUlBDIHdpdGggc3RyZWFtZWQgcmVzdWx0cy4gKi8gbi5wcm90b3R5cGUuZl8gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlZGVudGlhbHMuZ2V0VG9rZW4oKS50aGVuKChmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICByZXR1cm4gbi5NYy5mXyh0LCBlLCByKTtcbiAgICAgICAgfSkpLmNhdGNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB0aHJvdyB0LmNvZGUgPT09IGguVU5BVVRIRU5USUNBVEVEICYmIG4uY3JlZGVudGlhbHMuXygpLCB0O1xuICAgICAgICB9KSk7XG4gICAgfSwgbjtcbn0oKGZ1bmN0aW9uKCkge1xuICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBzdHJ1Y3R1cmFsIHR5cGUgb2YgYERhdGFzdG9yZWAgaXMgdW5pcXVlLlxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzU0NTFcbiAgICB0aGlzLmxfID0gdm9pZCAwO1xufSkpLCBIciA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0KSB7XG4gICAgICAgIHRoaXMuVF8gPSB0LCBcbiAgICAgICAgLy8gVGhlIHZlcnNpb24gb2YgZWFjaCBkb2N1bWVudCB0aGF0IHdhcyByZWFkIGR1cmluZyB0aGlzIHRyYW5zYWN0aW9uLlxuICAgICAgICB0aGlzLkVfID0genQoKSwgdGhpcy5tdXRhdGlvbnMgPSBbXSwgdGhpcy5JXyA9ICExLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBIGRlZmVycmVkIHVzYWdlIGVycm9yIHRoYXQgb2NjdXJyZWQgcHJldmlvdXNseSBpbiB0aGlzIHRyYW5zYWN0aW9uIHRoYXRcbiAgICAgICAgICAgICAqIHdpbGwgY2F1c2UgdGhlIHRyYW5zYWN0aW9uIHRvIGZhaWwgb25jZSBpdCBhY3R1YWxseSBjb21taXRzLlxuICAgICAgICAgICAgICovXG4gICAgICAgIHRoaXMud18gPSBudWxsLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTZXQgb2YgZG9jdW1lbnRzIHRoYXQgaGF2ZSBiZWVuIHdyaXR0ZW4gaW4gdGhlIHRyYW5zYWN0aW9uLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFdoZW4gdGhlcmUncyBtb3JlIHRoYW4gb25lIHdyaXRlIHRvIHRoZSBzYW1lIGtleSBpbiBhIHRyYW5zYWN0aW9uLCBhbnlcbiAgICAgICAgICAgICAqIHdyaXRlcyBhZnRlciB0aGUgZmlyc3QgYXJlIGhhbmRsZWQgZGlmZmVyZW50bHkuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5SXyA9IG5ldyBTZXQ7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5BXyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbiwgciA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gZS5fX2dlbmVyYXRvcih0aGlzLCAoZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoaS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tXygpLCB0aGlzLm11dGF0aW9ucy5sZW5ndGggPiAwKSB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiRmlyZXN0b3JlIHRyYW5zYWN0aW9ucyByZXF1aXJlIGFsbCByZWFkcyB0byBiZSBleGVjdXRlZCBiZWZvcmUgYWxsIHdyaXRlcy5cIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDQgLyp5aWVsZCovICwgZnVuY3Rpb24odCwgbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIsIGksIG8sIHMsIHU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgPSB3ZSh0KSwgaSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhYmFzZTogci5zZXJpYWxpemVyLndpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50czogbi5tYXAoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIuc2VyaWFsaXplci5maSh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFsgNCAvKnlpZWxkKi8gLCByLmZfKFwiQmF0Y2hHZXREb2N1bWVudHNcIiwgaSkgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvID0gZS5zZW50KCksIHMgPSBuZXcgTWFwLCBvLmZvckVhY2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHIuc2VyaWFsaXplci5naSh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnNldChlLmtleS50b1N0cmluZygpLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSwgdSA9IFtdLCBbIDIgLypyZXR1cm4qLyAsIChuLmZvckVhY2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHMuZ2V0KHQudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUoISFlKSwgdS5wdXNoKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLCB1KSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KHRoaXMuVF8sIHQpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovICwgKChuID0gaS5zZW50KCkpLmZvckVhY2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQgaW5zdGFuY2VvZiB2dCB8fCB0IGluc3RhbmNlb2YgeXQgPyByLlBfKHQpIDogZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpLCBuKSBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdGhpcy53cml0ZShlLkFjKHQsIHRoaXMuUnQodCkpKSwgdGhpcy5SXy5hZGQodCk7XG4gICAgfSwgdC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy53cml0ZShlLkFjKHQsIHRoaXMuVl8odCkpKTtcbiAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgdGhpcy53XyA9IHQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5SXy5hZGQodCk7XG4gICAgfSwgdC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLndyaXRlKFsgbmV3IHV0KHQsIHRoaXMuUnQodCkpIF0pLCB0aGlzLlJfLmFkZCh0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5jb21taXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdCwgbiA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gZS5fX2dlbmVyYXRvcih0aGlzLCAoZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoci5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tXygpLCB0aGlzLndfKSB0aHJvdyB0aGlzLndfO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA9IHRoaXMuRV8sIFxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZWFjaCBtdXRhdGlvbiwgbm90ZSB0aGF0IHRoZSBkb2Mgd2FzIHdyaXR0ZW4uXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubXV0YXRpb25zLmZvckVhY2goKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQgPSB0LnJlbW92ZShlLmtleSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKSwgXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBlYWNoIGRvY3VtZW50IHRoYXQgd2FzIHJlYWQgYnV0IG5vdCB3cml0dGVuIHRvLCB3ZSB3YW50IHRvIHBlcmZvcm1cbiAgICAgICAgICAgICAgICAgICAgLy8gYSBgdmVyaWZ5YCBvcGVyYXRpb24uXG4gICAgICAgICAgICAgICAgICAgIHQuZm9yRWFjaCgoZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbi5tdXRhdGlvbnMucHVzaChuZXcgYXQodCwgbi5SdCh0KSkpO1xuICAgICAgICAgICAgICAgICAgICB9KSksIFsgNCAvKnlpZWxkKi8gLCBmdW5jdGlvbih0LCBuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgciwgaSwgbztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5fX2dlbmVyYXRvcih0aGlzLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gciA9IHdlKHQpLCBpID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlOiByLnNlcmlhbGl6ZXIud2ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVzOiBuLm1hcCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5zZXJpYWxpemVyLnZpKHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgWyA0IC8qeWllbGQqLyAsIHIuZF8oXCJDb21taXRcIiwgaSkgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvID0gZS5zZW50KCksIFsgMiAvKnJldHVybiovICwgci5zZXJpYWxpemVyLk1pKG8ud3JpdGVSZXN1bHRzLCBvLmNvbW1pdFRpbWUpIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0odGhpcy5UXywgdGhpcy5tdXRhdGlvbnMpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGVhY2ggbXV0YXRpb24sIG5vdGUgdGhhdCB0aGUgZG9jIHdhcyB3cml0dGVuLlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5zZW50KCksIHRoaXMuSV8gPSAhMCwgWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5QXyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIGlmICh0IGluc3RhbmNlb2YgeXQpIGUgPSB0LnZlcnNpb247IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCEodCBpbnN0YW5jZW9mIHZ0KSkgdGhyb3cgZ2UoKTtcbiAgICAgICAgICAgIC8vIEZvciBkZWxldGVkIGRvY3MsIHdlIG11c3QgdXNlIGJhc2VWZXJzaW9uIDAgd2hlbiB3ZSBvdmVyd3JpdGUgdGhlbS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBnLm1pbigpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuID0gdGhpcy5FXy5nZXQodC5rZXkpO1xuICAgICAgICBpZiAobnVsbCAhPT0gbikge1xuICAgICAgICAgICAgaWYgKCFlLmlzRXF1YWwobikpIFxuICAgICAgICAgICAgLy8gVGhpcyB0cmFuc2FjdGlvbiB3aWxsIGZhaWwgbm8gbWF0dGVyIHdoYXQuXG4gICAgICAgICAgICB0aHJvdyBuZXcgYyhoLkFCT1JURUQsIFwiRG9jdW1lbnQgdmVyc2lvbiBjaGFuZ2VkIGJldHdlZW4gdHdvIHJlYWRzLlwiKTtcbiAgICAgICAgfSBlbHNlIHRoaXMuRV8gPSB0aGlzLkVfLkFlKHQua2V5LCBlKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB2ZXJzaW9uIG9mIHRoaXMgZG9jdW1lbnQgd2hlbiBpdCB3YXMgcmVhZCBpbiB0aGlzIHRyYW5zYWN0aW9uLFxuICAgICAqIGFzIGEgcHJlY29uZGl0aW9uLCBvciBubyBwcmVjb25kaXRpb24gaWYgaXQgd2FzIG5vdCByZWFkLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLlJ0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMuRV8uZ2V0KHQpO1xuICAgICAgICByZXR1cm4gIXRoaXMuUl8uaGFzKHQpICYmIGUgPyBudC51cGRhdGVUaW1lKGUpIDogbnQuZnQoKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwcmVjb25kaXRpb24gZm9yIGEgZG9jdW1lbnQgaWYgdGhlIG9wZXJhdGlvbiBpcyBhbiB1cGRhdGUuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuVl8gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5FXy5nZXQodCk7XG4gICAgICAgIC8vIFRoZSBmaXJzdCB0aW1lIGEgZG9jdW1lbnQgaXMgd3JpdHRlbiwgd2Ugd2FudCB0byB0YWtlIGludG8gYWNjb3VudCB0aGVcbiAgICAgICAgLy8gcmVhZCB0aW1lIGFuZCBleGlzdGVuY2VcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuUl8uaGFzKHQpICYmIGUpIHtcbiAgICAgICAgICAgIGlmIChlLmlzRXF1YWwoZy5taW4oKSkpIFxuICAgICAgICAgICAgLy8gVGhlIGRvY3VtZW50IGRvZXNuJ3QgZXhpc3QsIHNvIGZhaWwgdGhlIHRyYW5zYWN0aW9uLlxuICAgICAgICAgICAgLy8gVGhpcyBoYXMgdG8gYmUgdmFsaWRhdGVkIGxvY2FsbHkgYmVjYXVzZSB5b3UgY2FuJ3Qgc2VuZCBhXG4gICAgICAgICAgICAvLyBwcmVjb25kaXRpb24gdGhhdCBhIGRvY3VtZW50IGRvZXMgbm90IGV4aXN0IHdpdGhvdXQgY2hhbmdpbmcgdGhlXG4gICAgICAgICAgICAvLyBzZW1hbnRpY3Mgb2YgdGhlIGJhY2tlbmQgd3JpdGUgdG8gYmUgYW4gaW5zZXJ0LiBUaGlzIGlzIHRoZSByZXZlcnNlXG4gICAgICAgICAgICAvLyBvZiB3aGF0IHdlIHdhbnQsIHNpbmNlIHdlIHdhbnQgdG8gYXNzZXJ0IHRoYXQgdGhlIGRvY3VtZW50IGRvZXNuJ3RcbiAgICAgICAgICAgIC8vIGV4aXN0IGJ1dCB0aGVuIHNlbmQgdGhlIHVwZGF0ZSBhbmQgaGF2ZSBpdCBmYWlsLiBTaW5jZSB3ZSBjYW4ndFxuICAgICAgICAgICAgLy8gZXhwcmVzcyB0aGF0IHRvIHRoZSBiYWNrZW5kLCB3ZSBoYXZlIHRvIHZhbGlkYXRlIGxvY2FsbHkuXG4gICAgICAgICAgICAvLyBOb3RlOiB0aGlzIGNhbiBjaGFuZ2Ugb25jZSB3ZSBjYW4gc2VuZCBzZXBhcmF0ZSB2ZXJpZnkgd3JpdGVzIGluIHRoZVxuICAgICAgICAgICAgLy8gdHJhbnNhY3Rpb24uXG4gICAgICAgICAgICB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiQ2FuJ3QgdXBkYXRlIGEgZG9jdW1lbnQgdGhhdCBkb2Vzbid0IGV4aXN0LlwiKTtcbiAgICAgICAgICAgIC8vIERvY3VtZW50IGV4aXN0cywgYmFzZSBwcmVjb25kaXRpb24gb24gZG9jdW1lbnQgdXBkYXRlIHRpbWUuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnQudXBkYXRlVGltZShlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBEb2N1bWVudCB3YXMgbm90IHJlYWQsIHNvIHdlIGp1c3QgdXNlIHRoZSBwcmVjb25kaXRpb25zIGZvciBhIGJsaW5kXG4gICAgICAgIC8vIHVwZGF0ZS5cbiAgICAgICAgICAgICAgICByZXR1cm4gbnQuZXhpc3RzKCEwKTtcbiAgICB9LCB0LnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5tXygpLCB0aGlzLm11dGF0aW9ucyA9IHRoaXMubXV0YXRpb25zLmNvbmNhdCh0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5tXyA9IGZ1bmN0aW9uKCkge30sIHQ7XG59KCksIFhyID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQsIGUpIHtcbiAgICAgICAgdGhpcy5BYSA9IHQsIHRoaXMuZ18gPSBlLCBcbiAgICAgICAgLyoqIFRoZSBjdXJyZW50IE9ubGluZVN0YXRlLiAqL1xuICAgICAgICB0aGlzLnN0YXRlID0gXCJVbmtub3duXCIgLyogVW5rbm93biAqLyAsIFxuICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEEgY291bnQgb2YgY29uc2VjdXRpdmUgZmFpbHVyZXMgdG8gb3BlbiB0aGUgc3RyZWFtLiBJZiBpdCByZWFjaGVzIHRoZVxuICAgICAgICAgICAgICogbWF4aW11bSBkZWZpbmVkIGJ5IE1BWF9XQVRDSF9TVFJFQU1fRkFJTFVSRVMsIHdlJ2xsIHNldCB0aGUgT25saW5lU3RhdGUgdG9cbiAgICAgICAgICAgICAqIE9mZmxpbmUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wXyA9IDAsIFxuICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEEgdGltZXIgdGhhdCBlbGFwc2VzIGFmdGVyIE9OTElORV9TVEFURV9USU1FT1VUX01TLCBhdCB3aGljaCBwb2ludCB3ZVxuICAgICAgICAgICAgICogdHJhbnNpdGlvbiBmcm9tIE9ubGluZVN0YXRlLlVua25vd24gdG8gT25saW5lU3RhdGUuT2ZmbGluZSB3aXRob3V0IHdhaXRpbmdcbiAgICAgICAgICAgICAqIGZvciB0aGUgc3RyZWFtIHRvIGFjdHVhbGx5IGZhaWwgKE1BWF9XQVRDSF9TVFJFQU1fRkFJTFVSRVMgdGltZXMpLlxuICAgICAgICAgICAgICovXG4gICAgICAgIHRoaXMueV8gPSBudWxsLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXaGV0aGVyIHRoZSBjbGllbnQgc2hvdWxkIGxvZyBhIHdhcm5pbmcgbWVzc2FnZSBpZiBpdCBmYWlscyB0byBjb25uZWN0IHRvXG4gICAgICAgICAgICAgKiB0aGUgYmFja2VuZCAoaW5pdGlhbGx5IHRydWUsIGNsZWFyZWQgYWZ0ZXIgYSBzdWNjZXNzZnVsIHN0cmVhbSwgb3IgaWYgd2UndmVcbiAgICAgICAgICAgICAqIGxvZ2dlZCB0aGUgbWVzc2FnZSBhbHJlYWR5KS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICB0aGlzLmJfID0gITBcbiAgICAgICAgLyoqXG4gICAgICogQ2FsbGVkIGJ5IFJlbW90ZVN0b3JlIHdoZW4gYSB3YXRjaCBzdHJlYW0gaXMgc3RhcnRlZCAoaW5jbHVkaW5nIG9uIGVhY2hcbiAgICAgKiBiYWNrb2ZmIGF0dGVtcHQpLlxuICAgICAqXG4gICAgICogSWYgdGhpcyBpcyB0aGUgZmlyc3QgYXR0ZW1wdCwgaXQgc2V0cyB0aGUgT25saW5lU3RhdGUgdG8gVW5rbm93biBhbmQgc3RhcnRzXG4gICAgICogdGhlIG9ubGluZVN0YXRlVGltZXIuXG4gICAgICovO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUudl8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICAwID09PSB0aGlzLnBfICYmICh0aGlzLlNfKFwiVW5rbm93blwiIC8qIFVua25vd24gKi8pLCB0aGlzLnlfID0gdGhpcy5BYS55cihcIm9ubGluZV9zdGF0ZV90aW1lb3V0XCIgLyogT25saW5lU3RhdGVUaW1lb3V0ICovICwgMWU0LCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdC55XyA9IG51bGwsIHQuRF8oXCJCYWNrZW5kIGRpZG4ndCByZXNwb25kIHdpdGhpbiAxMCBzZWNvbmRzLlwiKSwgdC5TXyhcIk9mZmxpbmVcIiAvKiBPZmZsaW5lICovKSwgXG4gICAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfSkpKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIG91ciBPbmxpbmVTdGF0ZSBhcyBhcHByb3ByaWF0ZSBhZnRlciB0aGUgd2F0Y2ggc3RyZWFtIHJlcG9ydHMgYVxuICAgICAqIGZhaWx1cmUuIFRoZSBmaXJzdCBmYWlsdXJlIG1vdmVzIHVzIHRvIHRoZSAnVW5rbm93bicgc3RhdGUuIFdlIHRoZW4gbWF5XG4gICAgICogYWxsb3cgbXVsdGlwbGUgZmFpbHVyZXMgKGJhc2VkIG9uIE1BWF9XQVRDSF9TVFJFQU1fRkFJTFVSRVMpIGJlZm9yZSB3ZVxuICAgICAqIGFjdHVhbGx5IHRyYW5zaXRpb24gdG8gdGhlICdPZmZsaW5lJyBzdGF0ZS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5DXyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgXCJPbmxpbmVcIiAvKiBPbmxpbmUgKi8gPT09IHRoaXMuc3RhdGUgPyB0aGlzLlNfKFwiVW5rbm93blwiIC8qIFVua25vd24gKi8pIDogKHRoaXMucF8rKywgXG4gICAgICAgIHRoaXMucF8gPj0gMSAmJiAodGhpcy5GXygpLCB0aGlzLkRfKFwiQ29ubmVjdGlvbiBmYWlsZWQgMSB0aW1lcy4gTW9zdCByZWNlbnQgZXJyb3I6IFwiICsgdC50b1N0cmluZygpKSwgXG4gICAgICAgIHRoaXMuU18oXCJPZmZsaW5lXCIgLyogT2ZmbGluZSAqLykpKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBFeHBsaWNpdGx5IHNldHMgdGhlIE9ubGluZVN0YXRlIHRvIHRoZSBzcGVjaWZpZWQgc3RhdGUuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgdGhpcyByZXNldHMgb3VyIHRpbWVycyAvIGZhaWx1cmUgY291bnRlcnMsIGV0Yy4gdXNlZCBieSBvdXJcbiAgICAgKiBPZmZsaW5lIGhldXJpc3RpY3MsIHNvIG11c3Qgbm90IGJlIHVzZWQgaW4gcGxhY2Ugb2ZcbiAgICAgKiBoYW5kbGVXYXRjaFN0cmVhbVN0YXJ0KCkgYW5kIGhhbmRsZVdhdGNoU3RyZWFtRmFpbHVyZSgpLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5GXygpLCB0aGlzLnBfID0gMCwgXCJPbmxpbmVcIiAvKiBPbmxpbmUgKi8gPT09IHQgJiYgKFxuICAgICAgICAvLyBXZSd2ZSBjb25uZWN0ZWQgdG8gd2F0Y2ggYXQgbGVhc3Qgb25jZS4gRG9uJ3Qgd2FybiB0aGUgZGV2ZWxvcGVyXG4gICAgICAgIC8vIGFib3V0IGJlaW5nIG9mZmxpbmUgZ29pbmcgZm9yd2FyZC5cbiAgICAgICAgdGhpcy5iXyA9ICExKSwgdGhpcy5TXyh0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5TXyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdCAhPT0gdGhpcy5zdGF0ZSAmJiAodGhpcy5zdGF0ZSA9IHQsIHRoaXMuZ18odCkpO1xuICAgIH0sIHQucHJvdG90eXBlLkRfID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IFwiQ291bGQgbm90IHJlYWNoIENsb3VkIEZpcmVzdG9yZSBiYWNrZW5kLiBcIiArIHQgKyBcIlxcblRoaXMgdHlwaWNhbGx5IGluZGljYXRlcyB0aGF0IHlvdXIgZGV2aWNlIGRvZXMgbm90IGhhdmUgYSBoZWFsdGh5IEludGVybmV0IGNvbm5lY3Rpb24gYXQgdGhlIG1vbWVudC4gVGhlIGNsaWVudCB3aWxsIG9wZXJhdGUgaW4gb2ZmbGluZSBtb2RlIHVudGlsIGl0IGlzIGFibGUgdG8gc3VjY2Vzc2Z1bGx5IGNvbm5lY3QgdG8gdGhlIGJhY2tlbmQuXCI7XG4gICAgICAgIHRoaXMuYl8gPyAoeWUoZSksIHRoaXMuYl8gPSAhMSkgOiBkZShcIk9ubGluZVN0YXRlVHJhY2tlclwiLCBlKTtcbiAgICB9LCB0LnByb3RvdHlwZS5GXyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBudWxsICE9PSB0aGlzLnlfICYmICh0aGlzLnlfLmNhbmNlbCgpLCB0aGlzLnlfID0gbnVsbCk7XG4gICAgfSwgdDtcbn0oKSwgWnIgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoXG4gICAgLyoqXG4gICAgICogVGhlIGxvY2FsIHN0b3JlLCB1c2VkIHRvIGZpbGwgdGhlIHdyaXRlIHBpcGVsaW5lIHdpdGggb3V0Ym91bmQgbXV0YXRpb25zLlxuICAgICAqL1xuICAgIHQsIFxuICAgIC8qKiBUaGUgY2xpZW50LXNpZGUgcHJveHkgZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIGJhY2tlbmQuICovXG4gICAgbiwgciwgaSwgbykge1xuICAgICAgICB2YXIgcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuTl8gPSB0LCB0aGlzLlRfID0gbiwgdGhpcy5BYSA9IHIsIFxuICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEEgbGlzdCBvZiB1cCB0byBNQVhfUEVORElOR19XUklURVMgd3JpdGVzIHRoYXQgd2UgaGF2ZSBmZXRjaGVkIGZyb20gdGhlXG4gICAgICAgICAgICAgKiBMb2NhbFN0b3JlIHZpYSBmaWxsV3JpdGVQaXBlbGluZSgpIGFuZCBoYXZlIG9yIHdpbGwgc2VuZCB0byB0aGUgd3JpdGVcbiAgICAgICAgICAgICAqIHN0cmVhbS5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBXaGVuZXZlciB3cml0ZVBpcGVsaW5lLmxlbmd0aCA+IDAgdGhlIFJlbW90ZVN0b3JlIHdpbGwgYXR0ZW1wdCB0byBzdGFydCBvclxuICAgICAgICAgICAgICogcmVzdGFydCB0aGUgd3JpdGUgc3RyZWFtLiBXaGVuIHRoZSBzdHJlYW0gaXMgZXN0YWJsaXNoZWQgdGhlIHdyaXRlcyBpbiB0aGVcbiAgICAgICAgICAgICAqIHBpcGVsaW5lIHdpbGwgYmUgc2VudCBpbiBvcmRlci5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBXcml0ZXMgcmVtYWluIGluIHdyaXRlUGlwZWxpbmUgdW50aWwgdGhleSBhcmUgYWNrbm93bGVkZ2VkIGJ5IHRoZSBiYWNrZW5kXG4gICAgICAgICAgICAgKiBhbmQgdGh1cyB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgcmUtc2VudCBpZiB0aGUgc3RyZWFtIGlzIGludGVycnVwdGVkIC9cbiAgICAgICAgICAgICAqIHJlc3RhcnRlZCBiZWZvcmUgdGhleSdyZSBhY2tub3dsZWRnZWQuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogV3JpdGUgcmVzcG9uc2VzIGZyb20gdGhlIGJhY2tlbmQgYXJlIGxpbmtlZCB0byB0aGVpciBvcmlnaW5hdGluZyByZXF1ZXN0XG4gICAgICAgICAgICAgKiBwdXJlbHkgYmFzZWQgb24gb3JkZXIsIGFuZCBzbyB3ZSBjYW4ganVzdCBzaGlmdCgpIHdyaXRlcyBmcm9tIHRoZSBmcm9udCBvZlxuICAgICAgICAgICAgICogdGhlIHdyaXRlUGlwZWxpbmUgYXMgd2UgcmVjZWl2ZSByZXNwb25zZXMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5rXyA9IFtdLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBIG1hcHBpbmcgb2Ygd2F0Y2hlZCB0YXJnZXRzIHRoYXQgdGhlIGNsaWVudCBjYXJlcyBhYm91dCB0cmFja2luZyBhbmQgdGhlXG4gICAgICAgICAgICAgKiB1c2VyIGhhcyBleHBsaWNpdGx5IGNhbGxlZCBhICdsaXN0ZW4nIGZvciB0aGlzIHRhcmdldC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBUaGVzZSB0YXJnZXRzIG1heSBvciBtYXkgbm90IGhhdmUgYmVlbiBzZW50IHRvIG9yIGFja25vd2xlZGdlZCBieSB0aGVcbiAgICAgICAgICAgICAqIHNlcnZlci4gT24gcmUtZXN0YWJsaXNoaW5nIHRoZSBsaXN0ZW4gc3RyZWFtLCB0aGVzZSB0YXJnZXRzIHNob3VsZCBiZSBzZW50XG4gICAgICAgICAgICAgKiB0byB0aGUgc2VydmVyLiBUaGUgdGFyZ2V0cyByZW1vdmVkIHdpdGggdW5saXN0ZW5zIGFyZSByZW1vdmVkIGVhZ2VybHlcbiAgICAgICAgICAgICAqIHdpdGhvdXQgd2FpdGluZyBmb3IgY29uZmlybWF0aW9uIGZyb20gdGhlIGxpc3RlbiBzdHJlYW0uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5MXyA9IG5ldyBNYXAsIHRoaXMuTV8gPSBudWxsLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTZXQgdG8gdHJ1ZSBieSBlbmFibGVOZXR3b3JrKCkgYW5kIGZhbHNlIGJ5IGRpc2FibGVOZXR3b3JrKCkgYW5kIGluZGljYXRlc1xuICAgICAgICAgICAgICogdGhlIHVzZXItcHJlZmVycmVkIG5ldHdvcmsgc3RhdGUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5uZXR3b3JrRW5hYmxlZCA9ICExLCB0aGlzLmlzUHJpbWFyeSA9ICExLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXaGVuIHNldCB0byBgdHJ1ZWAsIHRoZSBuZXR3b3JrIHdhcyB0YWtlbiBvZmZsaW5lIGR1ZSB0byBhbiBJbmRleGVkREJcbiAgICAgICAgICAgICAqIGZhaWx1cmUuIFRoZSBzdGF0ZSBpcyBmbGlwcGVkIHRvIGBmYWxzZWAgd2hlbiBhY2Nlc3MgYmVjb21lcyBhdmFpbGFibGVcbiAgICAgICAgICAgICAqIGFnYWluLlxuICAgICAgICAgICAgICovXG4gICAgICAgIHRoaXMuT18gPSAhMSwgdGhpcy54XyA9IG8sIHRoaXMueF8uQl8oKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHIudW8oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLl9fYXdhaXRlcihzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5fX2dlbmVyYXRvcih0aGlzLCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0LmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5xXygpID8gKGRlKFwiUmVtb3RlU3RvcmVcIiwgXCJSZXN0YXJ0aW5nIHN0cmVhbXMgZm9yIG5ldHdvcmsgcmVhY2hhYmlsaXR5IGNoYW5nZS5cIiksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsgNCAvKnlpZWxkKi8gLCB0aGlzLlVfKCkgXSkgOiBbIDMgLypicmVhayovICwgMiBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNlbnQoKSwgdC5sYWJlbCA9IDI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSksIHRoaXMuUV8gPSBuZXcgWHIociwgaSksIFxuICAgICAgICAvLyBDcmVhdGUgc3RyZWFtcyAoYnV0IG5vdGUgdGhleSdyZSBub3Qgc3RhcnRlZCB5ZXQpLlxuICAgICAgICB0aGlzLldfID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICAgICAgdmFyIHIgPSB3ZSh0KTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgWXIoZSwgci5NYywgci5jcmVkZW50aWFscywgci5zZXJpYWxpemVyLCBuKTtcbiAgICAgICAgfSh0aGlzLlRfLCByLCB7XG4gICAgICAgICAgICBlXzogdGhpcy5qXy5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgWWM6IHRoaXMuS18uYmluZCh0aGlzKSxcbiAgICAgICAgICAgIGlfOiB0aGlzLkdfLmJpbmQodGhpcylcbiAgICAgICAgfSksIHRoaXMuel8gPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgICAgICB2YXIgciA9IHdlKHQpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyAkcihlLCByLk1jLCByLmNyZWRlbnRpYWxzLCByLnNlcmlhbGl6ZXIsIG4pO1xuICAgICAgICB9KHRoaXMuVF8sIHIsIHtcbiAgICAgICAgICAgIGVfOiB0aGlzLkhfLmJpbmQodGhpcyksXG4gICAgICAgICAgICBZYzogdGhpcy5ZXy5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgY186IHRoaXMuSl8uYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHVfOiB0aGlzLnVfLmJpbmQodGhpcylcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyB1cCB0aGUgcmVtb3RlIHN0b3JlLCBjcmVhdGluZyBzdHJlYW1zLCByZXN0b3Jpbmcgc3RhdGUgZnJvbVxuICAgICAqIExvY2FsU3RvcmUsIGV0Yy5cbiAgICAgKi8gICAgcmV0dXJuIHQucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVuYWJsZU5ldHdvcmsoKTtcbiAgICB9LCBcbiAgICAvKiogUmUtZW5hYmxlcyB0aGUgbmV0d29yay4gSWRlbXBvdGVudC4gKi8gdC5wcm90b3R5cGUuZW5hYmxlTmV0d29yayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uZXR3b3JrRW5hYmxlZCA9ICEwLCB0aGlzLlhfKCk7XG4gICAgfSwgdC5wcm90b3R5cGUuWF8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdDtcbiAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnFfKCkgPyAodCA9IHRoaXMuel8sIFsgNCAvKnlpZWxkKi8gLCB0aGlzLk5fLllvKCkgXSkgOiBbIDMgLypicmVhayovICwgMyBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgd2lsbCBzdGFydCB0aGUgd3JpdGUgc3RyZWFtIGlmIG5lY2Vzc2FyeS5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQubGFzdFN0cmVhbVRva2VuID0gZS5zZW50KCksIHRoaXMuWl8oKSA/IHRoaXMudGwoKSA6IHRoaXMuUV8uc2V0KFwiVW5rbm93blwiIC8qIFVua25vd24gKi8pLCBcbiAgICAgICAgICAgICAgICAgICAgWyA0IC8qeWllbGQqLyAsIHRoaXMuZWwoKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgd2lsbCBzdGFydCB0aGUgd3JpdGUgc3RyZWFtIGlmIG5lY2Vzc2FyeS5cbiAgICAgICAgICAgICAgICAgICAgZS5zZW50KCksIGUubGFiZWwgPSAzO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFRlbXBvcmFyaWx5IGRpc2FibGVzIHRoZSBuZXR3b3JrLiBUaGUgbmV0d29yayBjYW4gYmUgcmUtZW5hYmxlZCB1c2luZ1xuICAgICAqIGVuYWJsZU5ldHdvcmsoKS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5kaXNhYmxlTmV0d29yayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0LmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5ldHdvcmtFbmFibGVkID0gITEsIFsgNCAvKnlpZWxkKi8gLCB0aGlzLnNsKCkgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5zZW50KCksIFxuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIE9ubGluZVN0YXRlIHRvIE9mZmxpbmUgc28gZ2V0KClzIHJldHVybiBmcm9tIGNhY2hlLCBldGMuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuUV8uc2V0KFwiT2ZmbGluZVwiIC8qIE9mZmxpbmUgKi8pLCBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLnNsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBlLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgNCAvKnlpZWxkKi8gLCB0aGlzLnpfLnN0b3AoKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnNlbnQoKSwgWyA0IC8qeWllbGQqLyAsIHRoaXMuV18uc3RvcCgpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuc2VudCgpLCB0aGlzLmtfLmxlbmd0aCA+IDAgJiYgKGRlKFwiUmVtb3RlU3RvcmVcIiwgXCJTdG9wcGluZyB3cml0ZSBzdHJlYW0gd2l0aCBcIiArIHRoaXMua18ubGVuZ3RoICsgXCIgcGVuZGluZyB3cml0ZXNcIiksIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmtfID0gW10pLCB0aGlzLmlsKCksIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUubW8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZS5fX2dlbmVyYXRvcih0aGlzLCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodC5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGUoXCJSZW1vdGVTdG9yZVwiLCBcIlJlbW90ZVN0b3JlIHNodXR0aW5nIGRvd24uXCIpLCB0aGlzLm5ldHdvcmtFbmFibGVkID0gITEsIFxuICAgICAgICAgICAgICAgICAgICBbIDQgLyp5aWVsZCovICwgdGhpcy5zbCgpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuc2VudCgpLCB0aGlzLnhfLm1vKCksIFxuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIE9ubGluZVN0YXRlIHRvIFVua25vd24gKHJhdGhlciB0aGFuIE9mZmxpbmUpIHRvIGF2b2lkIHBvdGVudGlhbGx5XG4gICAgICAgICAgICAgICAgICAgIC8vIHRyaWdnZXJpbmcgc3B1cmlvdXMgbGlzdGVuZXIgZXZlbnRzIHdpdGggY2FjaGVkIGRhdGEsIGV0Yy5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5RXy5zZXQoXCJVbmtub3duXCIgLyogVW5rbm93biAqLyksIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogU3RhcnRzIG5ldyBsaXN0ZW4gZm9yIHRoZSBnaXZlbiB0YXJnZXQuIFVzZXMgcmVzdW1lIHRva2VuIGlmIHByb3ZpZGVkLiBJdFxuICAgICAqIGlzIGEgbm8tb3AgaWYgdGhlIHRhcmdldCBvZiBnaXZlbiBgVGFyZ2V0RGF0YWAgaXMgYWxyZWFkeSBiZWluZyBsaXN0ZW5lZCB0by5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuTF8uaGFzKHQudGFyZ2V0SWQpIHx8IChcbiAgICAgICAgLy8gTWFyayB0aGlzIGFzIHNvbWV0aGluZyB0aGUgY2xpZW50IGlzIGN1cnJlbnRseSBsaXN0ZW5pbmcgZm9yLlxuICAgICAgICB0aGlzLkxfLnNldCh0LnRhcmdldElkLCB0KSwgdGhpcy5aXygpID8gXG4gICAgICAgIC8vIFRoZSBsaXN0ZW4gd2lsbCBiZSBzZW50IGluIG9uV2F0Y2hTdHJlYW1PcGVuXG4gICAgICAgIHRoaXMudGwoKSA6IHRoaXMuV18uVWMoKSAmJiB0aGlzLm5sKHQpKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBsaXN0ZW4gZnJvbSBzZXJ2ZXIuIEl0IGlzIGEgbm8tb3AgaWYgdGhlIGdpdmVuIHRhcmdldCBpZCBpc1xuICAgICAqIG5vdCBiZWluZyBsaXN0ZW5lZCB0by5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5ybCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5MXy5kZWxldGUodCksIHRoaXMuV18uVWMoKSAmJiB0aGlzLmhsKHQpLCAwID09PSB0aGlzLkxfLnNpemUgJiYgKHRoaXMuV18uVWMoKSA/IHRoaXMuV18uamMoKSA6IHRoaXMucV8oKSAmJiBcbiAgICAgICAgLy8gUmV2ZXJ0IHRvIE9ubGluZVN0YXRlLlVua25vd24gaWYgdGhlIHdhdGNoIHN0cmVhbSBpcyBub3Qgb3BlbiBhbmQgd2VcbiAgICAgICAgLy8gaGF2ZSBubyBsaXN0ZW5lcnMsIHNpbmNlIHdpdGhvdXQgYW55IGxpc3RlbnMgdG8gc2VuZCB3ZSBjYW5ub3RcbiAgICAgICAgLy8gY29uZmlybSBpZiB0aGUgc3RyZWFtIGlzIGhlYWx0aHkgYW5kIHVwZ3JhZGUgdG8gT25saW5lU3RhdGUuT25saW5lLlxuICAgICAgICB0aGlzLlFfLnNldChcIlVua25vd25cIiAvKiBVbmtub3duICovKSk7XG4gICAgfSwgXG4gICAgLyoqIHtAbGluayBUYXJnZXRNZXRhZGF0YVByb3ZpZGVyLmdldFRhcmdldERhdGFGb3JUYXJnZXR9ICovIHQucHJvdG90eXBlLnNpID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5MXy5nZXQodCkgfHwgbnVsbDtcbiAgICB9LCBcbiAgICAvKioge0BsaW5rIFRhcmdldE1ldGFkYXRhUHJvdmlkZXIuZ2V0UmVtb3RlS2V5c0ZvclRhcmdldH0gKi8gdC5wcm90b3R5cGUuZWkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9sLmVpKHQpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFdlIG5lZWQgdG8gaW5jcmVtZW50IHRoZSB0aGUgZXhwZWN0ZWQgbnVtYmVyIG9mIHBlbmRpbmcgcmVzcG9uc2VzIHdlJ3JlIGR1ZVxuICAgICAqIGZyb20gd2F0Y2ggc28gd2Ugd2FpdCBmb3IgdGhlIGFjayB0byBwcm9jZXNzIGFueSBtZXNzYWdlcyBmcm9tIHRoaXMgdGFyZ2V0LlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLm5sID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLk1fLk5zKHQudGFyZ2V0SWQpLCB0aGlzLldfLm5fKHQpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFdlIG5lZWQgdG8gaW5jcmVtZW50IHRoZSBleHBlY3RlZCBudW1iZXIgb2YgcGVuZGluZyByZXNwb25zZXMgd2UncmUgZHVlXG4gICAgICogZnJvbSB3YXRjaCBzbyB3ZSB3YWl0IGZvciB0aGUgcmVtb3ZhbCBvbiB0aGUgc2VydmVyIGJlZm9yZSB3ZSBwcm9jZXNzIGFueVxuICAgICAqIG1lc3NhZ2VzIGZyb20gdGhpcyB0YXJnZXQuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuaGwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuTV8uTnModCksIHRoaXMuV18ucl8odCk7XG4gICAgfSwgdC5wcm90b3R5cGUudGwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5NXyA9IG5ldyByZSh0aGlzKSwgdGhpcy5XXy5zdGFydCgpLCB0aGlzLlFfLnZfKCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSB3YXRjaCBzdHJlYW0gc2hvdWxkIGJlIHN0YXJ0ZWQgYmVjYXVzZSBpdCdzIG5lY2Vzc2FyeVxuICAgICAqIGFuZCBoYXMgbm90IHlldCBiZWVuIHN0YXJ0ZWQuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuWl8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucV8oKSAmJiAhdGhpcy5XXy5xYygpICYmIHRoaXMuTF8uc2l6ZSA+IDA7XG4gICAgfSwgdC5wcm90b3R5cGUucV8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLk9fICYmIHRoaXMuaXNQcmltYXJ5ICYmIHRoaXMubmV0d29ya0VuYWJsZWQ7XG4gICAgfSwgdC5wcm90b3R5cGUuaWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5NXyA9IG51bGw7XG4gICAgfSwgdC5wcm90b3R5cGUual8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gZS5fX2dlbmVyYXRvcih0aGlzLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkxfLmZvckVhY2goKGZ1bmN0aW9uKGUsIG4pIHtcbiAgICAgICAgICAgICAgICAgICAgdC5ubChlKTtcbiAgICAgICAgICAgICAgICB9KSksIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5LXyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZS5fX2dlbmVyYXRvcih0aGlzLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlsKCksIFxuICAgICAgICAgICAgICAgIC8vIElmIHdlIHN0aWxsIG5lZWQgdGhlIHdhdGNoIHN0cmVhbSwgcmV0cnkgdGhlIGNvbm5lY3Rpb24uXG4gICAgICAgICAgICAgICAgdGhpcy5aXygpID8gKHRoaXMuUV8uQ18odCksIHRoaXMudGwoKSkgOiBcbiAgICAgICAgICAgICAgICAvLyBObyBuZWVkIHRvIHJlc3RhcnQgd2F0Y2ggc3RyZWFtIGJlY2F1c2UgdGhlcmUgYXJlIG5vIGFjdGl2ZSB0YXJnZXRzLlxuICAgICAgICAgICAgICAgIC8vIFRoZSBvbmxpbmUgc3RhdGUgaXMgc2V0IHRvIHVua25vd24gYmVjYXVzZSB0aGVyZSBpcyBubyBhY3RpdmUgYXR0ZW1wdFxuICAgICAgICAgICAgICAgIC8vIGF0IGVzdGFibGlzaGluZyBhIGNvbm5lY3Rpb25cbiAgICAgICAgICAgICAgICB0aGlzLlFfLnNldChcIlVua25vd25cIiAvKiBVbmtub3duICovKSwgWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLkdfID0gZnVuY3Rpb24odCwgbikge1xuICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciByLCBpLCBvO1xuICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGUubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuUV8uc2V0KFwiT25saW5lXCIgLyogT25saW5lICovKSwgISh0IGluc3RhbmNlb2YgZWUgJiYgMiAvKiBSZW1vdmVkICovID09PSB0LnN0YXRlICYmIHQuY2F1c2UpKSBcbiAgICAgICAgICAgICAgICAgICAgLy8gTWFyayB0aGUgY2xpZW50IGFzIG9ubGluZSBzaW5jZSB3ZSBnb3QgYSBtZXNzYWdlIGZyb20gdGhlIHNlcnZlclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAzIC8qYnJlYWsqLyAsIDYgXTtcbiAgICAgICAgICAgICAgICAgICAgZS5sYWJlbCA9IDE7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUudHJ5cy5wdXNoKFsgMSwgMywgLCA1IF0pLCBbIDQgLyp5aWVsZCovICwgdGhpcy5hbCh0KSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNlbnQoKSwgWyAzIC8qYnJlYWsqLyAsIDUgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gciA9IGUuc2VudCgpLCBkZShcIlJlbW90ZVN0b3JlXCIsIFwiRmFpbGVkIHRvIHJlbW92ZSB0YXJnZXRzICVzOiAlcyBcIiwgdC50YXJnZXRJZHMuam9pbihcIixcIiksIHIpLCBcbiAgICAgICAgICAgICAgICAgICAgWyA0IC8qeWllbGQqLyAsIHRoaXMudWwocikgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5zZW50KCksIFsgMyAvKmJyZWFrKi8gLCA1IF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMyAvKmJyZWFrKi8gLCAxMyBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgWnQgPyB0aGlzLk1fLnFzKHQpIDogdCBpbnN0YW5jZW9mIHRlID8gdGhpcy5NXy5Icyh0KSA6IHRoaXMuTV8uV3ModCksIFxuICAgICAgICAgICAgICAgICAgICBuLmlzRXF1YWwoZy5taW4oKSkpIHJldHVybiBbIDMgLypicmVhayovICwgMTMgXTtcbiAgICAgICAgICAgICAgICAgICAgZS5sYWJlbCA9IDc7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUudHJ5cy5wdXNoKFsgNywgMTEsICwgMTMgXSksIFsgNCAvKnlpZWxkKi8gLCB0aGlzLk5fLl9oKCkgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaSA9IGUuc2VudCgpLCBuLlMoaSkgPj0gMCA/IFsgNCAvKnlpZWxkKi8gLCB0aGlzLmNsKG4pIF0gOiBbIDMgLypicmVhayovICwgMTAgXTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIHJlY2VpdmVkIGEgdGFyZ2V0IGNoYW5nZSB3aXRoIGEgZ2xvYmFsIHNuYXBzaG90IGlmIHRoZSBzbmFwc2hvdFxuICAgICAgICAgICAgICAgICAgICAvLyB2ZXJzaW9uIGlzIG5vdCBlcXVhbCB0byBTbmFwc2hvdFZlcnNpb24ubWluKCkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSByZWNlaXZlZCBhIHRhcmdldCBjaGFuZ2Ugd2l0aCBhIGdsb2JhbCBzbmFwc2hvdCBpZiB0aGUgc25hcHNob3RcbiAgICAgICAgICAgICAgICAgICAgLy8gdmVyc2lvbiBpcyBub3QgZXF1YWwgdG8gU25hcHNob3RWZXJzaW9uLm1pbigpLlxuICAgICAgICAgICAgICAgICAgICBlLnNlbnQoKSwgZS5sYWJlbCA9IDEwO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAzIC8qYnJlYWsqLyAsIDEzIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZShcIlJlbW90ZVN0b3JlXCIsIFwiRmFpbGVkIHRvIHJhaXNlIHNuYXBzaG90OlwiLCBvID0gZS5zZW50KCkpLCBbIDQgLyp5aWVsZCovICwgdGhpcy51bChvKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5zZW50KCksIFsgMyAvKmJyZWFrKi8gLCAxMyBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZWNvdmVyeSBsb2dpYyBmb3IgSW5kZXhlZERCIGVycm9ycyB0aGF0IHRha2VzIHRoZSBuZXR3b3JrIG9mZmxpbmUgdW50aWxcbiAgICAgKiBJbmRleGVkRGIgcHJvYmluZyBzdWNjZWVkcy4gUmV0cmllcyBhcmUgc2NoZWR1bGVkIHdpdGggYmFja29mZiB1c2luZ1xuICAgICAqIGBlbnF1ZXVlUmV0cnlhYmxlKClgLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLnVsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChyLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGlmICghcW4odCkpIHRocm93IHQ7XG4gICAgICAgICAgICAgICAgICAgIC8vIERpc2FibGUgbmV0d29yayBhbmQgcmFpc2Ugb2ZmbGluZSBzbmFwc2hvdHNcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuT18gPSAhMCwgWyA0IC8qeWllbGQqLyAsIHRoaXMuc2woKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIC8vIERpc2FibGUgbmV0d29yayBhbmQgcmFpc2Ugb2ZmbGluZSBzbmFwc2hvdHNcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIuc2VudCgpLCB0aGlzLlFfLnNldChcIk9mZmxpbmVcIiAvKiBPZmZsaW5lICovKSwgXG4gICAgICAgICAgICAgICAgICAgIC8vIFByb2JlIEluZGV4ZWREQiBwZXJpb2RpY2FsbHkgYW5kIHJlLWVuYWJsZSBuZXR3b3JrXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWEuVWEoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKG4sIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0LmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSXNzdWUgYSBzaW1wbGUgcmVhZCBvcGVyYXRpb24gdG8gZGV0ZXJtaW5lIGlmIEluZGV4ZWREQiByZWNvdmVyZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZGVhbGx5LCB3ZSB3b3VsZCBleHBvc2UgYSBoZWFsdGggY2hlY2sgZGlyZWN0bHkgb24gU2ltcGxlRGIsIGJ1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3RlU3RvcmUgb25seSBoYXMgYWNjZXNzIHRvIHBlcnNpc3RlbmNlIHRocm91Z2ggTG9jYWxTdG9yZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkZShcIlJlbW90ZVN0b3JlXCIsIFwiUmV0cnlpbmcgSW5kZXhlZERCIGFjY2Vzc1wiKSwgWyA0IC8qeWllbGQqLyAsIHRoaXMuTl8uX2goKSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSXNzdWUgYSBzaW1wbGUgcmVhZCBvcGVyYXRpb24gdG8gZGV0ZXJtaW5lIGlmIEluZGV4ZWREQiByZWNvdmVyZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZGVhbGx5LCB3ZSB3b3VsZCBleHBvc2UgYSBoZWFsdGggY2hlY2sgZGlyZWN0bHkgb24gU2ltcGxlRGIsIGJ1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3RlU3RvcmUgb25seSBoYXMgYWNjZXNzIHRvIHBlcnNpc3RlbmNlIHRocm91Z2ggTG9jYWxTdG9yZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnNlbnQoKSwgdGhpcy5PXyA9ICExLCBbIDQgLyp5aWVsZCovICwgdGhpcy5YXygpIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5zZW50KCksIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKSwgWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBUYWtlcyBhIGJhdGNoIG9mIGNoYW5nZXMgZnJvbSB0aGUgRGF0YXN0b3JlLCByZXBhY2thZ2VzIHRoZW0gYXMgYVxuICAgICAqIFJlbW90ZUV2ZW50LCBhbmQgcGFzc2VzIHRoYXQgb24gdG8gdGhlIGxpc3RlbmVyLCB3aGljaCBpcyB0eXBpY2FsbHkgdGhlXG4gICAgICogU3luY0VuZ2luZS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5jbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLCBuID0gdGhpcy5NXy5Ycyh0KTtcbiAgICAgICAgLy8gVXBkYXRlIGluLW1lbW9yeSByZXN1bWUgdG9rZW5zLiBMb2NhbFN0b3JlIHdpbGwgdXBkYXRlIHRoZVxuICAgICAgICAvLyBwZXJzaXN0ZW50IHZpZXcgb2YgdGhlc2Ugd2hlbiBhcHBseWluZyB0aGUgY29tcGxldGVkIFJlbW90ZUV2ZW50LlxuICAgICAgICAvLyBGaW5hbGx5IHJhaXNlIHJlbW90ZSBldmVudFxuICAgICAgICByZXR1cm4gbi5hcy5mb3JFYWNoKChmdW5jdGlvbihuLCByKSB7XG4gICAgICAgICAgICBpZiAobi5yZXN1bWVUb2tlbi5ydCgpID4gMCkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gZS5MXy5nZXQocik7XG4gICAgICAgICAgICAgICAgLy8gQSB3YXRjaGVkIHRhcmdldCBtaWdodCBoYXZlIGJlZW4gcmVtb3ZlZCBhbHJlYWR5LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpICYmIGUuTF8uc2V0KHIsIGkud2Uobi5yZXN1bWVUb2tlbiwgdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSksIFxuICAgICAgICAvLyBSZS1lc3RhYmxpc2ggbGlzdGVucyBmb3IgdGhlIHRhcmdldHMgdGhhdCBoYXZlIGJlZW4gaW52YWxpZGF0ZWQgYnlcbiAgICAgICAgLy8gZXhpc3RlbmNlIGZpbHRlciBtaXNtYXRjaGVzLlxuICAgICAgICBuLnVzLmZvckVhY2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHZhciBuID0gZS5MXy5nZXQodCk7XG4gICAgICAgICAgICBpZiAobikge1xuICAgICAgICAgICAgICAgIC8vIENsZWFyIHRoZSByZXN1bWUgdG9rZW4gZm9yIHRoZSB0YXJnZXQsIHNpbmNlIHdlJ3JlIGluIGEga25vd24gbWlzbWF0Y2hcbiAgICAgICAgICAgICAgICAvLyBzdGF0ZS5cbiAgICAgICAgICAgICAgICBlLkxfLnNldCh0LCBuLndlKEEuaHQsIG4uRWUpKSwgXG4gICAgICAgICAgICAgICAgLy8gQ2F1c2UgYSBoYXJkIHJlc2V0IGJ5IHVud2F0Y2hpbmcgYW5kIHJld2F0Y2hpbmcgaW1tZWRpYXRlbHksIGJ1dFxuICAgICAgICAgICAgICAgIC8vIGRlbGliZXJhdGVseSBkb24ndCBzZW5kIGEgcmVzdW1lIHRva2VuIHNvIHRoYXQgd2UgZ2V0IGEgZnVsbCB1cGRhdGUuXG4gICAgICAgICAgICAgICAgZS5obCh0KTtcbiAgICAgICAgICAgICAgICAvLyBNYXJrIHRoZSB0YXJnZXQgd2Ugc2VuZCBhcyBiZWluZyBvbiBiZWhhbGYgb2YgYW4gZXhpc3RlbmNlIGZpbHRlclxuICAgICAgICAgICAgICAgIC8vIG1pc21hdGNoLCBidXQgZG9uJ3QgYWN0dWFsbHkgcmV0YWluIHRoYXQgaW4gbGlzdGVuVGFyZ2V0cy4gVGhpcyBlbnN1cmVzXG4gICAgICAgICAgICAgICAgLy8gdGhhdCB3ZSBmbGFnIHRoZSBmaXJzdCByZS1saXN0ZW4gdGhpcyB3YXkgd2l0aG91dCBpbXBhY3RpbmcgZnV0dXJlXG4gICAgICAgICAgICAgICAgLy8gbGlzdGVucyBvZiB0aGlzIHRhcmdldCAodGhhdCBtaWdodCBoYXBwZW4gZS5nLiBvbiByZWNvbm5lY3QpLlxuICAgICAgICAgICAgICAgIHZhciByID0gbmV3IER0KG4udGFyZ2V0LCB0LCAxIC8qIEV4aXN0ZW5jZUZpbHRlck1pc21hdGNoICovICwgbi5zZXF1ZW5jZU51bWJlcik7XG4gICAgICAgICAgICAgICAgZS5ubChyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpLCB0aGlzLm9sLk11KG4pO1xuICAgIH0sIFxuICAgIC8qKiBIYW5kbGVzIGFuIGVycm9yIG9uIGEgdGFyZ2V0ICovIHQucHJvdG90eXBlLmFsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBuLCByLCBpLCBvO1xuICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGUubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgbiA9IHQuY2F1c2UsIHIgPSAwLCBpID0gdC50YXJnZXRJZHMsIGUubGFiZWwgPSAxO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByIDwgaS5sZW5ndGggPyAobyA9IGlbcl0sIHRoaXMuTF8uaGFzKG8pID8gWyA0IC8qeWllbGQqLyAsIHRoaXMub2wuX2wobywgbikgXSA6IFsgMyAvKmJyZWFrKi8gLCAzIF0pIDogWyAzIC8qYnJlYWsqLyAsIDUgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBlLnNlbnQoKSwgdGhpcy5MXy5kZWxldGUobyksIHRoaXMuTV8ucmVtb3ZlVGFyZ2V0KG8pLCBlLmxhYmVsID0gMztcblxuICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBlLmxhYmVsID0gNDtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcisrLCBbIDMgLypicmVhayovICwgMSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIGZpbGwgb3VyIHdyaXRlIHBpcGVsaW5lIHdpdGggd3JpdGVzIGZyb20gdGhlIExvY2FsU3RvcmUuXG4gICAgICpcbiAgICAgKiBDYWxsZWQgaW50ZXJuYWxseSB0byBib290c3RyYXAgb3IgcmVmaWxsIHRoZSB3cml0ZSBwaXBlbGluZSBhbmQgYnlcbiAgICAgKiBTeW5jRW5naW5lIHdoZW5ldmVyIHRoZXJlIGFyZSBuZXcgbXV0YXRpb25zIHRvIHByb2Nlc3MuXG4gICAgICpcbiAgICAgKiBTdGFydHMgdGhlIHdyaXRlIHN0cmVhbSBpZiBuZWNlc3NhcnkuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuZWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdCwgbjtcbiAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxsKCkgPyAodCA9IHRoaXMua18ubGVuZ3RoID4gMCA/IHRoaXMua19bdGhpcy5rXy5sZW5ndGggLSAxXS5iYXRjaElkIDogLTEsIFxuICAgICAgICAgICAgICAgICAgICBbIDQgLyp5aWVsZCovICwgdGhpcy5OXy5xdSh0KSBdKSA6IFsgMyAvKmJyZWFrKi8gLCA1IF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgIT09IChuID0gZS5zZW50KCkpID8gWyAzIC8qYnJlYWsqLyAsIDIgXSA6ICgwID09PSB0aGlzLmtfLmxlbmd0aCAmJiB0aGlzLnpfLmpjKCksIFxuICAgICAgICAgICAgICAgICAgICBbIDMgLypicmVhayovICwgNCBdKTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kbChuKSwgWyA0IC8qeWllbGQqLyAsIHRoaXMuZWwoKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGUuc2VudCgpLCBlLmxhYmVsID0gNDtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBlLmxhYmVsID0gNTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mbCgpICYmIHRoaXMuVGwoKSwgWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgd2UgY2FuIGFkZCB0byB0aGUgd3JpdGUgcGlwZWxpbmUgKGkuZS4gdGhlIG5ldHdvcmsgaXNcbiAgICAgKiBlbmFibGVkIGFuZCB0aGUgd3JpdGUgcGlwZWxpbmUgaXMgbm90IGZ1bGwpLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmxsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnFfKCkgJiYgdGhpcy5rXy5sZW5ndGggPCAxMDtcbiAgICB9LCBcbiAgICAvLyBGb3IgdGVzdGluZ1xuICAgIHQucHJvdG90eXBlLkVsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmtfLmxlbmd0aDtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBRdWV1ZXMgYWRkaXRpb25hbCB3cml0ZXMgdG8gYmUgc2VudCB0byB0aGUgd3JpdGUgc3RyZWFtLCBzZW5kaW5nIHRoZW1cbiAgICAgKiBpbW1lZGlhdGVseSBpZiB0aGUgd3JpdGUgc3RyZWFtIGlzIGVzdGFibGlzaGVkLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmRsID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLmtfLnB1c2godCksIHRoaXMuel8uVWMoKSAmJiB0aGlzLnpfLm9fICYmIHRoaXMuel8uYV8odC5tdXRhdGlvbnMpO1xuICAgIH0sIHQucHJvdG90eXBlLmZsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnFfKCkgJiYgIXRoaXMuel8ucWMoKSAmJiB0aGlzLmtfLmxlbmd0aCA+IDA7XG4gICAgfSwgdC5wcm90b3R5cGUuVGwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy56Xy5zdGFydCgpO1xuICAgIH0sIHQucHJvdG90eXBlLkhfID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBlLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy56Xy5fXygpLCBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuSl8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICAvLyBSZWNvcmQgdGhlIHN0cmVhbSB0b2tlbi5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5OXy5Kbyh0aGlzLnpfLmxhc3RTdHJlYW1Ub2tlbikudGhlbigoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBTZW5kIHRoZSB3cml0ZSBwaXBlbGluZSBub3cgdGhhdCB0aGUgc3RyZWFtIGlzIGVzdGFibGlzaGVkLlxuICAgICAgICAgICAgZm9yICh2YXIgZSA9IDAsIG4gPSB0LmtfOyBlIDwgbi5sZW5ndGg7IGUrKykge1xuICAgICAgICAgICAgICAgIHZhciByID0gbltlXTtcbiAgICAgICAgICAgICAgICB0LnpfLmFfKHIubXV0YXRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpLmNhdGNoKGVyKTtcbiAgICB9LCB0LnByb3RvdHlwZS51XyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLCByID0gdGhpcy5rXy5zaGlmdCgpLCBpID0gRGUuZnJvbShyLCB0LCBlLCB0aGlzLnpfLmxhc3RTdHJlYW1Ub2tlbik7XG4gICAgICAgIHJldHVybiB0aGlzLm9sLklsKGkpLnRoZW4oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG4uZWwoKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLllfID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ICYmIHRoaXMua18ubGVuZ3RoID4gMCA/IHRoaXMuel8ub18gPyBbIDQgLyp5aWVsZCovICwgdGhpcy53bCh0KSBdIDogWyAzIC8qYnJlYWsqLyAsIDIgXSA6IFsgMyAvKmJyZWFrKi8gLCA1IF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBlcnJvciBhZmZlY3RzIHRoZSBhY3R1YWwgd3JpdGUuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNlbnQoKSwgWyAzIC8qYnJlYWsqLyAsIDQgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSB3YXMgYW4gZXJyb3IgYmVmb3JlIHRoZSBoYW5kc2hha2UgaGFzIGZpbmlzaGVkLCBpdCdzXG4gICAgICAgICAgICAgICAgICAgIC8vIHBvc3NpYmxlIHRoYXQgdGhlIHNlcnZlciBpcyB1bmFibGUgdG8gcHJvY2VzcyB0aGUgc3RyZWFtIHRva2VuXG4gICAgICAgICAgICAgICAgICAgIC8vIHdlJ3JlIHNlbmRpbmcuIChQZXJoYXBzIGl0J3MgdG9vIG9sZD8pXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDQgLyp5aWVsZCovICwgdGhpcy5SbCh0KSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlIHdhcyBhbiBlcnJvciBiZWZvcmUgdGhlIGhhbmRzaGFrZSBoYXMgZmluaXNoZWQsIGl0J3NcbiAgICAgICAgICAgICAgICAgICAgLy8gcG9zc2libGUgdGhhdCB0aGUgc2VydmVyIGlzIHVuYWJsZSB0byBwcm9jZXNzIHRoZSBzdHJlYW0gdG9rZW5cbiAgICAgICAgICAgICAgICAgICAgLy8gd2UncmUgc2VuZGluZy4gKFBlcmhhcHMgaXQncyB0b28gb2xkPylcbiAgICAgICAgICAgICAgICAgICAgZS5zZW50KCksIGUubGFiZWwgPSA0O1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSB3cml0ZSBzdHJlYW0gbWlnaHQgaGF2ZSBiZWVuIHN0YXJ0ZWQgYnkgcmVmaWxsaW5nIHRoZSB3cml0ZVxuICAgICAgICAgICAgICAgICAgICAvLyBwaXBlbGluZSBmb3IgZmFpbGVkIHdyaXRlc1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZsKCkgJiYgdGhpcy5UbCgpLCBlLmxhYmVsID0gNTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5SbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZS5fX2dlbmVyYXRvcih0aGlzLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIC8vIFJlc2V0IHRoZSB0b2tlbiBpZiBpdCdzIGEgcGVybWFuZW50IGVycm9yLCBzaWduYWxpbmcgdGhlIHdyaXRlIHN0cmVhbSBpc1xuICAgICAgICAgICAgICAgIC8vIG5vIGxvbmdlciB2YWxpZC4gTm90ZSB0aGF0IHRoZSBoYW5kc2hha2UgZG9lcyBub3QgY291bnQgYXMgYSB3cml0ZTogc2VlXG4gICAgICAgICAgICAgICAgLy8gY29tbWVudHMgb24gaXNQZXJtYW5lbnRXcml0ZUVycm9yIGZvciBkZXRhaWxzLlxuICAgICAgICAgICAgICAgIHJldHVybiBTdCh0LmNvZGUpID8gWyAyIC8qcmV0dXJuKi8gLCAoZGUoXCJSZW1vdGVTdG9yZVwiLCBcIlJlbW90ZVN0b3JlIGVycm9yIGJlZm9yZSBjb21wbGV0ZWQgaGFuZHNoYWtlOyByZXNldHRpbmcgc3RyZWFtIHRva2VuOiBcIiwgdGhpcy56Xy5sYXN0U3RyZWFtVG9rZW4pLCBcbiAgICAgICAgICAgICAgICB0aGlzLnpfLmxhc3RTdHJlYW1Ub2tlbiA9IEEuaHQsIHRoaXMuTl8uSm8oQS5odCkuY2F0Y2goZXIpKSBdIDogWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLndsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBuLCByLCBpID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgLy8gT25seSBoYW5kbGUgcGVybWFuZW50IGVycm9ycyBoZXJlLiBJZiBpdCdzIHRyYW5zaWVudCwganVzdCBsZXQgdGhlIHJldHJ5XG4gICAgICAgICAgICAgICAgLy8gbG9naWMga2ljayBpbi5cbiAgICAgICAgICAgICAgICByZXR1cm4gU3QociA9IHQuY29kZSkgJiYgciAhPT0gaC5BQk9SVEVEID8gKG4gPSB0aGlzLmtfLnNoaWZ0KCksIFsgMiAvKnJldHVybiovICwgKHRoaXMuel8uV2MoKSwgXG4gICAgICAgICAgICAgICAgdGhpcy5vbC5BbChuLmJhdGNoSWQsIHQpLnRoZW4oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaS5lbCgpO1xuICAgICAgICAgICAgICAgIH0pKSkgXSkgOiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUubWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIcih0aGlzLlRfKTtcbiAgICB9LCB0LnByb3RvdHlwZS5VXyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0LmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5ldHdvcmtFbmFibGVkID0gITEsIFsgNCAvKnlpZWxkKi8gLCB0aGlzLnNsKCkgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5zZW50KCksIHRoaXMuUV8uc2V0KFwiVW5rbm93blwiIC8qIFVua25vd24gKi8pLCBbIDQgLyp5aWVsZCovICwgdGhpcy5lbmFibGVOZXR3b3JrKCkgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5zZW50KCksIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuUGwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZS5fX2dlbmVyYXRvcih0aGlzLCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodC5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5xXygpID8gKFxuICAgICAgICAgICAgICAgICAgICAvLyBUZWFyIGRvd24gYW5kIHJlLWNyZWF0ZSBvdXIgbmV0d29yayBzdHJlYW1zLiBUaGlzIHdpbGwgZW5zdXJlIHdlIGdldCBhIGZyZXNoIGF1dGggdG9rZW5cbiAgICAgICAgICAgICAgICAgICAgLy8gZm9yIHRoZSBuZXcgdXNlciBhbmQgcmUtZmlsbCB0aGUgd3JpdGUgcGlwZWxpbmUgd2l0aCBuZXcgbXV0YXRpb25zIGZyb20gdGhlIExvY2FsU3RvcmVcbiAgICAgICAgICAgICAgICAgICAgLy8gKHNpbmNlIG11dGF0aW9ucyBhcmUgcGVyLXVzZXIpLlxuICAgICAgICAgICAgICAgICAgICBkZShcIlJlbW90ZVN0b3JlXCIsIFwiUmVtb3RlU3RvcmUgcmVzdGFydGluZyBzdHJlYW1zIGZvciBuZXcgY3JlZGVudGlhbFwiKSwgWyA0IC8qeWllbGQqLyAsIHRoaXMuVV8oKSBdKSA6IFsgMyAvKmJyZWFrKi8gLCAyIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgdC5zZW50KCksIHQubGFiZWwgPSAyO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFRvZ2dsZXMgdGhlIG5ldHdvcmsgc3RhdGUgd2hlbiB0aGUgY2xpZW50IGdhaW5zIG9yIGxvc2VzIGl0cyBwcmltYXJ5IGxlYXNlLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLlZsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBuO1xuICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGUubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNQcmltYXJ5ID0gdCwgdCAmJiB0aGlzLm5ldHdvcmtFbmFibGVkID8gWyA0IC8qeWllbGQqLyAsIHRoaXMuZW5hYmxlTmV0d29yaygpIF0gOiBbIDMgLypicmVhayovICwgMiBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNlbnQoKSwgWyAzIC8qYnJlYWsqLyAsIDUgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKG4gPSB0KSA/IFsgMyAvKmJyZWFrKi8gLCA0IF0gOiBbIDQgLyp5aWVsZCovICwgdGhpcy5zbCgpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgZS5zZW50KCksIG4gPSB0aGlzLlFfLnNldChcIlVua25vd25cIiAvKiBVbmtub3duICovKSwgZS5sYWJlbCA9IDQ7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbiwgZS5sYWJlbCA9IDU7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdDtcbn0oKTtcblxuLyoqXG4gKiBBIFBlcnNpc3RlbnRTdHJlYW0gdGhhdCBpbXBsZW1lbnRzIHRoZSBMaXN0ZW4gUlBDLlxuICpcbiAqIE9uY2UgdGhlIExpc3RlbiBzdHJlYW0gaGFzIGNhbGxlZCB0aGUgb25PcGVuKCkgbGlzdGVuZXIsIGFueSBudW1iZXIgb2ZcbiAqIGxpc3RlbigpIGFuZCB1bmxpc3RlbigpIGNhbGxzIGNhbiBiZSBtYWRlIHRvIGNvbnRyb2wgd2hhdCBjaGFuZ2VzIHdpbGwgYmVcbiAqIHNlbnQgZnJvbSB0aGUgc2VydmVyIGZvciBMaXN0ZW5SZXNwb25zZXMuXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBUaGUgZm9ybWF0IG9mIHRoZSBMb2NhbFN0b3JhZ2Uga2V5IHRoYXQgc3RvcmVzIHRoZSBjbGllbnQgc3RhdGUgaXM6XG4vLyAgICAgZmlyZXN0b3JlX2NsaWVudHNfPHBlcnNpc3RlbmNlX3ByZWZpeD5fPGluc3RhbmNlX2tleT5cbi8qKiBBc3NlbWJsZXMgdGhlIGtleSBmb3IgYSBjbGllbnQgc3RhdGUgaW4gV2ViU3RvcmFnZSAqL1xuZnVuY3Rpb24gdGkodCwgZSkge1xuICAgIHJldHVybiBcImZpcmVzdG9yZV9jbGllbnRzX1wiICsgdCArIFwiX1wiICsgZTtcbn1cblxuLy8gVGhlIGZvcm1hdCBvZiB0aGUgV2ViU3RvcmFnZSBrZXkgdGhhdCBzdG9yZXMgdGhlIG11dGF0aW9uIHN0YXRlIGlzOlxuLy8gICAgIGZpcmVzdG9yZV9tdXRhdGlvbnNfPHBlcnNpc3RlbmNlX3ByZWZpeD5fPGJhdGNoX2lkPlxuLy8gICAgIChmb3IgdW5hdXRoZW50aWNhdGVkIHVzZXJzKVxuLy8gb3I6IGZpcmVzdG9yZV9tdXRhdGlvbnNfPHBlcnNpc3RlbmNlX3ByZWZpeD5fPGJhdGNoX2lkPl88dXNlcl91aWQ+XG4vLyAndXNlcl91aWQnIGlzIGxhc3QgdG8gYXZvaWQgbmVlZGluZyB0byBlc2NhcGUgJ18nIGNoYXJhY3RlcnMgdGhhdCBpdCBtaWdodFxuLy8gY29udGFpbi5cbi8qKiBBc3NlbWJsZXMgdGhlIGtleSBmb3IgYSBtdXRhdGlvbiBiYXRjaCBpbiBXZWJTdG9yYWdlICovIGZ1bmN0aW9uIGVpKHQsIGUsIG4pIHtcbiAgICB2YXIgciA9IFwiZmlyZXN0b3JlX211dGF0aW9uc19cIiArIHQgKyBcIl9cIiArIG47XG4gICAgcmV0dXJuIGUudCgpICYmIChyICs9IFwiX1wiICsgZS51aWQpLCByO1xufVxuXG4vLyBUaGUgZm9ybWF0IG9mIHRoZSBXZWJTdG9yYWdlIGtleSB0aGF0IHN0b3JlcyBhIHF1ZXJ5IHRhcmdldCdzIG1ldGFkYXRhIGlzOlxuLy8gICAgIGZpcmVzdG9yZV90YXJnZXRzXzxwZXJzaXN0ZW5jZV9wcmVmaXg+Xzx0YXJnZXRfaWQ+XG4vKiogQXNzZW1ibGVzIHRoZSBrZXkgZm9yIGEgcXVlcnkgc3RhdGUgaW4gV2ViU3RvcmFnZSAqLyBmdW5jdGlvbiBuaSh0LCBlKSB7XG4gICAgcmV0dXJuIFwiZmlyZXN0b3JlX3RhcmdldHNfXCIgKyB0ICsgXCJfXCIgKyBlO1xufVxuXG4vLyBUaGUgV2ViU3RvcmFnZSBwcmVmaXggdGhhdCBzdG9yZXMgdGhlIHByaW1hcnkgdGFiJ3Mgb25saW5lIHN0YXRlLiBUaGVcbi8vIGZvcm1hdCBvZiB0aGUga2V5IGlzOlxuLy8gICAgIGZpcmVzdG9yZV9vbmxpbmVfc3RhdGVfPHBlcnNpc3RlbmNlX3ByZWZpeD5cbi8qKlxuICogSG9sZHMgdGhlIHN0YXRlIG9mIGEgbXV0YXRpb24gYmF0Y2gsIGluY2x1ZGluZyBpdHMgdXNlciBJRCwgYmF0Y2ggSUQgYW5kXG4gKiB3aGV0aGVyIHRoZSBiYXRjaCBpcyAncGVuZGluZycsICdhY2tub3dsZWRnZWQnIG9yICdyZWplY3RlZCcuXG4gKi9cbi8vIFZpc2libGUgZm9yIHRlc3RpbmdcbnZhciByaSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlLCBuLCByKSB7XG4gICAgICAgIHRoaXMudXNlciA9IHQsIHRoaXMuYmF0Y2hJZCA9IGUsIHRoaXMuc3RhdGUgPSBuLCB0aGlzLmVycm9yID0gclxuICAgICAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBNdXRhdGlvbk1ldGFkYXRhIGZyb20gaXRzIEpTT04gcmVwcmVzZW50YXRpb24gaW4gV2ViU3RvcmFnZS5cbiAgICAgKiBMb2dzIGEgd2FybmluZyBhbmQgcmV0dXJucyBudWxsIGlmIHRoZSBmb3JtYXQgb2YgdGhlIGRhdGEgaXMgbm90IHZhbGlkLlxuICAgICAqLztcbiAgICB9XG4gICAgcmV0dXJuIHQuZ2wgPSBmdW5jdGlvbihlLCBuLCByKSB7XG4gICAgICAgIHZhciBpID0gSlNPTi5wYXJzZShyKSwgbyA9IFwib2JqZWN0XCIgPT0gdHlwZW9mIGkgJiYgLTEgIT09IFsgXCJwZW5kaW5nXCIsIFwiYWNrbm93bGVkZ2VkXCIsIFwicmVqZWN0ZWRcIiBdLmluZGV4T2YoaS5zdGF0ZSkgJiYgKHZvaWQgMCA9PT0gaS5lcnJvciB8fCBcIm9iamVjdFwiID09IHR5cGVvZiBpLmVycm9yKSwgcyA9IHZvaWQgMDtcbiAgICAgICAgcmV0dXJuIG8gJiYgaS5lcnJvciAmJiAoKG8gPSBcInN0cmluZ1wiID09IHR5cGVvZiBpLmVycm9yLm1lc3NhZ2UgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgaS5lcnJvci5jb2RlKSAmJiAocyA9IG5ldyBjKGkuZXJyb3IuY29kZSwgaS5lcnJvci5tZXNzYWdlKSkpLCBcbiAgICAgICAgbyA/IG5ldyB0KGUsIG4sIGkuc3RhdGUsIHMpIDogKHllKFwiU2hhcmVkQ2xpZW50U3RhdGVcIiwgXCJGYWlsZWQgdG8gcGFyc2UgbXV0YXRpb24gc3RhdGUgZm9yIElEICdcIiArIG4gKyBcIic6IFwiICsgciksIFxuICAgICAgICBudWxsKTtcbiAgICB9LCB0LnByb3RvdHlwZS5wbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHtcbiAgICAgICAgICAgIHN0YXRlOiB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgdXBkYXRlVGltZU1zOiBEYXRlLm5vdygpXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yICYmICh0LmVycm9yID0ge1xuICAgICAgICAgICAgY29kZTogdGhpcy5lcnJvci5jb2RlLFxuICAgICAgICAgICAgbWVzc2FnZTogdGhpcy5lcnJvci5tZXNzYWdlXG4gICAgICAgIH0pLCBKU09OLnN0cmluZ2lmeSh0KTtcbiAgICB9LCB0O1xufSgpLCBpaSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0SWQgPSB0LCB0aGlzLnN0YXRlID0gZSwgdGhpcy5lcnJvciA9IG5cbiAgICAgICAgLyoqXG4gICAgICogUGFyc2VzIGEgUXVlcnlUYXJnZXRNZXRhZGF0YSBmcm9tIGl0cyBKU09OIHJlcHJlc2VudGF0aW9uIGluIFdlYlN0b3JhZ2UuXG4gICAgICogTG9ncyBhIHdhcm5pbmcgYW5kIHJldHVybnMgbnVsbCBpZiB0aGUgZm9ybWF0IG9mIHRoZSBkYXRhIGlzIG5vdCB2YWxpZC5cbiAgICAgKi87XG4gICAgfVxuICAgIHJldHVybiB0LmdsID0gZnVuY3Rpb24oZSwgbikge1xuICAgICAgICB2YXIgciA9IEpTT04ucGFyc2UobiksIGkgPSBcIm9iamVjdFwiID09IHR5cGVvZiByICYmIC0xICE9PSBbIFwibm90LWN1cnJlbnRcIiwgXCJjdXJyZW50XCIsIFwicmVqZWN0ZWRcIiBdLmluZGV4T2Yoci5zdGF0ZSkgJiYgKHZvaWQgMCA9PT0gci5lcnJvciB8fCBcIm9iamVjdFwiID09IHR5cGVvZiByLmVycm9yKSwgbyA9IHZvaWQgMDtcbiAgICAgICAgcmV0dXJuIGkgJiYgci5lcnJvciAmJiAoKGkgPSBcInN0cmluZ1wiID09IHR5cGVvZiByLmVycm9yLm1lc3NhZ2UgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2Ygci5lcnJvci5jb2RlKSAmJiAobyA9IG5ldyBjKHIuZXJyb3IuY29kZSwgci5lcnJvci5tZXNzYWdlKSkpLCBcbiAgICAgICAgaSA/IG5ldyB0KGUsIHIuc3RhdGUsIG8pIDogKHllKFwiU2hhcmVkQ2xpZW50U3RhdGVcIiwgXCJGYWlsZWQgdG8gcGFyc2UgdGFyZ2V0IHN0YXRlIGZvciBJRCAnXCIgKyBlICsgXCInOiBcIiArIG4pLCBcbiAgICAgICAgbnVsbCk7XG4gICAgfSwgdC5wcm90b3R5cGUucGwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSB7XG4gICAgICAgICAgICBzdGF0ZTogdGhpcy5zdGF0ZSxcbiAgICAgICAgICAgIHVwZGF0ZVRpbWVNczogRGF0ZS5ub3coKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5lcnJvciAmJiAodC5lcnJvciA9IHtcbiAgICAgICAgICAgIGNvZGU6IHRoaXMuZXJyb3IuY29kZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHRoaXMuZXJyb3IubWVzc2FnZVxuICAgICAgICB9KSwgSlNPTi5zdHJpbmdpZnkodCk7XG4gICAgfSwgdDtcbn0oKSwgb2kgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSkge1xuICAgICAgICB0aGlzLmNsaWVudElkID0gdCwgdGhpcy5hY3RpdmVUYXJnZXRJZHMgPSBlXG4gICAgICAgIC8qKlxuICAgICAqIFBhcnNlcyBhIFJlbW90ZUNsaWVudFN0YXRlIGZyb20gdGhlIEpTT04gcmVwcmVzZW50YXRpb24gaW4gV2ViU3RvcmFnZS5cbiAgICAgKiBMb2dzIGEgd2FybmluZyBhbmQgcmV0dXJucyBudWxsIGlmIHRoZSBmb3JtYXQgb2YgdGhlIGRhdGEgaXMgbm90IHZhbGlkLlxuICAgICAqLztcbiAgICB9XG4gICAgcmV0dXJuIHQuZ2wgPSBmdW5jdGlvbihlLCBuKSB7XG4gICAgICAgIGZvciAodmFyIHIgPSBKU09OLnBhcnNlKG4pLCBpID0gXCJvYmplY3RcIiA9PSB0eXBlb2YgciAmJiByLmFjdGl2ZVRhcmdldElkcyBpbnN0YW5jZW9mIEFycmF5LCBvID0gS3QoKSwgcyA9IDA7IGkgJiYgcyA8IHIuYWN0aXZlVGFyZ2V0SWRzLmxlbmd0aDsgKytzKSBpID0geChyLmFjdGl2ZVRhcmdldElkc1tzXSksIFxuICAgICAgICBvID0gby5hZGQoci5hY3RpdmVUYXJnZXRJZHNbc10pO1xuICAgICAgICByZXR1cm4gaSA/IG5ldyB0KGUsIG8pIDogKHllKFwiU2hhcmVkQ2xpZW50U3RhdGVcIiwgXCJGYWlsZWQgdG8gcGFyc2UgY2xpZW50IGRhdGEgZm9yIGluc3RhbmNlICdcIiArIGUgKyBcIic6IFwiICsgbiksIFxuICAgICAgICBudWxsKTtcbiAgICB9LCB0O1xufSgpLCBzaSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlKSB7XG4gICAgICAgIHRoaXMuY2xpZW50SWQgPSB0LCB0aGlzLm9ubGluZVN0YXRlID0gZVxuICAgICAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBTaGFyZWRPbmxpbmVTdGF0ZSBmcm9tIGl0cyBKU09OIHJlcHJlc2VudGF0aW9uIGluIFdlYlN0b3JhZ2UuXG4gICAgICogTG9ncyBhIHdhcm5pbmcgYW5kIHJldHVybnMgbnVsbCBpZiB0aGUgZm9ybWF0IG9mIHRoZSBkYXRhIGlzIG5vdCB2YWxpZC5cbiAgICAgKi87XG4gICAgfVxuICAgIHJldHVybiB0LmdsID0gZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgbiA9IEpTT04ucGFyc2UoZSk7XG4gICAgICAgIHJldHVybiBcIm9iamVjdFwiID09IHR5cGVvZiBuICYmIC0xICE9PSBbIFwiVW5rbm93blwiLCBcIk9ubGluZVwiLCBcIk9mZmxpbmVcIiBdLmluZGV4T2Yobi5vbmxpbmVTdGF0ZSkgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2Ygbi5jbGllbnRJZCA/IG5ldyB0KG4uY2xpZW50SWQsIG4ub25saW5lU3RhdGUpIDogKHllKFwiU2hhcmVkQ2xpZW50U3RhdGVcIiwgXCJGYWlsZWQgdG8gcGFyc2Ugb25saW5lIHN0YXRlOiBcIiArIGUpLCBcbiAgICAgICAgbnVsbCk7XG4gICAgfSwgdDtcbn0oKSwgdWkgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlVGFyZ2V0SWRzID0gS3QoKTtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLnlsID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLmFjdGl2ZVRhcmdldElkcyA9IHRoaXMuYWN0aXZlVGFyZ2V0SWRzLmFkZCh0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5ibCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5hY3RpdmVUYXJnZXRJZHMgPSB0aGlzLmFjdGl2ZVRhcmdldElkcy5kZWxldGUodCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhpcyBlbnRyeSBpbnRvIGEgSlNPTi1lbmNvZGVkIGZvcm1hdCB3ZSBjYW4gdXNlIGZvciBXZWJTdG9yYWdlLlxuICAgICAqIERvZXMgbm90IGVuY29kZSBgY2xpZW50SWRgIGFzIGl0IGlzIHBhcnQgb2YgdGhlIGtleSBpbiBXZWJTdG9yYWdlLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLnBsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0ge1xuICAgICAgICAgICAgYWN0aXZlVGFyZ2V0SWRzOiB0aGlzLmFjdGl2ZVRhcmdldElkcy5XKCksXG4gICAgICAgICAgICB1cGRhdGVUaW1lTXM6IERhdGUubm93KClcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHQpO1xuICAgIH0sIHQ7XG59KCksIGFpID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KGUsIG4sIHIsIGksIG8pIHtcbiAgICAgICAgaWYgKHRoaXMuVHIgPSBlLCB0aGlzLnBsYXRmb3JtID0gbiwgdGhpcy5wZXJzaXN0ZW5jZUtleSA9IHIsIHRoaXMudmwgPSBpLCB0aGlzLm9sID0gbnVsbCwgXG4gICAgICAgIHRoaXMuZ18gPSBudWxsLCB0aGlzLnVyID0gbnVsbCwgdGhpcy5TbCA9IHRoaXMuRGwuYmluZCh0aGlzKSwgdGhpcy5DbCA9IG5ldyBMdChiZSksIFxuICAgICAgICB0aGlzLnJvID0gITEsIFxuICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhcHR1cmVzIFdlYlN0b3JhZ2UgZXZlbnRzIHRoYXQgb2NjdXIgYmVmb3JlIGBzdGFydCgpYCBpcyBjYWxsZWQuIFRoZXNlXG4gICAgICAgICAgICAgKiBldmVudHMgYXJlIHJlcGxheWVkIG9uY2UgYFdlYlN0b3JhZ2VTaGFyZWRDbGllbnRTdGF0ZWAgaXMgc3RhcnRlZC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICB0aGlzLkZsID0gW10sICF0LkdoKHRoaXMucGxhdGZvcm0pKSB0aHJvdyBuZXcgYyhoLlVOSU1QTEVNRU5URUQsIFwiTG9jYWxTdG9yYWdlIGlzIG5vdCBhdmFpbGFibGUgb24gdGhpcyBwbGF0Zm9ybS5cIik7XG4gICAgICAgIC8vIEVzY2FwZSB0aGUgc3BlY2lhbCBjaGFyYWN0ZXJzIG1lbnRpb25lZCBoZXJlOlxuICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L0d1aWRlL1JlZ3VsYXJfRXhwcmVzc2lvbnNcbiAgICAgICAgICAgICAgICB2YXIgcyA9IHIucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xcXVxcXFxdL2csIFwiXFxcXCQmXCIpO1xuICAgICAgICB0aGlzLnN0b3JhZ2UgPSB0aGlzLnBsYXRmb3JtLndpbmRvdy5sb2NhbFN0b3JhZ2UsIHRoaXMuY3VycmVudFVzZXIgPSBvLCB0aGlzLk5sID0gdGkodGhpcy5wZXJzaXN0ZW5jZUtleSwgdGhpcy52bCksIFxuICAgICAgICB0aGlzLiRsID0gXG4gICAgICAgIC8qKiBBc3NlbWJsZXMgdGhlIGtleSBmb3IgdGhlIGN1cnJlbnQgc2VxdWVuY2UgbnVtYmVyLiAqL1xuICAgICAgICBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gXCJmaXJlc3RvcmVfc2VxdWVuY2VfbnVtYmVyX1wiICsgdDtcbiAgICAgICAgfSh0aGlzLnBlcnNpc3RlbmNlS2V5KSwgdGhpcy5DbCA9IHRoaXMuQ2wuQWUodGhpcy52bCwgbmV3IHVpKSwgdGhpcy5rbCA9IG5ldyBSZWdFeHAoXCJeZmlyZXN0b3JlX2NsaWVudHNfXCIgKyBzICsgXCJfKFteX10qKSRcIiksIFxuICAgICAgICB0aGlzLkxsID0gbmV3IFJlZ0V4cChcIl5maXJlc3RvcmVfbXV0YXRpb25zX1wiICsgcyArIFwiXyhcXFxcZCspKD86XyguKikpPyRcIiksIHRoaXMuTWwgPSBuZXcgUmVnRXhwKFwiXmZpcmVzdG9yZV90YXJnZXRzX1wiICsgcyArIFwiXyhcXFxcZCspJFwiKSwgXG4gICAgICAgIHRoaXMuT2wgPSBcbiAgICAgICAgLyoqIEFzc2VtYmxlcyB0aGUga2V5IGZvciB0aGUgb25saW5lIHN0YXRlIG9mIHRoZSBwcmltYXJ5IHRhYi4gKi9cbiAgICAgICAgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiZmlyZXN0b3JlX29ubGluZV9zdGF0ZV9cIiArIHQ7XG4gICAgICAgIH0odGhpcy5wZXJzaXN0ZW5jZUtleSksIFxuICAgICAgICAvLyBSYXRoZXIgdGhhbiBhZGRpbmcgdGhlIHN0b3JhZ2Ugb2JzZXJ2ZXIgZHVyaW5nIHN0YXJ0KCksIHdlIGFkZCB0aGVcbiAgICAgICAgLy8gc3RvcmFnZSBvYnNlcnZlciBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIFRoaXMgZW5zdXJlcyB0aGF0IHdlIGNvbGxlY3RcbiAgICAgICAgLy8gZXZlbnRzIGJlZm9yZSBvdGhlciBjb21wb25lbnRzIHBvcHVsYXRlIHRoZWlyIGluaXRpYWwgc3RhdGUgKGR1cmluZyB0aGVpclxuICAgICAgICAvLyByZXNwZWN0aXZlIHN0YXJ0KCkgY2FsbHMpLiBPdGhlcndpc2UsIHdlIG1pZ2h0IGZvciBleGFtcGxlIG1pc3MgYVxuICAgICAgICAvLyBtdXRhdGlvbiB0aGF0IGlzIGFkZGVkIGFmdGVyIExvY2FsU3RvcmUncyBzdGFydCgpIHByb2Nlc3NlZCB0aGUgZXhpc3RpbmdcbiAgICAgICAgLy8gbXV0YXRpb25zIGJ1dCBiZWZvcmUgd2Ugb2JzZXJ2ZSBXZWJTdG9yYWdlIGV2ZW50cy5cbiAgICAgICAgdGhpcy5wbGF0Zm9ybS53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInN0b3JhZ2VcIiwgdGhpcy5TbCk7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zICd0cnVlJyBpZiBXZWJTdG9yYWdlIGlzIGF2YWlsYWJsZSBpbiB0aGUgY3VycmVudCBlbnZpcm9ubWVudC4gKi8gICAgcmV0dXJuIHQuR2ggPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiAhKCF0LndpbmRvdyB8fCBudWxsID09IHQud2luZG93LmxvY2FsU3RvcmFnZSk7XG4gICAgfSwgdC5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdCwgbiwgciwgaSwgbywgcywgdSwgYSwgaCwgYywgZiwgbCA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gZS5fX2dlbmVyYXRvcih0aGlzLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyA0IC8qeWllbGQqLyAsIHRoaXMub2wuYm8oKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGZvciAodCA9IGUuc2VudCgpLCBuID0gMCwgciA9IHQ7IG4gPCByLmxlbmd0aDsgbisrKSAoaSA9IHJbbl0pICE9PSB0aGlzLnZsICYmIChvID0gdGhpcy5nZXRJdGVtKHRpKHRoaXMucGVyc2lzdGVuY2VLZXksIGkpKSkgJiYgKHMgPSBvaS5nbChpLCBvKSkgJiYgKHRoaXMuQ2wgPSB0aGlzLkNsLkFlKHMuY2xpZW50SWQsIHMpKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh0aGlzLnhsKCksICh1ID0gdGhpcy5zdG9yYWdlLmdldEl0ZW0odGhpcy5PbCkpICYmIChhID0gdGhpcy5CbCh1KSkgJiYgdGhpcy5xbChhKSwgXG4gICAgICAgICAgICAgICAgICAgIGggPSAwLCBjID0gdGhpcy5GbDsgaCA8IGMubGVuZ3RoOyBoKyspIGYgPSBjW2hdLCB0aGlzLkRsKGYpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5GbCA9IFtdLCBcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVnaXN0ZXIgYSB3aW5kb3cgdW5sb2FkIGhvb2sgdG8gcmVtb3ZlIHRoZSBjbGllbnQgbWV0YWRhdGEgZW50cnkgZnJvbVxuICAgICAgICAgICAgICAgICAgICAvLyBXZWJTdG9yYWdlIGV2ZW4gaWYgYHNodXRkb3duKClgIHdhcyBub3QgY2FsbGVkLlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXRmb3JtLndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidW5sb2FkXCIsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsLm1vKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pKSwgdGhpcy5ybyA9ICEwLCBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLmxyID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLnNldEl0ZW0odGhpcy4kbCwgSlNPTi5zdHJpbmdpZnkodCkpO1xuICAgIH0sIHQucHJvdG90eXBlLlVsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlFsKHRoaXMuQ2wpO1xuICAgIH0sIHQucHJvdG90eXBlLldsID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9ICExO1xuICAgICAgICByZXR1cm4gdGhpcy5DbC5mb3JFYWNoKChmdW5jdGlvbihuLCByKSB7XG4gICAgICAgICAgICByLmFjdGl2ZVRhcmdldElkcy5oYXModCkgJiYgKGUgPSAhMCk7XG4gICAgICAgIH0pKSwgZTtcbiAgICB9LCB0LnByb3RvdHlwZS5qbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5LbCh0LCBcInBlbmRpbmdcIik7XG4gICAgfSwgdC5wcm90b3R5cGUuR2wgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMuS2wodCwgZSwgbiksIFxuICAgICAgICAvLyBPbmNlIGEgZmluYWwgbXV0YXRpb24gcmVzdWx0IGlzIG9ic2VydmVkIGJ5IG90aGVyIGNsaWVudHMsIHRoZXkgbm8gbG9uZ2VyXG4gICAgICAgIC8vIGFjY2VzcyB0aGUgbXV0YXRpb24ncyBtZXRhZGF0YSBlbnRyeS4gU2luY2UgV2ViU3RvcmFnZSByZXBsYXlzIGV2ZW50c1xuICAgICAgICAvLyBpbiBvcmRlciwgaXQgaXMgc2FmZSB0byBkZWxldGUgdGhlIGVudHJ5IHJpZ2h0IGFmdGVyIHVwZGF0aW5nIGl0LlxuICAgICAgICB0aGlzLnpsKHQpO1xuICAgIH0sIHQucHJvdG90eXBlLkhsID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IFwibm90LWN1cnJlbnRcIjtcbiAgICAgICAgLy8gTG9va3VwIGFuIGV4aXN0aW5nIHF1ZXJ5IHN0YXRlIGlmIHRoZSB0YXJnZXQgSUQgd2FzIGFscmVhZHkgcmVnaXN0ZXJlZFxuICAgICAgICAvLyBieSBhbm90aGVyIHRhYlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLldsKHQpKSB7XG4gICAgICAgICAgICB2YXIgbiA9IHRoaXMuc3RvcmFnZS5nZXRJdGVtKG5pKHRoaXMucGVyc2lzdGVuY2VLZXksIHQpKTtcbiAgICAgICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgICAgICAgdmFyIHIgPSBpaS5nbCh0LCBuKTtcbiAgICAgICAgICAgICAgICByICYmIChlID0gci5zdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuWWwueWwodCksIHRoaXMueGwoKSwgZTtcbiAgICB9LCB0LnByb3RvdHlwZS5KbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5ZbC5ibCh0KSwgdGhpcy54bCgpO1xuICAgIH0sIHQucHJvdG90eXBlLlhsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ZbC5hY3RpdmVUYXJnZXRJZHMuaGFzKHQpO1xuICAgIH0sIHQucHJvdG90eXBlLlpsID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLnJlbW92ZUl0ZW0obmkodGhpcy5wZXJzaXN0ZW5jZUtleSwgdCkpO1xuICAgIH0sIHQucHJvdG90eXBlLnRkID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICB0aGlzLmVkKHQsIGUsIG4pO1xuICAgIH0sIHQucHJvdG90eXBlLkR1ID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXM7XG4gICAgICAgIGUuZm9yRWFjaCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgci56bCh0KTtcbiAgICAgICAgfSkpLCB0aGlzLmN1cnJlbnRVc2VyID0gdCwgbi5mb3JFYWNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByLmpsKHQpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuc2QgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMubmQodCk7XG4gICAgfSwgdC5wcm90b3R5cGUubW8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5ybyAmJiAodGhpcy5wbGF0Zm9ybS53aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInN0b3JhZ2VcIiwgdGhpcy5TbCksIHRoaXMucmVtb3ZlSXRlbSh0aGlzLk5sKSwgXG4gICAgICAgIHRoaXMucm8gPSAhMSk7XG4gICAgfSwgdC5wcm90b3R5cGUuZ2V0SXRlbSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbSh0KTtcbiAgICAgICAgcmV0dXJuIGRlKFwiU2hhcmVkQ2xpZW50U3RhdGVcIiwgXCJSRUFEXCIsIHQsIGUpLCBlO1xuICAgIH0sIHQucHJvdG90eXBlLnNldEl0ZW0gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGRlKFwiU2hhcmVkQ2xpZW50U3RhdGVcIiwgXCJTRVRcIiwgdCwgZSksIHRoaXMuc3RvcmFnZS5zZXRJdGVtKHQsIGUpO1xuICAgIH0sIHQucHJvdG90eXBlLnJlbW92ZUl0ZW0gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGRlKFwiU2hhcmVkQ2xpZW50U3RhdGVcIiwgXCJSRU1PVkVcIiwgdCksIHRoaXMuc3RvcmFnZS5yZW1vdmVJdGVtKHQpO1xuICAgIH0sIHQucHJvdG90eXBlLkRsID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIGlmICh0LnN0b3JhZ2VBcmVhID09PSB0aGlzLnN0b3JhZ2UpIHtcbiAgICAgICAgICAgIGlmIChkZShcIlNoYXJlZENsaWVudFN0YXRlXCIsIFwiRVZFTlRcIiwgdC5rZXksIHQubmV3VmFsdWUpLCB0LmtleSA9PT0gdGhpcy5ObCkgcmV0dXJuIHZvaWQgeWUoXCJSZWNlaXZlZCBXZWJTdG9yYWdlIG5vdGlmaWNhdGlvbiBmb3IgbG9jYWwgY2hhbmdlLiBBbm90aGVyIGNsaWVudCBtaWdodCBoYXZlIGdhcmJhZ2UtY29sbGVjdGVkIG91ciBzdGF0ZVwiKTtcbiAgICAgICAgICAgIHRoaXMuVHIuVWEoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLl9fYXdhaXRlcihuLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiwgciwgaSwgbywgcywgdTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IHQua2V5KSBpZiAodGhpcy5rbC50ZXN0KHQua2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCA9PSB0Lm5ld1ZhbHVlKSByZXR1cm4gbiA9IHRoaXMucmQodC5rZXkpLCBbIDIgLypyZXR1cm4qLyAsIHRoaXMuaGQobiwgbnVsbCkgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIgPSB0aGlzLm9kKHQua2V5LCB0Lm5ld1ZhbHVlKSkgcmV0dXJuIFsgMiAvKnJldHVybiovICwgdGhpcy5oZChyLmNsaWVudElkLCByKSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5MbC50ZXN0KHQua2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gdC5uZXdWYWx1ZSAmJiAoaSA9IHRoaXMuYWQodC5rZXksIHQubmV3VmFsdWUpKSkgcmV0dXJuIFsgMiAvKnJldHVybiovICwgdGhpcy51ZChpKSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5NbC50ZXN0KHQua2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gdC5uZXdWYWx1ZSAmJiAobyA9IHRoaXMuX2QodC5rZXksIHQubmV3VmFsdWUpKSkgcmV0dXJuIFsgMiAvKnJldHVybiovICwgdGhpcy5sZChvKSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodC5rZXkgPT09IHRoaXMuT2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IHQubmV3VmFsdWUgJiYgKHMgPSB0aGlzLkJsKHQubmV3VmFsdWUpKSkgcmV0dXJuIFsgMiAvKnJldHVybiovICwgdGhpcy5xbChzKSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB0LmtleSA9PT0gdGhpcy4kbCAmJiAodSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBQZS5kcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT0gdCkgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gSlNPTi5wYXJzZSh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lKFwibnVtYmVyXCIgPT0gdHlwZW9mIG4pLCBlID0gbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeWUoXCJTaGFyZWRDbGllbnRTdGF0ZVwiLCBcIkZhaWxlZCB0byByZWFkIHNlcXVlbmNlIG51bWJlciBmcm9tIFdlYlN0b3JhZ2VcIiwgdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSh0Lm5ld1ZhbHVlKSkgIT09IFBlLmRyICYmIHRoaXMudXIodSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgdGhpcy5GbC5wdXNoKHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICB9LCBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwiWWxcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuQ2wuZ2V0KHRoaXMudmwpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCB0LnByb3RvdHlwZS54bCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnNldEl0ZW0odGhpcy5ObCwgdGhpcy5ZbC5wbCgpKTtcbiAgICB9LCB0LnByb3RvdHlwZS5LbCA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgdmFyIHIgPSBuZXcgcmkodGhpcy5jdXJyZW50VXNlciwgdCwgZSwgbiksIGkgPSBlaSh0aGlzLnBlcnNpc3RlbmNlS2V5LCB0aGlzLmN1cnJlbnRVc2VyLCB0KTtcbiAgICAgICAgdGhpcy5zZXRJdGVtKGksIHIucGwoKSk7XG4gICAgfSwgdC5wcm90b3R5cGUuemwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gZWkodGhpcy5wZXJzaXN0ZW5jZUtleSwgdGhpcy5jdXJyZW50VXNlciwgdCk7XG4gICAgICAgIHRoaXMucmVtb3ZlSXRlbShlKTtcbiAgICB9LCB0LnByb3RvdHlwZS5uZCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB7XG4gICAgICAgICAgICBjbGllbnRJZDogdGhpcy52bCxcbiAgICAgICAgICAgIG9ubGluZVN0YXRlOiB0XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc3RvcmFnZS5zZXRJdGVtKHRoaXMuT2wsIEpTT04uc3RyaW5naWZ5KGUpKTtcbiAgICB9LCB0LnByb3RvdHlwZS5lZCA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgdmFyIHIgPSBuaSh0aGlzLnBlcnNpc3RlbmNlS2V5LCB0KSwgaSA9IG5ldyBpaSh0LCBlLCBuKTtcbiAgICAgICAgdGhpcy5zZXRJdGVtKHIsIGkucGwoKSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgY2xpZW50IHN0YXRlIGtleSBpbiBXZWJTdG9yYWdlLiBSZXR1cm5zIG51bGwgaWYgdGhlIGtleSBkb2VzIG5vdFxuICAgICAqIG1hdGNoIHRoZSBleHBlY3RlZCBrZXkgZm9ybWF0LlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLnJkID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMua2wuZXhlYyh0KTtcbiAgICAgICAgcmV0dXJuIGUgPyBlWzFdIDogbnVsbDtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBjbGllbnQgc3RhdGUgaW4gV2ViU3RvcmFnZS4gUmV0dXJucyAnbnVsbCcgaWYgdGhlIHZhbHVlIGNvdWxkIG5vdFxuICAgICAqIGJlIHBhcnNlZC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5vZCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLnJkKHQpO1xuICAgICAgICByZXR1cm4gb2kuZ2wobiwgZSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgbXV0YXRpb24gYmF0Y2ggc3RhdGUgaW4gV2ViU3RvcmFnZS4gUmV0dXJucyAnbnVsbCcgaWYgdGhlIHZhbHVlXG4gICAgICogY291bGQgbm90IGJlIHBhcnNlZC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5hZCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLkxsLmV4ZWModCksIHIgPSBOdW1iZXIoblsxXSksIGkgPSB2b2lkIDAgIT09IG5bMl0gPyBuWzJdIDogbnVsbDtcbiAgICAgICAgcmV0dXJuIHJpLmdsKG5ldyBhKGkpLCByLCBlKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBxdWVyeSB0YXJnZXQgc3RhdGUgZnJvbSBXZWJTdG9yYWdlLiBSZXR1cm5zICdudWxsJyBpZiB0aGUgdmFsdWVcbiAgICAgKiBjb3VsZCBub3QgYmUgcGFyc2VkLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLl9kID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXMuTWwuZXhlYyh0KSwgciA9IE51bWJlcihuWzFdKTtcbiAgICAgICAgcmV0dXJuIGlpLmdsKHIsIGUpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhbiBvbmxpbmUgc3RhdGUgZnJvbSBXZWJTdG9yYWdlLiBSZXR1cm5zICdudWxsJyBpZiB0aGUgdmFsdWVcbiAgICAgKiBjb3VsZCBub3QgYmUgcGFyc2VkLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLkJsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gc2kuZ2wodCk7XG4gICAgfSwgdC5wcm90b3R5cGUudWQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBlLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdC51c2VyLnVpZCA9PT0gdGhpcy5jdXJyZW50VXNlci51aWQgPyBbIDIgLypyZXR1cm4qLyAsIHRoaXMub2wuZGQodC5iYXRjaElkLCB0LnN0YXRlLCB0LmVycm9yKSBdIDogKGRlKFwiU2hhcmVkQ2xpZW50U3RhdGVcIiwgXCJJZ25vcmluZyBtdXRhdGlvbiBmb3Igbm9uLWFjdGl2ZSB1c2VyIFwiICsgdC51c2VyLnVpZCksIFxuICAgICAgICAgICAgICAgIFsgMiAvKnJldHVybiovIF0pO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUubGQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9sLmZkKHQudGFyZ2V0SWQsIHQuc3RhdGUsIHQuZXJyb3IpO1xuICAgIH0sIHQucHJvdG90eXBlLmhkID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXMsIHIgPSBlID8gdGhpcy5DbC5BZSh0LCBlKSA6IHRoaXMuQ2wucmVtb3ZlKHQpLCBpID0gdGhpcy5RbCh0aGlzLkNsKSwgbyA9IHRoaXMuUWwociksIHMgPSBbXSwgdSA9IFtdO1xuICAgICAgICByZXR1cm4gby5mb3JFYWNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBpLmhhcyh0KSB8fCBzLnB1c2godCk7XG4gICAgICAgIH0pKSwgaS5mb3JFYWNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBvLmhhcyh0KSB8fCB1LnB1c2godCk7XG4gICAgICAgIH0pKSwgdGhpcy5vbC5UZChzLCB1KS50aGVuKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG4uQ2wgPSByO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUucWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIC8vIFdlIGNoZWNrIHdoZXRoZXIgdGhlIGNsaWVudCB0aGF0IHdyb3RlIHRoaXMgb25saW5lIHN0YXRlIGlzIHN0aWxsIGFjdGl2ZVxuICAgICAgICAvLyBieSBjb21wYXJpbmcgaXRzIGNsaWVudCBJRCB0byB0aGUgbGlzdCBvZiBjbGllbnRzIGtlcHQgYWN0aXZlIGluXG4gICAgICAgIC8vIEluZGV4ZWREYi4gSWYgYSBjbGllbnQgZG9lcyBub3QgdXBkYXRlIHRoZWlyIEluZGV4ZWREYiBjbGllbnQgc3RhdGVcbiAgICAgICAgLy8gd2l0aGluIDUgc2Vjb25kcywgaXQgaXMgY29uc2lkZXJlZCBpbmFjdGl2ZSBhbmQgd2UgZG9uJ3QgZW1pdCBhbiBvbmxpbmVcbiAgICAgICAgLy8gc3RhdGUgZXZlbnQuXG4gICAgICAgIHRoaXMuQ2wuZ2V0KHQuY2xpZW50SWQpICYmIHRoaXMuZ18odC5vbmxpbmVTdGF0ZSk7XG4gICAgfSwgdC5wcm90b3R5cGUuUWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gS3QoKTtcbiAgICAgICAgcmV0dXJuIHQuZm9yRWFjaCgoZnVuY3Rpb24odCwgbikge1xuICAgICAgICAgICAgZSA9IGUuSGUobi5hY3RpdmVUYXJnZXRJZHMpO1xuICAgICAgICB9KSksIGU7XG4gICAgfSwgdDtcbn0oKSwgaGkgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgICAgIHRoaXMuRWQgPSBuZXcgdWksIHRoaXMuSWQgPSB7fSwgdGhpcy5vbCA9IG51bGwsIHRoaXMuZ18gPSBudWxsLCB0aGlzLnVyID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLmpsID0gZnVuY3Rpb24odCkge1xuICAgICAgICAvLyBObyBvcC5cbiAgICB9LCB0LnByb3RvdHlwZS5HbCA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgLy8gTm8gb3AuXG4gICAgfSwgdC5wcm90b3R5cGUuSGwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLkVkLnlsKHQpLCB0aGlzLklkW3RdIHx8IFwibm90LWN1cnJlbnRcIjtcbiAgICB9LCB0LnByb3RvdHlwZS50ZCA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgdGhpcy5JZFt0XSA9IGU7XG4gICAgfSwgdC5wcm90b3R5cGUuSmwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuRWQuYmwodCk7XG4gICAgfSwgdC5wcm90b3R5cGUuWGwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLkVkLmFjdGl2ZVRhcmdldElkcy5oYXModCk7XG4gICAgfSwgdC5wcm90b3R5cGUuWmwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLklkW3RdO1xuICAgIH0sIHQucHJvdG90eXBlLlVsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkVkLmFjdGl2ZVRhcmdldElkcztcbiAgICB9LCB0LnByb3RvdHlwZS5XbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuRWQuYWN0aXZlVGFyZ2V0SWRzLmhhcyh0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5FZCA9IG5ldyB1aSwgUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfSwgdC5wcm90b3R5cGUuRHUgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIC8vIE5vIG9wLlxuICAgIH0sIHQucHJvdG90eXBlLnNkID0gZnVuY3Rpb24odCkge1xuICAgICAgICAvLyBObyBvcC5cbiAgICB9LCB0LnByb3RvdHlwZS5tbyA9IGZ1bmN0aW9uKCkge30sIHQucHJvdG90eXBlLmxyID0gZnVuY3Rpb24odCkge30sIHQ7XG59KCksIGNpID0gZnVuY3Rpb24odCkge1xuICAgIHRoaXMua2V5ID0gdDtcbn0sIGZpID0gZnVuY3Rpb24odCkge1xuICAgIHRoaXMua2V5ID0gdDtcbn0sIGxpID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQsIFxuICAgIC8qKiBEb2N1bWVudHMgaW5jbHVkZWQgaW4gdGhlIHJlbW90ZSB0YXJnZXQgKi9cbiAgICBlKSB7XG4gICAgICAgIHRoaXMucXVlcnkgPSB0LCB0aGlzLndkID0gZSwgdGhpcy5SZCA9IG51bGwsIFxuICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEEgZmxhZyB3aGV0aGVyIHRoZSB2aWV3IGlzIGN1cnJlbnQgd2l0aCB0aGUgYmFja2VuZC4gQSB2aWV3IGlzIGNvbnNpZGVyZWRcbiAgICAgICAgICAgICAqIGN1cnJlbnQgYWZ0ZXIgaXQgaGFzIHNlZW4gdGhlIGN1cnJlbnQgZmxhZyBmcm9tIHRoZSBiYWNrZW5kIGFuZCBkaWQgbm90XG4gICAgICAgICAgICAgKiBsb3NlIGNvbnNpc3RlbmN5IHdpdGhpbiB0aGUgd2F0Y2ggc3RyZWFtIChlLmcuIGJlY2F1c2Ugb2YgYW4gZXhpc3RlbmNlXG4gICAgICAgICAgICAgKiBmaWx0ZXIgbWlzbWF0Y2gpLlxuICAgICAgICAgICAgICovXG4gICAgICAgIHRoaXMuZnMgPSAhMSwgXG4gICAgICAgIC8qKiBEb2N1bWVudHMgaW4gdGhlIHZpZXcgYnV0IG5vdCBpbiB0aGUgcmVtb3RlIHRhcmdldCAqL1xuICAgICAgICB0aGlzLkFkID0gV3QoKSwgXG4gICAgICAgIC8qKiBEb2N1bWVudCBLZXlzIHRoYXQgaGF2ZSBsb2NhbCBjaGFuZ2VzICovXG4gICAgICAgIHRoaXMubnMgPSBXdCgpLCB0aGlzLm1kID0gbmV3IFl0KHQuc2UuYmluZCh0KSk7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwiUGRcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHNldCBvZiByZW1vdGUgZG9jdW1lbnRzIHRoYXQgdGhlIHNlcnZlciBoYXMgdG9sZCB1cyBiZWxvbmdzIHRvIHRoZSB0YXJnZXQgYXNzb2NpYXRlZCB3aXRoXG4gICAgICAgICAqIHRoaXMgdmlldy5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53ZDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBhIHNldCBvZiBkb2MgY2hhbmdlcywgYXBwbGllcyB0aGUgcXVlcnkgbGltaXQsIGFuZCBjb21wdXRlc1xuICAgICAqIHdoYXQgdGhlIG5ldyByZXN1bHRzIHNob3VsZCBiZSwgd2hhdCB0aGUgY2hhbmdlcyB3ZXJlLCBhbmQgd2hldGhlciB3ZSBtYXlcbiAgICAgKiBuZWVkIHRvIGdvIGJhY2sgdG8gdGhlIGxvY2FsIGNhY2hlIGZvciBtb3JlIHJlc3VsdHMuIERvZXMgbm90IG1ha2UgYW55XG4gICAgICogY2hhbmdlcyB0byB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0gZG9jQ2hhbmdlcyBUaGUgZG9jIGNoYW5nZXMgdG8gYXBwbHkgdG8gdGhpcyB2aWV3LlxuICAgICAqIEBwYXJhbSBwcmV2aW91c0NoYW5nZXMgSWYgdGhpcyBpcyBiZWluZyBjYWxsZWQgd2l0aCBhIHJlZmlsbCwgdGhlbiBzdGFydFxuICAgICAqICAgICAgICB3aXRoIHRoaXMgc2V0IG9mIGRvY3MgYW5kIGNoYW5nZXMgaW5zdGVhZCBvZiB0aGUgY3VycmVudCB2aWV3LlxuICAgICAqIEByZXR1cm4gYSBuZXcgc2V0IG9mIGRvY3MsIGNoYW5nZXMsIGFuZCByZWZpbGwgZmxhZy5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5WZCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLCByID0gZSA/IGUuZ2QgOiBuZXcgJHQsIGkgPSBlID8gZS5tZCA6IHRoaXMubWQsIG8gPSBlID8gZS5ucyA6IHRoaXMubnMsIHMgPSBpLCB1ID0gITEsIGEgPSB0aGlzLnF1ZXJ5Lm9lKCkgJiYgaS5zaXplID09PSB0aGlzLnF1ZXJ5LmxpbWl0ID8gaS5sYXN0KCkgOiBudWxsLCBoID0gdGhpcy5xdWVyeS5hZSgpICYmIGkuc2l6ZSA9PT0gdGhpcy5xdWVyeS5saW1pdCA/IGkuZmlyc3QoKSA6IG51bGw7XG4gICAgICAgIC8vIERyb3AgZG9jdW1lbnRzIG91dCB0byBtZWV0IGxpbWl0L2xpbWl0VG9MYXN0IHJlcXVpcmVtZW50LlxuICAgICAgICBpZiAodC5wZSgoZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgdmFyIGMgPSBpLmdldCh0KSwgZiA9IGUgaW5zdGFuY2VvZiB5dCA/IGUgOiBudWxsO1xuICAgICAgICAgICAgZiAmJiAoZiA9IG4ucXVlcnkubWF0Y2hlcyhmKSA/IGYgOiBudWxsKTtcbiAgICAgICAgICAgIHZhciBsID0gISFjICYmIG4ubnMuaGFzKGMua2V5KSwgcCA9ICEhZiAmJiAoZi5BdCB8fCBcbiAgICAgICAgICAgIC8vIFdlIG9ubHkgY29uc2lkZXIgY29tbWl0dGVkIG11dGF0aW9ucyBmb3IgZG9jdW1lbnRzIHRoYXQgd2VyZVxuICAgICAgICAgICAgLy8gbXV0YXRlZCBkdXJpbmcgdGhlIGxpZmV0aW1lIG9mIHRoZSB2aWV3LlxuICAgICAgICAgICAgbi5ucy5oYXMoZi5rZXkpICYmIGYuaGFzQ29tbWl0dGVkTXV0YXRpb25zKSwgZCA9ICExO1xuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIGNoYW5nZVxuICAgICAgICAgICAgYyAmJiBmID8gYy5kYXRhKCkuaXNFcXVhbChmLmRhdGEoKSkgPyBsICE9PSBwICYmIChyLnRyYWNrKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAzIC8qIE1ldGFkYXRhICovICxcbiAgICAgICAgICAgICAgICBkb2M6IGZcbiAgICAgICAgICAgIH0pLCBkID0gITApIDogbi5wZChjLCBmKSB8fCAoci50cmFjayh7XG4gICAgICAgICAgICAgICAgdHlwZTogMiAvKiBNb2RpZmllZCAqLyAsXG4gICAgICAgICAgICAgICAgZG9jOiBmXG4gICAgICAgICAgICB9KSwgZCA9ICEwLCAoYSAmJiBuLnF1ZXJ5LnNlKGYsIGEpID4gMCB8fCBoICYmIG4ucXVlcnkuc2UoZiwgaCkgPCAwKSAmJiAoXG4gICAgICAgICAgICAvLyBUaGlzIGRvYyBtb3ZlZCBmcm9tIGluc2lkZSB0aGUgbGltaXQgdG8gb3V0c2lkZSB0aGUgbGltaXQuXG4gICAgICAgICAgICAvLyBUaGF0IG1lYW5zIHRoZXJlIG1heSBiZSBzb21lIG90aGVyIGRvYyBpbiB0aGUgbG9jYWwgY2FjaGVcbiAgICAgICAgICAgIC8vIHRoYXQgc2hvdWxkIGJlIGluY2x1ZGVkIGluc3RlYWQuXG4gICAgICAgICAgICB1ID0gITApKSA6ICFjICYmIGYgPyAoci50cmFjayh7XG4gICAgICAgICAgICAgICAgdHlwZTogMCAvKiBBZGRlZCAqLyAsXG4gICAgICAgICAgICAgICAgZG9jOiBmXG4gICAgICAgICAgICB9KSwgZCA9ICEwKSA6IGMgJiYgIWYgJiYgKHIudHJhY2soe1xuICAgICAgICAgICAgICAgIHR5cGU6IDEgLyogUmVtb3ZlZCAqLyAsXG4gICAgICAgICAgICAgICAgZG9jOiBjXG4gICAgICAgICAgICB9KSwgZCA9ICEwLCAoYSB8fCBoKSAmJiAoXG4gICAgICAgICAgICAvLyBBIGRvYyB3YXMgcmVtb3ZlZCBmcm9tIGEgZnVsbCBsaW1pdCBxdWVyeS4gV2UnbGwgbmVlZCB0b1xuICAgICAgICAgICAgLy8gcmVxdWVyeSBmcm9tIHRoZSBsb2NhbCBjYWNoZSB0byBzZWUgaWYgd2Uga25vdyBhYm91dCBzb21lIG90aGVyXG4gICAgICAgICAgICAvLyBkb2MgdGhhdCBzaG91bGQgYmUgaW4gdGhlIHJlc3VsdHMuXG4gICAgICAgICAgICB1ID0gITApKSwgZCAmJiAoZiA/IChzID0gcy5hZGQoZiksIG8gPSBwID8gby5hZGQodCkgOiBvLmRlbGV0ZSh0KSkgOiAocyA9IHMuZGVsZXRlKHQpLCBcbiAgICAgICAgICAgIG8gPSBvLmRlbGV0ZSh0KSkpO1xuICAgICAgICB9KSksIHRoaXMucXVlcnkub2UoKSB8fCB0aGlzLnF1ZXJ5LmFlKCkpIGZvciAoO3Muc2l6ZSA+IHRoaXMucXVlcnkubGltaXQ7ICkge1xuICAgICAgICAgICAgdmFyIGMgPSB0aGlzLnF1ZXJ5Lm9lKCkgPyBzLmxhc3QoKSA6IHMuZmlyc3QoKTtcbiAgICAgICAgICAgIHMgPSBzLmRlbGV0ZShjLmtleSksIG8gPSBvLmRlbGV0ZShjLmtleSksIHIudHJhY2soe1xuICAgICAgICAgICAgICAgIHR5cGU6IDEgLyogUmVtb3ZlZCAqLyAsXG4gICAgICAgICAgICAgICAgZG9jOiBjXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWQ6IHMsXG4gICAgICAgICAgICBnZDogcixcbiAgICAgICAgICAgIHlkOiB1LFxuICAgICAgICAgICAgbnM6IG9cbiAgICAgICAgfTtcbiAgICB9LCB0LnByb3RvdHlwZS5wZCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgLy8gV2Ugc3VwcHJlc3MgdGhlIGluaXRpYWwgY2hhbmdlIGV2ZW50IGZvciBkb2N1bWVudHMgdGhhdCB3ZXJlIG1vZGlmaWVkIGFzXG4gICAgICAgIC8vIHBhcnQgb2YgYSB3cml0ZSBhY2tub3dsZWRnbWVudCAoZS5nLiB3aGVuIHRoZSB2YWx1ZSBvZiBhIHNlcnZlciB0cmFuc2Zvcm1cbiAgICAgICAgLy8gaXMgYXBwbGllZCkgYXMgV2F0Y2ggd2lsbCBzZW5kIHVzIHRoZSBzYW1lIGRvY3VtZW50IGFnYWluLlxuICAgICAgICAvLyBCeSBzdXBwcmVzc2luZyB0aGUgZXZlbnQsIHdlIG9ubHkgcmFpc2UgdHdvIHVzZXIgdmlzaWJsZSBldmVudHMgKG9uZSB3aXRoXG4gICAgICAgIC8vIGBoYXNQZW5kaW5nV3JpdGVzYCBhbmQgdGhlIGZpbmFsIHN0YXRlIG9mIHRoZSBkb2N1bWVudCkgaW5zdGVhZCBvZiB0aHJlZVxuICAgICAgICAvLyAob25lIHdpdGggYGhhc1BlbmRpbmdXcml0ZXNgLCB0aGUgbW9kaWZpZWQgZG9jdW1lbnQgd2l0aFxuICAgICAgICAvLyBgaGFzUGVuZGluZ1dyaXRlc2AgYW5kIHRoZSBmaW5hbCBzdGF0ZSBvZiB0aGUgZG9jdW1lbnQpLlxuICAgICAgICByZXR1cm4gdC5BdCAmJiBlLmhhc0NvbW1pdHRlZE11dGF0aW9ucyAmJiAhZS5BdDtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSB2aWV3IHdpdGggdGhlIGdpdmVuIFZpZXdEb2N1bWVudENoYW5nZXMgYW5kIG9wdGlvbmFsbHkgdXBkYXRlc1xuICAgICAqIGxpbWJvIGRvY3MgYW5kIHN5bmMgc3RhdGUgZnJvbSB0aGUgcHJvdmlkZWQgdGFyZ2V0IGNoYW5nZS5cbiAgICAgKiBAcGFyYW0gZG9jQ2hhbmdlcyBUaGUgc2V0IG9mIGNoYW5nZXMgdG8gbWFrZSB0byB0aGUgdmlldydzIGRvY3MuXG4gICAgICogQHBhcmFtIHVwZGF0ZUxpbWJvRG9jdW1lbnRzIFdoZXRoZXIgdG8gdXBkYXRlIGxpbWJvIGRvY3VtZW50cyBiYXNlZCBvbiB0aGlzXG4gICAgICogICAgICAgIGNoYW5nZS5cbiAgICAgKiBAcGFyYW0gdGFyZ2V0Q2hhbmdlIEEgdGFyZ2V0IGNoYW5nZSB0byBhcHBseSBmb3IgY29tcHV0aW5nIGxpbWJvIGRvY3MgYW5kXG4gICAgICogICAgICAgIHN5bmMgc3RhdGUuXG4gICAgICogQHJldHVybiBBIG5ldyBWaWV3Q2hhbmdlIHdpdGggdGhlIGdpdmVuIGRvY3MsIGNoYW5nZXMsIGFuZCBzeW5jIHN0YXRlLlxuICAgICAqL1xuICAgIC8vIFBPUlRJTkcgTk9URTogVGhlIGlPUy9BbmRyb2lkIGNsaWVudHMgYWx3YXlzIGNvbXB1dGUgbGltYm8gZG9jdW1lbnQgY2hhbmdlcy5cbiAgICB0LnByb3RvdHlwZS54biA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzLCBpID0gdGhpcy5tZDtcbiAgICAgICAgdGhpcy5tZCA9IHQubWQsIHRoaXMubnMgPSB0Lm5zO1xuICAgICAgICAvLyBTb3J0IGNoYW5nZXMgYmFzZWQgb24gdHlwZSBhbmQgcXVlcnkgY29tcGFyYXRvclxuICAgICAgICB2YXIgbyA9IHQuZ2QuZXMoKTtcbiAgICAgICAgby5zb3J0KChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgICAgIHZhciBuID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDAgLyogQWRkZWQgKi8gOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDIgLyogTW9kaWZpZWQgKi8gOlxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMyAvKiBNZXRhZGF0YSAqLyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBIG1ldGFkYXRhIGNoYW5nZSBpcyBjb252ZXJ0ZWQgdG8gYSBtb2RpZmllZCBjaGFuZ2UgYXQgdGhlIHB1YmxpY1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXBpIGxheWVyLiAgU2luY2Ugd2Ugc29ydCBieSBkb2N1bWVudCBrZXkgYW5kIHRoZW4gY2hhbmdlIHR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtZXRhZGF0YSBhbmQgbW9kaWZpZWQgY2hhbmdlcyBtdXN0IGJlIHNvcnRlZCBlcXVpdmFsZW50bHkuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMjtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMSAvKiBSZW1vdmVkICovIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbih0KSAtIG4oZSk7XG4gICAgICAgICAgICB9KHQudHlwZSwgZS50eXBlKSB8fCByLnF1ZXJ5LnNlKHQuZG9jLCBlLmRvYyk7XG4gICAgICAgIH0pKSwgdGhpcy5iZChuKTtcbiAgICAgICAgdmFyIHMgPSBlID8gdGhpcy52ZCgpIDogW10sIHUgPSAwID09PSB0aGlzLkFkLnNpemUgJiYgdGhpcy5mcyA/IDEgLyogU3luY2VkICovIDogMCAvKiBMb2NhbCAqLyAsIGEgPSB1ICE9PSB0aGlzLlJkO1xuICAgICAgICByZXR1cm4gdGhpcy5SZCA9IHUsIDAgIT09IG8ubGVuZ3RoIHx8IGEgPyB7XG4gICAgICAgICAgICBzbmFwc2hvdDogbmV3IEp0KHRoaXMucXVlcnksIHQubWQsIGksIG8sIHQubnMsIDAgLyogTG9jYWwgKi8gPT09IHUsIGEsIFxuICAgICAgICAgICAgLyogZXhjbHVkZXNNZXRhZGF0YUNoYW5nZXM9ICovICExKSxcbiAgICAgICAgICAgIFNkOiBzXG4gICAgICAgIH0gOiB7XG4gICAgICAgICAgICBTZDogc1xuICAgICAgICB9O1xuICAgICAgICAvLyBubyBjaGFuZ2VzXG4gICAgICAgIH0sIFxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgYW4gT25saW5lU3RhdGUgY2hhbmdlIHRvIHRoZSB2aWV3LCBwb3RlbnRpYWxseSBnZW5lcmF0aW5nIGFcbiAgICAgKiBWaWV3Q2hhbmdlIGlmIHRoZSB2aWV3J3Mgc3luY1N0YXRlIGNoYW5nZXMgYXMgYSByZXN1bHQuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuRGQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZzICYmIFwiT2ZmbGluZVwiIC8qIE9mZmxpbmUgKi8gPT09IHQgPyAoXG4gICAgICAgIC8vIElmIHdlJ3JlIG9mZmxpbmUsIHNldCBgY3VycmVudGAgdG8gZmFsc2UgYW5kIHRoZW4gY2FsbCBhcHBseUNoYW5nZXMoKVxuICAgICAgICAvLyB0byByZWZyZXNoIG91ciBzeW5jU3RhdGUgYW5kIGdlbmVyYXRlIGEgVmlld0NoYW5nZSBhcyBhcHByb3ByaWF0ZS4gV2VcbiAgICAgICAgLy8gYXJlIGd1YXJhbnRlZWQgdG8gZ2V0IGEgbmV3IFRhcmdldENoYW5nZSB0aGF0IHNldHMgYGN1cnJlbnRgIGJhY2sgdG9cbiAgICAgICAgLy8gdHJ1ZSBvbmNlIHRoZSBjbGllbnQgaXMgYmFjayBvbmxpbmUuXG4gICAgICAgIHRoaXMuZnMgPSAhMSwgdGhpcy54bih7XG4gICAgICAgICAgICBtZDogdGhpcy5tZCxcbiAgICAgICAgICAgIGdkOiBuZXcgJHQsXG4gICAgICAgICAgICBuczogdGhpcy5ucyxcbiAgICAgICAgICAgIHlkOiAhMVxuICAgICAgICB9LCBcbiAgICAgICAgLyogdXBkYXRlTGltYm9Eb2N1bWVudHM9ICovICExKSkgOiB7XG4gICAgICAgICAgICBTZDogW11cbiAgICAgICAgfTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGRvYyBmb3IgdGhlIGdpdmVuIGtleSBzaG91bGQgYmUgaW4gbGltYm8uXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuQ2QgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIC8vIElmIHRoZSByZW1vdGUgZW5kIHNheXMgaXQncyBwYXJ0IG9mIHRoaXMgcXVlcnksIGl0J3Mgbm90IGluIGxpbWJvLlxuICAgICAgICByZXR1cm4gIXRoaXMud2QuaGFzKHQpICYmIFxuICAgICAgICAvLyBUaGUgbG9jYWwgc3RvcmUgZG9lc24ndCB0aGluayBpdCdzIGEgcmVzdWx0LCBzbyBpdCBzaG91bGRuJ3QgYmUgaW4gbGltYm8uXG4gICAgICAgICEhdGhpcy5tZC5oYXModCkgJiYgIXRoaXMubWQuZ2V0KHQpLkF0O1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgc3luY2VkRG9jdW1lbnRzLCBjdXJyZW50LCBhbmQgbGltYm8gZG9jcyBiYXNlZCBvbiB0aGUgZ2l2ZW4gY2hhbmdlLlxuICAgICAqIFJldHVybnMgdGhlIGxpc3Qgb2YgY2hhbmdlcyB0byB3aGljaCBkb2NzIGFyZSBpbiBsaW1iby5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5iZCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICB0ICYmICh0LlRzLmZvckVhY2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBlLndkID0gZS53ZC5hZGQodCk7XG4gICAgICAgIH0pKSwgdC5Fcy5mb3JFYWNoKChmdW5jdGlvbih0KSB7fSkpLCB0LklzLmZvckVhY2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBlLndkID0gZS53ZC5kZWxldGUodCk7XG4gICAgICAgIH0pKSwgdGhpcy5mcyA9IHQuZnMpO1xuICAgIH0sIHQucHJvdG90eXBlLnZkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgLy8gV2UgY2FuIG9ubHkgZGV0ZXJtaW5lIGxpbWJvIGRvY3VtZW50cyB3aGVuIHdlJ3JlIGluLXN5bmMgd2l0aCB0aGUgc2VydmVyLlxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5mcykgcmV0dXJuIFtdO1xuICAgICAgICAvLyBUT0RPKGtsaW10KTogRG8gdGhpcyBpbmNyZW1lbnRhbGx5IHNvIHRoYXQgaXQncyBub3QgcXVhZHJhdGljIHdoZW5cbiAgICAgICAgLy8gdXBkYXRpbmcgbWFueSBkb2N1bWVudHMuXG4gICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLkFkO1xuICAgICAgICB0aGlzLkFkID0gV3QoKSwgdGhpcy5tZC5mb3JFYWNoKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB0LkNkKGUua2V5KSAmJiAodC5BZCA9IHQuQWQuYWRkKGUua2V5KSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgLy8gRGlmZiB0aGUgbmV3IGxpbWJvIGRvY3Mgd2l0aCB0aGUgb2xkIGxpbWJvIGRvY3MuXG4gICAgICAgIHZhciBuID0gW107XG4gICAgICAgIHJldHVybiBlLmZvckVhY2goKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHQuQWQuaGFzKGUpIHx8IG4ucHVzaChuZXcgZmkoZSkpO1xuICAgICAgICB9KSksIHRoaXMuQWQuZm9yRWFjaCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgZS5oYXModCkgfHwgbi5wdXNoKG5ldyBjaSh0KSk7XG4gICAgICAgIH0pKSwgbjtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIGluLW1lbW9yeSBzdGF0ZSBvZiB0aGUgY3VycmVudCB2aWV3IHdpdGggdGhlIHN0YXRlIHJlYWQgZnJvbVxuICAgICAqIHBlcnNpc3RlbmNlLlxuICAgICAqXG4gICAgICogV2UgdXBkYXRlIHRoZSBxdWVyeSB2aWV3IHdoZW5ldmVyIGEgY2xpZW50J3MgcHJpbWFyeSBzdGF0dXMgY2hhbmdlczpcbiAgICAgKiAtIFdoZW4gYSBjbGllbnQgdHJhbnNpdGlvbnMgZnJvbSBwcmltYXJ5IHRvIHNlY29uZGFyeSwgaXQgY2FuIG1pc3NcbiAgICAgKiAgIExvY2FsU3RvcmFnZSB1cGRhdGVzIGFuZCBpdHMgcXVlcnkgdmlld3MgbWF5IHRlbXBvcmFyaWx5IG5vdCBiZVxuICAgICAqICAgc3luY2hyb25pemVkIHdpdGggdGhlIHN0YXRlIG9uIGRpc2suXG4gICAgICogLSBGb3Igc2Vjb25kYXJ5IHRvIHByaW1hcnkgdHJhbnNpdGlvbnMsIHRoZSBjbGllbnQgbmVlZHMgdG8gdXBkYXRlIHRoZSBsaXN0XG4gICAgICogICBvZiBgc3luY2VkRG9jdW1lbnRzYCBzaW5jZSBzZWNvbmRhcnkgY2xpZW50cyB1cGRhdGUgdGhlaXIgcXVlcnkgdmlld3NcbiAgICAgKiAgIGJhc2VkIHB1cmVseSBvbiBzeW50aGVzaXplZCBSZW1vdGVFdmVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcXVlcnlSZXN1bHQuZG9jdW1lbnRzIC0gVGhlIGRvY3VtZW50cyB0aGF0IG1hdGNoIHRoZSBxdWVyeSBhY2NvcmRpbmdcbiAgICAgKiB0byB0aGUgTG9jYWxTdG9yZS5cbiAgICAgKiBAcGFyYW0gcXVlcnlSZXN1bHQucmVtb3RlS2V5cyAtIFRoZSBrZXlzIG9mIHRoZSBkb2N1bWVudHMgdGhhdCBtYXRjaCB0aGVcbiAgICAgKiBxdWVyeSBhY2NvcmRpbmcgdG8gdGhlIGJhY2tlbmQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIFRoZSBWaWV3Q2hhbmdlIHRoYXQgcmVzdWx0ZWQgZnJvbSB0aGlzIHN5bmNocm9uaXphdGlvbi5cbiAgICAgKi9cbiAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLXRhYiBvbmx5LlxuICAgIHQucHJvdG90eXBlLkZkID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLndkID0gdC5LdSwgdGhpcy5BZCA9IFd0KCk7XG4gICAgICAgIHZhciBlID0gdGhpcy5WZCh0LmRvY3VtZW50cyk7XG4gICAgICAgIHJldHVybiB0aGlzLnhuKGUsIC8qdXBkYXRlTGltYm9Eb2N1bWVudHM9Ki8gITApO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSB2aWV3IHNuYXBzaG90IGFzIGlmIHRoaXMgcXVlcnkgd2FzIGp1c3QgbGlzdGVuZWQgdG8uIENvbnRhaW5zXG4gICAgICogYSBkb2N1bWVudCBhZGQgZm9yIGV2ZXJ5IGV4aXN0aW5nIGRvY3VtZW50IGFuZCB0aGUgYGZyb21DYWNoZWAgYW5kXG4gICAgICogYGhhc1BlbmRpbmdXcml0ZXNgIHN0YXR1cyBvZiB0aGUgYWxyZWFkeSBlc3RhYmxpc2hlZCB2aWV3LlxuICAgICAqL1xuICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktdGFiIG9ubHkuXG4gICAgdC5wcm90b3R5cGUuTmQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEp0Lm9zKHRoaXMucXVlcnksIHRoaXMubWQsIHRoaXMubnMsIDAgLyogTG9jYWwgKi8gPT09IHRoaXMuUmQpO1xuICAgIH0sIHQ7XG59KCksIHBpID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQsIGUsIG4sIHIpIHtcbiAgICAgICAgdGhpcy5BYSA9IHQsIHRoaXMuJGQgPSBlLCB0aGlzLnVwZGF0ZUZ1bmN0aW9uID0gbiwgdGhpcy5WYSA9IHIsIHRoaXMua2QgPSA1LCB0aGlzLiRhID0gbmV3IENlKHRoaXMuQWEsIFwidHJhbnNhY3Rpb25fcmV0cnlcIiAvKiBUcmFuc2FjdGlvblJldHJ5ICovKVxuICAgICAgICAvKiogUnVucyB0aGUgdHJhbnNhY3Rpb24gYW5kIHNldHMgdGhlIHJlc3VsdCBvbiBkZWZlcnJlZC4gKi87XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5MZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLk1kKCk7XG4gICAgfSwgdC5wcm90b3R5cGUuTWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICB0aGlzLiRhLmdyKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBlLl9fYXdhaXRlcih0LCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0LCBuLCByID0gdGhpcztcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5fX2dlbmVyYXRvcih0aGlzLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA9IHRoaXMuJGQubWwoKSwgKG4gPSB0aGlzLk9kKHQpKSAmJiBuLnRoZW4oKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHIuQWEudW8oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmNvbW1pdCgpLnRoZW4oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLlZhLnJlc29sdmUoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLmNhdGNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIueGQodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KSkuY2F0Y2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHIueGQodCk7XG4gICAgICAgICAgICAgICAgICAgIH0pKSwgWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5PZCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBlID0gdGhpcy51cGRhdGVGdW5jdGlvbih0KTtcbiAgICAgICAgICAgIHJldHVybiAhayhlKSAmJiBlLmNhdGNoICYmIGUudGhlbiA/IGUgOiAodGhpcy5WYS5yZWplY3QoRXJyb3IoXCJUcmFuc2FjdGlvbiBjYWxsYmFjayBtdXN0IHJldHVybiBhIFByb21pc2VcIikpLCBcbiAgICAgICAgICAgIG51bGwpO1xuICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICAvLyBEbyBub3QgcmV0cnkgZXJyb3JzIHRocm93biBieSB1c2VyIHByb3ZpZGVkIHVwZGF0ZUZ1bmN0aW9uLlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuVmEucmVqZWN0KHQpLCBudWxsO1xuICAgICAgICB9XG4gICAgfSwgdC5wcm90b3R5cGUueGQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgdGhpcy5rZCA+IDAgJiYgdGhpcy5CZCh0KSA/ICh0aGlzLmtkIC09IDEsIHRoaXMuQWEudW8oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGUuTWQoKSwgUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH0pKSkgOiB0aGlzLlZhLnJlamVjdCh0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5CZCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgaWYgKFwiRmlyZWJhc2VFcnJvclwiID09PSB0Lm5hbWUpIHtcbiAgICAgICAgICAgIC8vIEluIHRyYW5zYWN0aW9ucywgdGhlIGJhY2tlbmQgd2lsbCBmYWlsIG91dGRhdGVkIHJlYWRzIHdpdGggRkFJTEVEX1BSRUNPTkRJVElPTiBhbmRcbiAgICAgICAgICAgIC8vIG5vbi1tYXRjaGluZyBkb2N1bWVudCB2ZXJzaW9ucyB3aXRoIEFCT1JURUQuIFRoZXNlIGVycm9ycyBzaG91bGQgYmUgcmV0cmllZC5cbiAgICAgICAgICAgIHZhciBlID0gdC5jb2RlO1xuICAgICAgICAgICAgcmV0dXJuIFwiYWJvcnRlZFwiID09PSBlIHx8IFwiZmFpbGVkLXByZWNvbmRpdGlvblwiID09PSBlIHx8ICFTdChlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gITE7XG4gICAgfSwgdDtcbn0oKSwgZGkgPSBmdW5jdGlvbihcbi8qKlxuICAgICAqIFRoZSBxdWVyeSBpdHNlbGYuXG4gICAgICovXG50LCBcbi8qKlxuICAgICAqIFRoZSB0YXJnZXQgbnVtYmVyIGNyZWF0ZWQgYnkgdGhlIGNsaWVudCB0aGF0IGlzIHVzZWQgaW4gdGhlIHdhdGNoXG4gICAgICogc3RyZWFtIHRvIGlkZW50aWZ5IHRoaXMgcXVlcnkuXG4gICAgICovXG5lLCBcbi8qKlxuICAgICAqIFRoZSB2aWV3IGlzIHJlc3BvbnNpYmxlIGZvciBjb21wdXRpbmcgdGhlIGZpbmFsIG1lcmdlZCB0cnV0aCBvZiB3aGF0XG4gICAgICogZG9jcyBhcmUgaW4gdGhlIHF1ZXJ5LiBJdCBnZXRzIG5vdGlmaWVkIG9mIGxvY2FsIGFuZCByZW1vdGUgY2hhbmdlcyxcbiAgICAgKiBhbmQgYXBwbGllcyB0aGUgcXVlcnkgZmlsdGVycyBhbmQgbGltaXRzIHRvIGRldGVybWluZSB0aGUgbW9zdCBjb3JyZWN0XG4gICAgICogcG9zc2libGUgcmVzdWx0cy5cbiAgICAgKi9cbm4pIHtcbiAgICB0aGlzLnF1ZXJ5ID0gdCwgdGhpcy50YXJnZXRJZCA9IGUsIHRoaXMudmlldyA9IG47XG59LCB5aSA9IGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLmtleSA9IHQsIFxuICAgIC8qKlxuICAgICAgICAgICAgICogU2V0IHRvIHRydWUgb25jZSB3ZSd2ZSByZWNlaXZlZCBhIGRvY3VtZW50LiBUaGlzIGlzIHVzZWQgaW5cbiAgICAgICAgICAgICAqIGdldFJlbW90ZUtleXNGb3JUYXJnZXQoKSBhbmQgdWx0aW1hdGVseSB1c2VkIGJ5IFdhdGNoQ2hhbmdlQWdncmVnYXRvciB0b1xuICAgICAgICAgICAgICogZGVjaWRlIHdoZXRoZXIgaXQgbmVlZHMgdG8gbWFudWZhY3R1cmUgYSBkZWxldGUgZXZlbnQgZm9yIHRoZSB0YXJnZXQgb25jZVxuICAgICAgICAgICAgICogdGhlIHRhcmdldCBpcyBDVVJSRU5ULlxuICAgICAgICAgICAgICovXG4gICAgdGhpcy5xZCA9ICExO1xufSwgdmkgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSwgXG4gICAgLy8gUE9SVElORyBOT1RFOiBNYW5hZ2VzIHN0YXRlIHN5bmNocm9uaXphdGlvbiBpbiBtdWx0aS10YWIgZW52aXJvbm1lbnRzLlxuICAgIG4sIHIsIGkpIHtcbiAgICAgICAgdGhpcy5OXyA9IHQsIHRoaXMuJGQgPSBlLCB0aGlzLlVkID0gbiwgdGhpcy5jdXJyZW50VXNlciA9IHIsIHRoaXMuUWQgPSBpLCB0aGlzLldkID0gbnVsbCwgXG4gICAgICAgIHRoaXMuamQgPSBuZXcgQWUoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0LmNhbm9uaWNhbElkKCk7XG4gICAgICAgIH0pKSwgdGhpcy5LZCA9IG5ldyBNYXAsIFxuICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoZSBrZXlzIG9mIGRvY3VtZW50cyB0aGF0IGFyZSBpbiBsaW1ibyBmb3Igd2hpY2ggd2UgaGF2ZW4ndCB5ZXQgc3RhcnRlZCBhXG4gICAgICAgICAgICAgKiBsaW1ibyByZXNvbHV0aW9uIHF1ZXJ5LlxuICAgICAgICAgICAgICovXG4gICAgICAgIHRoaXMuR2QgPSBbXSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgICAgICogS2VlcHMgdHJhY2sgb2YgdGhlIHRhcmdldCBJRCBmb3IgZWFjaCBkb2N1bWVudCB0aGF0IGlzIGluIGxpbWJvIHdpdGggYW5cbiAgICAgICAgICAgICAqIGFjdGl2ZSB0YXJnZXQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgdGhpcy56ZCA9IG5ldyBMdChfLk4pLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBLZWVwcyB0cmFjayBvZiB0aGUgaW5mb3JtYXRpb24gYWJvdXQgYW4gYWN0aXZlIGxpbWJvIHJlc29sdXRpb24gZm9yIGVhY2hcbiAgICAgICAgICAgICAqIGFjdGl2ZSB0YXJnZXQgSUQgdGhhdCB3YXMgc3RhcnRlZCBmb3IgdGhlIHB1cnBvc2Ugb2YgbGltYm8gcmVzb2x1dGlvbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICB0aGlzLkhkID0gbmV3IE1hcCwgdGhpcy5ZZCA9IG5ldyBuciwgXG4gICAgICAgIC8qKiBTdG9yZXMgdXNlciBjb21wbGV0aW9uIGhhbmRsZXJzLCBpbmRleGVkIGJ5IFVzZXIgYW5kIEJhdGNoSWQuICovXG4gICAgICAgIHRoaXMuSmQgPSB7fSwgXG4gICAgICAgIC8qKiBTdG9yZXMgdXNlciBjYWxsYmFja3Mgd2FpdGluZyBmb3IgYWxsIHBlbmRpbmcgd3JpdGVzIHRvIGJlIGFja25vd2xlZGdlZC4gKi9cbiAgICAgICAgdGhpcy5YZCA9IG5ldyBNYXAsIHRoaXMuWmQgPSBIZS5yaCgpLCB0aGlzLm9ubGluZVN0YXRlID0gXCJVbmtub3duXCIgLyogVW5rbm93biAqLztcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJ0ZlwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gITA7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIFxuICAgIC8qKiBTdWJzY3JpYmVzIHRvIFN5bmNFbmdpbmUgbm90aWZpY2F0aW9ucy4gSGFzIHRvIGJlIGNhbGxlZCBleGFjdGx5IG9uY2UuICovIHQucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5XZCA9IHQ7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogSW5pdGlhdGVzIHRoZSBuZXcgbGlzdGVuLCByZXNvbHZlcyBwcm9taXNlIHdoZW4gbGlzdGVuIGVucXVldWVkIHRvIHRoZVxuICAgICAqIHNlcnZlci4gQWxsIHRoZSBzdWJzZXF1ZW50IHZpZXcgc25hcHNob3RzIG9yIGVycm9ycyBhcmUgc2VudCB0byB0aGVcbiAgICAgKiBzdWJzY3JpYmVkIGhhbmRsZXJzLiBSZXR1cm5zIHRoZSBpbml0aWFsIHNuYXBzaG90LlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmxpc3RlbiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbiwgciwgaSwgbywgcztcbiAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVmKFwibGlzdGVuKClcIiksIChpID0gdGhpcy5qZC5nZXQodCkpID8gKFxuICAgICAgICAgICAgICAgICAgICAvLyBQT1JUSU5HIE5PVEU6IFdpdGggTXVsdGktVGFiIFdlYiwgaXQgaXMgcG9zc2libGUgdGhhdCBhIHF1ZXJ5IHZpZXdcbiAgICAgICAgICAgICAgICAgICAgLy8gYWxyZWFkeSBleGlzdHMgd2hlbiBFdmVudE1hbmFnZXIgY2FsbHMgdXMgZm9yIHRoZSBmaXJzdCB0aW1lLiBUaGlzXG4gICAgICAgICAgICAgICAgICAgIC8vIGhhcHBlbnMgd2hlbiB0aGUgcHJpbWFyeSB0YWIgaXMgYWxyZWFkeSBsaXN0ZW5pbmcgdG8gdGhpcyBxdWVyeSBvblxuICAgICAgICAgICAgICAgICAgICAvLyBiZWhhbGYgb2YgYW5vdGhlciB0YWIgYW5kIHRoZSB1c2VyIG9mIHRoZSBwcmltYXJ5IGFsc28gc3RhcnRzIGxpc3RlbmluZ1xuICAgICAgICAgICAgICAgICAgICAvLyB0byB0aGUgcXVlcnkuIEV2ZW50TWFuYWdlciB3aWxsIG5vdCBoYXZlIGFuIGFzc2lnbmVkIHRhcmdldCBJRCBpbiB0aGlzXG4gICAgICAgICAgICAgICAgICAgIC8vIGNhc2UgYW5kIGNhbGxzIGBsaXN0ZW5gIHRvIG9idGFpbiB0aGlzIElELlxuICAgICAgICAgICAgICAgICAgICBuID0gaS50YXJnZXRJZCwgdGhpcy5VZC5IbChuKSwgciA9IGkudmlldy5OZCgpLCBbIDMgLypicmVhayovICwgNCBdKSA6IFsgMyAvKmJyZWFrKi8gLCAxIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgNCAvKnlpZWxkKi8gLCB0aGlzLk5fLlF1KHQuZWUoKSkgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbyA9IGUuc2VudCgpLCBzID0gdGhpcy5VZC5IbChvLnRhcmdldElkKSwgbiA9IG8udGFyZ2V0SWQsIFsgNCAvKnlpZWxkKi8gLCB0aGlzLnNmKHQsIG4sIFwiY3VycmVudFwiID09PSBzKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHIgPSBlLnNlbnQoKSwgdGhpcy50ZiAmJiB0aGlzLiRkLmxpc3RlbihvKSwgZS5sYWJlbCA9IDQ7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovICwgciBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhIHZpZXcgZm9yIGEgcHJldmlvdXNseSB1bmtub3duIHF1ZXJ5IGFuZCBjb21wdXRlcyBpdHMgaW5pdGlhbFxuICAgICAqIHNuYXBzaG90LlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLnNmID0gZnVuY3Rpb24odCwgbiwgcikge1xuICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBpLCBvLCBzLCB1LCBhLCBoO1xuICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGUubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgNCAvKnlpZWxkKi8gLCB0aGlzLk5fLmp1KHQsIFxuICAgICAgICAgICAgICAgICAgICAvKiB1c2VQcmV2aW91c1Jlc3VsdHM9ICovICEwKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpID0gZS5zZW50KCksIG8gPSBuZXcgbGkodCwgaS5LdSksIHMgPSBvLlZkKGkuZG9jdW1lbnRzKSwgdSA9IFh0LmRzKG4sIHIgJiYgXCJPZmZsaW5lXCIgLyogT2ZmbGluZSAqLyAhPT0gdGhpcy5vbmxpbmVTdGF0ZSksIFxuICAgICAgICAgICAgICAgICAgICBhID0gby54bihzLCBcbiAgICAgICAgICAgICAgICAgICAgLyogdXBkYXRlTGltYm9Eb2N1bWVudHM9ICovIHRoaXMudGYsIHUpLCB0aGlzLmlmKG4sIGEuU2QpLCBoID0gbmV3IGRpKHQsIG4sIG8pLCBcbiAgICAgICAgICAgICAgICAgICAgWyAyIC8qcmV0dXJuKi8gLCAodGhpcy5qZC5zZXQodCwgaCksIHRoaXMuS2QuaGFzKG4pID8gdGhpcy5LZC5nZXQobikucHVzaCh0KSA6IHRoaXMuS2Quc2V0KG4sIFsgdCBdKSwgXG4gICAgICAgICAgICAgICAgICAgIGEuc25hcHNob3QpIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqIFN0b3BzIGxpc3RlbmluZyB0byB0aGUgcXVlcnkuICovIHQucHJvdG90eXBlLnJsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBuLCByLCBpID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgY2xlYW4gdXAgdGhlIHF1ZXJ5IHZpZXcgYW5kIHRhcmdldCBpZiB0aGlzIGlzIHRoZSBvbmx5IHF1ZXJ5IG1hcHBlZFxuICAgICAgICAgICAgICAgICAgICAvLyB0byB0aGUgdGFyZ2V0LlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lZihcInVubGlzdGVuKClcIiksIG4gPSB0aGlzLmpkLmdldCh0KSwgKHIgPSB0aGlzLktkLmdldChuLnRhcmdldElkKSkubGVuZ3RoID4gMSA/IFsgMiAvKnJldHVybiovICwgKHRoaXMuS2Quc2V0KG4udGFyZ2V0SWQsIHIuZmlsdGVyKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWUuaXNFcXVhbCh0KTtcbiAgICAgICAgICAgICAgICAgICAgfSkpKSwgdm9pZCB0aGlzLmpkLmRlbGV0ZSh0KSkgXSA6IHRoaXMudGYgPyAoXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gcmVtb3ZlIHRoZSBsb2NhbCBxdWVyeSB0YXJnZXQgZmlyc3QgdG8gYWxsb3cgdXMgdG8gdmVyaWZ5XG4gICAgICAgICAgICAgICAgICAgIC8vIHdoZXRoZXIgYW55IG90aGVyIGNsaWVudCBpcyBzdGlsbCBpbnRlcmVzdGVkIGluIHRoaXMgdGFyZ2V0LlxuICAgICAgICAgICAgICAgICAgICB0aGlzLlVkLkpsKG4udGFyZ2V0SWQpLCB0aGlzLlVkLldsKG4udGFyZ2V0SWQpID8gWyAzIC8qYnJlYWsqLyAsIDIgXSA6IFsgNCAvKnlpZWxkKi8gLCB0aGlzLk5fLld1KG4udGFyZ2V0SWQsIC8qa2VlcFBlcnNpc3RlZFRhcmdldERhdGE9Ki8gITEpLnRoZW4oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaS5VZC5abChuLnRhcmdldElkKSwgaS4kZC5ybChuLnRhcmdldElkKSwgaS5uZihuLnRhcmdldElkKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpLmNhdGNoKGVyKSBdKSA6IFsgMyAvKmJyZWFrKi8gLCAzIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgZS5zZW50KCksIGUubGFiZWwgPSAyO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDMgLypicmVhayovICwgNSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5mKG4udGFyZ2V0SWQpLCBbIDQgLyp5aWVsZCovICwgdGhpcy5OXy5XdShuLnRhcmdldElkLCBcbiAgICAgICAgICAgICAgICAgICAgLyprZWVwUGVyc2lzdGVkVGFyZ2V0RGF0YT0qLyAhMCkgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBlLnNlbnQoKSwgZS5sYWJlbCA9IDU7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogSW5pdGlhdGVzIHRoZSB3cml0ZSBvZiBsb2NhbCBtdXRhdGlvbiBiYXRjaCB3aGljaCBpbnZvbHZlcyBhZGRpbmcgdGhlXG4gICAgICogd3JpdGVzIHRvIHRoZSBtdXRhdGlvbiBxdWV1ZSwgbm90aWZ5aW5nIHRoZSByZW1vdGUgc3RvcmUgYWJvdXQgbmV3XG4gICAgICogbXV0YXRpb25zIGFuZCByYWlzaW5nIGV2ZW50cyBmb3IgYW55IGNoYW5nZXMgdGhpcyB3cml0ZSBjYXVzZWQuXG4gICAgICpcbiAgICAgKiBUaGUgcHJvbWlzZSByZXR1cm5lZCBieSB0aGlzIGNhbGwgaXMgcmVzb2x2ZWQgd2hlbiB0aGUgYWJvdmUgc3RlcHNcbiAgICAgKiBoYXZlIGNvbXBsZXRlZCwgKm5vdCogd2hlbiB0aGUgd3JpdGUgd2FzIGFja2VkIGJ5IHRoZSBiYWNrZW5kLiBUaGVcbiAgICAgKiB1c2VyQ2FsbGJhY2sgaXMgcmVzb2x2ZWQgb25jZSB0aGUgd3JpdGUgd2FzIGFja2VkL3JlamVjdGVkIGJ5IHRoZVxuICAgICAqIGJhY2tlbmQgKG9yIGZhaWxlZCBsb2NhbGx5IGZvciBhbnkgb3RoZXIgcmVhc29uKS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKHQsIG4pIHtcbiAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgciwgaSwgbztcbiAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWYoXCJ3cml0ZSgpXCIpLCBlLmxhYmVsID0gMTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS50cnlzLnB1c2goWyAxLCA1LCAsIDYgXSksIFsgNCAvKnlpZWxkKi8gLCB0aGlzLk5fLiR1KHQpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgPSBlLnNlbnQoKSwgdGhpcy5VZC5qbChyLmJhdGNoSWQpLCB0aGlzLnJmKHIuYmF0Y2hJZCwgbiksIFsgNCAvKnlpZWxkKi8gLCB0aGlzLmhmKHIuRG4pIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuc2VudCgpLCBbIDQgLyp5aWVsZCovICwgdGhpcy4kZC5lbCgpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuc2VudCgpLCBbIDMgLypicmVhayovICwgNiBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpID0gZS5zZW50KCksIG8gPSBRbihpLCBcIkZhaWxlZCB0byBwZXJzaXN0IHdyaXRlXCIpLCBuLnJlamVjdChvKSwgWyAzIC8qYnJlYWsqLyAsIDYgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBUYWtlcyBhbiB1cGRhdGVGdW5jdGlvbiBpbiB3aGljaCBhIHNldCBvZiByZWFkcyBhbmQgd3JpdGVzIGNhbiBiZSBwZXJmb3JtZWRcbiAgICAgKiBhdG9taWNhbGx5LiBJbiB0aGUgdXBkYXRlRnVuY3Rpb24sIHRoZSBjbGllbnQgY2FuIHJlYWQgYW5kIHdyaXRlIHZhbHVlc1xuICAgICAqIHVzaW5nIHRoZSBzdXBwbGllZCB0cmFuc2FjdGlvbiBvYmplY3QuIEFmdGVyIHRoZSB1cGRhdGVGdW5jdGlvbiwgYWxsXG4gICAgICogY2hhbmdlcyB3aWxsIGJlIGNvbW1pdHRlZC4gSWYgYSByZXRyeWFibGUgZXJyb3Igb2NjdXJzIChleDogc29tZSBvdGhlclxuICAgICAqIGNsaWVudCBoYXMgY2hhbmdlZCBhbnkgb2YgdGhlIGRhdGEgcmVmZXJlbmNlZCksIHRoZW4gdGhlIHVwZGF0ZUZ1bmN0aW9uXG4gICAgICogd2lsbCBiZSBjYWxsZWQgYWdhaW4gYWZ0ZXIgYSBiYWNrb2ZmLiBJZiB0aGUgdXBkYXRlRnVuY3Rpb24gc3RpbGwgZmFpbHNcbiAgICAgKiBhZnRlciBhbGwgcmV0cmllcywgdGhlbiB0aGUgdHJhbnNhY3Rpb24gd2lsbCBiZSByZWplY3RlZC5cbiAgICAgKlxuICAgICAqIFRoZSB0cmFuc2FjdGlvbiBvYmplY3QgcGFzc2VkIHRvIHRoZSB1cGRhdGVGdW5jdGlvbiBjb250YWlucyBtZXRob2RzIGZvclxuICAgICAqIGFjY2Vzc2luZyBkb2N1bWVudHMgYW5kIGNvbGxlY3Rpb25zLiBVbmxpa2Ugb3RoZXIgZGF0YXN0b3JlIGFjY2VzcywgZGF0YVxuICAgICAqIGFjY2Vzc2VkIHdpdGggdGhlIHRyYW5zYWN0aW9uIHdpbGwgbm90IHJlZmxlY3QgbG9jYWwgY2hhbmdlcyB0aGF0IGhhdmUgbm90XG4gICAgICogYmVlbiBjb21taXR0ZWQuIEZvciB0aGlzIHJlYXNvbiwgaXQgaXMgcmVxdWlyZWQgdGhhdCBhbGwgcmVhZHMgYXJlXG4gICAgICogcGVyZm9ybWVkIGJlZm9yZSBhbnkgd3JpdGVzLiBUcmFuc2FjdGlvbnMgbXVzdCBiZSBwZXJmb3JtZWQgd2hpbGUgb25saW5lLlxuICAgICAqXG4gICAgICogVGhlIERlZmVycmVkIGlucHV0IGlzIHJlc29sdmVkIHdoZW4gdGhlIHRyYW5zYWN0aW9uIGlzIGZ1bGx5IGNvbW1pdHRlZC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5ydW5UcmFuc2FjdGlvbiA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgbmV3IHBpKHQsIHRoaXMuJGQsIGUsIG4pLkxkKCk7XG4gICAgfSwgdC5wcm90b3R5cGUuTXUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBlLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIG4sIHIgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGUubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lZihcImFwcGx5UmVtb3RlRXZlbnQoKVwiKSwgZS5sYWJlbCA9IDE7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUudHJ5cy5wdXNoKFsgMSwgNCwgLCA2IF0pLCBbIDQgLyp5aWVsZCovICwgdGhpcy5OXy5NdSh0KSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuID0gZS5zZW50KCksIFxuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgYHJlY2VpdmVkRG9jdW1lbnRgIGFzIGFwcHJvcHJpYXRlIGZvciBhbnkgbGltYm8gdGFyZ2V0cy5cbiAgICAgICAgICAgICAgICAgICAgdC5hcy5mb3JFYWNoKChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHIuSGQuZ2V0KGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbiAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaW5jZSB0aGlzIGlzIGEgbGltYm8gcmVzb2x1dGlvbiBsb29rdXAsIGl0J3MgZm9yIGEgc2luZ2xlIGRvY3VtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgaXQgY291bGQgYmUgYWRkZWQsIG1vZGlmaWVkLCBvciByZW1vdmVkLCBidXQgbm90IGEgY29tYmluYXRpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICBtZSh0LlRzLnNpemUgKyB0LkVzLnNpemUgKyB0LklzLnNpemUgPD0gMSksIHQuVHMuc2l6ZSA+IDAgPyBuLnFkID0gITAgOiB0LkVzLnNpemUgPiAwID8gbWUobi5xZCkgOiB0LklzLnNpemUgPiAwICYmIChtZShuLnFkKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBuLnFkID0gITEpKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpLCBbIDQgLyp5aWVsZCovICwgdGhpcy5oZihuLCB0KSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBgcmVjZWl2ZWREb2N1bWVudGAgYXMgYXBwcm9wcmlhdGUgZm9yIGFueSBsaW1ibyB0YXJnZXRzLlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5zZW50KCksIFsgMyAvKmJyZWFrKi8gLCA2IF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgNCAvKnlpZWxkKi8gLCBlcihlLnNlbnQoKSkgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5zZW50KCksIFsgMyAvKmJyZWFrKi8gLCA2IF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQXBwbGllcyBhbiBPbmxpbmVTdGF0ZSBjaGFuZ2UgdG8gdGhlIHN5bmMgZW5naW5lIGFuZCBub3RpZmllcyBhbnkgdmlld3Mgb2ZcbiAgICAgKiB0aGUgY2hhbmdlLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLkRkID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB0aGlzLmVmKFwiYXBwbHlPbmxpbmVTdGF0ZUNoYW5nZSgpXCIpO1xuICAgICAgICB2YXIgbiA9IFtdO1xuICAgICAgICB0aGlzLmpkLmZvckVhY2goKGZ1bmN0aW9uKGUsIHIpIHtcbiAgICAgICAgICAgIHZhciBpID0gci52aWV3LkRkKHQpO1xuICAgICAgICAgICAgaS5zbmFwc2hvdCAmJiBuLnB1c2goaS5zbmFwc2hvdCk7XG4gICAgICAgIH0pKSwgdGhpcy5XZC5hZih0KSwgdGhpcy5XZC5pXyhuKSwgdGhpcy5vbmxpbmVTdGF0ZSA9IHQ7XG4gICAgfSwgdC5wcm90b3R5cGUuX2wgPSBmdW5jdGlvbih0LCBuKSB7XG4gICAgICAgIHJldHVybiBlLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHIsIGksIG8sIHMsIHUsIGEgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGUubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWYoXCJyZWplY3RMaXN0ZW5zKClcIiksIFxuICAgICAgICAgICAgICAgICAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLXRhYiBvbmx5LlxuICAgICAgICAgICAgICAgICAgICB0aGlzLlVkLnRkKHQsIFwicmVqZWN0ZWRcIiwgbiksIHIgPSB0aGlzLkhkLmdldCh0KSwgKGkgPSByICYmIHIua2V5KSA/IChvID0gKG8gPSBuZXcgTHQoXy5OKSkuQWUoaSwgbmV3IHZ0KGksIGcubWluKCkpKSwgXG4gICAgICAgICAgICAgICAgICAgIHMgPSBXdCgpLmFkZChpKSwgdSA9IG5ldyBIdChnLm1pbigpLCBcbiAgICAgICAgICAgICAgICAgICAgLyogdGFyZ2V0Q2hhbmdlcz0gKi8gbmV3IE1hcCwgXG4gICAgICAgICAgICAgICAgICAgIC8qIHRhcmdldE1pc21hdGNoZXM9ICovIG5ldyBQdChiZSksIG8sIHMpLCBbIDQgLyp5aWVsZCovICwgdGhpcy5NdSh1KSBdKSA6IFsgMyAvKmJyZWFrKi8gLCAyIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuc2VudCgpLCBcbiAgICAgICAgICAgICAgICAgICAgLy8gU2luY2UgdGhpcyBxdWVyeSBmYWlsZWQsIHdlIHdvbid0IHdhbnQgdG8gbWFudWFsbHkgdW5saXN0ZW4gdG8gaXQuXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIG9ubHkgcmVtb3ZlIGl0IGZyb20gYm9va2tlZXBpbmcgYWZ0ZXIgd2Ugc3VjY2Vzc2Z1bGx5IGFwcGxpZWQgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW90ZUV2ZW50LiBJZiBgYXBwbHlSZW1vdGVFdmVudCgpYCB0aHJvd3MsIHdlIHdhbnQgdG8gcmUtbGlzdGVuIHRvXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgcXVlcnkgd2hlbiB0aGUgUmVtb3RlU3RvcmUgcmVzdGFydHMgdGhlIFdhdGNoIHN0cmVhbSwgd2hpY2ggc2hvdWxkXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlLXRyaWdnZXIgdGhlIHRhcmdldCBmYWlsdXJlLlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnpkID0gdGhpcy56ZC5yZW1vdmUoaSksIHRoaXMuSGQuZGVsZXRlKHQpLCB0aGlzLnVmKCksIFsgMyAvKmJyZWFrKi8gLCA0IF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgNCAvKnlpZWxkKi8gLCB0aGlzLk5fLld1KHQsIC8qIGtlZXBQZXJzaXN0ZWRUYXJnZXREYXRhICovICExKS50aGVuKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhLm5mKHQsIG4pO1xuICAgICAgICAgICAgICAgICAgICB9KSkuY2F0Y2goZXIpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgZS5zZW50KCksIGUubGFiZWwgPSA0O1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLklsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBuLCByO1xuICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGUubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lZihcImFwcGx5U3VjY2Vzc2Z1bFdyaXRlKClcIiksIG4gPSB0LmJhdGNoLmJhdGNoSWQsIFxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgbG9jYWwgc3RvcmUgbWF5IG9yIG1heSBub3QgYmUgYWJsZSB0byBhcHBseSB0aGUgd3JpdGUgcmVzdWx0IGFuZFxuICAgICAgICAgICAgICAgICAgICAvLyByYWlzZSBldmVudHMgaW1tZWRpYXRlbHkgKGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSB3YXRjaGVyIGlzIGNhdWdodFxuICAgICAgICAgICAgICAgICAgICAvLyB1cCksIHNvIHdlIHJhaXNlIHVzZXIgY2FsbGJhY2tzIGZpcnN0IHNvIHRoYXQgdGhleSBjb25zaXN0ZW50bHkgaGFwcGVuXG4gICAgICAgICAgICAgICAgICAgIC8vIGJlZm9yZSBsaXN0ZW4gZXZlbnRzLlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNmKG4sIC8qZXJyb3I9Ki8gbnVsbCksIHRoaXMuX2YobiksIGUubGFiZWwgPSAxO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnRyeXMucHVzaChbIDEsIDQsICwgNiBdKSwgWyA0IC8qeWllbGQqLyAsIHRoaXMuTl8uem8odCkgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gciA9IGUuc2VudCgpLCB0aGlzLlVkLkdsKG4sIFwiYWNrbm93bGVkZ2VkXCIpLCBbIDQgLyp5aWVsZCovICwgdGhpcy5oZihyKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNlbnQoKSwgWyAzIC8qYnJlYWsqLyAsIDYgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyA0IC8qeWllbGQqLyAsIGVyKGUuc2VudCgpKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNlbnQoKSwgWyAzIC8qYnJlYWsqLyAsIDYgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5BbCA9IGZ1bmN0aW9uKHQsIG4pIHtcbiAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgcjtcbiAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWYoXCJyZWplY3RGYWlsZWRXcml0ZSgpXCIpLCBcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGxvY2FsIHN0b3JlIG1heSBvciBtYXkgbm90IGJlIGFibGUgdG8gYXBwbHkgdGhlIHdyaXRlIHJlc3VsdCBhbmRcbiAgICAgICAgICAgICAgICAgICAgLy8gcmFpc2UgZXZlbnRzIGltbWVkaWF0ZWx5IChkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgd2F0Y2hlciBpcyBjYXVnaHQgdXApLFxuICAgICAgICAgICAgICAgICAgICAvLyBzbyB3ZSByYWlzZSB1c2VyIGNhbGxiYWNrcyBmaXJzdCBzbyB0aGF0IHRoZXkgY29uc2lzdGVudGx5IGhhcHBlbiBiZWZvcmVcbiAgICAgICAgICAgICAgICAgICAgLy8gbGlzdGVuIGV2ZW50cy5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jZih0LCBuKSwgdGhpcy5fZih0KSwgZS5sYWJlbCA9IDE7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUudHJ5cy5wdXNoKFsgMSwgNCwgLCA2IF0pLCBbIDQgLyp5aWVsZCovICwgdGhpcy5OXy5MdSh0KSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByID0gZS5zZW50KCksIHRoaXMuVWQuR2wodCwgXCJyZWplY3RlZFwiLCBuKSwgWyA0IC8qeWllbGQqLyAsIHRoaXMuaGYocikgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5zZW50KCksIFsgMyAvKmJyZWFrKi8gLCA2IF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgNCAvKnlpZWxkKi8gLCBlcihlLnNlbnQoKSkgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5zZW50KCksIFsgMyAvKmJyZWFrKi8gLCA2IF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGEgdXNlciBjYWxsYmFjayB0aGF0IHJlc29sdmVzIHdoZW4gYWxsIHBlbmRpbmcgbXV0YXRpb25zIGF0IHRoZSBtb21lbnQgb2YgY2FsbGluZ1xuICAgICAqIGFyZSBhY2tub3dsZWRnZWQgLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmxmID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBuLCByLCBpLCBvO1xuICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGUubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZC5xXygpIHx8IGRlKFwiU3luY0VuZ2luZVwiLCBcIlRoZSBuZXR3b3JrIGlzIGRpc2FibGVkLiBUaGUgdGFzayByZXR1cm5lZCBieSAnYXdhaXRQZW5kaW5nV3JpdGVzKCknIHdpbGwgbm90IGNvbXBsZXRlIHVudGlsIHRoZSBuZXR3b3JrIGlzIGVuYWJsZWQuXCIpLCBcbiAgICAgICAgICAgICAgICAgICAgZS5sYWJlbCA9IDE7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUudHJ5cy5wdXNoKFsgMSwgMywgLCA0IF0pLCBbIDQgLyp5aWVsZCovICwgdGhpcy5OXy5zYSgpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xID09PSAobiA9IGUuc2VudCgpKSA/IFsgMiAvKnJldHVybiovICwgdm9pZCB0LnJlc29sdmUoKSBdIDogKChyID0gdGhpcy5YZC5nZXQobikgfHwgW10pLnB1c2godCksIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLlhkLnNldChuLCByKSwgWyAzIC8qYnJlYWsqLyAsIDQgXSk7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPSBlLnNlbnQoKSwgbyA9IFFuKGksIFwiSW5pdGlhbGl6YXRpb24gb2Ygd2FpdEZvclBlbmRpbmdXcml0ZXMoKSBvcGVyYXRpb24gZmFpbGVkXCIpLCBcbiAgICAgICAgICAgICAgICAgICAgdC5yZWplY3QobyksIFsgMyAvKmJyZWFrKi8gLCA0IF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcnMgdGhlIGNhbGxiYWNrcyB0aGF0IGFyZSB3YWl0aW5nIGZvciB0aGlzIGJhdGNoIGlkIHRvIGdldCBhY2tub3dsZWRnZWQgYnkgc2VydmVyLFxuICAgICAqIGlmIHRoZXJlIGFyZSBhbnkuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuX2YgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICh0aGlzLlhkLmdldCh0KSB8fCBbXSkuZm9yRWFjaCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdC5yZXNvbHZlKCk7XG4gICAgICAgIH0pKSwgdGhpcy5YZC5kZWxldGUodCk7XG4gICAgfSwgXG4gICAgLyoqIFJlamVjdCBhbGwgb3V0c3RhbmRpbmcgY2FsbGJhY2tzIHdhaXRpbmcgZm9yIHBlbmRpbmcgd3JpdGVzIHRvIGNvbXBsZXRlLiAqLyB0LnByb3RvdHlwZS5kZiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5YZC5mb3JFYWNoKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLmZvckVhY2goKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBlLnJlamVjdChuZXcgYyhoLkNBTkNFTExFRCwgdCkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSksIHRoaXMuWGQuY2xlYXIoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5yZiA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLkpkW3RoaXMuY3VycmVudFVzZXIucygpXTtcbiAgICAgICAgbiB8fCAobiA9IG5ldyBMdChiZSkpLCBuID0gbi5BZSh0LCBlKSwgdGhpcy5KZFt0aGlzLmN1cnJlbnRVc2VyLnMoKV0gPSBuO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJlc29sdmVzIG9yIHJlamVjdHMgdGhlIHVzZXIgY2FsbGJhY2sgZm9yIHRoZSBnaXZlbiBiYXRjaCBhbmQgdGhlbiBkaXNjYXJkc1xuICAgICAqIGl0LlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmNmID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXMuSmRbdGhpcy5jdXJyZW50VXNlci5zKCldO1xuICAgICAgICAvLyBOT1RFOiBNdXRhdGlvbnMgcmVzdG9yZWQgZnJvbSBwZXJzaXN0ZW5jZSB3b24ndCBoYXZlIGNhbGxiYWNrcywgc28gaXQnc1xuICAgICAgICAvLyBva2F5IGZvciB0aGVyZSB0byBiZSBubyBjYWxsYmFjayBmb3IgdGhpcyBJRC5cbiAgICAgICAgICAgICAgICBpZiAobikge1xuICAgICAgICAgICAgdmFyIHIgPSBuLmdldCh0KTtcbiAgICAgICAgICAgIHIgJiYgKGUgPyByLnJlamVjdChlKSA6IHIucmVzb2x2ZSgpLCBuID0gbi5yZW1vdmUodCkpLCB0aGlzLkpkW3RoaXMuY3VycmVudFVzZXIucygpXSA9IG47XG4gICAgICAgIH1cbiAgICB9LCB0LnByb3RvdHlwZS5uZiA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICB2b2lkIDAgPT09IGUgJiYgKGUgPSBudWxsKSwgdGhpcy5VZC5KbCh0KTtcbiAgICAgICAgZm9yICh2YXIgciA9IDAsIGkgPSB0aGlzLktkLmdldCh0KTsgciA8IGkubGVuZ3RoOyByKyspIHtcbiAgICAgICAgICAgIHZhciBvID0gaVtyXTtcbiAgICAgICAgICAgIHRoaXMuamQuZGVsZXRlKG8pLCBlICYmIHRoaXMuV2QuZmYobywgZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5LZC5kZWxldGUodCksIHRoaXMudGYgJiYgdGhpcy5ZZC5uYyh0KS5mb3JFYWNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBuLllkLkNoKHQpIHx8IFxuICAgICAgICAgICAgLy8gV2UgcmVtb3ZlZCB0aGUgbGFzdCByZWZlcmVuY2UgZm9yIHRoaXMga2V5XG4gICAgICAgICAgICBuLlRmKHQpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuVGYgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIC8vIEl0J3MgcG9zc2libGUgdGhhdCB0aGUgdGFyZ2V0IGFscmVhZHkgZ290IHJlbW92ZWQgYmVjYXVzZSB0aGUgcXVlcnkgZmFpbGVkLiBJbiB0aGF0IGNhc2UsXG4gICAgICAgIC8vIHRoZSBrZXkgd29uJ3QgZXhpc3QgaW4gYGxpbWJvVGFyZ2V0c0J5S2V5YC4gT25seSBkbyB0aGUgY2xlYW51cCBpZiB3ZSBzdGlsbCBoYXZlIHRoZSB0YXJnZXQuXG4gICAgICAgIHZhciBlID0gdGhpcy56ZC5nZXQodCk7XG4gICAgICAgIG51bGwgIT09IGUgJiYgKHRoaXMuJGQucmwoZSksIHRoaXMuemQgPSB0aGlzLnpkLnJlbW92ZSh0KSwgdGhpcy5IZC5kZWxldGUoZSksIHRoaXMudWYoKSk7XG4gICAgfSwgdC5wcm90b3R5cGUuaWYgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGZvciAodmFyIG4gPSAwLCByID0gZTsgbiA8IHIubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgICAgIHZhciBpID0gcltuXTtcbiAgICAgICAgICAgIGkgaW5zdGFuY2VvZiBjaSA/ICh0aGlzLllkLnloKGkua2V5LCB0KSwgdGhpcy5FZihpKSkgOiBpIGluc3RhbmNlb2YgZmkgPyAoZGUoXCJTeW5jRW5naW5lXCIsIFwiRG9jdW1lbnQgbm8gbG9uZ2VyIGluIGxpbWJvOiBcIiArIGkua2V5KSwgXG4gICAgICAgICAgICB0aGlzLllkLnZoKGkua2V5LCB0KSwgdGhpcy5ZZC5DaChpLmtleSkgfHwgXG4gICAgICAgICAgICAvLyBXZSByZW1vdmVkIHRoZSBsYXN0IHJlZmVyZW5jZSBmb3IgdGhpcyBrZXlcbiAgICAgICAgICAgIHRoaXMuVGYoaS5rZXkpKSA6IGdlKCk7XG4gICAgICAgIH1cbiAgICB9LCB0LnByb3RvdHlwZS5FZiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0LmtleTtcbiAgICAgICAgdGhpcy56ZC5nZXQoZSkgfHwgKGRlKFwiU3luY0VuZ2luZVwiLCBcIk5ldyBkb2N1bWVudCBpbiBsaW1ibzogXCIgKyBlKSwgdGhpcy5HZC5wdXNoKGUpLCBcbiAgICAgICAgdGhpcy51ZigpKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBTdGFydHMgbGlzdGVucyBmb3IgZG9jdW1lbnRzIGluIGxpbWJvIHRoYXQgYXJlIGVucXVldWVkIGZvciByZXNvbHV0aW9uLFxuICAgICAqIHN1YmplY3QgdG8gYSBtYXhpbXVtIG51bWJlciBvZiBjb25jdXJyZW50IHJlc29sdXRpb25zLlxuICAgICAqXG4gICAgICogV2l0aG91dCBib3VuZGluZyB0aGUgbnVtYmVyIG9mIGNvbmN1cnJlbnQgcmVzb2x1dGlvbnMsIHRoZSBzZXJ2ZXIgY2FuIGZhaWxcbiAgICAgKiB3aXRoIFwicmVzb3VyY2UgZXhoYXVzdGVkXCIgZXJyb3JzIHdoaWNoIGNhbiBsZWFkIHRvIHBhdGhvbG9naWNhbCBjbGllbnRcbiAgICAgKiBiZWhhdmlvciBhcyBzZWVuIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9maXJlYmFzZS9maXJlYmFzZS1qcy1zZGsvaXNzdWVzLzI2ODMuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUudWYgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yICg7dGhpcy5HZC5sZW5ndGggPiAwICYmIHRoaXMuemQuc2l6ZSA8IHRoaXMuUWQ7ICkge1xuICAgICAgICAgICAgdmFyIHQgPSB0aGlzLkdkLnNoaWZ0KCksIGUgPSB0aGlzLlpkLm5leHQoKTtcbiAgICAgICAgICAgIHRoaXMuSGQuc2V0KGUsIG5ldyB5aSh0KSksIHRoaXMuemQgPSB0aGlzLnpkLkFlKHQsIGUpLCB0aGlzLiRkLmxpc3RlbihuZXcgRHQod3QuV3QodC5wYXRoKS5lZSgpLCBlLCAyIC8qIExpbWJvUmVzb2x1dGlvbiAqLyAsIFBlLmRyKSk7XG4gICAgICAgIH1cbiAgICB9LCBcbiAgICAvLyBWaXNpYmxlIGZvciB0ZXN0aW5nXG4gICAgdC5wcm90b3R5cGUuSWYgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuemQ7XG4gICAgfSwgXG4gICAgLy8gVmlzaWJsZSBmb3IgdGVzdGluZ1xuICAgIHQucHJvdG90eXBlLndmID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkdkO1xuICAgIH0sIHQucHJvdG90eXBlLmhmID0gZnVuY3Rpb24odCwgbikge1xuICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciByLCBpLCBvLCBzID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByID0gW10sIGkgPSBbXSwgbyA9IFtdLCB0aGlzLmpkLmZvckVhY2goKGZ1bmN0aW9uKGUsIHUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG8ucHVzaChQcm9taXNlLnJlc29sdmUoKS50aGVuKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHUudmlldy5WZCh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS55ZCA/IHMuTl8uanUodS5xdWVyeSwgLyogdXNlUHJldmlvdXNSZXN1bHRzPSAqLyAhMSkudGhlbigoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHQuZG9jdW1lbnRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdS52aWV3LlZkKG4sIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSA6IGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHF1ZXJ5IGhhcyBhIGxpbWl0IGFuZCBzb21lIGRvY3Mgd2VyZSByZW1vdmVkLCBzbyB3ZSBuZWVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gcmUtcnVuIHRoZSBxdWVyeSBhZ2FpbnN0IHRoZSBsb2NhbCBzdG9yZSB0byBtYWtlIHN1cmUgd2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkaWRuJ3QgbG9zZSBhbnkgZ29vZCBkb2NzIHRoYXQgaGFkIGJlZW4gcGFzdCB0aGUgbGltaXQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkudGhlbigoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gbiAmJiBuLmFzLmdldCh1LnRhcmdldElkKSwgbyA9IHUudmlldy54bih0LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiB1cGRhdGVMaW1ib0RvY3VtZW50cz0gKi8gcy50ZiwgZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMuaWYodS50YXJnZXRJZCwgby5TZCksIG8uc25hcHNob3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy50ZiAmJiBzLlVkLnRkKHUudGFyZ2V0SWQsIG8uc25hcHNob3QuZnJvbUNhY2hlID8gXCJub3QtY3VycmVudFwiIDogXCJjdXJyZW50XCIpLCByLnB1c2goby5zbmFwc2hvdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gVmUuYXIodS50YXJnZXRJZCwgby5zbmFwc2hvdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkucHVzaChhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSkpO1xuICAgICAgICAgICAgICAgICAgICB9KSksIFsgNCAvKnlpZWxkKi8gLCBQcm9taXNlLmFsbChvKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNlbnQoKSwgdGhpcy5XZC5pXyhyKSwgWyA0IC8qeWllbGQqLyAsIHRoaXMuTl8uQnUoaSkgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5zZW50KCksIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuZWYgPSBmdW5jdGlvbih0KSB7fSwgdC5wcm90b3R5cGUuUGwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBlLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIG47XG4gICAgICAgICAgICByZXR1cm4gZS5fX2dlbmVyYXRvcih0aGlzLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50VXNlci5pc0VxdWFsKHQpID8gWyAzIC8qYnJlYWsqLyAsIDMgXSA6IFsgNCAvKnlpZWxkKi8gLCB0aGlzLk5fLkR1KHQpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4gPSBlLnNlbnQoKSwgdGhpcy5jdXJyZW50VXNlciA9IHQsIFxuICAgICAgICAgICAgICAgICAgICAvLyBGYWlscyB0YXNrcyB3YWl0aW5nIGZvciBwZW5kaW5nIHdyaXRlcyByZXF1ZXN0ZWQgYnkgcHJldmlvdXMgdXNlci5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZihcIid3YWl0Rm9yUGVuZGluZ1dyaXRlcycgcHJvbWlzZSBpcyByZWplY3RlZCBkdWUgdG8gYSB1c2VyIGNoYW5nZS5cIiksIFxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPKGIvMTE0MjI2NDE3KTogQ29uc2lkZXIgY2FsbGluZyB0aGlzIG9ubHkgaW4gdGhlIHByaW1hcnkgdGFiLlxuICAgICAgICAgICAgICAgICAgICB0aGlzLlVkLkR1KHQsIG4uRnUsIG4uTnUpLCBbIDQgLyp5aWVsZCovICwgdGhpcy5oZihuLkN1KSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGUuc2VudCgpLCBlLmxhYmVsID0gMztcblxuICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyA0IC8qeWllbGQqLyAsIHRoaXMuJGQuUGwoKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNlbnQoKSwgWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5lbmFibGVOZXR3b3JrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRkLmVuYWJsZU5ldHdvcmsoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5kaXNhYmxlTmV0d29yayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kZC5kaXNhYmxlTmV0d29yaygpO1xuICAgIH0sIHQucHJvdG90eXBlLmVpID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMuSGQuZ2V0KHQpO1xuICAgICAgICBpZiAoZSAmJiBlLnFkKSByZXR1cm4gV3QoKS5hZGQoZS5rZXkpO1xuICAgICAgICB2YXIgbiA9IFd0KCksIHIgPSB0aGlzLktkLmdldCh0KTtcbiAgICAgICAgaWYgKCFyKSByZXR1cm4gbjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG8gPSByOyBpIDwgby5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHMgPSBvW2ldLCB1ID0gdGhpcy5qZC5nZXQocyk7XG4gICAgICAgICAgICBuID0gbi5IZSh1LnZpZXcuUGQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuO1xuICAgIH0sIHQ7XG59KCksIGdpID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbih0KSB7XG4gICAgZnVuY3Rpb24gbihlLCBuLCByLCBpLCBvKSB7XG4gICAgICAgIHZhciBzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIChzID0gdC5jYWxsKHRoaXMsIGUsIG4sIHIsIGksIG8pIHx8IHRoaXMpLk5fID0gZSwgXG4gICAgICAgIC8vIFRoZSBwcmltYXJ5IHN0YXRlIGlzIHNldCB0byBgdHJ1ZWAgb3IgYGZhbHNlYCBpbW1lZGlhdGVseSBhZnRlciBGaXJlc3RvcmVcbiAgICAgICAgLy8gc3RhcnR1cC4gSW4gdGhlIGludGVyaW0sIGEgY2xpZW50IHNob3VsZCBvbmx5IGJlIGNvbnNpZGVyZWQgcHJpbWFyeSBpZlxuICAgICAgICAvLyBgaXNQcmltYXJ5YCBpcyB0cnVlLlxuICAgICAgICBzLlJmID0gdm9pZCAwLCBzO1xuICAgIH1cbiAgICByZXR1cm4gZS5fX2V4dGVuZHMobiwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLnByb3RvdHlwZSwgXCJ0ZlwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gITAgPT09IHRoaXMuUmY7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIG4ucHJvdG90eXBlLmVuYWJsZU5ldHdvcmsgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuTl8uYW8oITApLCB0LnByb3RvdHlwZS5lbmFibGVOZXR3b3JrLmNhbGwodGhpcyk7XG4gICAgfSwgbi5wcm90b3R5cGUuZGlzYWJsZU5ldHdvcmsgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuTl8uYW8oITEpLCB0LnByb3RvdHlwZS5kaXNhYmxlTmV0d29yay5jYWxsKHRoaXMpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJlY29uY2lsZSB0aGUgbGlzdCBvZiBzeW5jZWQgZG9jdW1lbnRzIGluIGFuIGV4aXN0aW5nIHZpZXcgd2l0aCB0aG9zZVxuICAgICAqIGZyb20gcGVyc2lzdGVuY2UuXG4gICAgICovXG4gICAgbi5wcm90b3R5cGUuQWYgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBlLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIG4sIHI7XG4gICAgICAgICAgICByZXR1cm4gZS5fX2dlbmVyYXRvcih0aGlzLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyA0IC8qeWllbGQqLyAsIHRoaXMuTl8uanUodC5xdWVyeSwgXG4gICAgICAgICAgICAgICAgICAgIC8qIHVzZVByZXZpb3VzUmVzdWx0cz0gKi8gITApIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4gPSBlLnNlbnQoKSwgciA9IHQudmlldy5GZChuKSwgWyAyIC8qcmV0dXJuKi8gLCAodGhpcy5SZiAmJiB0aGlzLmlmKHQudGFyZ2V0SWQsIHIuU2QpLCBcbiAgICAgICAgICAgICAgICAgICAgcikgXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBuLnByb3RvdHlwZS5EZCA9IGZ1bmN0aW9uKGUsIG4pIHtcbiAgICAgICAgLy8gSWYgd2UgYXJlIHRoZSBwcmltYXJ5IGNsaWVudCwgdGhlIG9ubGluZSBzdGF0ZSBvZiBhbGwgY2xpZW50cyBvbmx5XG4gICAgICAgIC8vIGRlcGVuZHMgb24gdGhlIG9ubGluZSBzdGF0ZSBvZiB0aGUgbG9jYWwgUmVtb3RlU3RvcmUuXG4gICAgICAgIHRoaXMudGYgJiYgMCAvKiBSZW1vdGVTdG9yZSAqLyA9PT0gbiAmJiAodC5wcm90b3R5cGUuRGQuY2FsbCh0aGlzLCBlLCBuKSwgdGhpcy5VZC5zZChlKSksIFxuICAgICAgICAvLyBJZiB3ZSBhcmUgdGhlIHNlY29uZGFyeSBjbGllbnQsIHdlIGV4cGxpY2l0bHkgaWdub3JlIHRoZSByZW1vdGUgc3RvcmUnc1xuICAgICAgICAvLyBvbmxpbmUgc3RhdGUgKHRoZSBsb2NhbCBjbGllbnQgbWF5IGdvIG9mZmxpbmUsIGV2ZW4gdGhvdWdoIHRoZSBwcmltYXJ5XG4gICAgICAgIC8vIHRhYiByZW1haW5zIG9ubGluZSkgYW5kIG9ubHkgYXBwbHkgdGhlIHByaW1hcnkgdGFiJ3Mgb25saW5lIHN0YXRlIGZyb21cbiAgICAgICAgLy8gU2hhcmVkQ2xpZW50U3RhdGUuXG4gICAgICAgIHRoaXMudGYgfHwgMSAvKiBTaGFyZWRDbGllbnRTdGF0ZSAqLyAhPT0gbiB8fCB0LnByb3RvdHlwZS5EZC5jYWxsKHRoaXMsIGUsIG4pO1xuICAgIH0sIG4ucHJvdG90eXBlLmRkID0gZnVuY3Rpb24odCwgbiwgcikge1xuICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGUubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWYoXCJhcHBseUJhdGNoU3RhdGUoKVwiKSwgWyA0IC8qeWllbGQqLyAsIHRoaXMuTl8uenUodCkgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbCA9PT0gKGkgPSBlLnNlbnQoKSkgPyBbIDMgLypicmVhayovICwgNiBdIDogXCJwZW5kaW5nXCIgIT09IG4gPyBbIDMgLypicmVhayovICwgMyBdIDogWyA0IC8qeWllbGQqLyAsIHRoaXMuJGQuZWwoKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIGFyZSB0aGUgcHJpbWFyeSBjbGllbnQsIHdlIG5lZWQgdG8gc2VuZCB0aGlzIHdyaXRlIHRvIHRoZVxuICAgICAgICAgICAgICAgICAgICAvLyBiYWNrZW5kLiBTZWNvbmRhcnkgY2xpZW50cyB3aWxsIGlnbm9yZSB0aGVzZSB3cml0ZXMgc2luY2UgdGhlaXIgcmVtb3RlXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbm5lY3Rpb24gaXMgZGlzYWJsZWQuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNlbnQoKSwgWyAzIC8qYnJlYWsqLyAsIDQgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBcImFja25vd2xlZGdlZFwiID09PSBuIHx8IFwicmVqZWN0ZWRcIiA9PT0gbiA/IChcbiAgICAgICAgICAgICAgICAgICAgLy8gTk9URTogQm90aCB0aGVzZSBtZXRob2RzIGFyZSBuby1vcHMgZm9yIGJhdGNoZXMgdGhhdCBvcmlnaW5hdGVkIGZyb21cbiAgICAgICAgICAgICAgICAgICAgLy8gb3RoZXIgY2xpZW50cy5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jZih0LCByIHx8IG51bGwpLCB0aGlzLk5fLkh1KHQpKSA6IGdlKCksIGUubGFiZWwgPSA0O1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDQgLyp5aWVsZCovICwgdGhpcy5oZihpKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNlbnQoKSwgWyAzIC8qYnJlYWsqLyAsIDcgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAvLyBBIHRocm90dGxlZCB0YWIgbWF5IG5vdCBoYXZlIHNlZW4gdGhlIG11dGF0aW9uIGJlZm9yZSBpdCB3YXMgY29tcGxldGVkXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCByZW1vdmVkIGZyb20gdGhlIG11dGF0aW9uIHF1ZXVlLCBpbiB3aGljaCBjYXNlIHdlIHdvbid0IGhhdmUgY2FjaGVkXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBhZmZlY3RlZCBkb2N1bWVudHMuIEluIHRoaXMgY2FzZSB3ZSBjYW4gc2FmZWx5IGlnbm9yZSB0aGUgdXBkYXRlXG4gICAgICAgICAgICAgICAgICAgIC8vIHNpbmNlIHRoYXQgbWVhbnMgd2UgZGlkbid0IGFwcGx5IHRoZSBtdXRhdGlvbiBsb2NhbGx5IGF0IGFsbCAoaWYgd2VcbiAgICAgICAgICAgICAgICAgICAgLy8gaGFkLCB3ZSB3b3VsZCBoYXZlIGNhY2hlZCB0aGUgYWZmZWN0ZWQgZG9jdW1lbnRzKSwgYW5kIHNvIHdlIHdpbGwganVzdFxuICAgICAgICAgICAgICAgICAgICAvLyBzZWUgYW55IHJlc3VsdGluZyBkb2N1bWVudCBjaGFuZ2VzIHZpYSBub3JtYWwgcmVtb3RlIGRvY3VtZW50IHVwZGF0ZXNcbiAgICAgICAgICAgICAgICAgICAgLy8gYXMgYXBwbGljYWJsZS5cbiAgICAgICAgICAgICAgICAgICAgZGUoXCJTeW5jRW5naW5lXCIsIFwiQ2Fubm90IGFwcGx5IG11dGF0aW9uIGJhdGNoIHdpdGggaWQ6IFwiICsgdCksIGUubGFiZWwgPSA3O1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIG4ucHJvdG90eXBlLlZsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBuLCByLCBpLCBvLCBzLCB1LCBhLCBoID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhMCAhPT0gdCB8fCAhMCA9PT0gdGhpcy5SZiA/IFsgMyAvKmJyZWFrKi8gLCAzIF0gOiAobiA9IHRoaXMuVWQuVWwoKSwgWyA0IC8qeWllbGQqLyAsIHRoaXMubWYobi5XKCksIFxuICAgICAgICAgICAgICAgICAgICAvKnRyYW5zaXRpb25Ub1ByaW1hcnk9Ki8gITApIF0pO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByID0gZS5zZW50KCksIHRoaXMuUmYgPSAhMCwgWyA0IC8qeWllbGQqLyAsIHRoaXMuJGQuVmwoITApIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgZm9yIChlLnNlbnQoKSwgaSA9IDAsIG8gPSByOyBpIDwgby5sZW5ndGg7IGkrKykgcyA9IG9baV0sIHRoaXMuJGQubGlzdGVuKHMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAzIC8qYnJlYWsqLyAsIDcgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gITEgIT09IHQgfHwgITEgPT09IHRoaXMuUmYgPyBbIDMgLypicmVhayovICwgNyBdIDogKHUgPSBbXSwgYSA9IFByb21pc2UucmVzb2x2ZSgpLCBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5LZC5mb3JFYWNoKChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoLlVkLlhsKGUpID8gdS5wdXNoKGUpIDogYSA9IGEudGhlbigoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGgubmYoZSksIGguTl8uV3UoZSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyprZWVwUGVyc2lzdGVkVGFyZ2V0RGF0YT0qLyAhMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksIGguJGQucmwoZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKSwgWyA0IC8qeWllbGQqLyAsIGEgXSk7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuc2VudCgpLCBbIDQgLyp5aWVsZCovICwgdGhpcy5tZih1LCBcbiAgICAgICAgICAgICAgICAgICAgLyp0cmFuc2l0aW9uVG9QcmltYXJ5PSovICExKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNlbnQoKSwgdGhpcy5QZigpLCB0aGlzLlJmID0gITEsIFsgNCAvKnlpZWxkKi8gLCB0aGlzLiRkLlZsKCExKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIGUuc2VudCgpLCBlLmxhYmVsID0gNztcblxuICAgICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBuLnByb3RvdHlwZS5QZiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgIHRoaXMuSGQuZm9yRWFjaCgoZnVuY3Rpb24oZSwgbikge1xuICAgICAgICAgICAgdC4kZC5ybChuKTtcbiAgICAgICAgfSkpLCB0aGlzLllkLnJjKCksIHRoaXMuSGQgPSBuZXcgTWFwLCB0aGlzLnpkID0gbmV3IEx0KF8uTik7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmVjb25jaWxlIHRoZSBxdWVyeSB2aWV3cyBvZiB0aGUgcHJvdmlkZWQgcXVlcnkgdGFyZ2V0cyB3aXRoIHRoZSBzdGF0ZSBmcm9tXG4gICAgICogcGVyc2lzdGVuY2UuIFJhaXNlcyBzbmFwc2hvdHMgZm9yIGFueSBjaGFuZ2VzIHRoYXQgYWZmZWN0IHRoZSBsb2NhbFxuICAgICAqIGNsaWVudCBhbmQgcmV0dXJucyB0aGUgdXBkYXRlZCBzdGF0ZSBvZiBhbGwgdGFyZ2V0J3MgcXVlcnkgZGF0YS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0YXJnZXRzIHRoZSBsaXN0IG9mIHRhcmdldHMgd2l0aCB2aWV3cyB0aGF0IG5lZWQgdG8gYmUgcmVjb21wdXRlZFxuICAgICAqIEBwYXJhbSB0cmFuc2l0aW9uVG9QcmltYXJ5IGB0cnVlYCBpZmYgdGhlIHRhYiB0cmFuc2l0aW9ucyBmcm9tIGEgc2Vjb25kYXJ5XG4gICAgICogdGFiIHRvIGEgcHJpbWFyeSB0YWJcbiAgICAgKi9cbiAgICBuLnByb3RvdHlwZS5tZiA9IGZ1bmN0aW9uKHQsIG4pIHtcbiAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbiwgciwgaSwgbywgcywgdSwgYSwgaCwgYywgZiwgbCwgcCwgZDtcbiAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIG4gPSBbXSwgciA9IFtdLCBpID0gMCwgbyA9IHQsIGUubGFiZWwgPSAxO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpIDwgby5sZW5ndGggPyAocyA9IG9baV0sIHUgPSB2b2lkIDAsIChhID0gdGhpcy5LZC5nZXQocykpICYmIDAgIT09IGEubGVuZ3RoID8gWyA0IC8qeWllbGQqLyAsIHRoaXMuTl8uV3UocywgXG4gICAgICAgICAgICAgICAgICAgIC8qa2VlcFBlcnNpc3RlZFRhcmdldERhdGE9Ki8gITApIF0gOiBbIDMgLypicmVhayovICwgOCBdKSA6IFsgMyAvKmJyZWFrKi8gLCAxNCBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBxdWVyaWVzIHRoYXQgaGF2ZSBhIGxvY2FsIFZpZXcsIHdlIG5lZWQgdG8gdXBkYXRlIHRoZWlyIHN0YXRlXG4gICAgICAgICAgICAgICAgICAgIC8vIGluIExvY2FsU3RvcmUgKGFzIHRoZSByZXN1bWUgdG9rZW4gYW5kIHRoZSBzbmFwc2hvdCB2ZXJzaW9uXG4gICAgICAgICAgICAgICAgICAgIC8vIG1pZ2h0IGhhdmUgY2hhbmdlZCkgYW5kIHJlY29uY2lsZSB0aGVpciB2aWV3cyB3aXRoIHRoZSBwZXJzaXN0ZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gc3RhdGUgKHRoZSBsaXN0IG9mIHN5bmNlZERvY3VtZW50cyBtYXkgaGF2ZSBnb3R0ZW4gb3V0IG9mIHN5bmMpLlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5zZW50KCksIFsgNCAvKnlpZWxkKi8gLCB0aGlzLk5fLlF1KGFbMF0uZWUoKSkgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgcXVlcmllcyB0aGF0IGhhdmUgYSBsb2NhbCBWaWV3LCB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGVpciBzdGF0ZVxuICAgICAgICAgICAgICAgICAgICAvLyBpbiBMb2NhbFN0b3JlIChhcyB0aGUgcmVzdW1lIHRva2VuIGFuZCB0aGUgc25hcHNob3QgdmVyc2lvblxuICAgICAgICAgICAgICAgICAgICAvLyBtaWdodCBoYXZlIGNoYW5nZWQpIGFuZCByZWNvbmNpbGUgdGhlaXIgdmlld3Mgd2l0aCB0aGUgcGVyc2lzdGVkXG4gICAgICAgICAgICAgICAgICAgIC8vIHN0YXRlICh0aGUgbGlzdCBvZiBzeW5jZWREb2N1bWVudHMgbWF5IGhhdmUgZ290dGVuIG91dCBvZiBzeW5jKS5cbiAgICAgICAgICAgICAgICAgICAgdSA9IGUuc2VudCgpLCBoID0gMCwgYyA9IGEsIGUubGFiZWwgPSA0O1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBoIDwgYy5sZW5ndGggPyAoZiA9IGNbaF0sIGwgPSB0aGlzLmpkLmdldChmKSwgWyA0IC8qeWllbGQqLyAsIHRoaXMuQWYobCkgXSkgOiBbIDMgLypicmVhayovICwgNyBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIChwID0gZS5zZW50KCkpLnNuYXBzaG90ICYmIHIucHVzaChwLnNuYXBzaG90KSwgZS5sYWJlbCA9IDY7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGgrKywgWyAzIC8qYnJlYWsqLyAsIDQgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAzIC8qYnJlYWsqLyAsIDEyIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgNCAvKnlpZWxkKi8gLCB0aGlzLk5fLll1KHMpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQgPSBlLnNlbnQoKSwgWyA0IC8qeWllbGQqLyAsIHRoaXMuTl8uUXUoZCkgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHUgPSBlLnNlbnQoKSwgWyA0IC8qeWllbGQqLyAsIHRoaXMuc2YodGhpcy5WZihkKSwgcywgXG4gICAgICAgICAgICAgICAgICAgIC8qY3VycmVudD0qLyAhMSkgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgICAgZS5zZW50KCksIGUubGFiZWwgPSAxMjtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICAgICAgbi5wdXNoKHUpLCBlLmxhYmVsID0gMTM7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpKyssIFsgMyAvKmJyZWFrKi8gLCAxIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyAsICh0aGlzLldkLmlfKHIpLCBuKSBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgUXVlcnlgIG9iamVjdCBmcm9tIHRoZSBzcGVjaWZpZWQgYFRhcmdldGAuIFRoZXJlIGlzIG5vIHdheSB0b1xuICAgICAqIG9idGFpbiB0aGUgb3JpZ2luYWwgYFF1ZXJ5YCwgc28gd2Ugc3ludGhlc2l6ZSBhIGBRdWVyeWAgZnJvbSB0aGUgYFRhcmdldGBcbiAgICAgKiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBUaGUgc3ludGhlc2l6ZWQgcmVzdWx0IG1pZ2h0IGJlIGRpZmZlcmVudCBmcm9tIHRoZSBvcmlnaW5hbCBgUXVlcnlgLCBidXRcbiAgICAgKiBzaW5jZSB0aGUgc3ludGhlc2l6ZWQgYFF1ZXJ5YCBzaG91bGQgcmV0dXJuIHRoZSBzYW1lIHJlc3VsdHMgYXMgdGhlXG4gICAgICogb3JpZ2luYWwgb25lIChvbmx5IHRoZSBwcmVzZW50YXRpb24gb2YgcmVzdWx0cyBtaWdodCBkaWZmZXIpLCB0aGUgcG90ZW50aWFsXG4gICAgICogZGlmZmVyZW5jZSB3aWxsIG5vdCBjYXVzZSBpc3N1ZXMuXG4gICAgICovXG4gICAgbi5wcm90b3R5cGUuVmYgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBuZXcgd3QodC5wYXRoLCB0LmNvbGxlY3Rpb25Hcm91cCwgdC5vcmRlckJ5LCB0LmZpbHRlcnMsIHQubGltaXQsIFwiRlwiIC8qIEZpcnN0ICovICwgdC5zdGFydEF0LCB0LmVuZEF0KTtcbiAgICB9LCBuLnByb3RvdHlwZS5ibyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5OXy5ibygpO1xuICAgIH0sIG4ucHJvdG90eXBlLmZkID0gZnVuY3Rpb24odCwgbiwgcikge1xuICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBpLCBvO1xuICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGUubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuUmYgPyAoXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlY2VpdmUgYSB0YXJnZXQgc3RhdGUgbm90aWZpY2F0aW9uIHZpYSBXZWJTdG9yYWdlLCB3ZSBhcmVcbiAgICAgICAgICAgICAgICAgICAgLy8gZWl0aGVyIGFscmVhZHkgc2Vjb25kYXJ5IG9yIGFub3RoZXIgdGFiIGhhcyB0YWtlbiB0aGUgcHJpbWFyeSBsZWFzZS5cbiAgICAgICAgICAgICAgICAgICAgZGUoXCJTeW5jRW5naW5lXCIsIFwiSWdub3JpbmcgdW5leHBlY3RlZCBxdWVyeSBzdGF0ZSBub3RpZmljYXRpb24uXCIpLCBbIDMgLypicmVhayovICwgOCBdKSA6IFsgMyAvKmJyZWFrKi8gLCAxIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLktkLmhhcyh0KSkgcmV0dXJuIFsgMyAvKmJyZWFrKi8gLCA4IF07XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobikge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjdXJyZW50XCI6XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm5vdC1jdXJyZW50XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAzIC8qYnJlYWsqLyAsIDIgXTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJyZWplY3RlZFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMyAvKmJyZWFrKi8gLCA1IF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMyAvKmJyZWFrKi8gLCA3IF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgNCAvKnlpZWxkKi8gLCB0aGlzLk5fLktyKCkgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaSA9IGUuc2VudCgpLCBvID0gSHQubHModCwgXCJjdXJyZW50XCIgPT09IG4pLCBbIDQgLyp5aWVsZCovICwgdGhpcy5oZihpLCBvKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNlbnQoKSwgWyAzIC8qYnJlYWsqLyAsIDggXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyA0IC8qeWllbGQqLyAsIHRoaXMuTl8uV3UodCwgXG4gICAgICAgICAgICAgICAgICAgIC8qIGtlZXBQZXJzaXN0ZWRUYXJnZXREYXRhICovICEwKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNlbnQoKSwgdGhpcy5uZih0LCByKSwgWyAzIC8qYnJlYWsqLyAsIDggXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBnZSgpLCBlLmxhYmVsID0gODtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBuLnByb3RvdHlwZS5UZCA9IGZ1bmN0aW9uKHQsIG4pIHtcbiAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgciwgaSwgbywgcywgdSwgYSwgaCwgYywgZiwgbCwgcCA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gZS5fX2dlbmVyYXRvcih0aGlzLCAoZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZC5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuUmYpIHJldHVybiBbIDMgLypicmVhayovICwgMTAgXTtcbiAgICAgICAgICAgICAgICAgICAgciA9IDAsIGkgPSB0LCBkLmxhYmVsID0gMTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gciA8IGkubGVuZ3RoID8gKG8gPSBpW3JdLCB0aGlzLktkLmhhcyhvKSA/IChcbiAgICAgICAgICAgICAgICAgICAgLy8gQSB0YXJnZXQgbWlnaHQgaGF2ZSBiZWVuIGFkZGVkIGluIGEgcHJldmlvdXMgYXR0ZW1wdFxuICAgICAgICAgICAgICAgICAgICBkZShcIlN5bmNFbmdpbmVcIiwgXCJBZGRpbmcgYW4gYWxyZWFkeSBhY3RpdmUgdGFyZ2V0IFwiICsgbyksIFsgMyAvKmJyZWFrKi8gLCA1IF0pIDogWyA0IC8qeWllbGQqLyAsIHRoaXMuTl8uWXUobykgXSkgOiBbIDMgLypicmVhayovICwgNiBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzID0gZC5zZW50KCksIFsgNCAvKnlpZWxkKi8gLCB0aGlzLk5fLlF1KHMpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHUgPSBkLnNlbnQoKSwgWyA0IC8qeWllbGQqLyAsIHRoaXMuc2YodGhpcy5WZihzKSwgdS50YXJnZXRJZCwgXG4gICAgICAgICAgICAgICAgICAgIC8qY3VycmVudD0qLyAhMSkgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBkLnNlbnQoKSwgdGhpcy4kZC5saXN0ZW4odSksIGQubGFiZWwgPSA1O1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByKyssIFsgMyAvKmJyZWFrKi8gLCAxIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgYSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoLktkLmhhcyh0KSA/IFsgNCAvKnlpZWxkKi8gLCBoLk5fLld1KHQsIC8qIGtlZXBQZXJzaXN0ZWRUYXJnZXREYXRhICovICExKS50aGVuKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuJGQucmwodCksIHAubmYodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS5jYXRjaChlcikgXSA6IFsgMyAvKmJyZWFrKi8gLCAyIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVsZWFzZSBxdWVyaWVzIHRoYXQgYXJlIHN0aWxsIGFjdGl2ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZWxlYXNlIHF1ZXJpZXMgdGhhdCBhcmUgc3RpbGwgYWN0aXZlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnNlbnQoKSwgZS5sYWJlbCA9IDI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9LCBoID0gdGhpcywgYyA9IDAsIGYgPSBuLCBkLmxhYmVsID0gNztcblxuICAgICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYyA8IGYubGVuZ3RoID8gKGwgPSBmW2NdLCBbIDUgLyp5aWVsZCoqLyAsIGEobCkgXSkgOiBbIDMgLypicmVhayovICwgMTAgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICBkLnNlbnQoKSwgZC5sYWJlbCA9IDk7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMrKywgWyAzIC8qYnJlYWsqLyAsIDcgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgbjtcbn0odmkpLCBtaSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZ2YgPSB2b2lkIDAsIHRoaXMucGYgPSBbXTtcbn0sIHdpID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdGhpcy5vbCA9IHQsIHRoaXMueWYgPSBuZXcgQWUoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0LmNhbm9uaWNhbElkKCk7XG4gICAgICAgIH0pKSwgdGhpcy5vbmxpbmVTdGF0ZSA9IFwiVW5rbm93blwiIC8qIFVua25vd24gKi8gLCB0aGlzLmJmID0gbmV3IFNldCwgdGhpcy5vbC5zdWJzY3JpYmUodGhpcyk7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBlLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIG4sIHIsIGksIG8sIHMsIHU7XG4gICAgICAgICAgICByZXR1cm4gZS5fX2dlbmVyYXRvcih0aGlzLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBpZiAobiA9IHQucXVlcnksIHIgPSAhMSwgKGkgPSB0aGlzLnlmLmdldChuKSkgfHwgKHIgPSAhMCwgaSA9IG5ldyBtaSksICFyKSByZXR1cm4gWyAzIC8qYnJlYWsqLyAsIDQgXTtcbiAgICAgICAgICAgICAgICAgICAgZS5sYWJlbCA9IDE7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUudHJ5cy5wdXNoKFsgMSwgMywgLCA0IF0pLCBvID0gaSwgWyA0IC8qeWllbGQqLyAsIHRoaXMub2wubGlzdGVuKG4pIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8uZ2YgPSBlLnNlbnQoKSwgWyAzIC8qYnJlYWsqLyAsIDQgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcyA9IGUuc2VudCgpLCB1ID0gUW4ocywgXCJJbml0aWFsaXphdGlvbiBvZiBxdWVyeSAnXCIgKyB0LnF1ZXJ5ICsgXCInIGZhaWxlZFwiKSwgXG4gICAgICAgICAgICAgICAgICAgIFsgMiAvKnJldHVybiovICwgdm9pZCB0Lm9uRXJyb3IodSkgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy55Zi5zZXQobiwgaSksIGkucGYucHVzaCh0KSwgXG4gICAgICAgICAgICAgICAgICAgIC8vIFJ1biBnbG9iYWwgc25hcHNob3QgbGlzdGVuZXJzIGlmIGEgY29uc2lzdGVudCBzbmFwc2hvdCBoYXMgYmVlbiBlbWl0dGVkLlxuICAgICAgICAgICAgICAgICAgICB0LkRkKHRoaXMub25saW5lU3RhdGUpLCBpLmdmICYmIHQudmYoaS5nZikgJiYgdGhpcy5TZigpLCBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLnJsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBuLCByLCBpLCBvO1xuICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbiA9IHQucXVlcnksIHIgPSAhMSwgKGkgPSB0aGlzLnlmLmdldChuKSkgJiYgKG8gPSBpLnBmLmluZGV4T2YodCkpID49IDAgJiYgKGkucGYuc3BsaWNlKG8sIDEpLCBcbiAgICAgICAgICAgICAgICByID0gMCA9PT0gaS5wZi5sZW5ndGgpLCByID8gWyAyIC8qcmV0dXJuKi8gLCAodGhpcy55Zi5kZWxldGUobiksIHRoaXMub2wucmwobikpIF0gOiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuaV8gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIGUgPSAhMSwgbiA9IDAsIHIgPSB0OyBuIDwgci5sZW5ndGg7IG4rKykge1xuICAgICAgICAgICAgdmFyIGkgPSByW25dLCBvID0gaS5xdWVyeSwgcyA9IHRoaXMueWYuZ2V0KG8pO1xuICAgICAgICAgICAgaWYgKHMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB1ID0gMCwgYSA9IHMucGY7IHUgPCBhLmxlbmd0aDsgdSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFbdV0udmYoaSkgJiYgKGUgPSAhMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHMuZ2YgPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGUgJiYgdGhpcy5TZigpO1xuICAgIH0sIHQucHJvdG90eXBlLmZmID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXMueWYuZ2V0KHQpO1xuICAgICAgICBpZiAobikgZm9yICh2YXIgciA9IDAsIGkgPSBuLnBmOyByIDwgaS5sZW5ndGg7IHIrKykge1xuICAgICAgICAgICAgaVtyXS5vbkVycm9yKGUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlbW92ZSBhbGwgbGlzdGVuZXJzLiBOT1RFOiBXZSBkb24ndCBuZWVkIHRvIGNhbGwgc3luY0VuZ2luZS51bmxpc3RlbigpXG4gICAgICAgIC8vIGFmdGVyIGFuIGVycm9yLlxuICAgICAgICAgICAgICAgIHRoaXMueWYuZGVsZXRlKHQpO1xuICAgIH0sIHQucHJvdG90eXBlLmFmID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLm9ubGluZVN0YXRlID0gdDtcbiAgICAgICAgdmFyIGUgPSAhMTtcbiAgICAgICAgdGhpcy55Zi5mb3JFYWNoKChmdW5jdGlvbihuLCByKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbyA9IHIucGY7IGkgPCBvLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgLy8gUnVuIGdsb2JhbCBzbmFwc2hvdCBsaXN0ZW5lcnMgaWYgYSBjb25zaXN0ZW50IHNuYXBzaG90IGhhcyBiZWVuIGVtaXR0ZWQuXG4gICAgICAgICAgICAgICAgb1tpXS5EZCh0KSAmJiAoZSA9ICEwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpLCBlICYmIHRoaXMuU2YoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5EZiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5iZi5hZGQodCksIFxuICAgICAgICAvLyBJbW1lZGlhdGVseSBmaXJlIGFuIGluaXRpYWwgZXZlbnQsIGluZGljYXRpbmcgYWxsIGV4aXN0aW5nIGxpc3RlbmVyc1xuICAgICAgICAvLyBhcmUgaW4tc3luYy5cbiAgICAgICAgdC5uZXh0KCk7XG4gICAgfSwgdC5wcm90b3R5cGUuQ2YgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuYmYuZGVsZXRlKHQpO1xuICAgIH0sIFxuICAgIC8vIENhbGwgYWxsIGdsb2JhbCBzbmFwc2hvdCBsaXN0ZW5lcnMgdGhhdCBoYXZlIGJlZW4gc2V0LlxuICAgIHQucHJvdG90eXBlLlNmID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuYmYuZm9yRWFjaCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdC5uZXh0KCk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0O1xufSgpLCBFaSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMucXVlcnkgPSB0LCB0aGlzLkZmID0gZSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgICAgICogSW5pdGlhbCBzbmFwc2hvdHMgKGUuZy4gZnJvbSBjYWNoZSkgbWF5IG5vdCBiZSBwcm9wYWdhdGVkIHRvIHRoZSB3cmFwcGVkXG4gICAgICAgICAgICAgKiBvYnNlcnZlci4gVGhpcyBmbGFnIGlzIHNldCB0byB0cnVlIG9uY2Ugd2UndmUgYWN0dWFsbHkgcmFpc2VkIGFuIGV2ZW50LlxuICAgICAgICAgICAgICovXG4gICAgICAgIHRoaXMuTmYgPSAhMSwgdGhpcy4kZiA9IG51bGwsIHRoaXMub25saW5lU3RhdGUgPSBcIlVua25vd25cIiAvKiBVbmtub3duICovICwgdGhpcy5vcHRpb25zID0gbiB8fCB7fVxuICAgICAgICAvKipcbiAgICAgKiBBcHBsaWVzIHRoZSBuZXcgVmlld1NuYXBzaG90IHRvIHRoaXMgbGlzdGVuZXIsIHJhaXNpbmcgYSB1c2VyLWZhY2luZyBldmVudFxuICAgICAqIGlmIGFwcGxpY2FibGUgKGRlcGVuZGluZyBvbiB3aGF0IGNoYW5nZWQsIHdoZXRoZXIgdGhlIHVzZXIgaGFzIG9wdGVkIGludG9cbiAgICAgKiBtZXRhZGF0YS1vbmx5IGNoYW5nZXMsIGV0Yy4pLiBSZXR1cm5zIHRydWUgaWYgYSB1c2VyLWZhY2luZyBldmVudCB3YXNcbiAgICAgKiBpbmRlZWQgcmFpc2VkLlxuICAgICAqLztcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLnZmID0gZnVuY3Rpb24odCkge1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5pbmNsdWRlTWV0YWRhdGFDaGFuZ2VzKSB7XG4gICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBtZXRhZGF0YSBvbmx5IGNoYW5nZXMuXG4gICAgICAgICAgICB2YXIgZSA9IFtdLCBuID0gMCwgciA9IHQuZG9jQ2hhbmdlczsgbiA8IHIubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IHJbbl07XG4gICAgICAgICAgICAgICAgMyAvKiBNZXRhZGF0YSAqLyAhPT0gaS50eXBlICYmIGUucHVzaChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHQgPSBuZXcgSnQodC5xdWVyeSwgdC5kb2NzLCB0LnNzLCBlLCB0Lm5zLCB0LmZyb21DYWNoZSwgdC5ycywgXG4gICAgICAgICAgICAvKiBleGNsdWRlc01ldGFkYXRhQ2hhbmdlcz0gKi8gITApO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvID0gITE7XG4gICAgICAgIHJldHVybiB0aGlzLk5mID8gdGhpcy5rZih0KSAmJiAodGhpcy5GZi5uZXh0KHQpLCBvID0gITApIDogdGhpcy5MZih0LCB0aGlzLm9ubGluZVN0YXRlKSAmJiAodGhpcy5NZih0KSwgXG4gICAgICAgIG8gPSAhMCksIHRoaXMuJGYgPSB0LCBvO1xuICAgIH0sIHQucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuRmYuZXJyb3IodCk7XG4gICAgfSwgXG4gICAgLyoqIFJldHVybnMgd2hldGhlciBhIHNuYXBzaG90IHdhcyByYWlzZWQuICovIHQucHJvdG90eXBlLkRkID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLm9ubGluZVN0YXRlID0gdDtcbiAgICAgICAgdmFyIGUgPSAhMTtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGYgJiYgIXRoaXMuTmYgJiYgdGhpcy5MZih0aGlzLiRmLCB0KSAmJiAodGhpcy5NZih0aGlzLiRmKSwgZSA9ICEwKSwgXG4gICAgICAgIGU7XG4gICAgfSwgdC5wcm90b3R5cGUuTGYgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIC8vIEFsd2F5cyByYWlzZSB0aGUgZmlyc3QgZXZlbnQgd2hlbiB3ZSdyZSBzeW5jZWRcbiAgICAgICAgaWYgKCF0LmZyb21DYWNoZSkgcmV0dXJuICEwO1xuICAgICAgICAvLyBOT1RFOiBXZSBjb25zaWRlciBPbmxpbmVTdGF0ZS5Vbmtub3duIGFzIG9ubGluZSAoaXQgc2hvdWxkIGJlY29tZSBPZmZsaW5lXG4gICAgICAgIC8vIG9yIE9ubGluZSBpZiB3ZSB3YWl0IGxvbmcgZW5vdWdoKS5cbiAgICAgICAgICAgICAgICB2YXIgbiA9IFwiT2ZmbGluZVwiIC8qIE9mZmxpbmUgKi8gIT09IGU7XG4gICAgICAgIC8vIERvbid0IHJhaXNlIHRoZSBldmVudCBpZiB3ZSdyZSBvbmxpbmUsIGFyZW4ndCBzeW5jZWQgeWV0IChjaGVja2VkXG4gICAgICAgIC8vIGFib3ZlKSBhbmQgYXJlIHdhaXRpbmcgZm9yIGEgc3luYy5cbiAgICAgICAgICAgICAgICByZXR1cm4gISh0aGlzLm9wdGlvbnMuT2YgJiYgbiB8fCB0LmRvY3MuQigpICYmIFwiT2ZmbGluZVwiIC8qIE9mZmxpbmUgKi8gIT09IGUpO1xuICAgICAgICAvLyBSYWlzZSBkYXRhIGZyb20gY2FjaGUgaWYgd2UgaGF2ZSBhbnkgZG9jdW1lbnRzIG9yIHdlIGFyZSBvZmZsaW5lXG4gICAgICAgIH0sIHQucHJvdG90eXBlLmtmID0gZnVuY3Rpb24odCkge1xuICAgICAgICAvLyBXZSBkb24ndCBuZWVkIHRvIGhhbmRsZSBpbmNsdWRlRG9jdW1lbnRNZXRhZGF0YUNoYW5nZXMgaGVyZSBiZWNhdXNlXG4gICAgICAgIC8vIHRoZSBNZXRhZGF0YSBvbmx5IGNoYW5nZXMgaGF2ZSBhbHJlYWR5IGJlZW4gc3RyaXBwZWQgb3V0IGlmIG5lZWRlZC5cbiAgICAgICAgLy8gQXQgdGhpcyBwb2ludCB0aGUgb25seSBjaGFuZ2VzIHdlIHdpbGwgc2VlIGFyZSB0aGUgb25lcyB3ZSBzaG91bGRcbiAgICAgICAgLy8gcHJvcGFnYXRlLlxuICAgICAgICBpZiAodC5kb2NDaGFuZ2VzLmxlbmd0aCA+IDApIHJldHVybiAhMDtcbiAgICAgICAgdmFyIGUgPSB0aGlzLiRmICYmIHRoaXMuJGYuaGFzUGVuZGluZ1dyaXRlcyAhPT0gdC5oYXNQZW5kaW5nV3JpdGVzO1xuICAgICAgICByZXR1cm4gISghdC5ycyAmJiAhZSkgJiYgITAgPT09IHRoaXMub3B0aW9ucy5pbmNsdWRlTWV0YWRhdGFDaGFuZ2VzO1xuICAgICAgICAvLyBHZW5lcmFsbHkgd2Ugc2hvdWxkIGhhdmUgaGl0IG9uZSBvZiB0aGUgY2FzZXMgYWJvdmUsIGJ1dCBpdCdzIHBvc3NpYmxlXG4gICAgICAgIC8vIHRvIGdldCBoZXJlIGlmIHRoZXJlIHdlcmUgb25seSBtZXRhZGF0YSBkb2NDaGFuZ2VzIGFuZCB0aGV5IGdvdFxuICAgICAgICAvLyBzdHJpcHBlZCBvdXQuXG4gICAgICAgIH0sIHQucHJvdG90eXBlLk1mID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0ID0gSnQub3ModC5xdWVyeSwgdC5kb2NzLCB0Lm5zLCB0LmZyb21DYWNoZSksIHRoaXMuTmYgPSAhMCwgdGhpcy5GZi5uZXh0KHQpO1xuICAgIH0sIHQ7XG59KCksIGJpID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KCkge31cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuU3UgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMueGYgPSB0O1xuICAgIH0sIHQucHJvdG90eXBlLlpuID0gZnVuY3Rpb24odCwgZSwgbiwgaSkge1xuICAgICAgICB2YXIgbyA9IHRoaXM7XG4gICAgICAgIC8vIFF1ZXJpZXMgdGhhdCBtYXRjaCBhbGwgZG9jdW1lbnRzIGRvbid0IGJlbmVmaXQgZnJvbSB1c2luZ1xuICAgICAgICAvLyBJbmRleEZyZWVRdWVyaWVzLiBJdCBpcyBtb3JlIGVmZmljaWVudCB0byBzY2FuIGFsbCBkb2N1bWVudHMgaW4gYVxuICAgICAgICAvLyBjb2xsZWN0aW9uLCByYXRoZXIgdGhhbiB0byBwZXJmb3JtIGluZGl2aWR1YWwgbG9va3Vwcy5cbiAgICAgICAgICAgICAgICByZXR1cm4gZS50ZSgpIHx8IG4uaXNFcXVhbChnLm1pbigpKSA/IHRoaXMuQmYodCwgZSkgOiB0aGlzLnhmLlluKHQsIGkpLm5leHQoKGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgICAgIHZhciB1ID0gby5xZihlLCBzKTtcbiAgICAgICAgICAgIHJldHVybiAoZS5vZSgpIHx8IGUuYWUoKSkgJiYgby55ZChlLkJ0LCB1LCBpLCBuKSA/IG8uQmYodCwgZSkgOiAobGUoKSA8PSByLkxvZ0xldmVsLkRFQlVHICYmIGRlKFwiSW5kZXhGcmVlUXVlcnlFbmdpbmVcIiwgXCJSZS11c2luZyBwcmV2aW91cyByZXN1bHQgZnJvbSAlcyB0byBleGVjdXRlIHF1ZXJ5OiAlc1wiLCBuLnRvU3RyaW5nKCksIGUudG9TdHJpbmcoKSksIFxuICAgICAgICAgICAgby54Zi5abih0LCBlLCBuKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgbWVyZ2UgYHByZXZpb3VzUmVzdWx0c2AgaW50byBgdXBkYXRlUmVzdWx0c2AsIHNpbmNlXG4gICAgICAgICAgICAgICAgLy8gYHVwZGF0ZVJlc3VsdHNgIGlzIGFscmVhZHkgYSBEb2N1bWVudE1hcC4gSWYgYSBkb2N1bWVudCBpc1xuICAgICAgICAgICAgICAgIC8vIGNvbnRhaW5lZCBpbiBib3RoIGxpc3RzLCB0aGVuIGl0cyBjb250ZW50cyBhcmUgdGhlIHNhbWUuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHUuZm9yRWFjaCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICB0ID0gdC5BZShlLmtleSwgZSk7XG4gICAgICAgICAgICAgICAgfSkpLCB0O1xuICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgfSkpO1xuICAgICAgICAvLyBRdWVyaWVzIHRoYXQgaGF2ZSBuZXZlciBzZWVuIGEgc25hcHNob3Qgd2l0aG91dCBsaW1ibyBmcmVlIGRvY3VtZW50c1xuICAgICAgICAvLyBzaG91bGQgYWxzbyBiZSBydW4gYXMgYSBmdWxsIGNvbGxlY3Rpb24gc2Nhbi5cbiAgICAgICAgfSwgXG4gICAgLyoqIEFwcGxpZXMgdGhlIHF1ZXJ5IGZpbHRlciBhbmQgc29ydGluZyB0byB0aGUgcHJvdmlkZWQgZG9jdW1lbnRzLiAgKi8gdC5wcm90b3R5cGUucWYgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIC8vIFNvcnQgdGhlIGRvY3VtZW50cyBhbmQgcmUtYXBwbHkgdGhlIHF1ZXJ5IGZpbHRlciBzaW5jZSBwcmV2aW91c2x5XG4gICAgICAgIC8vIG1hdGNoaW5nIGRvY3VtZW50cyBkbyBub3QgbmVjZXNzYXJpbHkgc3RpbGwgbWF0Y2ggdGhlIHF1ZXJ5LlxuICAgICAgICB2YXIgbiA9IG5ldyBQdCgoZnVuY3Rpb24oZSwgbikge1xuICAgICAgICAgICAgcmV0dXJuIHQuc2UoZSwgbik7XG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIGUuZm9yRWFjaCgoZnVuY3Rpb24oZSwgcikge1xuICAgICAgICAgICAgciBpbnN0YW5jZW9mIHl0ICYmIHQubWF0Y2hlcyhyKSAmJiAobiA9IG4uYWRkKHIpKTtcbiAgICAgICAgfSkpLCBuO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgYSBsaW1pdCBxdWVyeSBuZWVkcyB0byBiZSByZWZpbGxlZCBmcm9tIGNhY2hlLCBtYWtpbmcgaXRcbiAgICAgKiBpbmVsaWdpYmxlIGZvciBpbmRleC1mcmVlIGV4ZWN1dGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzb3J0ZWRQcmV2aW91c1Jlc3VsdHMgVGhlIGRvY3VtZW50cyB0aGF0IG1hdGNoZWQgdGhlIHF1ZXJ5IHdoZW4gaXRcbiAgICAgKiB3YXMgbGFzdCBzeW5jaHJvbml6ZWQsIHNvcnRlZCBieSB0aGUgcXVlcnkncyBjb21wYXJhdG9yLlxuICAgICAqIEBwYXJhbSByZW1vdGVLZXlzIFRoZSBkb2N1bWVudCBrZXlzIHRoYXQgbWF0Y2hlZCB0aGUgcXVlcnkgYXQgdGhlIGxhc3RcbiAgICAgKiBzbmFwc2hvdC5cbiAgICAgKiBAcGFyYW0gbGltYm9GcmVlU25hcHNob3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBzbmFwc2hvdCB3aGVuIHRoZSBxdWVyeVxuICAgICAqIHdhcyBsYXN0IHN5bmNocm9uaXplZC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS55ZCA9IGZ1bmN0aW9uKHQsIGUsIG4sIHIpIHtcbiAgICAgICAgLy8gVGhlIHF1ZXJ5IG5lZWRzIHRvIGJlIHJlZmlsbGVkIGlmIGEgcHJldmlvdXNseSBtYXRjaGluZyBkb2N1bWVudCBub1xuICAgICAgICAvLyBsb25nZXIgbWF0Y2hlcy5cbiAgICAgICAgaWYgKG4uc2l6ZSAhPT0gZS5zaXplKSByZXR1cm4gITA7XG4gICAgICAgIC8vIExpbWl0IHF1ZXJpZXMgYXJlIG5vdCBlbGlnaWJsZSBmb3IgaW5kZXgtZnJlZSBxdWVyeSBleGVjdXRpb24gaWYgdGhlcmUgaXNcbiAgICAgICAgLy8gYSBwb3RlbnRpYWwgdGhhdCBhbiBvbGRlciBkb2N1bWVudCBmcm9tIGNhY2hlIG5vdyBzb3J0cyBiZWZvcmUgYSBkb2N1bWVudFxuICAgICAgICAvLyB0aGF0IHdhcyBwcmV2aW91c2x5IHBhcnQgb2YgdGhlIGxpbWl0LiBUaGlzLCBob3dldmVyLCBjYW4gb25seSBoYXBwZW4gaWZcbiAgICAgICAgLy8gdGhlIGRvY3VtZW50IGF0IHRoZSBlZGdlIG9mIHRoZSBsaW1pdCBnb2VzIG91dCBvZiBsaW1pdC5cbiAgICAgICAgLy8gSWYgYSBkb2N1bWVudCB0aGF0IGlzIG5vdCB0aGUgbGltaXQgYm91bmRhcnkgc29ydHMgZGlmZmVyZW50bHksXG4gICAgICAgIC8vIHRoZSBib3VuZGFyeSBvZiB0aGUgbGltaXQgaXRzZWxmIGRpZCBub3QgY2hhbmdlIGFuZCBkb2N1bWVudHMgZnJvbSBjYWNoZVxuICAgICAgICAvLyB3aWxsIGNvbnRpbnVlIHRvIGJlIFwicmVqZWN0ZWRcIiBieSB0aGlzIGJvdW5kYXJ5LiBUaGVyZWZvcmUsIHdlIGNhbiBpZ25vcmVcbiAgICAgICAgLy8gYW55IG1vZGlmaWNhdGlvbnMgdGhhdCBkb24ndCBhZmZlY3QgdGhlIGxhc3QgZG9jdW1lbnQuXG4gICAgICAgICAgICAgICAgdmFyIGkgPSBcIkZcIiAvKiBGaXJzdCAqLyA9PT0gdCA/IGUubGFzdCgpIDogZS5maXJzdCgpO1xuICAgICAgICByZXR1cm4gISFpICYmIChpLmhhc1BlbmRpbmdXcml0ZXMgfHwgaS52ZXJzaW9uLlMocikgPiAwKTtcbiAgICB9LCB0LnByb3RvdHlwZS5CZiA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIGxlKCkgPD0gci5Mb2dMZXZlbC5ERUJVRyAmJiBkZShcIkluZGV4RnJlZVF1ZXJ5RW5naW5lXCIsIFwiVXNpbmcgZnVsbCBjb2xsZWN0aW9uIHNjYW4gdG8gZXhlY3V0ZSBxdWVyeTpcIiwgZS50b1N0cmluZygpKSwgXG4gICAgICAgIHRoaXMueGYuWm4odCwgZSwgZy5taW4oKSk7XG4gICAgfSwgdDtcbn0oKSwgX2kgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSkge1xuICAgICAgICB0aGlzLmpuID0gdCwgdGhpcy5oaCA9IGUsIFxuICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoZSBzZXQgb2YgYWxsIG11dGF0aW9ucyB0aGF0IGhhdmUgYmVlbiBzZW50IGJ1dCBub3QgeWV0IGJlZW4gYXBwbGllZCB0b1xuICAgICAgICAgICAgICogdGhlIGJhY2tlbmQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5XbiA9IFtdLCBcbiAgICAgICAgLyoqIE5leHQgdmFsdWUgdG8gdXNlIHdoZW4gYXNzaWduaW5nIHNlcXVlbnRpYWwgSURzIHRvIGVhY2ggbXV0YXRpb24gYmF0Y2guICovXG4gICAgICAgIHRoaXMuVWYgPSAxLCBcbiAgICAgICAgLyoqIFRoZSBsYXN0IHJlY2VpdmVkIHN0cmVhbSB0b2tlbiBmcm9tIHRoZSBzZXJ2ZXIsIHVzZWQgdG8gYWNrbm93bGVkZ2Ugd2hpY2hcbiAgICAgICAgICAgICAqIHJlc3BvbnNlcyB0aGUgY2xpZW50IGhhcyBwcm9jZXNzZWQuIFN0cmVhbSB0b2tlbnMgYXJlIG9wYXF1ZSBjaGVja3BvaW50XG4gICAgICAgICAgICAgKiBtYXJrZXJzIHdob3NlIG9ubHkgcmVhbCB2YWx1ZSBpcyB0aGVpciBpbmNsdXNpb24gaW4gdGhlIG5leHQgcmVxdWVzdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICB0aGlzLmxhc3RTdHJlYW1Ub2tlbiA9IEEuaHQsIFxuICAgICAgICAvKiogQW4gb3JkZXJlZCBtYXBwaW5nIGJldHdlZW4gZG9jdW1lbnRzIGFuZCB0aGUgbXV0YXRpb25zIGJhdGNoIElEcy4gKi9cbiAgICAgICAgdGhpcy5RZiA9IG5ldyBQdChyci5YdSk7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5HbyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHhlLnJlc29sdmUoMCA9PT0gdGhpcy5Xbi5sZW5ndGgpO1xuICAgIH0sIHQucHJvdG90eXBlLnpvID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICB2YXIgciA9IGUuYmF0Y2hJZCwgaSA9IHRoaXMuV2YociwgXCJhY2tub3dsZWRnZWRcIik7XG4gICAgICAgIHJldHVybiBtZSgwID09PSBpKSwgXG4gICAgICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBiYXRjaCBpbiB0aGUgcXVldWUgaXMgdGhlIG9uZSB0byBiZSBhY2tub3dsZWRnZWQuXG4gICAgICAgIHRoaXMuV25baV0sIHRoaXMubGFzdFN0cmVhbVRva2VuID0gbiwgeGUucmVzb2x2ZSgpO1xuICAgIH0sIHQucHJvdG90eXBlLllvID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4geGUucmVzb2x2ZSh0aGlzLmxhc3RTdHJlYW1Ub2tlbik7XG4gICAgfSwgdC5wcm90b3R5cGUuSm8gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxhc3RTdHJlYW1Ub2tlbiA9IGUsIHhlLnJlc29sdmUoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5YbyA9IGZ1bmN0aW9uKHQsIGUsIG4sIHIpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzLlVmO1xuICAgICAgICB0aGlzLlVmKyssIHRoaXMuV24ubGVuZ3RoID4gMCAmJiB0aGlzLlduW3RoaXMuV24ubGVuZ3RoIC0gMV07XG4gICAgICAgIHZhciBvID0gbmV3IGtlKGksIGUsIG4sIHIpO1xuICAgICAgICB0aGlzLlduLnB1c2gobyk7XG4gICAgICAgIC8vIFRyYWNrIHJlZmVyZW5jZXMgYnkgZG9jdW1lbnQga2V5IGFuZCBpbmRleCBjb2xsZWN0aW9uIHBhcmVudHMuXG4gICAgICAgIGZvciAodmFyIHMgPSAwLCB1ID0gcjsgcyA8IHUubGVuZ3RoOyBzKyspIHtcbiAgICAgICAgICAgIHZhciBhID0gdVtzXTtcbiAgICAgICAgICAgIHRoaXMuUWYgPSB0aGlzLlFmLmFkZChuZXcgcnIoYS5rZXksIGkpKSwgdGhpcy5qbi5Ecih0LCBhLmtleS5wYXRoLkwoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHhlLnJlc29sdmUobyk7XG4gICAgfSwgdC5wcm90b3R5cGUuWm8gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB4ZS5yZXNvbHZlKHRoaXMuamYoZSkpO1xuICAgIH0sIHQucHJvdG90eXBlLmVhID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IGUgKyAxLCByID0gdGhpcy5LZihuKSwgaSA9IHIgPCAwID8gMCA6IHI7XG4gICAgICAgIC8vIFRoZSByZXF1ZXN0ZWQgYmF0Y2hJZCBtYXkgc3RpbGwgYmUgb3V0IG9mIHJhbmdlIHNvIG5vcm1hbGl6ZSBpdCB0byB0aGVcbiAgICAgICAgLy8gc3RhcnQgb2YgdGhlIHF1ZXVlLlxuICAgICAgICAgICAgICAgIHJldHVybiB4ZS5yZXNvbHZlKHRoaXMuV24ubGVuZ3RoID4gaSA/IHRoaXMuV25baV0gOiBudWxsKTtcbiAgICB9LCB0LnByb3RvdHlwZS5zYSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4geGUucmVzb2x2ZSgwID09PSB0aGlzLlduLmxlbmd0aCA/IC0xIDogdGhpcy5VZiAtIDEpO1xuICAgIH0sIHQucHJvdG90eXBlLmlhID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4geGUucmVzb2x2ZSh0aGlzLlduLnNsaWNlKCkpO1xuICAgIH0sIHQucHJvdG90eXBlLkduID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXMsIHIgPSBuZXcgcnIoZSwgMCksIGkgPSBuZXcgcnIoZSwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKSwgbyA9IFtdO1xuICAgICAgICByZXR1cm4gdGhpcy5RZi5LZShbIHIsIGkgXSwgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gbi5qZih0Lm9jKTtcbiAgICAgICAgICAgIG8ucHVzaChlKTtcbiAgICAgICAgfSkpLCB4ZS5yZXNvbHZlKG8pO1xuICAgIH0sIHQucHJvdG90eXBlLlhuID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXMsIHIgPSBuZXcgUHQoYmUpO1xuICAgICAgICByZXR1cm4gZS5mb3JFYWNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IG5ldyBycih0LCAwKSwgaSA9IG5ldyBycih0LCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgICAgICAgICAgbi5RZi5LZShbIGUsIGkgXSwgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICByID0gci5hZGQodC5vYyk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKSwgeGUucmVzb2x2ZSh0aGlzLkdmKHIpKTtcbiAgICB9LCB0LnByb3RvdHlwZS5uciA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgLy8gVXNlIHRoZSBxdWVyeSBwYXRoIGFzIGEgcHJlZml4IGZvciB0ZXN0aW5nIGlmIGEgZG9jdW1lbnQgbWF0Y2hlcyB0aGVcbiAgICAgICAgLy8gcXVlcnkuXG4gICAgICAgIHZhciBuID0gZS5wYXRoLCByID0gbi5sZW5ndGggKyAxLCBpID0gbjtcbiAgICAgICAgLy8gQ29uc3RydWN0IGEgZG9jdW1lbnQgcmVmZXJlbmNlIGZvciBhY3R1YWxseSBzY2FubmluZyB0aGUgaW5kZXguIFVubGlrZVxuICAgICAgICAvLyB0aGUgcHJlZml4IHRoZSBkb2N1bWVudCBrZXkgaW4gdGhpcyByZWZlcmVuY2UgbXVzdCBoYXZlIGFuIGV2ZW4gbnVtYmVyIG9mXG4gICAgICAgIC8vIHNlZ21lbnRzLiBUaGUgZW1wdHkgc2VnbWVudCBjYW4gYmUgdXNlZCBhIHN1ZmZpeCBvZiB0aGUgcXVlcnkgcGF0aFxuICAgICAgICAvLyBiZWNhdXNlIGl0IHByZWNlZGVzIGFsbCBvdGhlciBzZWdtZW50cyBpbiBhbiBvcmRlcmVkIHRyYXZlcnNhbC5cbiAgICAgICAgICAgICAgICBfLmV0KGkpIHx8IChpID0gaS5jaGlsZChcIlwiKSk7XG4gICAgICAgIHZhciBvID0gbmV3IHJyKG5ldyBfKGkpLCAwKSwgcyA9IG5ldyBQdChiZSk7XG4gICAgICAgIC8vIEZpbmQgdW5pcXVlIGJhdGNoSURzIHJlZmVyZW5jZWQgYnkgYWxsIGRvY3VtZW50cyBwb3RlbnRpYWxseSBtYXRjaGluZyB0aGVcbiAgICAgICAgLy8gcXVlcnkuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuUWYuR2UoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gdC5rZXkucGF0aDtcbiAgICAgICAgICAgIHJldHVybiAhIW4ucShlKSAmJiAoXG4gICAgICAgICAgICAvLyBSb3dzIHdpdGggZG9jdW1lbnQga2V5cyBtb3JlIHRoYW4gb25lIHNlZ21lbnQgbG9uZ2VyIHRoYW4gdGhlIHF1ZXJ5XG4gICAgICAgICAgICAvLyBwYXRoIGNhbid0IGJlIG1hdGNoZXMuIEZvciBleGFtcGxlLCBhIHF1ZXJ5IG9uICdyb29tcycgY2FuJ3QgbWF0Y2hcbiAgICAgICAgICAgIC8vIHRoZSBkb2N1bWVudCAvcm9vbXMvYWJjL21lc3NhZ2VzL3h5eC5cbiAgICAgICAgICAgIC8vIFRPRE8obWNnKTogd2UnbGwgbmVlZCBhIGRpZmZlcmVudCBzY2FubmVyIHdoZW4gd2UgaW1wbGVtZW50XG4gICAgICAgICAgICAvLyBhbmNlc3RvciBxdWVyaWVzLlxuICAgICAgICAgICAgZS5sZW5ndGggPT09IHIgJiYgKHMgPSBzLmFkZCh0Lm9jKSksICEwKTtcbiAgICAgICAgfSksIG8pLCB4ZS5yZXNvbHZlKHRoaXMuR2YocykpO1xuICAgIH0sIHQucHJvdG90eXBlLkdmID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMsIG4gPSBbXTtcbiAgICAgICAgLy8gQ29uc3RydWN0IGFuIGFycmF5IG9mIG1hdGNoaW5nIGJhdGNoZXMsIHNvcnRlZCBieSBiYXRjaElEIHRvIGVuc3VyZSB0aGF0XG4gICAgICAgIC8vIG11bHRpcGxlIG11dGF0aW9ucyBhZmZlY3RpbmcgdGhlIHNhbWUgZG9jdW1lbnQga2V5IGFyZSBhcHBsaWVkIGluIG9yZGVyLlxuICAgICAgICAgICAgICAgIHJldHVybiB0LmZvckVhY2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHZhciByID0gZS5qZih0KTtcbiAgICAgICAgICAgIG51bGwgIT09IHIgJiYgbi5wdXNoKHIpO1xuICAgICAgICB9KSksIG47XG4gICAgfSwgdC5wcm90b3R5cGUucmEgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgbWUoMCA9PT0gdGhpcy5XZihlLmJhdGNoSWQsIFwicmVtb3ZlZFwiKSksIHRoaXMuV24uc2hpZnQoKTtcbiAgICAgICAgdmFyIHIgPSB0aGlzLlFmO1xuICAgICAgICByZXR1cm4geGUuZm9yRWFjaChlLm11dGF0aW9ucywgKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgIHZhciBvID0gbmV3IHJyKGkua2V5LCBlLmJhdGNoSWQpO1xuICAgICAgICAgICAgcmV0dXJuIHIgPSByLmRlbGV0ZShvKSwgbi5oaC5Cbyh0LCBpLmtleSk7XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG4uUWYgPSByO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuaGEgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIC8vIE5vLW9wIHNpbmNlIHRoZSBtZW1vcnkgbXV0YXRpb24gcXVldWUgZG9lcyBub3QgbWFpbnRhaW4gYSBzZXBhcmF0ZSBjYWNoZS5cbiAgICB9LCB0LnByb3RvdHlwZS5DaCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSBuZXcgcnIoZSwgMCksIHIgPSB0aGlzLlFmLnplKG4pO1xuICAgICAgICByZXR1cm4geGUucmVzb2x2ZShlLmlzRXF1YWwociAmJiByLmtleSkpO1xuICAgIH0sIHQucHJvdG90eXBlLm9hID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5Xbi5sZW5ndGgsIHhlLnJlc29sdmUoKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBGaW5kcyB0aGUgaW5kZXggb2YgdGhlIGdpdmVuIGJhdGNoSWQgaW4gdGhlIG11dGF0aW9uIHF1ZXVlIGFuZCBhc3NlcnRzIHRoYXRcbiAgICAgKiB0aGUgcmVzdWx0aW5nIGluZGV4IGlzIHdpdGhpbiB0aGUgYm91bmRzIG9mIHRoZSBxdWV1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBiYXRjaElkIFRoZSBiYXRjaElkIHRvIHNlYXJjaCBmb3JcbiAgICAgKiBAcGFyYW0gYWN0aW9uIEEgZGVzY3JpcHRpb24gb2Ygd2hhdCB0aGUgY2FsbGVyIGlzIGRvaW5nLCBwaHJhc2VkIGluIHBhc3NpdmVcbiAgICAgKiBmb3JtIChlLmcuIFwiYWNrbm93bGVkZ2VkXCIgaW4gYSByb3V0aW5lIHRoYXQgYWNrbm93bGVkZ2VzIGJhdGNoZXMpLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLldmID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5LZih0KTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBGaW5kcyB0aGUgaW5kZXggb2YgdGhlIGdpdmVuIGJhdGNoSWQgaW4gdGhlIG11dGF0aW9uIHF1ZXVlLiBUaGlzIG9wZXJhdGlvblxuICAgICAqIGlzIE8oMSkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIFRoZSBjb21wdXRlZCBpbmRleCBvZiB0aGUgYmF0Y2ggd2l0aCB0aGUgZ2l2ZW4gYmF0Y2hJZCwgYmFzZWQgb25cbiAgICAgKiB0aGUgc3RhdGUgb2YgdGhlIHF1ZXVlLiBOb3RlIHRoaXMgaW5kZXggY2FuIGJlIG5lZ2F0aXZlIGlmIHRoZSByZXF1ZXN0ZWRcbiAgICAgKiBiYXRjaElkIGhhcyBhbHJlYWR5IGJlZW4gcmVtdm9lZCBmcm9tIHRoZSBxdWV1ZSBvciBwYXN0IHRoZSBlbmQgb2YgdGhlXG4gICAgICogcXVldWUgaWYgdGhlIGJhdGNoSWQgaXMgbGFyZ2VyIHRoYW4gdGhlIGxhc3QgYWRkZWQgYmF0Y2guXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuS2YgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiAwID09PSB0aGlzLlduLmxlbmd0aCA/IDAgOiB0IC0gdGhpcy5XblswXS5iYXRjaElkO1xuICAgICAgICAvLyBFeGFtaW5lIHRoZSBmcm9udCBvZiB0aGUgcXVldWUgdG8gZmlndXJlIG91dCB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZVxuICAgICAgICAvLyBiYXRjaElkIGFuZCBpbmRleGVzIGluIHRoZSBhcnJheS4gTm90ZSB0aGF0IHNpbmNlIHRoZSBxdWV1ZSBpcyBvcmRlcmVkXG4gICAgICAgIC8vIGJ5IGJhdGNoSWQsIGlmIHRoZSBmaXJzdCBiYXRjaCBoYXMgYSBsYXJnZXIgYmF0Y2hJZCB0aGVuIHRoZSByZXF1ZXN0ZWRcbiAgICAgICAgLy8gYmF0Y2hJZCBkb2Vzbid0IGV4aXN0IGluIHRoZSBxdWV1ZS5cbiAgICAgICAgfSwgXG4gICAgLyoqXG4gICAgICogQSB2ZXJzaW9uIG9mIGxvb2t1cE11dGF0aW9uQmF0Y2ggdGhhdCBkb2Vzbid0IHJldHVybiBhIHByb21pc2UsIHRoaXMgbWFrZXNcbiAgICAgKiBvdGhlciBmdW5jdGlvbnMgdGhhdCB1c2VzIHRoaXMgY29kZSBlYXNpZXIgdG8gcmVhZCBhbmQgbW9yZSBlZmZpY2VudC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5qZiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLktmKHQpO1xuICAgICAgICByZXR1cm4gZSA8IDAgfHwgZSA+PSB0aGlzLlduLmxlbmd0aCA/IG51bGwgOiB0aGlzLlduW2VdO1xuICAgIH0sIHQ7XG59KCksIFRpID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gc2l6ZXIgVXNlZCB0byBhc3Nlc3MgdGhlIHNpemUgb2YgYSBkb2N1bWVudC4gRm9yIGVhZ2VyIEdDLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGp1c3RcbiAgICAgKiByZXR1cm4gMCB0byBhdm9pZCB1bm5lY2Vzc2FyaWx5IGRvaW5nIHRoZSB3b3JrIG9mIGNhbGN1bGF0aW5nIHRoZSBzaXplLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHQodCwgZSkge1xuICAgICAgICB0aGlzLmpuID0gdCwgdGhpcy56ZiA9IGUsIFxuICAgICAgICAvKiogVW5kZXJseWluZyBjYWNoZSBvZiBkb2N1bWVudHMgYW5kIHRoZWlyIHJlYWQgdGltZXMuICovXG4gICAgICAgIHRoaXMuZG9jcyA9IG5ldyBMdChfLk4pLCBcbiAgICAgICAgLyoqIFNpemUgb2YgYWxsIGNhY2hlZCBkb2N1bWVudHMuICovXG4gICAgICAgIHRoaXMuc2l6ZSA9IDBcbiAgICAgICAgLyoqXG4gICAgICogQWRkcyB0aGUgc3VwcGxpZWQgZW50cnkgdG8gdGhlIGNhY2hlIGFuZCB1cGRhdGVzIHRoZSBjYWNoZSBzaXplIGFzIGFwcHJvcHJpYXRlLlxuICAgICAqXG4gICAgICogQWxsIGNhbGxzIG9mIGBhZGRFbnRyeWAgIGFyZSByZXF1aXJlZCB0byBnbyB0aHJvdWdoIHRoZSBSZW1vdGVEb2N1bWVudENoYW5nZUJ1ZmZlclxuICAgICAqIHJldHVybmVkIGJ5IGBuZXdDaGFuZ2VCdWZmZXIoKWAuXG4gICAgICovO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuTm4gPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHZhciByID0gZS5rZXksIGkgPSB0aGlzLmRvY3MuZ2V0KHIpLCBvID0gaSA/IGkuc2l6ZSA6IDAsIHMgPSB0aGlzLnpmKGUpO1xuICAgICAgICByZXR1cm4gdGhpcy5kb2NzID0gdGhpcy5kb2NzLkFlKHIsIHtcbiAgICAgICAgICAgIE1yOiBlLFxuICAgICAgICAgICAgc2l6ZTogcyxcbiAgICAgICAgICAgIHJlYWRUaW1lOiBuXG4gICAgICAgIH0pLCB0aGlzLnNpemUgKz0gcyAtIG8sIHRoaXMuam4uRHIodCwgci5wYXRoLkwoKSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgc3BlY2lmaWVkIGVudHJ5IGZyb20gdGhlIGNhY2hlIGFuZCB1cGRhdGVzIHRoZSBjYWNoZSBzaXplIGFzIGFwcHJvcHJpYXRlLlxuICAgICAqXG4gICAgICogQWxsIGNhbGxzIG9mIGByZW1vdmVFbnRyeWAgYXJlIHJlcXVpcmVkIHRvIGdvIHRocm91Z2ggdGhlIFJlbW90ZURvY3VtZW50Q2hhbmdlQnVmZmVyXG4gICAgICogcmV0dXJuZWQgYnkgYG5ld0NoYW5nZUJ1ZmZlcigpYC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5rbiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLmRvY3MuZ2V0KHQpO1xuICAgICAgICBlICYmICh0aGlzLmRvY3MgPSB0aGlzLmRvY3MucmVtb3ZlKHQpLCB0aGlzLnNpemUgLT0gZS5zaXplKTtcbiAgICB9LCB0LnByb3RvdHlwZS5MbiA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLmRvY3MuZ2V0KGUpO1xuICAgICAgICByZXR1cm4geGUucmVzb2x2ZShuID8gbi5NciA6IG51bGwpO1xuICAgIH0sIHQucHJvdG90eXBlLmdldEVudHJpZXMgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcywgciA9IE10KCk7XG4gICAgICAgIHJldHVybiBlLmZvckVhY2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gbi5kb2NzLmdldCh0KTtcbiAgICAgICAgICAgIHIgPSByLkFlKHQsIGUgPyBlLk1yIDogbnVsbCk7XG4gICAgICAgIH0pKSwgeGUucmVzb2x2ZShyKTtcbiAgICB9LCB0LnByb3RvdHlwZS5abiA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgZm9yICh2YXIgciA9IEZ0KCksIGkgPSBuZXcgXyhlLnBhdGguY2hpbGQoXCJcIikpLCBvID0gdGhpcy5kb2NzLnZlKGkpXG4gICAgICAgIC8vIERvY3VtZW50cyBhcmUgb3JkZXJlZCBieSBrZXksIHNvIHdlIGNhbiB1c2UgYSBwcmVmaXggc2NhbiB0byBuYXJyb3cgZG93blxuICAgICAgICAvLyB0aGUgZG9jdW1lbnRzIHdlIG5lZWQgdG8gbWF0Y2ggdGhlIHF1ZXJ5IGFnYWluc3QuXG4gICAgICAgIDsgby4kZSgpOyApIHtcbiAgICAgICAgICAgIHZhciBzID0gby5OZSgpLCB1ID0gcy5rZXksIGEgPSBzLnZhbHVlLCBoID0gYS5NciwgYyA9IGEucmVhZFRpbWU7XG4gICAgICAgICAgICBpZiAoIWUucGF0aC5xKHUucGF0aCkpIGJyZWFrO1xuICAgICAgICAgICAgYy5TKG4pIDw9IDAgfHwgaCBpbnN0YW5jZW9mIHl0ICYmIGUubWF0Y2hlcyhoKSAmJiAociA9IHIuQWUoaC5rZXksIGgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geGUucmVzb2x2ZShyKTtcbiAgICB9LCB0LnByb3RvdHlwZS5IZiA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHhlLmZvckVhY2godGhpcy5kb2NzLCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIGUodCk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5ZciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgLy8gYHRyYWNrUmVtb3ZhbHNgIGlzIGlnbm9yZXMgc2luY2UgdGhlIE1lbW9yeVJlbW90ZURvY3VtZW50Q2FjaGUga2VlcHNcbiAgICAgICAgLy8gYSBzZXBhcmF0ZSBjaGFuZ2Vsb2cgYW5kIGRvZXMgbm90IG5lZWQgc3BlY2lhbCBoYW5kbGluZyBmb3IgcmVtb3ZhbHMuXG4gICAgICAgIHJldHVybiBuZXcgdC5Kcih0aGlzKTtcbiAgICB9LCB0LnByb3RvdHlwZS5aciA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHhlLnJlc29sdmUodGhpcy5zaXplKTtcbiAgICB9LCB0O1xufSgpO1xuXG4vKipcbiAqIEhvbGRzIHRoZSBzdGF0ZSBvZiBhIHF1ZXJ5IHRhcmdldCwgaW5jbHVkaW5nIGl0cyB0YXJnZXQgSUQgYW5kIHdoZXRoZXIgdGhlXG4gKiB0YXJnZXQgaXMgJ25vdC1jdXJyZW50JywgJ2N1cnJlbnQnIG9yICdyZWplY3RlZCcuXG4gKi9cbi8vIFZpc2libGUgZm9yIHRlc3Rpbmdcbi8qKlxuICogSGFuZGxlcyB0aGUgZGV0YWlscyBvZiBhZGRpbmcgYW5kIHVwZGF0aW5nIGRvY3VtZW50cyBpbiB0aGUgTWVtb3J5UmVtb3RlRG9jdW1lbnRDYWNoZS5cbiAqL1xuVGkuSnIgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKHQpIHtcbiAgICBmdW5jdGlvbiBuKGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICByZXR1cm4gKG4gPSB0LmNhbGwodGhpcykgfHwgdGhpcykudGggPSBlLCBuO1xuICAgIH1cbiAgICByZXR1cm4gZS5fX2V4dGVuZHMobiwgdCksIG4ucHJvdG90eXBlLnhuID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMsIG4gPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuRG4uZm9yRWFjaCgoZnVuY3Rpb24ociwgaSkge1xuICAgICAgICAgICAgaSA/IG4ucHVzaChlLnRoLk5uKHQsIGksIGUucmVhZFRpbWUpKSA6IGUudGgua24ocik7XG4gICAgICAgIH0pKSwgeGUudm4obik7XG4gICAgfSwgbi5wcm90b3R5cGUuTW4gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRoLkxuKHQsIGUpO1xuICAgIH0sIG4ucHJvdG90eXBlLk9uID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy50aC5nZXRFbnRyaWVzKHQsIGUpO1xuICAgIH0sIG47XG59KFNlKTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBJaSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0KSB7XG4gICAgICAgIHRoaXMucGVyc2lzdGVuY2UgPSB0LCBcbiAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBNYXBzIGEgdGFyZ2V0IHRvIHRoZSBkYXRhIGFib3V0IHRoYXQgdGFyZ2V0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ZZiA9IG5ldyBBZSgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIHQuY2Fub25pY2FsSWQoKTtcbiAgICAgICAgfSkpLCBcbiAgICAgICAgLyoqIFRoZSBsYXN0IHJlY2VpdmVkIHNuYXBzaG90IHZlcnNpb24uICovXG4gICAgICAgIHRoaXMubGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbiA9IGcubWluKCksIFxuICAgICAgICAvKiogVGhlIGhpZ2hlc3QgbnVtYmVyZWQgdGFyZ2V0IElEIGVuY291bnRlcmVkLiAqL1xuICAgICAgICB0aGlzLmhpZ2hlc3RUYXJnZXRJZCA9IDAsIFxuICAgICAgICAvKiogVGhlIGhpZ2hlc3Qgc2VxdWVuY2UgbnVtYmVyIGVuY291bnRlcmVkLiAqL1xuICAgICAgICB0aGlzLkpmID0gMCwgXG4gICAgICAgIC8qKlxuICAgICAgICAgICAgICogQSBvcmRlcmVkIGJpZGlyZWN0aW9uYWwgbWFwcGluZyBiZXR3ZWVuIGRvY3VtZW50cyBhbmQgdGhlIHJlbW90ZSB0YXJnZXRcbiAgICAgICAgICAgICAqIElEcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICB0aGlzLlhmID0gbmV3IG5yLCB0aGlzLnRhcmdldENvdW50ID0gMCwgdGhpcy5aZiA9IEhlLm5oKCk7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5qcyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWWYuZm9yRWFjaCgoZnVuY3Rpb24odCwgbikge1xuICAgICAgICAgICAgcmV0dXJuIGUobik7XG4gICAgICAgIH0pKSwgeGUucmVzb2x2ZSgpO1xuICAgIH0sIHQucHJvdG90eXBlLl9oID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4geGUucmVzb2x2ZSh0aGlzLmxhc3RSZW1vdGVTbmFwc2hvdFZlcnNpb24pO1xuICAgIH0sIHQucHJvdG90eXBlLmxoID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4geGUucmVzb2x2ZSh0aGlzLkpmKTtcbiAgICB9LCB0LnByb3RvdHlwZS5vaCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGlnaGVzdFRhcmdldElkID0gdGhpcy5aZi5uZXh0KCksIHhlLnJlc29sdmUodGhpcy5oaWdoZXN0VGFyZ2V0SWQpO1xuICAgIH0sIHQucHJvdG90eXBlLmRoID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICByZXR1cm4gbiAmJiAodGhpcy5sYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uID0gbiksIGUgPiB0aGlzLkpmICYmICh0aGlzLkpmID0gZSksIFxuICAgICAgICB4ZS5yZXNvbHZlKCk7XG4gICAgfSwgdC5wcm90b3R5cGUuVGggPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuWWYuc2V0KHQudGFyZ2V0LCB0KTtcbiAgICAgICAgdmFyIGUgPSB0LnRhcmdldElkO1xuICAgICAgICBlID4gdGhpcy5oaWdoZXN0VGFyZ2V0SWQgJiYgKHRoaXMuWmYgPSBuZXcgSGUoZSksIHRoaXMuaGlnaGVzdFRhcmdldElkID0gZSksIHQuc2VxdWVuY2VOdW1iZXIgPiB0aGlzLkpmICYmICh0aGlzLkpmID0gdC5zZXF1ZW5jZU51bWJlcik7XG4gICAgfSwgdC5wcm90b3R5cGUuZmggPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlRoKGUpLCB0aGlzLnRhcmdldENvdW50ICs9IDEsIHhlLnJlc29sdmUoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5JaCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuVGgoZSksIHhlLnJlc29sdmUoKTtcbiAgICB9LCB0LnByb3RvdHlwZS53aCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWWYuZGVsZXRlKGUudGFyZ2V0KSwgdGhpcy5YZi5uYyhlLnRhcmdldElkKSwgdGhpcy50YXJnZXRDb3VudCAtPSAxLCBcbiAgICAgICAgeGUucmVzb2x2ZSgpO1xuICAgIH0sIHQucHJvdG90eXBlLkFoID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXMsIGkgPSAwLCBvID0gW107XG4gICAgICAgIHJldHVybiB0aGlzLllmLmZvckVhY2goKGZ1bmN0aW9uKHMsIHUpIHtcbiAgICAgICAgICAgIHUuc2VxdWVuY2VOdW1iZXIgPD0gZSAmJiBudWxsID09PSBuLmdldCh1LnRhcmdldElkKSAmJiAoci5ZZi5kZWxldGUocyksIG8ucHVzaChyLlJoKHQsIHUudGFyZ2V0SWQpKSwgXG4gICAgICAgICAgICBpKyspO1xuICAgICAgICB9KSksIHhlLnZuKG8pLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5WaCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHhlLnJlc29sdmUodGhpcy50YXJnZXRDb3VudCk7XG4gICAgfSwgdC5wcm90b3R5cGUuZ2ggPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcy5ZZi5nZXQoZSkgfHwgbnVsbDtcbiAgICAgICAgcmV0dXJuIHhlLnJlc29sdmUobik7XG4gICAgfSwgdC5wcm90b3R5cGUucGggPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlhmLmVjKGUsIG4pLCB4ZS5yZXNvbHZlKCk7XG4gICAgfSwgdC5wcm90b3R5cGUuYmggPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMuWGYuaWMoZSwgbik7XG4gICAgICAgIHZhciByID0gdGhpcy5wZXJzaXN0ZW5jZS5oaCwgaSA9IFtdO1xuICAgICAgICByZXR1cm4gciAmJiBlLmZvckVhY2goKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGkucHVzaChyLkJvKHQsIGUpKTtcbiAgICAgICAgfSkpLCB4ZS52bihpKTtcbiAgICB9LCB0LnByb3RvdHlwZS5SaCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWGYubmMoZSksIHhlLnJlc29sdmUoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5TaCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLlhmLmhjKGUpO1xuICAgICAgICByZXR1cm4geGUucmVzb2x2ZShuKTtcbiAgICB9LCB0LnByb3RvdHlwZS5DaCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHhlLnJlc29sdmUodGhpcy5YZi5DaChlKSk7XG4gICAgfSwgdDtcbn0oKSwgTmkgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIC8qKlxuICAgICAqIFRoZSBjb25zdHJ1Y3RvciBhY2NlcHRzIGEgZmFjdG9yeSBmb3IgY3JlYXRpbmcgYSByZWZlcmVuY2UgZGVsZWdhdGUuIFRoaXNcbiAgICAgKiBhbGxvd3MgYm90aCB0aGUgZGVsZWdhdGUgYW5kIHRoaXMgaW5zdGFuY2UgdG8gaGF2ZSBzdHJvbmcgcmVmZXJlbmNlcyB0b1xuICAgICAqIGVhY2ggb3RoZXIgd2l0aG91dCBoYXZpbmcgbnVsbGFibGUgZmllbGRzIHRoYXQgd291bGQgdGhlbiBuZWVkIHRvIGJlXG4gICAgICogY2hlY2tlZCBvciBhc3NlcnRlZCBvbiBldmVyeSBhY2Nlc3MuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdCh0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgdGhpcy50VCA9IHt9LCB0aGlzLkJoID0gbmV3IFBlKDApLCB0aGlzLnFoID0gITEsIHRoaXMucWggPSAhMCwgdGhpcy5oaCA9IHQodGhpcyksIFxuICAgICAgICB0aGlzLlloID0gbmV3IElpKHRoaXMpLCB0aGlzLmpuID0gbmV3IEJlLCB0aGlzLlFuID0gbmV3IFRpKHRoaXMuam4sIChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gZS5oaC5lVCh0KTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH0sIHQucHJvdG90eXBlLm1vID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIE5vIGR1cmFibGUgc3RhdGUgdG8gZW5zdXJlIGlzIGNsb3NlZCBvbiBzaHV0ZG93bi5cbiAgICAgICAgcmV0dXJuIHRoaXMucWggPSAhMSwgUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcInJvXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnFoO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCB0LnByb3RvdHlwZS5obyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBObyBvcC5cbiAgICB9LCB0LnByb3RvdHlwZS5GbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5qbjtcbiAgICB9LCB0LnByb3RvdHlwZS52byA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLnRUW3QucygpXTtcbiAgICAgICAgcmV0dXJuIGUgfHwgKGUgPSBuZXcgX2kodGhpcy5qbiwgdGhpcy5oaCksIHRoaXMudFRbdC5zKCldID0gZSksIGU7XG4gICAgfSwgdC5wcm90b3R5cGUuRG8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWWg7XG4gICAgfSwgdC5wcm90b3R5cGUuQ28gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuUW47XG4gICAgfSwgdC5wcm90b3R5cGUucnVuVHJhbnNhY3Rpb24gPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHZhciByID0gdGhpcztcbiAgICAgICAgZGUoXCJNZW1vcnlQZXJzaXN0ZW5jZVwiLCBcIlN0YXJ0aW5nIHRyYW5zYWN0aW9uOlwiLCB0KTtcbiAgICAgICAgdmFyIGkgPSBuZXcgQWkodGhpcy5CaC5uZXh0KCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5oaC5zVCgpLCBuKGkpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiByLmhoLmlUKGkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSkueW4oKS50aGVuKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gaS5VbigpLCB0O1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUublQgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB4ZS5TbihPYmplY3QudmFsdWVzKHRoaXMudFQpLm1hcCgoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuLkNoKHQsIGUpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkpKTtcbiAgICB9LCB0O1xufSgpLCBBaSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24odCkge1xuICAgIGZ1bmN0aW9uIG4oZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIHJldHVybiAobiA9IHQuY2FsbCh0aGlzKSB8fCB0aGlzKS5PaCA9IGUsIG47XG4gICAgfVxuICAgIHJldHVybiBlLl9fZXh0ZW5kcyhuLCB0KSwgbjtcbn0oTGUpLCBraSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0KSB7XG4gICAgICAgIHRoaXMucGVyc2lzdGVuY2UgPSB0LCBcbiAgICAgICAgLyoqIFRyYWNrcyBhbGwgZG9jdW1lbnRzIHRoYXQgYXJlIGFjdGl2ZSBpbiBRdWVyeSB2aWV3cy4gKi9cbiAgICAgICAgdGhpcy5yVCA9IG5ldyBuciwgXG4gICAgICAgIC8qKiBUaGUgbGlzdCBvZiBkb2N1bWVudHMgdGhhdCBhcmUgcG90ZW50aWFsbHkgR0NlZCBhZnRlciBlYWNoIHRyYW5zYWN0aW9uLiAqL1xuICAgICAgICB0aGlzLmhUID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHQub1QgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBuZXcgdChlKTtcbiAgICB9LCBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwiYVRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaFQpIHJldHVybiB0aGlzLmhUO1xuICAgICAgICAgICAgdGhyb3cgZ2UoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgdC5wcm90b3R5cGUueWggPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJULnloKG4sIGUpLCB0aGlzLmFULmRlbGV0ZShuKSwgeGUucmVzb2x2ZSgpO1xuICAgIH0sIHQucHJvdG90eXBlLnZoID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICByZXR1cm4gdGhpcy5yVC52aChuLCBlKSwgdGhpcy5hVC5hZGQobiksIHhlLnJlc29sdmUoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5CbyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYVQuYWRkKGUpLCB4ZS5yZXNvbHZlKCk7XG4gICAgfSwgdC5wcm90b3R5cGUucmVtb3ZlVGFyZ2V0ID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIHRoaXMuclQubmMoZS50YXJnZXRJZCkuZm9yRWFjaCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIG4uYVQuYWRkKHQpO1xuICAgICAgICB9KSk7XG4gICAgICAgIHZhciByID0gdGhpcy5wZXJzaXN0ZW5jZS5EbygpO1xuICAgICAgICByZXR1cm4gci5TaCh0LCBlLnRhcmdldElkKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB0LmZvckVhY2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbi5hVC5hZGQodCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiByLndoKHQsIGUpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuc1QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5oVCA9IG5ldyBTZXQ7XG4gICAgfSwgdC5wcm90b3R5cGUuaVQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcywgbiA9IHRoaXMucGVyc2lzdGVuY2UuQ28oKS5ZcigpO1xuICAgICAgICAvLyBSZW1vdmUgbmV3bHkgb3JwaGFuZWQgZG9jdW1lbnRzLlxuICAgICAgICAgICAgICAgIHJldHVybiB4ZS5mb3JFYWNoKHRoaXMuYVQsIChmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICByZXR1cm4gZS51VCh0LCByKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdCB8fCBuLmtuKHIpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZS5oVCA9IG51bGwsIG4uYXBwbHkodCk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5XbyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy51VCh0LCBlKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB0ID8gbi5hVC5kZWxldGUoZSkgOiBuLmFULmFkZChlKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLmVUID0gZnVuY3Rpb24odCkge1xuICAgICAgICAvLyBGb3IgZWFnZXIgR0MsIHdlIGRvbid0IGNhcmUgYWJvdXQgdGhlIGRvY3VtZW50IHNpemUsIHRoZXJlIGFyZSBubyBzaXplIHRocmVzaG9sZHMuXG4gICAgICAgIHJldHVybiAwO1xuICAgIH0sIHQucHJvdG90eXBlLnVUID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIHJldHVybiB4ZS5TbihbIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHhlLnJlc29sdmUobi5yVC5DaChlKSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG4ucGVyc2lzdGVuY2UuRG8oKS5DaCh0LCBlKTtcbiAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbi5wZXJzaXN0ZW5jZS5uVCh0LCBlKTtcbiAgICAgICAgfSBdKTtcbiAgICB9LCB0O1xufSgpLCBEaSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCgpIHt9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBlLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGUubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuVWQgPSB0aGlzLmNUKHQpLCB0aGlzLnBlcnNpc3RlbmNlID0gdGhpcy5fVCh0KSwgWyA0IC8qeWllbGQqLyAsIHRoaXMucGVyc2lzdGVuY2Uuc3RhcnQoKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNlbnQoKSwgdGhpcy5sVCA9IHRoaXMuZFQodCksIHRoaXMuTl8gPSB0aGlzLmZUKHQpLCB0aGlzLiRkID0gdGhpcy5UVCh0KSwgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub2wgPSB0aGlzLkVUKHQpLCB0aGlzLklUID0gdGhpcy53VCh0KSwgdGhpcy5VZC5nXyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLm9sLkRkKHQsIDEgLyogU2hhcmVkQ2xpZW50U3RhdGUgKi8pO1xuICAgICAgICAgICAgICAgICAgICB9LCB0aGlzLiRkLm9sID0gdGhpcy5vbCwgWyA0IC8qeWllbGQqLyAsIHRoaXMuTl8uc3RhcnQoKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNlbnQoKSwgWyA0IC8qeWllbGQqLyAsIHRoaXMuVWQuc3RhcnQoKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNlbnQoKSwgWyA0IC8qeWllbGQqLyAsIHRoaXMuJGQuc3RhcnQoKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNlbnQoKSwgWyA0IC8qeWllbGQqLyAsIHRoaXMuJGQuVmwodGhpcy5vbC50ZikgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5zZW50KCksIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUud1QgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBuZXcgd2kodGhpcy5vbCk7XG4gICAgfSwgdC5wcm90b3R5cGUuZFQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sIHQucHJvdG90eXBlLmZUID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gbmV3IFpuKHRoaXMucGVyc2lzdGVuY2UsIG5ldyBiaSwgdC5SVCk7XG4gICAgfSwgdC5wcm90b3R5cGUuX1QgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBuZXcgTmkoa2kub1QpO1xuICAgIH0sIHQucHJvdG90eXBlLlRUID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgWnIodGhpcy5OXywgdC5UXywgdC5BYSwgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBlLm9sLkRkKHQsIDAgLyogUmVtb3RlU3RvcmUgKi8pO1xuICAgICAgICB9KSwgdC5wbGF0Zm9ybS5BVCgpKTtcbiAgICB9LCB0LnByb3RvdHlwZS5jVCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBoaTtcbiAgICB9LCB0LnByb3RvdHlwZS5FVCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB2aSh0aGlzLk5fLCB0aGlzLiRkLCB0aGlzLlVkLCB0LlJULCB0LlFkKTtcbiAgICB9LCB0LnByb3RvdHlwZS5jbGVhclBlcnNpc3RlbmNlID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aHJvdyBuZXcgYyhoLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiWW91IGFyZSB1c2luZyB0aGUgbWVtb3J5LW9ubHkgYnVpbGQgb2YgRmlyZXN0b3JlLiBQZXJzaXN0ZW5jZSBzdXBwb3J0IGlzIG9ubHkgYXZhaWxhYmxlIHZpYSB0aGUgQGZpcmViYXNlL2ZpcmVzdG9yZSBidW5kbGUgb3IgdGhlIGZpcmViYXNlLWZpcmVzdG9yZS5qcyBidWlsZC5cIik7XG4gICAgfSwgdDtcbn0oKSwgeGkgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKHQpIHtcbiAgICBmdW5jdGlvbiBuKCkge1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gdCAmJiB0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGUuX19leHRlbmRzKG4sIHQpLCBuLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24obikge1xuICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciByID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChpLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDQgLyp5aWVsZCovICwgdC5wcm90b3R5cGUuaW5pdGlhbGl6ZS5jYWxsKHRoaXMsIG4pIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgLy8gTk9URTogVGhpcyB3aWxsIGltbWVkaWF0ZWx5IGNhbGwgdGhlIGxpc3RlbmVyLCBzbyB3ZSBtYWtlIHN1cmUgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGl0IGFmdGVyIGxvY2FsU3RvcmUgLyByZW1vdGVTdG9yZSBhcmUgc3RhcnRlZC5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkuc2VudCgpLCBbIDQgLyp5aWVsZCovICwgdGhpcy5wZXJzaXN0ZW5jZS5ubygoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHIsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgNCAvKnlpZWxkKi8gLCB0aGlzLm9sLlZsKHQpIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5zZW50KCksIHRoaXMubFQgJiYgKHQgJiYgIXRoaXMubFQucm8gPyB0aGlzLmxULnN0YXJ0KHRoaXMuTl8pIDogdCB8fCB0aGlzLmxULnN0b3AoKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgLy8gTk9URTogVGhpcyB3aWxsIGltbWVkaWF0ZWx5IGNhbGwgdGhlIGxpc3RlbmVyLCBzbyB3ZSBtYWtlIHN1cmUgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGl0IGFmdGVyIGxvY2FsU3RvcmUgLyByZW1vdGVTdG9yZSBhcmUgc3RhcnRlZC5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkuc2VudCgpLCBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIG4ucHJvdG90eXBlLmZUID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gbmV3IHRyKHRoaXMucGVyc2lzdGVuY2UsIG5ldyBiaSwgdC5SVCk7XG4gICAgfSwgbi5wcm90b3R5cGUuRVQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gbmV3IGdpKHRoaXMuTl8sIHRoaXMuJGQsIHRoaXMuVWQsIHQuUlQsIHQuUWQpO1xuICAgICAgICByZXR1cm4gdGhpcy5VZCBpbnN0YW5jZW9mIGFpICYmICh0aGlzLlVkLm9sID0gZSksIGU7XG4gICAgfSwgbi5wcm90b3R5cGUuZFQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5wZXJzaXN0ZW5jZS5oaC5rbztcbiAgICAgICAgcmV0dXJuIG5ldyBIbihlLCB0LkFhKTtcbiAgICB9LCBuLnByb3RvdHlwZS5fVCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSBzbi4kbyh0Lm1UKSwgbiA9IHQucGxhdGZvcm0uYmModC5tVC5paSk7XG4gICAgICAgIHJldHVybiBuZXcgc24odC5QVC5zeW5jaHJvbml6ZVRhYnMsIGUsIHQuY2xpZW50SWQsIHQucGxhdGZvcm0sIEpuLmh1KHQuUFQuY2FjaGVTaXplQnl0ZXMpLCB0LkFhLCBuLCB0aGlzLlVkKTtcbiAgICB9LCBuLnByb3RvdHlwZS5jVCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgaWYgKHQuUFQuVlQgJiYgdC5QVC5zeW5jaHJvbml6ZVRhYnMpIHtcbiAgICAgICAgICAgIGlmICghYWkuR2godC5wbGF0Zm9ybSkpIHRocm93IG5ldyBjKGguVU5JTVBMRU1FTlRFRCwgXCJJbmRleGVkREIgcGVyc2lzdGVuY2UgaXMgb25seSBhdmFpbGFibGUgb24gcGxhdGZvcm1zIHRoYXQgc3VwcG9ydCBMb2NhbFN0b3JhZ2UuXCIpO1xuICAgICAgICAgICAgdmFyIGUgPSBzbi4kbyh0Lm1UKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgYWkodC5BYSwgdC5wbGF0Zm9ybSwgZSwgdC5jbGllbnRJZCwgdC5SVCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBoaTtcbiAgICB9LCBuLnByb3RvdHlwZS5jbGVhclBlcnNpc3RlbmNlID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHNuLiRvKHQpO1xuICAgICAgICByZXR1cm4gc24uY2xlYXJQZXJzaXN0ZW5jZShlKTtcbiAgICB9LCBuO1xufShEaSksIFNpID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQsIGUsIG4sIFxuICAgIC8qKlxuICAgICAqIEFzeW5jaHJvbm91cyBxdWV1ZSByZXNwb25zaWJsZSBmb3IgYWxsIG9mIG91ciBpbnRlcm5hbCBwcm9jZXNzaW5nLiBXaGVuXG4gICAgICogd2UgZ2V0IGluY29taW5nIHdvcmsgZnJvbSB0aGUgdXNlciAodmlhIHB1YmxpYyBBUEkpIG9yIHRoZSBuZXR3b3JrXG4gICAgICogKGluY29taW5nIEdSUEMgbWVzc2FnZXMpLCB3ZSBzaG91bGQgYWx3YXlzIHNjaGVkdWxlIG9udG8gdGhpcyBxdWV1ZS5cbiAgICAgKiBUaGlzIGVuc3VyZXMgYWxsIG9mIG91ciB3b3JrIGlzIHByb3Blcmx5IHNlcmlhbGl6ZWQgKGUuZy4gd2UgZG9uJ3RcbiAgICAgKiBzdGFydCBwcm9jZXNzaW5nIGEgbmV3IG9wZXJhdGlvbiB3aGlsZSB0aGUgcHJldmlvdXMgb25lIGlzIHdhaXRpbmcgZm9yXG4gICAgICogYW4gYXN5bmMgSS9PIHRvIGNvbXBsZXRlKS5cbiAgICAgKi9cbiAgICByKSB7XG4gICAgICAgIHRoaXMucGxhdGZvcm0gPSB0LCB0aGlzLm1UID0gZSwgdGhpcy5jcmVkZW50aWFscyA9IG4sIHRoaXMuQWEgPSByLCB0aGlzLmNsaWVudElkID0gRWUuY24oKVxuICAgICAgICAvKipcbiAgICAgKiBTdGFydHMgdXAgdGhlIEZpcmVzdG9yZUNsaWVudCwgcmV0dXJuaW5nIG9ubHkgd2hldGhlciBvciBub3QgZW5hYmxpbmdcbiAgICAgKiBwZXJzaXN0ZW5jZSBzdWNjZWVkZWQuXG4gICAgICpcbiAgICAgKiBUaGUgaW50ZW50IGhlcmUgaXMgdG8gXCJkbyB0aGUgcmlnaHQgdGhpbmdcIiBhcyBmYXIgYXMgdXNlcnMgYXJlIGNvbmNlcm5lZC5cbiAgICAgKiBOYW1lbHksIGluIGNhc2VzIHdoZXJlIG9mZmxpbmUgcGVyc2lzdGVuY2UgaXMgcmVxdWVzdGVkIGFuZCBwb3NzaWJsZSxcbiAgICAgKiBlbmFibGUgaXQsIGJ1dCBvdGhlcndpc2UgZmFsbCBiYWNrIHRvIHBlcnNpc3RlbmNlIGRpc2FibGVkLiBGb3IgdGhlIG1vc3RcbiAgICAgKiBwYXJ0IHdlIGV4cGVjdCB0aGlzIHRvIHN1Y2NlZWQgb25lIHdheSBvciB0aGUgb3RoZXIgc28gd2UgZG9uJ3QgZXhwZWN0IG91clxuICAgICAqIHVzZXJzIHRvIGFjdHVhbGx5IHdhaXQgb24gdGhlIGZpcmVzdG9yZS5lbmFibGVQZXJzaXN0ZW5jZSBQcm9taXNlIHNpbmNlXG4gICAgICogdGhleSBnZW5lcmFsbHkgd29uJ3QgY2FyZS5cbiAgICAgKlxuICAgICAqIE9mIGNvdXJzZSBzb21lIHVzZXJzIGFjdHVhbGx5IGRvIGNhcmUgYWJvdXQgd2hldGhlciBvciBub3QgcGVyc2lzdGVuY2VcbiAgICAgKiB3YXMgc3VjY2Vzc2Z1bGx5IGVuYWJsZWQsIHNvIHRoZSBQcm9taXNlIHJldHVybmVkIGZyb20gdGhpcyBtZXRob2RcbiAgICAgKiBpbmRpY2F0ZXMgdGhpcyBvdXRjb21lLlxuICAgICAqXG4gICAgICogVGhpcyBwcmVzZW50cyBhIHByb2JsZW0gdGhvdWdoOiBldmVuIGJlZm9yZSBlbmFibGVQZXJzaXN0ZW5jZSByZXNvbHZlcyBvclxuICAgICAqIHJlamVjdHMsIHVzZXJzIG1heSBoYXZlIG1hZGUgY2FsbHMgdG8gZS5nLiBmaXJlc3RvcmUuY29sbGVjdGlvbigpIHdoaWNoXG4gICAgICogbWVhbnMgdGhhdCB0aGUgRmlyZXN0b3JlQ2xpZW50IGluIHRoZXJlIHdpbGwgYmUgYXZhaWxhYmxlIGFuZCB3aWxsIGJlXG4gICAgICogZW5xdWV1aW5nIGFjdGlvbnMgb24gdGhlIGFzeW5jIHF1ZXVlLlxuICAgICAqXG4gICAgICogTWVhbndoaWxlIGFueSBmYWlsdXJlIG9mIGFuIG9wZXJhdGlvbiBvbiB0aGUgYXN5bmMgcXVldWUgY2F1c2VzIGl0IHRvXG4gICAgICogcGFuaWMgYW5kIHJlamVjdCBhbnkgZnVydGhlciB3b3JrLCBvbiB0aGUgcHJlbWlzZSB0aGF0IHVuaGFuZGxlZCBlcnJvcnNcbiAgICAgKiBhcmUgZmF0YWwuXG4gICAgICpcbiAgICAgKiBDb25zZXF1ZW50bHkgdGhlIGZhbGxiYWNrIGlzIGhhbmRsZWQgaW50ZXJuYWxseSBoZXJlIGluIHN0YXJ0LCBhbmQgaWYgdGhlXG4gICAgICogZmFsbGJhY2sgc3VjY2VlZHMgd2Ugc2lnbmFsIHN1Y2Nlc3MgdG8gdGhlIGFzeW5jIHF1ZXVlIGV2ZW4gdGhvdWdoIHRoZVxuICAgICAqIHN0YXJ0KCkgaXRzZWxmIHNpZ25hbHMgZmFpbHVyZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb21wb25lbnRQcm92aWRlciBQcm92aWRlciB0aGF0IHJldHVybnMgYWxsIGNvcmUgY29tcG9uZW50cy5cbiAgICAgKiBAcGFyYW0gcGVyc2lzdGVuY2VTZXR0aW5ncyBTZXR0aW5ncyBvYmplY3QgdG8gY29uZmlndXJlIG9mZmxpbmVcbiAgICAgKiAgICAgcGVyc2lzdGVuY2UuXG4gICAgICogQHJldHVybnMgQSBkZWZlcnJlZCByZXN1bHQgaW5kaWNhdGluZyB0aGUgdXNlci12aXNpYmxlIHJlc3VsdCBvZiBlbmFibGluZ1xuICAgICAqICAgICBvZmZsaW5lIHBlcnNpc3RlbmNlLiBUaGlzIG1ldGhvZCB3aWxsIHJlamVjdCB0aGlzIGlmIEluZGV4ZWREQiBmYWlscyB0b1xuICAgICAqICAgICBzdGFydCBmb3IgYW55IHJlYXNvbi4gSWYgdXNlUGVyc2lzdGVuY2UgaXMgZmFsc2UgdGhpcyBpc1xuICAgICAqICAgICB1bmNvbmRpdGlvbmFsbHkgcmVzb2x2ZWQuXG4gICAgICovO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgdGhpcy5nVCgpO1xuICAgICAgICAvLyBXZSBkZWZlciBvdXIgaW5pdGlhbGl6YXRpb24gdW50aWwgd2UgZ2V0IHRoZSBjdXJyZW50IHVzZXIgZnJvbVxuICAgICAgICAvLyBzZXRDaGFuZ2VMaXN0ZW5lcigpLiBXZSBibG9jayB0aGUgYXN5bmMgcXVldWUgdW50aWwgd2UgZ290IHRoZSBpbml0aWFsXG4gICAgICAgIC8vIHVzZXIgYW5kIHRoZSBpbml0aWFsaXphdGlvbiBpcyBjb21wbGV0ZWQuIFRoaXMgd2lsbCBwcmV2ZW50IGFueSBzY2hlZHVsZWRcbiAgICAgICAgLy8gd29yayBmcm9tIGhhcHBlbmluZyBiZWZvcmUgaW5pdGlhbGl6YXRpb24gaXMgY29tcGxldGVkLlxuICAgICAgICAvLyBJZiBpbml0aWFsaXphdGlvbkRvbmUgcmVzb2x2ZWQgdGhlbiB0aGUgRmlyZXN0b3JlQ2xpZW50IGlzIGluIGEgdXNhYmxlXG4gICAgICAgIC8vIHN0YXRlLlxuICAgICAgICB2YXIgciA9IG5ldyBVZSwgaSA9IG5ldyBVZSwgbyA9ICExO1xuICAgICAgICAvLyBJZiB1c2VQZXJzaXN0ZW5jZSBpcyB0cnVlLCBjZXJ0YWluIGNsYXNzZXMgb2YgZXJyb3JzIHdoaWxlIHN0YXJ0aW5nIGFyZVxuICAgICAgICAvLyByZWNvdmVyYWJsZSBidXQgb25seSBieSBmYWxsaW5nIGJhY2sgdG8gcGVyc2lzdGVuY2UgZGlzYWJsZWQuXG4gICAgICAgIC8vIElmIHRoZXJlJ3MgYW4gZXJyb3IgaW4gdGhlIGZpcnN0IGNhc2UgYnV0IG5vdCBpbiByZWNvdmVyeSB3ZSBjYW5ub3RcbiAgICAgICAgLy8gcmVqZWN0IHRoZSBwcm9taXNlIGJsb2NraW5nIHRoZSBhc3luYyBxdWV1ZSBiZWNhdXNlIHRoaXMgd2lsbCBjYXVzZSB0aGVcbiAgICAgICAgLy8gYXN5bmMgcXVldWUgdG8gcGFuaWMuXG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIG9ubHkgdGhlIHJlc3VsdCBvZiBlbmFibGluZyBwZXJzaXN0ZW5jZS4gTm90ZSB0aGF0IHRoaXMgZG9lcyBub3RcbiAgICAgICAgLy8gbmVlZCB0byBhd2FpdCB0aGUgY29tcGxldGlvbiBvZiBpbml0aWFsaXphdGlvbkRvbmUgYmVjYXVzZSB0aGUgcmVzdWx0IG9mXG4gICAgICAgIC8vIHRoaXMgbWV0aG9kIHNob3VsZCBub3QgcmVmbGVjdCBhbnkgb3RoZXIga2luZCBvZiBmYWlsdXJlIHRvIHN0YXJ0LlxuICAgICAgICByZXR1cm4gdGhpcy5jcmVkZW50aWFscy5sKChmdW5jdGlvbihzKSB7XG4gICAgICAgICAgICBpZiAoIW8pIHJldHVybiBvID0gITAsIGRlKFwiRmlyZXN0b3JlQ2xpZW50XCIsIFwiSW5pdGlhbGl6aW5nLiB1c2VyPVwiLCBzLnVpZCksIG4ucFQodCwgZSwgcywgaSkudGhlbihyLnJlc29sdmUsIHIucmVqZWN0KTtcbiAgICAgICAgICAgIG4uQWEuVWEoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuLlBsKHMpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSksIFxuICAgICAgICAvLyBCbG9jayB0aGUgYXN5bmMgcXVldWUgdW50aWwgaW5pdGlhbGl6YXRpb24gaXMgZG9uZVxuICAgICAgICB0aGlzLkFhLnVvKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiByLnByb21pc2U7XG4gICAgICAgIH0pKSwgaS5wcm9taXNlO1xuICAgIH0sIFxuICAgIC8qKiBFbmFibGVzIHRoZSBuZXR3b3JrIGNvbm5lY3Rpb24gYW5kIHJlcXVldWVzIGFsbCBwZW5kaW5nIG9wZXJhdGlvbnMuICovIHQucHJvdG90eXBlLmVuYWJsZU5ldHdvcmsgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5nVCgpLCB0aGlzLkFhLmVucXVldWUoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHQub2wuZW5hYmxlTmV0d29yaygpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgcGVyc2lzdGVudCBzdG9yYWdlLCBhdHRlbXB0aW5nIHRvIHVzZSBJbmRleGVkREIgaWZcbiAgICAgKiB1c2VQZXJzaXN0ZW5jZSBpcyB0cnVlIG9yIG1lbW9yeS1vbmx5IGlmIGZhbHNlLlxuICAgICAqXG4gICAgICogSWYgSW5kZXhlZERCIGZhaWxzIGJlY2F1c2UgaXQncyBhbHJlYWR5IG9wZW4gaW4gYW5vdGhlciB0YWIgb3IgYmVjYXVzZSB0aGVcbiAgICAgKiBwbGF0Zm9ybSBjYW4ndCBwb3NzaWJseSBzdXBwb3J0IG91ciBpbXBsZW1lbnRhdGlvbiB0aGVuIHRoaXMgbWV0aG9kIHJlamVjdHNcbiAgICAgKiB0aGUgcGVyc2lzdGVuY2VSZXN1bHQgYW5kIGZhbGxzIGJhY2sgb24gbWVtb3J5LW9ubHkgcGVyc2lzdGVuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29tcG9uZW50UHJvdmlkZXIgVGhlIHByb3ZpZGVyIHRoYXQgcHJvdmlkZXMgYWxsIGNvcmUgY29tcG9uZW5udHNcbiAgICAgKiAgICAgZm9yIEluZGV4ZWREQiBvciBtZW1vcnktYmFja2VkIHBlcnNpc3RlbmNlXG4gICAgICogQHBhcmFtIHBlcnNpc3RlbmNlU2V0dGluZ3MgU2V0dGluZ3Mgb2JqZWN0IHRvIGNvbmZpZ3VyZSBvZmZsaW5lIHBlcnNpc3RlbmNlXG4gICAgICogQHBhcmFtIHVzZXIgVGhlIGluaXRpYWwgdXNlclxuICAgICAqIEBwYXJhbSBwZXJzaXN0ZW5jZVJlc3VsdCBBIGRlZmVycmVkIHJlc3VsdCBpbmRpY2F0aW5nIHRoZSB1c2VyLXZpc2libGVcbiAgICAgKiAgICAgcmVzdWx0IG9mIGVuYWJsaW5nIG9mZmxpbmUgcGVyc2lzdGVuY2UuIFRoaXMgbWV0aG9kIHdpbGwgcmVqZWN0IHRoaXMgaWZcbiAgICAgKiAgICAgSW5kZXhlZERCIGZhaWxzIHRvIHN0YXJ0IGZvciBhbnkgcmVhc29uLiBJZiB1c2VQZXJzaXN0ZW5jZSBpcyBmYWxzZVxuICAgICAqICAgICB0aGlzIGlzIHVuY29uZGl0aW9uYWxseSByZXNvbHZlZC5cbiAgICAgKiBAcmV0dXJucyBhIFByb21pc2UgaW5kaWNhdGluZyB3aGV0aGVyIG9yIG5vdCBpbml0aWFsaXphdGlvbiBzaG91bGRcbiAgICAgKiAgICAgY29udGludWUsIGkuZS4gdGhhdCBvbmUgb2YgdGhlIHBlcnNpc3RlbmNlIGltcGxlbWVudGF0aW9ucyBhY3R1YWxseVxuICAgICAqICAgICBzdWNjZWVkZWQuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUucFQgPSBmdW5jdGlvbih0LCBuLCByLCBpKSB7XG4gICAgICAgIHJldHVybiBlLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIG8sIHMsIHUsIGEsIGggPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGMubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMudHJ5cy5wdXNoKFsgMCwgMywgLCA0IF0pLCBbIDQgLyp5aWVsZCovICwgdGhpcy5wbGF0Zm9ybS55VCh0aGlzLm1UKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvID0gYy5zZW50KCksIHMgPSB0aGlzLnBsYXRmb3JtLmJjKHRoaXMubVQuaWkpLCB1ID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBKcih0LCBlLCBuKTtcbiAgICAgICAgICAgICAgICAgICAgfShvLCB0aGlzLmNyZWRlbnRpYWxzLCBzKSwgWyA0IC8qeWllbGQqLyAsIHQuaW5pdGlhbGl6ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBBYTogdGhpcy5BYSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1UOiB0aGlzLm1ULFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhdGZvcm06IHRoaXMucGxhdGZvcm0sXG4gICAgICAgICAgICAgICAgICAgICAgICBUXzogdSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudElkOiB0aGlzLmNsaWVudElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgUlQ6IHIsXG4gICAgICAgICAgICAgICAgICAgICAgICBRZDogMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgUFQ6IG5cbiAgICAgICAgICAgICAgICAgICAgfSkgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYy5zZW50KCksIHRoaXMucGVyc2lzdGVuY2UgPSB0LnBlcnNpc3RlbmNlLCB0aGlzLlVkID0gdC5VZCwgdGhpcy5OXyA9IHQuTl8sIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRkID0gdC4kZCwgdGhpcy5vbCA9IHQub2wsIHRoaXMubFQgPSB0LmxULCB0aGlzLmJUID0gdC5JVCwgXG4gICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gYSB1c2VyIGNhbGxzIGNsZWFyUGVyc2lzdGVuY2UoKSBpbiBvbmUgY2xpZW50LCBhbGwgb3RoZXIgY2xpZW50c1xuICAgICAgICAgICAgICAgICAgICAvLyBuZWVkIHRvIGJlIHRlcm1pbmF0ZWQgdG8gYWxsb3cgdGhlIGRlbGV0ZSB0byBzdWNjZWVkLlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBlcnNpc3RlbmNlLmhvKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLl9fYXdhaXRlcihoLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLl9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodC5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDQgLyp5aWVsZCovICwgdGhpcy50ZXJtaW5hdGUoKSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuc2VudCgpLCBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KSksIGkucmVzb2x2ZSgpLCBbIDMgLypicmVhayovICwgNCBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIC8vIEFuIHVua25vd24gZmFpbHVyZSBvbiB0aGUgZmlyc3Qgc3RhZ2Ugc2h1dHMgZXZlcnl0aGluZyBkb3duLlxuICAgICAgICAgICAgICAgICAgICBpZiAoYSA9IGMuc2VudCgpLCBcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIG9yIG5vdCB0aGUgcmV0cnkgc3VjY2VlZHMsIGZyb20gYW4gdXNlclxuICAgICAgICAgICAgICAgICAgICAvLyBwZXJzcGVjdGl2ZSwgb2ZmbGluZSBwZXJzaXN0ZW5jZSBoYXMgZmFpbGVkLlxuICAgICAgICAgICAgICAgICAgICBpLnJlamVjdChhKSwgIXRoaXMudlQoYSkpIHRocm93IGE7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyAsIChjb25zb2xlLndhcm4oXCJFcnJvciBlbmFibGluZyBvZmZsaW5lIHBlcnNpc3RlbmNlLiBGYWxsaW5nIGJhY2sgdG8gcGVyc2lzdGVuY2UgZGlzYWJsZWQ6IFwiICsgYSksIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBUKG5ldyBEaSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgVlQ6ICExXG4gICAgICAgICAgICAgICAgICAgIH0sIHIsIGkpKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIERlY2lkZXMgd2hldGhlciB0aGUgcHJvdmlkZWQgZXJyb3IgYWxsb3dzIHVzIHRvIGdyYWNlZnVsbHkgZGlzYWJsZVxuICAgICAqIHBlcnNpc3RlbmNlIChhcyBvcHBvc2VkIHRvIGNyYXNoaW5nIHRoZSBjbGllbnQpLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLnZUID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gXCJGaXJlYmFzZUVycm9yXCIgPT09IHQubmFtZSA/IHQuY29kZSA9PT0gaC5GQUlMRURfUFJFQ09ORElUSU9OIHx8IHQuY29kZSA9PT0gaC5VTklNUExFTUVOVEVEIDogIShcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBET01FeGNlcHRpb24gJiYgdCBpbnN0YW5jZW9mIERPTUV4Y2VwdGlvbikgfHwgXG4gICAgICAgIC8vIFdoZW4gdGhlIGJyb3dzZXIgaXMgb3V0IG9mIHF1b3RhIHdlIGNvdWxkIGdldCBlaXRoZXIgcXVvdGEgZXhjZWVkZWRcbiAgICAgICAgLy8gb3IgYW4gYWJvcnRlZCBlcnJvciBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgZXJyb3IgaGFwcGVuZWQgZHVyaW5nXG4gICAgICAgIC8vIHNjaGVtYSBtaWdyYXRpb24uXG4gICAgICAgIDIyID09PSB0LmNvZGUgfHwgMjAgPT09IHQuY29kZSB8fCBcbiAgICAgICAgLy8gRmlyZWZveCBQcml2YXRlIEJyb3dzaW5nIG1vZGUgZGlzYWJsZXMgSW5kZXhlZERiIGFuZCByZXR1cm5zXG4gICAgICAgIC8vIElOVkFMSURfU1RBVEUgZm9yIGFueSB1c2FnZS5cbiAgICAgICAgMTEgPT09IHQuY29kZTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBDaGVja3MgdGhhdCB0aGUgY2xpZW50IGhhcyBub3QgYmVlbiB0ZXJtaW5hdGVkLiBFbnN1cmVzIHRoYXQgb3RoZXIgbWV0aG9kcyBvblxuICAgICAqIHRoaXMgY2xhc3MgY2Fubm90IGJlIGNhbGxlZCBhZnRlciB0aGUgY2xpZW50IGlzIHRlcm1pbmF0ZWQuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuZ1QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuQWEuTGEpIHRocm93IG5ldyBjKGguRkFJTEVEX1BSRUNPTkRJVElPTiwgXCJUaGUgY2xpZW50IGhhcyBhbHJlYWR5IGJlZW4gdGVybWluYXRlZC5cIik7XG4gICAgfSwgdC5wcm90b3R5cGUuUGwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLkFhLldhKCksIGRlKFwiRmlyZXN0b3JlQ2xpZW50XCIsIFwiQ3JlZGVudGlhbCBDaGFuZ2VkLiBDdXJyZW50IHVzZXI6IFwiICsgdC51aWQpLCBcbiAgICAgICAgdGhpcy5vbC5QbCh0KTtcbiAgICB9LCBcbiAgICAvKiogRGlzYWJsZXMgdGhlIG5ldHdvcmsgY29ubmVjdGlvbi4gUGVuZGluZyBvcGVyYXRpb25zIHdpbGwgbm90IGNvbXBsZXRlLiAqLyB0LnByb3RvdHlwZS5kaXNhYmxlTmV0d29yayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLmdUKCksIHRoaXMuQWEuZW5xdWV1ZSgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdC5vbC5kaXNhYmxlTmV0d29yaygpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUudGVybWluYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMuQWEucWEoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHQsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0LmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUE9SVElORyBOT1RFOiBMb2NhbFN0b3JlIGRvZXMgbm90IG5lZWQgYW4gZXhwbGljaXQgc2h1dGRvd24gb24gd2ViLlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubFQgJiYgdGhpcy5sVC5zdG9wKCksIFsgNCAvKnlpZWxkKi8gLCB0aGlzLiRkLm1vKCkgXTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnNlbnQoKSwgWyA0IC8qeWllbGQqLyAsIHRoaXMuVWQubW8oKSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuc2VudCgpLCBbIDQgLyp5aWVsZCovICwgdGhpcy5wZXJzaXN0ZW5jZS5tbygpIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQT1JUSU5HIE5PVEU6IExvY2FsU3RvcmUgZG9lcyBub3QgbmVlZCBhbiBleHBsaWNpdCBzaHV0ZG93biBvbiB3ZWIuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5zZW50KCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYHJlbW92ZUNoYW5nZUxpc3RlbmVyYCBtdXN0IGJlIGNhbGxlZCBhZnRlciBzaHV0dGluZyBkb3duIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3RlU3RvcmUgYXMgaXQgd2lsbCBwcmV2ZW50IHRoZSBSZW1vdGVTdG9yZSBmcm9tIHJldHJpZXZpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF1dGggdG9rZW5zLlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVkZW50aWFscy5UKCksIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gYWxsIHdyaXRlcyB0aGF0IHdlcmUgcGVuZGluZyBhdCB0aGUgdGltZSB0aGlzXG4gICAgICogbWV0aG9kIHdhcyBjYWxsZWQgcmVjZWl2ZWQgc2VydmVyIGFja25vd2xlZGdlbWVudC4gQW4gYWNrbm93bGVkZ2VtZW50IGNhbiBiZSBlaXRoZXIgYWNjZXB0YW5jZVxuICAgICAqIG9yIHJlamVjdGlvbi5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS53YWl0Rm9yUGVuZGluZ1dyaXRlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgIHRoaXMuZ1QoKTtcbiAgICAgICAgdmFyIGUgPSBuZXcgVWU7XG4gICAgICAgIHJldHVybiB0aGlzLkFhLnVvKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0Lm9sLmxmKGUpO1xuICAgICAgICB9KSksIGUucHJvbWlzZTtcbiAgICB9LCB0LnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHZhciByID0gdGhpcztcbiAgICAgICAgdGhpcy5nVCgpO1xuICAgICAgICB2YXIgaSA9IG5ldyBFaSh0LCBlLCBuKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuQWEudW8oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHIuYlQubGlzdGVuKGkpO1xuICAgICAgICB9KSksIGk7XG4gICAgfSwgdC5wcm90b3R5cGUucmwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgLy8gQ2hlY2tzIGZvciB0ZXJtaW5hdGlvbiBidXQgZG9lcyBub3QgcmFpc2UgZXJyb3IsIGFsbG93aW5nIHVubGlzdGVuIGFmdGVyXG4gICAgICAgIC8vIHRlcm1pbmF0aW9uIHRvIGJlIGEgbm8tb3AuXG4gICAgICAgICAgICAgICAgdGhpcy5TVCB8fCB0aGlzLkFhLnVvKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBlLmJULnJsKHQpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuRFQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBlLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIG4sIHIgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGkubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ1QoKSwgbiA9IG5ldyBVZSwgWyA0IC8qeWllbGQqLyAsIHRoaXMuQWEuZW5xdWV1ZSgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIociwgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgciwgaSwgbztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5fX2dlbmVyYXRvcih0aGlzLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS50cnlzLnB1c2goWyAwLCAyLCAsIDMgXSksIFsgNCAvKnlpZWxkKi8gLCB0aGlzLk5fLlV1KHQpIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHIgPSBlLnNlbnQoKSkgaW5zdGFuY2VvZiB5dCA/IG4ucmVzb2x2ZShyKSA6IHIgaW5zdGFuY2VvZiB2dCA/IG4ucmVzb2x2ZShudWxsKSA6IG4ucmVqZWN0KG5ldyBjKGguVU5BVkFJTEFCTEUsIFwiRmFpbGVkIHRvIGdldCBkb2N1bWVudCBmcm9tIGNhY2hlLiAoSG93ZXZlciwgdGhpcyBkb2N1bWVudCBtYXkgZXhpc3Qgb24gdGhlIHNlcnZlci4gUnVuIGFnYWluIHdpdGhvdXQgc2V0dGluZyAnc291cmNlJyBpbiB0aGUgR2V0T3B0aW9ucyB0byBhdHRlbXB0IHRvIHJldHJpZXZlIHRoZSBkb2N1bWVudCBmcm9tIHRoZSBzZXJ2ZXIuKVwiKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyAzIC8qYnJlYWsqLyAsIDMgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpID0gZS5zZW50KCksIG8gPSBRbihpLCBcIkZhaWxlZCB0byBnZXQgZG9jdW1lbnQgJ1wiICsgdCArIFwiIGZyb20gY2FjaGVcIiksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5yZWplY3QobyksIFsgMyAvKmJyZWFrKi8gLCAzIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovICwgKGkuc2VudCgpLCBuLnByb21pc2UpIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuQ1QgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBlLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIG4sIHIgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGkubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ1QoKSwgbiA9IG5ldyBVZSwgWyA0IC8qeWllbGQqLyAsIHRoaXMuQWEuZW5xdWV1ZSgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIociwgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgciwgaSwgbywgcywgdSwgYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5fX2dlbmVyYXRvcih0aGlzLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS50cnlzLnB1c2goWyAwLCAyLCAsIDMgXSksIFsgNCAvKnlpZWxkKi8gLCB0aGlzLk5fLmp1KHQsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogdXNlUHJldmlvdXNSZXN1bHRzPSAqLyAhMCkgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByID0gZS5zZW50KCksIGkgPSBuZXcgbGkodCwgci5LdSksIG8gPSBpLlZkKHIuZG9jdW1lbnRzKSwgcyA9IGkueG4obywgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiB1cGRhdGVMaW1ib0RvY3VtZW50cz0gKi8gITEpLCBuLnJlc29sdmUocy5zbmFwc2hvdCksIFsgMyAvKmJyZWFrKi8gLCAzIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdSA9IGUuc2VudCgpLCBhID0gUW4odSwgXCJGYWlsZWQgdG8gZXhlY3V0ZSBxdWVyeSAnXCIgKyB0ICsgXCIgYWdhaW5zdCBjYWNoZVwiKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLnJlamVjdChhKSwgWyAzIC8qYnJlYWsqLyAsIDMgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KSkgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gLCAoaS5zZW50KCksIG4ucHJvbWlzZSkgXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICB0aGlzLmdUKCk7XG4gICAgICAgIHZhciBuID0gbmV3IFVlO1xuICAgICAgICByZXR1cm4gdGhpcy5BYS51bygoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZS5vbC53cml0ZSh0LCBuKTtcbiAgICAgICAgfSkpLCBuLnByb21pc2U7XG4gICAgfSwgdC5wcm90b3R5cGUuaWkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubVQuaWk7XG4gICAgfSwgdC5wcm90b3R5cGUuRGYgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgdGhpcy5nVCgpLCB0aGlzLkFhLnVvKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBlLmJULkRmKHQpLCBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLkNmID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIC8vIENoZWNrcyBmb3Igc2h1dGRvd24gYnV0IGRvZXMgbm90IHJhaXNlIGVycm9yLCBhbGxvd2luZyByZW1vdmUgYWZ0ZXJcbiAgICAgICAgLy8gc2h1dGRvd24gdG8gYmUgYSBuby1vcC5cbiAgICAgICAgICAgICAgICB0aGlzLlNUIHx8IHRoaXMuQWEudW8oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGUuYlQuQ2YodCksIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB9KSk7XG4gICAgfSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcIlNUXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIFRlY2huaWNhbGx5LCB0aGUgYXN5bmNRdWV1ZSBpcyBzdGlsbCBydW5uaW5nLCBidXQgb25seSBhY2NlcHRpbmcgb3BlcmF0aW9uc1xuICAgICAgICAgICAgLy8gcmVsYXRlZCB0byB0ZXJtaW5hdGlvbiBvciBzdXBwb3NlZCB0byBiZSBydW4gYWZ0ZXIgdGVybWluYXRpb24uIEl0IGlzIGVmZmVjdGl2ZWx5XG4gICAgICAgICAgICAvLyB0ZXJtaW5hdGVkIHRvIHRoZSBleWVzIG9mIHVzZXJzLlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuQWEuTGE7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIHQucHJvdG90eXBlLnRyYW5zYWN0aW9uID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIHRoaXMuZ1QoKTtcbiAgICAgICAgdmFyIG4gPSBuZXcgVWU7XG4gICAgICAgIHJldHVybiB0aGlzLkFhLnVvKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBlLm9sLnJ1blRyYW5zYWN0aW9uKGUuQWEsIHQsIG4pLCBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfSkpLCBuLnByb21pc2U7XG4gICAgfSwgdDtcbn0oKSwgUmkgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCkge1xuICAgICAgICB0aGlzLm9ic2VydmVyID0gdCwgXG4gICAgICAgIC8qKlxuICAgICAgICAgICAgICogV2hlbiBzZXQgdG8gdHJ1ZSwgd2lsbCBub3QgcmFpc2UgZnV0dXJlIGV2ZW50cy4gTmVjZXNzYXJ5IHRvIGRlYWwgd2l0aFxuICAgICAgICAgICAgICogYXN5bmMgZGV0YWNobWVudCBvZiBsaXN0ZW5lci5cbiAgICAgICAgICAgICAqL1xuICAgICAgICB0aGlzLm11dGVkID0gITE7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLkZUKHRoaXMub2JzZXJ2ZXIubmV4dCwgdCk7XG4gICAgfSwgdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuRlQodGhpcy5vYnNlcnZlci5lcnJvciwgdCk7XG4gICAgfSwgdC5wcm90b3R5cGUuTlQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5tdXRlZCA9ICEwO1xuICAgIH0sIHQucHJvdG90eXBlLkZUID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIHRoaXMubXV0ZWQgfHwgc2V0VGltZW91dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBuLm11dGVkIHx8IHQoZSk7XG4gICAgICAgIH0pLCAwKTtcbiAgICB9LCB0O1xufSgpO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIG1lbW9yeS1iYWNrZWQgaW5zdGFuY2Ugb2YgUGVyc2lzdGVuY2UuIERhdGEgaXMgc3RvcmVkIG9ubHkgaW4gUkFNIGFuZFxuICogbm90IHBlcnNpc3RlZCBhY3Jvc3Mgc2Vzc2lvbnMuXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5mdW5jdGlvbiBMaSh0KSB7XG4gICAgLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgb2JqIGlzIGFuIG9iamVjdCBhbmQgY29udGFpbnMgYXQgbGVhc3Qgb25lIG9mIHRoZSBzcGVjaWZpZWRcbiAqIG1ldGhvZHMuXG4gKi9cbiAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBpZiAoXCJvYmplY3RcIiAhPSB0eXBlb2YgdCB8fCBudWxsID09PSB0KSByZXR1cm4gITE7XG4gICAgICAgIGZvciAodmFyIG4gPSB0LCByID0gMCwgaSA9IFsgXCJuZXh0XCIsIFwiZXJyb3JcIiwgXCJjb21wbGV0ZVwiIF07IHIgPCBpLmxlbmd0aDsgcisrKSB7XG4gICAgICAgICAgICB2YXIgbyA9IGlbcl07XG4gICAgICAgICAgICBpZiAobyBpbiBuICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgbltvXSkgcmV0dXJuICEwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9KHQpO1xufVxuXG52YXIgT2kgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSwgbiwgcikge1xuICAgICAgICB0aGlzLmZpcmVzdG9yZSA9IHQsIHRoaXMudGltZXN0YW1wc0luU25hcHNob3RzID0gZSwgdGhpcy4kVCA9IG4sIHRoaXMuY29udmVydGVyID0gcjtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLmtUID0gZnVuY3Rpb24odCkge1xuICAgICAgICBzd2l0Y2ggKE8odCkpIHtcbiAgICAgICAgICBjYXNlIDAgLyogTnVsbFZhbHVlICovIDpcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgICAgICAgY2FzZSAxIC8qIEJvb2xlYW5WYWx1ZSAqLyA6XG4gICAgICAgICAgICByZXR1cm4gdC5ib29sZWFuVmFsdWU7XG5cbiAgICAgICAgICBjYXNlIDIgLyogTnVtYmVyVmFsdWUgKi8gOlxuICAgICAgICAgICAgcmV0dXJuIGoodC5pbnRlZ2VyVmFsdWUgfHwgdC5kb3VibGVWYWx1ZSk7XG5cbiAgICAgICAgICBjYXNlIDMgLyogVGltZXN0YW1wVmFsdWUgKi8gOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuTFQodC50aW1lc3RhbXBWYWx1ZSk7XG5cbiAgICAgICAgICBjYXNlIDQgLyogU2VydmVyVGltZXN0YW1wVmFsdWUgKi8gOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuTVQodCk7XG5cbiAgICAgICAgICBjYXNlIDUgLyogU3RyaW5nVmFsdWUgKi8gOlxuICAgICAgICAgICAgcmV0dXJuIHQuc3RyaW5nVmFsdWU7XG5cbiAgICAgICAgICBjYXNlIDYgLyogQmxvYlZhbHVlICovIDpcbiAgICAgICAgICAgIHJldHVybiBuZXcgSXIoRih0LmJ5dGVzVmFsdWUpKTtcblxuICAgICAgICAgIGNhc2UgNyAvKiBSZWZWYWx1ZSAqLyA6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5PVCh0LnJlZmVyZW5jZVZhbHVlKTtcblxuICAgICAgICAgIGNhc2UgOCAvKiBHZW9Qb2ludFZhbHVlICovIDpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnhUKHQuZ2VvUG9pbnRWYWx1ZSk7XG5cbiAgICAgICAgICBjYXNlIDkgLyogQXJyYXlWYWx1ZSAqLyA6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5CVCh0LmFycmF5VmFsdWUpO1xuXG4gICAgICAgICAgY2FzZSAxMCAvKiBPYmplY3RWYWx1ZSAqLyA6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5xVCh0Lm1hcFZhbHVlKTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBnZSgpO1xuICAgICAgICB9XG4gICAgfSwgdC5wcm90b3R5cGUucVQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcywgbiA9IHt9O1xuICAgICAgICByZXR1cm4gSSh0LmZpZWxkcyB8fCB7fSwgKGZ1bmN0aW9uKHQsIHIpIHtcbiAgICAgICAgICAgIG5bdF0gPSBlLmtUKHIpO1xuICAgICAgICB9KSksIG47XG4gICAgfSwgdC5wcm90b3R5cGUueFQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBuZXcgT3Ioaih0LmxhdGl0dWRlKSwgaih0LmxvbmdpdHVkZSkpO1xuICAgIH0sIHQucHJvdG90eXBlLkJUID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIHJldHVybiAodC52YWx1ZXMgfHwgW10pLm1hcCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIGUua1QodCk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5NVCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLiRUKSB7XG4gICAgICAgICAgY2FzZSBcInByZXZpb3VzXCI6XG4gICAgICAgICAgICB2YXIgZSA9IGZ1bmN0aW9uIHQoZSkge1xuICAgICAgICAgICAgICAgIHZhciBuID0gZS5tYXBWYWx1ZS5maWVsZHMuX19wcmV2aW91c192YWx1ZV9fO1xuICAgICAgICAgICAgICAgIHJldHVybiBTKG4pID8gdChuKSA6IG47XG4gICAgICAgICAgICB9KHQpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gZSA/IG51bGwgOiB0aGlzLmtUKGUpO1xuXG4gICAgICAgICAgY2FzZSBcImVzdGltYXRlXCI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5MVChSKHQpKTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH0sIHQucHJvdG90eXBlLkxUID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IE0odCksIG4gPSBuZXcgdihlLnNlY29uZHMsIGUubmFub3MpO1xuICAgICAgICByZXR1cm4gdGhpcy50aW1lc3RhbXBzSW5TbmFwc2hvdHMgPyBuIDogbi50b0RhdGUoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5PVCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB3LksodCk7XG4gICAgICAgIG1lKGhlKGUpKTtcbiAgICAgICAgdmFyIG4gPSBuZXcgTmUoZS5nZXQoMSksIGUuZ2V0KDMpKSwgciA9IG5ldyBfKGUuayg1KSk7XG4gICAgICAgIHJldHVybiBuLmlzRXF1YWwodGhpcy5maXJlc3RvcmUuJGMpIHx8IFxuICAgICAgICAvLyBUT0RPKGIvNjQxMzAyMDIpOiBTb21laG93IHN1cHBvcnQgZm9yZWlnbiByZWZlcmVuY2VzLlxuICAgICAgICB5ZShcIkRvY3VtZW50IFwiICsgciArIFwiIGNvbnRhaW5zIGEgZG9jdW1lbnQgcmVmZXJlbmNlIHdpdGhpbiBhIGRpZmZlcmVudCBkYXRhYmFzZSAoXCIgKyBuLnByb2plY3RJZCArIFwiL1wiICsgbi5kYXRhYmFzZSArIFwiKSB3aGljaCBpcyBub3Qgc3VwcG9ydGVkLiBJdCB3aWxsIGJlIHRyZWF0ZWQgYXMgYSByZWZlcmVuY2UgaW4gdGhlIGN1cnJlbnQgZGF0YWJhc2UgKFwiICsgdGhpcy5maXJlc3RvcmUuJGMucHJvamVjdElkICsgXCIvXCIgKyB0aGlzLmZpcmVzdG9yZS4kYy5kYXRhYmFzZSArIFwiKSBpbnN0ZWFkLlwiKSwgXG4gICAgICAgIG5ldyBNaShyLCB0aGlzLmZpcmVzdG9yZSwgdGhpcy5jb252ZXJ0ZXIpO1xuICAgIH0sIHQ7XG59KCksIFZpID0gSm4udXUsIFBpID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdmFyIGUsIG4sIHIsIGk7XG4gICAgICAgIGlmICh2b2lkIDAgPT09IHQuaG9zdCkge1xuICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gdC5zc2wpIHRocm93IG5ldyBjKGguSU5WQUxJRF9BUkdVTUVOVCwgXCJDYW4ndCBwcm92aWRlIHNzbCBvcHRpb24gaWYgaG9zdCBvcHRpb24gaXMgbm90IHNldFwiKTtcbiAgICAgICAgICAgIHRoaXMuaG9zdCA9IFwiZmlyZXN0b3JlLmdvb2dsZWFwaXMuY29tXCIsIHRoaXMuc3NsID0gITA7XG4gICAgICAgIH0gZWxzZSBjcihcInNldHRpbmdzXCIsIFwibm9uLWVtcHR5IHN0cmluZ1wiLCBcImhvc3RcIiwgdC5ob3N0KSwgdGhpcy5ob3N0ID0gdC5ob3N0LCBmcihcInNldHRpbmdzXCIsIFwiYm9vbGVhblwiLCBcInNzbFwiLCB0LnNzbCksIFxuICAgICAgICB0aGlzLnNzbCA9IG51bGwgPT09IChlID0gdC5zc2wpIHx8IHZvaWQgMCA9PT0gZSB8fCBlO1xuICAgICAgICBpZiAoZ3IoXCJzZXR0aW5nc1wiLCB0LCBbIFwiaG9zdFwiLCBcInNzbFwiLCBcImNyZWRlbnRpYWxzXCIsIFwidGltZXN0YW1wc0luU25hcHNob3RzXCIsIFwiY2FjaGVTaXplQnl0ZXNcIiwgXCJleHBlcmltZW50YWxGb3JjZUxvbmdQb2xsaW5nXCIsIFwiaWdub3JlVW5kZWZpbmVkUHJvcGVydGllc1wiIF0pLCBcbiAgICAgICAgZnIoXCJzZXR0aW5nc1wiLCBcIm9iamVjdFwiLCBcImNyZWRlbnRpYWxzXCIsIHQuY3JlZGVudGlhbHMpLCB0aGlzLmNyZWRlbnRpYWxzID0gdC5jcmVkZW50aWFscywgXG4gICAgICAgIGZyKFwic2V0dGluZ3NcIiwgXCJib29sZWFuXCIsIFwidGltZXN0YW1wc0luU25hcHNob3RzXCIsIHQudGltZXN0YW1wc0luU25hcHNob3RzKSwgZnIoXCJzZXR0aW5nc1wiLCBcImJvb2xlYW5cIiwgXCJpZ25vcmVVbmRlZmluZWRQcm9wZXJ0aWVzXCIsIHQuaWdub3JlVW5kZWZpbmVkUHJvcGVydGllcyksIFxuICAgICAgICAvLyBOb2JvZHkgc2hvdWxkIHNldCB0aW1lc3RhbXBzSW5TbmFwc2hvdHMgYW55bW9yZSwgYnV0IHRoZSBlcnJvciBkZXBlbmRzIG9uXG4gICAgICAgIC8vIHdoZXRoZXIgdGhleSBzZXQgaXQgdG8gdHJ1ZSBvciBmYWxzZS4uLlxuICAgICAgICAhMCA9PT0gdC50aW1lc3RhbXBzSW5TbmFwc2hvdHMgPyB5ZShcIlRoZSBzZXR0aW5nICd0aW1lc3RhbXBzSW5TbmFwc2hvdHM6IHRydWUnIGlzIG5vIGxvbmdlciByZXF1aXJlZCBhbmQgc2hvdWxkIGJlIHJlbW92ZWQuXCIpIDogITEgPT09IHQudGltZXN0YW1wc0luU25hcHNob3RzICYmIHllKFwiU3VwcG9ydCBmb3IgJ3RpbWVzdGFtcHNJblNuYXBzaG90czogZmFsc2UnIHdpbGwgYmUgcmVtb3ZlZCBzb29uLiBZb3UgbXVzdCB1cGRhdGUgeW91ciBjb2RlIHRvIGhhbmRsZSBUaW1lc3RhbXAgb2JqZWN0cy5cIiksIFxuICAgICAgICB0aGlzLnRpbWVzdGFtcHNJblNuYXBzaG90cyA9IG51bGwgPT09IChuID0gdC50aW1lc3RhbXBzSW5TbmFwc2hvdHMpIHx8IHZvaWQgMCA9PT0gbiB8fCBuLCBcbiAgICAgICAgdGhpcy5pZ25vcmVVbmRlZmluZWRQcm9wZXJ0aWVzID0gbnVsbCAhPT0gKHIgPSB0Lmlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMpICYmIHZvaWQgMCAhPT0gciAmJiByLCBcbiAgICAgICAgZnIoXCJzZXR0aW5nc1wiLCBcIm51bWJlclwiLCBcImNhY2hlU2l6ZUJ5dGVzXCIsIHQuY2FjaGVTaXplQnl0ZXMpLCB2b2lkIDAgPT09IHQuY2FjaGVTaXplQnl0ZXMpIHRoaXMuY2FjaGVTaXplQnl0ZXMgPSBKbi5fdTsgZWxzZSB7XG4gICAgICAgICAgICBpZiAodC5jYWNoZVNpemVCeXRlcyAhPT0gVmkgJiYgdC5jYWNoZVNpemVCeXRlcyA8IEpuLmN1KSB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiY2FjaGVTaXplQnl0ZXMgbXVzdCBiZSBhdCBsZWFzdCBcIiArIEpuLmN1KTtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTaXplQnl0ZXMgPSB0LmNhY2hlU2l6ZUJ5dGVzO1xuICAgICAgICB9XG4gICAgICAgIGZyKFwic2V0dGluZ3NcIiwgXCJib29sZWFuXCIsIFwiZXhwZXJpbWVudGFsRm9yY2VMb25nUG9sbGluZ1wiLCB0LmV4cGVyaW1lbnRhbEZvcmNlTG9uZ1BvbGxpbmcpLCBcbiAgICAgICAgdGhpcy5mb3JjZUxvbmdQb2xsaW5nID0gbnVsbCAhPT0gKGkgPSB0LmV4cGVyaW1lbnRhbEZvcmNlTG9uZ1BvbGxpbmcpICYmIHZvaWQgMCAhPT0gaSAmJiBpO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdCA9PT0gdC5ob3N0ICYmIHRoaXMuc3NsID09PSB0LnNzbCAmJiB0aGlzLnRpbWVzdGFtcHNJblNuYXBzaG90cyA9PT0gdC50aW1lc3RhbXBzSW5TbmFwc2hvdHMgJiYgdGhpcy5jcmVkZW50aWFscyA9PT0gdC5jcmVkZW50aWFscyAmJiB0aGlzLmNhY2hlU2l6ZUJ5dGVzID09PSB0LmNhY2hlU2l6ZUJ5dGVzICYmIHRoaXMuZm9yY2VMb25nUG9sbGluZyA9PT0gdC5mb3JjZUxvbmdQb2xsaW5nICYmIHRoaXMuaWdub3JlVW5kZWZpbmVkUHJvcGVydGllcyA9PT0gdC5pZ25vcmVVbmRlZmluZWRQcm9wZXJ0aWVzO1xuICAgIH0sIHQ7XG59KCksIFVpID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICAvLyBOb3RlOiBXZSBhcmUgdXNpbmcgYE1lbW9yeUNvbXBvbmVudFByb3ZpZGVyYCBhcyBhIGRlZmF1bHRcbiAgICAvLyBDb21wb25lbnRQcm92aWRlciB0byBlbnN1cmUgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCB0aGUgZm9ybWF0XG4gICAgLy8gZXhwZWN0ZWQgYnkgdGhlIGNvbnNvbGUgYnVpbGQuXG4gICAgZnVuY3Rpb24gdChuLCByLCBpKSB7XG4gICAgICAgIHZhciBvID0gdGhpcztcbiAgICAgICAgaWYgKHZvaWQgMCA9PT0gaSAmJiAoaSA9IG5ldyBEaSksIHRoaXMuVVQgPSBudWxsLCBcbiAgICAgICAgLy8gUHVibGljIGZvciB1c2UgaW4gdGVzdHMuXG4gICAgICAgIC8vIFRPRE8obWlrZWxlaGVuKTogVXNlIG1vZHVsYXJpemVkIGluaXRpYWxpemF0aW9uIGluc3RlYWQuXG4gICAgICAgIHRoaXMuUVQgPSBuZXcgV24sIHRoaXMuSU5URVJOQUwgPSB7XG4gICAgICAgICAgICBkZWxldGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLl9fYXdhaXRlcihvLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5fX2dlbmVyYXRvcih0aGlzLCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0LmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgY2xpZW50IG11c3QgYmUgaW5pdGFsaXplZCB0byBlbnN1cmUgdGhhdCBhbGwgc3Vic2VxdWVudCBBUEkgdXNhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLldUKCksIFsgNCAvKnlpZWxkKi8gLCB0aGlzLmpULnRlcm1pbmF0ZSgpIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBjbGllbnQgbXVzdCBiZSBpbml0YWxpemVkIHRvIGVuc3VyZSB0aGF0IGFsbCBzdWJzZXF1ZW50IEFQSSB1c2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRocm93cyBhbiBleGNlcHRpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuc2VudCgpLCBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBcIm9iamVjdFwiID09IHR5cGVvZiBuLm9wdGlvbnMpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgdmVyeSBsaWtlbHkgYSBGaXJlYmFzZSBhcHAgb2JqZWN0XG4gICAgICAgICAgICAvLyBUT0RPKGIvMzQxNzc2MDUpOiBDYW4gd2Ugc29tZWhvdyB1c2UgaW5zdGFuY2VvZj9cbiAgICAgICAgICAgIHZhciBzID0gbjtcbiAgICAgICAgICAgIHRoaXMuVVQgPSBzLCB0aGlzLiRjID0gdC5LVChzKSwgdGhpcy5HVCA9IHMubmFtZSwgdGhpcy56VCA9IG5ldyBwKHIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHUgPSBuO1xuICAgICAgICAgICAgaWYgKCF1LnByb2plY3RJZCkgdGhyb3cgbmV3IGMoaC5JTlZBTElEX0FSR1VNRU5ULCBcIk11c3QgcHJvdmlkZSBwcm9qZWN0SWRcIik7XG4gICAgICAgICAgICB0aGlzLiRjID0gbmV3IE5lKHUucHJvamVjdElkLCB1LmRhdGFiYXNlKSwgXG4gICAgICAgICAgICAvLyBVc2UgYSBkZWZhdWx0IHBlcnNpc3RlbmNlS2V5IHRoYXQgbGluZXMgdXAgd2l0aCBGaXJlYmFzZUFwcC5cbiAgICAgICAgICAgIHRoaXMuR1QgPSBcIltERUZBVUxUXVwiLCB0aGlzLnpUID0gbmV3IGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5IVCA9IGksIHRoaXMuWVQgPSBuZXcgUGkoe30pO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcIkpUXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlhUIHx8IChcbiAgICAgICAgICAgIC8vIExhenkgaW5pdGlhbGl6ZSBVc2VyRGF0YVJlYWRlciBvbmNlIHRoZSBzZXR0aW5ncyBhcmUgZnJvemVuXG4gICAgICAgICAgICB0aGlzLlhUID0gbmV3IE1yKHRoaXMuJGMsIHRoaXMuWVQuaWdub3JlVW5kZWZpbmVkUHJvcGVydGllcykpLCB0aGlzLlhUO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCB0LnByb3RvdHlwZS5zZXR0aW5ncyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgb3IoXCJGaXJlc3RvcmUuc2V0dGluZ3NcIiwgYXJndW1lbnRzLCAxKSwgYXIoXCJGaXJlc3RvcmUuc2V0dGluZ3NcIiwgXCJvYmplY3RcIiwgMSwgdCk7XG4gICAgICAgIHZhciBlID0gbmV3IFBpKHQpO1xuICAgICAgICBpZiAodGhpcy5qVCAmJiAhdGhpcy5ZVC5pc0VxdWFsKGUpKSB0aHJvdyBuZXcgYyhoLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiRmlyZXN0b3JlIGhhcyBhbHJlYWR5IGJlZW4gc3RhcnRlZCBhbmQgaXRzIHNldHRpbmdzIGNhbiBubyBsb25nZXIgYmUgY2hhbmdlZC4gWW91IGNhbiBvbmx5IGNhbGwgc2V0dGluZ3MoKSBiZWZvcmUgY2FsbGluZyBhbnkgb3RoZXIgbWV0aG9kcyBvbiBhIEZpcmVzdG9yZSBvYmplY3QuXCIpO1xuICAgICAgICB0aGlzLllUID0gZSwgdm9pZCAwICE9PSBlLmNyZWRlbnRpYWxzICYmICh0aGlzLnpUID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgaWYgKCF0KSByZXR1cm4gbmV3IGw7XG4gICAgICAgICAgICBzd2l0Y2ggKHQudHlwZSkge1xuICAgICAgICAgICAgICBjYXNlIFwiZ2FwaVwiOlxuICAgICAgICAgICAgICAgIHZhciBlID0gdC5aVDtcbiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhpcyByZWFsbHkgaXMgYSBHYXBpIGNsaWVudC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lKCEoXCJvYmplY3RcIiAhPSB0eXBlb2YgZSB8fCBudWxsID09PSBlIHx8ICFlLmF1dGggfHwgIWUuYXV0aC5nZXRBdXRoSGVhZGVyVmFsdWVGb3JGaXJzdFBhcnR5KSksIFxuICAgICAgICAgICAgICAgIG5ldyB5KGUsIHQuViB8fCBcIjBcIik7XG5cbiAgICAgICAgICAgICAgY2FzZSBcInByb3ZpZGVyXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQuWlQ7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwibWFrZUNyZWRlbnRpYWxzUHJvdmlkZXIgZmFpbGVkIGR1ZSB0byBpbnZhbGlkIGNyZWRlbnRpYWwgdHlwZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfShlLmNyZWRlbnRpYWxzKSk7XG4gICAgfSwgdC5wcm90b3R5cGUuZW5hYmxlTmV0d29yayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5XVCgpLCB0aGlzLmpULmVuYWJsZU5ldHdvcmsoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5kaXNhYmxlTmV0d29yayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5XVCgpLCB0aGlzLmpULmRpc2FibGVOZXR3b3JrKCk7XG4gICAgfSwgdC5wcm90b3R5cGUuZW5hYmxlUGVyc2lzdGVuY2UgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlLCBuO1xuICAgICAgICBpZiAodGhpcy5qVCkgdGhyb3cgbmV3IGMoaC5GQUlMRURfUFJFQ09ORElUSU9OLCBcIkZpcmVzdG9yZSBoYXMgYWxyZWFkeSBiZWVuIHN0YXJ0ZWQgYW5kIHBlcnNpc3RlbmNlIGNhbiBubyBsb25nZXIgYmUgZW5hYmxlZC4gWW91IGNhbiBvbmx5IGNhbGwgZW5hYmxlUGVyc2lzdGVuY2UoKSBiZWZvcmUgY2FsbGluZyBhbnkgb3RoZXIgbWV0aG9kcyBvbiBhIEZpcmVzdG9yZSBvYmplY3QuXCIpO1xuICAgICAgICB2YXIgciA9ICExO1xuICAgICAgICByZXR1cm4gdCAmJiAodm9pZCAwICE9PSB0LmV4cGVyaW1lbnRhbFRhYlN5bmNocm9uaXphdGlvbiAmJiB5ZShcIlRoZSAnZXhwZXJpbWVudGFsVGFiU3luY2hyb25pemF0aW9uJyBzZXR0aW5nIHdpbGwgYmUgcmVtb3ZlZC4gVXNlICdzeW5jaHJvbml6ZVRhYnMnIGluc3RlYWQuXCIpLCBcbiAgICAgICAgciA9IG51bGwgIT09IChuID0gbnVsbCAhPT0gKGUgPSB0LnN5bmNocm9uaXplVGFicykgJiYgdm9pZCAwICE9PSBlID8gZSA6IHQuZXhwZXJpbWVudGFsVGFiU3luY2hyb25pemF0aW9uKSAmJiB2b2lkIDAgIT09IG4gJiYgbiksIFxuICAgICAgICB0aGlzLnRFKHRoaXMuSFQsIHtcbiAgICAgICAgICAgIFZUOiAhMCxcbiAgICAgICAgICAgIGNhY2hlU2l6ZUJ5dGVzOiB0aGlzLllULmNhY2hlU2l6ZUJ5dGVzLFxuICAgICAgICAgICAgc3luY2hyb25pemVUYWJzOiByXG4gICAgICAgIH0pO1xuICAgIH0sIHQucHJvdG90eXBlLmNsZWFyUGVyc2lzdGVuY2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGUuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdCwgbiA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gZS5fX2dlbmVyYXRvcih0aGlzLCAoZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IHRoaXMualQgJiYgIXRoaXMualQuU1QpIHRocm93IG5ldyBjKGguRkFJTEVEX1BSRUNPTkRJVElPTiwgXCJQZXJzaXN0ZW5jZSBjYW5ub3QgYmUgY2xlYXJlZCBhZnRlciB0aGlzIEZpcmVzdG9yZSBpbnN0YW5jZSBpcyBpbml0aWFsaXplZC5cIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgPSBuZXcgVWUsIFsgMiAvKnJldHVybiovICwgKHRoaXMuUVQuTWEoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5fX2F3YWl0ZXIobiwgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuLCByO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuX19nZW5lcmF0b3IodGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUudHJ5cy5wdXNoKFsgMCwgMiwgLCAzIF0pLCBuID0gdGhpcy5lRSgpLCBbIDQgLyp5aWVsZCovICwgdGhpcy5IVC5jbGVhclBlcnNpc3RlbmNlKG4pIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuc2VudCgpLCB0LnJlc29sdmUoKSwgWyAzIC8qYnJlYWsqLyAsIDMgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gciA9IGUuc2VudCgpLCB0LnJlamVjdChyKSwgWyAzIC8qYnJlYWsqLyAsIDMgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KSksIHQucHJvbWlzZSkgXTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLnRlcm1pbmF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHAuX3JlbW92ZVNlcnZpY2VJbnN0YW5jZShcImZpcmVzdG9yZVwiKSwgdGhpcy5JTlRFUk5BTC5kZWxldGUoKTtcbiAgICB9LCBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwic0VcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuV1QoKSwgdGhpcy5qVC5TVDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgdC5wcm90b3R5cGUud2FpdEZvclBlbmRpbmdXcml0ZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuV1QoKSwgdGhpcy5qVC53YWl0Rm9yUGVuZGluZ1dyaXRlcygpO1xuICAgIH0sIHQucHJvdG90eXBlLm9uU25hcHNob3RzSW5TeW5jID0gZnVuY3Rpb24odCkge1xuICAgICAgICBpZiAodGhpcy5XVCgpLCBMaSh0KSkgcmV0dXJuIHRoaXMuaUUodCk7XG4gICAgICAgIGFyKFwiRmlyZXN0b3JlLm9uU25hcHNob3RzSW5TeW5jXCIsIFwiZnVuY3Rpb25cIiwgMSwgdCk7XG4gICAgICAgIHZhciBlID0ge1xuICAgICAgICAgICAgbmV4dDogdFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5pRShlKTtcbiAgICB9LCB0LnByb3RvdHlwZS5pRSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLCBuID0gbmV3IFJpKHtcbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHQubmV4dCAmJiB0Lm5leHQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHRocm93IGdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5qVC5EZihuKSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBuLk5UKCksIGUualQuQ2Yobik7XG4gICAgICAgIH07XG4gICAgfSwgdC5wcm90b3R5cGUuV1QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMualQgfHwgXG4gICAgICAgIC8vIEtpY2sgb2ZmIHN0YXJ0aW5nIHRoZSBjbGllbnQgYnV0IGRvbid0IGFjdHVhbGx5IHdhaXQgZm9yIGl0LlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzXG4gICAgICAgIHRoaXMudEUobmV3IERpLCB7XG4gICAgICAgICAgICBWVDogITFcbiAgICAgICAgfSksIHRoaXMualQ7XG4gICAgfSwgdC5wcm90b3R5cGUuZUUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJZSh0aGlzLiRjLCB0aGlzLkdULCB0aGlzLllULmhvc3QsIHRoaXMuWVQuc3NsLCB0aGlzLllULmZvcmNlTG9uZ1BvbGxpbmcpO1xuICAgIH0sIHQucHJvdG90eXBlLnRFID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXMuZUUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMualQgPSBuZXcgU2koY2UubnQoKSwgbiwgdGhpcy56VCwgdGhpcy5RVCksIHRoaXMualQuc3RhcnQodCwgZSk7XG4gICAgfSwgdC5LVCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgaWYgKGUgPSB0Lm9wdGlvbnMsIFwicHJvamVjdElkXCIsICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgXCJwcm9qZWN0SWRcIikpIHRocm93IG5ldyBjKGguSU5WQUxJRF9BUkdVTUVOVCwgJ1wicHJvamVjdElkXCIgbm90IHByb3ZpZGVkIGluIGZpcmViYXNlLmluaXRpYWxpemVBcHAuJyk7XG4gICAgICAgIHZhciBlLCBuID0gdC5vcHRpb25zLnByb2plY3RJZDtcbiAgICAgICAgLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbiAgICAgICAgLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gcHJldmVudCBpbnN0YW50aWF0aW9uIHRocm91Z2ggdGhlIGNvbnN0cnVjdG9yLlxuICpcbiAqIFRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBuZXcgY29uc3RydWN0b3IgdGhhdCB0aHJvd3Mgd2hlbiBpdCdzIGludm9rZWQuXG4gKiBUaGUgcHJvdG90eXBlIG9mIHRoYXQgY29uc3RydWN0b3IgaXMgdGhlbiBzZXQgdG8gdGhlIHByb3RvdHlwZSBvZiB0aGUgaGlkZGVuXG4gKiBcImNsYXNzXCIgdG8gZXhwb3NlIGFsbCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgYW5kIGFsbG93IGZvciBpbnN0YW5jZW9mXG4gKiBjaGVja3MuXG4gKlxuICogVG8gYWxzbyBtYWtlIGFsbCB0aGUgc3RhdGljIG1ldGhvZHMgYXZhaWxhYmxlLCBhbGwgcHJvcGVydGllcyBvZiB0aGVcbiAqIG9yaWdpbmFsIGNvbnN0cnVjdG9yIGFyZSBjb3BpZWQgdG8gdGhlIG5ldyBjb25zdHJ1Y3Rvci5cbiAqLyAgICAgICAgaWYgKCFuIHx8IFwic3RyaW5nXCIgIT0gdHlwZW9mIG4pIHRocm93IG5ldyBjKGguSU5WQUxJRF9BUkdVTUVOVCwgXCJwcm9qZWN0SWQgbXVzdCBiZSBhIHN0cmluZyBpbiBGaXJlYmFzZUFwcC5vcHRpb25zXCIpO1xuICAgICAgICByZXR1cm4gbmV3IE5lKG4pO1xuICAgIH0sIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJhcHBcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLlVUKSB0aHJvdyBuZXcgYyhoLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiRmlyZXN0b3JlIHdhcyBub3QgaW5pdGlhbGl6ZWQgdXNpbmcgdGhlIEZpcmViYXNlIFNESy4gJ2FwcCcgaXMgbm90IGF2YWlsYWJsZVwiKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlVUO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCB0LnByb3RvdHlwZS5jb2xsZWN0aW9uID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gb3IoXCJGaXJlc3RvcmUuY29sbGVjdGlvblwiLCBhcmd1bWVudHMsIDEpLCBhcihcIkZpcmVzdG9yZS5jb2xsZWN0aW9uXCIsIFwibm9uLWVtcHR5IHN0cmluZ1wiLCAxLCB0KSwgXG4gICAgICAgIHRoaXMuV1QoKSwgbmV3IFdpKHcuSyh0KSwgdGhpcyk7XG4gICAgfSwgdC5wcm90b3R5cGUuZG9jID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gb3IoXCJGaXJlc3RvcmUuZG9jXCIsIGFyZ3VtZW50cywgMSksIGFyKFwiRmlyZXN0b3JlLmRvY1wiLCBcIm5vbi1lbXB0eSBzdHJpbmdcIiwgMSwgdCksIFxuICAgICAgICB0aGlzLldUKCksIE1pLm5FKHcuSyh0KSwgdGhpcyk7XG4gICAgfSwgdC5wcm90b3R5cGUuY29sbGVjdGlvbkdyb3VwID0gZnVuY3Rpb24odCkge1xuICAgICAgICBpZiAob3IoXCJGaXJlc3RvcmUuY29sbGVjdGlvbkdyb3VwXCIsIGFyZ3VtZW50cywgMSksIGFyKFwiRmlyZXN0b3JlLmNvbGxlY3Rpb25Hcm91cFwiLCBcIm5vbi1lbXB0eSBzdHJpbmdcIiwgMSwgdCksIFxuICAgICAgICB0LmluZGV4T2YoXCIvXCIpID49IDApIHRocm93IG5ldyBjKGguSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIGNvbGxlY3Rpb24gSUQgJ1wiICsgdCArIFwiJyBwYXNzZWQgdG8gZnVuY3Rpb24gRmlyZXN0b3JlLmNvbGxlY3Rpb25Hcm91cCgpLiBDb2xsZWN0aW9uIElEcyBtdXN0IG5vdCBjb250YWluICcvJy5cIik7XG4gICAgICAgIHJldHVybiB0aGlzLldUKCksIG5ldyB6aShuZXcgd3Qody5HLCB0KSwgdGhpcyk7XG4gICAgfSwgdC5wcm90b3R5cGUucnVuVHJhbnNhY3Rpb24gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG9yKFwiRmlyZXN0b3JlLnJ1blRyYW5zYWN0aW9uXCIsIGFyZ3VtZW50cywgMSksIGFyKFwiRmlyZXN0b3JlLnJ1blRyYW5zYWN0aW9uXCIsIFwiZnVuY3Rpb25cIiwgMSwgdCksIFxuICAgICAgICB0aGlzLldUKCkudHJhbnNhY3Rpb24oKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIHJldHVybiB0KG5ldyBDaShlLCBuKSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5iYXRjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5XVCgpLCBuZXcgcWkodGhpcyk7XG4gICAgfSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwibG9nTGV2ZWxcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc3dpdGNoIChsZSgpKSB7XG4gICAgICAgICAgICAgIGNhc2Ugci5Mb2dMZXZlbC5ERUJVRzpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJkZWJ1Z1wiO1xuXG4gICAgICAgICAgICAgIGNhc2Ugci5Mb2dMZXZlbC5TSUxFTlQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwic2lsZW50XCI7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAvLyBUaGUgZGVmYXVsdCBsb2cgbGV2ZWwgaXMgZXJyb3JcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJlcnJvclwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCB0LnNldExvZ0xldmVsID0gZnVuY3Rpb24odCkge1xuICAgICAgICBzd2l0Y2ggKG9yKFwiRmlyZXN0b3JlLnNldExvZ0xldmVsXCIsIGFyZ3VtZW50cywgMSksIGFyKFwiRmlyZXN0b3JlLnNldExvZ0xldmVsXCIsIFwibm9uLWVtcHR5IHN0cmluZ1wiLCAxLCB0KSwgXG4gICAgICAgIHQpIHtcbiAgICAgICAgICBjYXNlIFwiZGVidWdcIjpcbiAgICAgICAgICAgIHBlKHIuTG9nTGV2ZWwuREVCVUcpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgICAgIHBlKHIuTG9nTGV2ZWwuRVJST1IpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFwic2lsZW50XCI6XG4gICAgICAgICAgICBwZShyLkxvZ0xldmVsLlNJTEVOVCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBsb2cgbGV2ZWw6IFwiICsgdCk7XG4gICAgICAgIH1cbiAgICB9LCBcbiAgICAvLyBOb3RlOiB0aGlzIGlzIG5vdCBhIHByb3BlcnR5IGJlY2F1c2UgdGhlIG1pbmlmaWVyIGNhbid0IHdvcmsgY29ycmVjdGx5IHdpdGhcbiAgICAvLyB0aGUgd2F5IFR5cGVTY3JpcHQgY29tcGlsZXIgb3V0cHV0cyBwcm9wZXJ0aWVzLlxuICAgIHQucHJvdG90eXBlLnJFID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLllULnRpbWVzdGFtcHNJblNuYXBzaG90cztcbiAgICB9LCB0O1xufSgpLCBDaSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlKSB7XG4gICAgICAgIHRoaXMuaEUgPSB0LCB0aGlzLm9FID0gZTtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICBvcihcIlRyYW5zYWN0aW9uLmdldFwiLCBhcmd1bWVudHMsIDEpO1xuICAgICAgICB2YXIgbiA9ICRpKFwiVHJhbnNhY3Rpb24uZ2V0XCIsIHQsIHRoaXMuaEUpO1xuICAgICAgICByZXR1cm4gdGhpcy5vRS5BXyhbIG4ua2MgXSkudGhlbigoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgaWYgKCF0IHx8IDEgIT09IHQubGVuZ3RoKSByZXR1cm4gZ2UoKTtcbiAgICAgICAgICAgIHZhciByID0gdFswXTtcbiAgICAgICAgICAgIGlmIChyIGluc3RhbmNlb2YgdnQpIHJldHVybiBuZXcgRmkoZS5oRSwgbi5rYywgbnVsbCwgXG4gICAgICAgICAgICAvKiBmcm9tQ2FjaGU9ICovICExLCBcbiAgICAgICAgICAgIC8qIGhhc1BlbmRpbmdXcml0ZXM9ICovICExLCBuLmFFKTtcbiAgICAgICAgICAgIGlmIChyIGluc3RhbmNlb2YgeXQpIHJldHVybiBuZXcgRmkoZS5oRSwgbi5rYywgciwgXG4gICAgICAgICAgICAvKiBmcm9tQ2FjaGU9ICovICExLCBcbiAgICAgICAgICAgIC8qIGhhc1BlbmRpbmdXcml0ZXM9ICovICExLCBuLmFFKTtcbiAgICAgICAgICAgIHRocm93IGdlKCk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHVyKFwiVHJhbnNhY3Rpb24uc2V0XCIsIGFyZ3VtZW50cywgMiwgMyk7XG4gICAgICAgIHZhciByID0gJGkoXCJUcmFuc2FjdGlvbi5zZXRcIiwgdCwgdGhpcy5oRSk7XG4gICAgICAgIG4gPSBRaShcIlRyYW5zYWN0aW9uLnNldFwiLCBuKTtcbiAgICAgICAgdmFyIGkgPSBIaShyLmFFLCBlLCBcIlRyYW5zYWN0aW9uLnNldFwiKSwgbyA9IGlbMF0sIHMgPSBpWzFdLCB1ID0gbi5tZXJnZSB8fCBuLm1lcmdlRmllbGRzID8gdGhpcy5oRS5KVC5EYyhzLCBvLCBuLm1lcmdlRmllbGRzKSA6IHRoaXMuaEUuSlQudmMocywgbyk7XG4gICAgICAgIHJldHVybiB0aGlzLm9FLnNldChyLmtjLCB1KSwgdGhpcztcbiAgICB9LCB0LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIGZvciAodmFyIHIsIGksIG8gPSBbXSwgcyA9IDM7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIG9bcyAtIDNdID0gYXJndW1lbnRzW3NdO1xuICAgICAgICByZXR1cm4gXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSB8fCBlIGluc3RhbmNlb2YgTnIgPyAoc3IoXCJUcmFuc2FjdGlvbi51cGRhdGVcIiwgYXJndW1lbnRzLCAzKSwgXG4gICAgICAgIHIgPSAkaShcIlRyYW5zYWN0aW9uLnVwZGF0ZVwiLCB0LCB0aGlzLmhFKSwgaSA9IHRoaXMuaEUuSlQuRmMoXCJUcmFuc2FjdGlvbi51cGRhdGVcIiwgZSwgbiwgbykpIDogKG9yKFwiVHJhbnNhY3Rpb24udXBkYXRlXCIsIGFyZ3VtZW50cywgMiksIFxuICAgICAgICByID0gJGkoXCJUcmFuc2FjdGlvbi51cGRhdGVcIiwgdCwgdGhpcy5oRSksIGkgPSB0aGlzLmhFLkpULkNjKFwiVHJhbnNhY3Rpb24udXBkYXRlXCIsIGUpKSwgXG4gICAgICAgIHRoaXMub0UudXBkYXRlKHIua2MsIGkpLCB0aGlzO1xuICAgIH0sIHQucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgb3IoXCJUcmFuc2FjdGlvbi5kZWxldGVcIiwgYXJndW1lbnRzLCAxKTtcbiAgICAgICAgdmFyIGUgPSAkaShcIlRyYW5zYWN0aW9uLmRlbGV0ZVwiLCB0LCB0aGlzLmhFKTtcbiAgICAgICAgcmV0dXJuIHRoaXMub0UuZGVsZXRlKGUua2MpLCB0aGlzO1xuICAgIH0sIHQ7XG59KCksIHFpID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdGhpcy5oRSA9IHQsIHRoaXMudUUgPSBbXSwgdGhpcy5jRSA9ICExO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICB1cihcIldyaXRlQmF0Y2guc2V0XCIsIGFyZ3VtZW50cywgMiwgMyksIHRoaXMuX0UoKTtcbiAgICAgICAgdmFyIHIgPSAkaShcIldyaXRlQmF0Y2guc2V0XCIsIHQsIHRoaXMuaEUpO1xuICAgICAgICBuID0gUWkoXCJXcml0ZUJhdGNoLnNldFwiLCBuKTtcbiAgICAgICAgdmFyIGkgPSBIaShyLmFFLCBlLCBcIldyaXRlQmF0Y2guc2V0XCIpLCBvID0gaVswXSwgcyA9IGlbMV0sIHUgPSBuLm1lcmdlIHx8IG4ubWVyZ2VGaWVsZHMgPyB0aGlzLmhFLkpULkRjKHMsIG8sIG4ubWVyZ2VGaWVsZHMpIDogdGhpcy5oRS5KVC52YyhzLCBvKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudUUgPSB0aGlzLnVFLmNvbmNhdCh1LkFjKHIua2MsIG50LmZ0KCkpKSwgdGhpcztcbiAgICB9LCB0LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIGZvciAodmFyIHIsIGksIG8gPSBbXSwgcyA9IDM7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIG9bcyAtIDNdID0gYXJndW1lbnRzW3NdO1xuICAgICAgICByZXR1cm4gdGhpcy5fRSgpLCBcInN0cmluZ1wiID09IHR5cGVvZiBlIHx8IGUgaW5zdGFuY2VvZiBOciA/IChzcihcIldyaXRlQmF0Y2gudXBkYXRlXCIsIGFyZ3VtZW50cywgMyksIFxuICAgICAgICByID0gJGkoXCJXcml0ZUJhdGNoLnVwZGF0ZVwiLCB0LCB0aGlzLmhFKSwgaSA9IHRoaXMuaEUuSlQuRmMoXCJXcml0ZUJhdGNoLnVwZGF0ZVwiLCBlLCBuLCBvKSkgOiAob3IoXCJXcml0ZUJhdGNoLnVwZGF0ZVwiLCBhcmd1bWVudHMsIDIpLCBcbiAgICAgICAgciA9ICRpKFwiV3JpdGVCYXRjaC51cGRhdGVcIiwgdCwgdGhpcy5oRSksIGkgPSB0aGlzLmhFLkpULkNjKFwiV3JpdGVCYXRjaC51cGRhdGVcIiwgZSkpLCBcbiAgICAgICAgdGhpcy51RSA9IHRoaXMudUUuY29uY2F0KGkuQWMoci5rYywgbnQuZXhpc3RzKCEwKSkpLCB0aGlzO1xuICAgIH0sIHQucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgb3IoXCJXcml0ZUJhdGNoLmRlbGV0ZVwiLCBhcmd1bWVudHMsIDEpLCB0aGlzLl9FKCk7XG4gICAgICAgIHZhciBlID0gJGkoXCJXcml0ZUJhdGNoLmRlbGV0ZVwiLCB0LCB0aGlzLmhFKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudUUgPSB0aGlzLnVFLmNvbmNhdChuZXcgdXQoZS5rYywgbnQuZnQoKSkpLCB0aGlzO1xuICAgIH0sIHQucHJvdG90eXBlLmNvbW1pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fRSgpLCB0aGlzLmNFID0gITAsIHRoaXMudUUubGVuZ3RoID4gMCA/IHRoaXMuaEUuV1QoKS53cml0ZSh0aGlzLnVFKSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH0sIHQucHJvdG90eXBlLl9FID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmNFKSB0aHJvdyBuZXcgYyhoLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiQSB3cml0ZSBiYXRjaCBjYW4gbm8gbG9uZ2VyIGJlIHVzZWQgYWZ0ZXIgY29tbWl0KCkgaGFzIGJlZW4gY2FsbGVkLlwiKTtcbiAgICB9LCB0O1xufSgpLCBNaSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMua2MgPSB0LCB0aGlzLmZpcmVzdG9yZSA9IGUsIHRoaXMuYUUgPSBuLCB0aGlzLmpUID0gdGhpcy5maXJlc3RvcmUuV1QoKTtcbiAgICB9XG4gICAgcmV0dXJuIHQubkUgPSBmdW5jdGlvbihlLCBuLCByKSB7XG4gICAgICAgIGlmIChlLmxlbmd0aCAlIDIgIT0gMCkgdGhyb3cgbmV3IGMoaC5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgZG9jdW1lbnQgcmVmZXJlbmNlLiBEb2N1bWVudCByZWZlcmVuY2VzIG11c3QgaGF2ZSBhbiBldmVuIG51bWJlciBvZiBzZWdtZW50cywgYnV0IFwiICsgZS5qKCkgKyBcIiBoYXMgXCIgKyBlLmxlbmd0aCk7XG4gICAgICAgIHJldHVybiBuZXcgdChuZXcgXyhlKSwgbiwgcik7XG4gICAgfSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcImlkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmtjLnBhdGguTygpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwicGFyZW50XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgV2kodGhpcy5rYy5wYXRoLkwoKSwgdGhpcy5maXJlc3RvcmUsIHRoaXMuYUUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwicGF0aFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5rYy5wYXRoLmooKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgdC5wcm90b3R5cGUuY29sbGVjdGlvbiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgaWYgKG9yKFwiRG9jdW1lbnRSZWZlcmVuY2UuY29sbGVjdGlvblwiLCBhcmd1bWVudHMsIDEpLCBhcihcIkRvY3VtZW50UmVmZXJlbmNlLmNvbGxlY3Rpb25cIiwgXCJub24tZW1wdHkgc3RyaW5nXCIsIDEsIHQpLCBcbiAgICAgICAgIXQpIHRocm93IG5ldyBjKGguSU5WQUxJRF9BUkdVTUVOVCwgXCJNdXN0IHByb3ZpZGUgYSBub24tZW1wdHkgY29sbGVjdGlvbiBuYW1lIHRvIGNvbGxlY3Rpb24oKVwiKTtcbiAgICAgICAgdmFyIGUgPSB3LksodCk7XG4gICAgICAgIHJldHVybiBuZXcgV2kodGhpcy5rYy5wYXRoLmNoaWxkKGUpLCB0aGlzLmZpcmVzdG9yZSk7XG4gICAgfSwgdC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKCEoZSBpbnN0YW5jZW9mIHQpKSB0aHJvdyBtcihcImlzRXF1YWxcIiwgXCJEb2N1bWVudFJlZmVyZW5jZVwiLCAxLCBlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlyZXN0b3JlID09PSBlLmZpcmVzdG9yZSAmJiB0aGlzLmtjLmlzRXF1YWwoZS5rYykgJiYgdGhpcy5hRSA9PT0gZS5hRTtcbiAgICB9LCB0LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHVyKFwiRG9jdW1lbnRSZWZlcmVuY2Uuc2V0XCIsIGFyZ3VtZW50cywgMSwgMiksIGUgPSBRaShcIkRvY3VtZW50UmVmZXJlbmNlLnNldFwiLCBlKTtcbiAgICAgICAgdmFyIG4gPSBIaSh0aGlzLmFFLCB0LCBcIkRvY3VtZW50UmVmZXJlbmNlLnNldFwiKSwgciA9IG5bMF0sIGkgPSBuWzFdLCBvID0gZS5tZXJnZSB8fCBlLm1lcmdlRmllbGRzID8gdGhpcy5maXJlc3RvcmUuSlQuRGMoaSwgciwgZS5tZXJnZUZpZWxkcykgOiB0aGlzLmZpcmVzdG9yZS5KVC52YyhpLCByKTtcbiAgICAgICAgcmV0dXJuIHRoaXMualQud3JpdGUoby5BYyh0aGlzLmtjLCBudC5mdCgpKSk7XG4gICAgfSwgdC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBmb3IgKHZhciBuLCByID0gW10sIGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSByW2kgLSAyXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgcmV0dXJuIFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgfHwgdCBpbnN0YW5jZW9mIE5yID8gKHNyKFwiRG9jdW1lbnRSZWZlcmVuY2UudXBkYXRlXCIsIGFyZ3VtZW50cywgMiksIFxuICAgICAgICBuID0gdGhpcy5maXJlc3RvcmUuSlQuRmMoXCJEb2N1bWVudFJlZmVyZW5jZS51cGRhdGVcIiwgdCwgZSwgcikpIDogKG9yKFwiRG9jdW1lbnRSZWZlcmVuY2UudXBkYXRlXCIsIGFyZ3VtZW50cywgMSksIFxuICAgICAgICBuID0gdGhpcy5maXJlc3RvcmUuSlQuQ2MoXCJEb2N1bWVudFJlZmVyZW5jZS51cGRhdGVcIiwgdCkpLCB0aGlzLmpULndyaXRlKG4uQWModGhpcy5rYywgbnQuZXhpc3RzKCEwKSkpO1xuICAgIH0sIHQucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gb3IoXCJEb2N1bWVudFJlZmVyZW5jZS5kZWxldGVcIiwgYXJndW1lbnRzLCAwKSwgdGhpcy5qVC53cml0ZShbIG5ldyB1dCh0aGlzLmtjLCBudC5mdCgpKSBdKTtcbiAgICB9LCB0LnByb3RvdHlwZS5vblNuYXBzaG90ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGZvciAodmFyIHQgPSBbXSwgZSA9IDA7IGUgPCBhcmd1bWVudHMubGVuZ3RoOyBlKyspIHRbZV0gPSBhcmd1bWVudHNbZV07XG4gICAgICAgIHVyKFwiRG9jdW1lbnRSZWZlcmVuY2Uub25TbmFwc2hvdFwiLCBhcmd1bWVudHMsIDEsIDQpO1xuICAgICAgICB2YXIgbiwgciA9IHtcbiAgICAgICAgICAgIGluY2x1ZGVNZXRhZGF0YUNoYW5nZXM6ICExXG4gICAgICAgIH0sIGkgPSAwO1xuICAgICAgICBcIm9iamVjdFwiICE9IHR5cGVvZiB0W2ldIHx8IExpKHRbaV0pIHx8IChncihcIkRvY3VtZW50UmVmZXJlbmNlLm9uU25hcHNob3RcIiwgciA9IHRbaV0sIFsgXCJpbmNsdWRlTWV0YWRhdGFDaGFuZ2VzXCIgXSksIFxuICAgICAgICBmcihcIkRvY3VtZW50UmVmZXJlbmNlLm9uU25hcHNob3RcIiwgXCJib29sZWFuXCIsIFwiaW5jbHVkZU1ldGFkYXRhQ2hhbmdlc1wiLCByLmluY2x1ZGVNZXRhZGF0YUNoYW5nZXMpLCBcbiAgICAgICAgaSsrKTtcbiAgICAgICAgdmFyIG8gPSB7XG4gICAgICAgICAgICBpbmNsdWRlTWV0YWRhdGFDaGFuZ2VzOiByLmluY2x1ZGVNZXRhZGF0YUNoYW5nZXNcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIExpKHRbaV0pID8gbiA9IHRbaV0gOiAoYXIoXCJEb2N1bWVudFJlZmVyZW5jZS5vblNuYXBzaG90XCIsIFwiZnVuY3Rpb25cIiwgaSwgdFtpXSksIFxuICAgICAgICBocihcIkRvY3VtZW50UmVmZXJlbmNlLm9uU25hcHNob3RcIiwgXCJmdW5jdGlvblwiLCBpICsgMSwgdFtpICsgMV0pLCBocihcIkRvY3VtZW50UmVmZXJlbmNlLm9uU25hcHNob3RcIiwgXCJmdW5jdGlvblwiLCBpICsgMiwgdFtpICsgMl0pLCBcbiAgICAgICAgbiA9IHtcbiAgICAgICAgICAgIG5leHQ6IHRbaV0sXG4gICAgICAgICAgICBlcnJvcjogdFtpICsgMV0sXG4gICAgICAgICAgICBjb21wbGV0ZTogdFtpICsgMl1cbiAgICAgICAgfSksIHRoaXMubEUobywgbik7XG4gICAgfSwgdC5wcm90b3R5cGUubEUgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcywgciA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJVbmNhdWdodCBFcnJvciBpbiBvblNuYXBzaG90OlwiLCB0KTtcbiAgICAgICAgfTtcbiAgICAgICAgZS5lcnJvciAmJiAociA9IGUuZXJyb3IuYmluZChlKSk7XG4gICAgICAgIHZhciBpID0gbmV3IFJpKHtcbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5uZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByID0gdC5kb2NzLmdldChuLmtjKTtcbiAgICAgICAgICAgICAgICAgICAgZS5uZXh0KG5ldyBGaShuLmZpcmVzdG9yZSwgbi5rYywgciwgdC5mcm9tQ2FjaGUsIHQuaGFzUGVuZGluZ1dyaXRlcywgbi5hRSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogclxuICAgICAgICB9KSwgbyA9IHRoaXMualQubGlzdGVuKHd0Lld0KHRoaXMua2MucGF0aCksIGksIHQpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpLk5UKCksIG4ualQucmwobyk7XG4gICAgICAgIH07XG4gICAgfSwgdC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB1cihcIkRvY3VtZW50UmVmZXJlbmNlLmdldFwiLCBhcmd1bWVudHMsIDAsIDEpLCBZaShcIkRvY3VtZW50UmVmZXJlbmNlLmdldFwiLCB0KSwgXG4gICAgICAgIG5ldyBQcm9taXNlKChmdW5jdGlvbihuLCByKSB7XG4gICAgICAgICAgICB0ICYmIFwiY2FjaGVcIiA9PT0gdC5zb3VyY2UgPyBlLmZpcmVzdG9yZS5XVCgpLkRUKGUua2MpLnRoZW4oKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICBuKG5ldyBGaShlLmZpcmVzdG9yZSwgZS5rYywgdCwgXG4gICAgICAgICAgICAgICAgLypmcm9tQ2FjaGU9Ki8gITAsIHQgaW5zdGFuY2VvZiB5dCAmJiB0LkF0LCBlLmFFKSk7XG4gICAgICAgICAgICB9KSwgcikgOiBlLmRFKG4sIHIsIHQpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuZEUgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHZhciByID0gdGhpcy5sRSh7XG4gICAgICAgICAgICBpbmNsdWRlTWV0YWRhdGFDaGFuZ2VzOiAhMCxcbiAgICAgICAgICAgIE9mOiAhMFxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHF1ZXJ5IGZpcnN0IGJlZm9yZSBwYXNzaW5nIGV2ZW50IHRvIHVzZXIgdG8gYXZvaWRcbiAgICAgICAgICAgICAgICAvLyB1c2VyIGFjdGlvbnMgYWZmZWN0aW5nIHRoZSBub3cgc3RhbGUgcXVlcnkuXG4gICAgICAgICAgICAgICAgcigpLCAhaS5leGlzdHMgJiYgaS5tZXRhZGF0YS5mcm9tQ2FjaGUgPyBcbiAgICAgICAgICAgICAgICAvLyBUT0RPKGRpbW9uZCk6IElmIHdlJ3JlIG9ubGluZSBhbmQgdGhlIGRvY3VtZW50IGRvZXNuJ3RcbiAgICAgICAgICAgICAgICAvLyBleGlzdCB0aGVuIHdlIHJlc29sdmUgd2l0aCBhIGRvYy5leGlzdHMgc2V0IHRvIGZhbHNlLiBJZlxuICAgICAgICAgICAgICAgIC8vIHdlJ3JlIG9mZmxpbmUgaG93ZXZlciwgd2UgcmVqZWN0IHRoZSBQcm9taXNlIGluIHRoaXNcbiAgICAgICAgICAgICAgICAvLyBjYXNlLiBUd28gb3B0aW9uczogMSkgQ2FjaGUgdGhlIG5lZ2F0aXZlIHJlc3BvbnNlIGZyb21cbiAgICAgICAgICAgICAgICAvLyB0aGUgc2VydmVyIHNvIHdlIGNhbiBkZWxpdmVyIHRoYXQgZXZlbiB3aGVuIHlvdSdyZVxuICAgICAgICAgICAgICAgIC8vIG9mZmxpbmUgMikgQWN0dWFsbHkgcmVqZWN0IHRoZSBQcm9taXNlIGluIHRoZSBvbmxpbmUgY2FzZVxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBkb2N1bWVudCBkb2Vzbid0IGV4aXN0LlxuICAgICAgICAgICAgICAgIGUobmV3IGMoaC5VTkFWQUlMQUJMRSwgXCJGYWlsZWQgdG8gZ2V0IGRvY3VtZW50IGJlY2F1c2UgdGhlIGNsaWVudCBpcyBvZmZsaW5lLlwiKSkgOiBpLmV4aXN0cyAmJiBpLm1ldGFkYXRhLmZyb21DYWNoZSAmJiBuICYmIFwic2VydmVyXCIgPT09IG4uc291cmNlID8gZShuZXcgYyhoLlVOQVZBSUxBQkxFLCAnRmFpbGVkIHRvIGdldCBkb2N1bWVudCBmcm9tIHNlcnZlci4gKEhvd2V2ZXIsIHRoaXMgZG9jdW1lbnQgZG9lcyBleGlzdCBpbiB0aGUgbG9jYWwgY2FjaGUuIFJ1biBhZ2FpbiB3aXRob3V0IHNldHRpbmcgc291cmNlIHRvIFwic2VydmVyXCIgdG8gcmV0cmlldmUgdGhlIGNhY2hlZCBkb2N1bWVudC4pJykpIDogdChpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZVxuICAgICAgICB9KTtcbiAgICB9LCB0LnByb3RvdHlwZS53aXRoQ29udmVydGVyID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gbmV3IHQodGhpcy5rYywgdGhpcy5maXJlc3RvcmUsIGUpO1xuICAgIH0sIHQ7XG59KCksIGppID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQsIGUpIHtcbiAgICAgICAgdGhpcy5oYXNQZW5kaW5nV3JpdGVzID0gdCwgdGhpcy5mcm9tQ2FjaGUgPSBlO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzUGVuZGluZ1dyaXRlcyA9PT0gdC5oYXNQZW5kaW5nV3JpdGVzICYmIHRoaXMuZnJvbUNhY2hlID09PSB0LmZyb21DYWNoZTtcbiAgICB9LCB0O1xufSgpLCBGaSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlLCBuLCByLCBpLCBvKSB7XG4gICAgICAgIHRoaXMuaEUgPSB0LCB0aGlzLmtjID0gZSwgdGhpcy5mRSA9IG4sIHRoaXMuVEUgPSByLCB0aGlzLkVFID0gaSwgdGhpcy5hRSA9IG87XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5kYXRhID0gZnVuY3Rpb24odCkge1xuICAgICAgICBpZiAodXIoXCJEb2N1bWVudFNuYXBzaG90LmRhdGFcIiwgYXJndW1lbnRzLCAwLCAxKSwgdCA9IEtpKFwiRG9jdW1lbnRTbmFwc2hvdC5kYXRhXCIsIHQpLCBcbiAgICAgICAgdGhpcy5mRSkge1xuICAgICAgICAgICAgLy8gV2Ugb25seSB3YW50IHRvIHVzZSB0aGUgY29udmVydGVyIGFuZCBjcmVhdGUgYSBuZXcgRG9jdW1lbnRTbmFwc2hvdFxuICAgICAgICAgICAgLy8gaWYgYSBjb252ZXJ0ZXIgaGFzIGJlZW4gcHJvdmlkZWQuXG4gICAgICAgICAgICBpZiAodGhpcy5hRSkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gbmV3IEJpKHRoaXMuaEUsIHRoaXMua2MsIHRoaXMuZkUsIHRoaXMuVEUsIHRoaXMuRUUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFFLmZyb21GaXJlc3RvcmUoZSwgdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IE9pKHRoaXMuaEUsIHRoaXMuaEUuckUoKSwgdC5zZXJ2ZXJUaW1lc3RhbXBzLCBcbiAgICAgICAgICAgIC8qIGNvbnZlcnRlcj0gKi8gdm9pZCAwKS5rVCh0aGlzLmZFLkx0KCkpO1xuICAgICAgICB9XG4gICAgfSwgdC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBpZiAodXIoXCJEb2N1bWVudFNuYXBzaG90LmdldFwiLCBhcmd1bWVudHMsIDEsIDIpLCBlID0gS2koXCJEb2N1bWVudFNuYXBzaG90LmdldFwiLCBlKSwgXG4gICAgICAgIHRoaXMuZkUpIHtcbiAgICAgICAgICAgIHZhciBuID0gdGhpcy5mRS5kYXRhKCkuZmllbGQoR3IoXCJEb2N1bWVudFNuYXBzaG90LmdldFwiLCB0KSk7XG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gbikgcmV0dXJuIG5ldyBPaSh0aGlzLmhFLCB0aGlzLmhFLnJFKCksIGUuc2VydmVyVGltZXN0YW1wcywgdGhpcy5hRSkua1Qobik7XG4gICAgICAgIH1cbiAgICB9LCBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwiaWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMua2MucGF0aC5PKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJyZWZcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBNaSh0aGlzLmtjLCB0aGlzLmhFLCB0aGlzLmFFKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcImV4aXN0c1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbCAhPT0gdGhpcy5mRTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcIm1ldGFkYXRhXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgamkodGhpcy5FRSwgdGhpcy5URSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIHQucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmICghKGUgaW5zdGFuY2VvZiB0KSkgdGhyb3cgbXIoXCJpc0VxdWFsXCIsIFwiRG9jdW1lbnRTbmFwc2hvdFwiLCAxLCBlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaEUgPT09IGUuaEUgJiYgdGhpcy5URSA9PT0gZS5URSAmJiB0aGlzLmtjLmlzRXF1YWwoZS5rYykgJiYgKG51bGwgPT09IHRoaXMuZkUgPyBudWxsID09PSBlLmZFIDogdGhpcy5mRS5pc0VxdWFsKGUuZkUpKSAmJiB0aGlzLmFFID09PSBlLmFFO1xuICAgIH0sIHQ7XG59KCksIEJpID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbih0KSB7XG4gICAgZnVuY3Rpb24gbigpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IHQgJiYgdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBlLl9fZXh0ZW5kcyhuLCB0KSwgbi5wcm90b3R5cGUuZGF0YSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIHQucHJvdG90eXBlLmRhdGEuY2FsbCh0aGlzLCBlKTtcbiAgICB9LCBuO1xufShGaSksIHppID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQsIGUsIG4pIHtcbiAgICAgICAgdGhpcy5JRSA9IHQsIHRoaXMuZmlyZXN0b3JlID0gZSwgdGhpcy5hRSA9IG47XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS53aGVyZSA9IGZ1bmN0aW9uKGUsIG4sIHIpIHtcbiAgICAgICAgb3IoXCJRdWVyeS53aGVyZVwiLCBhcmd1bWVudHMsIDMpLCB2cihcIlF1ZXJ5LndoZXJlXCIsIDMsIHIpO1xuICAgICAgICAvLyBFbnVtZXJhdGVkIGZyb20gdGhlIFdoZXJlRmlsdGVyT3AgdHlwZSBpbiBpbmRleC5kLnRzLlxuICAgICAgICB2YXIgaSwgbyA9IGZ1bmN0aW9uKHQsIGUsIG4sIHIpIHtcbiAgICAgICAgICAgIGlmICghZS5zb21lKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgPT09IHI7XG4gICAgICAgICAgICB9KSkpIHRocm93IG5ldyBjKGguSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIHZhbHVlIFwiICsgeXIocikgKyBcIiBwcm92aWRlZCB0byBmdW5jdGlvbiBRdWVyeS53aGVyZSgpIGZvciBpdHMgXCIgKyBFcigyKSArIFwiIGFyZ3VtZW50LiBBY2NlcHRhYmxlIHZhbHVlczogXCIgKyBlLmpvaW4oXCIsIFwiKSk7XG4gICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgfSgwLCBbIFwiPFwiIC8qIExFU1NfVEhBTiAqLyAsIFwiPD1cIiAvKiBMRVNTX1RIQU5fT1JfRVFVQUwgKi8gLCBcIj09XCIgLyogRVFVQUwgKi8gLCBcIj49XCIgLyogR1JFQVRFUl9USEFOX09SX0VRVUFMICovICwgXCI+XCIgLyogR1JFQVRFUl9USEFOICovICwgXCJhcnJheS1jb250YWluc1wiIC8qIEFSUkFZX0NPTlRBSU5TICovICwgXCJpblwiIC8qIElOICovICwgXCJhcnJheS1jb250YWlucy1hbnlcIiAvKiBBUlJBWV9DT05UQUlOU19BTlkgKi8gXSwgMCwgbiksIHMgPSBHcihcIlF1ZXJ5LndoZXJlXCIsIGUpO1xuICAgICAgICBpZiAocy5ZKCkpIHtcbiAgICAgICAgICAgIGlmIChcImFycmF5LWNvbnRhaW5zXCIgLyogQVJSQVlfQ09OVEFJTlMgKi8gPT09IG8gfHwgXCJhcnJheS1jb250YWlucy1hbnlcIiAvKiBBUlJBWV9DT05UQUlOU19BTlkgKi8gPT09IG8pIHRocm93IG5ldyBjKGguSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIFF1ZXJ5LiBZb3UgY2FuJ3QgcGVyZm9ybSAnXCIgKyBvICsgXCInIHF1ZXJpZXMgb24gRmllbGRQYXRoLmRvY3VtZW50SWQoKS5cIik7XG4gICAgICAgICAgICBpZiAoXCJpblwiIC8qIElOICovID09PSBvKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53RShyLCBvKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB1ID0gW10sIGEgPSAwLCBmID0gcjsgYSA8IGYubGVuZ3RoOyBhKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSBmW2FdO1xuICAgICAgICAgICAgICAgICAgICB1LnB1c2godGhpcy5SRShsKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGkgPSB7XG4gICAgICAgICAgICAgICAgICAgIGFycmF5VmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogdVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSBpID0gdGhpcy5SRShyKTtcbiAgICAgICAgfSBlbHNlIFwiaW5cIiAvKiBJTiAqLyAhPT0gbyAmJiBcImFycmF5LWNvbnRhaW5zLWFueVwiIC8qIEFSUkFZX0NPTlRBSU5TX0FOWSAqLyAhPT0gbyB8fCB0aGlzLndFKHIsIG8pLCBcbiAgICAgICAgaSA9IHRoaXMuZmlyZXN0b3JlLkpULk5jKFwiUXVlcnkud2hlcmVcIiwgciwgXG4gICAgICAgIC8vIFdlIG9ubHkgYWxsb3cgbmVzdGVkIGFycmF5cyBmb3IgSU4gcXVlcmllcy5cbiAgICAgICAgLyoqIGFsbG93QXJyYXlzID0gKi8gXCJpblwiIC8qIElOICovID09PSBvKTtcbiAgICAgICAgdmFyIHAgPSBFdC5jcmVhdGUocywgbywgaSk7XG4gICAgICAgIHJldHVybiB0aGlzLkFFKHApLCBuZXcgdCh0aGlzLklFLkd0KHApLCB0aGlzLmZpcmVzdG9yZSwgdGhpcy5hRSk7XG4gICAgfSwgdC5wcm90b3R5cGUub3JkZXJCeSA9IGZ1bmN0aW9uKGUsIG4pIHtcbiAgICAgICAgdmFyIHI7XG4gICAgICAgIGlmICh1cihcIlF1ZXJ5Lm9yZGVyQnlcIiwgYXJndW1lbnRzLCAxLCAyKSwgaHIoXCJRdWVyeS5vcmRlckJ5XCIsIFwibm9uLWVtcHR5IHN0cmluZ1wiLCAyLCBuKSwgXG4gICAgICAgIHZvaWQgMCA9PT0gbiB8fCBcImFzY1wiID09PSBuKSByID0gXCJhc2NcIiAvKiBBU0NFTkRJTkcgKi87IGVsc2Uge1xuICAgICAgICAgICAgaWYgKFwiZGVzY1wiICE9PSBuKSB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiRnVuY3Rpb24gUXVlcnkub3JkZXJCeSgpIGhhcyB1bmtub3duIGRpcmVjdGlvbiAnXCIgKyBuICsgXCInLCBleHBlY3RlZCAnYXNjJyBvciAnZGVzYycuXCIpO1xuICAgICAgICAgICAgciA9IFwiZGVzY1wiIC8qIERFU0NFTkRJTkcgKi87XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG51bGwgIT09IHRoaXMuSUUuc3RhcnRBdCkgdGhyb3cgbmV3IGMoaC5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgcXVlcnkuIFlvdSBtdXN0IG5vdCBjYWxsIFF1ZXJ5LnN0YXJ0QXQoKSBvciBRdWVyeS5zdGFydEFmdGVyKCkgYmVmb3JlIGNhbGxpbmcgUXVlcnkub3JkZXJCeSgpLlwiKTtcbiAgICAgICAgaWYgKG51bGwgIT09IHRoaXMuSUUuZW5kQXQpIHRocm93IG5ldyBjKGguSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIHF1ZXJ5LiBZb3UgbXVzdCBub3QgY2FsbCBRdWVyeS5lbmRBdCgpIG9yIFF1ZXJ5LmVuZEJlZm9yZSgpIGJlZm9yZSBjYWxsaW5nIFF1ZXJ5Lm9yZGVyQnkoKS5cIik7XG4gICAgICAgIHZhciBpID0gR3IoXCJRdWVyeS5vcmRlckJ5XCIsIGUpLCBvID0gbmV3IGt0KGksIHIpO1xuICAgICAgICByZXR1cm4gdGhpcy5tRShvKSwgbmV3IHQodGhpcy5JRS56dChvKSwgdGhpcy5maXJlc3RvcmUsIHRoaXMuYUUpO1xuICAgIH0sIHQucHJvdG90eXBlLmxpbWl0ID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gb3IoXCJRdWVyeS5saW1pdFwiLCBhcmd1bWVudHMsIDEpLCBhcihcIlF1ZXJ5LmxpbWl0XCIsIFwibnVtYmVyXCIsIDEsIGUpLCB3cihcIlF1ZXJ5LmxpbWl0XCIsIDEsIGUpLCBcbiAgICAgICAgbmV3IHQodGhpcy5JRS5IdChlKSwgdGhpcy5maXJlc3RvcmUsIHRoaXMuYUUpO1xuICAgIH0sIHQucHJvdG90eXBlLmxpbWl0VG9MYXN0ID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gb3IoXCJRdWVyeS5saW1pdFRvTGFzdFwiLCBhcmd1bWVudHMsIDEpLCBhcihcIlF1ZXJ5LmxpbWl0VG9MYXN0XCIsIFwibnVtYmVyXCIsIDEsIGUpLCBcbiAgICAgICAgd3IoXCJRdWVyeS5saW1pdFRvTGFzdFwiLCAxLCBlKSwgbmV3IHQodGhpcy5JRS5ZdChlKSwgdGhpcy5maXJlc3RvcmUsIHRoaXMuYUUpO1xuICAgIH0sIHQucHJvdG90eXBlLnN0YXJ0QXQgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIGZvciAodmFyIG4gPSBbXSwgciA9IDE7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspIG5bciAtIDFdID0gYXJndW1lbnRzW3JdO1xuICAgICAgICBzcihcIlF1ZXJ5LnN0YXJ0QXRcIiwgYXJndW1lbnRzLCAxKTtcbiAgICAgICAgdmFyIGkgPSB0aGlzLlBFKFwiUXVlcnkuc3RhcnRBdFwiLCBlLCBuLCBcbiAgICAgICAgLypiZWZvcmU9Ki8gITApO1xuICAgICAgICByZXR1cm4gbmV3IHQodGhpcy5JRS5KdChpKSwgdGhpcy5maXJlc3RvcmUsIHRoaXMuYUUpO1xuICAgIH0sIHQucHJvdG90eXBlLnN0YXJ0QWZ0ZXIgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIGZvciAodmFyIG4gPSBbXSwgciA9IDE7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspIG5bciAtIDFdID0gYXJndW1lbnRzW3JdO1xuICAgICAgICBzcihcIlF1ZXJ5LnN0YXJ0QWZ0ZXJcIiwgYXJndW1lbnRzLCAxKTtcbiAgICAgICAgdmFyIGkgPSB0aGlzLlBFKFwiUXVlcnkuc3RhcnRBZnRlclwiLCBlLCBuLCBcbiAgICAgICAgLypiZWZvcmU9Ki8gITEpO1xuICAgICAgICByZXR1cm4gbmV3IHQodGhpcy5JRS5KdChpKSwgdGhpcy5maXJlc3RvcmUsIHRoaXMuYUUpO1xuICAgIH0sIHQucHJvdG90eXBlLmVuZEJlZm9yZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZm9yICh2YXIgbiA9IFtdLCByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykgbltyIC0gMV0gPSBhcmd1bWVudHNbcl07XG4gICAgICAgIHNyKFwiUXVlcnkuZW5kQmVmb3JlXCIsIGFyZ3VtZW50cywgMSk7XG4gICAgICAgIHZhciBpID0gdGhpcy5QRShcIlF1ZXJ5LmVuZEJlZm9yZVwiLCBlLCBuLCBcbiAgICAgICAgLypiZWZvcmU9Ki8gITApO1xuICAgICAgICByZXR1cm4gbmV3IHQodGhpcy5JRS5YdChpKSwgdGhpcy5maXJlc3RvcmUsIHRoaXMuYUUpO1xuICAgIH0sIHQucHJvdG90eXBlLmVuZEF0ID0gZnVuY3Rpb24oZSkge1xuICAgICAgICBmb3IgKHZhciBuID0gW10sIHIgPSAxOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKSBuW3IgLSAxXSA9IGFyZ3VtZW50c1tyXTtcbiAgICAgICAgc3IoXCJRdWVyeS5lbmRBdFwiLCBhcmd1bWVudHMsIDEpO1xuICAgICAgICB2YXIgaSA9IHRoaXMuUEUoXCJRdWVyeS5lbmRBdFwiLCBlLCBuLCBcbiAgICAgICAgLypiZWZvcmU9Ki8gITEpO1xuICAgICAgICByZXR1cm4gbmV3IHQodGhpcy5JRS5YdChpKSwgdGhpcy5maXJlc3RvcmUsIHRoaXMuYUUpO1xuICAgIH0sIHQucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmICghKGUgaW5zdGFuY2VvZiB0KSkgdGhyb3cgbXIoXCJpc0VxdWFsXCIsIFwiUXVlcnlcIiwgMSwgZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmZpcmVzdG9yZSA9PT0gZS5maXJlc3RvcmUgJiYgdGhpcy5JRS5pc0VxdWFsKGUuSUUpO1xuICAgIH0sIHQucHJvdG90eXBlLndpdGhDb252ZXJ0ZXIgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBuZXcgdCh0aGlzLklFLCB0aGlzLmZpcmVzdG9yZSwgZSk7XG4gICAgfSwgXG4gICAgLyoqIEhlbHBlciBmdW5jdGlvbiB0byBjcmVhdGUgYSBib3VuZCBmcm9tIGEgZG9jdW1lbnQgb3IgZmllbGRzICovIHQucHJvdG90eXBlLlBFID0gZnVuY3Rpb24odCwgZSwgbiwgcikge1xuICAgICAgICBpZiAodnIodCwgMSwgZSksIGUgaW5zdGFuY2VvZiBGaSkge1xuICAgICAgICAgICAgaWYgKG4ubGVuZ3RoID4gMCkgdGhyb3cgbmV3IGMoaC5JTlZBTElEX0FSR1VNRU5ULCBcIlRvbyBtYW55IGFyZ3VtZW50cyBwcm92aWRlZCB0byBcIiArIHQgKyBcIigpLlwiKTtcbiAgICAgICAgICAgIHZhciBpID0gZTtcbiAgICAgICAgICAgIGlmICghaS5leGlzdHMpIHRocm93IG5ldyBjKGguTk9UX0ZPVU5ELCBcIkNhbid0IHVzZSBhIERvY3VtZW50U25hcHNob3QgdGhhdCBkb2Vzbid0IGV4aXN0IGZvciBcIiArIHQgKyBcIigpLlwiKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlZFKGkuZkUsIHIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvID0gWyBlIF0uY29uY2F0KG4pO1xuICAgICAgICByZXR1cm4gdGhpcy5nRSh0LCBvLCByKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBCb3VuZCBmcm9tIGEgcXVlcnkgYW5kIGEgZG9jdW1lbnQuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgdGhlIEJvdW5kIHdpbGwgYWx3YXlzIGluY2x1ZGUgdGhlIGtleSBvZiB0aGUgZG9jdW1lbnRcbiAgICAgKiBhbmQgc28gb25seSB0aGUgcHJvdmlkZWQgZG9jdW1lbnQgd2lsbCBjb21wYXJlIGVxdWFsIHRvIHRoZSByZXR1cm5lZFxuICAgICAqIHBvc2l0aW9uLlxuICAgICAqXG4gICAgICogV2lsbCB0aHJvdyBpZiB0aGUgZG9jdW1lbnQgZG9lcyBub3QgY29udGFpbiBhbGwgZmllbGRzIG9mIHRoZSBvcmRlciBieVxuICAgICAqIG9mIHRoZSBxdWVyeSBvciBpZiBhbnkgb2YgdGhlIGZpZWxkcyBpbiB0aGUgb3JkZXIgYnkgYXJlIGFuIHVuY29tbWl0dGVkXG4gICAgICogc2VydmVyIHRpbWVzdGFtcC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5WRSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgLy8gQmVjYXVzZSBwZW9wbGUgZXhwZWN0IHRvIGNvbnRpbnVlL2VuZCBhIHF1ZXJ5IGF0IHRoZSBleGFjdCBkb2N1bWVudFxuICAgICAgICAvLyBwcm92aWRlZCwgd2UgbmVlZCB0byB1c2UgdGhlIGltcGxpY2l0IHNvcnQgb3JkZXIgcmF0aGVyIHRoYW4gdGhlIGV4cGxpY2l0XG4gICAgICAgIC8vIHNvcnQgb3JkZXIsIGJlY2F1c2UgaXQncyBndWFyYW50ZWVkIHRvIGNvbnRhaW4gdGhlIGRvY3VtZW50IGtleS4gVGhhdCB3YXlcbiAgICAgICAgLy8gdGhlIHBvc2l0aW9uIGJlY29tZXMgdW5hbWJpZ3VvdXMgYW5kIHRoZSBxdWVyeSBjb250aW51ZXMvZW5kcyBleGFjdGx5IGF0XG4gICAgICAgIC8vIHRoZSBwcm92aWRlZCBkb2N1bWVudC4gV2l0aG91dCB0aGUga2V5IChieSB1c2luZyB0aGUgZXhwbGljaXQgc29ydFxuICAgICAgICAvLyBvcmRlcnMpLCBtdWx0aXBsZSBkb2N1bWVudHMgY291bGQgbWF0Y2ggdGhlIHBvc2l0aW9uLCB5aWVsZGluZyBkdXBsaWNhdGVcbiAgICAgICAgLy8gcmVzdWx0cy5cbiAgICAgICAgZm9yICh2YXIgbiA9IFtdLCByID0gMCwgaSA9IHRoaXMuSUUub3JkZXJCeTsgciA8IGkubGVuZ3RoOyByKyspIHtcbiAgICAgICAgICAgIHZhciBvID0gaVtyXTtcbiAgICAgICAgICAgIGlmIChvLmZpZWxkLlkoKSkgbi5wdXNoKEIodGhpcy5maXJlc3RvcmUuJGMsIHQua2V5KSk7IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBzID0gdC5maWVsZChvLmZpZWxkKTtcbiAgICAgICAgICAgICAgICBpZiAoUyhzKSkgdGhyb3cgbmV3IGMoaC5JTlZBTElEX0FSR1VNRU5ULCAnSW52YWxpZCBxdWVyeS4gWW91IGFyZSB0cnlpbmcgdG8gc3RhcnQgb3IgZW5kIGEgcXVlcnkgdXNpbmcgYSBkb2N1bWVudCBmb3Igd2hpY2ggdGhlIGZpZWxkIFwiJyArIG8uZmllbGQgKyAnXCIgaXMgYW4gdW5jb21taXR0ZWQgc2VydmVyIHRpbWVzdGFtcC4gKFNpbmNlIHRoZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGlzIHVua25vd24sIHlvdSBjYW5ub3Qgc3RhcnQvZW5kIGEgcXVlcnkgd2l0aCBpdC4pJyk7XG4gICAgICAgICAgICAgICAgaWYgKG51bGwgPT09IHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHUgPSBvLmZpZWxkLmooKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGMoaC5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgcXVlcnkuIFlvdSBhcmUgdHJ5aW5nIHRvIHN0YXJ0IG9yIGVuZCBhIHF1ZXJ5IHVzaW5nIGEgZG9jdW1lbnQgZm9yIHdoaWNoIHRoZSBmaWVsZCAnXCIgKyB1ICsgXCInICh1c2VkIGFzIHRoZSBvcmRlckJ5KSBkb2VzIG5vdCBleGlzdC5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG4ucHVzaChzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEF0KG4sIGUpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGEgbGlzdCBvZiBmaWVsZCB2YWx1ZXMgdG8gYSBCb3VuZCBmb3IgdGhlIGdpdmVuIHF1ZXJ5LlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmdFID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICAvLyBVc2UgZXhwbGljaXQgb3JkZXIgYnkncyBiZWNhdXNlIGl0IGhhcyB0byBtYXRjaCB0aGUgcXVlcnkgdGhlIHVzZXIgbWFkZVxuICAgICAgICB2YXIgciA9IHRoaXMuSUUueHQ7XG4gICAgICAgIGlmIChlLmxlbmd0aCA+IHIubGVuZ3RoKSB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiVG9vIG1hbnkgYXJndW1lbnRzIHByb3ZpZGVkIHRvIFwiICsgdCArIFwiKCkuIFRoZSBudW1iZXIgb2YgYXJndW1lbnRzIG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBudW1iZXIgb2YgUXVlcnkub3JkZXJCeSgpIGNsYXVzZXNcIik7XG4gICAgICAgIGZvciAodmFyIGkgPSBbXSwgbyA9IDA7IG8gPCBlLmxlbmd0aDsgbysrKSB7XG4gICAgICAgICAgICB2YXIgcyA9IGVbb107XG4gICAgICAgICAgICBpZiAocltvXS5maWVsZC5ZKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoXCJzdHJpbmdcIiAhPSB0eXBlb2YgcykgdGhyb3cgbmV3IGMoaC5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgcXVlcnkuIEV4cGVjdGVkIGEgc3RyaW5nIGZvciBkb2N1bWVudCBJRCBpbiBcIiArIHQgKyBcIigpLCBidXQgZ290IGEgXCIgKyB0eXBlb2Ygcyk7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLklFLl9lKCkgJiYgLTEgIT09IHMuaW5kZXhPZihcIi9cIikpIHRocm93IG5ldyBjKGguSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIHF1ZXJ5LiBXaGVuIHF1ZXJ5aW5nIGEgY29sbGVjdGlvbiBhbmQgb3JkZXJpbmcgYnkgRmllbGRQYXRoLmRvY3VtZW50SWQoKSwgdGhlIHZhbHVlIHBhc3NlZCB0byBcIiArIHQgKyBcIigpIG11c3QgYmUgYSBwbGFpbiBkb2N1bWVudCBJRCwgYnV0ICdcIiArIHMgKyBcIicgY29udGFpbnMgYSBzbGFzaC5cIik7XG4gICAgICAgICAgICAgICAgdmFyIHUgPSB0aGlzLklFLnBhdGguY2hpbGQody5LKHMpKTtcbiAgICAgICAgICAgICAgICBpZiAoIV8uZXQodSkpIHRocm93IG5ldyBjKGguSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIHF1ZXJ5LiBXaGVuIHF1ZXJ5aW5nIGEgY29sbGVjdGlvbiBncm91cCBhbmQgb3JkZXJpbmcgYnkgRmllbGRQYXRoLmRvY3VtZW50SWQoKSwgdGhlIHZhbHVlIHBhc3NlZCB0byBcIiArIHQgKyBcIigpIG11c3QgcmVzdWx0IGluIGEgdmFsaWQgZG9jdW1lbnQgcGF0aCwgYnV0ICdcIiArIHUgKyBcIicgaXMgbm90IGJlY2F1c2UgaXQgY29udGFpbnMgYW4gb2RkIG51bWJlciBvZiBzZWdtZW50cy5cIik7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSBuZXcgXyh1KTtcbiAgICAgICAgICAgICAgICBpLnB1c2goQih0aGlzLmZpcmVzdG9yZS4kYywgYSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgZiA9IHRoaXMuZmlyZXN0b3JlLkpULk5jKHQsIHMpO1xuICAgICAgICAgICAgICAgIGkucHVzaChmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEF0KGksIG4pO1xuICAgIH0sIHQucHJvdG90eXBlLm9uU25hcHNob3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yICh2YXIgdCA9IFtdLCBlID0gMDsgZSA8IGFyZ3VtZW50cy5sZW5ndGg7IGUrKykgdFtlXSA9IGFyZ3VtZW50c1tlXTtcbiAgICAgICAgdXIoXCJRdWVyeS5vblNuYXBzaG90XCIsIGFyZ3VtZW50cywgMSwgNCk7XG4gICAgICAgIHZhciBuLCByID0ge30sIGkgPSAwO1xuICAgICAgICByZXR1cm4gXCJvYmplY3RcIiAhPSB0eXBlb2YgdFtpXSB8fCBMaSh0W2ldKSB8fCAoZ3IoXCJRdWVyeS5vblNuYXBzaG90XCIsIHIgPSB0W2ldLCBbIFwiaW5jbHVkZU1ldGFkYXRhQ2hhbmdlc1wiIF0pLCBcbiAgICAgICAgZnIoXCJRdWVyeS5vblNuYXBzaG90XCIsIFwiYm9vbGVhblwiLCBcImluY2x1ZGVNZXRhZGF0YUNoYW5nZXNcIiwgci5pbmNsdWRlTWV0YWRhdGFDaGFuZ2VzKSwgXG4gICAgICAgIGkrKyksIExpKHRbaV0pID8gbiA9IHRbaV0gOiAoYXIoXCJRdWVyeS5vblNuYXBzaG90XCIsIFwiZnVuY3Rpb25cIiwgaSwgdFtpXSksIGhyKFwiUXVlcnkub25TbmFwc2hvdFwiLCBcImZ1bmN0aW9uXCIsIGkgKyAxLCB0W2kgKyAxXSksIFxuICAgICAgICBocihcIlF1ZXJ5Lm9uU25hcHNob3RcIiwgXCJmdW5jdGlvblwiLCBpICsgMiwgdFtpICsgMl0pLCBuID0ge1xuICAgICAgICAgICAgbmV4dDogdFtpXSxcbiAgICAgICAgICAgIGVycm9yOiB0W2kgKyAxXSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiB0W2kgKyAyXVxuICAgICAgICB9KSwgdGhpcy5wRSh0aGlzLklFKSwgdGhpcy5sRShyLCBuKTtcbiAgICB9LCB0LnByb3RvdHlwZS5sRSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLCByID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlVuY2F1Z2h0IEVycm9yIGluIG9uU25hcHNob3Q6XCIsIHQpO1xuICAgICAgICB9O1xuICAgICAgICBlLmVycm9yICYmIChyID0gZS5lcnJvci5iaW5kKGUpKTtcbiAgICAgICAgdmFyIGkgPSBuZXcgUmkoe1xuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIGUubmV4dCAmJiBlLm5leHQobmV3IEdpKG4uZmlyZXN0b3JlLCBuLklFLCB0LCBuLmFFKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IHJcbiAgICAgICAgfSksIG8gPSB0aGlzLmZpcmVzdG9yZS5XVCgpLCBzID0gby5saXN0ZW4odGhpcy5JRSwgaSwgdCk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGkuTlQoKSwgby5ybChzKTtcbiAgICAgICAgfTtcbiAgICB9LCB0LnByb3RvdHlwZS5wRSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgaWYgKHQuYWUoKSAmJiAwID09PSB0Lnh0Lmxlbmd0aCkgdGhyb3cgbmV3IGMoaC5VTklNUExFTUVOVEVELCBcImxpbWl0VG9MYXN0KCkgcXVlcmllcyByZXF1aXJlIHNwZWNpZnlpbmcgYXQgbGVhc3Qgb25lIG9yZGVyQnkoKSBjbGF1c2VcIik7XG4gICAgfSwgdC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB1cihcIlF1ZXJ5LmdldFwiLCBhcmd1bWVudHMsIDAsIDEpLCBZaShcIlF1ZXJ5LmdldFwiLCB0KSwgdGhpcy5wRSh0aGlzLklFKSwgbmV3IFByb21pc2UoKGZ1bmN0aW9uKG4sIHIpIHtcbiAgICAgICAgICAgIHQgJiYgXCJjYWNoZVwiID09PSB0LnNvdXJjZSA/IGUuZmlyZXN0b3JlLldUKCkuQ1QoZS5JRSkudGhlbigoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIG4obmV3IEdpKGUuZmlyZXN0b3JlLCBlLklFLCB0LCBlLmFFKSk7XG4gICAgICAgICAgICB9KSwgcikgOiBlLmRFKG4sIHIsIHQpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuZEUgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHZhciByID0gdGhpcy5sRSh7XG4gICAgICAgICAgICBpbmNsdWRlTWV0YWRhdGFDaGFuZ2VzOiAhMCxcbiAgICAgICAgICAgIE9mOiAhMFxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHF1ZXJ5IGZpcnN0IGJlZm9yZSBwYXNzaW5nIGV2ZW50IHRvIHVzZXIgdG8gYXZvaWRcbiAgICAgICAgICAgICAgICAvLyB1c2VyIGFjdGlvbnMgYWZmZWN0aW5nIHRoZSBub3cgc3RhbGUgcXVlcnkuXG4gICAgICAgICAgICAgICAgcigpLCBpLm1ldGFkYXRhLmZyb21DYWNoZSAmJiBuICYmIFwic2VydmVyXCIgPT09IG4uc291cmNlID8gZShuZXcgYyhoLlVOQVZBSUxBQkxFLCAnRmFpbGVkIHRvIGdldCBkb2N1bWVudHMgZnJvbSBzZXJ2ZXIuIChIb3dldmVyLCB0aGVzZSBkb2N1bWVudHMgbWF5IGV4aXN0IGluIHRoZSBsb2NhbCBjYWNoZS4gUnVuIGFnYWluIHdpdGhvdXQgc2V0dGluZyBzb3VyY2UgdG8gXCJzZXJ2ZXJcIiB0byByZXRyaWV2ZSB0aGUgY2FjaGVkIGRvY3VtZW50cy4pJykpIDogdChpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZVxuICAgICAgICB9KTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGhlIGdpdmVuIGRvY3VtZW50SWRWYWx1ZSBpbnRvIGEgUmVmZXJlbmNlVmFsdWUsIHRocm93aW5nXG4gICAgICogYXBwcm9wcmlhdGUgZXJyb3JzIGlmIHRoZSB2YWx1ZSBpcyBhbnl0aGluZyBvdGhlciB0aGFuIGEgRG9jdW1lbnRSZWZlcmVuY2VcbiAgICAgKiBvciBTdHJpbmcsIG9yIGlmIHRoZSBzdHJpbmcgaXMgbWFsZm9ybWVkLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLlJFID0gZnVuY3Rpb24odCkge1xuICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCkge1xuICAgICAgICAgICAgaWYgKFwiXCIgPT09IHQpIHRocm93IG5ldyBjKGguSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIHF1ZXJ5LiBXaGVuIHF1ZXJ5aW5nIHdpdGggRmllbGRQYXRoLmRvY3VtZW50SWQoKSwgeW91IG11c3QgcHJvdmlkZSBhIHZhbGlkIGRvY3VtZW50IElELCBidXQgaXQgd2FzIGFuIGVtcHR5IHN0cmluZy5cIik7XG4gICAgICAgICAgICBpZiAoIXRoaXMuSUUuX2UoKSAmJiAtMSAhPT0gdC5pbmRleE9mKFwiL1wiKSkgdGhyb3cgbmV3IGMoaC5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgcXVlcnkuIFdoZW4gcXVlcnlpbmcgYSBjb2xsZWN0aW9uIGJ5IEZpZWxkUGF0aC5kb2N1bWVudElkKCksIHlvdSBtdXN0IHByb3ZpZGUgYSBwbGFpbiBkb2N1bWVudCBJRCwgYnV0ICdcIiArIHQgKyBcIicgY29udGFpbnMgYSAnLycgY2hhcmFjdGVyLlwiKTtcbiAgICAgICAgICAgIHZhciBlID0gdGhpcy5JRS5wYXRoLmNoaWxkKHcuSyh0KSk7XG4gICAgICAgICAgICBpZiAoIV8uZXQoZSkpIHRocm93IG5ldyBjKGguSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIHF1ZXJ5LiBXaGVuIHF1ZXJ5aW5nIGEgY29sbGVjdGlvbiBncm91cCBieSBGaWVsZFBhdGguZG9jdW1lbnRJZCgpLCB0aGUgdmFsdWUgcHJvdmlkZWQgbXVzdCByZXN1bHQgaW4gYSB2YWxpZCBkb2N1bWVudCBwYXRoLCBidXQgJ1wiICsgZSArIFwiJyBpcyBub3QgYmVjYXVzZSBpdCBoYXMgYW4gb2RkIG51bWJlciBvZiBzZWdtZW50cyAoXCIgKyBlLmxlbmd0aCArIFwiKS5cIik7XG4gICAgICAgICAgICByZXR1cm4gQih0aGlzLmZpcmVzdG9yZS4kYywgbmV3IF8oZSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0IGluc3RhbmNlb2YgTWkpIHtcbiAgICAgICAgICAgIHZhciBuID0gdDtcbiAgICAgICAgICAgIHJldHVybiBCKHRoaXMuZmlyZXN0b3JlLiRjLCBuLmtjKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBxdWVyeS4gV2hlbiBxdWVyeWluZyB3aXRoIEZpZWxkUGF0aC5kb2N1bWVudElkKCksIHlvdSBtdXN0IHByb3ZpZGUgYSB2YWxpZCBzdHJpbmcgb3IgYSBEb2N1bWVudFJlZmVyZW5jZSwgYnV0IGl0IHdhczogXCIgKyB5cih0KSArIFwiLlwiKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZXMgdGhhdCB0aGUgdmFsdWUgcGFzc2VkIGludG8gYSBkaXNqdW5jdHJpdmUgZmlsdGVyIHNhdGlzZmllcyBhbGxcbiAgICAgKiBhcnJheSByZXF1aXJlbWVudHMuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUud0UgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0KSB8fCAwID09PSB0Lmxlbmd0aCkgdGhyb3cgbmV3IGMoaC5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgUXVlcnkuIEEgbm9uLWVtcHR5IGFycmF5IGlzIHJlcXVpcmVkIGZvciAnXCIgKyBlLnRvU3RyaW5nKCkgKyBcIicgZmlsdGVycy5cIik7XG4gICAgICAgIGlmICh0Lmxlbmd0aCA+IDEwKSB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBRdWVyeS4gJ1wiICsgZS50b1N0cmluZygpICsgXCInIGZpbHRlcnMgc3VwcG9ydCBhIG1heGltdW0gb2YgMTAgZWxlbWVudHMgaW4gdGhlIHZhbHVlIGFycmF5LlwiKTtcbiAgICAgICAgaWYgKHQuaW5kZXhPZihudWxsKSA+PSAwKSB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBRdWVyeS4gJ1wiICsgZS50b1N0cmluZygpICsgXCInIGZpbHRlcnMgY2Fubm90IGNvbnRhaW4gJ251bGwnIGluIHRoZSB2YWx1ZSBhcnJheS5cIik7XG4gICAgICAgIGlmICh0LmZpbHRlcigoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIE51bWJlci5pc05hTih0KTtcbiAgICAgICAgfSkpLmxlbmd0aCA+IDApIHRocm93IG5ldyBjKGguSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIFF1ZXJ5LiAnXCIgKyBlLnRvU3RyaW5nKCkgKyBcIicgZmlsdGVycyBjYW5ub3QgY29udGFpbiAnTmFOJyBpbiB0aGUgdmFsdWUgYXJyYXkuXCIpO1xuICAgIH0sIHQucHJvdG90eXBlLkFFID0gZnVuY3Rpb24odCkge1xuICAgICAgICBpZiAodCBpbnN0YW5jZW9mIEV0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IFsgXCJhcnJheS1jb250YWluc1wiIC8qIEFSUkFZX0NPTlRBSU5TICovICwgXCJhcnJheS1jb250YWlucy1hbnlcIiAvKiBBUlJBWV9DT05UQUlOU19BTlkgKi8gXSwgbiA9IFsgXCJpblwiIC8qIElOICovICwgXCJhcnJheS1jb250YWlucy1hbnlcIiAvKiBBUlJBWV9DT05UQUlOU19BTlkgKi8gXSwgciA9IGUuaW5kZXhPZih0Lm9wKSA+PSAwLCBpID0gbi5pbmRleE9mKHQub3ApID49IDA7XG4gICAgICAgICAgICBpZiAodC51ZSgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG8gPSB0aGlzLklFLmp0KCk7XG4gICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IG8gJiYgIW8uaXNFcXVhbCh0LmZpZWxkKSkgdGhyb3cgbmV3IGMoaC5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgcXVlcnkuIEFsbCB3aGVyZSBmaWx0ZXJzIHdpdGggYW4gaW5lcXVhbGl0eSAoPCwgPD0sID4sIG9yID49KSBtdXN0IGJlIG9uIHRoZSBzYW1lIGZpZWxkLiBCdXQgeW91IGhhdmUgaW5lcXVhbGl0eSBmaWx0ZXJzIG9uICdcIiArIG8udG9TdHJpbmcoKSArIFwiJyBhbmQgJ1wiICsgdC5maWVsZC50b1N0cmluZygpICsgXCInXCIpO1xuICAgICAgICAgICAgICAgIHZhciBzID0gdGhpcy5JRS5LdCgpO1xuICAgICAgICAgICAgICAgIG51bGwgIT09IHMgJiYgdGhpcy55RSh0LmZpZWxkLCBzKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaSB8fCByKSB7XG4gICAgICAgICAgICAgICAgLy8gWW91IGNhbiBoYXZlIGF0IG1vc3QgMSBkaXNqdW5jdGl2ZSBmaWx0ZXIgYW5kIDEgYXJyYXkgZmlsdGVyLiBDaGVjayBpZlxuICAgICAgICAgICAgICAgIC8vIHRoZSBuZXcgZmlsdGVyIGNvbmZsaWN0cyB3aXRoIGFuIGV4aXN0aW5nIG9uZS5cbiAgICAgICAgICAgICAgICB2YXIgdSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKGkgJiYgKHUgPSB0aGlzLklFLmNlKG4pKSwgbnVsbCA9PT0gdSAmJiByICYmICh1ID0gdGhpcy5JRS5jZShlKSksIG51bGwgIT0gdSkgXG4gICAgICAgICAgICAgICAgLy8gV2Ugc3BlY2lhbCBjYXNlIHdoZW4gaXQncyBhIGR1cGxpY2F0ZSBvcCB0byBnaXZlIGEgc2xpZ2h0bHkgY2xlYXJlciBlcnJvciBtZXNzYWdlLlxuICAgICAgICAgICAgICAgIHRocm93IHUgPT09IHQub3AgPyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBxdWVyeS4gWW91IGNhbm5vdCB1c2UgbW9yZSB0aGFuIG9uZSAnXCIgKyB0Lm9wLnRvU3RyaW5nKCkgKyBcIicgZmlsdGVyLlwiKSA6IG5ldyBjKGguSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIHF1ZXJ5LiBZb3UgY2Fubm90IHVzZSAnXCIgKyB0Lm9wLnRvU3RyaW5nKCkgKyBcIicgZmlsdGVycyB3aXRoICdcIiArIHUudG9TdHJpbmcoKSArIFwiJyBmaWx0ZXJzLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHQucHJvdG90eXBlLm1FID0gZnVuY3Rpb24odCkge1xuICAgICAgICBpZiAobnVsbCA9PT0gdGhpcy5JRS5LdCgpKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBmaXJzdCBvcmRlciBieS4gSXQgbXVzdCBtYXRjaCBhbnkgaW5lcXVhbGl0eS5cbiAgICAgICAgICAgIHZhciBlID0gdGhpcy5JRS5qdCgpO1xuICAgICAgICAgICAgbnVsbCAhPT0gZSAmJiB0aGlzLnlFKGUsIHQuZmllbGQpO1xuICAgICAgICB9XG4gICAgfSwgdC5wcm90b3R5cGUueUUgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGlmICghZS5pc0VxdWFsKHQpKSB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBxdWVyeS4gWW91IGhhdmUgYSB3aGVyZSBmaWx0ZXIgd2l0aCBhbiBpbmVxdWFsaXR5ICg8LCA8PSwgPiwgb3IgPj0pIG9uIGZpZWxkICdcIiArIHQudG9TdHJpbmcoKSArIFwiJyBhbmQgc28geW91IG11c3QgYWxzbyB1c2UgJ1wiICsgdC50b1N0cmluZygpICsgXCInIGFzIHlvdXIgZmlyc3QgUXVlcnkub3JkZXJCeSgpLCBidXQgeW91ciBmaXJzdCBRdWVyeS5vcmRlckJ5KCkgaXMgb24gZmllbGQgJ1wiICsgZS50b1N0cmluZygpICsgXCInIGluc3RlYWQuXCIpO1xuICAgIH0sIHQ7XG59KCksIEdpID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQsIGUsIG4sIHIpIHtcbiAgICAgICAgdGhpcy5oRSA9IHQsIHRoaXMuYkUgPSBlLCB0aGlzLnZFID0gbiwgdGhpcy5hRSA9IHIsIHRoaXMuU0UgPSBudWxsLCB0aGlzLkRFID0gbnVsbCwgXG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSBuZXcgamkobi5oYXNQZW5kaW5nV3JpdGVzLCBuLmZyb21DYWNoZSk7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwiZG9jc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdCA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9yRWFjaCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0LnB1c2goZSk7XG4gICAgICAgICAgICB9KSksIHQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJlbXB0eVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52RS5kb2NzLkIoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcInNpemVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudkUuZG9jcy5zaXplO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCB0LnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIHVyKFwiUXVlcnlTbmFwc2hvdC5mb3JFYWNoXCIsIGFyZ3VtZW50cywgMSwgMiksIGFyKFwiUXVlcnlTbmFwc2hvdC5mb3JFYWNoXCIsIFwiZnVuY3Rpb25cIiwgMSwgdCksIFxuICAgICAgICB0aGlzLnZFLmRvY3MuZm9yRWFjaCgoZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgdC5jYWxsKGUsIG4uQ0UocikpO1xuICAgICAgICB9KSk7XG4gICAgfSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcInF1ZXJ5XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgemkodGhpcy5iRSwgdGhpcy5oRSwgdGhpcy5hRSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIHQucHJvdG90eXBlLmRvY0NoYW5nZXMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHQgJiYgKGdyKFwiUXVlcnlTbmFwc2hvdC5kb2NDaGFuZ2VzXCIsIHQsIFsgXCJpbmNsdWRlTWV0YWRhdGFDaGFuZ2VzXCIgXSksIGZyKFwiUXVlcnlTbmFwc2hvdC5kb2NDaGFuZ2VzXCIsIFwiYm9vbGVhblwiLCBcImluY2x1ZGVNZXRhZGF0YUNoYW5nZXNcIiwgdC5pbmNsdWRlTWV0YWRhdGFDaGFuZ2VzKSk7XG4gICAgICAgIHZhciBlID0gISghdCB8fCAhdC5pbmNsdWRlTWV0YWRhdGFDaGFuZ2VzKTtcbiAgICAgICAgaWYgKGUgJiYgdGhpcy52RS5ocykgdGhyb3cgbmV3IGMoaC5JTlZBTElEX0FSR1VNRU5ULCBcIlRvIGluY2x1ZGUgbWV0YWRhdGEgY2hhbmdlcyB3aXRoIHlvdXIgZG9jdW1lbnQgY2hhbmdlcywgeW91IG11c3QgYWxzbyBwYXNzIHsgaW5jbHVkZU1ldGFkYXRhQ2hhbmdlczp0cnVlIH0gdG8gb25TbmFwc2hvdCgpLlwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuU0UgJiYgdGhpcy5ERSA9PT0gZSB8fCAodGhpcy5TRSA9IFxuICAgICAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBhcnJheSBvZiBmaXJlc3RvcmUuRG9jdW1lbnRDaGFuZ2UncyBmb3IgYSBnaXZlbiBWaWV3U25hcHNob3QuXG4gICAgICpcbiAgICAgKiBFeHBvcnRlZCBmb3IgdGVzdGluZy5cbiAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24odCwgZSwgbiwgcikge1xuICAgICAgICAgICAgaWYgKG4uc3MuQigpKSB7XG4gICAgICAgICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIHRoZSBmaXJzdCBzbmFwc2hvdCBiZWNhdXNlIGluZGV4IGNhbGN1bGF0aW9uIGlzIGVhc3kgYW5kXG4gICAgICAgICAgICAgICAgLy8gZmFzdFxuICAgICAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgICAgICByZXR1cm4gbi5kb2NDaGFuZ2VzLm1hcCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IG5ldyBCaSh0LCBlLmRvYy5rZXksIGUuZG9jLCBuLmZyb21DYWNoZSwgbi5ucy5oYXMoZS5kb2Mua2V5KSwgcik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLmRvYywge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRlZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jOiBvLFxuICAgICAgICAgICAgICAgICAgICAgICAgb2xkSW5kZXg6IC0xLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5kZXg6IGkrK1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEEgRG9jdW1lbnRTZXQgdGhhdCBpcyB1cGRhdGVkIGluY3JlbWVudGFsbHkgYXMgY2hhbmdlcyBhcmUgYXBwbGllZCB0byB1c2VcbiAgICAgICAgICAgIC8vIHRvIGxvb2t1cCB0aGUgaW5kZXggb2YgYSBkb2N1bWVudC5cbiAgICAgICAgICAgIHZhciBvID0gbi5zcztcbiAgICAgICAgICAgIHJldHVybiBuLmRvY0NoYW5nZXMuZmlsdGVyKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUgfHwgMyAvKiBNZXRhZGF0YSAqLyAhPT0gdC50eXBlO1xuICAgICAgICAgICAgfSkpLm1hcCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gbmV3IEJpKHQsIGUuZG9jLmtleSwgZS5kb2MsIG4uZnJvbUNhY2hlLCBuLm5zLmhhcyhlLmRvYy5rZXkpLCByKSwgcyA9IC0xLCB1ID0gLTE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDAgLyogQWRkZWQgKi8gIT09IGUudHlwZSAmJiAocyA9IG8uaW5kZXhPZihlLmRvYy5rZXkpLCBvID0gby5kZWxldGUoZS5kb2Mua2V5KSksIFxuICAgICAgICAgICAgICAgIDEgLyogUmVtb3ZlZCAqLyAhPT0gZS50eXBlICYmICh1ID0gKG8gPSBvLmFkZChlLmRvYykpLmluZGV4T2YoZS5kb2Mua2V5KSksIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogSmkoZS50eXBlKSxcbiAgICAgICAgICAgICAgICAgICAgZG9jOiBpLFxuICAgICAgICAgICAgICAgICAgICBvbGRJbmRleDogcyxcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5kZXg6IHVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KHRoaXMuaEUsIGUsIHRoaXMudkUsIHRoaXMuYUUpLCB0aGlzLkRFID0gZSksIHRoaXMuU0U7XG4gICAgfSwgXG4gICAgLyoqIENoZWNrIHRoZSBlcXVhbGl0eS4gVGhlIGNhbGwgY2FuIGJlIHZlcnkgZXhwZW5zaXZlLiAqLyB0LnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoIShlIGluc3RhbmNlb2YgdCkpIHRocm93IG1yKFwiaXNFcXVhbFwiLCBcIlF1ZXJ5U25hcHNob3RcIiwgMSwgZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmhFID09PSBlLmhFICYmIHRoaXMuYkUuaXNFcXVhbChlLmJFKSAmJiB0aGlzLnZFLmlzRXF1YWwoZS52RSkgJiYgdGhpcy5hRSA9PT0gZS5hRTtcbiAgICB9LCB0LnByb3RvdHlwZS5DRSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCaSh0aGlzLmhFLCB0LmtleSwgdCwgdGhpcy5tZXRhZGF0YS5mcm9tQ2FjaGUsIHRoaXMudkUubnMuaGFzKHQua2V5KSwgdGhpcy5hRSk7XG4gICAgfSwgdDtcbn0oKSwgV2kgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKHQpIHtcbiAgICBmdW5jdGlvbiBuKGUsIG4sIHIpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzO1xuICAgICAgICBpZiAoKGkgPSB0LmNhbGwodGhpcywgd3QuV3QoZSksIG4sIHIpIHx8IHRoaXMpLkZFID0gZSwgZS5sZW5ndGggJSAyICE9IDEpIHRocm93IG5ldyBjKGguSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIGNvbGxlY3Rpb24gcmVmZXJlbmNlLiBDb2xsZWN0aW9uIHJlZmVyZW5jZXMgbXVzdCBoYXZlIGFuIG9kZCBudW1iZXIgb2Ygc2VnbWVudHMsIGJ1dCBcIiArIGUuaigpICsgXCIgaGFzIFwiICsgZS5sZW5ndGgpO1xuICAgICAgICByZXR1cm4gaTtcbiAgICB9XG4gICAgcmV0dXJuIGUuX19leHRlbmRzKG4sIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkobi5wcm90b3R5cGUsIFwiaWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuSUUucGF0aC5PKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLnByb3RvdHlwZSwgXCJwYXJlbnRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHQgPSB0aGlzLklFLnBhdGguTCgpO1xuICAgICAgICAgICAgcmV0dXJuIHQuQigpID8gbnVsbCA6IG5ldyBNaShuZXcgXyh0KSwgdGhpcy5maXJlc3RvcmUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkobi5wcm90b3R5cGUsIFwicGF0aFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5JRS5wYXRoLmooKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgbi5wcm90b3R5cGUuZG9jID0gZnVuY3Rpb24odCkge1xuICAgICAgICBpZiAodXIoXCJDb2xsZWN0aW9uUmVmZXJlbmNlLmRvY1wiLCBhcmd1bWVudHMsIDAsIDEpLCBcbiAgICAgICAgLy8gV2UgYWxsb3cgb21pc3Npb24gb2YgJ3BhdGhTdHJpbmcnIGJ1dCBleHBsaWNpdGx5IHByb2hpYml0IHBhc3NpbmcgaW4gYm90aFxuICAgICAgICAvLyAndW5kZWZpbmVkJyBhbmQgJ251bGwnLlxuICAgICAgICAwID09PSBhcmd1bWVudHMubGVuZ3RoICYmICh0ID0gRWUuY24oKSksIGFyKFwiQ29sbGVjdGlvblJlZmVyZW5jZS5kb2NcIiwgXCJub24tZW1wdHkgc3RyaW5nXCIsIDEsIHQpLCBcbiAgICAgICAgXCJcIiA9PT0gdCkgdGhyb3cgbmV3IGMoaC5JTlZBTElEX0FSR1VNRU5ULCBcIkRvY3VtZW50IHBhdGggbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmdcIik7XG4gICAgICAgIHZhciBlID0gdy5LKHQpO1xuICAgICAgICByZXR1cm4gTWkubkUodGhpcy5JRS5wYXRoLmNoaWxkKGUpLCB0aGlzLmZpcmVzdG9yZSwgdGhpcy5hRSk7XG4gICAgfSwgbi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24odCkge1xuICAgICAgICBvcihcIkNvbGxlY3Rpb25SZWZlcmVuY2UuYWRkXCIsIGFyZ3VtZW50cywgMSksIGFyKFwiQ29sbGVjdGlvblJlZmVyZW5jZS5hZGRcIiwgXCJvYmplY3RcIiwgMSwgdGhpcy5hRSA/IHRoaXMuYUUudG9GaXJlc3RvcmUodCkgOiB0KTtcbiAgICAgICAgdmFyIGUgPSB0aGlzLmRvYygpO1xuICAgICAgICByZXR1cm4gZS5zZXQodCkudGhlbigoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgfSkpO1xuICAgIH0sIG4ucHJvdG90eXBlLndpdGhDb252ZXJ0ZXIgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBuZXcgbih0aGlzLkZFLCB0aGlzLmZpcmVzdG9yZSwgdCk7XG4gICAgfSwgbjtcbn0oemkpO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gc2V0dGluZ3MoKSBkZWZhdWx0czpcbmZ1bmN0aW9uIFFpKHQsIGUpIHtcbiAgICBpZiAodm9pZCAwID09PSBlKSByZXR1cm4ge1xuICAgICAgICBtZXJnZTogITFcbiAgICB9O1xuICAgIGlmIChncih0LCBlLCBbIFwibWVyZ2VcIiwgXCJtZXJnZUZpZWxkc1wiIF0pLCBmcih0LCBcImJvb2xlYW5cIiwgXCJtZXJnZVwiLCBlLm1lcmdlKSwgZnVuY3Rpb24odCwgZSwgbiwgciwgaSkge1xuICAgICAgICB2b2lkIDAgIT09IHIgJiYgZnVuY3Rpb24odCwgZSwgbiwgciwgaSkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mIEFycmF5KSkgdGhyb3cgbmV3IGMoaC5JTlZBTElEX0FSR1VNRU5ULCBcIkZ1bmN0aW9uIFwiICsgdCArIFwiKCkgcmVxdWlyZXMgaXRzIFwiICsgZSArIFwiIG9wdGlvbiB0byBiZSBhbiBhcnJheSwgYnV0IGl0IHdhczogXCIgKyB5cihyKSk7XG4gICAgICAgICAgICBmb3IgKHZhciBvID0gMDsgbyA8IHIubGVuZ3RoOyArK28pIGlmICghaShyW29dKSkgdGhyb3cgbmV3IGMoaC5JTlZBTElEX0FSR1VNRU5ULCBcIkZ1bmN0aW9uIFwiICsgdCArIFwiKCkgcmVxdWlyZXMgYWxsIFwiICsgZSArIFwiIGVsZW1lbnRzIHRvIGJlIFwiICsgbiArIFwiLCBidXQgdGhlIHZhbHVlIGF0IGluZGV4IFwiICsgbyArIFwiIHdhczogXCIgKyB5cihyW29dKSk7XG4gICAgICAgIH0odCwgZSwgbiwgciwgaSk7XG4gICAgfSh0LCBcIm1lcmdlRmllbGRzXCIsIFwiYSBzdHJpbmcgb3IgYSBGaWVsZFBhdGhcIiwgZS5tZXJnZUZpZWxkcywgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgfHwgdCBpbnN0YW5jZW9mIE5yO1xuICAgIH0pKSwgdm9pZCAwICE9PSBlLm1lcmdlRmllbGRzICYmIHZvaWQgMCAhPT0gZS5tZXJnZSkgdGhyb3cgbmV3IGMoaC5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgb3B0aW9ucyBwYXNzZWQgdG8gZnVuY3Rpb24gXCIgKyB0ICsgJygpOiBZb3UgY2Fubm90IHNwZWNpZnkgYm90aCBcIm1lcmdlXCIgYW5kIFwibWVyZ2VGaWVsZHNcIi4nKTtcbiAgICByZXR1cm4gZTtcbn1cblxuZnVuY3Rpb24gS2kodCwgZSkge1xuICAgIHJldHVybiB2b2lkIDAgPT09IGUgPyB7fSA6IChncih0LCBlLCBbIFwic2VydmVyVGltZXN0YW1wc1wiIF0pLCBscih0LCAwLCBcInNlcnZlclRpbWVzdGFtcHNcIiwgZS5zZXJ2ZXJUaW1lc3RhbXBzLCBbIFwiZXN0aW1hdGVcIiwgXCJwcmV2aW91c1wiLCBcIm5vbmVcIiBdKSwgXG4gICAgZSk7XG59XG5cbmZ1bmN0aW9uIFlpKHQsIGUpIHtcbiAgICBocih0LCBcIm9iamVjdFwiLCAxLCBlKSwgZSAmJiAoZ3IodCwgZSwgWyBcInNvdXJjZVwiIF0pLCBscih0LCAwLCBcInNvdXJjZVwiLCBlLnNvdXJjZSwgWyBcImRlZmF1bHRcIiwgXCJzZXJ2ZXJcIiwgXCJjYWNoZVwiIF0pKTtcbn1cblxuZnVuY3Rpb24gJGkodCwgZSwgbikge1xuICAgIGlmIChlIGluc3RhbmNlb2YgTWkpIHtcbiAgICAgICAgaWYgKGUuZmlyZXN0b3JlICE9PSBuKSB0aHJvdyBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIFwiUHJvdmlkZWQgZG9jdW1lbnQgcmVmZXJlbmNlIGlzIGZyb20gYSBkaWZmZXJlbnQgRmlyZXN0b3JlIGluc3RhbmNlLlwiKTtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIHRocm93IG1yKHQsIFwiRG9jdW1lbnRSZWZlcmVuY2VcIiwgMSwgZSk7XG59XG5cbmZ1bmN0aW9uIEppKHQpIHtcbiAgICBzd2l0Y2ggKHQpIHtcbiAgICAgIGNhc2UgMCAvKiBBZGRlZCAqLyA6XG4gICAgICAgIHJldHVybiBcImFkZGVkXCI7XG5cbiAgICAgIGNhc2UgMiAvKiBNb2RpZmllZCAqLyA6XG4gICAgICBjYXNlIDMgLyogTWV0YWRhdGEgKi8gOlxuICAgICAgICByZXR1cm4gXCJtb2RpZmllZFwiO1xuXG4gICAgICBjYXNlIDEgLyogUmVtb3ZlZCAqLyA6XG4gICAgICAgIHJldHVybiBcInJlbW92ZWRcIjtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGdlKCk7XG4gICAgfVxufVxuXG4vKipcbiAqIENvbnZlcnRzIGN1c3RvbSBtb2RlbCBvYmplY3Qgb2YgdHlwZSBUIGludG8gRG9jdW1lbnREYXRhIGJ5IGFwcGx5aW5nIHRoZVxuICogY29udmVydGVyIGlmIGl0IGV4aXN0cy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgd2hlbiBjb252ZXJ0aW5nIHVzZXIgb2JqZWN0cyB0byBEb2N1bWVudERhdGFcbiAqIGJlY2F1c2Ugd2Ugd2FudCB0byBwcm92aWRlIHRoZSB1c2VyIHdpdGggYSBtb3JlIHNwZWNpZmljIGVycm9yIG1lc3NhZ2UgaWZcbiAqIHRoZWlyIHNldCgpIG9yIGZhaWxzIGR1ZSB0byBpbnZhbGlkIGRhdGEgb3JpZ2luYXRpbmcgZnJvbSBhIHRvRmlyZXN0b3JlKClcbiAqIGNhbGwuXG4gKi8gZnVuY3Rpb24gSGkodCwgZSwgbikge1xuICAgIHZhciByO1xuICAgIHJldHVybiB0ID8gKHIgPSB0LnRvRmlyZXN0b3JlKGUpLCBuID0gXCJ0b0ZpcmVzdG9yZSgpIGluIFwiICsgbikgOiByID0gZSwgWyByLCBuIF07XG59XG5cbmZ1bmN0aW9uIFhpKHQsIGUpIHtcbiAgICBmdW5jdGlvbiBuKCkge1xuICAgICAgICB2YXIgdCA9IFwiVGhpcyBjb25zdHJ1Y3RvciBpcyBwcml2YXRlLlwiO1xuICAgICAgICB0aHJvdyBlICYmICh0ICs9IFwiIFwiLCB0ICs9IGUpLCBuZXcgYyhoLklOVkFMSURfQVJHVU1FTlQsIHQpO1xuICAgIH1cbiAgICAvLyBNYWtlIHN1cmUgaW5zdGFuY2VvZiBjaGVja3Mgd29yayBhbmQgYWxsIG1ldGhvZHMgYXJlIGV4cG9zZWQgb24gdGhlIHB1YmxpY1xuICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgcmV0dXJuIG4ucHJvdG90eXBlID0gdC5wcm90b3R5cGUsIFxuICAgIC8vIENvcHkgYW55IHN0YXRpYyBtZXRob2RzL21lbWJlcnNcbiAgICBPYmplY3QuYXNzaWduKG4sIHQpLCBuO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gUHVibGljIGluc3RhbmNlIHRoYXQgZGlzYWxsb3dzIGNvbnN0cnVjdGlvbiBhdCBydW50aW1lLiBOb3RlIHRoYXQgdGhpcyBzdGlsbFxuLy8gYWxsb3dzIGluc3RhbmNlb2YgY2hlY2tzLlxudmFyIFppID0gWGkoVWksIFwiVXNlIGZpcmViYXNlLmZpcmVzdG9yZSgpIGluc3RlYWQuXCIpLCB0byA9IFhpKENpLCBcIlVzZSBmaXJlYmFzZS5maXJlc3RvcmUoKS5ydW5UcmFuc2FjdGlvbigpIGluc3RlYWQuXCIpLCBlbyA9IFhpKHFpLCBcIlVzZSBmaXJlYmFzZS5maXJlc3RvcmUoKS5iYXRjaCgpIGluc3RlYWQuXCIpLCBubyA9IFhpKE1pLCBcIlVzZSBmaXJlYmFzZS5maXJlc3RvcmUoKS5kb2MoKSBpbnN0ZWFkLlwiKSwgcm8gPSBYaShGaSksIGlvID0gWGkoQmkpLCBvbyA9IFhpKHppKSwgc28gPSBYaShHaSksIHVvID0gWGkoV2ksIFwiVXNlIGZpcmViYXNlLmZpcmVzdG9yZSgpLmNvbGxlY3Rpb24oKSBpbnN0ZWFkLlwiKSwgYW8gPSBYaSgvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7fVxuICAgIHJldHVybiB0LmRlbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaXIoXCJGaWVsZFZhbHVlLmRlbGV0ZVwiLCBhcmd1bWVudHMpLCBuZXcgRHI7XG4gICAgfSwgdC5zZXJ2ZXJUaW1lc3RhbXAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGlyKFwiRmllbGRWYWx1ZS5zZXJ2ZXJUaW1lc3RhbXBcIiwgYXJndW1lbnRzKSwgbmV3IHhyO1xuICAgIH0sIHQuYXJyYXlVbmlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IgKHZhciB0ID0gW10sIGUgPSAwOyBlIDwgYXJndW1lbnRzLmxlbmd0aDsgZSsrKSB0W2VdID0gYXJndW1lbnRzW2VdO1xuICAgICAgICAvLyBOT1RFOiBXZSBkb24ndCBhY3R1YWxseSBwYXJzZSB0aGUgZGF0YSB1bnRpbCBpdCdzIHVzZWQgaW4gc2V0KCkgb3JcbiAgICAgICAgLy8gdXBkYXRlKCkgc2luY2Ugd2UgbmVlZCBhY2Nlc3MgdG8gdGhlIEZpcmVzdG9yZSBpbnN0YW5jZS5cbiAgICAgICAgICAgICAgICByZXR1cm4gc3IoXCJGaWVsZFZhbHVlLmFycmF5VW5pb25cIiwgYXJndW1lbnRzLCAxKSwgbmV3IFNyKHQpO1xuICAgIH0sIHQuYXJyYXlSZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yICh2YXIgdCA9IFtdLCBlID0gMDsgZSA8IGFyZ3VtZW50cy5sZW5ndGg7IGUrKykgdFtlXSA9IGFyZ3VtZW50c1tlXTtcbiAgICAgICAgLy8gTk9URTogV2UgZG9uJ3QgYWN0dWFsbHkgcGFyc2UgdGhlIGRhdGEgdW50aWwgaXQncyB1c2VkIGluIHNldCgpIG9yXG4gICAgICAgIC8vIHVwZGF0ZSgpIHNpbmNlIHdlIG5lZWQgYWNjZXNzIHRvIHRoZSBGaXJlc3RvcmUgaW5zdGFuY2UuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNyKFwiRmllbGRWYWx1ZS5hcnJheVJlbW92ZVwiLCBhcmd1bWVudHMsIDEpLCBuZXcgUnIodCk7XG4gICAgfSwgdC5pbmNyZW1lbnQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBhcihcIkZpZWxkVmFsdWUuaW5jcmVtZW50XCIsIFwibnVtYmVyXCIsIDEsIHQpLCBvcihcIkZpZWxkVmFsdWUuaW5jcmVtZW50XCIsIGFyZ3VtZW50cywgMSksIFxuICAgICAgICBuZXcgTHIodCk7XG4gICAgfSwgdC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMgPT09IHQ7XG4gICAgfSwgdDtcbn0oKSwgXCJVc2UgRmllbGRWYWx1ZS48ZmllbGQ+KCkgaW5zdGVhZC5cIiksIGhvID0gWGkoSXIsIFwiVXNlIEJsb2IuZnJvbVVpbnQ4QXJyYXkoKSBvciBCbG9iLmZyb21CYXNlNjRTdHJpbmcoKSBpbnN0ZWFkLlwiKSwgY28gPSB7XG4gICAgRmlyZXN0b3JlOiBaaSxcbiAgICBHZW9Qb2ludDogT3IsXG4gICAgVGltZXN0YW1wOiB2LFxuICAgIEJsb2I6IGhvLFxuICAgIFRyYW5zYWN0aW9uOiB0byxcbiAgICBXcml0ZUJhdGNoOiBlbyxcbiAgICBEb2N1bWVudFJlZmVyZW5jZTogbm8sXG4gICAgRG9jdW1lbnRTbmFwc2hvdDogcm8sXG4gICAgUXVlcnk6IG9vLFxuICAgIFF1ZXJ5RG9jdW1lbnRTbmFwc2hvdDogaW8sXG4gICAgUXVlcnlTbmFwc2hvdDogc28sXG4gICAgQ29sbGVjdGlvblJlZmVyZW5jZTogdW8sXG4gICAgRmllbGRQYXRoOiBOcixcbiAgICBGaWVsZFZhbHVlOiBhbyxcbiAgICBzZXRMb2dMZXZlbDogVWkuc2V0TG9nTGV2ZWwsXG4gICAgQ0FDSEVfU0laRV9VTkxJTUlURUQ6IFZpXG59LCBmbyA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCgpIHt9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLkJfID0gZnVuY3Rpb24odCkge1xuICAgICAgICAvLyBOby1vcC5cbiAgICB9LCB0LnByb3RvdHlwZS5tbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBOby1vcC5cbiAgICB9LCB0O1xufSgpLCBsbyA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCgpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICB0aGlzLk5FID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdC4kRSgpO1xuICAgICAgICB9LCB0aGlzLmtFID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdC5MRSgpO1xuICAgICAgICB9LCB0aGlzLk1FID0gW10sIHRoaXMuT0UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLkJfID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLk1FLnB1c2godCk7XG4gICAgfSwgdC5wcm90b3R5cGUubW8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJvbmxpbmVcIiwgdGhpcy5ORSksIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwib2ZmbGluZVwiLCB0aGlzLmtFKTtcbiAgICB9LCB0LnByb3RvdHlwZS5PRSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm9ubGluZVwiLCB0aGlzLk5FKSwgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvZmZsaW5lXCIsIHRoaXMua0UpO1xuICAgIH0sIHQucHJvdG90eXBlLiRFID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGRlKFwiQ29ubmVjdGl2aXR5TW9uaXRvclwiLCBcIk5ldHdvcmsgY29ubmVjdGl2aXR5IGNoYW5nZWQ6IEFWQUlMQUJMRVwiKTtcbiAgICAgICAgZm9yICh2YXIgdCA9IDAsIGUgPSB0aGlzLk1FOyB0IDwgZS5sZW5ndGg7IHQrKykge1xuICAgICAgICAgICAgKDAsIGVbdF0pKDAgLyogQVZBSUxBQkxFICovKTtcbiAgICAgICAgfVxuICAgIH0sIHQucHJvdG90eXBlLkxFID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGRlKFwiQ29ubmVjdGl2aXR5TW9uaXRvclwiLCBcIk5ldHdvcmsgY29ubmVjdGl2aXR5IGNoYW5nZWQ6IFVOQVZBSUxBQkxFXCIpO1xuICAgICAgICBmb3IgKHZhciB0ID0gMCwgZSA9IHRoaXMuTUU7IHQgPCBlLmxlbmd0aDsgdCsrKSB7XG4gICAgICAgICAgICAoMCwgZVt0XSkoMSAvKiBVTkFWQUlMQUJMRSAqLyk7XG4gICAgICAgIH1cbiAgICB9LCBcbiAgICAvLyBUT0RPKGNoZW5icmlhbik6IENvbnNpZGVyIHBhc3NpbmcgaW4gd2luZG93IGVpdGhlciBpbnRvIHRoaXMgY29tcG9uZW50IG9yXG4gICAgLy8gaGVyZSBmb3IgdGVzdGluZyB2aWEgRmFrZVdpbmRvdy5cbiAgICAvKiogQ2hlY2tzIHRoYXQgYWxsIHVzZWQgYXR0cmlidXRlcyBvZiB3aW5kb3cgYXJlIGF2YWlsYWJsZS4gKi9cbiAgICB0LkdoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiB3aW5kb3cgJiYgdm9pZCAwICE9PSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciAmJiB2b2lkIDAgIT09IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyO1xuICAgIH0sIHQ7XG59KCksIHBvID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdGhpcy54RSA9IHQueEUsIHRoaXMuQkUgPSB0LkJFO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuZV8gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMucUUgPSB0O1xuICAgIH0sIHQucHJvdG90eXBlLlljID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLlVFID0gdDtcbiAgICB9LCB0LnByb3RvdHlwZS5vbk1lc3NhZ2UgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuUUUgPSB0O1xuICAgIH0sIHQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuQkUoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLnhFKHQpO1xuICAgIH0sIHQucHJvdG90eXBlLldFID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMucUUoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5qRSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5VRSh0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5LRSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5RRSh0KTtcbiAgICB9LCB0O1xufSgpLCB5byA9IHtcbiAgICBCYXRjaEdldERvY3VtZW50czogXCJiYXRjaEdldFwiLFxuICAgIENvbW1pdDogXCJjb21taXRcIlxufSwgdm8gPSBcImdsLWpzLyBmaXJlL1wiICsgdSwgZ28gPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCkge1xuICAgICAgICB0aGlzLmlpID0gdC5paTtcbiAgICAgICAgdmFyIGUgPSB0LnNzbCA/IFwiaHR0cHNcIiA6IFwiaHR0cFwiO1xuICAgICAgICB0aGlzLkdFID0gZSArIFwiOi8vXCIgKyB0Lmhvc3QsIHRoaXMuZm9yY2VMb25nUG9sbGluZyA9IHQuZm9yY2VMb25nUG9sbGluZztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTW9kaWZpZXMgdGhlIGhlYWRlcnMgZm9yIGEgcmVxdWVzdCwgYWRkaW5nIGFueSBhdXRob3JpemF0aW9uIHRva2VuIGlmXG4gICAgICogcHJlc2VudCBhbmQgYW55IGFkZGl0aW9uYWwgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3QuXG4gICAgICovICAgIHJldHVybiB0LnByb3RvdHlwZS56RSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgaWYgKGUpIGZvciAodmFyIG4gaW4gZS5vKSBlLm8uaGFzT3duUHJvcGVydHkobikgJiYgKHRbbl0gPSBlLm9bbl0pO1xuICAgICAgICB0W1wiWC1Hb29nLUFwaS1DbGllbnRcIl0gPSB2bztcbiAgICB9LCB0LnByb3RvdHlwZS5kXyA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzLCBpID0gdGhpcy5IRSh0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihvLCB1KSB7XG4gICAgICAgICAgICB2YXIgYSA9IG5ldyBzLlhocklvO1xuICAgICAgICAgICAgYS5saXN0ZW5PbmNlKHMuRXZlbnRUeXBlLkNPTVBMRVRFLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChhLmdldExhc3RFcnJvckNvZGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugcy5FcnJvckNvZGUuTk9fRVJST1I6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IGEuZ2V0UmVzcG9uc2VKc29uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZShcIkNvbm5lY3Rpb25cIiwgXCJYSFIgcmVjZWl2ZWQ6XCIsIEpTT04uc3RyaW5naWZ5KGUpKSwgbyhlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBzLkVycm9yQ29kZS5USU1FT1VUOlxuICAgICAgICAgICAgICAgICAgICAgICAgZGUoXCJDb25uZWN0aW9uXCIsICdSUEMgXCInICsgdCArICdcIiB0aW1lZCBvdXQnKSwgdShuZXcgYyhoLkRFQURMSU5FX0VYQ0VFREVELCBcIlJlcXVlc3QgdGltZSBvdXRcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIHMuRXJyb3JDb2RlLkhUVFBfRVJST1I6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IGEuZ2V0U3RhdHVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGUoXCJDb25uZWN0aW9uXCIsICdSUEMgXCInICsgdCArICdcIiBmYWlsZWQgd2l0aCBzdGF0dXM6JywgbiwgXCJyZXNwb25zZSB0ZXh0OlwiLCBhLmdldFJlc3BvbnNlVGV4dCgpKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBuID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gYS5nZXRSZXNwb25zZUpzb24oKS5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAociAmJiByLnN0YXR1cyAmJiByLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKFwiX1wiLCBcIi1cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhoKS5pbmRleE9mKGUpID49IDAgPyBlIDogaC5VTktOT1dOO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KHIuc3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdShuZXcgYyhpLCByLm1lc3NhZ2UpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgdShuZXcgYyhoLlVOS05PV04sIFwiU2VydmVyIHJlc3BvbmRlZCB3aXRoIHN0YXR1cyBcIiArIGEuZ2V0U3RhdHVzKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlY2VpdmVkIGFuIEhUVFBfRVJST1IgYnV0IHRoZXJlJ3Mgbm8gc3RhdHVzIGNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpdCdzIG1vc3QgcHJvYmFibHkgYSBjb25uZWN0aW9uIGlzc3VlXG4gICAgICAgICAgICAgICAgICAgICAgICBkZShcIkNvbm5lY3Rpb25cIiwgJ1JQQyBcIicgKyB0ICsgJ1wiIGZhaWxlZCcpLCB1KG5ldyBjKGguVU5BVkFJTEFCTEUsIFwiQ29ubmVjdGlvbiBmYWlsZWQuXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBkZShcIkNvbm5lY3Rpb25cIiwgJ1JQQyBcIicgKyB0ICsgJ1wiIGNvbXBsZXRlZC4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAvLyBUaGUgZGF0YWJhc2UgZmllbGQgaXMgYWxyZWFkeSBlbmNvZGVkIGluIFVSTC4gU3BlY2lmeWluZyBpdCBhZ2FpbiBpblxuICAgICAgICAgICAgLy8gdGhlIGJvZHkgaXMgbm90IG5lY2Vzc2FyeSBpbiBwcm9kdWN0aW9uLCBhbmQgd2lsbCBjYXVzZSBkdXBsaWNhdGUgZmllbGRcbiAgICAgICAgICAgIC8vIGVycm9ycyBpbiB0aGUgRmlyZXN0b3JlIEVtdWxhdG9yLiBMZXQncyByZW1vdmUgaXQuXG4gICAgICAgICAgICB2YXIgZiA9IE9iamVjdC5hc3NpZ24oe30sIGUpO1xuICAgICAgICAgICAgZGVsZXRlIGYuZGF0YWJhc2U7XG4gICAgICAgICAgICB2YXIgbCA9IEpTT04uc3RyaW5naWZ5KGYpO1xuICAgICAgICAgICAgZGUoXCJDb25uZWN0aW9uXCIsIFwiWEhSIHNlbmRpbmc6IFwiLCBpICsgXCIgXCIgKyBsKTtcbiAgICAgICAgICAgIC8vIENvbnRlbnQtVHlwZTogdGV4dC9wbGFpbiB3aWxsIGF2b2lkIHByZWZsaWdodCByZXF1ZXN0cyB3aGljaCBtaWdodFxuICAgICAgICAgICAgLy8gbWVzcyB3aXRoIENPUlMgYW5kIHJlZGlyZWN0cyBieSBwcm94aWVzLiBJZiB3ZSBhZGQgY3VzdG9tIGhlYWRlcnNcbiAgICAgICAgICAgIC8vIHdlIHdpbGwgbmVlZCB0byBjaGFuZ2UgdGhpcyBjb2RlIHRvIHBvdGVudGlhbGx5IHVzZSB0aGVcbiAgICAgICAgICAgIC8vICRodHRwT3ZlcndyaXRlIHBhcmFtZXRlciBzdXBwb3J0ZWQgYnkgRVNGIHRvIGF2b2lkXG4gICAgICAgICAgICAvLyB0cmlnZ2VyaW5nIHByZWZsaWdodCByZXF1ZXN0cy5cbiAgICAgICAgICAgIHZhciBwID0ge1xuICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwidGV4dC9wbGFpblwiXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgci56RShwLCBuKSwgYS5zZW5kKGksIFwiUE9TVFwiLCBsLCBwLCAxNSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5mXyA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgLy8gVGhlIFJFU1QgQVBJIGF1dG9tYXRpY2FsbHkgYWdncmVnYXRlcyBhbGwgb2YgdGhlIHN0cmVhbWVkIHJlc3VsdHMsIHNvIHdlXG4gICAgICAgIC8vIGNhbiBqdXN0IHVzZSB0aGUgbm9ybWFsIGludm9rZSgpIG1ldGhvZC5cbiAgICAgICAgcmV0dXJuIHRoaXMuZF8odCwgZSwgbik7XG4gICAgfSwgdC5wcm90b3R5cGUuc18gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gWyB0aGlzLkdFLCBcIi9cIiwgXCJnb29nbGUuZmlyZXN0b3JlLnYxLkZpcmVzdG9yZVwiLCBcIi9cIiwgdCwgXCIvY2hhbm5lbFwiIF0sIHIgPSBzLmNyZWF0ZVdlYkNoYW5uZWxUcmFuc3BvcnQoKSwgbyA9IHtcbiAgICAgICAgICAgIC8vIFJlcXVpcmVkIGZvciBiYWNrZW5kIHN0aWNraW5lc3MsIHJvdXRpbmcgYmVoYXZpb3IgaXMgYmFzZWQgb24gdGhpc1xuICAgICAgICAgICAgLy8gcGFyYW1ldGVyLlxuICAgICAgICAgICAgaHR0cFNlc3Npb25JZFBhcmFtOiBcImdzZXNzaW9uaWRcIixcbiAgICAgICAgICAgIGluaXRNZXNzYWdlSGVhZGVyczoge30sXG4gICAgICAgICAgICBtZXNzYWdlVXJsUGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBwYXJhbSBpcyB1c2VkIHRvIGltcHJvdmUgcm91dGluZyBhbmQgcHJvamVjdCBpc29sYXRpb24gYnkgdGhlXG4gICAgICAgICAgICAgICAgLy8gYmFja2VuZCBhbmQgbXVzdCBiZSBpbmNsdWRlZCBpbiBldmVyeSByZXF1ZXN0LlxuICAgICAgICAgICAgICAgIGRhdGFiYXNlOiBcInByb2plY3RzL1wiICsgdGhpcy5paS5wcm9qZWN0SWQgKyBcIi9kYXRhYmFzZXMvXCIgKyB0aGlzLmlpLmRhdGFiYXNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2VuZFJhd0pzb246ICEwLFxuICAgICAgICAgICAgc3VwcG9ydHNDcm9zc0RvbWFpblhocjogITAsXG4gICAgICAgICAgICBpbnRlcm5hbENoYW5uZWxQYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAvLyBPdmVycmlkZSB0aGUgZGVmYXVsdCB0aW1lb3V0IChyYW5kb21pemVkIGJldHdlZW4gMTAtMjAgc2Vjb25kcykgc2luY2VcbiAgICAgICAgICAgICAgICAvLyBhIGxhcmdlIHdyaXRlIGJhdGNoIG9uIGEgc2xvdyBpbnRlcm5ldCBjb25uZWN0aW9uIG1heSB0YWtlIGEgbG9uZ1xuICAgICAgICAgICAgICAgIC8vIHRpbWUgdG8gc2VuZCB0byB0aGUgYmFja2VuZC4gUmF0aGVyIHRoYW4gaGF2ZSBXZWJDaGFubmVsIGltcG9zZSBhXG4gICAgICAgICAgICAgICAgLy8gdGlnaHQgdGltZW91dCB3aGljaCBjb3VsZCBsZWFkIHRvIGluZmluaXRlIHRpbWVvdXRzIGFuZCByZXRyaWVzLCB3ZVxuICAgICAgICAgICAgICAgIC8vIHNldCBpdCB2ZXJ5IGxhcmdlICg1LTEwIG1pbnV0ZXMpIGFuZCByZWx5IG9uIHRoZSBicm93c2VyJ3MgYnVpbHRpblxuICAgICAgICAgICAgICAgIC8vIHRpbWVvdXRzIHRvIGtpY2sgaW4gaWYgdGhlIHJlcXVlc3QgaXNuJ3Qgd29ya2luZy5cbiAgICAgICAgICAgICAgICBmb3J3YXJkQ2hhbm5lbFJlcXVlc3RUaW1lb3V0TXM6IDZlNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZvcmNlTG9uZ1BvbGxpbmc6IHRoaXMuZm9yY2VMb25nUG9sbGluZ1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnpFKG8uaW5pdE1lc3NhZ2VIZWFkZXJzLCBlKSwgXG4gICAgICAgIC8vIFNlbmRpbmcgdGhlIGN1c3RvbSBoZWFkZXJzIHdlIGp1c3QgYWRkZWQgdG8gcmVxdWVzdC5pbml0TWVzc2FnZUhlYWRlcnNcbiAgICAgICAgLy8gKEF1dGhvcml6YXRpb24sIGV0Yy4pIHdpbGwgdHJpZ2dlciB0aGUgYnJvd3NlciB0byBtYWtlIGEgQ09SUyBwcmVmbGlnaHRcbiAgICAgICAgLy8gcmVxdWVzdCBiZWNhdXNlIHRoZSBYSFIgd2lsbCBubyBsb25nZXIgbWVldCB0aGUgY3JpdGVyaWEgZm9yIGEgXCJzaW1wbGVcIlxuICAgICAgICAvLyBDT1JTIHJlcXVlc3Q6XG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvQ09SUyNTaW1wbGVfcmVxdWVzdHNcbiAgICAgICAgLy8gVGhlcmVmb3JlIHRvIGF2b2lkIHRoZSBDT1JTIHByZWZsaWdodCByZXF1ZXN0IChhbiBleHRyYSBuZXR3b3JrXG4gICAgICAgIC8vIHJvdW5kdHJpcCksIHdlIHVzZSB0aGUgaHR0cEhlYWRlcnNPdmVyd3JpdGVQYXJhbSBvcHRpb24gdG8gc3BlY2lmeSB0aGF0XG4gICAgICAgIC8vIHRoZSBoZWFkZXJzIHNob3VsZCBpbnN0ZWFkIGJlIGVuY29kZWQgaW50byBhIHNwZWNpYWwgXCIkaHR0cEhlYWRlcnNcIiBxdWVyeVxuICAgICAgICAvLyBwYXJhbWV0ZXIsIHdoaWNoIGlzIHJlY29nbml6ZWQgYnkgdGhlIHdlYmNoYW5uZWwgYmFja2VuZC4gVGhpcyBpc1xuICAgICAgICAvLyBmb3JtYWxseSBkZWZpbmVkIGhlcmU6XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1saWJyYXJ5L2Jsb2IvYjBlMTgxNWIxM2ZiOTJhNDZkN2M5YjNjMzBkZTVkNmEzOTZhMzI0NS9jbG9zdXJlL2dvb2cvbmV0L3JwYy9odHRwY29ycy5qcyNMMzJcbiAgICAgICAgLy8gVE9ETyhiLzE0NTYyNDc1Nik6IFRoZXJlIGlzIGEgYmFja2VuZCBidWcgd2hlcmUgJGh0dHBIZWFkZXJzIGlzbid0IHJlc3BlY3RlZCBpZiB0aGUgcmVxdWVzdFxuICAgICAgICAvLyBkb2Vzbid0IGhhdmUgYW4gT3JpZ2luIGhlYWRlci4gU28gd2UgaGF2ZSB0byBleGNsdWRlIGEgZmV3IGJyb3dzZXIgZW52aXJvbm1lbnRzIHRoYXQgYXJlXG4gICAgICAgIC8vIGtub3duIHRvIChzb21ldGltZXMpIG5vdCBpbmNsdWRlIGFuIE9yaWdpbi4gU2VlXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9maXJlYmFzZS9maXJlYmFzZS1qcy1zZGsvaXNzdWVzLzE0OTEuXG4gICAgICAgIGkuaXNNb2JpbGVDb3Jkb3ZhKCkgfHwgaS5pc1JlYWN0TmF0aXZlKCkgfHwgaS5pc0VsZWN0cm9uKCkgfHwgaS5pc0lFKCkgfHwgaS5pc1VXUCgpIHx8IGkuaXNCcm93c2VyRXh0ZW5zaW9uKCkgfHwgKG8uaHR0cEhlYWRlcnNPdmVyd3JpdGVQYXJhbSA9IFwiJGh0dHBIZWFkZXJzXCIpO1xuICAgICAgICB2YXIgdSA9IG4uam9pbihcIlwiKTtcbiAgICAgICAgZGUoXCJDb25uZWN0aW9uXCIsIFwiQ3JlYXRpbmcgV2ViQ2hhbm5lbDogXCIgKyB1ICsgXCIgXCIgKyBvKTtcbiAgICAgICAgdmFyIGEgPSByLmNyZWF0ZVdlYkNoYW5uZWwodSwgbyksIGYgPSAhMSwgbCA9ICExLCBwID0gbmV3IHBvKHtcbiAgICAgICAgICAgIHhFOiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgbCA/IGRlKFwiQ29ubmVjdGlvblwiLCBcIk5vdCBzZW5kaW5nIGJlY2F1c2UgV2ViQ2hhbm5lbCBpcyBjbG9zZWQ6XCIsIHQpIDogKGYgfHwgKGRlKFwiQ29ubmVjdGlvblwiLCBcIk9wZW5pbmcgV2ViQ2hhbm5lbCB0cmFuc3BvcnQuXCIpLCBcbiAgICAgICAgICAgICAgICBhLm9wZW4oKSwgZiA9ICEwKSwgZGUoXCJDb25uZWN0aW9uXCIsIFwiV2ViQ2hhbm5lbCBzZW5kaW5nOlwiLCB0KSwgYS5zZW5kKHQpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBCRTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGEuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIGQgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAvLyBUT0RPKGRpbW9uZCk6IGNsb3N1cmUgdHlwaW5nIHNlZW1zIGJyb2tlbiBiZWNhdXNlIFdlYkNoYW5uZWwgZG9lc1xuICAgICAgICAgICAgLy8gbm90IGltcGxlbWVudCBnb29nLmV2ZW50cy5MaXN0ZW5hYmxlXG4gICAgICAgICAgICBhLmxpc3Rlbih0LCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGUodCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IHQ7XG4gICAgICAgICAgICAgICAgICAgIH0pLCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFdlYkNoYW5uZWwgc3VwcG9ydHMgc2VuZGluZyB0aGUgZmlyc3QgbWVzc2FnZSB3aXRoIHRoZSBoYW5kc2hha2UgLSBzYXZpbmdcbiAgICAgICAgLy8gYSBuZXR3b3JrIHJvdW5kIHRyaXAuIEhvd2V2ZXIsIGl0IHdpbGwgaGF2ZSB0byBjYWxsIHNlbmQgaW4gdGhlIHNhbWVcbiAgICAgICAgLy8gSlMgZXZlbnQgbG9vcCBhcyBvcGVuLiBJbiBvcmRlciB0byBlbmZvcmNlIHRoaXMsIHdlIGRlbGF5IGFjdHVhbGx5XG4gICAgICAgIC8vIG9wZW5pbmcgdGhlIFdlYkNoYW5uZWwgdW50aWwgc2VuZCBpcyBjYWxsZWQuIFdoZXRoZXIgd2UgaGF2ZSBjYWxsZWRcbiAgICAgICAgLy8gb3BlbiBpcyB0cmFja2VkIHdpdGggdGhpcyB2YXJpYWJsZS5cbiAgICAgICAgICAgICAgICAvLyBDbG9zdXJlIGV2ZW50cyBhcmUgZ3VhcmRlZCBhbmQgZXhjZXB0aW9ucyBhcmUgc3dhbGxvd2VkLCBzbyBjYXRjaCBhbnlcbiAgICAgICAgLy8gZXhjZXB0aW9uIGFuZCByZXRocm93IHVzaW5nIGEgc2V0VGltZW91dCBzbyB0aGV5IGJlY29tZSB2aXNpYmxlIGFnYWluLlxuICAgICAgICAvLyBOb3RlIHRoYXQgZXZlbnR1YWxseSB0aGlzIGZ1bmN0aW9uIGNvdWxkIGdvIGF3YXkgaWYgd2UgYXJlIGNvbmZpZGVudFxuICAgICAgICAvLyBlbm91Z2ggdGhlIGNvZGUgaXMgZXhjZXB0aW9uIGZyZWUuXG4gICAgICAgIHJldHVybiBkKHMuV2ViQ2hhbm5lbC5FdmVudFR5cGUuT1BFTiwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbCB8fCBkZShcIkNvbm5lY3Rpb25cIiwgXCJXZWJDaGFubmVsIHRyYW5zcG9ydCBvcGVuZWQuXCIpO1xuICAgICAgICB9KSksIGQocy5XZWJDaGFubmVsLkV2ZW50VHlwZS5DTE9TRSwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbCB8fCAobCA9ICEwLCBkZShcIkNvbm5lY3Rpb25cIiwgXCJXZWJDaGFubmVsIHRyYW5zcG9ydCBjbG9zZWRcIiksIHAuakUoKSk7XG4gICAgICAgIH0pKSwgZChzLldlYkNoYW5uZWwuRXZlbnRUeXBlLkVSUk9SLCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgbCB8fCAobCA9ICEwLCBkZShcIkNvbm5lY3Rpb25cIiwgXCJXZWJDaGFubmVsIHRyYW5zcG9ydCBlcnJvcmVkOlwiLCB0KSwgcC5qRShuZXcgYyhoLlVOQVZBSUxBQkxFLCBcIlRoZSBvcGVyYXRpb24gY291bGQgbm90IGJlIGNvbXBsZXRlZFwiKSkpO1xuICAgICAgICB9KSksIGQocy5XZWJDaGFubmVsLkV2ZW50VHlwZS5NRVNTQUdFLCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdmFyIGU7XG4gICAgICAgICAgICBpZiAoIWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgbiA9IHQuZGF0YVswXTtcbiAgICAgICAgICAgICAgICBtZSghIW4pO1xuICAgICAgICAgICAgICAgIC8vIFRPRE8oYi8zNTE0Mzg5MSk6IFRoZXJlIGlzIGEgYnVnIGluIE9uZSBQbGF0Zm9ybSB0aGF0IGNhdXNlZCBlcnJvcnNcbiAgICAgICAgICAgICAgICAvLyAoYW5kIG9ubHkgZXJyb3JzKSB0byBiZSB3cmFwcGVkIGluIGFuIGV4dHJhIGFycmF5LiBUbyBiZSBmb3J3YXJkXG4gICAgICAgICAgICAgICAgLy8gY29tcGF0aWJsZSB3aXRoIHRoZSBidWcgd2UgbmVlZCB0byBjaGVjayBlaXRoZXIgY29uZGl0aW9uLiBUaGUgbGF0dGVyXG4gICAgICAgICAgICAgICAgLy8gY2FuIGJlIHJlbW92ZWQgb25jZSB0aGUgZml4IGhhcyBiZWVuIHJvbGxlZCBvdXQuXG4gICAgICAgICAgICAgICAgLy8gVXNlIGFueSBiZWNhdXNlIG1zZ0RhdGEuZXJyb3IgaXMgbm90IHR5cGVkLlxuICAgICAgICAgICAgICAgIHZhciByID0gbiwgaSA9IHIuZXJyb3IgfHwgKG51bGwgPT09IChlID0gclswXSkgfHwgdm9pZCAwID09PSBlID8gdm9pZCAwIDogZS5lcnJvcik7XG4gICAgICAgICAgICAgICAgaWYgKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGUoXCJDb25uZWN0aW9uXCIsIFwiV2ViQ2hhbm5lbCByZWNlaXZlZCBlcnJvcjpcIiwgaSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVycm9yLnN0YXR1cyB3aWxsIGJlIGEgc3RyaW5nIGxpa2UgJ09LJyBvciAnTk9UX0ZPVU5EJy5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBpLnN0YXR1cywgcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvb2t1cCBieSBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IGx0W3RdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gZSkgcmV0dXJuIFJ0KGUpO1xuICAgICAgICAgICAgICAgICAgICB9KG8pLCB1ID0gaS5tZXNzYWdlO1xuICAgICAgICAgICAgICAgICAgICB2b2lkIDAgPT09IHMgJiYgKHMgPSBoLklOVEVSTkFMLCB1ID0gXCJVbmtub3duIGVycm9yIHN0YXR1czogXCIgKyBvICsgXCIgd2l0aCBtZXNzYWdlIFwiICsgaS5tZXNzYWdlKSwgXG4gICAgICAgICAgICAgICAgICAgIC8vIE1hcmsgY2xvc2VkIHNvIG5vIGZ1cnRoZXIgZXZlbnRzIGFyZSBwcm9wYWdhdGVkXG4gICAgICAgICAgICAgICAgICAgIGwgPSAhMCwgcC5qRShuZXcgYyhzLCB1KSksIGEuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgZGUoXCJDb25uZWN0aW9uXCIsIFwiV2ViQ2hhbm5lbCByZWNlaXZlZDpcIiwgbiksIHAuS0Uobik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKSwgc2V0VGltZW91dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBUZWNobmljYWxseSB3ZSBjb3VsZC9zaG91bGQgd2FpdCBmb3IgdGhlIFdlYkNoYW5uZWwgb3BlbmVkIGV2ZW50LFxuICAgICAgICAgICAgLy8gYnV0IGJlY2F1c2Ugd2Ugd2FudCB0byBzZW5kIHRoZSBmaXJzdCBtZXNzYWdlIHdpdGggdGhlIFdlYkNoYW5uZWxcbiAgICAgICAgICAgIC8vIGhhbmRzaGFrZSB3ZSBwcmV0ZW5kIHRoZSBjaGFubmVsIG9wZW5lZCBoZXJlIChhc3luY2hyb25vdXNseSksIGFuZFxuICAgICAgICAgICAgLy8gdGhlbiBkZWxheSB0aGUgYWN0dWFsIG9wZW4gdW50aWwgdGhlIGZpcnN0IG1lc3NhZ2UgaXMgc2VudC5cbiAgICAgICAgICAgIHAuV0UoKTtcbiAgICAgICAgfSksIDApLCBwO1xuICAgIH0sIFxuICAgIC8vIHZpc2libGUgZm9yIHRlc3RpbmdcbiAgICB0LnByb3RvdHlwZS5IRSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB5b1t0XTtcbiAgICAgICAgcmV0dXJuIHRoaXMuR0UgKyBcIi92MS9wcm9qZWN0cy9cIiArIHRoaXMuaWkucHJvamVjdElkICsgXCIvZGF0YWJhc2VzL1wiICsgdGhpcy5paS5kYXRhYmFzZSArIFwiL2RvY3VtZW50czpcIiArIGU7XG4gICAgfSwgdDtcbn0oKTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBJbXBsZW1lbnRzIHRoZSBQbGF0Zm9ybSBBUEkgZm9yIGJyb3dzZXJzIGFuZCBzb21lIGJyb3dzZXItbGlrZSBlbnZpcm9ubWVudHNcbi8vIChpbmNsdWRpbmcgUmVhY3ROYXRpdmUpLlxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUmVnaXN0ZXJzIHRoZSBtYWluIEZpcmVzdG9yZSBidWlsZCB3aXRoIHRoZSBjb21wb25lbnRzIGZyYW1ld29yay5cbiAqIFBlcnNpc3RlbmNlIGNhbiBiZSBlbmFibGVkIHZpYSBgZmlyZWJhc2UuZmlyZXN0b3JlKCkuZW5hYmxlUGVyc2lzdGVuY2UoKWAuXG4gKi9cbmZ1bmN0aW9uIG1vKHQpIHtcbiAgICAvKipcbiAqIENvbmZpZ3VyZXMgRmlyZXN0b3JlIGFzIHBhcnQgb2YgdGhlIEZpcmViYXNlIFNESyBieSBjYWxsaW5nIHJlZ2lzdGVyU2VydmljZS5cbiAqXG4gKiBAcGFyYW0gZmlyZWJhc2UgVGhlIEZpcmViYXNlTmFtZXNwYWNlIHRvIHJlZ2lzdGVyIEZpcmVzdG9yZSB3aXRoXG4gKiBAcGFyYW0gZmlyZXN0b3JlRmFjdG9yeSBBIGZhY3RvcnkgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgbmV3IEZpcmVzdG9yZVxuICogICAgaW5zdGFuY2UuXG4gKi9cbiAgICAhZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB0LklOVEVSTkFMLnJlZ2lzdGVyQ29tcG9uZW50KG5ldyBvLkNvbXBvbmVudChcImZpcmVzdG9yZVwiLCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVpKHQsIGUsIG5ldyB4aSk7XG4gICAgICAgICAgICB9KHQuZ2V0UHJvdmlkZXIoXCJhcHBcIikuZ2V0SW1tZWRpYXRlKCksIHQuZ2V0UHJvdmlkZXIoXCJhdXRoLWludGVybmFsXCIpKTtcbiAgICAgICAgfSksIFwiUFVCTElDXCIgLyogUFVCTElDICovKS5zZXRTZXJ2aWNlUHJvcHMoT2JqZWN0LmFzc2lnbih7fSwgY28pKSk7XG4gICAgfSh0KSwgdC5yZWdpc3RlclZlcnNpb24oXCJAZmlyZWJhc2UvZmlyZXN0b3JlXCIsIFwiMS4xNC42XCIpXG4gICAgLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbiAgICAvKipcbiAqIFRoaXMgY29kZSBuZWVkcyB0byBydW4gYmVmb3JlIEZpcmVzdG9yZSBpcyB1c2VkLiBUaGlzIGNhbiBiZSBhY2hpZXZlZCBpblxuICogc2V2ZXJhbCB3YXlzOlxuICogICAxKSBUaHJvdWdoIHRoZSBKU0NvbXBpbGVyIGNvbXBpbGluZyB0aGlzIGNvZGUgYW5kIHRoZW4gKGF1dG9tYXRpY2FsbHkpXG4gKiAgICAgIGV4ZWN1dGluZyBpdCBiZWZvcmUgZXhwb3J0aW5nIHRoZSBGaXJlc3RvcmUgc3ltYm9scy5cbiAqICAgMikgVGhyb3VnaCBpbXBvcnRpbmcgdGhpcyBtb2R1bGUgZmlyc3QgaW4gYSBGaXJlc3RvcmUgbWFpbiBtb2R1bGVcbiAqLztcbn1cblxuY2UuYW4obmV3ICgvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgICAgIHRoaXMuYWMgPSBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBhdG9iO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcImRvY3VtZW50XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIGBkb2N1bWVudGAgaXMgbm90IGFsd2F5cyBhdmFpbGFibGUsIGUuZy4gaW4gUmVhY3ROYXRpdmUgYW5kIFdlYldvcmtlcnMuXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gICAgICAgICAgICByZXR1cm4gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgZG9jdW1lbnQgPyBkb2N1bWVudCA6IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJ3aW5kb3dcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gYHdpbmRvd2AgaXMgbm90IGFsd2F5cyBhdmFpbGFibGUsIGUuZy4gaW4gUmVhY3ROYXRpdmUgYW5kIFdlYldvcmtlcnMuXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gICAgICAgICAgICByZXR1cm4gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2Ygd2luZG93ID8gd2luZG93IDogbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgdC5wcm90b3R5cGUueVQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IGdvKHQpKTtcbiAgICB9LCB0LnByb3RvdHlwZS5BVCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbG8uR2goKSA/IG5ldyBsbyA6IG5ldyBmbztcbiAgICB9LCB0LnByb3RvdHlwZS5iYyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBhZSh0LCB7XG4gICAgICAgICAgICBoaTogITBcbiAgICAgICAgfSk7XG4gICAgfSwgdC5wcm90b3R5cGUudW4gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5hdG9iID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gYXRvYih0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5idG9hID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gYnRvYSh0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5fbiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgLy8gUG9seWZpbGxzIGZvciBJRSBhbmQgV2ViV29ya2VyIGJ5IHVzaW5nIGBzZWxmYCBhbmQgYG1zQ3J5cHRvYCB3aGVuIGBjcnlwdG9gIGlzIG5vdCBhdmFpbGFibGUuXG4gICAgICAgIHZhciBlID0gXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHNlbGYgJiYgKHNlbGYuY3J5cHRvIHx8IHNlbGYubXNDcnlwdG8pLCBuID0gbmV3IFVpbnQ4QXJyYXkodCk7XG4gICAgICAgIGlmIChlKSBlLmdldFJhbmRvbVZhbHVlcyhuKTsgZWxzZSBcbiAgICAgICAgLy8gRmFsbHMgYmFjayB0byBNYXRoLnJhbmRvbVxuICAgICAgICBmb3IgKHZhciByID0gMDsgciA8IHQ7IHIrKykgbltyXSA9IE1hdGguZmxvb3IoMjU2ICogTWF0aC5yYW5kb20oKSk7XG4gICAgICAgIHJldHVybiBuO1xuICAgIH0sIHQ7XG59KCkpKSwgbW8obiksIGV4cG9ydHMuX19QUklWQVRFX3JlZ2lzdGVyRmlyZXN0b3JlID0gbW87XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5janMuanMubWFwXG4iLCIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxyXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxyXG5MaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxyXG5LSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgV0lUSE9VVCBMSU1JVEFUSU9OIEFOWSBJTVBMSUVEXHJcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXHJcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXHJcblxyXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcclxuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTtcclxuICAgIHJlc3VsdC5kZWZhdWx0ID0gbW9kO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwKSB7XHJcbiAgICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gZ2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByaXZhdGVNYXAuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHByaXZhdGVNYXAsIHZhbHVlKSB7XHJcbiAgICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gc2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZU1hcC5zZXQocmVjZWl2ZXIsIHZhbHVlKTtcclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxyXG4iLCIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxyXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxyXG5MaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxyXG5LSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgV0lUSE9VVCBMSU1JVEFUSU9OIEFOWSBJTVBMSUVEXHJcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXHJcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXHJcblxyXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcclxuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG5cclxuZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cblxudmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307XG5cbnZhciBnLCBnb29nID0gZ29vZyB8fCB7fSwgayA9IGNvbW1vbmpzR2xvYmFsIHx8IHNlbGY7XHJcbmZ1bmN0aW9uIGFhKCkgeyB9XHJcbmZ1bmN0aW9uIGJhKGEpIHtcclxuICAgIHZhciBiID0gdHlwZW9mIGE7XHJcbiAgICBpZiAoXCJvYmplY3RcIiA9PSBiKVxyXG4gICAgICAgIGlmIChhKSB7XHJcbiAgICAgICAgICAgIGlmIChhIGluc3RhbmNlb2YgQXJyYXkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJhcnJheVwiO1xyXG4gICAgICAgICAgICBpZiAoYSBpbnN0YW5jZW9mIE9iamVjdClcclxuICAgICAgICAgICAgICAgIHJldHVybiBiO1xyXG4gICAgICAgICAgICB2YXIgYyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhKTtcclxuICAgICAgICAgICAgaWYgKFwiW29iamVjdCBXaW5kb3ddXCIgPT0gYylcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIm9iamVjdFwiO1xyXG4gICAgICAgICAgICBpZiAoXCJbb2JqZWN0IEFycmF5XVwiID09IGMgfHwgXCJudW1iZXJcIiA9PSB0eXBlb2YgYS5sZW5ndGggJiYgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgYS5zcGxpY2UgJiYgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgYS5wcm9wZXJ0eUlzRW51bWVyYWJsZSAmJiAhYS5wcm9wZXJ0eUlzRW51bWVyYWJsZShcInNwbGljZVwiKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImFycmF5XCI7XHJcbiAgICAgICAgICAgIGlmIChcIltvYmplY3QgRnVuY3Rpb25dXCIgPT0gYyB8fCBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBhLmNhbGwgJiYgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgYS5wcm9wZXJ0eUlzRW51bWVyYWJsZSAmJiAhYS5wcm9wZXJ0eUlzRW51bWVyYWJsZShcImNhbGxcIikpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJmdW5jdGlvblwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHJldHVybiBcIm51bGxcIjtcclxuICAgIGVsc2UgaWYgKFwiZnVuY3Rpb25cIiA9PSBiICYmIFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIGEuY2FsbClcclxuICAgICAgICByZXR1cm4gXCJvYmplY3RcIjtcclxuICAgIHJldHVybiBiO1xyXG59XHJcbmZ1bmN0aW9uIGRhKGEpIHsgdmFyIGIgPSBiYShhKTsgcmV0dXJuIFwiYXJyYXlcIiA9PSBiIHx8IFwib2JqZWN0XCIgPT0gYiAmJiBcIm51bWJlclwiID09IHR5cGVvZiBhLmxlbmd0aDsgfVxyXG5mdW5jdGlvbiBtKGEpIHsgdmFyIGIgPSB0eXBlb2YgYTsgcmV0dXJuIFwib2JqZWN0XCIgPT0gYiAmJiBudWxsICE9IGEgfHwgXCJmdW5jdGlvblwiID09IGI7IH1cclxuZnVuY3Rpb24gZWEoYSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsIGZhKSAmJiBhW2ZhXSB8fCAoYVtmYV0gPSArK2hhKTsgfVxyXG52YXIgZmEgPSBcImNsb3N1cmVfdWlkX1wiICsgKDFFOSAqIE1hdGgucmFuZG9tKCkgPj4+IDApLCBoYSA9IDA7XHJcbmZ1bmN0aW9uIGlhKGEsIGIsIGMpIHsgcmV0dXJuIGEuY2FsbC5hcHBseShhLmJpbmQsIGFyZ3VtZW50cyk7IH1cclxuZnVuY3Rpb24gamEoYSwgYiwgYykgeyBpZiAoIWEpXHJcbiAgICB0aHJvdyBFcnJvcigpOyBpZiAoMiA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIHZhciBkID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTsgQXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoZSwgZCk7IHJldHVybiBhLmFwcGx5KGIsIGUpOyB9O1xyXG59IHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBhLmFwcGx5KGIsIGFyZ3VtZW50cyk7IH07IH1cclxuZnVuY3Rpb24gbihhLCBiLCBjKSB7IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kICYmIC0xICE9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLnRvU3RyaW5nKCkuaW5kZXhPZihcIm5hdGl2ZSBjb2RlXCIpID8gbiA9IGlhIDogbiA9IGphOyByZXR1cm4gbi5hcHBseShudWxsLCBhcmd1bWVudHMpOyB9XHJcbmZ1bmN0aW9uIGthKGEsIGIpIHsgdmFyIGMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgZCA9IGMuc2xpY2UoKTsgZC5wdXNoLmFwcGx5KGQsIGFyZ3VtZW50cyk7IHJldHVybiBhLmFwcGx5KHRoaXMsIGQpOyB9OyB9XHJcbnZhciBxID0gRGF0ZS5ub3cgfHwgZnVuY3Rpb24gKCkgeyByZXR1cm4gK25ldyBEYXRlOyB9O1xyXG5mdW5jdGlvbiByKGEsIGIpIHsgZnVuY3Rpb24gYygpIHsgfSBjLnByb3RvdHlwZSA9IGIucHJvdG90eXBlOyBhLk0gPSBiLnByb3RvdHlwZTsgYS5wcm90b3R5cGUgPSBuZXcgYzsgYS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBhOyB9XHJcbmZ1bmN0aW9uIHQoKSB7IHRoaXMuaiA9IHRoaXMuajsgdGhpcy5pID0gdGhpcy5pOyB9XHJcbnZhciBsYSA9IDA7XHJcbnQucHJvdG90eXBlLmogPSAhMTtcclxudC5wcm90b3R5cGUuZGEgPSBmdW5jdGlvbiAoKSB7IGlmICghdGhpcy5qICYmICh0aGlzLmogPSAhMCwgdGhpcy5DKCksIDAgIT0gbGEpKSB7XHJcbiAgICB2YXIgYSA9IGVhKHRoaXMpO1xyXG59IH07XHJcbnQucHJvdG90eXBlLkMgPSBmdW5jdGlvbiAoKSB7IGlmICh0aGlzLmkpXHJcbiAgICBmb3IgKDsgdGhpcy5pLmxlbmd0aDspXHJcbiAgICAgICAgdGhpcy5pLnNoaWZ0KCkoKTsgfTtcclxudmFyIG5hID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2YgPyBmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChhLCBiLCB2b2lkIDApOyB9IDogZnVuY3Rpb24gKGEsIGIpIHsgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBhKVxyXG4gICAgcmV0dXJuIFwic3RyaW5nXCIgIT09IHR5cGVvZiBiIHx8IDEgIT0gYi5sZW5ndGggPyAtMSA6IGEuaW5kZXhPZihiLCAwKTsgZm9yICh2YXIgYyA9IDA7IGMgPCBhLmxlbmd0aDsgYysrKVxyXG4gICAgaWYgKGMgaW4gYSAmJiBhW2NdID09PSBiKVxyXG4gICAgICAgIHJldHVybiBjOyByZXR1cm4gLTE7IH0sIG9hID0gQXJyYXkucHJvdG90eXBlLmZvckVhY2ggPyBmdW5jdGlvbiAoYSwgYiwgYykgeyBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGEsIGIsIGMpOyB9IDogZnVuY3Rpb24gKGEsIGIsIGMpIHsgZm9yICh2YXIgZCA9IGEubGVuZ3RoLCBlID0gXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGEgPyBhLnNwbGl0KFwiXCIpIDogYSwgZiA9IDA7IGYgPCBkOyBmKyspXHJcbiAgICBmIGluIGUgJiYgYi5jYWxsKGMsIGVbZl0sIGYsIGEpOyB9O1xyXG5mdW5jdGlvbiBwYShhKSB7IGE6IHtcclxuICAgIHZhciBiID0gcWE7XHJcbiAgICBmb3IgKHZhciBjID0gYS5sZW5ndGgsIGQgPSBcInN0cmluZ1wiID09PSB0eXBlb2YgYSA/IGEuc3BsaXQoXCJcIikgOiBhLCBlID0gMDsgZSA8IGM7IGUrKylcclxuICAgICAgICBpZiAoZSBpbiBkICYmIGIuY2FsbCh2b2lkIDAsIGRbZV0sIGUsIGEpKSB7XHJcbiAgICAgICAgICAgIGIgPSBlO1xyXG4gICAgICAgICAgICBicmVhayBhO1xyXG4gICAgICAgIH1cclxuICAgIGIgPSAtMTtcclxufSByZXR1cm4gMCA+IGIgPyBudWxsIDogXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGEgPyBhLmNoYXJBdChiKSA6IGFbYl07IH1cclxuZnVuY3Rpb24gcmEoYSkgeyByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgYXJndW1lbnRzKTsgfVxyXG5mdW5jdGlvbiBzYShhKSB7IHZhciBiID0gYS5sZW5ndGg7IGlmICgwIDwgYikge1xyXG4gICAgZm9yICh2YXIgYyA9IEFycmF5KGIpLCBkID0gMDsgZCA8IGI7IGQrKylcclxuICAgICAgICBjW2RdID0gYVtkXTtcclxuICAgIHJldHVybiBjO1xyXG59IHJldHVybiBbXTsgfVxyXG5mdW5jdGlvbiB3YShhKSB7IHJldHVybiAvXltcXHNcXHhhMF0qJC8udGVzdChhKTsgfVxyXG52YXIgeGEgPSBTdHJpbmcucHJvdG90eXBlLnRyaW0gPyBmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS50cmltKCk7IH0gOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gL15bXFxzXFx4YTBdKihbXFxzXFxTXSo/KVtcXHNcXHhhMF0qJC8uZXhlYyhhKVsxXTsgfTtcclxuZnVuY3Rpb24gdShhLCBiKSB7IHJldHVybiAtMSAhPSBhLmluZGV4T2YoYik7IH1cclxuZnVuY3Rpb24geWEoYSwgYikgeyByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IDA7IH1cclxudmFyIHY7XHJcbmE6IHtcclxuICAgIHZhciB6YSA9IGsubmF2aWdhdG9yO1xyXG4gICAgaWYgKHphKSB7XHJcbiAgICAgICAgdmFyIEFhID0gemEudXNlckFnZW50O1xyXG4gICAgICAgIGlmIChBYSkge1xyXG4gICAgICAgICAgICB2ID0gQWE7XHJcbiAgICAgICAgICAgIGJyZWFrIGE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdiA9IFwiXCI7XHJcbn1cclxuZnVuY3Rpb24gQmEoYSwgYiwgYykgeyBmb3IgKHZhciBkIGluIGEpXHJcbiAgICBiLmNhbGwoYywgYVtkXSwgZCwgYSk7IH1cclxuZnVuY3Rpb24gQ2EoYSkgeyB2YXIgYiA9IHt9OyBmb3IgKHZhciBjIGluIGEpXHJcbiAgICBiW2NdID0gYVtjXTsgcmV0dXJuIGI7IH1cclxudmFyIERhID0gXCJjb25zdHJ1Y3RvciBoYXNPd25Qcm9wZXJ0eSBpc1Byb3RvdHlwZU9mIHByb3BlcnR5SXNFbnVtZXJhYmxlIHRvTG9jYWxlU3RyaW5nIHRvU3RyaW5nIHZhbHVlT2ZcIi5zcGxpdChcIiBcIik7XHJcbmZ1bmN0aW9uIEVhKGEsIGIpIHsgdmFyIGMsIGQ7IGZvciAodmFyIGUgPSAxOyBlIDwgYXJndW1lbnRzLmxlbmd0aDsgZSsrKSB7XHJcbiAgICBkID0gYXJndW1lbnRzW2VdO1xyXG4gICAgZm9yIChjIGluIGQpXHJcbiAgICAgICAgYVtjXSA9IGRbY107XHJcbiAgICBmb3IgKHZhciBmID0gMDsgZiA8IERhLmxlbmd0aDsgZisrKVxyXG4gICAgICAgIGMgPSBEYVtmXSwgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGQsIGMpICYmIChhW2NdID0gZFtjXSk7XHJcbn0gfVxyXG5mdW5jdGlvbiBGYShhKSB7IEZhW1wiIFwiXShhKTsgcmV0dXJuIGE7IH1cclxuRmFbXCIgXCJdID0gYWE7XHJcbmZ1bmN0aW9uIEdhKGEsIGIpIHsgdmFyIGMgPSBIYTsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjLCBhKSA/IGNbYV0gOiBjW2FdID0gYihhKTsgfVxyXG52YXIgSWEgPSB1KHYsIFwiT3BlcmFcIiksIHcgPSB1KHYsIFwiVHJpZGVudFwiKSB8fCB1KHYsIFwiTVNJRVwiKSwgSmEgPSB1KHYsIFwiRWRnZVwiKSwgS2EgPSBKYSB8fCB3LCBMYSA9IHUodiwgXCJHZWNrb1wiKSAmJiAhKHUodi50b0xvd2VyQ2FzZSgpLCBcIndlYmtpdFwiKSAmJiAhdSh2LCBcIkVkZ2VcIikpICYmICEodSh2LCBcIlRyaWRlbnRcIikgfHwgdSh2LCBcIk1TSUVcIikpICYmICF1KHYsIFwiRWRnZVwiKSwgTWEgPSB1KHYudG9Mb3dlckNhc2UoKSwgXCJ3ZWJraXRcIikgJiYgIXUodiwgXCJFZGdlXCIpO1xyXG5mdW5jdGlvbiBOYSgpIHsgdmFyIGEgPSBrLmRvY3VtZW50OyByZXR1cm4gYSA/IGEuZG9jdW1lbnRNb2RlIDogdm9pZCAwOyB9XHJcbnZhciBPYTtcclxuYToge1xyXG4gICAgdmFyIFBhID0gXCJcIiwgUWEgPSBmdW5jdGlvbiAoKSB7IHZhciBhID0gdjsgaWYgKExhKVxyXG4gICAgICAgIHJldHVybiAvcnY6KFteXFwpO10rKShcXCl8OykvLmV4ZWMoYSk7IGlmIChKYSlcclxuICAgICAgICByZXR1cm4gL0VkZ2VcXC8oW1xcZFxcLl0rKS8uZXhlYyhhKTsgaWYgKHcpXHJcbiAgICAgICAgcmV0dXJuIC9cXGIoPzpNU0lFfHJ2KVs6IF0oW15cXCk7XSspKFxcKXw7KS8uZXhlYyhhKTsgaWYgKE1hKVxyXG4gICAgICAgIHJldHVybiAvV2ViS2l0XFwvKFxcUyspLy5leGVjKGEpOyBpZiAoSWEpXHJcbiAgICAgICAgcmV0dXJuIC8oPzpWZXJzaW9uKVsgXFwvXT8oXFxTKykvLmV4ZWMoYSk7IH0oKTtcclxuICAgIFFhICYmIChQYSA9IFFhID8gUWFbMV0gOiBcIlwiKTtcclxuICAgIGlmICh3KSB7XHJcbiAgICAgICAgdmFyIFJhID0gTmEoKTtcclxuICAgICAgICBpZiAobnVsbCAhPSBSYSAmJiBSYSA+IHBhcnNlRmxvYXQoUGEpKSB7XHJcbiAgICAgICAgICAgIE9hID0gU3RyaW5nKFJhKTtcclxuICAgICAgICAgICAgYnJlYWsgYTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBPYSA9IFBhO1xyXG59XHJcbnZhciBIYSA9IHt9O1xyXG5mdW5jdGlvbiBTYShhKSB7IHJldHVybiBHYShhLCBmdW5jdGlvbiAoKSB7IHtcclxuICAgIHZhciBiID0gMDtcclxuICAgIHZhciBlID0geGEoU3RyaW5nKE9hKSkuc3BsaXQoXCIuXCIpLCBmID0geGEoU3RyaW5nKGEpKS5zcGxpdChcIi5cIiksIGggPSBNYXRoLm1heChlLmxlbmd0aCwgZi5sZW5ndGgpO1xyXG4gICAgZm9yICh2YXIgbCA9IDA7IDAgPT0gYiAmJiBsIDwgaDsgbCsrKSB7XHJcbiAgICAgICAgdmFyIGMgPSBlW2xdIHx8IFwiXCIsIGQgPSBmW2xdIHx8IFwiXCI7XHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICBjID0gLyhcXGQqKShcXEQqKSguKikvLmV4ZWMoYykgfHwgW1wiXCIsIFwiXCIsIFwiXCIsIFwiXCJdO1xyXG4gICAgICAgICAgICBkID0gLyhcXGQqKShcXEQqKSguKikvLmV4ZWMoZCkgfHwgW1wiXCIsIFwiXCIsIFwiXCIsIFwiXCJdO1xyXG4gICAgICAgICAgICBpZiAoMCA9PSBjWzBdLmxlbmd0aCAmJiAwID09IGRbMF0ubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGIgPSB5YSgwID09IGNbMV0ubGVuZ3RoID8gMCA6IHBhcnNlSW50KGNbMV0sIDEwKSwgMCA9PSBkWzFdLmxlbmd0aCA/IDAgOiBwYXJzZUludChkWzFdLCAxMCkpIHx8IHlhKDAgPT0gY1syXS5sZW5ndGgsIDAgPT0gZFsyXS5sZW5ndGgpIHx8IHlhKGNbMl0sIGRbMl0pO1xyXG4gICAgICAgICAgICBjID0gY1szXTtcclxuICAgICAgICAgICAgZCA9IGRbM107XHJcbiAgICAgICAgfSB3aGlsZSAoMCA9PSBiKTtcclxuICAgIH1cclxufSByZXR1cm4gMCA8PSBiOyB9KTsgfVxyXG52YXIgVGE7XHJcbmlmIChrLmRvY3VtZW50ICYmIHcpIHtcclxuICAgIHZhciBVYSA9IE5hKCk7XHJcbiAgICBUYSA9IFVhID8gVWEgOiBwYXJzZUludChPYSwgMTApIHx8IHZvaWQgMDtcclxufVxyXG5lbHNlXHJcbiAgICBUYSA9IHZvaWQgMDtcclxudmFyIFZhID0gVGE7XHJcbnZhciBXYSA9ICF3IHx8IDkgPD0gTnVtYmVyKFZhKSwgWGEgPSB3ICYmICFTYShcIjlcIiksIFlhID0gZnVuY3Rpb24gKCkgeyBpZiAoIWsuYWRkRXZlbnRMaXN0ZW5lciB8fCAhT2JqZWN0LmRlZmluZVByb3BlcnR5KVxyXG4gICAgcmV0dXJuICExOyB2YXIgYSA9ICExLCBiID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCBcInBhc3NpdmVcIiwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgYSA9ICEwOyB9IH0pOyB0cnkge1xyXG4gICAgay5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLCBhYSwgYiksIGsucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIiwgYWEsIGIpO1xyXG59XHJcbmNhdGNoIChjKSB7IH0gcmV0dXJuIGE7IH0oKTtcclxuZnVuY3Rpb24geChhLCBiKSB7IHRoaXMudHlwZSA9IGE7IHRoaXMuYSA9IHRoaXMudGFyZ2V0ID0gYjsgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gITE7IH1cclxueC5wcm90b3R5cGUuYiA9IGZ1bmN0aW9uICgpIHsgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gITA7IH07XHJcbmZ1bmN0aW9uIHkoYSwgYikge1xyXG4gICAgeC5jYWxsKHRoaXMsIGEgPyBhLnR5cGUgOiBcIlwiKTtcclxuICAgIHRoaXMucmVsYXRlZFRhcmdldCA9IHRoaXMuYSA9IHRoaXMudGFyZ2V0ID0gbnVsbDtcclxuICAgIHRoaXMuYnV0dG9uID0gdGhpcy5zY3JlZW5ZID0gdGhpcy5zY3JlZW5YID0gdGhpcy5jbGllbnRZID0gdGhpcy5jbGllbnRYID0gMDtcclxuICAgIHRoaXMua2V5ID0gXCJcIjtcclxuICAgIHRoaXMubWV0YUtleSA9IHRoaXMuc2hpZnRLZXkgPSB0aGlzLmFsdEtleSA9IHRoaXMuY3RybEtleSA9ICExO1xyXG4gICAgdGhpcy5wb2ludGVySWQgPSAwO1xyXG4gICAgdGhpcy5wb2ludGVyVHlwZSA9IFwiXCI7XHJcbiAgICB0aGlzLmMgPSBudWxsO1xyXG4gICAgaWYgKGEpIHtcclxuICAgICAgICB2YXIgYyA9IHRoaXMudHlwZSA9IGEudHlwZSwgZCA9IGEuY2hhbmdlZFRvdWNoZXMgJiYgYS5jaGFuZ2VkVG91Y2hlcy5sZW5ndGggPyBhLmNoYW5nZWRUb3VjaGVzWzBdIDogbnVsbDtcclxuICAgICAgICB0aGlzLnRhcmdldCA9IGEudGFyZ2V0IHx8IGEuc3JjRWxlbWVudDtcclxuICAgICAgICB0aGlzLmEgPSBiO1xyXG4gICAgICAgIGlmIChiID0gYS5yZWxhdGVkVGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIGlmIChMYSkge1xyXG4gICAgICAgICAgICAgICAgYToge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEZhKGIubm9kZU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9ICEwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZikgeyB9XHJcbiAgICAgICAgICAgICAgICAgICAgZSA9ICExO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZSB8fCAoYiA9IG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgXCJtb3VzZW92ZXJcIiA9PVxyXG4gICAgICAgICAgICAgICAgYyA/IGIgPSBhLmZyb21FbGVtZW50IDogXCJtb3VzZW91dFwiID09IGMgJiYgKGIgPSBhLnRvRWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5yZWxhdGVkVGFyZ2V0ID0gYjtcclxuICAgICAgICBkID8gKHRoaXMuY2xpZW50WCA9IHZvaWQgMCAhPT0gZC5jbGllbnRYID8gZC5jbGllbnRYIDogZC5wYWdlWCwgdGhpcy5jbGllbnRZID0gdm9pZCAwICE9PSBkLmNsaWVudFkgPyBkLmNsaWVudFkgOiBkLnBhZ2VZLCB0aGlzLnNjcmVlblggPSBkLnNjcmVlblggfHwgMCwgdGhpcy5zY3JlZW5ZID0gZC5zY3JlZW5ZIHx8IDApIDogKHRoaXMuY2xpZW50WCA9IHZvaWQgMCAhPT0gYS5jbGllbnRYID8gYS5jbGllbnRYIDogYS5wYWdlWCwgdGhpcy5jbGllbnRZID0gdm9pZCAwICE9PSBhLmNsaWVudFkgPyBhLmNsaWVudFkgOiBhLnBhZ2VZLCB0aGlzLnNjcmVlblggPSBhLnNjcmVlblggfHwgMCwgdGhpcy5zY3JlZW5ZID0gYS5zY3JlZW5ZIHx8IDApO1xyXG4gICAgICAgIHRoaXMuYnV0dG9uID0gYS5idXR0b247XHJcbiAgICAgICAgdGhpcy5rZXkgPSBhLmtleSB8fCBcIlwiO1xyXG4gICAgICAgIHRoaXMuY3RybEtleSA9IGEuY3RybEtleTtcclxuICAgICAgICB0aGlzLmFsdEtleSA9IGEuYWx0S2V5O1xyXG4gICAgICAgIHRoaXMuc2hpZnRLZXkgPSBhLnNoaWZ0S2V5O1xyXG4gICAgICAgIHRoaXMubWV0YUtleSA9XHJcbiAgICAgICAgICAgIGEubWV0YUtleTtcclxuICAgICAgICB0aGlzLnBvaW50ZXJJZCA9IGEucG9pbnRlcklkIHx8IDA7XHJcbiAgICAgICAgdGhpcy5wb2ludGVyVHlwZSA9IFwic3RyaW5nXCIgPT09IHR5cGVvZiBhLnBvaW50ZXJUeXBlID8gYS5wb2ludGVyVHlwZSA6IFphW2EucG9pbnRlclR5cGVdIHx8IFwiXCI7XHJcbiAgICAgICAgdGhpcy5jID0gYTtcclxuICAgICAgICBhLmRlZmF1bHRQcmV2ZW50ZWQgJiYgdGhpcy5iKCk7XHJcbiAgICB9XHJcbn1cclxucih5LCB4KTtcclxudmFyIFphID0geyAyOiBcInRvdWNoXCIsIDM6IFwicGVuXCIsIDQ6IFwibW91c2VcIiB9O1xyXG55LnByb3RvdHlwZS5iID0gZnVuY3Rpb24gKCkgeyB5Lk0uYi5jYWxsKHRoaXMpOyB2YXIgYSA9IHRoaXMuYzsgaWYgKGEucHJldmVudERlZmF1bHQpXHJcbiAgICBhLnByZXZlbnREZWZhdWx0KCk7XHJcbmVsc2UgaWYgKGEucmV0dXJuVmFsdWUgPSAhMSwgWGEpXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGlmIChhLmN0cmxLZXkgfHwgMTEyIDw9IGEua2V5Q29kZSAmJiAxMjMgPj0gYS5rZXlDb2RlKVxyXG4gICAgICAgICAgICBhLmtleUNvZGUgPSAtMTtcclxuICAgIH1cclxuICAgIGNhdGNoIChiKSB7IH0gfTtcclxudmFyIEEgPSBcImNsb3N1cmVfbGlzdGVuYWJsZV9cIiArICgxRTYgKiBNYXRoLnJhbmRvbSgpIHwgMCksICRhID0gMDtcclxuZnVuY3Rpb24gYWIoYSwgYiwgYywgZCwgZSkgeyB0aGlzLmxpc3RlbmVyID0gYTsgdGhpcy5wcm94eSA9IG51bGw7IHRoaXMuc3JjID0gYjsgdGhpcy50eXBlID0gYzsgdGhpcy5jYXB0dXJlID0gISFkOyB0aGlzLmFhID0gZTsgdGhpcy5rZXkgPSArKyRhOyB0aGlzLlYgPSB0aGlzLlggPSAhMTsgfVxyXG5mdW5jdGlvbiBiYihhKSB7IGEuViA9ICEwOyBhLmxpc3RlbmVyID0gbnVsbDsgYS5wcm94eSA9IG51bGw7IGEuc3JjID0gbnVsbDsgYS5hYSA9IG51bGw7IH1cclxuZnVuY3Rpb24gY2IoYSkgeyB0aGlzLnNyYyA9IGE7IHRoaXMuYSA9IHt9OyB0aGlzLmIgPSAwOyB9XHJcbmNiLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCwgZSkgeyB2YXIgZiA9IGEudG9TdHJpbmcoKTsgYSA9IHRoaXMuYVtmXTsgYSB8fCAoYSA9IHRoaXMuYVtmXSA9IFtdLCB0aGlzLmIrKyk7IHZhciBoID0gZGIoYSwgYiwgZCwgZSk7IC0xIDwgaCA/IChiID0gYVtoXSwgYyB8fCAoYi5YID0gITEpKSA6IChiID0gbmV3IGFiKGIsIHRoaXMuc3JjLCBmLCAhIWQsIGUpLCBiLlggPSBjLCBhLnB1c2goYikpOyByZXR1cm4gYjsgfTtcclxuZnVuY3Rpb24gZWIoYSwgYikgeyB2YXIgYyA9IGIudHlwZTsgaWYgKGMgaW4gYS5hKSB7XHJcbiAgICB2YXIgZCA9IGEuYVtjXSwgZSA9IG5hKGQsIGIpLCBmO1xyXG4gICAgKGYgPSAwIDw9IGUpICYmIEFycmF5LnByb3RvdHlwZS5zcGxpY2UuY2FsbChkLCBlLCAxKTtcclxuICAgIGYgJiYgKGJiKGIpLCAwID09IGEuYVtjXS5sZW5ndGggJiYgKGRlbGV0ZSBhLmFbY10sIGEuYi0tKSk7XHJcbn0gfVxyXG5mdW5jdGlvbiBkYihhLCBiLCBjLCBkKSB7IGZvciAodmFyIGUgPSAwOyBlIDwgYS5sZW5ndGg7ICsrZSkge1xyXG4gICAgdmFyIGYgPSBhW2VdO1xyXG4gICAgaWYgKCFmLlYgJiYgZi5saXN0ZW5lciA9PSBiICYmIGYuY2FwdHVyZSA9PSAhIWMgJiYgZi5hYSA9PSBkKVxyXG4gICAgICAgIHJldHVybiBlO1xyXG59IHJldHVybiAtMTsgfVxyXG52YXIgZmIgPSBcImNsb3N1cmVfbG1fXCIgKyAoMUU2ICogTWF0aC5yYW5kb20oKSB8IDApLCBnYiA9IHt9O1xyXG5mdW5jdGlvbiBpYihhLCBiLCBjLCBkLCBlKSB7IGlmIChkICYmIGQub25jZSlcclxuICAgIHJldHVybiBqYihhLCBiLCBjLCBkLCBlKTsgaWYgKEFycmF5LmlzQXJyYXkoYikpIHtcclxuICAgIGZvciAodmFyIGYgPSAwOyBmIDwgYi5sZW5ndGg7IGYrKylcclxuICAgICAgICBpYihhLCBiW2ZdLCBjLCBkLCBlKTtcclxuICAgIHJldHVybiBudWxsO1xyXG59IGMgPSBrYihjKTsgcmV0dXJuIGEgJiYgYVtBXSA/IGEucmEoYiwgYywgbShkKSA/ICEhZC5jYXB0dXJlIDogISFkLCBlKSA6IGxiKGEsIGIsIGMsICExLCBkLCBlKTsgfVxyXG5mdW5jdGlvbiBsYihhLCBiLCBjLCBkLCBlLCBmKSB7XHJcbiAgICBpZiAoIWIpXHJcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJJbnZhbGlkIGV2ZW50IHR5cGVcIik7XHJcbiAgICB2YXIgaCA9IG0oZSkgPyAhIWUuY2FwdHVyZSA6ICEhZTtcclxuICAgIGlmIChoICYmICFXYSlcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIHZhciBsID0gbWIoYSk7XHJcbiAgICBsIHx8IChhW2ZiXSA9IGwgPSBuZXcgY2IoYSkpO1xyXG4gICAgYyA9IGwuYWRkKGIsIGMsIGQsIGgsIGYpO1xyXG4gICAgaWYgKGMucHJveHkpXHJcbiAgICAgICAgcmV0dXJuIGM7XHJcbiAgICBkID0gbmIoKTtcclxuICAgIGMucHJveHkgPSBkO1xyXG4gICAgZC5zcmMgPSBhO1xyXG4gICAgZC5saXN0ZW5lciA9IGM7XHJcbiAgICBpZiAoYS5hZGRFdmVudExpc3RlbmVyKVxyXG4gICAgICAgIFlhIHx8IChlID0gaCksIHZvaWQgMCA9PT0gZSAmJiAoZSA9ICExKSwgYS5hZGRFdmVudExpc3RlbmVyKGIudG9TdHJpbmcoKSwgZCwgZSk7XHJcbiAgICBlbHNlIGlmIChhLmF0dGFjaEV2ZW50KVxyXG4gICAgICAgIGEuYXR0YWNoRXZlbnQob2IoYi50b1N0cmluZygpKSwgZCk7XHJcbiAgICBlbHNlIGlmIChhLmFkZExpc3RlbmVyICYmIGEucmVtb3ZlTGlzdGVuZXIpXHJcbiAgICAgICAgYS5hZGRMaXN0ZW5lcihkKTtcclxuICAgIGVsc2VcclxuICAgICAgICB0aHJvdyBFcnJvcihcImFkZEV2ZW50TGlzdGVuZXIgYW5kIGF0dGFjaEV2ZW50IGFyZSB1bmF2YWlsYWJsZS5cIik7XHJcbiAgICByZXR1cm4gYztcclxufVxyXG5mdW5jdGlvbiBuYigpIHsgdmFyIGEgPSBwYiwgYiA9IFdhID8gZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGEuY2FsbChiLnNyYywgYi5saXN0ZW5lciwgYyk7IH0gOiBmdW5jdGlvbiAoYykgeyBjID0gYS5jYWxsKGIuc3JjLCBiLmxpc3RlbmVyLCBjKTsgaWYgKCFjKVxyXG4gICAgcmV0dXJuIGM7IH07IHJldHVybiBiOyB9XHJcbmZ1bmN0aW9uIGpiKGEsIGIsIGMsIGQsIGUpIHsgaWYgKEFycmF5LmlzQXJyYXkoYikpIHtcclxuICAgIGZvciAodmFyIGYgPSAwOyBmIDwgYi5sZW5ndGg7IGYrKylcclxuICAgICAgICBqYihhLCBiW2ZdLCBjLCBkLCBlKTtcclxuICAgIHJldHVybiBudWxsO1xyXG59IGMgPSBrYihjKTsgcmV0dXJuIGEgJiYgYVtBXSA/IGEuc2EoYiwgYywgbShkKSA/ICEhZC5jYXB0dXJlIDogISFkLCBlKSA6IGxiKGEsIGIsIGMsICEwLCBkLCBlKTsgfVxyXG5mdW5jdGlvbiBxYihhLCBiLCBjLCBkLCBlKSB7IGlmIChBcnJheS5pc0FycmF5KGIpKVxyXG4gICAgZm9yICh2YXIgZiA9IDA7IGYgPCBiLmxlbmd0aDsgZisrKVxyXG4gICAgICAgIHFiKGEsIGJbZl0sIGMsIGQsIGUpO1xyXG5lbHNlXHJcbiAgICAoZCA9IG0oZCkgPyAhIWQuY2FwdHVyZSA6ICEhZCwgYyA9IGtiKGMpLCBhICYmIGFbQV0pID8gKGEgPSBhLmMsIGIgPSBTdHJpbmcoYikudG9TdHJpbmcoKSwgYiBpbiBhLmEgJiYgKGYgPSBhLmFbYl0sIGMgPSBkYihmLCBjLCBkLCBlKSwgLTEgPCBjICYmIChiYihmW2NdKSwgQXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGYsIGMsIDEpLCAwID09IGYubGVuZ3RoICYmIChkZWxldGUgYS5hW2JdLCBhLmItLSkpKSkgOiBhICYmIChhID0gbWIoYSkpICYmIChiID0gYS5hW2IudG9TdHJpbmcoKV0sIGEgPSAtMSwgYiAmJiAoYSA9IGRiKGIsIGMsIGQsIGUpKSwgKGMgPSAtMSA8IGEgPyBiW2FdIDogbnVsbCkgJiYgcmIoYykpOyB9XHJcbmZ1bmN0aW9uIHJiKGEpIHsgaWYgKFwibnVtYmVyXCIgIT09IHR5cGVvZiBhICYmIGEgJiYgIWEuVikge1xyXG4gICAgdmFyIGIgPSBhLnNyYztcclxuICAgIGlmIChiICYmIGJbQV0pXHJcbiAgICAgICAgZWIoYi5jLCBhKTtcclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHZhciBjID0gYS50eXBlLCBkID0gYS5wcm94eTtcclxuICAgICAgICBiLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyBiLnJlbW92ZUV2ZW50TGlzdGVuZXIoYywgZCwgYS5jYXB0dXJlKSA6IGIuZGV0YWNoRXZlbnQgPyBiLmRldGFjaEV2ZW50KG9iKGMpLCBkKSA6IGIuYWRkTGlzdGVuZXIgJiYgYi5yZW1vdmVMaXN0ZW5lciAmJiBiLnJlbW92ZUxpc3RlbmVyKGQpO1xyXG4gICAgICAgIChjID0gbWIoYikpID8gKGViKGMsIGEpLCAwID09IGMuYiAmJiAoYy5zcmMgPSBudWxsLCBiW2ZiXSA9IG51bGwpKSA6IGJiKGEpO1xyXG4gICAgfVxyXG59IH1cclxuZnVuY3Rpb24gb2IoYSkgeyByZXR1cm4gYSBpbiBnYiA/IGdiW2FdIDogZ2JbYV0gPSBcIm9uXCIgKyBhOyB9XHJcbmZ1bmN0aW9uIHNiKGEsIGIpIHsgdmFyIGMgPSBhLmxpc3RlbmVyLCBkID0gYS5hYSB8fCBhLnNyYzsgYS5YICYmIHJiKGEpOyByZXR1cm4gYy5jYWxsKGQsIGIpOyB9XHJcbmZ1bmN0aW9uIHBiKGEsIGIpIHsgaWYgKGEuVilcclxuICAgIHJldHVybiAhMDsgaWYgKCFXYSkge1xyXG4gICAgaWYgKCFiKVxyXG4gICAgICAgIGE6IHtcclxuICAgICAgICAgICAgYiA9IFtcIndpbmRvd1wiLCBcImV2ZW50XCJdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBjID0gaywgZCA9IDA7IGQgPCBiLmxlbmd0aDsgZCsrKVxyXG4gICAgICAgICAgICAgICAgaWYgKGMgPSBjW2JbZF1dLCBudWxsID09IGMpIHtcclxuICAgICAgICAgICAgICAgICAgICBiID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBiID0gYztcclxuICAgICAgICB9XHJcbiAgICBiID0gbmV3IHkoYiwgdGhpcyk7XHJcbiAgICByZXR1cm4gc2IoYSwgYik7XHJcbn0gcmV0dXJuIHNiKGEsIG5ldyB5KGIsIHRoaXMpKTsgfVxyXG5mdW5jdGlvbiBtYihhKSB7IGEgPSBhW2ZiXTsgcmV0dXJuIGEgaW5zdGFuY2VvZiBjYiA/IGEgOiBudWxsOyB9XHJcbnZhciB0YiA9IFwiX19jbG9zdXJlX2V2ZW50c19mbl9cIiArICgxRTkgKiBNYXRoLnJhbmRvbSgpID4+PiAwKTtcclxuZnVuY3Rpb24ga2IoYSkgeyBpZiAoXCJmdW5jdGlvblwiID09IGJhKGEpKVxyXG4gICAgcmV0dXJuIGE7IGFbdGJdIHx8IChhW3RiXSA9IGZ1bmN0aW9uIChiKSB7IHJldHVybiBhLmhhbmRsZUV2ZW50KGIpOyB9KTsgcmV0dXJuIGFbdGJdOyB9XHJcbmZ1bmN0aW9uIEIoKSB7IHQuY2FsbCh0aGlzKTsgdGhpcy5jID0gbmV3IGNiKHRoaXMpOyB0aGlzLkogPSB0aGlzOyB0aGlzLkEgPSBudWxsOyB9XHJcbnIoQiwgdCk7XHJcbkIucHJvdG90eXBlW0FdID0gITA7XHJcbmcgPSBCLnByb3RvdHlwZTtcclxuZy5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgaWIodGhpcywgYSwgYiwgYywgZCk7IH07XHJcbmcucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHFiKHRoaXMsIGEsIGIsIGMsIGQpOyB9O1xyXG5nLmRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiAoYSkgeyB2YXIgYiwgYyA9IHRoaXMuQTsgaWYgKGMpXHJcbiAgICBmb3IgKGIgPSBbXTsgYzsgYyA9IGMuQSlcclxuICAgICAgICBiLnB1c2goYyk7IGMgPSB0aGlzLko7IHZhciBkID0gYS50eXBlIHx8IGE7IGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgYSlcclxuICAgIGEgPSBuZXcgeChhLCBjKTtcclxuZWxzZSBpZiAoYSBpbnN0YW5jZW9mIHgpXHJcbiAgICBhLnRhcmdldCA9IGEudGFyZ2V0IHx8IGM7XHJcbmVsc2Uge1xyXG4gICAgdmFyIGUgPSBhO1xyXG4gICAgYSA9IG5ldyB4KGQsIGMpO1xyXG4gICAgRWEoYSwgZSk7XHJcbn0gZSA9ICEwOyBpZiAoYilcclxuICAgIGZvciAodmFyIGYgPSBiLmxlbmd0aCAtIDE7IDAgPD0gZjsgZi0tKSB7XHJcbiAgICAgICAgdmFyIGggPSBhLmEgPSBiW2ZdO1xyXG4gICAgICAgIGUgPSB1YihoLCBkLCAhMCwgYSkgJiYgZTtcclxuICAgIH0gaCA9IGEuYSA9IGM7IGUgPSB1YihoLCBkLCAhMCwgYSkgJiYgZTsgZSA9IHViKGgsIGQsICExLCBhKSAmJiBlOyBpZiAoYilcclxuICAgIGZvciAoZiA9IDA7IGYgPCBiLmxlbmd0aDsgZisrKVxyXG4gICAgICAgIGggPSBhLmEgPSBiW2ZdLCBlID0gdWIoaCwgZCwgITEsIGEpICYmIGU7IHJldHVybiBlOyB9O1xyXG5nLkMgPSBmdW5jdGlvbiAoKSB7IEIuTS5DLmNhbGwodGhpcyk7IGlmICh0aGlzLmMpIHtcclxuICAgIHZhciBhID0gdGhpcy5jLCBjO1xyXG4gICAgZm9yIChjIGluIGEuYSkge1xyXG4gICAgICAgIGZvciAodmFyIGQgPSBhLmFbY10sIGUgPSAwOyBlIDwgZC5sZW5ndGg7IGUrKylcclxuICAgICAgICAgICAgYmIoZFtlXSk7XHJcbiAgICAgICAgZGVsZXRlIGEuYVtjXTtcclxuICAgICAgICBhLmItLTtcclxuICAgIH1cclxufSB0aGlzLkEgPSBudWxsOyB9O1xyXG5nLnJhID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIHRoaXMuYy5hZGQoU3RyaW5nKGEpLCBiLCAhMSwgYywgZCk7IH07XHJcbmcuc2EgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gdGhpcy5jLmFkZChTdHJpbmcoYSksIGIsICEwLCBjLCBkKTsgfTtcclxuZnVuY3Rpb24gdWIoYSwgYiwgYywgZCkgeyBiID0gYS5jLmFbU3RyaW5nKGIpXTsgaWYgKCFiKVxyXG4gICAgcmV0dXJuICEwOyBiID0gYi5jb25jYXQoKTsgZm9yICh2YXIgZSA9ICEwLCBmID0gMDsgZiA8IGIubGVuZ3RoOyArK2YpIHtcclxuICAgIHZhciBoID0gYltmXTtcclxuICAgIGlmIChoICYmICFoLlYgJiYgaC5jYXB0dXJlID09IGMpIHtcclxuICAgICAgICB2YXIgbCA9IGgubGlzdGVuZXIsIHAgPSBoLmFhIHx8IGguc3JjO1xyXG4gICAgICAgIGguWCAmJiBlYihhLmMsIGgpO1xyXG4gICAgICAgIGUgPSAhMSAhPT0gbC5jYWxsKHAsIGQpICYmIGU7XHJcbiAgICB9XHJcbn0gcmV0dXJuIGUgJiYgIWQuZGVmYXVsdFByZXZlbnRlZDsgfVxyXG52YXIgdmIgPSBrLkpTT04uc3RyaW5naWZ5O1xyXG5mdW5jdGlvbiB3YigpIHsgdGhpcy5iID0gdGhpcy5hID0gbnVsbDsgfVxyXG52YXIgeWIgPSBuZXcgLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gY2xhc3NfMShhLCBiLCBjKSB7XHJcbiAgICAgICAgdGhpcy5mID0gYztcclxuICAgICAgICB0aGlzLmMgPSBhO1xyXG4gICAgICAgIHRoaXMuZyA9IGI7XHJcbiAgICAgICAgdGhpcy5iID0gMDtcclxuICAgICAgICB0aGlzLmEgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgY2xhc3NfMS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkgeyB2YXIgYTsgMCA8IHRoaXMuYiA/ICh0aGlzLmItLSwgYSA9IHRoaXMuYSwgdGhpcy5hID0gYS5uZXh0LCBhLm5leHQgPSBudWxsKSA6IGEgPSB0aGlzLmMoKTsgcmV0dXJuIGE7IH07XHJcbiAgICByZXR1cm4gY2xhc3NfMTtcclxufSgpKShmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgeGI7IH0sIGZ1bmN0aW9uIChhKSB7IGEucmVzZXQoKTsgfSwgMTAwKTtcclxud2IucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChhLCBiKSB7IHZhciBjID0geWIuZ2V0KCk7IGMuc2V0KGEsIGIpOyB0aGlzLmIgPyB0aGlzLmIubmV4dCA9IGMgOiB0aGlzLmEgPSBjOyB0aGlzLmIgPSBjOyB9O1xyXG5mdW5jdGlvbiB6YigpIHsgdmFyIGEgPSBBYiwgYiA9IG51bGw7IGEuYSAmJiAoYiA9IGEuYSwgYS5hID0gYS5hLm5leHQsIGEuYSB8fCAoYS5iID0gbnVsbCksIGIubmV4dCA9IG51bGwpOyByZXR1cm4gYjsgfVxyXG5mdW5jdGlvbiB4YigpIHsgdGhpcy5uZXh0ID0gdGhpcy5iID0gdGhpcy5hID0gbnVsbDsgfVxyXG54Yi5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGEsIGIpIHsgdGhpcy5hID0gYTsgdGhpcy5iID0gYjsgdGhpcy5uZXh0ID0gbnVsbDsgfTtcclxueGIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkgeyB0aGlzLm5leHQgPSB0aGlzLmIgPSB0aGlzLmEgPSBudWxsOyB9O1xyXG5mdW5jdGlvbiBCYihhKSB7IGsuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHRocm93IGE7IH0sIDApOyB9XHJcbmZ1bmN0aW9uIENiKGEsIGIpIHsgRGIgfHwgRWIoKTsgRmIgfHwgKERiKCksIEZiID0gITApOyBBYi5hZGQoYSwgYik7IH1cclxudmFyIERiO1xyXG5mdW5jdGlvbiBFYigpIHsgdmFyIGEgPSBrLlByb21pc2UucmVzb2x2ZSh2b2lkIDApOyBEYiA9IGZ1bmN0aW9uICgpIHsgYS50aGVuKEdiKTsgfTsgfVxyXG52YXIgRmIgPSAhMSwgQWIgPSBuZXcgd2I7XHJcbmZ1bmN0aW9uIEdiKCkgeyBmb3IgKHZhciBhOyBhID0gemIoKTspIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgYS5hLmNhbGwoYS5iKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChjKSB7XHJcbiAgICAgICAgQmIoYyk7XHJcbiAgICB9XHJcbiAgICB2YXIgYiA9IHliO1xyXG4gICAgYi5nKGEpO1xyXG4gICAgYi5iIDwgYi5mICYmIChiLmIrKywgYS5uZXh0ID0gYi5hLCBiLmEgPSBhKTtcclxufSBGYiA9ICExOyB9XHJcbmZ1bmN0aW9uIEhiKGEsIGIpIHsgQi5jYWxsKHRoaXMpOyB0aGlzLmIgPSBhIHx8IDE7IHRoaXMuYSA9IGIgfHwgazsgdGhpcy5mID0gbih0aGlzLlVhLCB0aGlzKTsgdGhpcy5nID0gcSgpOyB9XHJcbnIoSGIsIEIpO1xyXG5nID0gSGIucHJvdG90eXBlO1xyXG5nLlogPSAhMTtcclxuZy5MID0gbnVsbDtcclxuZy5VYSA9IGZ1bmN0aW9uICgpIHsgaWYgKHRoaXMuWikge1xyXG4gICAgdmFyIGEgPSBxKCkgLSB0aGlzLmc7XHJcbiAgICAwIDwgYSAmJiBhIDwgLjggKiB0aGlzLmIgPyB0aGlzLkwgPSB0aGlzLmEuc2V0VGltZW91dCh0aGlzLmYsIHRoaXMuYiAtIGEpIDogKHRoaXMuTCAmJiAodGhpcy5hLmNsZWFyVGltZW91dCh0aGlzLkwpLCB0aGlzLkwgPSBudWxsKSwgdGhpcy5kaXNwYXRjaEV2ZW50KFwidGlja1wiKSwgdGhpcy5aICYmIChJYih0aGlzKSwgdGhpcy5zdGFydCgpKSk7XHJcbn0gfTtcclxuZy5zdGFydCA9IGZ1bmN0aW9uICgpIHsgdGhpcy5aID0gITA7IHRoaXMuTCB8fCAodGhpcy5MID0gdGhpcy5hLnNldFRpbWVvdXQodGhpcy5mLCB0aGlzLmIpLCB0aGlzLmcgPSBxKCkpOyB9O1xyXG5mdW5jdGlvbiBJYihhKSB7IGEuWiA9ICExOyBhLkwgJiYgKGEuYS5jbGVhclRpbWVvdXQoYS5MKSwgYS5MID0gbnVsbCk7IH1cclxuZy5DID0gZnVuY3Rpb24gKCkgeyBIYi5NLkMuY2FsbCh0aGlzKTsgSWIodGhpcyk7IGRlbGV0ZSB0aGlzLmE7IH07XHJcbmZ1bmN0aW9uIEpiKGEsIGIsIGMpIHsgaWYgKFwiZnVuY3Rpb25cIiA9PSBiYShhKSlcclxuICAgIGMgJiYgKGEgPSBuKGEsIGMpKTtcclxuZWxzZSBpZiAoYSAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGEuaGFuZGxlRXZlbnQpXHJcbiAgICBhID0gbihhLmhhbmRsZUV2ZW50LCBhKTtcclxuZWxzZVxyXG4gICAgdGhyb3cgRXJyb3IoXCJJbnZhbGlkIGxpc3RlbmVyIGFyZ3VtZW50XCIpOyByZXR1cm4gMjE0NzQ4MzY0NyA8IE51bWJlcihiKSA/IC0xIDogay5zZXRUaW1lb3V0KGEsIGIgfHwgMCk7IH1cclxuZnVuY3Rpb24gS2IoYSwgYiwgYykgeyB0LmNhbGwodGhpcyk7IHRoaXMuZiA9IG51bGwgIT0gYyA/IG4oYSwgYykgOiBhOyB0aGlzLmMgPSBiOyB0aGlzLmIgPSBuKHRoaXMuUGEsIHRoaXMpOyB0aGlzLmEgPSBbXTsgfVxyXG5yKEtiLCB0KTtcclxuZyA9IEtiLnByb3RvdHlwZTtcclxuZy5iYSA9ICExO1xyXG5nLlQgPSBudWxsO1xyXG5nLklhID0gZnVuY3Rpb24gKGEpIHsgdGhpcy5hID0gYXJndW1lbnRzOyB0aGlzLlQgPyB0aGlzLmJhID0gITAgOiBMYih0aGlzKTsgfTtcclxuZy5DID0gZnVuY3Rpb24gKCkgeyBLYi5NLkMuY2FsbCh0aGlzKTsgdGhpcy5UICYmIChrLmNsZWFyVGltZW91dCh0aGlzLlQpLCB0aGlzLlQgPSBudWxsLCB0aGlzLmJhID0gITEsIHRoaXMuYSA9IFtdKTsgfTtcclxuZy5QYSA9IGZ1bmN0aW9uICgpIHsgdGhpcy5UID0gbnVsbDsgdGhpcy5iYSAmJiAodGhpcy5iYSA9ICExLCBMYih0aGlzKSk7IH07XHJcbmZ1bmN0aW9uIExiKGEpIHsgYS5UID0gSmIoYS5iLCBhLmMpOyBhLmYuYXBwbHkobnVsbCwgYS5hKTsgfVxyXG5mdW5jdGlvbiBDKGEpIHsgdC5jYWxsKHRoaXMpOyB0aGlzLmIgPSBhOyB0aGlzLmEgPSB7fTsgfVxyXG5yKEMsIHQpO1xyXG52YXIgTWIgPSBbXTtcclxuZnVuY3Rpb24gTmIoYSwgYiwgYywgZCkgeyBBcnJheS5pc0FycmF5KGMpIHx8IChjICYmIChNYlswXSA9IGMudG9TdHJpbmcoKSksIGMgPSBNYik7IGZvciAodmFyIGUgPSAwOyBlIDwgYy5sZW5ndGg7IGUrKykge1xyXG4gICAgdmFyIGYgPSBpYihiLCBjW2VdLCBkIHx8IGEuaGFuZGxlRXZlbnQsICExLCBhLmIgfHwgYSk7XHJcbiAgICBpZiAoIWYpXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICBhLmFbZi5rZXldID0gZjtcclxufSB9XHJcbmZ1bmN0aW9uIE9iKGEpIHsgQmEoYS5hLCBmdW5jdGlvbiAoYiwgYykgeyB0aGlzLmEuaGFzT3duUHJvcGVydHkoYykgJiYgcmIoYik7IH0sIGEpOyBhLmEgPSB7fTsgfVxyXG5DLnByb3RvdHlwZS5DID0gZnVuY3Rpb24gKCkgeyBDLk0uQy5jYWxsKHRoaXMpOyBPYih0aGlzKTsgfTtcclxuQy5wcm90b3R5cGUuaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiAoKSB7IHRocm93IEVycm9yKFwiRXZlbnRIYW5kbGVyLmhhbmRsZUV2ZW50IG5vdCBpbXBsZW1lbnRlZFwiKTsgfTtcclxuZnVuY3Rpb24gUGIoKSB7IH1cclxudmFyIFFiID0gbnVsbDtcclxuZnVuY3Rpb24gUmIoKSB7IHJldHVybiBRYiA9IFFiIHx8IG5ldyBCOyB9XHJcbmZ1bmN0aW9uIFNiKGEpIHsgeC5jYWxsKHRoaXMsIFwic2VydmVycmVhY2hhYmlsaXR5XCIsIGEpOyB9XHJcbnIoU2IsIHgpO1xyXG5mdW5jdGlvbiBFKGEpIHsgdmFyIGIgPSBSYigpOyBiLmRpc3BhdGNoRXZlbnQobmV3IFNiKGIsIGEpKTsgfVxyXG5mdW5jdGlvbiBUYihhKSB7IHguY2FsbCh0aGlzLCBcInN0YXRldmVudFwiLCBhKTsgfVxyXG5yKFRiLCB4KTtcclxuZnVuY3Rpb24gRihhKSB7IHZhciBiID0gUmIoKTsgYi5kaXNwYXRjaEV2ZW50KG5ldyBUYihiLCBhKSk7IH1cclxuZnVuY3Rpb24gVWIoYSkgeyB4LmNhbGwodGhpcywgXCJ0aW1pbmdldmVudFwiLCBhKTsgfVxyXG5yKFViLCB4KTtcclxuZnVuY3Rpb24gVmIoYSwgYikgeyBpZiAoXCJmdW5jdGlvblwiICE9IGJhKGEpKVxyXG4gICAgdGhyb3cgRXJyb3IoXCJGbiBtdXN0IG5vdCBiZSBudWxsIGFuZCBtdXN0IGJlIGEgZnVuY3Rpb25cIik7IHJldHVybiBrLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyBhKCk7IH0sIGIpOyB9XHJcbnZhciBXYiA9IHsgTk9fRVJST1I6IDAsIFZhOiAxLCBiYjogMiwgYWI6IDMsIFlhOiA0LCAkYTogNSwgY2I6IDYsIHphOiA3LCBUSU1FT1VUOiA4LCBnYjogOSB9O1xyXG52YXIgWGIgPSB7IFhhOiBcImNvbXBsZXRlXCIsIGtiOiBcInN1Y2Nlc3NcIiwgQWE6IFwiZXJyb3JcIiwgemE6IFwiYWJvcnRcIiwgaWI6IFwicmVhZHlcIiwgamI6IFwicmVhZHlzdGF0ZWNoYW5nZVwiLCBUSU1FT1VUOiBcInRpbWVvdXRcIiwgZWI6IFwiaW5jcmVtZW50YWxkYXRhXCIsIGhiOiBcInByb2dyZXNzXCIsIFphOiBcImRvd25sb2FkcHJvZ3Jlc3NcIiwgbGI6IFwidXBsb2FkcHJvZ3Jlc3NcIiB9O1xyXG5mdW5jdGlvbiBZYigpIHsgfVxyXG5ZYi5wcm90b3R5cGUuYSA9IG51bGw7XHJcbmZ1bmN0aW9uIFpiKGEpIHsgdmFyIGI7IChiID0gYS5hKSB8fCAoYiA9IGEuYSA9IHt9KTsgcmV0dXJuIGI7IH1cclxuZnVuY3Rpb24gJGIoKSB7IH1cclxudmFyIEcgPSB7IE9QRU46IFwiYVwiLCBXYTogXCJiXCIsIEFhOiBcImNcIiwgZmI6IFwiZFwiIH07XHJcbmZ1bmN0aW9uIGFjKCkgeyB4LmNhbGwodGhpcywgXCJkXCIpOyB9XHJcbnIoYWMsIHgpO1xyXG5mdW5jdGlvbiBiYygpIHsgeC5jYWxsKHRoaXMsIFwiY1wiKTsgfVxyXG5yKGJjLCB4KTtcclxudmFyIGNjO1xyXG5mdW5jdGlvbiBkYygpIHsgfVxyXG5yKGRjLCBZYik7XHJcbmNjID0gbmV3IGRjO1xyXG5mdW5jdGlvbiBIKGEsIGIsIGMpIHsgdGhpcy5nID0gYTsgdGhpcy5XID0gYjsgdGhpcy5VID0gYyB8fCAxOyB0aGlzLkcgPSBuZXcgQyh0aGlzKTsgdGhpcy5OID0gZWM7IGEgPSBLYSA/IDEyNSA6IHZvaWQgMDsgdGhpcy5PID0gbmV3IEhiKGEpOyB0aGlzLm0gPSBudWxsOyB0aGlzLmIgPSAhMTsgdGhpcy5qID0gdGhpcy5BID0gdGhpcy5mID0gdGhpcy5CID0gdGhpcy5zID0gdGhpcy5QID0gdGhpcy5oID0gbnVsbDsgdGhpcy5pID0gW107IHRoaXMuYSA9IG51bGw7IHRoaXMudyA9IDA7IHRoaXMuYyA9IHRoaXMudiA9IG51bGw7IHRoaXMuSCA9IC0xOyB0aGlzLmwgPSAhMTsgdGhpcy5KID0gMDsgdGhpcy5EID0gbnVsbDsgdGhpcy5vID0gdGhpcy5SID0gdGhpcy5GID0gITE7IH1cclxudmFyIGVjID0gNDVFMywgZmMgPSB7fSwgZ2MgPSB7fTtcclxuZyA9IEgucHJvdG90eXBlO1xyXG5nLnNldFRpbWVvdXQgPSBmdW5jdGlvbiAoYSkgeyB0aGlzLk4gPSBhOyB9O1xyXG5mdW5jdGlvbiBoYyhhLCBiLCBjKSB7IGEuQiA9IDE7IGEuZiA9IGljKEkoYikpOyBhLmogPSBjOyBhLkYgPSAhMDsgamMoYSwgbnVsbCk7IH1cclxuZnVuY3Rpb24gamMoYSwgYikgeyBhLnMgPSBxKCk7IEooYSk7IGEuQSA9IEkoYS5mKTsgdmFyIGMgPSBhLkEsIGQgPSBhLlU7IEFycmF5LmlzQXJyYXkoZCkgfHwgKGQgPSBbU3RyaW5nKGQpXSk7IGtjKGMuYiwgXCJ0XCIsIGQpOyBhLncgPSAwOyBhLmEgPSBsYyhhLmcsIGEuZy53ID8gYiA6IG51bGwpOyAwIDwgYS5KICYmIChhLkQgPSBuZXcgS2IobihhLnlhLCBhLCBhLmEpLCBhLkopKTsgTmIoYS5HLCBhLmEsIFwicmVhZHlzdGF0ZWNoYW5nZVwiLCBhLlNhKTsgYiA9IGEubSA/IENhKGEubSkgOiB7fTsgYS5qID8gKGEudiB8fCAoYS52ID0gXCJQT1NUXCIpLCBiW1wiQ29udGVudC1UeXBlXCJdID0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiwgYS5hLiQoYS5BLCBhLnYsIGEuaiwgYikpIDogKGEudiA9IFwiR0VUXCIsIGEuYS4kKGEuQSwgYS52LCBudWxsLCBiKSk7IEUoMSk7IH1cclxuZy5TYSA9IGZ1bmN0aW9uIChhKSB7IGEgPSBhLnRhcmdldDsgdmFyIGIgPSB0aGlzLkQ7IGIgJiYgMyA9PSBLKGEpID8gYi5JYSgpIDogdGhpcy55YShhKTsgfTtcclxuZy55YSA9IGZ1bmN0aW9uIChhKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGlmIChhID09IHRoaXMuYSlcclxuICAgICAgICAgICAgYToge1xyXG4gICAgICAgICAgICAgICAgdmFyIGIgPSBLKHRoaXMuYSksIGMgPSB0aGlzLmEucWEoKSwgZCA9IHRoaXMuYS5TKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoISgzID4gYiB8fCAzID09IGIgJiYgIUthICYmICF0aGlzLmEuWSgpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubCB8fCA0ICE9IGIgfHwgNyA9PSBjIHx8ICg4ID09IGMgfHwgMCA+PSBkID8gRSgzKSA6IEUoMikpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1jKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5hLlMoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkggPSBlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmID0gdGhpcy5hLlkoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5iID0gMjAwID09IGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuUiAmJiAhdGhpcy5vKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaCwgbCA9IHRoaXMuYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChoID0gbC5hID8gbC5hLmdldFJlc3BvbnNlSGVhZGVyKFwiWC1IVFRQLUluaXRpYWwtUmVzcG9uc2VcIikgOiBudWxsKSAmJiAhd2EoaCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwID0gaDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm8gPSAhMCwgbmModGhpcywgcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmIgPSAhMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmMgPSAzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEYoMTIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGModGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkYgPyAocWModGhpcywgYiwgZiksIEthICYmIHRoaXMuYiAmJiAzID09IGIgJiYgKE5iKHRoaXMuRywgdGhpcy5PLCBcInRpY2tcIiwgdGhpcy5SYSksIHRoaXMuTy5zdGFydCgpKSkgOiBuYyh0aGlzLCBmKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgNCA9PSBiICYmIEwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYiAmJiAhdGhpcy5sICYmICg0ID09IGIgPyByYyh0aGlzLmcsIHRoaXMpIDogKHRoaXMuYiA9ICExLCBKKHRoaXMpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgNDAwID09IGUgJiYgMCA8IGYuaW5kZXhPZihcIlVua25vd24gU0lEXCIpID8gKHRoaXMuYyA9IDMsIEYoMTIpKSA6ICh0aGlzLmMgPSAwLCBGKDEzKSksIEwodGhpcyksIHBjKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoRCkgeyB9XHJcbiAgICBmaW5hbGx5IHsgfVxyXG59O1xyXG5mdW5jdGlvbiBxYyhhLCBiLCBjKSB7IGZvciAodmFyIGQgPSAhMDsgIWEubCAmJiBhLncgPCBjLmxlbmd0aDspIHtcclxuICAgIHZhciBlID0gdGMoYSwgYyk7XHJcbiAgICBpZiAoZSA9PSBnYykge1xyXG4gICAgICAgIDQgPT0gYiAmJiAoYS5jID0gNCwgRigxNCksIGQgPSAhMSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChlID09IGZjKSB7XHJcbiAgICAgICAgYS5jID0gNDtcclxuICAgICAgICBGKDE1KTtcclxuICAgICAgICBkID0gITE7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICBlbHNlXHJcbiAgICAgICAgbmMoYSwgZSk7XHJcbn0gNCA9PSBiICYmIDAgPT0gYy5sZW5ndGggJiYgKGEuYyA9IDEsIEYoMTYpLCBkID0gITEpOyBhLmIgPSBhLmIgJiYgZDsgZCB8fCAoTChhKSwgcGMoYSkpOyB9XHJcbmcuUmEgPSBmdW5jdGlvbiAoKSB7IGlmICh0aGlzLmEpIHtcclxuICAgIHZhciBhID0gSyh0aGlzLmEpLCBiID0gdGhpcy5hLlkoKTtcclxuICAgIHRoaXMudyA8IGIubGVuZ3RoICYmIChtYyh0aGlzKSwgcWModGhpcywgYSwgYiksIHRoaXMuYiAmJiA0ICE9IGEgJiYgSih0aGlzKSk7XHJcbn0gfTtcclxuZnVuY3Rpb24gdGMoYSwgYikgeyB2YXIgYyA9IGEudywgZCA9IGIuaW5kZXhPZihcIlxcblwiLCBjKTsgaWYgKC0xID09IGQpXHJcbiAgICByZXR1cm4gZ2M7IGMgPSBOdW1iZXIoYi5zdWJzdHJpbmcoYywgZCkpOyBpZiAoaXNOYU4oYykpXHJcbiAgICByZXR1cm4gZmM7IGQgKz0gMTsgaWYgKGQgKyBjID4gYi5sZW5ndGgpXHJcbiAgICByZXR1cm4gZ2M7IGIgPSBiLnN1YnN0cihkLCBjKTsgYS53ID0gZCArIGM7IHJldHVybiBiOyB9XHJcbmcuY2FuY2VsID0gZnVuY3Rpb24gKCkgeyB0aGlzLmwgPSAhMDsgTCh0aGlzKTsgfTtcclxuZnVuY3Rpb24gSihhKSB7IGEuUCA9IHEoKSArIGEuTjsgdWMoYSwgYS5OKTsgfVxyXG5mdW5jdGlvbiB1YyhhLCBiKSB7IGlmIChudWxsICE9IGEuaClcclxuICAgIHRocm93IEVycm9yKFwiV2F0Y2hEb2cgdGltZXIgbm90IG51bGxcIik7IGEuaCA9IFZiKG4oYS5RYSwgYSksIGIpOyB9XHJcbmZ1bmN0aW9uIG1jKGEpIHsgYS5oICYmIChrLmNsZWFyVGltZW91dChhLmgpLCBhLmggPSBudWxsKTsgfVxyXG5nLlFhID0gZnVuY3Rpb24gKCkgeyB0aGlzLmggPSBudWxsOyB2YXIgYSA9IHEoKTsgMCA8PSBhIC0gdGhpcy5QID8gKDIgIT0gdGhpcy5CICYmIChFKDMpLCBGKDE3KSksIEwodGhpcyksIHRoaXMuYyA9IDIsIHBjKHRoaXMpKSA6IHVjKHRoaXMsIHRoaXMuUCAtIGEpOyB9O1xyXG5mdW5jdGlvbiBwYyhhKSB7IDAgPT0gYS5nLnUgfHwgYS5sIHx8IHJjKGEuZywgYSk7IH1cclxuZnVuY3Rpb24gTChhKSB7IG1jKGEpOyB2YXIgYiA9IGEuRDsgYiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGIuZGEgJiYgYi5kYSgpOyBhLkQgPSBudWxsOyBJYihhLk8pOyBPYihhLkcpOyBhLmEgJiYgKGIgPSBhLmEsIGEuYSA9IG51bGwsIGIuYWJvcnQoKSwgYi5kYSgpKTsgfVxyXG5mdW5jdGlvbiBuYyhhLCBiKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHZhciBjID0gYS5nO1xyXG4gICAgICAgIGlmICgwICE9IGMudSAmJiAoYy5hID09IGEgfHwgdmMoYy5iLCBhKSkpXHJcbiAgICAgICAgICAgIGlmIChjLkEgPSBhLkgsICFhLm8gJiYgdmMoYy5iLCBhKSAmJiAzID09IGMudSkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGMuamEuYS5wYXJzZShiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChvYykge1xyXG4gICAgICAgICAgICAgICAgICAgIGQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZCkgJiYgMyA9PSBkLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlID0gZDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PSBlWzBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWMuaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjLmEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjLmEucyArIDNFMyA8IGEucylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdjKGMpLCBjLmEuY2FuY2VsKCksIGMuYSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeGMoYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRigxOCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGMuaWEgPSBlWzFdLCAwIDwgYy5pYSAtIGMuRyAmJiAzNzUwMCA+IGVbMl0gJiYgYy5VICYmIDAgPT0gYy5tICYmICFjLmwgJiYgKGMubCA9IFZiKG4oYy5OYSwgYyksIDZFMykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgxID49IHljKGMuYikgJiYgYy5PKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLk8oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAob2MpIHsgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjLk8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIE0oYywgMTEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKChhLm8gfHwgYy5hID09IGEpICYmIHdjKGMpLCAhd2EoYikpXHJcbiAgICAgICAgICAgICAgICBmb3IgKGIgPSBkID0gYy5qYS5hLnBhcnNlKGIpLCBkID0gMDsgZCA8IGIubGVuZ3RoOyBkKyspXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiW2RdLCBjLkcgPSBlWzBdLCBlID0gZVsxXSwgMiA9PSBjLnUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcImNcIiA9PSBlWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLkIgPSBlWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5SID0gZVsyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmID0gZVszXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgIT0gZiAmJiAoYy5vYSA9IGYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGggPSBlWzVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCAhPSBoICYmIFwibnVtYmVyXCIgPT09IHR5cGVvZiBoICYmIDAgPCBoICYmIChjLkQgPSAxLjUgKiBoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsID0gYywgcCA9IGEuYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIEQgPSBwLmEgPyBwLmEuZ2V0UmVzcG9uc2VIZWFkZXIoXCJYLUNsaWVudC1XaXJlLVByb3RvY29sXCIpIDogbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoRCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeiA9IGwuYjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIXouYSAmJiAodShELCBcInNwZHlcIikgfHwgdShELCBcInF1aWNcIikgfHwgdShELCBcImgyXCIpKSAmJiAoei5mID0gei5nLCB6LmEgPSBuZXcgU2V0LCB6LmIgJiYgKHpjKHosIHouYiksIHouYiA9IG51bGwpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGwucykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGEgPSBwLmEgPyBwLmEuZ2V0UmVzcG9uc2VIZWFkZXIoXCJYLUhUVFAtU2Vzc2lvbi1JZFwiKSA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhICYmIChsLmhhID0gdGEsIE4obC52LCBsLnMsIHRhKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYy51ID0gMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuYyAmJiBjLmMubmEoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSBjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVhID0gYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwuZWEgPSBBYyhsLCBsLncgPyBsLlIgOiBudWxsLCBsLlApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVhLm8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCYyhsLmIsIHVhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmEgPSB1YSwgc2MgPSBsLkQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2MgJiYgdmEuc2V0VGltZW91dChzYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmEuaCAmJiAobWModmEpLCBKKHZhKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbC5hID0gdWE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2MobCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwIDwgYy5mLmxlbmd0aCAmJiBEYyhjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN0b3BcIiAhPSBlWzBdICYmIFwiY2xvc2VcIiAhPSBlWzBdIHx8IE0oYywgNyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAzID09IGMudSAmJiAoXCJzdG9wXCIgPT0gZVswXSB8fCBcImNsb3NlXCIgPT0gZVswXSA/IFwic3RvcFwiID09IGVbMF0gPyBNKGMsIDcpIDogRWMoYykgOiBcIm5vb3BcIiAhPSBlWzBdICYmIGMuYyAmJiBjLmMubWEoZSksIGMubSA9IDApO1xyXG4gICAgICAgIEUoNCk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAob2MpIHsgfVxyXG59XHJcbmZ1bmN0aW9uIEZjKGEpIHsgaWYgKGEuSSAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGEuSSlcclxuICAgIHJldHVybiBhLkkoKTsgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBhKVxyXG4gICAgcmV0dXJuIGEuc3BsaXQoXCJcIik7IGlmIChkYShhKSkge1xyXG4gICAgZm9yICh2YXIgYiA9IFtdLCBjID0gYS5sZW5ndGgsIGQgPSAwOyBkIDwgYzsgZCsrKVxyXG4gICAgICAgIGIucHVzaChhW2RdKTtcclxuICAgIHJldHVybiBiO1xyXG59IGIgPSBbXTsgYyA9IDA7IGZvciAoZCBpbiBhKVxyXG4gICAgYltjKytdID0gYVtkXTsgcmV0dXJuIGEgPSBiOyB9XHJcbmZ1bmN0aW9uIEdjKGEsIGIpIHsgaWYgKGEuZm9yRWFjaCAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGEuZm9yRWFjaClcclxuICAgIGEuZm9yRWFjaChiLCB2b2lkIDApO1xyXG5lbHNlIGlmIChkYShhKSB8fCBcInN0cmluZ1wiID09PSB0eXBlb2YgYSlcclxuICAgIG9hKGEsIGIsIHZvaWQgMCk7XHJcbmVsc2Uge1xyXG4gICAgaWYgKGEuSyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGEuSylcclxuICAgICAgICB2YXIgYyA9IGEuSygpO1xyXG4gICAgZWxzZSBpZiAoYS5JICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgYS5JKVxyXG4gICAgICAgIGMgPSB2b2lkIDA7XHJcbiAgICBlbHNlIGlmIChkYShhKSB8fCBcInN0cmluZ1wiID09PSB0eXBlb2YgYSkge1xyXG4gICAgICAgIGMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBkID0gYS5sZW5ndGgsIGUgPSAwOyBlIDwgZDsgZSsrKVxyXG4gICAgICAgICAgICBjLnB1c2goZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlXHJcbiAgICAgICAgZm9yIChlIGluIGMgPSBbXSwgZCA9IDAsIGEpXHJcbiAgICAgICAgICAgIGNbZCsrXSA9IGU7XHJcbiAgICBkID0gRmMoYSk7XHJcbiAgICBlID0gZC5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciBmID0gMDsgZiA8IGU7IGYrKylcclxuICAgICAgICBiLmNhbGwodm9pZCAwLCBkW2ZdLCBjICYmIGNbZl0sIGEpO1xyXG59IH1cclxuZnVuY3Rpb24gTyhhLCBiKSB7IHRoaXMuYiA9IHt9OyB0aGlzLmEgPSBbXTsgdGhpcy5jID0gMDsgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoOyBpZiAoMSA8IGMpIHtcclxuICAgIGlmIChjICUgMilcclxuICAgICAgICB0aHJvdyBFcnJvcihcIlVuZXZlbiBudW1iZXIgb2YgYXJndW1lbnRzXCIpO1xyXG4gICAgZm9yICh2YXIgZCA9IDA7IGQgPCBjOyBkICs9IDIpXHJcbiAgICAgICAgdGhpcy5zZXQoYXJndW1lbnRzW2RdLCBhcmd1bWVudHNbZCArIDFdKTtcclxufVxyXG5lbHNlIGlmIChhKVxyXG4gICAgaWYgKGEgaW5zdGFuY2VvZiBPKVxyXG4gICAgICAgIGZvciAoYyA9IGEuSygpLCBkID0gMDsgZCA8IGMubGVuZ3RoOyBkKyspXHJcbiAgICAgICAgICAgIHRoaXMuc2V0KGNbZF0sIGEuZ2V0KGNbZF0pKTtcclxuICAgIGVsc2VcclxuICAgICAgICBmb3IgKGQgaW4gYSlcclxuICAgICAgICAgICAgdGhpcy5zZXQoZCwgYVtkXSk7IH1cclxuZyA9IE8ucHJvdG90eXBlO1xyXG5nLkkgPSBmdW5jdGlvbiAoKSB7IEhjKHRoaXMpOyBmb3IgKHZhciBhID0gW10sIGIgPSAwOyBiIDwgdGhpcy5hLmxlbmd0aDsgYisrKVxyXG4gICAgYS5wdXNoKHRoaXMuYlt0aGlzLmFbYl1dKTsgcmV0dXJuIGE7IH07XHJcbmcuSyA9IGZ1bmN0aW9uICgpIHsgSGModGhpcyk7IHJldHVybiB0aGlzLmEuY29uY2F0KCk7IH07XHJcbmZ1bmN0aW9uIEhjKGEpIHsgaWYgKGEuYyAhPSBhLmEubGVuZ3RoKSB7XHJcbiAgICBmb3IgKHZhciBiID0gMCwgYyA9IDA7IGIgPCBhLmEubGVuZ3RoOykge1xyXG4gICAgICAgIHZhciBkID0gYS5hW2JdO1xyXG4gICAgICAgIFAoYS5iLCBkKSAmJiAoYS5hW2MrK10gPSBkKTtcclxuICAgICAgICBiKys7XHJcbiAgICB9XHJcbiAgICBhLmEubGVuZ3RoID0gYztcclxufSBpZiAoYS5jICE9IGEuYS5sZW5ndGgpIHtcclxuICAgIHZhciBlID0ge307XHJcbiAgICBmb3IgKGMgPSBiID0gMDsgYiA8IGEuYS5sZW5ndGg7KVxyXG4gICAgICAgIGQgPSBhLmFbYl0sIFAoZSwgZCkgfHwgKGEuYVtjKytdID0gZCwgZVtkXSA9IDEpLCBiKys7XHJcbiAgICBhLmEubGVuZ3RoID0gYztcclxufSB9XHJcbmcuZ2V0ID0gZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIFAodGhpcy5iLCBhKSA/IHRoaXMuYlthXSA6IGI7IH07XHJcbmcuc2V0ID0gZnVuY3Rpb24gKGEsIGIpIHsgUCh0aGlzLmIsIGEpIHx8ICh0aGlzLmMrKywgdGhpcy5hLnB1c2goYSkpOyB0aGlzLmJbYV0gPSBiOyB9O1xyXG5nLmZvckVhY2ggPSBmdW5jdGlvbiAoYSwgYikgeyBmb3IgKHZhciBjID0gdGhpcy5LKCksIGQgPSAwOyBkIDwgYy5sZW5ndGg7IGQrKykge1xyXG4gICAgdmFyIGUgPSBjW2RdLCBmID0gdGhpcy5nZXQoZSk7XHJcbiAgICBhLmNhbGwoYiwgZiwgZSwgdGhpcyk7XHJcbn0gfTtcclxuZnVuY3Rpb24gUChhLCBiKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSwgYik7IH1cclxudmFyIEljID0gL14oPzooW146Lz8jLl0rKTopPyg/OlxcL1xcLyg/OihbXlxcXFwvPyNdKilAKT8oW15cXFxcLz8jXSo/KSg/OjooWzAtOV0rKSk/KD89W1xcXFwvPyNdfCQpKT8oW14/I10rKT8oPzpcXD8oW14jXSopKT8oPzojKFtcXHNcXFNdKikpPyQvO1xyXG5mdW5jdGlvbiBKYyhhLCBiKSB7IGlmIChhKSB7XHJcbiAgICBhID0gYS5zcGxpdChcIiZcIik7XHJcbiAgICBmb3IgKHZhciBjID0gMDsgYyA8IGEubGVuZ3RoOyBjKyspIHtcclxuICAgICAgICB2YXIgZCA9IGFbY10uaW5kZXhPZihcIj1cIiksIGUgPSBudWxsO1xyXG4gICAgICAgIGlmICgwIDw9IGQpIHtcclxuICAgICAgICAgICAgdmFyIGYgPSBhW2NdLnN1YnN0cmluZygwLCBkKTtcclxuICAgICAgICAgICAgZSA9IGFbY10uc3Vic3RyaW5nKGQgKyAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBmID0gYVtjXTtcclxuICAgICAgICBiKGYsIGUgPyBkZWNvZGVVUklDb21wb25lbnQoZS5yZXBsYWNlKC9cXCsvZywgXCIgXCIpKSA6IFwiXCIpO1xyXG4gICAgfVxyXG59IH1cclxuZnVuY3Rpb24gUShhLCBiKSB7IHRoaXMuYyA9IHRoaXMuaiA9IHRoaXMuZiA9IFwiXCI7IHRoaXMuaCA9IG51bGw7IHRoaXMuaSA9IHRoaXMuZyA9IFwiXCI7IHRoaXMuYSA9ICExOyBpZiAoYSBpbnN0YW5jZW9mIFEpIHtcclxuICAgIHRoaXMuYSA9IHZvaWQgMCAhPT0gYiA/IGIgOiBhLmE7XHJcbiAgICBLYyh0aGlzLCBhLmYpO1xyXG4gICAgdGhpcy5qID0gYS5qO1xyXG4gICAgTGModGhpcywgYS5jKTtcclxuICAgIE1jKHRoaXMsIGEuaCk7XHJcbiAgICB0aGlzLmcgPSBhLmc7XHJcbiAgICBiID0gYS5iO1xyXG4gICAgdmFyIGMgPSBuZXcgUjtcclxuICAgIGMuYyA9IGIuYztcclxuICAgIGIuYSAmJiAoYy5hID0gbmV3IE8oYi5hKSwgYy5iID0gYi5iKTtcclxuICAgIE5jKHRoaXMsIGMpO1xyXG4gICAgdGhpcy5pID0gYS5pO1xyXG59XHJcbmVsc2VcclxuICAgIGEgJiYgKGMgPSBTdHJpbmcoYSkubWF0Y2goSWMpKSA/ICh0aGlzLmEgPSAhIWIsIEtjKHRoaXMsIGNbMV0gfHwgXCJcIiwgITApLCB0aGlzLmogPSBTKGNbMl0gfHwgXCJcIiksIExjKHRoaXMsIGNbM10gfHwgXCJcIiwgITApLCBNYyh0aGlzLCBjWzRdKSwgdGhpcy5nID0gUyhjWzVdIHx8IFwiXCIsICEwKSwgTmModGhpcywgY1s2XSB8fCBcIlwiLCAhMCksIHRoaXMuaSA9IFMoY1s3XSB8fCBcIlwiKSkgOiAodGhpcy5hID0gISFiLCB0aGlzLmIgPSBuZXcgUihudWxsLCB0aGlzLmEpKTsgfVxyXG5RLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHsgdmFyIGEgPSBbXSwgYiA9IHRoaXMuZjsgYiAmJiBhLnB1c2goVChiLCBPYywgITApLCBcIjpcIik7IHZhciBjID0gdGhpcy5jOyBpZiAoYyB8fCBcImZpbGVcIiA9PSBiKVxyXG4gICAgYS5wdXNoKFwiLy9cIiksIChiID0gdGhpcy5qKSAmJiBhLnB1c2goVChiLCBPYywgITApLCBcIkBcIiksIGEucHVzaChlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGMpKS5yZXBsYWNlKC8lMjUoWzAtOWEtZkEtRl17Mn0pL2csIFwiJSQxXCIpKSwgYyA9IHRoaXMuaCwgbnVsbCAhPSBjICYmIGEucHVzaChcIjpcIiwgU3RyaW5nKGMpKTsgaWYgKGMgPSB0aGlzLmcpXHJcbiAgICB0aGlzLmMgJiYgXCIvXCIgIT0gYy5jaGFyQXQoMCkgJiYgYS5wdXNoKFwiL1wiKSwgYS5wdXNoKFQoYywgXCIvXCIgPT0gYy5jaGFyQXQoMCkgPyBQYyA6IFFjLCAhMCkpOyAoYyA9IHRoaXMuYi50b1N0cmluZygpKSAmJiBhLnB1c2goXCI/XCIsIGMpOyAoYyA9IHRoaXMuaSkgJiYgYS5wdXNoKFwiI1wiLCBUKGMsIFJjKSk7IHJldHVybiBhLmpvaW4oXCJcIik7IH07XHJcbmZ1bmN0aW9uIEkoYSkgeyByZXR1cm4gbmV3IFEoYSk7IH1cclxuZnVuY3Rpb24gS2MoYSwgYiwgYykgeyBhLmYgPSBjID8gUyhiLCAhMCkgOiBiOyBhLmYgJiYgKGEuZiA9IGEuZi5yZXBsYWNlKC86JC8sIFwiXCIpKTsgfVxyXG5mdW5jdGlvbiBMYyhhLCBiLCBjKSB7IGEuYyA9IGMgPyBTKGIsICEwKSA6IGI7IH1cclxuZnVuY3Rpb24gTWMoYSwgYikgeyBpZiAoYikge1xyXG4gICAgYiA9IE51bWJlcihiKTtcclxuICAgIGlmIChpc05hTihiKSB8fCAwID4gYilcclxuICAgICAgICB0aHJvdyBFcnJvcihcIkJhZCBwb3J0IG51bWJlciBcIiArIGIpO1xyXG4gICAgYS5oID0gYjtcclxufVxyXG5lbHNlXHJcbiAgICBhLmggPSBudWxsOyB9XHJcbmZ1bmN0aW9uIE5jKGEsIGIsIGMpIHsgYiBpbnN0YW5jZW9mIFIgPyAoYS5iID0gYiwgU2MoYS5iLCBhLmEpKSA6IChjIHx8IChiID0gVChiLCBUYykpLCBhLmIgPSBuZXcgUihiLCBhLmEpKTsgfVxyXG5mdW5jdGlvbiBOKGEsIGIsIGMpIHsgYS5iLnNldChiLCBjKTsgfVxyXG5mdW5jdGlvbiBpYyhhKSB7IE4oYSwgXCJ6eFwiLCBNYXRoLmZsb29yKDIxNDc0ODM2NDggKiBNYXRoLnJhbmRvbSgpKS50b1N0cmluZygzNikgKyBNYXRoLmFicyhNYXRoLmZsb29yKDIxNDc0ODM2NDggKiBNYXRoLnJhbmRvbSgpKSBeIHEoKSkudG9TdHJpbmcoMzYpKTsgcmV0dXJuIGE7IH1cclxuZnVuY3Rpb24gVWMoYSkgeyByZXR1cm4gYSBpbnN0YW5jZW9mIFEgPyBJKGEpIDogbmV3IFEoYSwgdm9pZCAwKTsgfVxyXG5mdW5jdGlvbiBWYyhhLCBiLCBjLCBkKSB7IHZhciBlID0gbmV3IFEobnVsbCwgdm9pZCAwKTsgYSAmJiBLYyhlLCBhKTsgYiAmJiBMYyhlLCBiKTsgYyAmJiBNYyhlLCBjKTsgZCAmJiAoZS5nID0gZCk7IHJldHVybiBlOyB9XHJcbmZ1bmN0aW9uIFMoYSwgYikgeyByZXR1cm4gYSA/IGIgPyBkZWNvZGVVUkkoYS5yZXBsYWNlKC8lMjUvZywgXCIlMjUyNVwiKSkgOiBkZWNvZGVVUklDb21wb25lbnQoYSkgOiBcIlwiOyB9XHJcbmZ1bmN0aW9uIFQoYSwgYiwgYykgeyByZXR1cm4gXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGEgPyAoYSA9IGVuY29kZVVSSShhKS5yZXBsYWNlKGIsIFdjKSwgYyAmJiAoYSA9IGEucmVwbGFjZSgvJTI1KFswLTlhLWZBLUZdezJ9KS9nLCBcIiUkMVwiKSksIGEpIDogbnVsbDsgfVxyXG5mdW5jdGlvbiBXYyhhKSB7IGEgPSBhLmNoYXJDb2RlQXQoMCk7IHJldHVybiBcIiVcIiArIChhID4+IDQgJiAxNSkudG9TdHJpbmcoMTYpICsgKGEgJiAxNSkudG9TdHJpbmcoMTYpOyB9XHJcbnZhciBPYyA9IC9bI1xcL1xcP0BdL2csIFFjID0gL1sjXFw/Ol0vZywgUGMgPSAvWyNcXD9dL2csIFRjID0gL1sjXFw/QF0vZywgUmMgPSAvIy9nO1xyXG5mdW5jdGlvbiBSKGEsIGIpIHsgdGhpcy5iID0gdGhpcy5hID0gbnVsbDsgdGhpcy5jID0gYSB8fCBudWxsOyB0aGlzLmYgPSAhIWI7IH1cclxuZnVuY3Rpb24gVShhKSB7IGEuYSB8fCAoYS5hID0gbmV3IE8sIGEuYiA9IDAsIGEuYyAmJiBKYyhhLmMsIGZ1bmN0aW9uIChiLCBjKSB7IGEuYWRkKGRlY29kZVVSSUNvbXBvbmVudChiLnJlcGxhY2UoL1xcKy9nLCBcIiBcIikpLCBjKTsgfSkpOyB9XHJcbmcgPSBSLnByb3RvdHlwZTtcclxuZy5hZGQgPSBmdW5jdGlvbiAoYSwgYikgeyBVKHRoaXMpOyB0aGlzLmMgPSBudWxsOyBhID0gVih0aGlzLCBhKTsgdmFyIGMgPSB0aGlzLmEuZ2V0KGEpOyBjIHx8IHRoaXMuYS5zZXQoYSwgYyA9IFtdKTsgYy5wdXNoKGIpOyB0aGlzLmIgKz0gMTsgcmV0dXJuIHRoaXM7IH07XHJcbmZ1bmN0aW9uIFhjKGEsIGIpIHsgVShhKTsgYiA9IFYoYSwgYik7IFAoYS5hLmIsIGIpICYmIChhLmMgPSBudWxsLCBhLmIgLT0gYS5hLmdldChiKS5sZW5ndGgsIGEgPSBhLmEsIFAoYS5iLCBiKSAmJiAoZGVsZXRlIGEuYltiXSwgYS5jLS0sIGEuYS5sZW5ndGggPiAyICogYS5jICYmIEhjKGEpKSk7IH1cclxuZnVuY3Rpb24gWWMoYSwgYikgeyBVKGEpOyBiID0gVihhLCBiKTsgcmV0dXJuIFAoYS5hLmIsIGIpOyB9XHJcbmcuZm9yRWFjaCA9IGZ1bmN0aW9uIChhLCBiKSB7IFUodGhpcyk7IHRoaXMuYS5mb3JFYWNoKGZ1bmN0aW9uIChjLCBkKSB7IG9hKGMsIGZ1bmN0aW9uIChlKSB7IGEuY2FsbChiLCBlLCBkLCB0aGlzKTsgfSwgdGhpcyk7IH0sIHRoaXMpOyB9O1xyXG5nLksgPSBmdW5jdGlvbiAoKSB7IFUodGhpcyk7IGZvciAodmFyIGEgPSB0aGlzLmEuSSgpLCBiID0gdGhpcy5hLksoKSwgYyA9IFtdLCBkID0gMDsgZCA8IGIubGVuZ3RoOyBkKyspXHJcbiAgICBmb3IgKHZhciBlID0gYVtkXSwgZiA9IDA7IGYgPCBlLmxlbmd0aDsgZisrKVxyXG4gICAgICAgIGMucHVzaChiW2RdKTsgcmV0dXJuIGM7IH07XHJcbmcuSSA9IGZ1bmN0aW9uIChhKSB7IFUodGhpcyk7IHZhciBiID0gW107IGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgYSlcclxuICAgIFljKHRoaXMsIGEpICYmIChiID0gcmEoYiwgdGhpcy5hLmdldChWKHRoaXMsIGEpKSkpO1xyXG5lbHNlIHtcclxuICAgIGEgPSB0aGlzLmEuSSgpO1xyXG4gICAgZm9yICh2YXIgYyA9IDA7IGMgPCBhLmxlbmd0aDsgYysrKVxyXG4gICAgICAgIGIgPSByYShiLCBhW2NdKTtcclxufSByZXR1cm4gYjsgfTtcclxuZy5zZXQgPSBmdW5jdGlvbiAoYSwgYikgeyBVKHRoaXMpOyB0aGlzLmMgPSBudWxsOyBhID0gVih0aGlzLCBhKTsgWWModGhpcywgYSkgJiYgKHRoaXMuYiAtPSB0aGlzLmEuZ2V0KGEpLmxlbmd0aCk7IHRoaXMuYS5zZXQoYSwgW2JdKTsgdGhpcy5iICs9IDE7IHJldHVybiB0aGlzOyB9O1xyXG5nLmdldCA9IGZ1bmN0aW9uIChhLCBiKSB7IGlmICghYSlcclxuICAgIHJldHVybiBiOyBhID0gdGhpcy5JKGEpOyByZXR1cm4gMCA8IGEubGVuZ3RoID8gU3RyaW5nKGFbMF0pIDogYjsgfTtcclxuZnVuY3Rpb24ga2MoYSwgYiwgYykgeyBYYyhhLCBiKTsgMCA8IGMubGVuZ3RoICYmIChhLmMgPSBudWxsLCBhLmEuc2V0KFYoYSwgYiksIHNhKGMpKSwgYS5iICs9IGMubGVuZ3RoKTsgfVxyXG5nLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkgeyBpZiAodGhpcy5jKVxyXG4gICAgcmV0dXJuIHRoaXMuYzsgaWYgKCF0aGlzLmEpXHJcbiAgICByZXR1cm4gXCJcIjsgZm9yICh2YXIgYSA9IFtdLCBiID0gdGhpcy5hLksoKSwgYyA9IDA7IGMgPCBiLmxlbmd0aDsgYysrKSB7XHJcbiAgICB2YXIgZCA9IGJbY10sIGUgPSBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGQpKTtcclxuICAgIGQgPSB0aGlzLkkoZCk7XHJcbiAgICBmb3IgKHZhciBmID0gMDsgZiA8IGQubGVuZ3RoOyBmKyspIHtcclxuICAgICAgICB2YXIgaCA9IGU7XHJcbiAgICAgICAgXCJcIiAhPT0gZFtmXSAmJiAoaCArPSBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoZFtmXSkpKTtcclxuICAgICAgICBhLnB1c2goaCk7XHJcbiAgICB9XHJcbn0gcmV0dXJuIHRoaXMuYyA9IGEuam9pbihcIiZcIik7IH07XHJcbmZ1bmN0aW9uIFYoYSwgYikgeyBiID0gU3RyaW5nKGIpOyBhLmYgJiYgKGIgPSBiLnRvTG93ZXJDYXNlKCkpOyByZXR1cm4gYjsgfVxyXG5mdW5jdGlvbiBTYyhhLCBiKSB7IGIgJiYgIWEuZiAmJiAoVShhKSwgYS5jID0gbnVsbCwgYS5hLmZvckVhY2goZnVuY3Rpb24gKGMsIGQpIHsgdmFyIGUgPSBkLnRvTG93ZXJDYXNlKCk7IGQgIT0gZSAmJiAoWGModGhpcywgZCksIGtjKHRoaXMsIGUsIGMpKTsgfSwgYSkpOyBhLmYgPSBiOyB9XHJcbmZ1bmN0aW9uIFpjKGEsIGIpIHsgdGhpcy5iID0gYTsgdGhpcy5hID0gYjsgfVxyXG5mdW5jdGlvbiAkYyhhKSB7IHRoaXMuZyA9IGEgfHwgYWQ7IGsuUGVyZm9ybWFuY2VOYXZpZ2F0aW9uVGltaW5nID8gKGEgPSBrLnBlcmZvcm1hbmNlLmdldEVudHJpZXNCeVR5cGUoXCJuYXZpZ2F0aW9uXCIpLCBhID0gMCA8IGEubGVuZ3RoICYmIChcImhxXCIgPT0gYVswXS5uZXh0SG9wUHJvdG9jb2wgfHwgXCJoMlwiID09IGFbMF0ubmV4dEhvcFByb3RvY29sKSkgOiBhID0gISEoay5jYSAmJiBrLmNhLnVhICYmIGsuY2EudWEoKSAmJiBrLmNhLnVhKCkubWIpOyB0aGlzLmYgPSBhID8gdGhpcy5nIDogMTsgdGhpcy5hID0gbnVsbDsgMSA8IHRoaXMuZiAmJiAodGhpcy5hID0gbmV3IFNldCk7IHRoaXMuYiA9IG51bGw7IHRoaXMuYyA9IFtdOyB9XHJcbnZhciBhZCA9IDEwO1xyXG5mdW5jdGlvbiBiZChhKSB7IHJldHVybiBhLmIgPyAhMCA6IGEuYSA/IGEuYS5zaXplID49IGEuZiA6ICExOyB9XHJcbmZ1bmN0aW9uIHljKGEpIHsgcmV0dXJuIGEuYiA/IDEgOiBhLmEgPyBhLmEuc2l6ZSA6IDA7IH1cclxuZnVuY3Rpb24gdmMoYSwgYikgeyByZXR1cm4gYS5iID8gYS5iID09IGIgOiBhLmEgPyBhLmEuaGFzKGIpIDogITE7IH1cclxuZnVuY3Rpb24gemMoYSwgYikgeyBhLmEgPyBhLmEuYWRkKGIpIDogYS5iID0gYjsgfVxyXG5mdW5jdGlvbiBCYyhhLCBiKSB7IGEuYiAmJiBhLmIgPT0gYiA/IGEuYiA9IG51bGwgOiBhLmEgJiYgYS5hLmhhcyhiKSAmJiBhLmEuZGVsZXRlKGIpOyB9XHJcbiRjLnByb3RvdHlwZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZV8xLCBfYTtcclxuICAgIHRoaXMuYyA9IGNkKHRoaXMpO1xyXG4gICAgaWYgKHRoaXMuYilcclxuICAgICAgICB0aGlzLmIuY2FuY2VsKCksIHRoaXMuYiA9IG51bGw7XHJcbiAgICBlbHNlIGlmICh0aGlzLmEgJiYgMCAhPT0gdGhpcy5hLnNpemUpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKHRoaXMuYS52YWx1ZXMoKSksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhID0gX2MudmFsdWU7XHJcbiAgICAgICAgICAgICAgICBhLmNhbmNlbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmEuY2xlYXIoKTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gY2QoYSkge1xyXG4gICAgdmFyIGVfMiwgX2E7XHJcbiAgICBpZiAobnVsbCAhPSBhLmIpXHJcbiAgICAgICAgcmV0dXJuIGEuYy5jb25jYXQoYS5iLmkpO1xyXG4gICAgaWYgKG51bGwgIT0gYS5hICYmIDAgIT09IGEuYS5zaXplKSB7XHJcbiAgICAgICAgdmFyIGIgPSBhLmM7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyhhLmEudmFsdWVzKCkpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYyA9IF9jLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgYiA9IGIuY29uY2F0KGMuaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVfMl8xKSB7IGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07IH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBiO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNhKGEuYyk7XHJcbn1cclxuZnVuY3Rpb24gZGQoKSB7IH1cclxuZGQucHJvdG90eXBlLnN0cmluZ2lmeSA9IGZ1bmN0aW9uIChhKSB7IHJldHVybiBrLkpTT04uc3RyaW5naWZ5KGEsIHZvaWQgMCk7IH07XHJcbmRkLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIChhKSB7IHJldHVybiBrLkpTT04ucGFyc2UoYSwgdm9pZCAwKTsgfTtcclxuZnVuY3Rpb24gZWQoKSB7IHRoaXMuYSA9IG5ldyBkZDsgfVxyXG5mdW5jdGlvbiBmZChhLCBiLCBjKSB7IHZhciBkID0gYyB8fCBcIlwiOyB0cnkge1xyXG4gICAgR2MoYSwgZnVuY3Rpb24gKGUsIGYpIHsgdmFyIGggPSBlOyBtKGUpICYmIChoID0gdmIoZSkpOyBiLnB1c2goZCArIGYgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudChoKSk7IH0pO1xyXG59XHJcbmNhdGNoIChlKSB7XHJcbiAgICB0aHJvdyBiLnB1c2goZCArIFwidHlwZT1cIiArIGVuY29kZVVSSUNvbXBvbmVudChcIl9iYWRtYXBcIikpLCBlO1xyXG59IH1cclxuZnVuY3Rpb24gZ2QoYSwgYikgeyB2YXIgYyA9IG5ldyBQYjsgaWYgKGsuSW1hZ2UpIHtcclxuICAgIHZhciBkID0gbmV3IEltYWdlO1xyXG4gICAgZC5vbmxvYWQgPSBrYShoZCwgYywgZCwgXCJUZXN0TG9hZEltYWdlOiBsb2FkZWRcIiwgITAsIGIpO1xyXG4gICAgZC5vbmVycm9yID0ga2EoaGQsIGMsIGQsIFwiVGVzdExvYWRJbWFnZTogZXJyb3JcIiwgITEsIGIpO1xyXG4gICAgZC5vbmFib3J0ID0ga2EoaGQsIGMsIGQsIFwiVGVzdExvYWRJbWFnZTogYWJvcnRcIiwgITEsIGIpO1xyXG4gICAgZC5vbnRpbWVvdXQgPSBrYShoZCwgYywgZCwgXCJUZXN0TG9hZEltYWdlOiB0aW1lb3V0XCIsICExLCBiKTtcclxuICAgIGsuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IGlmIChkLm9udGltZW91dClcclxuICAgICAgICBkLm9udGltZW91dCgpOyB9LCAxRTQpO1xyXG4gICAgZC5zcmMgPSBhO1xyXG59XHJcbmVsc2VcclxuICAgIGIoITEpOyB9XHJcbmZ1bmN0aW9uIGhkKGEsIGIsIGMsIGQsIGUpIHsgdHJ5IHtcclxuICAgIGIub25sb2FkID0gbnVsbCwgYi5vbmVycm9yID0gbnVsbCwgYi5vbmFib3J0ID0gbnVsbCwgYi5vbnRpbWVvdXQgPSBudWxsLCBlKGQpO1xyXG59XHJcbmNhdGNoIChmKSB7IH0gfVxyXG52YXIgaWQgPSBrLkpTT04ucGFyc2U7XHJcbmZ1bmN0aW9uIFcoYSkgeyBCLmNhbGwodGhpcyk7IHRoaXMuaGVhZGVycyA9IG5ldyBPOyB0aGlzLkcgPSBhIHx8IG51bGw7IHRoaXMuYiA9ICExOyB0aGlzLnMgPSB0aGlzLmEgPSBudWxsOyB0aGlzLkQgPSBcIlwiOyB0aGlzLmggPSAwOyB0aGlzLmYgPSBcIlwiOyB0aGlzLmcgPSB0aGlzLncgPSB0aGlzLmwgPSB0aGlzLnYgPSAhMTsgdGhpcy5vID0gMDsgdGhpcy5tID0gbnVsbDsgdGhpcy5IID0gamQ7IHRoaXMuQiA9IHRoaXMuRiA9ICExOyB9XHJcbnIoVywgQik7XHJcbnZhciBqZCA9IFwiXCIsIGtkID0gL15odHRwcz8kL2ksIGxkID0gW1wiUE9TVFwiLCBcIlBVVFwiXTtcclxuZyA9IFcucHJvdG90eXBlO1xyXG5nLiQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkge1xyXG4gICAgaWYgKHRoaXMuYSlcclxuICAgICAgICB0aHJvdyBFcnJvcihcIltnb29nLm5ldC5YaHJJb10gT2JqZWN0IGlzIGFjdGl2ZSB3aXRoIGFub3RoZXIgcmVxdWVzdD1cIiArIHRoaXMuRCArIFwiOyBuZXdVcmk9XCIgKyBhKTtcclxuICAgIGIgPSBiID8gYi50b1VwcGVyQ2FzZSgpIDogXCJHRVRcIjtcclxuICAgIHRoaXMuRCA9IGE7XHJcbiAgICB0aGlzLmYgPSBcIlwiO1xyXG4gICAgdGhpcy5oID0gMDtcclxuICAgIHRoaXMudiA9ICExO1xyXG4gICAgdGhpcy5iID0gITA7XHJcbiAgICB0aGlzLmEgPSBuZXcgWE1MSHR0cFJlcXVlc3Q7XHJcbiAgICB0aGlzLnMgPSB0aGlzLkcgPyBaYih0aGlzLkcpIDogWmIoY2MpO1xyXG4gICAgdGhpcy5hLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG4odGhpcy52YSwgdGhpcyk7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHRoaXMudyA9ICEwLCB0aGlzLmEub3BlbihiLCBTdHJpbmcoYSksICEwKSwgdGhpcy53ID0gITE7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZikge1xyXG4gICAgICAgIG1kKHRoaXMsIGYpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGEgPSBjIHx8IFwiXCI7XHJcbiAgICB2YXIgZSA9IG5ldyBPKHRoaXMuaGVhZGVycyk7XHJcbiAgICBkICYmIEdjKGQsIGZ1bmN0aW9uIChmLCBoKSB7IGUuc2V0KGgsIGYpOyB9KTtcclxuICAgIGQgPSBwYShlLksoKSk7XHJcbiAgICBjID0gay5Gb3JtRGF0YSAmJiBhIGluc3RhbmNlb2Ygay5Gb3JtRGF0YTtcclxuICAgICEoMCA8PVxyXG4gICAgICAgIG5hKGxkLCBiKSkgfHwgZCB8fCBjIHx8IGUuc2V0KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLThcIik7XHJcbiAgICBlLmZvckVhY2goZnVuY3Rpb24gKGYsIGgpIHsgdGhpcy5hLnNldFJlcXVlc3RIZWFkZXIoaCwgZik7IH0sIHRoaXMpO1xyXG4gICAgdGhpcy5IICYmICh0aGlzLmEucmVzcG9uc2VUeXBlID0gdGhpcy5IKTtcclxuICAgIFwid2l0aENyZWRlbnRpYWxzXCIgaW4gdGhpcy5hICYmIHRoaXMuYS53aXRoQ3JlZGVudGlhbHMgIT09IHRoaXMuRiAmJiAodGhpcy5hLndpdGhDcmVkZW50aWFscyA9IHRoaXMuRik7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIG5kKHRoaXMpLCAwIDwgdGhpcy5vICYmICgodGhpcy5CID0gb2QodGhpcy5hKSkgPyAodGhpcy5hLnRpbWVvdXQgPSB0aGlzLm8sIHRoaXMuYS5vbnRpbWVvdXQgPSBuKHRoaXMudGEsIHRoaXMpKSA6IHRoaXMubSA9IEpiKHRoaXMudGEsIHRoaXMubywgdGhpcykpLCB0aGlzLmwgPSAhMCwgdGhpcy5hLnNlbmQoYSksIHRoaXMubCA9ICExO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGYpIHtcclxuICAgICAgICBtZCh0aGlzLCBmKTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gb2QoYSkgeyByZXR1cm4gdyAmJiBTYSg5KSAmJiBcIm51bWJlclwiID09PSB0eXBlb2YgYS50aW1lb3V0ICYmIHZvaWQgMCAhPT0gYS5vbnRpbWVvdXQ7IH1cclxuZnVuY3Rpb24gcWEoYSkgeyByZXR1cm4gXCJjb250ZW50LXR5cGVcIiA9PSBhLnRvTG93ZXJDYXNlKCk7IH1cclxuZy50YSA9IGZ1bmN0aW9uICgpIHsgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgZ29vZyAmJiB0aGlzLmEgJiYgKHRoaXMuZiA9IFwiVGltZWQgb3V0IGFmdGVyIFwiICsgdGhpcy5vICsgXCJtcywgYWJvcnRpbmdcIiwgdGhpcy5oID0gOCwgdGhpcy5kaXNwYXRjaEV2ZW50KFwidGltZW91dFwiKSwgdGhpcy5hYm9ydCg4KSk7IH07XHJcbmZ1bmN0aW9uIG1kKGEsIGIpIHsgYS5iID0gITE7IGEuYSAmJiAoYS5nID0gITAsIGEuYS5hYm9ydCgpLCBhLmcgPSAhMSk7IGEuZiA9IGI7IGEuaCA9IDU7IHBkKGEpOyBxZChhKTsgfVxyXG5mdW5jdGlvbiBwZChhKSB7IGEudiB8fCAoYS52ID0gITAsIGEuZGlzcGF0Y2hFdmVudChcImNvbXBsZXRlXCIpLCBhLmRpc3BhdGNoRXZlbnQoXCJlcnJvclwiKSk7IH1cclxuZy5hYm9ydCA9IGZ1bmN0aW9uIChhKSB7IHRoaXMuYSAmJiB0aGlzLmIgJiYgKHRoaXMuYiA9ICExLCB0aGlzLmcgPSAhMCwgdGhpcy5hLmFib3J0KCksIHRoaXMuZyA9ICExLCB0aGlzLmggPSBhIHx8IDcsIHRoaXMuZGlzcGF0Y2hFdmVudChcImNvbXBsZXRlXCIpLCB0aGlzLmRpc3BhdGNoRXZlbnQoXCJhYm9ydFwiKSwgcWQodGhpcykpOyB9O1xyXG5nLkMgPSBmdW5jdGlvbiAoKSB7IHRoaXMuYSAmJiAodGhpcy5iICYmICh0aGlzLmIgPSAhMSwgdGhpcy5nID0gITAsIHRoaXMuYS5hYm9ydCgpLCB0aGlzLmcgPSAhMSksIHFkKHRoaXMsICEwKSk7IFcuTS5DLmNhbGwodGhpcyk7IH07XHJcbmcudmEgPSBmdW5jdGlvbiAoKSB7IHRoaXMuaiB8fCAodGhpcy53IHx8IHRoaXMubCB8fCB0aGlzLmcgPyByZCh0aGlzKSA6IHRoaXMuT2EoKSk7IH07XHJcbmcuT2EgPSBmdW5jdGlvbiAoKSB7IHJkKHRoaXMpOyB9O1xyXG5mdW5jdGlvbiByZChhKSB7XHJcbiAgICBpZiAoYS5iICYmIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGdvb2cgJiYgKCFhLnNbMV0gfHwgNCAhPSBLKGEpIHx8IDIgIT0gYS5TKCkpKVxyXG4gICAgICAgIGlmIChhLmwgJiYgNCA9PSBLKGEpKVxyXG4gICAgICAgICAgICBKYihhLnZhLCAwLCBhKTtcclxuICAgICAgICBlbHNlIGlmIChhLmRpc3BhdGNoRXZlbnQoXCJyZWFkeXN0YXRlY2hhbmdlXCIpLCA0ID09IEsoYSkpIHtcclxuICAgICAgICAgICAgYS5iID0gITE7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYiA9IGEuUygpO1xyXG4gICAgICAgICAgICAgICAgYTogc3dpdGNoIChiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyMDA6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyMDE6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyMDI6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyMDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyMDY6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzMDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMjIzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9ICEwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGMgPSAhMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBkO1xyXG4gICAgICAgICAgICAgICAgaWYgKCEoZCA9IGMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUgPSAwID09PSBiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmID0gU3RyaW5nKGEuRCkubWF0Y2goSWMpWzFdIHx8IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZiAmJiBrLnNlbGYgJiYgay5zZWxmLmxvY2F0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaCA9IGsuc2VsZi5sb2NhdGlvbi5wcm90b2NvbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBoLnN1YnN0cigwLCBoLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSAha2QudGVzdChmID8gZi50b0xvd2VyQ2FzZSgpIDogXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGQgPSBlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGQpXHJcbiAgICAgICAgICAgICAgICAgICAgYS5kaXNwYXRjaEV2ZW50KFwiY29tcGxldGVcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuZGlzcGF0Y2hFdmVudChcInN1Y2Nlc3NcIik7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhLmggPSA2O1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsID0gMiA8IEsoYSkgPyBhLmEuc3RhdHVzVGV4dCA6IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGwgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBhLmYgPSBsICsgXCIgW1wiICsgYS5TKCkgKyBcIl1cIjtcclxuICAgICAgICAgICAgICAgICAgICBwZChhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgIHFkKGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG59XHJcbmZ1bmN0aW9uIHFkKGEsIGIpIHsgaWYgKGEuYSkge1xyXG4gICAgbmQoYSk7XHJcbiAgICB2YXIgYyA9IGEuYSwgZCA9IGEuc1swXSA/IGFhIDogbnVsbDtcclxuICAgIGEuYSA9IG51bGw7XHJcbiAgICBhLnMgPSBudWxsO1xyXG4gICAgYiB8fCBhLmRpc3BhdGNoRXZlbnQoXCJyZWFkeVwiKTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgYy5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBkO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHsgfVxyXG59IH1cclxuZnVuY3Rpb24gbmQoYSkgeyBhLmEgJiYgYS5CICYmIChhLmEub250aW1lb3V0ID0gbnVsbCk7IGEubSAmJiAoay5jbGVhclRpbWVvdXQoYS5tKSwgYS5tID0gbnVsbCk7IH1cclxuZnVuY3Rpb24gSyhhKSB7IHJldHVybiBhLmEgPyBhLmEucmVhZHlTdGF0ZSA6IDA7IH1cclxuZy5TID0gZnVuY3Rpb24gKCkgeyB0cnkge1xyXG4gICAgcmV0dXJuIDIgPCBLKHRoaXMpID8gdGhpcy5hLnN0YXR1cyA6IC0xO1xyXG59XHJcbmNhdGNoIChhKSB7XHJcbiAgICByZXR1cm4gLTE7XHJcbn0gfTtcclxuZy5ZID0gZnVuY3Rpb24gKCkgeyB0cnkge1xyXG4gICAgcmV0dXJuIHRoaXMuYSA/IHRoaXMuYS5yZXNwb25zZVRleHQgOiBcIlwiO1xyXG59XHJcbmNhdGNoIChhKSB7XHJcbiAgICByZXR1cm4gXCJcIjtcclxufSB9O1xyXG5nLkphID0gZnVuY3Rpb24gKGEpIHsgaWYgKHRoaXMuYSkge1xyXG4gICAgdmFyIGIgPSB0aGlzLmEucmVzcG9uc2VUZXh0O1xyXG4gICAgYSAmJiAwID09IGIuaW5kZXhPZihhKSAmJiAoYiA9IGIuc3Vic3RyaW5nKGEubGVuZ3RoKSk7XHJcbiAgICByZXR1cm4gaWQoYik7XHJcbn0gfTtcclxuZy5xYSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuaDsgfTtcclxuZy5NYSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFwic3RyaW5nXCIgPT09IHR5cGVvZiB0aGlzLmYgPyB0aGlzLmYgOiBTdHJpbmcodGhpcy5mKTsgfTtcclxuZnVuY3Rpb24gc2QoYSkgeyB2YXIgYiA9IFwiXCI7IEJhKGEsIGZ1bmN0aW9uIChjLCBkKSB7IGIgKz0gZDsgYiArPSBcIjpcIjsgYiArPSBjOyBiICs9IFwiXFxyXFxuXCI7IH0pOyByZXR1cm4gYjsgfVxyXG5mdW5jdGlvbiB0ZChhLCBiLCBjKSB7IGE6IHtcclxuICAgIGZvciAoZCBpbiBjKSB7XHJcbiAgICAgICAgdmFyIGQgPSAhMTtcclxuICAgICAgICBicmVhayBhO1xyXG4gICAgfVxyXG4gICAgZCA9ICEwO1xyXG59IGQgfHwgKGMgPSBzZChjKSwgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGEgPyAobnVsbCAhPSBjICYmIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoYykpKSA6IE4oYSwgYiwgYykpOyB9XHJcbmZ1bmN0aW9uIFgoYSwgYiwgYykgeyByZXR1cm4gYyAmJiBjLmludGVybmFsQ2hhbm5lbFBhcmFtcyA/IGMuaW50ZXJuYWxDaGFubmVsUGFyYW1zW2FdIHx8IGIgOiBiOyB9XHJcbmZ1bmN0aW9uIHVkKGEpIHtcclxuICAgIHRoaXMuZiA9IFtdO1xyXG4gICAgdGhpcy5SID0gdGhpcy5lYSA9IHRoaXMudiA9IHRoaXMuUCA9IHRoaXMuYSA9IHRoaXMuaGEgPSB0aGlzLnMgPSB0aGlzLk4gPSB0aGlzLmggPSB0aGlzLkYgPSB0aGlzLmogPSBudWxsO1xyXG4gICAgdGhpcy5GYSA9IHRoaXMuSCA9IDA7XHJcbiAgICB0aGlzLkNhID0gWChcImZhaWxGYXN0XCIsICExLCBhKTtcclxuICAgIHRoaXMuVSA9IHRoaXMubCA9IHRoaXMuaSA9IHRoaXMuZyA9IHRoaXMuYyA9IG51bGw7XHJcbiAgICB0aGlzLlcgPSAhMDtcclxuICAgIHRoaXMuQSA9IHRoaXMuaWEgPSB0aGlzLkcgPSAtMTtcclxuICAgIHRoaXMuSiA9IHRoaXMubSA9IHRoaXMubyA9IDA7XHJcbiAgICB0aGlzLkJhID0gWChcImJhc2VSZXRyeURlbGF5TXNcIiwgNUUzLCBhKTtcclxuICAgIHRoaXMuR2EgPSBYKFwicmV0cnlEZWxheVNlZWRNc1wiLCAxRTQsIGEpO1xyXG4gICAgdGhpcy5EYSA9IFgoXCJmb3J3YXJkQ2hhbm5lbE1heFJldHJpZXNcIiwgMiwgYSk7XHJcbiAgICB0aGlzLmdhID0gWChcImZvcndhcmRDaGFubmVsUmVxdWVzdFRpbWVvdXRNc1wiLCAyRTQsIGEpO1xyXG4gICAgdGhpcy5FYSA9IGEgJiYgYS5uYiB8fCB2b2lkIDA7XHJcbiAgICB0aGlzLkQgPSB2b2lkIDA7XHJcbiAgICB0aGlzLncgPSBhICYmIGEuc3VwcG9ydHNDcm9zc0RvbWFpblhociB8fCAhMTtcclxuICAgIHRoaXMuQiA9IFwiXCI7XHJcbiAgICB0aGlzLmIgPSBuZXcgJGMoYSAmJiBhLmNvbmN1cnJlbnRSZXF1ZXN0TGltaXQpO1xyXG4gICAgdGhpcy5qYSA9IG5ldyBlZDtcclxuICAgIHRoaXMuZmEgPSBhICYmIGEuZmFzdEhhbmRzaGFrZSB8fCAhMTtcclxuICAgIGEgJiYgYS5mb3JjZUxvbmdQb2xsaW5nICYmICh0aGlzLlcgPSAhMSk7XHJcbiAgICB0aGlzLk8gPSB2b2lkIDA7XHJcbn1cclxuZyA9IHVkLnByb3RvdHlwZTtcclxuZy5vYSA9IDg7XHJcbmcudSA9IDE7XHJcbmZ1bmN0aW9uIEVjKGEpIHsgdmQoYSk7IGlmICgzID09IGEudSkge1xyXG4gICAgdmFyIGIgPSBhLkgrKywgYyA9IEkoYS52KTtcclxuICAgIE4oYywgXCJTSURcIiwgYS5CKTtcclxuICAgIE4oYywgXCJSSURcIiwgYik7XHJcbiAgICBOKGMsIFwiVFlQRVwiLCBcInRlcm1pbmF0ZVwiKTtcclxuICAgIHdkKGEsIGMpO1xyXG4gICAgYiA9IG5ldyBIKGEsIGIsIHZvaWQgMCk7XHJcbiAgICBiLkIgPSAyO1xyXG4gICAgYi5mID0gaWMoSShjKSk7XHJcbiAgICBjID0gITE7XHJcbiAgICBrLm5hdmlnYXRvciAmJiBrLm5hdmlnYXRvci5zZW5kQmVhY29uICYmIChjID0gay5uYXZpZ2F0b3Iuc2VuZEJlYWNvbihiLmYudG9TdHJpbmcoKSwgXCJcIikpO1xyXG4gICAgIWMgJiYgay5JbWFnZSAmJiAoKG5ldyBJbWFnZSkuc3JjID0gYi5mLCBjID0gITApO1xyXG4gICAgYyB8fCAoYi5hID0gbGMoYi5nLCBudWxsKSwgYi5hLiQoYi5mKSk7XHJcbiAgICBiLnMgPSBxKCk7XHJcbiAgICBKKGIpO1xyXG59IHhkKGEpOyB9XHJcbmZ1bmN0aW9uIHZkKGEpIHsgYS5hICYmIChhLmEuY2FuY2VsKCksIGEuYSA9IG51bGwpOyBhLmkgJiYgKGsuY2xlYXJUaW1lb3V0KGEuaSksIGEuaSA9IG51bGwpOyB3YyhhKTsgYS5iLmNhbmNlbCgpOyBhLmcgJiYgKFwibnVtYmVyXCIgPT09IHR5cGVvZiBhLmcgJiYgay5jbGVhclRpbWVvdXQoYS5nKSwgYS5nID0gbnVsbCk7IH1cclxuZnVuY3Rpb24geWQoYSwgYikgeyBhLmYucHVzaChuZXcgWmMoYS5GYSsrLCBiKSk7IDMgPT0gYS51ICYmIERjKGEpOyB9XHJcbmZ1bmN0aW9uIERjKGEpIHsgYmQoYS5iKSB8fCBhLmcgfHwgKGEuZyA9ICEwLCBDYihhLnhhLCBhKSwgYS5vID0gMCk7IH1cclxuZnVuY3Rpb24gemQoYSwgYikgeyBpZiAoeWMoYS5iKSA+PSBhLmIuZiAtIChhLmcgPyAxIDogMCkpXHJcbiAgICByZXR1cm4gITE7IGlmIChhLmcpXHJcbiAgICByZXR1cm4gYS5mID0gYi5pLmNvbmNhdChhLmYpLCAhMDsgaWYgKDEgPT0gYS51IHx8IDIgPT0gYS51IHx8IGEubyA+PSAoYS5DYSA/IDAgOiBhLkRhKSlcclxuICAgIHJldHVybiAhMTsgYS5nID0gVmIobihhLnhhLCBhLCBiKSwgQWQoYSwgYS5vKSk7IGEubysrOyByZXR1cm4gITA7IH1cclxuZy54YSA9IGZ1bmN0aW9uIChhKSB7XHJcbiAgICBpZiAodGhpcy5nKVxyXG4gICAgICAgIGlmICh0aGlzLmcgPSBudWxsLCAxID09IHRoaXMudSkge1xyXG4gICAgICAgICAgICBpZiAoIWEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuSCA9IE1hdGguZmxvb3IoMUU1ICogTWF0aC5yYW5kb20oKSk7XHJcbiAgICAgICAgICAgICAgICBhID0gdGhpcy5IKys7XHJcbiAgICAgICAgICAgICAgICB2YXIgYiA9IG5ldyBIKHRoaXMsIGEsIHZvaWQgMCksIGMgPSB0aGlzLmo7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkYgJiYgKGMgPyAoYyA9IENhKGMpLCBFYShjLCB0aGlzLkYpKSA6IGMgPSB0aGlzLkYpO1xyXG4gICAgICAgICAgICAgICAgbnVsbCA9PT0gdGhpcy5oICYmIChiLm0gPSBjKTtcclxuICAgICAgICAgICAgICAgIHZhciBkO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZmEpXHJcbiAgICAgICAgICAgICAgICAgICAgYToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBlID0gZCA9IDA7IGUgPCB0aGlzLmYubGVuZ3RoOyBlKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZiA9IHRoaXMuZltlXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIGYuYSAmJiAoZiA9IGYuYS5fX2RhdGFfXywgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGYpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBmLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IGYpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkICs9IGY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoNDA5NiA8IGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDQwOTYgPT09IGQgfHwgZSA9PT0gdGhpcy5mLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gZSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkID0gMUUzO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBkID0gMUUzO1xyXG4gICAgICAgICAgICAgICAgZCA9IEJkKHRoaXMsIGIsIGQpO1xyXG4gICAgICAgICAgICAgICAgZSA9IEkodGhpcy52KTtcclxuICAgICAgICAgICAgICAgIE4oZSwgXCJSSURcIiwgYSk7XHJcbiAgICAgICAgICAgICAgICBOKGUsIFwiQ1ZFUlwiLCAyMik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnMgJiYgTihlLCBcIlgtSFRUUC1TZXNzaW9uLUlkXCIsIHRoaXMucyk7XHJcbiAgICAgICAgICAgICAgICB3ZCh0aGlzLCBlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaCAmJiBjICYmIHRkKGUsIHRoaXMuaCwgYyk7XHJcbiAgICAgICAgICAgICAgICB6Yyh0aGlzLmIsIGIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mYSA/IChOKGUsIFwiJHJlcVwiLCBkKSwgTihlLCBcIlNJRFwiLCBcIm51bGxcIiksIGIuUiA9ICEwLCBoYyhiLCBlLCBudWxsKSkgOiBoYyhiLCBlLCBkKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudSA9IDI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAzID09IHRoaXMudSAmJiAoYSA/IENkKHRoaXMsIGEpIDogMCA9PSB0aGlzLmYubGVuZ3RoIHx8IGJkKHRoaXMuYikgfHwgQ2QodGhpcykpO1xyXG59O1xyXG5mdW5jdGlvbiBDZChhLCBiKSB7IHZhciBjOyBiID8gYyA9IGIuVyA6IGMgPSBhLkgrKzsgdmFyIGQgPSBJKGEudik7IE4oZCwgXCJTSURcIiwgYS5CKTsgTihkLCBcIlJJRFwiLCBjKTsgTihkLCBcIkFJRFwiLCBhLkcpOyB3ZChhLCBkKTsgYS5oICYmIGEuaiAmJiB0ZChkLCBhLmgsIGEuaik7IGMgPSBuZXcgSChhLCBjLCBhLm8gKyAxKTsgbnVsbCA9PT0gYS5oICYmIChjLm0gPSBhLmopOyBiICYmIChhLmYgPSBiLmkuY29uY2F0KGEuZikpOyBiID0gQmQoYSwgYywgMUUzKTsgYy5zZXRUaW1lb3V0KE1hdGgucm91bmQoLjUgKiBhLmdhKSArIE1hdGgucm91bmQoLjUgKiBhLmdhICogTWF0aC5yYW5kb20oKSkpOyB6YyhhLmIsIGMpOyBoYyhjLCBkLCBiKTsgfVxyXG5mdW5jdGlvbiB3ZChhLCBiKSB7IGEuYyAmJiBHYyh7fSwgZnVuY3Rpb24gKGMsIGQpIHsgTihiLCBkLCBjKTsgfSk7IH1cclxuZnVuY3Rpb24gQmQoYSwgYiwgYykgeyBjID0gTWF0aC5taW4oYS5mLmxlbmd0aCwgYyk7IHZhciBkID0gYS5jID8gbihhLmMuSGEsIGEuYywgYSkgOiBudWxsOyBhOiBmb3IgKHZhciBlID0gYS5mLCBmID0gLTE7Oykge1xyXG4gICAgdmFyIGggPSBbXCJjb3VudD1cIiArIGNdO1xyXG4gICAgLTEgPT0gZiA/IDAgPCBjID8gKGYgPSBlWzBdLmIsIGgucHVzaChcIm9mcz1cIiArIGYpKSA6IGYgPSAwIDogaC5wdXNoKFwib2ZzPVwiICsgZik7XHJcbiAgICBmb3IgKHZhciBsID0gITAsIHAgPSAwOyBwIDwgYzsgcCsrKSB7XHJcbiAgICAgICAgdmFyIEQgPSBlW3BdLmIsIHogPSBlW3BdLmE7XHJcbiAgICAgICAgRCAtPSBmO1xyXG4gICAgICAgIGlmICgwID4gRClcclxuICAgICAgICAgICAgZiA9IE1hdGgubWF4KDAsIGVbcF0uYiAtIDEwMCksIGwgPSAhMTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBmZCh6LCBoLCBcInJlcVwiICsgRCArIFwiX1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAodGEpIHtcclxuICAgICAgICAgICAgICAgIGQgJiYgZCh6KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGwpIHtcclxuICAgICAgICBkID0gaC5qb2luKFwiJlwiKTtcclxuICAgICAgICBicmVhayBhO1xyXG4gICAgfVxyXG59IGEgPSBhLmYuc3BsaWNlKDAsIGMpOyBiLmkgPSBhOyByZXR1cm4gZDsgfVxyXG5mdW5jdGlvbiBDYyhhKSB7IGEuYSB8fCBhLmkgfHwgKGEuSiA9IDEsIENiKGEud2EsIGEpLCBhLm0gPSAwKTsgfVxyXG5mdW5jdGlvbiB4YyhhKSB7IGlmIChhLmEgfHwgYS5pIHx8IDMgPD0gYS5tKVxyXG4gICAgcmV0dXJuICExOyBhLkorKzsgYS5pID0gVmIobihhLndhLCBhKSwgQWQoYSwgYS5tKSk7IGEubSsrOyByZXR1cm4gITA7IH1cclxuZy53YSA9IGZ1bmN0aW9uICgpIHsgdGhpcy5pID0gbnVsbDsgdGhpcy5hID0gbmV3IEgodGhpcywgXCJycGNcIiwgdGhpcy5KKTsgbnVsbCA9PT0gdGhpcy5oICYmICh0aGlzLmEubSA9IHRoaXMuaik7IHRoaXMuYS5KID0gMDsgdmFyIGEgPSBJKHRoaXMuZWEpOyBOKGEsIFwiUklEXCIsIFwicnBjXCIpOyBOKGEsIFwiU0lEXCIsIHRoaXMuQik7IE4oYSwgXCJDSVwiLCB0aGlzLlUgPyBcIjBcIiA6IFwiMVwiKTsgTihhLCBcIkFJRFwiLCB0aGlzLkcpOyB3ZCh0aGlzLCBhKTsgTihhLCBcIlRZUEVcIiwgXCJ4bWxodHRwXCIpOyB0aGlzLmggJiYgdGhpcy5qICYmIHRkKGEsIHRoaXMuaCwgdGhpcy5qKTsgdGhpcy5EICYmIHRoaXMuYS5zZXRUaW1lb3V0KHRoaXMuRCk7IHZhciBiID0gdGhpcy5hLCBjID0gdGhpcy5SOyBiLkIgPSAxOyBiLmYgPSBpYyhJKGEpKTsgYi5qID0gbnVsbDsgYi5GID0gITA7IGpjKGIsIGMpOyB9O1xyXG5nLk5hID0gZnVuY3Rpb24gKCkgeyBudWxsICE9IHRoaXMubCAmJiAodGhpcy5sID0gbnVsbCwgdGhpcy5hLmNhbmNlbCgpLCB0aGlzLmEgPSBudWxsLCB4Yyh0aGlzKSwgRigxOSkpOyB9O1xyXG5mdW5jdGlvbiB3YyhhKSB7IG51bGwgIT0gYS5sICYmIChrLmNsZWFyVGltZW91dChhLmwpLCBhLmwgPSBudWxsKTsgfVxyXG5mdW5jdGlvbiByYyhhLCBiKSB7IHZhciBjID0gbnVsbDsgaWYgKGEuYSA9PSBiKSB7XHJcbiAgICB3YyhhKTtcclxuICAgIGEuYSA9IG51bGw7XHJcbiAgICB2YXIgZCA9IDI7XHJcbn1cclxuZWxzZSBpZiAodmMoYS5iLCBiKSlcclxuICAgIGMgPSBiLmksIEJjKGEuYiwgYiksIGQgPSAxO1xyXG5lbHNlXHJcbiAgICByZXR1cm47IGEuQSA9IGIuSDsgaWYgKDAgIT0gYS51KVxyXG4gICAgaWYgKGIuYilcclxuICAgICAgICBpZiAoMSA9PSBkKSB7XHJcbiAgICAgICAgICAgIGMgPSBiLmogPyBiLmoubGVuZ3RoIDogMDtcclxuICAgICAgICAgICAgYiA9IHEoKSAtIGIucztcclxuICAgICAgICAgICAgdmFyIGUgPSBhLm87XHJcbiAgICAgICAgICAgIGQgPSBSYigpO1xyXG4gICAgICAgICAgICBkLmRpc3BhdGNoRXZlbnQobmV3IFViKGQsIGMsIGIsIGUpKTtcclxuICAgICAgICAgICAgRGMoYSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgQ2MoYSk7XHJcbiAgICBlbHNlIGlmIChlID0gYi5jLCAzID09IGUgfHwgMCA9PSBlICYmIDAgPCBhLkEgfHwgISgxID09IGQgJiYgemQoYSwgYikgfHwgMiA9PSBkICYmIHhjKGEpKSlcclxuICAgICAgICBzd2l0Y2ggKGMgJiYgMCA8IGMubGVuZ3RoICYmIChiID0gYS5iLCBiLmMgPSBiLmMuY29uY2F0KGMpKSwgZSkge1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICBNKGEsIDUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgIE0oYSwgMTApO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgIE0oYSwgNik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDogTShhLCAyKTtcclxuICAgICAgICB9IH1cclxuZnVuY3Rpb24gQWQoYSwgYikgeyB2YXIgYyA9IGEuQmEgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhLkdhKTsgYS5jIHx8IChjICo9IDIpOyByZXR1cm4gYyAqIGI7IH1cclxuZnVuY3Rpb24gTShhLCBiKSB7IGlmICgyID09IGIpIHtcclxuICAgIHZhciBjID0gbnVsbDtcclxuICAgIGEuYyAmJiAoYyA9IG51bGwpO1xyXG4gICAgdmFyIGQgPSBuKGEuVGEsIGEpO1xyXG4gICAgYyB8fCAoYyA9IG5ldyBRKFwiLy93d3cuZ29vZ2xlLmNvbS9pbWFnZXMvY2xlYXJkb3QuZ2lmXCIpLCBrLmxvY2F0aW9uICYmIFwiaHR0cFwiID09IGsubG9jYXRpb24ucHJvdG9jb2wgfHwgS2MoYywgXCJodHRwc1wiKSwgaWMoYykpO1xyXG4gICAgZ2QoYy50b1N0cmluZygpLCBkKTtcclxufVxyXG5lbHNlXHJcbiAgICBGKDIpOyBhLnUgPSAwOyBhLmMgJiYgYS5jLmxhKGIpOyB4ZChhKTsgdmQoYSk7IH1cclxuZy5UYSA9IGZ1bmN0aW9uIChhKSB7IGEgPyBGKDIpIDogRigxKTsgfTtcclxuZnVuY3Rpb24geGQoYSkgeyBhLnUgPSAwOyBhLkEgPSAtMTsgaWYgKGEuYykge1xyXG4gICAgaWYgKDAgIT0gY2QoYS5iKS5sZW5ndGggfHwgMCAhPSBhLmYubGVuZ3RoKVxyXG4gICAgICAgIGEuYi5jLmxlbmd0aCA9IDAsIHNhKGEuZiksIGEuZi5sZW5ndGggPSAwO1xyXG4gICAgYS5jLmthKCk7XHJcbn0gfVxyXG5mdW5jdGlvbiBBYyhhLCBiLCBjKSB7IHZhciBkID0gVWMoYyk7IGlmIChcIlwiICE9IGQuYylcclxuICAgIGIgJiYgTGMoZCwgYiArIFwiLlwiICsgZC5jKSwgTWMoZCwgZC5oKTtcclxuZWxzZSB7XHJcbiAgICB2YXIgZSA9IGsubG9jYXRpb247XHJcbiAgICBkID0gVmMoZS5wcm90b2NvbCwgYiA/IGIgKyBcIi5cIiArIGUuaG9zdG5hbWUgOiBlLmhvc3RuYW1lLCArZS5wb3J0LCBjKTtcclxufSBhLk4gJiYgQmEoYS5OLCBmdW5jdGlvbiAoZiwgaCkgeyBOKGQsIGgsIGYpOyB9KTsgYiA9IGEuczsgYyA9IGEuaGE7IGIgJiYgYyAmJiBOKGQsIGIsIGMpOyBOKGQsIFwiVkVSXCIsIGEub2EpOyB3ZChhLCBkKTsgcmV0dXJuIGQ7IH1cclxuZnVuY3Rpb24gbGMoYSwgYikgeyBpZiAoYiAmJiAhYS53KVxyXG4gICAgdGhyb3cgRXJyb3IoXCJDYW4ndCBjcmVhdGUgc2Vjb25kYXJ5IGRvbWFpbiBjYXBhYmxlIFhocklvIG9iamVjdC5cIik7IGIgPSBuZXcgVyhhLkVhKTsgYi5GID0gYS53OyByZXR1cm4gYjsgfVxyXG5mdW5jdGlvbiBEZCgpIHsgfVxyXG5nID0gRGQucHJvdG90eXBlO1xyXG5nLm5hID0gZnVuY3Rpb24gKCkgeyB9O1xyXG5nLm1hID0gZnVuY3Rpb24gKCkgeyB9O1xyXG5nLmxhID0gZnVuY3Rpb24gKCkgeyB9O1xyXG5nLmthID0gZnVuY3Rpb24gKCkgeyB9O1xyXG5nLkhhID0gZnVuY3Rpb24gKCkgeyB9O1xyXG5mdW5jdGlvbiBFZCgpIHsgaWYgKHcgJiYgISgxMCA8PSBOdW1iZXIoVmEpKSlcclxuICAgIHRocm93IEVycm9yKFwiRW52aXJvbm1lbnRhbCBlcnJvcjogbm8gYXZhaWxhYmxlIHRyYW5zcG9ydC5cIik7IH1cclxuRWQucHJvdG90eXBlLmEgPSBmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gbmV3IFkoYSwgYik7IH07XHJcbmZ1bmN0aW9uIFkoYSwgYikge1xyXG4gICAgQi5jYWxsKHRoaXMpO1xyXG4gICAgdGhpcy5hID0gbmV3IHVkKGIpO1xyXG4gICAgdGhpcy5sID0gYTtcclxuICAgIHRoaXMuYiA9IGIgJiYgYi5tZXNzYWdlVXJsUGFyYW1zIHx8IG51bGw7XHJcbiAgICBhID0gYiAmJiBiLm1lc3NhZ2VIZWFkZXJzIHx8IG51bGw7XHJcbiAgICBiICYmIGIuY2xpZW50UHJvdG9jb2xIZWFkZXJSZXF1aXJlZCAmJiAoYSA/IGFbXCJYLUNsaWVudC1Qcm90b2NvbFwiXSA9IFwid2ViY2hhbm5lbFwiIDogYSA9IHsgXCJYLUNsaWVudC1Qcm90b2NvbFwiOiBcIndlYmNoYW5uZWxcIiB9KTtcclxuICAgIHRoaXMuYS5qID0gYTtcclxuICAgIGEgPSBiICYmIGIuaW5pdE1lc3NhZ2VIZWFkZXJzIHx8IG51bGw7XHJcbiAgICBiICYmIGIubWVzc2FnZUNvbnRlbnRUeXBlICYmIChhID8gYVtcIlgtV2ViQ2hhbm5lbC1Db250ZW50LVR5cGVcIl0gPSBiLm1lc3NhZ2VDb250ZW50VHlwZSA6IGEgPSB7IFwiWC1XZWJDaGFubmVsLUNvbnRlbnQtVHlwZVwiOiBiLm1lc3NhZ2VDb250ZW50VHlwZSB9KTtcclxuICAgIGIgJiYgYi5wYSAmJiAoYSA/IGFbXCJYLVdlYkNoYW5uZWwtQ2xpZW50LVByb2ZpbGVcIl0gPSBiLnBhIDogYSA9IHsgXCJYLVdlYkNoYW5uZWwtQ2xpZW50LVByb2ZpbGVcIjogYi5wYSB9KTtcclxuICAgIHRoaXMuYS5GID1cclxuICAgICAgICBhO1xyXG4gICAgKGEgPSBiICYmIGIuaHR0cEhlYWRlcnNPdmVyd3JpdGVQYXJhbSkgJiYgIXdhKGEpICYmICh0aGlzLmEuaCA9IGEpO1xyXG4gICAgdGhpcy5oID0gYiAmJiBiLnN1cHBvcnRzQ3Jvc3NEb21haW5YaHIgfHwgITE7XHJcbiAgICB0aGlzLmcgPSBiICYmIGIuc2VuZFJhd0pzb24gfHwgITE7XHJcbiAgICAoYiA9IGIgJiYgYi5odHRwU2Vzc2lvbklkUGFyYW0pICYmICF3YShiKSAmJiAodGhpcy5hLnMgPSBiLCBhID0gdGhpcy5iLCBudWxsICE9PSBhICYmIGIgaW4gYSAmJiAoYSA9IHRoaXMuYiwgYiBpbiBhICYmIGRlbGV0ZSBhW2JdKSk7XHJcbiAgICB0aGlzLmYgPSBuZXcgWih0aGlzKTtcclxufVxyXG5yKFksIEIpO1xyXG5nID0gWS5wcm90b3R5cGU7XHJcbmcuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IFkuTS5hZGRFdmVudExpc3RlbmVyLmNhbGwodGhpcywgYSwgYiwgYywgZCk7IH07XHJcbmcucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IFkuTS5yZW1vdmVFdmVudExpc3RlbmVyLmNhbGwodGhpcywgYSwgYiwgYywgZCk7IH07XHJcbmcuS2EgPSBmdW5jdGlvbiAoKSB7IHRoaXMuYS5jID0gdGhpcy5mOyB0aGlzLmggJiYgKHRoaXMuYS53ID0gITApOyB2YXIgYSA9IHRoaXMuYSwgYiA9IHRoaXMubCwgYyA9IHRoaXMuYiB8fCB2b2lkIDA7IEYoMCk7IGEuUCA9IGI7IGEuTiA9IGMgfHwge307IGEuVSA9IGEuVzsgYS52ID0gQWMoYSwgbnVsbCwgYS5QKTsgRGMoYSk7IH07XHJcbmcuY2xvc2UgPSBmdW5jdGlvbiAoKSB7IEVjKHRoaXMuYSk7IH07XHJcbmcuTGEgPSBmdW5jdGlvbiAoYSkgeyBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGEpIHtcclxuICAgIHZhciBiID0ge307XHJcbiAgICBiLl9fZGF0YV9fID0gYTtcclxuICAgIHlkKHRoaXMuYSwgYik7XHJcbn1cclxuZWxzZVxyXG4gICAgdGhpcy5nID8gKGIgPSB7fSwgYi5fX2RhdGFfXyA9IHZiKGEpLCB5ZCh0aGlzLmEsIGIpKSA6IHlkKHRoaXMuYSwgYSk7IH07XHJcbmcuQyA9IGZ1bmN0aW9uICgpIHsgdGhpcy5hLmMgPSBudWxsOyBkZWxldGUgdGhpcy5mOyBFYyh0aGlzLmEpOyBkZWxldGUgdGhpcy5hOyBZLk0uQy5jYWxsKHRoaXMpOyB9O1xyXG5mdW5jdGlvbiBGZChhKSB7IGFjLmNhbGwodGhpcyk7IHZhciBiID0gYS5fX3NtX187IGlmIChiKSB7XHJcbiAgICBhOiB7XHJcbiAgICAgICAgZm9yICh2YXIgYyBpbiBiKSB7XHJcbiAgICAgICAgICAgIGEgPSBjO1xyXG4gICAgICAgICAgICBicmVhayBhO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhID0gdm9pZCAwO1xyXG4gICAgfVxyXG4gICAgKHRoaXMuYyA9IGEpID8gKGEgPSB0aGlzLmMsIHRoaXMuZGF0YSA9IG51bGwgIT09IGIgJiYgYSBpbiBiID8gYlthXSA6IHZvaWQgMCkgOiB0aGlzLmRhdGEgPSBiO1xyXG59XHJcbmVsc2VcclxuICAgIHRoaXMuZGF0YSA9IGE7IH1cclxucihGZCwgYWMpO1xyXG5mdW5jdGlvbiBHZCgpIHsgYmMuY2FsbCh0aGlzKTsgdGhpcy5zdGF0dXMgPSAxOyB9XHJcbnIoR2QsIGJjKTtcclxuZnVuY3Rpb24gWihhKSB7IHRoaXMuYSA9IGE7IH1cclxucihaLCBEZCk7XHJcbloucHJvdG90eXBlLm5hID0gZnVuY3Rpb24gKCkgeyB0aGlzLmEuZGlzcGF0Y2hFdmVudChcImFcIik7IH07XHJcbloucHJvdG90eXBlLm1hID0gZnVuY3Rpb24gKGEpIHsgdGhpcy5hLmRpc3BhdGNoRXZlbnQobmV3IEZkKGEpKTsgfTtcclxuWi5wcm90b3R5cGUubGEgPSBmdW5jdGlvbiAoYSkgeyB0aGlzLmEuZGlzcGF0Y2hFdmVudChuZXcgR2QoYSkpOyB9O1xyXG5aLnByb3RvdHlwZS5rYSA9IGZ1bmN0aW9uICgpIHsgdGhpcy5hLmRpc3BhdGNoRXZlbnQoXCJiXCIpOyB9OyAvKlxyXG5cbiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG5cbiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcblxuICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxuIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiovXHJcbkVkLnByb3RvdHlwZS5jcmVhdGVXZWJDaGFubmVsID0gRWQucHJvdG90eXBlLmE7XHJcblkucHJvdG90eXBlLnNlbmQgPSBZLnByb3RvdHlwZS5MYTtcclxuWS5wcm90b3R5cGUub3BlbiA9IFkucHJvdG90eXBlLkthO1xyXG5ZLnByb3RvdHlwZS5jbG9zZSA9IFkucHJvdG90eXBlLmNsb3NlO1xyXG5XYi5OT19FUlJPUiA9IDA7XHJcbldiLlRJTUVPVVQgPSA4O1xyXG5XYi5IVFRQX0VSUk9SID0gNjtcclxuWGIuQ09NUExFVEUgPSBcImNvbXBsZXRlXCI7XHJcbiRiLkV2ZW50VHlwZSA9IEc7XHJcbkcuT1BFTiA9IFwiYVwiO1xyXG5HLkNMT1NFID0gXCJiXCI7XHJcbkcuRVJST1IgPSBcImNcIjtcclxuRy5NRVNTQUdFID0gXCJkXCI7XHJcbkIucHJvdG90eXBlLmxpc3RlbiA9IEIucHJvdG90eXBlLnJhO1xyXG5XLnByb3RvdHlwZS5saXN0ZW5PbmNlID0gVy5wcm90b3R5cGUuc2E7XHJcblcucHJvdG90eXBlLmdldExhc3RFcnJvciA9IFcucHJvdG90eXBlLk1hO1xyXG5XLnByb3RvdHlwZS5nZXRMYXN0RXJyb3JDb2RlID0gVy5wcm90b3R5cGUucWE7XHJcblcucHJvdG90eXBlLmdldFN0YXR1cyA9IFcucHJvdG90eXBlLlM7XHJcblcucHJvdG90eXBlLmdldFJlc3BvbnNlSnNvbiA9IFcucHJvdG90eXBlLkphO1xyXG5XLnByb3RvdHlwZS5nZXRSZXNwb25zZVRleHQgPSBXLnByb3RvdHlwZS5ZO1xyXG5XLnByb3RvdHlwZS5zZW5kID0gVy5wcm90b3R5cGUuJDtcclxudmFyIGVzbSA9IHsgY3JlYXRlV2ViQ2hhbm5lbFRyYW5zcG9ydDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEVkOyB9LCBFcnJvckNvZGU6IFdiLCBFdmVudFR5cGU6IFhiLCBXZWJDaGFubmVsOiAkYiwgWGhySW86IFcgfTtcclxudmFyIGVzbV8xID0gZXNtLmNyZWF0ZVdlYkNoYW5uZWxUcmFuc3BvcnQ7XHJcbnZhciBlc21fMiA9IGVzbS5FcnJvckNvZGU7XHJcbnZhciBlc21fMyA9IGVzbS5FdmVudFR5cGU7XHJcbnZhciBlc21fNCA9IGVzbS5XZWJDaGFubmVsO1xyXG52YXIgZXNtXzUgPSBlc20uWGhySW87XG5cbmV4cG9ydCBkZWZhdWx0IGVzbTtcbmV4cG9ydCB7IGVzbV8yIGFzIEVycm9yQ29kZSwgZXNtXzMgYXMgRXZlbnRUeXBlLCBlc21fNCBhcyBXZWJDaGFubmVsLCBlc21fNSBhcyBYaHJJbywgZXNtXzEgYXMgY3JlYXRlV2ViQ2hhbm5lbFRyYW5zcG9ydCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtLmpzLm1hcFxuIiwiY29uc3QgZG9tTWFuaXB1bGF0aW9uID0gKCgpID0+IHtcclxuICAgIGNvbnN0IGxvZ0luV2FybmluZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNMb2dJbldhcm5pbmcnKTtcclxuICAgIGNvbnN0IGxvZ091dEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsb2dvdXQnKTtcclxuICAgIGNvbnN0IGxvZ0luQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xvZ2luJyk7XHJcbiAgICBjb25zdCBzaWduVXBCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2lnblVwJyk7XHJcbiAgICBjb25zdCBBY2NvdW50QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI0FjY291bnQnKTtcclxuICAgIGNvbnN0IE1haW5Db250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWFpbkNvbnRhaW5lcicpO1xyXG4gICAgbGV0IGxvZ0luTGlzdCA9IFtsb2dJbldhcm5pbmcsIGxvZ0luQnV0dG9uLCBzaWduVXBCdXR0b25dO1xyXG4gICAgbGV0IGxvZ091dExpc3QgPSBbbG9nT3V0QnV0dG9uLCBBY2NvdW50QnV0dG9uLCBNYWluQ29udGFpbmVyXTtcclxuICAgIGxldCBtZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21lbnVDb250YWluZXInKTtcclxuICAgIGxldCBtZW51QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI25hdkJ1dHRvbicpO1xyXG4gICAgbGV0IGNvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29udGVudENvbnRhaW5lcicpO1xyXG5cclxuICAgIGxldCB1bmRlcmxheWVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3VuZGVybGF5ZXInKTtcclxuXHJcbiAgICBmdW5jdGlvbiBsb2dPdXQoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb2dJbkxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbG9nSW5MaXN0W2ldLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxvZ091dExpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbG9nT3V0TGlzdFtpXS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGxvZ0luKCkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9nSW5MaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxvZ0luTGlzdFtpXS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb2dPdXRMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxvZ091dExpc3RbaV0uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICBmdW5jdGlvbiByZW1vdmVOb2RlKG5vZGUpIHtcclxuICAgICAgICB3aGlsZSAobm9kZS5maXJzdENoaWxkKSB7XHJcbiAgICAgICAgICAgIHJlbW92ZU5vZGUobm9kZS5maXJzdENoaWxkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbm9kZS5yZW1vdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBPcGVuTWVudSgpIHtcclxuXHJcbiAgICAgICAgbWVudS5hbmltYXRlKFtcclxuICAgICAgICAgICAgeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKC0zMDVweCknIH0sXHJcbiAgICAgICAgICAgIHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgwcHgpJyB9LFxyXG4gICAgICAgIF0sIHtcclxuICAgICAgICAgICAgZHVyYXRpb246IDMwMCxcclxuICAgICAgICAgICAgZWFzaW5nOiAnZWFzZS1vdXQnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHVuZGVybGF5ZXIuYW5pbWF0ZShbXHJcbiAgICAgICAgICAgIHsgd2lkdGg6ICcwcHgnIH0sXHJcbiAgICAgICAgICAgIHsgd2lkdGg6ICczMDVweCcgfSxcclxuICAgICAgICBdLCB7XHJcbiAgICAgICAgICAgIGR1cmF0aW9uOiAzMDAsXHJcbiAgICAgICAgICAgIGVhc2luZzogJ2Vhc2Utb3V0JyxcclxuICAgICAgICAgICAgZmlsbDogJ2ZvcndhcmRzJyxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY2xvc2VNZW51KCkge1xyXG4gICAgICAgIG1lbnUuYW5pbWF0ZShbXHJcbiAgICAgICAgICAgIHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgwcHgpJyB9LFxyXG4gICAgICAgICAgICB7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoLTMwNXB4KScgfSxcclxuICAgICAgICBdLCB7XHJcbiAgICAgICAgICAgIGR1cmF0aW9uOiAzMDAsXHJcbiAgICAgICAgICAgIGVhc2luZzogJ2Vhc2UtaW4nLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHVuZGVybGF5ZXIuYW5pbWF0ZShbXHJcbiAgICAgICAgICAgIHsgd2lkdGg6ICczMDVweCcgfSxcclxuICAgICAgICAgICAgeyB3aWR0aDogJzBweCcgfSxcclxuICAgICAgICBdLCB7XHJcbiAgICAgICAgICAgIGR1cmF0aW9uOiAzMDAsXHJcbiAgICAgICAgICAgIGVhc2luZzogJ2Vhc2UtaW4nLFxyXG5cclxuXHJcblxyXG4gICAgICAgICAgICBmaWxsOiAnZm9yd2FyZHMnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICByZW1vdmVOb2RlKFxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9LCAzMDApO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0b2dnbGVNZW51KCkge1xyXG4gICAgICAgIGlmIChtZW51LmNsYXNzTGlzdC5jb250YWlucyhcImhpZGRlblwiKSkge1xyXG4gICAgICAgICAgICBPcGVuTWVudSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNsb3NlTWVudSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG5cclxuXHJcblxyXG4gICAgcmV0dXJuIHsgbG9nT3V0LCBsb2dJbiwgdG9nZ2xlTWVudSwgbWVudSwgbWVudUJ1dHRvbiwgcmVtb3ZlTm9kZSB9XHJcblxyXG59KSgpO1xyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IHsgZG9tTWFuaXB1bGF0aW9uIH0iLCIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxyXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxyXG5MaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxyXG5LSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgV0lUSE9VVCBMSU1JVEFUSU9OIEFOWSBJTVBMSUVEXHJcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXHJcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXHJcblxyXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcclxuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTtcclxuICAgIHJlc3VsdC5kZWZhdWx0ID0gbW9kO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwKSB7XHJcbiAgICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gZ2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByaXZhdGVNYXAuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHByaXZhdGVNYXAsIHZhbHVlKSB7XHJcbiAgICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gc2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZU1hcC5zZXQocmVjZWl2ZXIsIHZhbHVlKTtcclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxyXG4iLCJpbXBvcnQgZmlyZWJhc2UgZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAZmlyZWJhc2UvY29tcG9uZW50JztcbmltcG9ydCB7IF9fYXdhaXRlciwgX19nZW5lcmF0b3IsIF9fc3ByZWFkLCBfX3ZhbHVlcywgX19hc3NpZ24gfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyBFcnJvckZhY3RvcnksIEZpcmViYXNlRXJyb3IgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBvcGVuRGIgfSBmcm9tICdpZGInO1xuXG52YXIgbmFtZSA9IFwiQGZpcmViYXNlL2luc3RhbGxhdGlvbnNcIjtcbnZhciB2ZXJzaW9uID0gXCIwLjQuMTBcIjtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIFBFTkRJTkdfVElNRU9VVF9NUyA9IDEwMDAwO1xyXG52YXIgUEFDS0FHRV9WRVJTSU9OID0gXCJ3OlwiICsgdmVyc2lvbjtcclxudmFyIElOVEVSTkFMX0FVVEhfVkVSU0lPTiA9ICdGSVNfdjInO1xyXG52YXIgSU5TVEFMTEFUSU9OU19BUElfVVJMID0gJ2h0dHBzOi8vZmlyZWJhc2VpbnN0YWxsYXRpb25zLmdvb2dsZWFwaXMuY29tL3YxJztcclxudmFyIFRPS0VOX0VYUElSQVRJT05fQlVGRkVSID0gNjAgKiA2MCAqIDEwMDA7IC8vIE9uZSBob3VyXHJcbnZhciBTRVJWSUNFID0gJ2luc3RhbGxhdGlvbnMnO1xyXG52YXIgU0VSVklDRV9OQU1FID0gJ0luc3RhbGxhdGlvbnMnO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgX2E7XHJcbnZhciBFUlJPUl9ERVNDUklQVElPTl9NQVAgPSAoX2EgPSB7fSxcclxuICAgIF9hW1wibWlzc2luZy1hcHAtY29uZmlnLXZhbHVlc1wiIC8qIE1JU1NJTkdfQVBQX0NPTkZJR19WQUxVRVMgKi9dID0gJ01pc3NpbmcgQXBwIGNvbmZpZ3VyYXRpb24gdmFsdWU6IFwieyR2YWx1ZU5hbWV9XCInLFxyXG4gICAgX2FbXCJub3QtcmVnaXN0ZXJlZFwiIC8qIE5PVF9SRUdJU1RFUkVEICovXSA9ICdGaXJlYmFzZSBJbnN0YWxsYXRpb24gaXMgbm90IHJlZ2lzdGVyZWQuJyxcclxuICAgIF9hW1wiaW5zdGFsbGF0aW9uLW5vdC1mb3VuZFwiIC8qIElOU1RBTExBVElPTl9OT1RfRk9VTkQgKi9dID0gJ0ZpcmViYXNlIEluc3RhbGxhdGlvbiBub3QgZm91bmQuJyxcclxuICAgIF9hW1wicmVxdWVzdC1mYWlsZWRcIiAvKiBSRVFVRVNUX0ZBSUxFRCAqL10gPSAneyRyZXF1ZXN0TmFtZX0gcmVxdWVzdCBmYWlsZWQgd2l0aCBlcnJvciBcInskc2VydmVyQ29kZX0geyRzZXJ2ZXJTdGF0dXN9OiB7JHNlcnZlck1lc3NhZ2V9XCInLFxyXG4gICAgX2FbXCJhcHAtb2ZmbGluZVwiIC8qIEFQUF9PRkZMSU5FICovXSA9ICdDb3VsZCBub3QgcHJvY2VzcyByZXF1ZXN0LiBBcHBsaWNhdGlvbiBvZmZsaW5lLicsXHJcbiAgICBfYVtcImRlbGV0ZS1wZW5kaW5nLXJlZ2lzdHJhdGlvblwiIC8qIERFTEVURV9QRU5ESU5HX1JFR0lTVFJBVElPTiAqL10gPSBcIkNhbid0IGRlbGV0ZSBpbnN0YWxsYXRpb24gd2hpbGUgdGhlcmUgaXMgYSBwZW5kaW5nIHJlZ2lzdHJhdGlvbiByZXF1ZXN0LlwiLFxyXG4gICAgX2EpO1xyXG52YXIgRVJST1JfRkFDVE9SWSA9IG5ldyBFcnJvckZhY3RvcnkoU0VSVklDRSwgU0VSVklDRV9OQU1FLCBFUlJPUl9ERVNDUklQVElPTl9NQVApO1xyXG4vKiogUmV0dXJucyB0cnVlIGlmIGVycm9yIGlzIGEgRmlyZWJhc2VFcnJvciB0aGF0IGlzIGJhc2VkIG9uIGFuIGVycm9yIGZyb20gdGhlIHNlcnZlci4gKi9cclxuZnVuY3Rpb24gaXNTZXJ2ZXJFcnJvcihlcnJvcikge1xyXG4gICAgcmV0dXJuIChlcnJvciBpbnN0YW5jZW9mIEZpcmViYXNlRXJyb3IgJiZcclxuICAgICAgICBlcnJvci5jb2RlLmluY2x1ZGVzKFwicmVxdWVzdC1mYWlsZWRcIiAvKiBSRVFVRVNUX0ZBSUxFRCAqLykpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGdldEluc3RhbGxhdGlvbnNFbmRwb2ludChfYSkge1xyXG4gICAgdmFyIHByb2plY3RJZCA9IF9hLnByb2plY3RJZDtcclxuICAgIHJldHVybiBJTlNUQUxMQVRJT05TX0FQSV9VUkwgKyBcIi9wcm9qZWN0cy9cIiArIHByb2plY3RJZCArIFwiL2luc3RhbGxhdGlvbnNcIjtcclxufVxyXG5mdW5jdGlvbiBleHRyYWN0QXV0aFRva2VuSW5mb0Zyb21SZXNwb25zZShyZXNwb25zZSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0b2tlbjogcmVzcG9uc2UudG9rZW4sXHJcbiAgICAgICAgcmVxdWVzdFN0YXR1czogMiAvKiBDT01QTEVURUQgKi8sXHJcbiAgICAgICAgZXhwaXJlc0luOiBnZXRFeHBpcmVzSW5Gcm9tUmVzcG9uc2VFeHBpcmVzSW4ocmVzcG9uc2UuZXhwaXJlc0luKSxcclxuICAgICAgICBjcmVhdGlvblRpbWU6IERhdGUubm93KClcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gZ2V0RXJyb3JGcm9tUmVzcG9uc2UocmVxdWVzdE5hbWUsIHJlc3BvbnNlKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJlc3BvbnNlSnNvbiwgZXJyb3JEYXRhO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCByZXNwb25zZS5qc29uKCldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlSnNvbiA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBlcnJvckRhdGEgPSByZXNwb25zZUpzb24uZXJyb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwicmVxdWVzdC1mYWlsZWRcIiAvKiBSRVFVRVNUX0ZBSUxFRCAqLywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdE5hbWU6IHJlcXVlc3ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmVyQ29kZTogZXJyb3JEYXRhLmNvZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJNZXNzYWdlOiBlcnJvckRhdGEubWVzc2FnZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZlclN0YXR1czogZXJyb3JEYXRhLnN0YXR1c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGdldEhlYWRlcnMoX2EpIHtcclxuICAgIHZhciBhcGlLZXkgPSBfYS5hcGlLZXk7XHJcbiAgICByZXR1cm4gbmV3IEhlYWRlcnMoe1xyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgJ3gtZ29vZy1hcGkta2V5JzogYXBpS2V5XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBnZXRIZWFkZXJzV2l0aEF1dGgoYXBwQ29uZmlnLCBfYSkge1xyXG4gICAgdmFyIHJlZnJlc2hUb2tlbiA9IF9hLnJlZnJlc2hUb2tlbjtcclxuICAgIHZhciBoZWFkZXJzID0gZ2V0SGVhZGVycyhhcHBDb25maWcpO1xyXG4gICAgaGVhZGVycy5hcHBlbmQoJ0F1dGhvcml6YXRpb24nLCBnZXRBdXRob3JpemF0aW9uSGVhZGVyKHJlZnJlc2hUb2tlbikpO1xyXG4gICAgcmV0dXJuIGhlYWRlcnM7XHJcbn1cclxuLyoqXHJcbiAqIENhbGxzIHRoZSBwYXNzZWQgaW4gZmV0Y2ggd3JhcHBlciBhbmQgcmV0dXJucyB0aGUgcmVzcG9uc2UuXHJcbiAqIElmIHRoZSByZXR1cm5lZCByZXNwb25zZSBoYXMgYSBzdGF0dXMgb2YgNXh4LCByZS1ydW5zIHRoZSBmdW5jdGlvbiBvbmNlIGFuZFxyXG4gKiByZXR1cm5zIHRoZSByZXNwb25zZS5cclxuICovXHJcbmZ1bmN0aW9uIHJldHJ5SWZTZXJ2ZXJFcnJvcihmbikge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciByZXN1bHQ7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGZuKCldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA+PSA1MDAgJiYgcmVzdWx0LnN0YXR1cyA8IDYwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuIFJldHJ5IHJlcXVlc3QuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmbigpXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc3VsdF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGdldEV4cGlyZXNJbkZyb21SZXNwb25zZUV4cGlyZXNJbihyZXNwb25zZUV4cGlyZXNJbikge1xyXG4gICAgLy8gVGhpcyB3b3JrcyBiZWNhdXNlIHRoZSBzZXJ2ZXIgd2lsbCBuZXZlciByZXNwb25kIHdpdGggZnJhY3Rpb25zIG9mIGEgc2Vjb25kLlxyXG4gICAgcmV0dXJuIE51bWJlcihyZXNwb25zZUV4cGlyZXNJbi5yZXBsYWNlKCdzJywgJzAwMCcpKTtcclxufVxyXG5mdW5jdGlvbiBnZXRBdXRob3JpemF0aW9uSGVhZGVyKHJlZnJlc2hUb2tlbikge1xyXG4gICAgcmV0dXJuIElOVEVSTkFMX0FVVEhfVkVSU0lPTiArIFwiIFwiICsgcmVmcmVzaFRva2VuO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbGxhdGlvblJlcXVlc3QoYXBwQ29uZmlnLCBfYSkge1xyXG4gICAgdmFyIGZpZCA9IF9hLmZpZDtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZW5kcG9pbnQsIGhlYWRlcnMsIGJvZHksIHJlcXVlc3QsIHJlc3BvbnNlLCByZXNwb25zZVZhbHVlLCByZWdpc3RlcmVkSW5zdGFsbGF0aW9uRW50cnk7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnQgPSBnZXRJbnN0YWxsYXRpb25zRW5kcG9pbnQoYXBwQ29uZmlnKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0gZ2V0SGVhZGVycyhhcHBDb25maWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJvZHkgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZDogZmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRoVmVyc2lvbjogSU5URVJOQUxfQVVUSF9WRVJTSU9OLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBJZDogYXBwQ29uZmlnLmFwcElkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZGtWZXJzaW9uOiBQQUNLQUdFX1ZFUlNJT05cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5KVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmV0cnlJZlNlcnZlckVycm9yKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoKGVuZHBvaW50LCByZXF1ZXN0KTsgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlc3BvbnNlLmpzb24oKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VWYWx1ZSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZWdpc3RlcmVkSW5zdGFsbGF0aW9uRW50cnkgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZDogcmVzcG9uc2VWYWx1ZS5maWQgfHwgZmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWdpc3RyYXRpb25TdGF0dXM6IDIgLyogQ09NUExFVEVEICovLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoVG9rZW46IHJlc3BvbnNlVmFsdWUucmVmcmVzaFRva2VuLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRoVG9rZW46IGV4dHJhY3RBdXRoVG9rZW5JbmZvRnJvbVJlc3BvbnNlKHJlc3BvbnNlVmFsdWUuYXV0aFRva2VuKVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlZ2lzdGVyZWRJbnN0YWxsYXRpb25FbnRyeV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbNCAvKnlpZWxkKi8sIGdldEVycm9yRnJvbVJlc3BvbnNlKCdDcmVhdGUgSW5zdGFsbGF0aW9uJywgcmVzcG9uc2UpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogdGhyb3cgX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKiogUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBhZnRlciBnaXZlbiB0aW1lIHBhc3Nlcy4gKi9cclxuZnVuY3Rpb24gc2xlZXAobXMpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgIHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpO1xyXG4gICAgfSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gYnVmZmVyVG9CYXNlNjRVcmxTYWZlKGFycmF5KSB7XHJcbiAgICB2YXIgYjY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgX19zcHJlYWQoYXJyYXkpKSk7XHJcbiAgICByZXR1cm4gYjY0LnJlcGxhY2UoL1xcKy9nLCAnLScpLnJlcGxhY2UoL1xcLy9nLCAnXycpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBWQUxJRF9GSURfUEFUVEVSTiA9IC9eW2NkZWZdW1xcdy1dezIxfSQvO1xyXG52YXIgSU5WQUxJRF9GSUQgPSAnJztcclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIG5ldyBGSUQgdXNpbmcgcmFuZG9tIHZhbHVlcyBmcm9tIFdlYiBDcnlwdG8gQVBJLlxyXG4gKiBSZXR1cm5zIGFuIGVtcHR5IHN0cmluZyBpZiBGSUQgZ2VuZXJhdGlvbiBmYWlscyBmb3IgYW55IHJlYXNvbi5cclxuICovXHJcbmZ1bmN0aW9uIGdlbmVyYXRlRmlkKCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICAvLyBBIHZhbGlkIEZJRCBoYXMgZXhhY3RseSAyMiBiYXNlNjQgY2hhcmFjdGVycywgd2hpY2ggaXMgMTMyIGJpdHMsIG9yIDE2LjVcclxuICAgICAgICAvLyBieXRlcy4gb3VyIGltcGxlbWVudGF0aW9uIGdlbmVyYXRlcyBhIDE3IGJ5dGUgYXJyYXkgaW5zdGVhZC5cclxuICAgICAgICB2YXIgZmlkQnl0ZUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoMTcpO1xyXG4gICAgICAgIHZhciBjcnlwdG9fMSA9IHNlbGYuY3J5cHRvIHx8IHNlbGYubXNDcnlwdG87XHJcbiAgICAgICAgY3J5cHRvXzEuZ2V0UmFuZG9tVmFsdWVzKGZpZEJ5dGVBcnJheSk7XHJcbiAgICAgICAgLy8gUmVwbGFjZSB0aGUgZmlyc3QgNCByYW5kb20gYml0cyB3aXRoIHRoZSBjb25zdGFudCBGSUQgaGVhZGVyIG9mIDBiMDExMS5cclxuICAgICAgICBmaWRCeXRlQXJyYXlbMF0gPSAxMTIgKyAoZmlkQnl0ZUFycmF5WzBdICUgMTYpO1xyXG4gICAgICAgIHZhciBmaWQgPSBlbmNvZGUoZmlkQnl0ZUFycmF5KTtcclxuICAgICAgICByZXR1cm4gVkFMSURfRklEX1BBVFRFUk4udGVzdChmaWQpID8gZmlkIDogSU5WQUxJRF9GSUQ7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoX2EpIHtcclxuICAgICAgICAvLyBGSUQgZ2VuZXJhdGlvbiBlcnJvcmVkXHJcbiAgICAgICAgcmV0dXJuIElOVkFMSURfRklEO1xyXG4gICAgfVxyXG59XHJcbi8qKiBDb252ZXJ0cyBhIEZJRCBVaW50OEFycmF5IHRvIGEgYmFzZTY0IHN0cmluZyByZXByZXNlbnRhdGlvbi4gKi9cclxuZnVuY3Rpb24gZW5jb2RlKGZpZEJ5dGVBcnJheSkge1xyXG4gICAgdmFyIGI2NFN0cmluZyA9IGJ1ZmZlclRvQmFzZTY0VXJsU2FmZShmaWRCeXRlQXJyYXkpO1xyXG4gICAgLy8gUmVtb3ZlIHRoZSAyM3JkIGNoYXJhY3RlciB0aGF0IHdhcyBhZGRlZCBiZWNhdXNlIG9mIHRoZSBleHRyYSA0IGJpdHMgYXQgdGhlXHJcbiAgICAvLyBlbmQgb2Ygb3VyIDE3IGJ5dGUgYXJyYXksIGFuZCB0aGUgJz0nIHBhZGRpbmcuXHJcbiAgICByZXR1cm4gYjY0U3RyaW5nLnN1YnN0cigwLCAyMik7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqIFJldHVybnMgYSBzdHJpbmcga2V5IHRoYXQgY2FuIGJlIHVzZWQgdG8gaWRlbnRpZnkgdGhlIGFwcC4gKi9cclxuZnVuY3Rpb24gZ2V0S2V5KGFwcENvbmZpZykge1xyXG4gICAgcmV0dXJuIGFwcENvbmZpZy5hcHBOYW1lICsgXCIhXCIgKyBhcHBDb25maWcuYXBwSWQ7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIGZpZENoYW5nZUNhbGxiYWNrcyA9IG5ldyBNYXAoKTtcclxuLyoqXHJcbiAqIENhbGxzIHRoZSBvbklkQ2hhbmdlIGNhbGxiYWNrcyB3aXRoIHRoZSBuZXcgRklEIHZhbHVlLCBhbmQgYnJvYWRjYXN0cyB0aGVcclxuICogY2hhbmdlIHRvIG90aGVyIHRhYnMuXHJcbiAqL1xyXG5mdW5jdGlvbiBmaWRDaGFuZ2VkKGFwcENvbmZpZywgZmlkKSB7XHJcbiAgICB2YXIga2V5ID0gZ2V0S2V5KGFwcENvbmZpZyk7XHJcbiAgICBjYWxsRmlkQ2hhbmdlQ2FsbGJhY2tzKGtleSwgZmlkKTtcclxuICAgIGJyb2FkY2FzdEZpZENoYW5nZShrZXksIGZpZCk7XHJcbn1cclxuZnVuY3Rpb24gYWRkQ2FsbGJhY2soYXBwQ29uZmlnLCBjYWxsYmFjaykge1xyXG4gICAgLy8gT3BlbiB0aGUgYnJvYWRjYXN0IGNoYW5uZWwgaWYgaXQncyBub3QgYWxyZWFkeSBvcGVuLFxyXG4gICAgLy8gdG8gYmUgYWJsZSB0byBsaXN0ZW4gdG8gY2hhbmdlIGV2ZW50cyBmcm9tIG90aGVyIHRhYnMuXHJcbiAgICBnZXRCcm9hZGNhc3RDaGFubmVsKCk7XHJcbiAgICB2YXIga2V5ID0gZ2V0S2V5KGFwcENvbmZpZyk7XHJcbiAgICB2YXIgY2FsbGJhY2tTZXQgPSBmaWRDaGFuZ2VDYWxsYmFja3MuZ2V0KGtleSk7XHJcbiAgICBpZiAoIWNhbGxiYWNrU2V0KSB7XHJcbiAgICAgICAgY2FsbGJhY2tTZXQgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgZmlkQ2hhbmdlQ2FsbGJhY2tzLnNldChrZXksIGNhbGxiYWNrU2V0KTtcclxuICAgIH1cclxuICAgIGNhbGxiYWNrU2V0LmFkZChjYWxsYmFjayk7XHJcbn1cclxuZnVuY3Rpb24gcmVtb3ZlQ2FsbGJhY2soYXBwQ29uZmlnLCBjYWxsYmFjaykge1xyXG4gICAgdmFyIGtleSA9IGdldEtleShhcHBDb25maWcpO1xyXG4gICAgdmFyIGNhbGxiYWNrU2V0ID0gZmlkQ2hhbmdlQ2FsbGJhY2tzLmdldChrZXkpO1xyXG4gICAgaWYgKCFjYWxsYmFja1NldCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNhbGxiYWNrU2V0LmRlbGV0ZShjYWxsYmFjayk7XHJcbiAgICBpZiAoY2FsbGJhY2tTZXQuc2l6ZSA9PT0gMCkge1xyXG4gICAgICAgIGZpZENoYW5nZUNhbGxiYWNrcy5kZWxldGUoa2V5KTtcclxuICAgIH1cclxuICAgIC8vIENsb3NlIGJyb2FkY2FzdCBjaGFubmVsIGlmIHRoZXJlIGFyZSBubyBtb3JlIGNhbGxiYWNrcy5cclxuICAgIGNsb3NlQnJvYWRjYXN0Q2hhbm5lbCgpO1xyXG59XHJcbmZ1bmN0aW9uIGNhbGxGaWRDaGFuZ2VDYWxsYmFja3Moa2V5LCBmaWQpIHtcclxuICAgIHZhciBlXzEsIF9hO1xyXG4gICAgdmFyIGNhbGxiYWNrcyA9IGZpZENoYW5nZUNhbGxiYWNrcy5nZXQoa2V5KTtcclxuICAgIGlmICghY2FsbGJhY2tzKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBmb3IgKHZhciBjYWxsYmFja3NfMSA9IF9fdmFsdWVzKGNhbGxiYWNrcyksIGNhbGxiYWNrc18xXzEgPSBjYWxsYmFja3NfMS5uZXh0KCk7ICFjYWxsYmFja3NfMV8xLmRvbmU7IGNhbGxiYWNrc18xXzEgPSBjYWxsYmFja3NfMS5uZXh0KCkpIHtcclxuICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gY2FsbGJhY2tzXzFfMS52YWx1ZTtcclxuICAgICAgICAgICAgY2FsbGJhY2soZmlkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrc18xXzEgJiYgIWNhbGxiYWNrc18xXzEuZG9uZSAmJiAoX2EgPSBjYWxsYmFja3NfMS5yZXR1cm4pKSBfYS5jYWxsKGNhbGxiYWNrc18xKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGJyb2FkY2FzdEZpZENoYW5nZShrZXksIGZpZCkge1xyXG4gICAgdmFyIGNoYW5uZWwgPSBnZXRCcm9hZGNhc3RDaGFubmVsKCk7XHJcbiAgICBpZiAoY2hhbm5lbCkge1xyXG4gICAgICAgIGNoYW5uZWwucG9zdE1lc3NhZ2UoeyBrZXk6IGtleSwgZmlkOiBmaWQgfSk7XHJcbiAgICB9XHJcbiAgICBjbG9zZUJyb2FkY2FzdENoYW5uZWwoKTtcclxufVxyXG52YXIgYnJvYWRjYXN0Q2hhbm5lbCA9IG51bGw7XHJcbi8qKiBPcGVucyBhbmQgcmV0dXJucyBhIEJyb2FkY2FzdENoYW5uZWwgaWYgaXQgaXMgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyLiAqL1xyXG5mdW5jdGlvbiBnZXRCcm9hZGNhc3RDaGFubmVsKCkge1xyXG4gICAgaWYgKCFicm9hZGNhc3RDaGFubmVsICYmICdCcm9hZGNhc3RDaGFubmVsJyBpbiBzZWxmKSB7XHJcbiAgICAgICAgYnJvYWRjYXN0Q2hhbm5lbCA9IG5ldyBCcm9hZGNhc3RDaGFubmVsKCdbRmlyZWJhc2VdIEZJRCBDaGFuZ2UnKTtcclxuICAgICAgICBicm9hZGNhc3RDaGFubmVsLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGNhbGxGaWRDaGFuZ2VDYWxsYmFja3MoZS5kYXRhLmtleSwgZS5kYXRhLmZpZCk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiBicm9hZGNhc3RDaGFubmVsO1xyXG59XHJcbmZ1bmN0aW9uIGNsb3NlQnJvYWRjYXN0Q2hhbm5lbCgpIHtcclxuICAgIGlmIChmaWRDaGFuZ2VDYWxsYmFja3Muc2l6ZSA9PT0gMCAmJiBicm9hZGNhc3RDaGFubmVsKSB7XHJcbiAgICAgICAgYnJvYWRjYXN0Q2hhbm5lbC5jbG9zZSgpO1xyXG4gICAgICAgIGJyb2FkY2FzdENoYW5uZWwgPSBudWxsO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBEQVRBQkFTRV9OQU1FID0gJ2ZpcmViYXNlLWluc3RhbGxhdGlvbnMtZGF0YWJhc2UnO1xyXG52YXIgREFUQUJBU0VfVkVSU0lPTiA9IDE7XHJcbnZhciBPQkpFQ1RfU1RPUkVfTkFNRSA9ICdmaXJlYmFzZS1pbnN0YWxsYXRpb25zLXN0b3JlJztcclxudmFyIGRiUHJvbWlzZSA9IG51bGw7XHJcbmZ1bmN0aW9uIGdldERiUHJvbWlzZSgpIHtcclxuICAgIGlmICghZGJQcm9taXNlKSB7XHJcbiAgICAgICAgZGJQcm9taXNlID0gb3BlbkRiKERBVEFCQVNFX05BTUUsIERBVEFCQVNFX1ZFUlNJT04sIGZ1bmN0aW9uICh1cGdyYWRlREIpIHtcclxuICAgICAgICAgICAgLy8gV2UgZG9uJ3QgdXNlICdicmVhaycgaW4gdGhpcyBzd2l0Y2ggc3RhdGVtZW50LCB0aGUgZmFsbC10aHJvdWdoXHJcbiAgICAgICAgICAgIC8vIGJlaGF2aW9yIGlzIHdoYXQgd2Ugd2FudCwgYmVjYXVzZSBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgdmVyc2lvbnMgYmV0d2VlblxyXG4gICAgICAgICAgICAvLyB0aGUgb2xkIHZlcnNpb24gYW5kIHRoZSBjdXJyZW50IHZlcnNpb24sIHdlIHdhbnQgQUxMIHRoZSBtaWdyYXRpb25zXHJcbiAgICAgICAgICAgIC8vIHRoYXQgY29ycmVzcG9uZCB0byB0aG9zZSB2ZXJzaW9ucyB0byBydW4sIG5vdCBvbmx5IHRoZSBsYXN0IG9uZS5cclxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlZmF1bHQtY2FzZVxyXG4gICAgICAgICAgICBzd2l0Y2ggKHVwZ3JhZGVEQi5vbGRWZXJzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgdXBncmFkZURCLmNyZWF0ZU9iamVjdFN0b3JlKE9CSkVDVF9TVE9SRV9OQU1FKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRiUHJvbWlzZTtcclxufVxyXG4vKiogQXNzaWducyBvciBvdmVyd3JpdGVzIHRoZSByZWNvcmQgZm9yIHRoZSBnaXZlbiBrZXkgd2l0aCB0aGUgZ2l2ZW4gdmFsdWUuICovXHJcbmZ1bmN0aW9uIHNldChhcHBDb25maWcsIHZhbHVlKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGtleSwgZGIsIHR4LCBvYmplY3RTdG9yZSwgb2xkVmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAga2V5ID0gZ2V0S2V5KGFwcENvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZ2V0RGJQcm9taXNlKCldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIGRiID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHR4ID0gZGIudHJhbnNhY3Rpb24oT0JKRUNUX1NUT1JFX05BTUUsICdyZWFkd3JpdGUnKTtcclxuICAgICAgICAgICAgICAgICAgICBvYmplY3RTdG9yZSA9IHR4Lm9iamVjdFN0b3JlKE9CSkVDVF9TVE9SRV9OQU1FKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBvYmplY3RTdG9yZS5nZXQoa2V5KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWUgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgb2JqZWN0U3RvcmUucHV0KHZhbHVlLCBrZXkpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdHguY29tcGxldGVdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW9sZFZhbHVlIHx8IG9sZFZhbHVlLmZpZCAhPT0gdmFsdWUuZmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZENoYW5nZWQoYXBwQ29uZmlnLCB2YWx1ZS5maWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdmFsdWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG4vKiogUmVtb3ZlcyByZWNvcmQocykgZnJvbSB0aGUgb2JqZWN0U3RvcmUgdGhhdCBtYXRjaCB0aGUgZ2l2ZW4ga2V5LiAqL1xyXG5mdW5jdGlvbiByZW1vdmUoYXBwQ29uZmlnKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGtleSwgZGIsIHR4O1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIGtleSA9IGdldEtleShhcHBDb25maWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGdldERiUHJvbWlzZSgpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBkYiA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0eCA9IGRiLnRyYW5zYWN0aW9uKE9CSkVDVF9TVE9SRV9OQU1FLCAncmVhZHdyaXRlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdHgub2JqZWN0U3RvcmUoT0JKRUNUX1NUT1JFX05BTUUpLmRlbGV0ZShrZXkpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdHguY29tcGxldGVdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKiBBdG9taWNhbGx5IHVwZGF0ZXMgYSByZWNvcmQgd2l0aCB0aGUgcmVzdWx0IG9mIHVwZGF0ZUZuLCB3aGljaCBnZXRzXHJcbiAqIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHZhbHVlLiBJZiBuZXdWYWx1ZSBpcyB1bmRlZmluZWQsIHRoZSByZWNvcmQgaXNcclxuICogZGVsZXRlZCBpbnN0ZWFkLlxyXG4gKiBAcmV0dXJuIFVwZGF0ZWQgdmFsdWVcclxuICovXHJcbmZ1bmN0aW9uIHVwZGF0ZShhcHBDb25maWcsIHVwZGF0ZUZuKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGtleSwgZGIsIHR4LCBzdG9yZSwgb2xkVmFsdWUsIG5ld1ZhbHVlO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIGtleSA9IGdldEtleShhcHBDb25maWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGdldERiUHJvbWlzZSgpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBkYiA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0eCA9IGRiLnRyYW5zYWN0aW9uKE9CSkVDVF9TVE9SRV9OQU1FLCAncmVhZHdyaXRlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RvcmUgPSB0eC5vYmplY3RTdG9yZShPQkpFQ1RfU1RPUkVfTkFNRSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgc3RvcmUuZ2V0KGtleSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gdXBkYXRlRm4ob2xkVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpKSByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzdG9yZS5kZWxldGUoa2V5KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzQgLyp5aWVsZCovLCBzdG9yZS5wdXQobmV3VmFsdWUsIGtleSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDY7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbNCAvKnlpZWxkKi8sIHR4LmNvbXBsZXRlXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzpcclxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICYmICghb2xkVmFsdWUgfHwgb2xkVmFsdWUuZmlkICE9PSBuZXdWYWx1ZS5maWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZENoYW5nZWQoYXBwQ29uZmlnLCBuZXdWYWx1ZS5maWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgbmV3VmFsdWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVXBkYXRlcyBhbmQgcmV0dXJucyB0aGUgSW5zdGFsbGF0aW9uRW50cnkgZnJvbSB0aGUgZGF0YWJhc2UuXHJcbiAqIEFsc28gdHJpZ2dlcnMgYSByZWdpc3RyYXRpb24gcmVxdWVzdCBpZiBpdCBpcyBuZWNlc3NhcnkgYW5kIHBvc3NpYmxlLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0SW5zdGFsbGF0aW9uRW50cnkoYXBwQ29uZmlnKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJlZ2lzdHJhdGlvblByb21pc2UsIGluc3RhbGxhdGlvbkVudHJ5LCBfYTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdXBkYXRlKGFwcENvbmZpZywgZnVuY3Rpb24gKG9sZEVudHJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnN0YWxsYXRpb25FbnRyeSA9IHVwZGF0ZU9yQ3JlYXRlSW5zdGFsbGF0aW9uRW50cnkob2xkRW50cnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW50cnlXaXRoUHJvbWlzZSA9IHRyaWdnZXJSZWdpc3RyYXRpb25JZk5lY2Vzc2FyeShhcHBDb25maWcsIGluc3RhbGxhdGlvbkVudHJ5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0cmF0aW9uUHJvbWlzZSA9IGVudHJ5V2l0aFByb21pc2UucmVnaXN0cmF0aW9uUHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVudHJ5V2l0aFByb21pc2UuaW5zdGFsbGF0aW9uRW50cnk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbGxhdGlvbkVudHJ5ID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGluc3RhbGxhdGlvbkVudHJ5LmZpZCA9PT0gSU5WQUxJRF9GSUQpKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICBfYSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlZ2lzdHJhdGlvblByb21pc2VdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOiBcclxuICAgICAgICAgICAgICAgIC8vIEZJRCBnZW5lcmF0aW9uIGZhaWxlZC4gV2FpdGluZyBmb3IgdGhlIEZJRCBmcm9tIHRoZSBzZXJ2ZXIuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgKF9hLmluc3RhbGxhdGlvbkVudHJ5ID0gX2Iuc2VudCgpLCBfYSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzIgLypyZXR1cm4qLywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YWxsYXRpb25FbnRyeTogaW5zdGFsbGF0aW9uRW50cnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lzdHJhdGlvblByb21pc2U6IHJlZ2lzdHJhdGlvblByb21pc2VcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgSW5zdGFsbGF0aW9uIEVudHJ5IGlmIG9uZSBkb2VzIG5vdCBleGlzdC5cclxuICogQWxzbyBjbGVhcnMgdGltZWQgb3V0IHBlbmRpbmcgcmVxdWVzdHMuXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVPckNyZWF0ZUluc3RhbGxhdGlvbkVudHJ5KG9sZEVudHJ5KSB7XHJcbiAgICB2YXIgZW50cnkgPSBvbGRFbnRyeSB8fCB7XHJcbiAgICAgICAgZmlkOiBnZW5lcmF0ZUZpZCgpLFxyXG4gICAgICAgIHJlZ2lzdHJhdGlvblN0YXR1czogMCAvKiBOT1RfU1RBUlRFRCAqL1xyXG4gICAgfTtcclxuICAgIHJldHVybiBjbGVhclRpbWVkT3V0UmVxdWVzdChlbnRyeSk7XHJcbn1cclxuLyoqXHJcbiAqIElmIHRoZSBGaXJlYmFzZSBJbnN0YWxsYXRpb24gaXMgbm90IHJlZ2lzdGVyZWQgeWV0LCB0aGlzIHdpbGwgdHJpZ2dlciB0aGVcclxuICogcmVnaXN0cmF0aW9uIGFuZCByZXR1cm4gYW4gSW5Qcm9ncmVzc0luc3RhbGxhdGlvbkVudHJ5LlxyXG4gKlxyXG4gKiBJZiByZWdpc3RyYXRpb25Qcm9taXNlIGRvZXMgbm90IGV4aXN0LCB0aGUgaW5zdGFsbGF0aW9uRW50cnkgaXMgZ3VhcmFudGVlZFxyXG4gKiB0byBiZSByZWdpc3RlcmVkLlxyXG4gKi9cclxuZnVuY3Rpb24gdHJpZ2dlclJlZ2lzdHJhdGlvbklmTmVjZXNzYXJ5KGFwcENvbmZpZywgaW5zdGFsbGF0aW9uRW50cnkpIHtcclxuICAgIGlmIChpbnN0YWxsYXRpb25FbnRyeS5yZWdpc3RyYXRpb25TdGF0dXMgPT09IDAgLyogTk9UX1NUQVJURUQgKi8pIHtcclxuICAgICAgICBpZiAoIW5hdmlnYXRvci5vbkxpbmUpIHtcclxuICAgICAgICAgICAgLy8gUmVnaXN0cmF0aW9uIHJlcXVpcmVkIGJ1dCBhcHAgaXMgb2ZmbGluZS5cclxuICAgICAgICAgICAgdmFyIHJlZ2lzdHJhdGlvblByb21pc2VXaXRoRXJyb3IgPSBQcm9taXNlLnJlamVjdChFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImFwcC1vZmZsaW5lXCIgLyogQVBQX09GRkxJTkUgKi8pKTtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbGxhdGlvbkVudHJ5OiBpbnN0YWxsYXRpb25FbnRyeSxcclxuICAgICAgICAgICAgICAgIHJlZ2lzdHJhdGlvblByb21pc2U6IHJlZ2lzdHJhdGlvblByb21pc2VXaXRoRXJyb3JcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVHJ5IHJlZ2lzdGVyaW5nLiBDaGFuZ2Ugc3RhdHVzIHRvIElOX1BST0dSRVNTLlxyXG4gICAgICAgIHZhciBpblByb2dyZXNzRW50cnkgPSB7XHJcbiAgICAgICAgICAgIGZpZDogaW5zdGFsbGF0aW9uRW50cnkuZmlkLFxyXG4gICAgICAgICAgICByZWdpc3RyYXRpb25TdGF0dXM6IDEgLyogSU5fUFJPR1JFU1MgKi8sXHJcbiAgICAgICAgICAgIHJlZ2lzdHJhdGlvblRpbWU6IERhdGUubm93KClcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciByZWdpc3RyYXRpb25Qcm9taXNlID0gcmVnaXN0ZXJJbnN0YWxsYXRpb24oYXBwQ29uZmlnLCBpblByb2dyZXNzRW50cnkpO1xyXG4gICAgICAgIHJldHVybiB7IGluc3RhbGxhdGlvbkVudHJ5OiBpblByb2dyZXNzRW50cnksIHJlZ2lzdHJhdGlvblByb21pc2U6IHJlZ2lzdHJhdGlvblByb21pc2UgfTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGluc3RhbGxhdGlvbkVudHJ5LnJlZ2lzdHJhdGlvblN0YXR1cyA9PT0gMSAvKiBJTl9QUk9HUkVTUyAqLykge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGluc3RhbGxhdGlvbkVudHJ5OiBpbnN0YWxsYXRpb25FbnRyeSxcclxuICAgICAgICAgICAgcmVnaXN0cmF0aW9uUHJvbWlzZTogd2FpdFVudGlsRmlkUmVnaXN0cmF0aW9uKGFwcENvbmZpZylcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHsgaW5zdGFsbGF0aW9uRW50cnk6IGluc3RhbGxhdGlvbkVudHJ5IH07XHJcbiAgICB9XHJcbn1cclxuLyoqIFRoaXMgd2lsbCBiZSBleGVjdXRlZCBvbmx5IG9uY2UgZm9yIGVhY2ggbmV3IEZpcmViYXNlIEluc3RhbGxhdGlvbi4gKi9cclxuZnVuY3Rpb24gcmVnaXN0ZXJJbnN0YWxsYXRpb24oYXBwQ29uZmlnLCBpbnN0YWxsYXRpb25FbnRyeSkge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciByZWdpc3RlcmVkSW5zdGFsbGF0aW9uRW50cnksIGVfMTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzAsIDIsICwgN10pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGNyZWF0ZUluc3RhbGxhdGlvblJlcXVlc3QoYXBwQ29uZmlnLCBpbnN0YWxsYXRpb25FbnRyeSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyZWRJbnN0YWxsYXRpb25FbnRyeSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgc2V0KGFwcENvbmZpZywgcmVnaXN0ZXJlZEluc3RhbGxhdGlvbkVudHJ5KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgZV8xID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGlzU2VydmVyRXJyb3IoZV8xKSAmJiBlXzEuc2VydmVyQ29kZSA9PT0gNDA5KSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU2VydmVyIHJldHVybmVkIGEgXCJGSUQgY2FuIG5vdCBiZSB1c2VkXCIgZXJyb3IuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gR2VuZXJhdGUgYSBuZXcgSUQgbmV4dCB0aW1lLlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlbW92ZShhcHBDb25maWcpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAvLyBTZXJ2ZXIgcmV0dXJuZWQgYSBcIkZJRCBjYW4gbm90IGJlIHVzZWRcIiBlcnJvci5cclxuICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBhIG5ldyBJRCBuZXh0IHRpbWUuXHJcbiAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBcclxuICAgICAgICAgICAgICAgIC8vIFJlZ2lzdHJhdGlvbiBmYWlsZWQuIFNldCBGSUQgYXMgbm90IHJlZ2lzdGVyZWQuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzZXQoYXBwQ29uZmlnLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZDogaW5zdGFsbGF0aW9uRW50cnkuZmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWdpc3RyYXRpb25TdGF0dXM6IDAgLyogTk9UX1NUQVJURUQgKi9cclxuICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVnaXN0cmF0aW9uIGZhaWxlZC4gU2V0IEZJRCBhcyBub3QgcmVnaXN0ZXJlZC5cclxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA2O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA2OiB0aHJvdyBlXzE7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLyoqIENhbGwgaWYgRklEIHJlZ2lzdHJhdGlvbiBpcyBwZW5kaW5nIGluIGFub3RoZXIgcmVxdWVzdC4gKi9cclxuZnVuY3Rpb24gd2FpdFVudGlsRmlkUmVnaXN0cmF0aW9uKGFwcENvbmZpZykge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbnRyeSwgX2EsIGluc3RhbGxhdGlvbkVudHJ5LCByZWdpc3RyYXRpb25Qcm9taXNlO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB1cGRhdGVJbnN0YWxsYXRpb25SZXF1ZXN0KGFwcENvbmZpZyldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5ID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShlbnRyeS5yZWdpc3RyYXRpb25TdGF0dXMgPT09IDEgLyogSU5fUFJPR1JFU1MgKi8pKSByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGVJbnN0YWxsYXRpb24gcmVxdWVzdCBzdGlsbCBpbiBwcm9ncmVzcy5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzbGVlcCgxMDApXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGVJbnN0YWxsYXRpb24gcmVxdWVzdCBzdGlsbCBpbiBwcm9ncmVzcy5cclxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdXBkYXRlSW5zdGFsbGF0aW9uUmVxdWVzdChhcHBDb25maWcpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICBlbnRyeSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShlbnRyeS5yZWdpc3RyYXRpb25TdGF0dXMgPT09IDAgLyogTk9UX1NUQVJURUQgKi8pKSByZXR1cm4gWzMgLypicmVhayovLCA3XTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBnZXRJbnN0YWxsYXRpb25FbnRyeShhcHBDb25maWcpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgICAgICAgICBfYSA9IF9iLnNlbnQoKSwgaW5zdGFsbGF0aW9uRW50cnkgPSBfYS5pbnN0YWxsYXRpb25FbnRyeSwgcmVnaXN0cmF0aW9uUHJvbWlzZSA9IF9hLnJlZ2lzdHJhdGlvblByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlZ2lzdHJhdGlvblByb21pc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlZ2lzdHJhdGlvblByb21pc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgbm8gcmVnaXN0cmF0aW9uUHJvbWlzZSwgZW50cnkgaXMgcmVnaXN0ZXJlZC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGluc3RhbGxhdGlvbkVudHJ5XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IHJldHVybiBbMiAvKnJldHVybiovLCBlbnRyeV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKiBDYWxsZWQgb25seSBpZiB0aGVyZSBpcyBhIENyZWF0ZUluc3RhbGxhdGlvbiByZXF1ZXN0IGluIHByb2dyZXNzLlxyXG4gKlxyXG4gKiBVcGRhdGVzIHRoZSBJbnN0YWxsYXRpb25FbnRyeSBpbiB0aGUgREIgYmFzZWQgb24gdGhlIHN0YXR1cyBvZiB0aGVcclxuICogQ3JlYXRlSW5zdGFsbGF0aW9uIHJlcXVlc3QuXHJcbiAqXHJcbiAqIFJldHVybnMgdGhlIHVwZGF0ZWQgSW5zdGFsbGF0aW9uRW50cnkuXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVJbnN0YWxsYXRpb25SZXF1ZXN0KGFwcENvbmZpZykge1xyXG4gICAgcmV0dXJuIHVwZGF0ZShhcHBDb25maWcsIGZ1bmN0aW9uIChvbGRFbnRyeSkge1xyXG4gICAgICAgIGlmICghb2xkRW50cnkpIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJpbnN0YWxsYXRpb24tbm90LWZvdW5kXCIgLyogSU5TVEFMTEFUSU9OX05PVF9GT1VORCAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVkT3V0UmVxdWVzdChvbGRFbnRyeSk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBjbGVhclRpbWVkT3V0UmVxdWVzdChlbnRyeSkge1xyXG4gICAgaWYgKGhhc0luc3RhbGxhdGlvblJlcXVlc3RUaW1lZE91dChlbnRyeSkpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBmaWQ6IGVudHJ5LmZpZCxcclxuICAgICAgICAgICAgcmVnaXN0cmF0aW9uU3RhdHVzOiAwIC8qIE5PVF9TVEFSVEVEICovXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiBlbnRyeTtcclxufVxyXG5mdW5jdGlvbiBoYXNJbnN0YWxsYXRpb25SZXF1ZXN0VGltZWRPdXQoaW5zdGFsbGF0aW9uRW50cnkpIHtcclxuICAgIHJldHVybiAoaW5zdGFsbGF0aW9uRW50cnkucmVnaXN0cmF0aW9uU3RhdHVzID09PSAxIC8qIElOX1BST0dSRVNTICovICYmXHJcbiAgICAgICAgaW5zdGFsbGF0aW9uRW50cnkucmVnaXN0cmF0aW9uVGltZSArIFBFTkRJTkdfVElNRU9VVF9NUyA8IERhdGUubm93KCkpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGdlbmVyYXRlQXV0aFRva2VuUmVxdWVzdChfYSwgaW5zdGFsbGF0aW9uRW50cnkpIHtcclxuICAgIHZhciBhcHBDb25maWcgPSBfYS5hcHBDb25maWcsIHBsYXRmb3JtTG9nZ2VyUHJvdmlkZXIgPSBfYS5wbGF0Zm9ybUxvZ2dlclByb3ZpZGVyO1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbmRwb2ludCwgaGVhZGVycywgcGxhdGZvcm1Mb2dnZXIsIGJvZHksIHJlcXVlc3QsIHJlc3BvbnNlLCByZXNwb25zZVZhbHVlLCBjb21wbGV0ZWRBdXRoVG9rZW47XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnQgPSBnZXRHZW5lcmF0ZUF1dGhUb2tlbkVuZHBvaW50KGFwcENvbmZpZywgaW5zdGFsbGF0aW9uRW50cnkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnMgPSBnZXRIZWFkZXJzV2l0aEF1dGgoYXBwQ29uZmlnLCBpbnN0YWxsYXRpb25FbnRyeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGxhdGZvcm1Mb2dnZXIgPSBwbGF0Zm9ybUxvZ2dlclByb3ZpZGVyLmdldEltbWVkaWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsOiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXRmb3JtTG9nZ2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMuYXBwZW5kKCd4LWZpcmViYXNlLWNsaWVudCcsIHBsYXRmb3JtTG9nZ2VyLmdldFBsYXRmb3JtSW5mb1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYm9keSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFsbGF0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZGtWZXJzaW9uOiBQQUNLQUdFX1ZFUlNJT05cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXRyeUlmU2VydmVyRXJyb3IoZnVuY3Rpb24gKCkgeyByZXR1cm4gZmV0Y2goZW5kcG9pbnQsIHJlcXVlc3QpOyB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzcG9uc2UuanNvbigpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZVZhbHVlID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlZEF1dGhUb2tlbiA9IGV4dHJhY3RBdXRoVG9rZW5JbmZvRnJvbVJlc3BvbnNlKHJlc3BvbnNlVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBjb21wbGV0ZWRBdXRoVG9rZW5dO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzQgLyp5aWVsZCovLCBnZXRFcnJvckZyb21SZXNwb25zZSgnR2VuZXJhdGUgQXV0aCBUb2tlbicsIHJlc3BvbnNlKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHRocm93IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gZ2V0R2VuZXJhdGVBdXRoVG9rZW5FbmRwb2ludChhcHBDb25maWcsIF9hKSB7XHJcbiAgICB2YXIgZmlkID0gX2EuZmlkO1xyXG4gICAgcmV0dXJuIGdldEluc3RhbGxhdGlvbnNFbmRwb2ludChhcHBDb25maWcpICsgXCIvXCIgKyBmaWQgKyBcIi9hdXRoVG9rZW5zOmdlbmVyYXRlXCI7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFJldHVybnMgYSB2YWxpZCBhdXRoZW50aWNhdGlvbiB0b2tlbiBmb3IgdGhlIGluc3RhbGxhdGlvbi4gR2VuZXJhdGVzIGEgbmV3XHJcbiAqIHRva2VuIGlmIG9uZSBkb2Vzbid0IGV4aXN0LCBpcyBleHBpcmVkIG9yIGFib3V0IHRvIGV4cGlyZS5cclxuICpcclxuICogU2hvdWxkIG9ubHkgYmUgY2FsbGVkIGlmIHRoZSBGaXJlYmFzZSBJbnN0YWxsYXRpb24gaXMgcmVnaXN0ZXJlZC5cclxuICovXHJcbmZ1bmN0aW9uIHJlZnJlc2hBdXRoVG9rZW4oZGVwZW5kZW5jaWVzLCBmb3JjZVJlZnJlc2gpIHtcclxuICAgIGlmIChmb3JjZVJlZnJlc2ggPT09IHZvaWQgMCkgeyBmb3JjZVJlZnJlc2ggPSBmYWxzZTsgfVxyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB0b2tlblByb21pc2UsIGVudHJ5LCBhdXRoVG9rZW4sIF9hO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB1cGRhdGUoZGVwZW5kZW5jaWVzLmFwcENvbmZpZywgZnVuY3Rpb24gKG9sZEVudHJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNFbnRyeVJlZ2lzdGVyZWQob2xkRW50cnkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcIm5vdC1yZWdpc3RlcmVkXCIgLyogTk9UX1JFR0lTVEVSRUQgKi8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvbGRBdXRoVG9rZW4gPSBvbGRFbnRyeS5hdXRoVG9rZW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZm9yY2VSZWZyZXNoICYmIGlzQXV0aFRva2VuVmFsaWQob2xkQXV0aFRva2VuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlcmUgaXMgYSB2YWxpZCB0b2tlbiBpbiB0aGUgREIuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2xkRW50cnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAob2xkQXV0aFRva2VuLnJlcXVlc3RTdGF0dXMgPT09IDEgLyogSU5fUFJPR1JFU1MgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZXJlIGFscmVhZHkgaXMgYSB0b2tlbiByZXF1ZXN0IGluIHByb2dyZXNzLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5Qcm9taXNlID0gd2FpdFVudGlsQXV0aFRva2VuUmVxdWVzdChkZXBlbmRlbmNpZXMsIGZvcmNlUmVmcmVzaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2xkRW50cnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBObyB0b2tlbiBvciB0b2tlbiBleHBpcmVkLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFuYXZpZ2F0b3Iub25MaW5lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJhcHAtb2ZmbGluZVwiIC8qIEFQUF9PRkZMSU5FICovKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpblByb2dyZXNzRW50cnkgPSBtYWtlQXV0aFRva2VuUmVxdWVzdEluUHJvZ3Jlc3NFbnRyeShvbGRFbnRyeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlblByb21pc2UgPSBmZXRjaEF1dGhUb2tlbkZyb21TZXJ2ZXIoZGVwZW5kZW5jaWVzLCBpblByb2dyZXNzRW50cnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluUHJvZ3Jlc3NFbnRyeTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBlbnRyeSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRva2VuUHJvbWlzZSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdG9rZW5Qcm9taXNlXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBfYSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICBfYSA9IGVudHJ5LmF1dGhUb2tlbjtcclxuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDQ7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aFRva2VuID0gX2E7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGF1dGhUb2tlbl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKiBDYWxsIG9ubHkgaWYgRklEIGlzIHJlZ2lzdGVyZWQgYW5kIEF1dGggVG9rZW4gcmVxdWVzdCBpcyBpbiBwcm9ncmVzcy5cclxuICpcclxuICogV2FpdHMgdW50aWwgdGhlIGN1cnJlbnQgcGVuZGluZyByZXF1ZXN0IGZpbmlzaGVzLiBJZiB0aGUgcmVxdWVzdCB0aW1lcyBvdXQsXHJcbiAqIHRyaWVzIG9uY2UgaW4gdGhpcyB0aHJlYWQgYXMgd2VsbC5cclxuICovXHJcbmZ1bmN0aW9uIHdhaXRVbnRpbEF1dGhUb2tlblJlcXVlc3QoZGVwZW5kZW5jaWVzLCBmb3JjZVJlZnJlc2gpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZW50cnksIGF1dGhUb2tlbjtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdXBkYXRlQXV0aFRva2VuUmVxdWVzdChkZXBlbmRlbmNpZXMuYXBwQ29uZmlnKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgZW50cnkgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGVudHJ5LmF1dGhUb2tlbi5yZXF1ZXN0U3RhdHVzID09PSAxIC8qIElOX1BST0dSRVNTICovKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZ2VuZXJhdGVBdXRoVG9rZW4gc3RpbGwgaW4gcHJvZ3Jlc3MuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgc2xlZXAoMTAwKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZ2VuZXJhdGVBdXRoVG9rZW4gc3RpbGwgaW4gcHJvZ3Jlc3MuXHJcbiAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHVwZGF0ZUF1dGhUb2tlblJlcXVlc3QoZGVwZW5kZW5jaWVzLmFwcENvbmZpZyldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5ID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhUb2tlbiA9IGVudHJ5LmF1dGhUb2tlbjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXV0aFRva2VuLnJlcXVlc3RTdGF0dXMgPT09IDAgLyogTk9UX1NUQVJURUQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHJlcXVlc3QgdGltZWQgb3V0IG9yIGZhaWxlZCBpbiBhIGRpZmZlcmVudCBjYWxsLiBUcnkgYWdhaW4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCByZWZyZXNoQXV0aFRva2VuKGRlcGVuZGVuY2llcywgZm9yY2VSZWZyZXNoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgYXV0aFRva2VuXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKiBDYWxsZWQgb25seSBpZiB0aGVyZSBpcyBhIEdlbmVyYXRlQXV0aFRva2VuIHJlcXVlc3QgaW4gcHJvZ3Jlc3MuXHJcbiAqXHJcbiAqIFVwZGF0ZXMgdGhlIEluc3RhbGxhdGlvbkVudHJ5IGluIHRoZSBEQiBiYXNlZCBvbiB0aGUgc3RhdHVzIG9mIHRoZVxyXG4gKiBHZW5lcmF0ZUF1dGhUb2tlbiByZXF1ZXN0LlxyXG4gKlxyXG4gKiBSZXR1cm5zIHRoZSB1cGRhdGVkIEluc3RhbGxhdGlvbkVudHJ5LlxyXG4gKi9cclxuZnVuY3Rpb24gdXBkYXRlQXV0aFRva2VuUmVxdWVzdChhcHBDb25maWcpIHtcclxuICAgIHJldHVybiB1cGRhdGUoYXBwQ29uZmlnLCBmdW5jdGlvbiAob2xkRW50cnkpIHtcclxuICAgICAgICBpZiAoIWlzRW50cnlSZWdpc3RlcmVkKG9sZEVudHJ5KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcIm5vdC1yZWdpc3RlcmVkXCIgLyogTk9UX1JFR0lTVEVSRUQgKi8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb2xkQXV0aFRva2VuID0gb2xkRW50cnkuYXV0aFRva2VuO1xyXG4gICAgICAgIGlmIChoYXNBdXRoVG9rZW5SZXF1ZXN0VGltZWRPdXQob2xkQXV0aFRva2VuKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIG9sZEVudHJ5KSwgeyBhdXRoVG9rZW46IHsgcmVxdWVzdFN0YXR1czogMCAvKiBOT1RfU1RBUlRFRCAqLyB9IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2xkRW50cnk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBmZXRjaEF1dGhUb2tlbkZyb21TZXJ2ZXIoZGVwZW5kZW5jaWVzLCBpbnN0YWxsYXRpb25FbnRyeSkge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhdXRoVG9rZW4sIHVwZGF0ZWRJbnN0YWxsYXRpb25FbnRyeSwgZV8xLCB1cGRhdGVkSW5zdGFsbGF0aW9uRW50cnk7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgX2EudHJ5cy5wdXNoKFswLCAzLCAsIDhdKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBnZW5lcmF0ZUF1dGhUb2tlblJlcXVlc3QoZGVwZW5kZW5jaWVzLCBpbnN0YWxsYXRpb25FbnRyeSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhUb2tlbiA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVkSW5zdGFsbGF0aW9uRW50cnkgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgaW5zdGFsbGF0aW9uRW50cnkpLCB7IGF1dGhUb2tlbjogYXV0aFRva2VuIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHNldChkZXBlbmRlbmNpZXMuYXBwQ29uZmlnLCB1cGRhdGVkSW5zdGFsbGF0aW9uRW50cnkpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGF1dGhUb2tlbl07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgZV8xID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGlzU2VydmVyRXJyb3IoZV8xKSAmJiAoZV8xLnNlcnZlckNvZGUgPT09IDQwMSB8fCBlXzEuc2VydmVyQ29kZSA9PT0gNDA0KSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFNlcnZlciByZXR1cm5lZCBhIFwiRklEIG5vdCBmb3VuZFwiIG9yIGEgXCJJbnZhbGlkIGF1dGhlbnRpY2F0aW9uXCIgZXJyb3IuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gR2VuZXJhdGUgYSBuZXcgSUQgbmV4dCB0aW1lLlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlbW92ZShkZXBlbmRlbmNpZXMuYXBwQ29uZmlnKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU2VydmVyIHJldHVybmVkIGEgXCJGSUQgbm90IGZvdW5kXCIgb3IgYSBcIkludmFsaWQgYXV0aGVudGljYXRpb25cIiBlcnJvci5cclxuICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBhIG5ldyBJRCBuZXh0IHRpbWUuXHJcbiAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDddO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRJbnN0YWxsYXRpb25FbnRyeSA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBpbnN0YWxsYXRpb25FbnRyeSksIHsgYXV0aFRva2VuOiB7IHJlcXVlc3RTdGF0dXM6IDAgLyogTk9UX1NUQVJURUQgKi8gfSB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzZXQoZGVwZW5kZW5jaWVzLmFwcENvbmZpZywgdXBkYXRlZEluc3RhbGxhdGlvbkVudHJ5KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gNztcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogdGhyb3cgZV8xO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGlzRW50cnlSZWdpc3RlcmVkKGluc3RhbGxhdGlvbkVudHJ5KSB7XHJcbiAgICByZXR1cm4gKGluc3RhbGxhdGlvbkVudHJ5ICE9PSB1bmRlZmluZWQgJiZcclxuICAgICAgICBpbnN0YWxsYXRpb25FbnRyeS5yZWdpc3RyYXRpb25TdGF0dXMgPT09IDIgLyogQ09NUExFVEVEICovKTtcclxufVxyXG5mdW5jdGlvbiBpc0F1dGhUb2tlblZhbGlkKGF1dGhUb2tlbikge1xyXG4gICAgcmV0dXJuIChhdXRoVG9rZW4ucmVxdWVzdFN0YXR1cyA9PT0gMiAvKiBDT01QTEVURUQgKi8gJiZcclxuICAgICAgICAhaXNBdXRoVG9rZW5FeHBpcmVkKGF1dGhUb2tlbikpO1xyXG59XHJcbmZ1bmN0aW9uIGlzQXV0aFRva2VuRXhwaXJlZChhdXRoVG9rZW4pIHtcclxuICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xyXG4gICAgcmV0dXJuIChub3cgPCBhdXRoVG9rZW4uY3JlYXRpb25UaW1lIHx8XHJcbiAgICAgICAgYXV0aFRva2VuLmNyZWF0aW9uVGltZSArIGF1dGhUb2tlbi5leHBpcmVzSW4gPCBub3cgKyBUT0tFTl9FWFBJUkFUSU9OX0JVRkZFUik7XHJcbn1cclxuLyoqIFJldHVybnMgYW4gdXBkYXRlZCBJbnN0YWxsYXRpb25FbnRyeSB3aXRoIGFuIEluUHJvZ3Jlc3NBdXRoVG9rZW4uICovXHJcbmZ1bmN0aW9uIG1ha2VBdXRoVG9rZW5SZXF1ZXN0SW5Qcm9ncmVzc0VudHJ5KG9sZEVudHJ5KSB7XHJcbiAgICB2YXIgaW5Qcm9ncmVzc0F1dGhUb2tlbiA9IHtcclxuICAgICAgICByZXF1ZXN0U3RhdHVzOiAxIC8qIElOX1BST0dSRVNTICovLFxyXG4gICAgICAgIHJlcXVlc3RUaW1lOiBEYXRlLm5vdygpXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBvbGRFbnRyeSksIHsgYXV0aFRva2VuOiBpblByb2dyZXNzQXV0aFRva2VuIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGhhc0F1dGhUb2tlblJlcXVlc3RUaW1lZE91dChhdXRoVG9rZW4pIHtcclxuICAgIHJldHVybiAoYXV0aFRva2VuLnJlcXVlc3RTdGF0dXMgPT09IDEgLyogSU5fUFJPR1JFU1MgKi8gJiZcclxuICAgICAgICBhdXRoVG9rZW4ucmVxdWVzdFRpbWUgKyBQRU5ESU5HX1RJTUVPVVRfTVMgPCBEYXRlLm5vdygpKTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRJZChkZXBlbmRlbmNpZXMpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX2EsIGluc3RhbGxhdGlvbkVudHJ5LCByZWdpc3RyYXRpb25Qcm9taXNlO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBnZXRJbnN0YWxsYXRpb25FbnRyeShkZXBlbmRlbmNpZXMuYXBwQ29uZmlnKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgX2EgPSBfYi5zZW50KCksIGluc3RhbGxhdGlvbkVudHJ5ID0gX2EuaW5zdGFsbGF0aW9uRW50cnksIHJlZ2lzdHJhdGlvblByb21pc2UgPSBfYS5yZWdpc3RyYXRpb25Qcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWdpc3RyYXRpb25Qcm9taXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lzdHJhdGlvblByb21pc2UuY2F0Y2goY29uc29sZS5lcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgaW5zdGFsbGF0aW9uIGlzIGFscmVhZHkgcmVnaXN0ZXJlZCwgdXBkYXRlIHRoZSBhdXRoZW50aWNhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0b2tlbiBpZiBuZWVkZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hBdXRoVG9rZW4oZGVwZW5kZW5jaWVzKS5jYXRjaChjb25zb2xlLmVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGluc3RhbGxhdGlvbkVudHJ5LmZpZF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGdldFRva2VuKGRlcGVuZGVuY2llcywgZm9yY2VSZWZyZXNoKSB7XHJcbiAgICBpZiAoZm9yY2VSZWZyZXNoID09PSB2b2lkIDApIHsgZm9yY2VSZWZyZXNoID0gZmFsc2U7IH1cclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXV0aFRva2VuO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBjb21wbGV0ZUluc3RhbGxhdGlvblJlZ2lzdHJhdGlvbihkZXBlbmRlbmNpZXMuYXBwQ29uZmlnKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlZnJlc2hBdXRoVG9rZW4oZGVwZW5kZW5jaWVzLCBmb3JjZVJlZnJlc2gpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBhdXRoVG9rZW4gPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGF1dGhUb2tlbi50b2tlbl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGNvbXBsZXRlSW5zdGFsbGF0aW9uUmVnaXN0cmF0aW9uKGFwcENvbmZpZykge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciByZWdpc3RyYXRpb25Qcm9taXNlO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBnZXRJbnN0YWxsYXRpb25FbnRyeShhcHBDb25maWcpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICByZWdpc3RyYXRpb25Qcm9taXNlID0gKF9hLnNlbnQoKSkucmVnaXN0cmF0aW9uUHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlZ2lzdHJhdGlvblByb21pc2UpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEEgY3JlYXRlSW5zdGFsbGF0aW9uIHJlcXVlc3QgaXMgaW4gcHJvZ3Jlc3MuIFdhaXQgdW50aWwgaXQgZmluaXNoZXMuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVnaXN0cmF0aW9uUHJvbWlzZV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQSBjcmVhdGVJbnN0YWxsYXRpb24gcmVxdWVzdCBpcyBpbiBwcm9ncmVzcy4gV2FpdCB1bnRpbCBpdCBmaW5pc2hlcy5cclxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAzO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGRlbGV0ZUluc3RhbGxhdGlvblJlcXVlc3QoYXBwQ29uZmlnLCBpbnN0YWxsYXRpb25FbnRyeSkge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbmRwb2ludCwgaGVhZGVycywgcmVxdWVzdCwgcmVzcG9uc2U7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnQgPSBnZXREZWxldGVFbmRwb2ludChhcHBDb25maWcsIGluc3RhbGxhdGlvbkVudHJ5KTtcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0gZ2V0SGVhZGVyc1dpdGhBdXRoKGFwcENvbmZpZywgaW5zdGFsbGF0aW9uRW50cnkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnNcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJldHJ5SWZTZXJ2ZXJFcnJvcihmdW5jdGlvbiAoKSB7IHJldHVybiBmZXRjaChlbmRwb2ludCwgcmVxdWVzdCk7IH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISFyZXNwb25zZS5vaykgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZ2V0RXJyb3JGcm9tUmVzcG9uc2UoJ0RlbGV0ZSBJbnN0YWxsYXRpb24nLCByZXNwb25zZSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOiB0aHJvdyBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gZ2V0RGVsZXRlRW5kcG9pbnQoYXBwQ29uZmlnLCBfYSkge1xyXG4gICAgdmFyIGZpZCA9IF9hLmZpZDtcclxuICAgIHJldHVybiBnZXRJbnN0YWxsYXRpb25zRW5kcG9pbnQoYXBwQ29uZmlnKSArIFwiL1wiICsgZmlkO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGRlbGV0ZUluc3RhbGxhdGlvbihkZXBlbmRlbmNpZXMpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXBwQ29uZmlnLCBlbnRyeTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBhcHBDb25maWcgPSBkZXBlbmRlbmNpZXMuYXBwQ29uZmlnO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHVwZGF0ZShhcHBDb25maWcsIGZ1bmN0aW9uIChvbGRFbnRyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9sZEVudHJ5ICYmIG9sZEVudHJ5LnJlZ2lzdHJhdGlvblN0YXR1cyA9PT0gMCAvKiBOT1RfU1RBUlRFRCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlbGV0ZSB0aGUgdW5yZWdpc3RlcmVkIGVudHJ5IHdpdGhvdXQgc2VuZGluZyBhIGRlbGV0ZUluc3RhbGxhdGlvbiByZXF1ZXN0LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2xkRW50cnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBlbnRyeSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWVudHJ5KSByZXR1cm4gWzMgLypicmVhayovLCA2XTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShlbnRyeS5yZWdpc3RyYXRpb25TdGF0dXMgPT09IDEgLyogSU5fUFJPR1JFU1MgKi8pKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBDYW4ndCBkZWxldGUgd2hpbGUgdHJ5aW5nIHRvIHJlZ2lzdGVyLlxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiZGVsZXRlLXBlbmRpbmctcmVnaXN0cmF0aW9uXCIgLyogREVMRVRFX1BFTkRJTkdfUkVHSVNUUkFUSU9OICovKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShlbnRyeS5yZWdpc3RyYXRpb25TdGF0dXMgPT09IDIgLyogQ09NUExFVEVEICovKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEhbmF2aWdhdG9yLm9uTGluZSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJhcHAtb2ZmbGluZVwiIC8qIEFQUF9PRkZMSU5FICovKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0IC8qeWllbGQqLywgZGVsZXRlSW5zdGFsbGF0aW9uUmVxdWVzdChhcHBDb25maWcsIGVudHJ5KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlbW92ZShhcHBDb25maWcpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA2O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBTZXRzIGEgbmV3IGNhbGxiYWNrIHRoYXQgd2lsbCBnZXQgY2FsbGVkIHdoZW4gSW5zdGFsbGF0aW9uIElEIGNoYW5nZXMuXHJcbiAqIFJldHVybnMgYW4gdW5zdWJzY3JpYmUgZnVuY3Rpb24gdGhhdCB3aWxsIHJlbW92ZSB0aGUgY2FsbGJhY2sgd2hlbiBjYWxsZWQuXHJcbiAqL1xyXG5mdW5jdGlvbiBvbklkQ2hhbmdlKF9hLCBjYWxsYmFjaykge1xyXG4gICAgdmFyIGFwcENvbmZpZyA9IF9hLmFwcENvbmZpZztcclxuICAgIGFkZENhbGxiYWNrKGFwcENvbmZpZywgY2FsbGJhY2spO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZW1vdmVDYWxsYmFjayhhcHBDb25maWcsIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gZXh0cmFjdEFwcENvbmZpZyhhcHApIHtcclxuICAgIHZhciBlXzEsIF9hO1xyXG4gICAgaWYgKCFhcHAgfHwgIWFwcC5vcHRpb25zKSB7XHJcbiAgICAgICAgdGhyb3cgZ2V0TWlzc2luZ1ZhbHVlRXJyb3IoJ0FwcCBDb25maWd1cmF0aW9uJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWFwcC5uYW1lKSB7XHJcbiAgICAgICAgdGhyb3cgZ2V0TWlzc2luZ1ZhbHVlRXJyb3IoJ0FwcCBOYW1lJyk7XHJcbiAgICB9XHJcbiAgICAvLyBSZXF1aXJlZCBhcHAgY29uZmlnIGtleXNcclxuICAgIHZhciBjb25maWdLZXlzID0gW1xyXG4gICAgICAgICdwcm9qZWN0SWQnLFxyXG4gICAgICAgICdhcGlLZXknLFxyXG4gICAgICAgICdhcHBJZCdcclxuICAgIF07XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGZvciAodmFyIGNvbmZpZ0tleXNfMSA9IF9fdmFsdWVzKGNvbmZpZ0tleXMpLCBjb25maWdLZXlzXzFfMSA9IGNvbmZpZ0tleXNfMS5uZXh0KCk7ICFjb25maWdLZXlzXzFfMS5kb25lOyBjb25maWdLZXlzXzFfMSA9IGNvbmZpZ0tleXNfMS5uZXh0KCkpIHtcclxuICAgICAgICAgICAgdmFyIGtleU5hbWUgPSBjb25maWdLZXlzXzFfMS52YWx1ZTtcclxuICAgICAgICAgICAgaWYgKCFhcHAub3B0aW9uc1trZXlOYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgZ2V0TWlzc2luZ1ZhbHVlRXJyb3Ioa2V5TmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGNvbmZpZ0tleXNfMV8xICYmICFjb25maWdLZXlzXzFfMS5kb25lICYmIChfYSA9IGNvbmZpZ0tleXNfMS5yZXR1cm4pKSBfYS5jYWxsKGNvbmZpZ0tleXNfMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYXBwTmFtZTogYXBwLm5hbWUsXHJcbiAgICAgICAgcHJvamVjdElkOiBhcHAub3B0aW9ucy5wcm9qZWN0SWQsXHJcbiAgICAgICAgYXBpS2V5OiBhcHAub3B0aW9ucy5hcGlLZXksXHJcbiAgICAgICAgYXBwSWQ6IGFwcC5vcHRpb25zLmFwcElkXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGdldE1pc3NpbmdWYWx1ZUVycm9yKHZhbHVlTmFtZSkge1xyXG4gICAgcmV0dXJuIEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwibWlzc2luZy1hcHAtY29uZmlnLXZhbHVlc1wiIC8qIE1JU1NJTkdfQVBQX0NPTkZJR19WQUxVRVMgKi8sIHtcclxuICAgICAgICB2YWx1ZU5hbWU6IHZhbHVlTmFtZVxyXG4gICAgfSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gcmVnaXN0ZXJJbnN0YWxsYXRpb25zKGluc3RhbmNlKSB7XHJcbiAgICB2YXIgaW5zdGFsbGF0aW9uc05hbWUgPSAnaW5zdGFsbGF0aW9ucyc7XHJcbiAgICBpbnN0YW5jZS5JTlRFUk5BTC5yZWdpc3RlckNvbXBvbmVudChuZXcgQ29tcG9uZW50KGluc3RhbGxhdGlvbnNOYW1lLCBmdW5jdGlvbiAoY29udGFpbmVyKSB7XHJcbiAgICAgICAgdmFyIGFwcCA9IGNvbnRhaW5lci5nZXRQcm92aWRlcignYXBwJykuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICAgICAgLy8gVGhyb3dzIGlmIGFwcCBpc24ndCBjb25maWd1cmVkIHByb3Blcmx5LlxyXG4gICAgICAgIHZhciBhcHBDb25maWcgPSBleHRyYWN0QXBwQ29uZmlnKGFwcCk7XHJcbiAgICAgICAgdmFyIHBsYXRmb3JtTG9nZ2VyUHJvdmlkZXIgPSBjb250YWluZXIuZ2V0UHJvdmlkZXIoJ3BsYXRmb3JtLWxvZ2dlcicpO1xyXG4gICAgICAgIHZhciBkZXBlbmRlbmNpZXMgPSB7XHJcbiAgICAgICAgICAgIGFwcENvbmZpZzogYXBwQ29uZmlnLFxyXG4gICAgICAgICAgICBwbGF0Zm9ybUxvZ2dlclByb3ZpZGVyOiBwbGF0Zm9ybUxvZ2dlclByb3ZpZGVyXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgaW5zdGFsbGF0aW9ucyA9IHtcclxuICAgICAgICAgICAgYXBwOiBhcHAsXHJcbiAgICAgICAgICAgIGdldElkOiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXRJZChkZXBlbmRlbmNpZXMpOyB9LFxyXG4gICAgICAgICAgICBnZXRUb2tlbjogZnVuY3Rpb24gKGZvcmNlUmVmcmVzaCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFRva2VuKGRlcGVuZGVuY2llcywgZm9yY2VSZWZyZXNoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGVsZXRlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWxldGVJbnN0YWxsYXRpb24oZGVwZW5kZW5jaWVzKTsgfSxcclxuICAgICAgICAgICAgb25JZENoYW5nZTogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb25JZENoYW5nZShkZXBlbmRlbmNpZXMsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIGluc3RhbGxhdGlvbnM7XHJcbiAgICB9LCBcIlBVQkxJQ1wiIC8qIFBVQkxJQyAqLykpO1xyXG4gICAgaW5zdGFuY2UucmVnaXN0ZXJWZXJzaW9uKG5hbWUsIHZlcnNpb24pO1xyXG59XHJcbnJlZ2lzdGVySW5zdGFsbGF0aW9ucyhmaXJlYmFzZSk7XG5cbmV4cG9ydCB7IHJlZ2lzdGVySW5zdGFsbGF0aW9ucyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtLmpzLm1hcFxuIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHQuZGVmYXVsdCA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgcHJpdmF0ZU1hcCkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIGdldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcml2YXRlTWFwLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwLCB2YWx1ZSkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHByaXZhdGVNYXAuc2V0KHJlY2VpdmVyLCB2YWx1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuIiwiaW1wb3J0IGZpcmViYXNlIGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuaW1wb3J0ICdAZmlyZWJhc2UvaW5zdGFsbGF0aW9ucyc7XG5pbXBvcnQgeyBfX2Fzc2lnbiwgX19hd2FpdGVyLCBfX2dlbmVyYXRvciB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJ0BmaXJlYmFzZS9sb2dnZXInO1xuaW1wb3J0IHsgRXJyb3JGYWN0b3J5IH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGZpcmViYXNlL2NvbXBvbmVudCc7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBBTkFMWVRJQ1NfSURfRklFTEQgPSAnbWVhc3VyZW1lbnRJZCc7XHJcbi8vIEtleSB0byBhdHRhY2ggRklEIHRvIGluIGd0YWcgcGFyYW1zLlxyXG52YXIgR0FfRklEX0tFWSA9ICdmaXJlYmFzZV9pZCc7XHJcbnZhciBPUklHSU5fS0VZID0gJ29yaWdpbic7XHJcbnZhciBHVEFHX1VSTCA9ICdodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndGFnL2pzJztcclxudmFyIEd0YWdDb21tYW5kO1xyXG4oZnVuY3Rpb24gKEd0YWdDb21tYW5kKSB7XHJcbiAgICBHdGFnQ29tbWFuZFtcIkVWRU5UXCJdID0gXCJldmVudFwiO1xyXG4gICAgR3RhZ0NvbW1hbmRbXCJTRVRcIl0gPSBcInNldFwiO1xyXG4gICAgR3RhZ0NvbW1hbmRbXCJDT05GSUdcIl0gPSBcImNvbmZpZ1wiO1xyXG59KShHdGFnQ29tbWFuZCB8fCAoR3RhZ0NvbW1hbmQgPSB7fSkpO1xyXG4vKlxyXG4gKiBPZmZpY2lhbGx5IHJlY29tbWVuZGVkIGV2ZW50IG5hbWVzIGZvciBndGFnLmpzXHJcbiAqIEFueSBvdGhlciBzdHJpbmcgaXMgYWxzbyBhbGxvd2VkLlxyXG4gKi9cclxudmFyIEV2ZW50TmFtZTtcclxuKGZ1bmN0aW9uIChFdmVudE5hbWUpIHtcclxuICAgIEV2ZW50TmFtZVtcIkFERF9TSElQUElOR19JTkZPXCJdID0gXCJhZGRfc2hpcHBpbmdfaW5mb1wiO1xyXG4gICAgRXZlbnROYW1lW1wiQUREX1BBWU1FTlRfSU5GT1wiXSA9IFwiYWRkX3BheW1lbnRfaW5mb1wiO1xyXG4gICAgRXZlbnROYW1lW1wiQUREX1RPX0NBUlRcIl0gPSBcImFkZF90b19jYXJ0XCI7XHJcbiAgICBFdmVudE5hbWVbXCJBRERfVE9fV0lTSExJU1RcIl0gPSBcImFkZF90b193aXNobGlzdFwiO1xyXG4gICAgRXZlbnROYW1lW1wiQkVHSU5fQ0hFQ0tPVVRcIl0gPSBcImJlZ2luX2NoZWNrb3V0XCI7XHJcbiAgICAvKiogQGRlcHJlY2F0ZWQgKi9cclxuICAgIEV2ZW50TmFtZVtcIkNIRUNLT1VUX1BST0dSRVNTXCJdID0gXCJjaGVja291dF9wcm9ncmVzc1wiO1xyXG4gICAgRXZlbnROYW1lW1wiRVhDRVBUSU9OXCJdID0gXCJleGNlcHRpb25cIjtcclxuICAgIEV2ZW50TmFtZVtcIkdFTkVSQVRFX0xFQURcIl0gPSBcImdlbmVyYXRlX2xlYWRcIjtcclxuICAgIEV2ZW50TmFtZVtcIkxPR0lOXCJdID0gXCJsb2dpblwiO1xyXG4gICAgRXZlbnROYW1lW1wiUEFHRV9WSUVXXCJdID0gXCJwYWdlX3ZpZXdcIjtcclxuICAgIEV2ZW50TmFtZVtcIlBVUkNIQVNFXCJdID0gXCJwdXJjaGFzZVwiO1xyXG4gICAgRXZlbnROYW1lW1wiUkVGVU5EXCJdID0gXCJyZWZ1bmRcIjtcclxuICAgIEV2ZW50TmFtZVtcIlJFTU9WRV9GUk9NX0NBUlRcIl0gPSBcInJlbW92ZV9mcm9tX2NhcnRcIjtcclxuICAgIEV2ZW50TmFtZVtcIlNDUkVFTl9WSUVXXCJdID0gXCJzY3JlZW5fdmlld1wiO1xyXG4gICAgRXZlbnROYW1lW1wiU0VBUkNIXCJdID0gXCJzZWFyY2hcIjtcclxuICAgIEV2ZW50TmFtZVtcIlNFTEVDVF9DT05URU5UXCJdID0gXCJzZWxlY3RfY29udGVudFwiO1xyXG4gICAgRXZlbnROYW1lW1wiU0VMRUNUX0lURU1cIl0gPSBcInNlbGVjdF9pdGVtXCI7XHJcbiAgICBFdmVudE5hbWVbXCJTRUxFQ1RfUFJPTU9USU9OXCJdID0gXCJzZWxlY3RfcHJvbW90aW9uXCI7XHJcbiAgICAvKiogQGRlcHJlY2F0ZWQgKi9cclxuICAgIEV2ZW50TmFtZVtcIlNFVF9DSEVDS09VVF9PUFRJT05cIl0gPSBcInNldF9jaGVja291dF9vcHRpb25cIjtcclxuICAgIEV2ZW50TmFtZVtcIlNIQVJFXCJdID0gXCJzaGFyZVwiO1xyXG4gICAgRXZlbnROYW1lW1wiU0lHTl9VUFwiXSA9IFwic2lnbl91cFwiO1xyXG4gICAgRXZlbnROYW1lW1wiVElNSU5HX0NPTVBMRVRFXCJdID0gXCJ0aW1pbmdfY29tcGxldGVcIjtcclxuICAgIEV2ZW50TmFtZVtcIlZJRVdfQ0FSVFwiXSA9IFwidmlld19jYXJ0XCI7XHJcbiAgICBFdmVudE5hbWVbXCJWSUVXX0lURU1cIl0gPSBcInZpZXdfaXRlbVwiO1xyXG4gICAgRXZlbnROYW1lW1wiVklFV19JVEVNX0xJU1RcIl0gPSBcInZpZXdfaXRlbV9saXN0XCI7XHJcbiAgICBFdmVudE5hbWVbXCJWSUVXX1BST01PVElPTlwiXSA9IFwidmlld19wcm9tb3Rpb25cIjtcclxuICAgIEV2ZW50TmFtZVtcIlZJRVdfU0VBUkNIX1JFU1VMVFNcIl0gPSBcInZpZXdfc2VhcmNoX3Jlc3VsdHNcIjtcclxufSkoRXZlbnROYW1lIHx8IChFdmVudE5hbWUgPSB7fSkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogTG9ncyBhbiBhbmFseXRpY3MgZXZlbnQgdGhyb3VnaCB0aGUgRmlyZWJhc2UgU0RLLlxyXG4gKlxyXG4gKiBAcGFyYW0gZ3RhZ0Z1bmN0aW9uIFdyYXBwZWQgZ3RhZyBmdW5jdGlvbiB0aGF0IHdhaXRzIGZvciBmaWQgdG8gYmUgc2V0IGJlZm9yZSBzZW5kaW5nIGFuIGV2ZW50XHJcbiAqIEBwYXJhbSBldmVudE5hbWUgR29vZ2xlIEFuYWx5dGljcyBldmVudCBuYW1lLCBjaG9vc2UgZnJvbSBzdGFuZGFyZCBsaXN0IG9yIHVzZSBhIGN1c3RvbSBzdHJpbmcuXHJcbiAqIEBwYXJhbSBldmVudFBhcmFtcyBBbmFseXRpY3MgZXZlbnQgcGFyYW1ldGVycy5cclxuICovXHJcbmZ1bmN0aW9uIGxvZ0V2ZW50KGd0YWdGdW5jdGlvbiwgYW5hbHl0aWNzSWQsIGV2ZW50TmFtZSwgZXZlbnRQYXJhbXMsIG9wdGlvbnMpIHtcclxuICAgIHZhciBwYXJhbXMgPSBldmVudFBhcmFtcyB8fCB7fTtcclxuICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5nbG9iYWwpIHtcclxuICAgICAgICBwYXJhbXMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZXZlbnRQYXJhbXMpLCB7ICdzZW5kX3RvJzogYW5hbHl0aWNzSWQgfSk7XHJcbiAgICB9XHJcbiAgICAvLyBXb3JrYXJvdW5kIGZvciBodHRwOi8vYi8xNDEzNzA0NDkgLSB0aGlyZCBhcmd1bWVudCBjYW5ub3QgYmUgdW5kZWZpbmVkLlxyXG4gICAgZ3RhZ0Z1bmN0aW9uKEd0YWdDb21tYW5kLkVWRU5ULCBldmVudE5hbWUsIHBhcmFtcyB8fCB7fSk7XHJcbn1cclxuLy8gVE9ETzogQnJhZCBpcyBnb2luZyB0byBhZGQgYHNjcmVlbl9uYW1lYCB0byBHQSBHb2xkIGNvbmZpZyBwYXJhbWV0ZXIgc2NoZW1hXHJcbi8qKlxyXG4gKiBTZXQgc2NyZWVuX25hbWUgcGFyYW1ldGVyIGZvciB0aGlzIEdvb2dsZSBBbmFseXRpY3MgSUQuXHJcbiAqXHJcbiAqIEBwYXJhbSBndGFnRnVuY3Rpb24gV3JhcHBlZCBndGFnIGZ1bmN0aW9uIHRoYXQgd2FpdHMgZm9yIGZpZCB0byBiZSBzZXQgYmVmb3JlIHNlbmRpbmcgYW4gZXZlbnRcclxuICogQHBhcmFtIHNjcmVlbk5hbWUgU2NyZWVuIG5hbWUgc3RyaW5nIHRvIHNldC5cclxuICovXHJcbmZ1bmN0aW9uIHNldEN1cnJlbnRTY3JlZW4oZ3RhZ0Z1bmN0aW9uLCBhbmFseXRpY3NJZCwgc2NyZWVuTmFtZSwgb3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5nbG9iYWwpIHtcclxuICAgICAgICBndGFnRnVuY3Rpb24oR3RhZ0NvbW1hbmQuU0VULCB7ICdzY3JlZW5fbmFtZSc6IHNjcmVlbk5hbWUgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBndGFnRnVuY3Rpb24oR3RhZ0NvbW1hbmQuQ09ORklHLCBhbmFseXRpY3NJZCwge1xyXG4gICAgICAgICAgICB1cGRhdGU6IHRydWUsXHJcbiAgICAgICAgICAgICdzY3JlZW5fbmFtZSc6IHNjcmVlbk5hbWVcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogU2V0IHVzZXJfaWQgcGFyYW1ldGVyIGZvciB0aGlzIEdvb2dsZSBBbmFseXRpY3MgSUQuXHJcbiAqXHJcbiAqIEBwYXJhbSBndGFnRnVuY3Rpb24gV3JhcHBlZCBndGFnIGZ1bmN0aW9uIHRoYXQgd2FpdHMgZm9yIGZpZCB0byBiZSBzZXQgYmVmb3JlIHNlbmRpbmcgYW4gZXZlbnRcclxuICogQHBhcmFtIGlkIFVzZXIgSUQgc3RyaW5nIHRvIHNldFxyXG4gKi9cclxuZnVuY3Rpb24gc2V0VXNlcklkKGd0YWdGdW5jdGlvbiwgYW5hbHl0aWNzSWQsIGlkLCBvcHRpb25zKSB7XHJcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmdsb2JhbCkge1xyXG4gICAgICAgIGd0YWdGdW5jdGlvbihHdGFnQ29tbWFuZC5TRVQsIHsgJ3VzZXJfaWQnOiBpZCB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGd0YWdGdW5jdGlvbihHdGFnQ29tbWFuZC5DT05GSUcsIGFuYWx5dGljc0lkLCB7XHJcbiAgICAgICAgICAgIHVwZGF0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgJ3VzZXJfaWQnOiBpZFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBTZXQgYWxsIG90aGVyIHVzZXIgcHJvcGVydGllcyBvdGhlciB0aGFuIHVzZXJfaWQgYW5kIHNjcmVlbl9uYW1lLlxyXG4gKlxyXG4gKiBAcGFyYW0gZ3RhZ0Z1bmN0aW9uIFdyYXBwZWQgZ3RhZyBmdW5jdGlvbiB0aGF0IHdhaXRzIGZvciBmaWQgdG8gYmUgc2V0IGJlZm9yZSBzZW5kaW5nIGFuIGV2ZW50XHJcbiAqIEBwYXJhbSBwcm9wZXJ0aWVzIE1hcCBvZiB1c2VyIHByb3BlcnRpZXMgdG8gc2V0XHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRVc2VyUHJvcGVydGllcyhndGFnRnVuY3Rpb24sIGFuYWx5dGljc0lkLCBwcm9wZXJ0aWVzLCBvcHRpb25zKSB7XHJcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmdsb2JhbCkge1xyXG4gICAgICAgIHZhciBmbGF0UHJvcGVydGllcyA9IHt9O1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGtleSA9IF9hW19pXTtcclxuICAgICAgICAgICAgLy8gdXNlIGRvdCBub3RhdGlvbiBmb3IgbWVyZ2UgYmVoYXZpb3IgaW4gZ3RhZy5qc1xyXG4gICAgICAgICAgICBmbGF0UHJvcGVydGllc1tcInVzZXJfcHJvcGVydGllcy5cIiArIGtleV0gPSBwcm9wZXJ0aWVzW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGd0YWdGdW5jdGlvbihHdGFnQ29tbWFuZC5TRVQsIGZsYXRQcm9wZXJ0aWVzKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGd0YWdGdW5jdGlvbihHdGFnQ29tbWFuZC5DT05GSUcsIGFuYWx5dGljc0lkLCB7XHJcbiAgICAgICAgICAgIHVwZGF0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgJ3VzZXJfcHJvcGVydGllcyc6IHByb3BlcnRpZXNcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogU2V0IHdoZXRoZXIgY29sbGVjdGlvbiBpcyBlbmFibGVkIGZvciB0aGlzIElELlxyXG4gKlxyXG4gKiBAcGFyYW0gZW5hYmxlZCBJZiB0cnVlLCBjb2xsZWN0aW9uIGlzIGVuYWJsZWQgZm9yIHRoaXMgSUQuXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRBbmFseXRpY3NDb2xsZWN0aW9uRW5hYmxlZChhbmFseXRpY3NJZCwgZW5hYmxlZCkge1xyXG4gICAgd2luZG93W1wiZ2EtZGlzYWJsZS1cIiArIGFuYWx5dGljc0lkXSA9ICFlbmFibGVkO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBsb2dnZXIgPSBuZXcgTG9nZ2VyKCdAZmlyZWJhc2UvYW5hbHl0aWNzJyk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplIHRoZSBhbmFseXRpY3MgaW5zdGFuY2UgaW4gZ3RhZy5qcyBieSBjYWxsaW5nIGNvbmZpZyBjb21tYW5kIHdpdGggZmlkLlxyXG4gKlxyXG4gKiBOT1RFOiBXZSBjb21iaW5lIGFuYWx5dGljcyBpbml0aWFsaXphdGlvbiBhbmQgc2V0dGluZyBmaWQgdG9nZXRoZXIgYmVjYXVzZSB3ZSB3YW50IGZpZCB0byBiZVxyXG4gKiBwYXJ0IG9mIHRoZSBgcGFnZV92aWV3YCBldmVudCB0aGF0J3Mgc2VudCBkdXJpbmcgdGhlIGluaXRpYWxpemF0aW9uXHJcbiAqIEBwYXJhbSBhcHAgRmlyZWJhc2UgYXBwXHJcbiAqIEBwYXJhbSBndGFnQ29yZSBUaGUgZ3RhZyBmdW5jdGlvbiB0aGF0J3Mgbm90IHdyYXBwZWQuXHJcbiAqL1xyXG5mdW5jdGlvbiBpbml0aWFsaXplR0FJZChhcHAsIGluc3RhbGxhdGlvbnMsIGd0YWdDb3JlKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGZpZDtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGluc3RhbGxhdGlvbnMuZ2V0SWQoKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgZmlkID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgY29tbWFuZCBpbml0aWFsaXplcyBndGFnLmpzIGFuZCBvbmx5IG5lZWRzIHRvIGJlIGNhbGxlZCBvbmNlIGZvciB0aGUgZW50aXJlIHdlYiBhcHAsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYnV0IHNpbmNlIGl0IGlzIGlkZW1wb3RlbnQsIHdlIGNhbiBjYWxsIGl0IG11bHRpcGxlIHRpbWVzLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGtlZXAgaXQgdG9nZXRoZXIgd2l0aCBvdGhlciBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgYmV0dGVyIGNvZGUgc3RydWN0dXJlLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICAgICAgICAgICAgICAgICAgZ3RhZ0NvcmUoJ2pzJywgbmV3IERhdGUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSXQgc2hvdWxkIGJlIHRoZSBmaXJzdCBjb25maWcgY29tbWFuZCBjYWxsZWQgb24gdGhpcyBHQS1JRFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemUgdGhpcyBHQS1JRCBhbmQgc2V0IEZJRCBvbiBpdCB1c2luZyB0aGUgZ3RhZyBjb25maWcgQVBJLlxyXG4gICAgICAgICAgICAgICAgICAgIGd0YWdDb3JlKEd0YWdDb21tYW5kLkNPTkZJRywgYXBwLm9wdGlvbnNbQU5BTFlUSUNTX0lEX0ZJRUxEXSwgKF9hID0ge30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hW0dBX0ZJRF9LRVldID0gZmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBndWFyZCBhZ2FpbnN0IGRldmVsb3BlcnMgYWNjaWRlbnRhbGx5IHNldHRpbmcgcHJvcGVydGllcyB3aXRoIHByZWZpeCBgZmlyZWJhc2VfYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYVtPUklHSU5fS0VZXSA9ICdmaXJlYmFzZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnVwZGF0ZSA9IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBpbnNlcnRTY3JpcHRUYWcoZGF0YUxheWVyTmFtZSkge1xyXG4gICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG4gICAgLy8gV2UgYXJlIG5vdCBwcm92aWRpbmcgYW4gYW5hbHl0aWNzSWQgaW4gdGhlIFVSTCBiZWNhdXNlIGl0IHdvdWxkIHRyaWdnZXIgYSBgcGFnZV92aWV3YFxyXG4gICAgLy8gd2l0aG91dCBmaWQuIFdlIHdpbGwgaW5pdGlhbGl6ZSBnYS1pZCB1c2luZyBndGFnIChjb25maWcpIGNvbW1hbmQgdG9nZXRoZXIgd2l0aCBmaWQuXHJcbiAgICBzY3JpcHQuc3JjID0gR1RBR19VUkwgKyBcIj9sPVwiICsgZGF0YUxheWVyTmFtZTtcclxuICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XHJcbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XHJcbn1cclxuLyoqIEdldCByZWZlcmVuY2UgdG8sIG9yIGNyZWF0ZSwgZ2xvYmFsIGRhdGFsYXllci5cclxuICogQHBhcmFtIGRhdGFMYXllck5hbWUgTmFtZSBvZiBkYXRhbGF5ZXIgKG1vc3Qgb2Z0ZW4gdGhlIGRlZmF1bHQsIFwiX2RhdGFMYXllclwiKVxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0T3JDcmVhdGVEYXRhTGF5ZXIoZGF0YUxheWVyTmFtZSkge1xyXG4gICAgLy8gQ2hlY2sgZm9yIGV4aXN0aW5nIGRhdGFMYXllciBhbmQgY3JlYXRlIGlmIG5lZWRlZC5cclxuICAgIHZhciBkYXRhTGF5ZXIgPSBbXTtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHdpbmRvd1tkYXRhTGF5ZXJOYW1lXSkpIHtcclxuICAgICAgICBkYXRhTGF5ZXIgPSB3aW5kb3dbZGF0YUxheWVyTmFtZV07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB3aW5kb3dbZGF0YUxheWVyTmFtZV0gPSBkYXRhTGF5ZXI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGF0YUxheWVyO1xyXG59XHJcbi8qKlxyXG4gKiBXcmFwcyBhIHN0YW5kYXJkIGd0YWcgZnVuY3Rpb24gd2l0aCBleHRyYSBjb2RlIHRvIHdhaXQgZm9yIGNvbXBsZXRpb24gb2ZcclxuICogcmVsZXZhbnQgaW5pdGlhbGl6YXRpb24gcHJvbWlzZXMgYmVmb3JlIHNlbmRpbmcgcmVxdWVzdHMuXHJcbiAqXHJcbiAqIEBwYXJhbSBndGFnQ29yZSBCYXNpYyBndGFnIGZ1bmN0aW9uIHRoYXQganVzdCBhcHBlbmRzIHRvIGRhdGFMYXllclxyXG4gKiBAcGFyYW0gaW5pdGlhbGl6ZWRJZFByb21pc2VzTWFwIE1hcCBvZiBnYUlkcyB0byB0aGVpciBpbml0aWFsaXphdGlvbiBwcm9taXNlc1xyXG4gKi9cclxuZnVuY3Rpb24gd3JhcEd0YWcoZ3RhZ0NvcmUsIGluaXRpYWxpemVkSWRQcm9taXNlc01hcCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjb21tYW5kLCBpZE9yTmFtZU9yUGFyYW1zLCBndGFnUGFyYW1zKSB7XHJcbiAgICAgICAgLy8gSWYgZXZlbnQsIGNoZWNrIHRoYXQgcmVsZXZhbnQgaW5pdGlhbGl6YXRpb24gcHJvbWlzZXMgaGF2ZSBjb21wbGV0ZWQuXHJcbiAgICAgICAgaWYgKGNvbW1hbmQgPT09IEd0YWdDb21tYW5kLkVWRU5UKSB7XHJcbiAgICAgICAgICAgIHZhciBpbml0aWFsaXphdGlvblByb21pc2VzVG9XYWl0Rm9yID0gW107XHJcbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3MgYSAnc2VuZF90bycgcGFyYW0sIGNoZWNrIGlmIGFueSBJRCBzcGVjaWZpZWQgbWF0Y2hlc1xyXG4gICAgICAgICAgICAvLyBhIEZJRCB3ZSBoYXZlIGJlZ3VuIGEgZmV0Y2ggb24uXHJcbiAgICAgICAgICAgIGlmIChndGFnUGFyYW1zICYmIGd0YWdQYXJhbXNbJ3NlbmRfdG8nXSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGdhU2VuZFRvTGlzdCA9IGd0YWdQYXJhbXNbJ3NlbmRfdG8nXTtcclxuICAgICAgICAgICAgICAgIC8vIE1ha2UgaXQgYW4gYXJyYXkgaWYgaXMgaXNuJ3QsIHNvIGl0IGNhbiBiZSBkZWFsdCB3aXRoIHRoZSBzYW1lIHdheS5cclxuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShnYVNlbmRUb0xpc3QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2FTZW5kVG9MaXN0ID0gW2dhU2VuZFRvTGlzdF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGdhU2VuZFRvTGlzdF8xID0gZ2FTZW5kVG9MaXN0OyBfaSA8IGdhU2VuZFRvTGlzdF8xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZW5kVG9JZCA9IGdhU2VuZFRvTGlzdF8xW19pXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5pdGlhbGl6YXRpb25Qcm9taXNlID0gaW5pdGlhbGl6ZWRJZFByb21pc2VzTWFwW3NlbmRUb0lkXTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBHcm91cHMgd2lsbCBub3QgYmUgaW4gdGhlIG1hcC5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbGl6YXRpb25Qcm9taXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemF0aW9uUHJvbWlzZXNUb1dhaXRGb3IucHVzaChpbml0aWFsaXphdGlvblByb21pc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlcmUgaXMgYW4gaXRlbSBpbiAnc2VuZF90bycgdGhhdCBpcyBub3QgYXNzb2NpYXRlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkaXJlY3RseSB3aXRoIGFuIEZJRCwgcG9zc2libHkgYSBncm91cC4gIEVtcHR5IHRoaXMgYXJyYXlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGxldCBpdCBnZXQgcG9wdWxhdGVkIGJlbG93LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsaXphdGlvblByb21pc2VzVG9XYWl0Rm9yID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBUaGlzIHdpbGwgYmUgdW5wb3B1bGF0ZWQgaWYgdGhlcmUgd2FzIG5vICdzZW5kX3RvJyBmaWVsZCAsIG9yXHJcbiAgICAgICAgICAgIC8vIGlmIG5vdCBhbGwgZW50cmllcyBpbiB0aGUgJ3NlbmRfdG8nIGZpZWxkIGNvdWxkIGJlIG1hcHBlZCB0b1xyXG4gICAgICAgICAgICAvLyBhIEZJRC4gSW4gdGhlc2UgY2FzZXMsIHdhaXQgb24gYWxsIHBlbmRpbmcgaW5pdGlhbGl6YXRpb24gcHJvbWlzZXMuXHJcbiAgICAgICAgICAgIGlmIChpbml0aWFsaXphdGlvblByb21pc2VzVG9XYWl0Rm9yLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBfYiA9IE9iamVjdC52YWx1ZXMoaW5pdGlhbGl6ZWRJZFByb21pc2VzTWFwKTsgX2EgPCBfYi5sZW5ndGg7IF9hKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaWRQcm9taXNlID0gX2JbX2FdO1xyXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemF0aW9uUHJvbWlzZXNUb1dhaXRGb3IucHVzaChpZFByb21pc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFJ1biBjb3JlIGd0YWcgZnVuY3Rpb24gd2l0aCBhcmdzIGFmdGVyIGFsbCByZWxldmFudCBpbml0aWFsaXphdGlvblxyXG4gICAgICAgICAgICAvLyBwcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQuXHJcbiAgICAgICAgICAgIFByb21pc2UuYWxsKGluaXRpYWxpemF0aW9uUHJvbWlzZXNUb1dhaXRGb3IpXHJcbiAgICAgICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBodHRwOi8vYi8xNDEzNzA0NDkgLSB0aGlyZCBhcmd1bWVudCBjYW5ub3QgYmUgdW5kZWZpbmVkLlxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGd0YWdDb3JlKEd0YWdDb21tYW5kLkVWRU5ULCBpZE9yTmFtZU9yUGFyYW1zLCBndGFnUGFyYW1zIHx8IHt9KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkgeyByZXR1cm4gbG9nZ2VyLmVycm9yKGUpOyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoY29tbWFuZCA9PT0gR3RhZ0NvbW1hbmQuQ09ORklHKSB7XHJcbiAgICAgICAgICAgIHZhciBpbml0aWFsaXphdGlvblByb21pc2VUb1dhaXQgPSBpbml0aWFsaXplZElkUHJvbWlzZXNNYXBbaWRPck5hbWVPclBhcmFtc10gfHxcclxuICAgICAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICBpbml0aWFsaXphdGlvblByb21pc2VUb1dhaXRcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGd0YWdDb3JlKEd0YWdDb21tYW5kLkNPTkZJRywgaWRPck5hbWVPclBhcmFtcywgZ3RhZ1BhcmFtcyk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGxvZ2dlci5lcnJvcihlKTsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBTRVQgY29tbWFuZC5cclxuICAgICAgICAgICAgLy8gU3BsaXR0aW5nIGNhbGxzIGZvciBDT05GSUcgYW5kIFNFVCB0byBtYWtlIGl0IGNsZWFyIHdoaWNoIHNpZ25hdHVyZVxyXG4gICAgICAgICAgICAvLyBUeXBlc2NyaXB0IGlzIGNoZWNraW5nLlxyXG4gICAgICAgICAgICBndGFnQ29yZShHdGFnQ29tbWFuZC5TRVQsIGlkT3JOYW1lT3JQYXJhbXMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgZ2xvYmFsIGd0YWcgZnVuY3Rpb24gb3Igd3JhcHMgZXhpc3Rpbmcgb25lIGlmIGZvdW5kLlxyXG4gKiBUaGlzIHdyYXBwZWQgZnVuY3Rpb24gYXR0YWNoZXMgRmlyZWJhc2UgaW5zdGFuY2UgSUQgKEZJRCkgdG8gZ3RhZyAnY29uZmlnJyBhbmRcclxuICogJ2V2ZW50JyBjYWxscyB0aGF0IGJlbG9uZyB0byB0aGUgR0FJRCBhc3NvY2lhdGVkIHdpdGggdGhpcyBGaXJlYmFzZSBpbnN0YW5jZS5cclxuICpcclxuICogQHBhcmFtIGluaXRpYWxpemVkSWRQcm9taXNlc01hcCBNYXAgb2YgZ2FJZCB0byBpbml0aWFsaXphdGlvbiBwcm9taXNlcy5cclxuICogQHBhcmFtIGRhdGFMYXllck5hbWUgTmFtZSBvZiBnbG9iYWwgR0EgZGF0YWxheWVyIGFycmF5LlxyXG4gKiBAcGFyYW0gZ3RhZ0Z1bmN0aW9uTmFtZSBOYW1lIG9mIGdsb2JhbCBndGFnIGZ1bmN0aW9uIChcImd0YWdcIiBpZiBub3QgdXNlci1zcGVjaWZpZWQpXHJcbiAqL1xyXG5mdW5jdGlvbiB3cmFwT3JDcmVhdGVHdGFnKGluaXRpYWxpemVkSWRQcm9taXNlc01hcCwgZGF0YUxheWVyTmFtZSwgZ3RhZ0Z1bmN0aW9uTmFtZSkge1xyXG4gICAgLy8gQ3JlYXRlIGEgYmFzaWMgY29yZSBndGFnIGZ1bmN0aW9uXHJcbiAgICB2YXIgZ3RhZ0NvcmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF9hcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgX2FyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gTXVzdCBwdXNoIElBcmd1bWVudHMgb2JqZWN0LCBub3QgYW4gYXJyYXkuXHJcbiAgICAgICAgd2luZG93W2RhdGFMYXllck5hbWVdLnB1c2goYXJndW1lbnRzKTtcclxuICAgIH07XHJcbiAgICAvLyBSZXBsYWNlIGl0IHdpdGggZXhpc3Rpbmcgb25lIGlmIGZvdW5kXHJcbiAgICBpZiAod2luZG93W2d0YWdGdW5jdGlvbk5hbWVdICYmXHJcbiAgICAgICAgdHlwZW9mIHdpbmRvd1tndGFnRnVuY3Rpb25OYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBndGFnQ29yZSA9IHdpbmRvd1tndGFnRnVuY3Rpb25OYW1lXTtcclxuICAgIH1cclxuICAgIHdpbmRvd1tndGFnRnVuY3Rpb25OYW1lXSA9IHdyYXBHdGFnKGd0YWdDb3JlLCBpbml0aWFsaXplZElkUHJvbWlzZXNNYXApO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBndGFnQ29yZTogZ3RhZ0NvcmUsXHJcbiAgICAgICAgd3JhcHBlZEd0YWc6IHdpbmRvd1tndGFnRnVuY3Rpb25OYW1lXVxyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyBmaXJzdCBzY3JpcHQgdGFnIGluIERPTSBtYXRjaGluZyBvdXIgZ3RhZyB1cmwgcGF0dGVybi5cclxuICovXHJcbmZ1bmN0aW9uIGZpbmRHdGFnU2NyaXB0T25QYWdlKCkge1xyXG4gICAgdmFyIHNjcmlwdFRhZ3MgPSB3aW5kb3cuZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC52YWx1ZXMoc2NyaXB0VGFncyk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIHRhZyA9IF9hW19pXTtcclxuICAgICAgICBpZiAodGFnLnNyYyAmJiB0YWcuc3JjLmluY2x1ZGVzKEdUQUdfVVJMKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGFnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBfYTtcclxudmFyIEVSUk9SUyA9IChfYSA9IHt9LFxyXG4gICAgX2FbXCJuby1nYS1pZFwiIC8qIE5PX0dBX0lEICovXSA9IFwiXFxcIlwiICsgQU5BTFlUSUNTX0lEX0ZJRUxEICsgXCJcXFwiIGZpZWxkIGlzIGVtcHR5IGluIFwiICtcclxuICAgICAgICAnRmlyZWJhc2UgY29uZmlnLiBGaXJlYmFzZSBBbmFseXRpY3MgJyArXHJcbiAgICAgICAgJ3JlcXVpcmVzIHRoaXMgZmllbGQgdG8gY29udGFpbiBhIHZhbGlkIG1lYXN1cmVtZW50IElELicsXHJcbiAgICBfYVtcImFscmVhZHktZXhpc3RzXCIgLyogQUxSRUFEWV9FWElTVFMgKi9dID0gJ0EgRmlyZWJhc2UgQW5hbHl0aWNzIGluc3RhbmNlIHdpdGggdGhlIG1lYXN1cmVtZW50IElEICR7aWR9ICcgK1xyXG4gICAgICAgICcgYWxyZWFkeSBleGlzdHMuICcgK1xyXG4gICAgICAgICdPbmx5IG9uZSBGaXJlYmFzZSBBbmFseXRpY3MgaW5zdGFuY2UgY2FuIGJlIGNyZWF0ZWQgZm9yIGVhY2ggbWVhc3VyZW1lbnQgSUQuJyxcclxuICAgIF9hW1wiYWxyZWFkeS1pbml0aWFsaXplZFwiIC8qIEFMUkVBRFlfSU5JVElBTElaRUQgKi9dID0gJ0ZpcmViYXNlIEFuYWx5dGljcyBoYXMgYWxyZWFkeSBiZWVuIGluaXRpYWxpemVkLicgK1xyXG4gICAgICAgICdzZXR0aW5ncygpIG11c3QgYmUgY2FsbGVkIGJlZm9yZSBpbml0aWFsaXppbmcgYW55IEFuYWx5dGljcyBpbnN0YW5jZScgK1xyXG4gICAgICAgICdvciBpdCB3aWxsIGhhdmUgbm8gZWZmZWN0LicsXHJcbiAgICBfYVtcImludGVyb3AtY29tcG9uZW50LXJlZy1mYWlsZWRcIiAvKiBJTlRFUk9QX0NPTVBPTkVOVF9SRUdfRkFJTEVEICovXSA9ICdGaXJlYmFzZSBBbmFseXRpY3MgSW50ZXJvcCBDb21wb25lbnQgZmFpbGVkIHRvIGluc3RhbnRpYXRlJyxcclxuICAgIF9hKTtcclxudmFyIEVSUk9SX0ZBQ1RPUlkgPSBuZXcgRXJyb3JGYWN0b3J5KCdhbmFseXRpY3MnLCAnQW5hbHl0aWNzJywgRVJST1JTKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIE1hcHMgZ2FJZCB0byBGSUQgZmV0Y2ggcHJvbWlzZXMuXHJcbiAqL1xyXG52YXIgaW5pdGlhbGl6ZWRJZFByb21pc2VzTWFwID0ge307XHJcbi8qKlxyXG4gKiBOYW1lIGZvciB3aW5kb3cgZ2xvYmFsIGRhdGEgbGF5ZXIgYXJyYXkgdXNlZCBieSBHQTogZGVmYXVsdHMgdG8gJ2RhdGFMYXllcicuXHJcbiAqL1xyXG52YXIgZGF0YUxheWVyTmFtZSA9ICdkYXRhTGF5ZXInO1xyXG4vKipcclxuICogTmFtZSBmb3Igd2luZG93IGdsb2JhbCBndGFnIGZ1bmN0aW9uIHVzZWQgYnkgR0E6IGRlZmF1bHRzIHRvICdndGFnJy5cclxuICovXHJcbnZhciBndGFnTmFtZSA9ICdndGFnJztcclxuLyoqXHJcbiAqIFJlcHJvZHVjdGlvbiBvZiBzdGFuZGFyZCBndGFnIGZ1bmN0aW9uIG9yIHJlZmVyZW5jZSB0byBleGlzdGluZ1xyXG4gKiBndGFnIGZ1bmN0aW9uIG9uIHdpbmRvdyBvYmplY3QuXHJcbiAqL1xyXG52YXIgZ3RhZ0NvcmVGdW5jdGlvbjtcclxuLyoqXHJcbiAqIFdyYXBwZXIgYXJvdW5kIGd0YWcgZnVuY3Rpb24gdGhhdCBlbnN1cmVzIEZJRCBpcyBzZW50IHdpdGggYWxsXHJcbiAqIHJlbGV2YW50IGV2ZW50IGFuZCBjb25maWcgY2FsbHMuXHJcbiAqL1xyXG52YXIgd3JhcHBlZEd0YWdGdW5jdGlvbjtcclxuLyoqXHJcbiAqIEZsYWcgdG8gZW5zdXJlIHBhZ2UgaW5pdGlhbGl6YXRpb24gc3RlcHMgKGNyZWF0aW9uIG9yIHdyYXBwaW5nIG9mXHJcbiAqIGRhdGFMYXllciBhbmQgZ3RhZyBzY3JpcHQpIGFyZSBvbmx5IHJ1biBvbmNlIHBlciBwYWdlIGxvYWQuXHJcbiAqL1xyXG52YXIgZ2xvYmFsSW5pdERvbmUgPSBmYWxzZTtcclxuLyoqXHJcbiAqIEZvciB0ZXN0aW5nXHJcbiAqL1xyXG5mdW5jdGlvbiByZXNldEdsb2JhbFZhcnMobmV3R2xvYmFsSW5pdERvbmUsIG5ld0dhSW5pdGlhbGl6ZWRQcm9taXNlKSB7XHJcbiAgICBpZiAobmV3R2xvYmFsSW5pdERvbmUgPT09IHZvaWQgMCkgeyBuZXdHbG9iYWxJbml0RG9uZSA9IGZhbHNlOyB9XHJcbiAgICBpZiAobmV3R2FJbml0aWFsaXplZFByb21pc2UgPT09IHZvaWQgMCkgeyBuZXdHYUluaXRpYWxpemVkUHJvbWlzZSA9IHt9OyB9XHJcbiAgICBnbG9iYWxJbml0RG9uZSA9IG5ld0dsb2JhbEluaXREb25lO1xyXG4gICAgaW5pdGlhbGl6ZWRJZFByb21pc2VzTWFwID0gbmV3R2FJbml0aWFsaXplZFByb21pc2U7XHJcbiAgICBkYXRhTGF5ZXJOYW1lID0gJ2RhdGFMYXllcic7XHJcbiAgICBndGFnTmFtZSA9ICdndGFnJztcclxufVxyXG4vKipcclxuICogRm9yIHRlc3RpbmdcclxuICovXHJcbmZ1bmN0aW9uIGdldEdsb2JhbFZhcnMoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGluaXRpYWxpemVkSWRQcm9taXNlc01hcDogaW5pdGlhbGl6ZWRJZFByb21pc2VzTWFwXHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBUaGlzIG11c3QgYmUgcnVuIGJlZm9yZSBjYWxsaW5nIGZpcmViYXNlLmFuYWx5dGljcygpIG9yIGl0IHdvbid0XHJcbiAqIGhhdmUgYW55IGVmZmVjdC5cclxuICogQHBhcmFtIG9wdGlvbnMgQ3VzdG9tIGd0YWcgYW5kIGRhdGFMYXllciBuYW1lcy5cclxuICovXHJcbmZ1bmN0aW9uIHNldHRpbmdzKG9wdGlvbnMpIHtcclxuICAgIGlmIChnbG9iYWxJbml0RG9uZSkge1xyXG4gICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiYWxyZWFkeS1pbml0aWFsaXplZFwiIC8qIEFMUkVBRFlfSU5JVElBTElaRUQgKi8pO1xyXG4gICAgfVxyXG4gICAgaWYgKG9wdGlvbnMuZGF0YUxheWVyTmFtZSkge1xyXG4gICAgICAgIGRhdGFMYXllck5hbWUgPSBvcHRpb25zLmRhdGFMYXllck5hbWU7XHJcbiAgICB9XHJcbiAgICBpZiAob3B0aW9ucy5ndGFnTmFtZSkge1xyXG4gICAgICAgIGd0YWdOYW1lID0gb3B0aW9ucy5ndGFnTmFtZTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBmYWN0b3J5KGFwcCwgaW5zdGFsbGF0aW9ucykge1xyXG4gICAgdmFyIGFuYWx5dGljc0lkID0gYXBwLm9wdGlvbnNbQU5BTFlUSUNTX0lEX0ZJRUxEXTtcclxuICAgIGlmICghYW5hbHl0aWNzSWQpIHtcclxuICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcIm5vLWdhLWlkXCIgLyogTk9fR0FfSUQgKi8pO1xyXG4gICAgfVxyXG4gICAgaWYgKGluaXRpYWxpemVkSWRQcm9taXNlc01hcFthbmFseXRpY3NJZF0gIT0gbnVsbCkge1xyXG4gICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiYWxyZWFkeS1leGlzdHNcIiAvKiBBTFJFQURZX0VYSVNUUyAqLywge1xyXG4gICAgICAgICAgICBpZDogYW5hbHl0aWNzSWRcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmICghZ2xvYmFsSW5pdERvbmUpIHtcclxuICAgICAgICAvLyBTdGVwcyBoZXJlIHNob3VsZCBvbmx5IGJlIGRvbmUgb25jZSBwZXIgcGFnZTogY3JlYXRpb24gb3Igd3JhcHBpbmdcclxuICAgICAgICAvLyBvZiBkYXRhTGF5ZXIgYW5kIGdsb2JhbCBndGFnIGZ1bmN0aW9uLlxyXG4gICAgICAgIC8vIERldGVjdCBpZiB1c2VyIGhhcyBhbHJlYWR5IHB1dCB0aGUgZ3RhZyA8c2NyaXB0PiB0YWcgb24gdGhpcyBwYWdlLlxyXG4gICAgICAgIGlmICghZmluZEd0YWdTY3JpcHRPblBhZ2UoKSkge1xyXG4gICAgICAgICAgICBpbnNlcnRTY3JpcHRUYWcoZGF0YUxheWVyTmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdldE9yQ3JlYXRlRGF0YUxheWVyKGRhdGFMYXllck5hbWUpO1xyXG4gICAgICAgIHZhciBfYSA9IHdyYXBPckNyZWF0ZUd0YWcoaW5pdGlhbGl6ZWRJZFByb21pc2VzTWFwLCBkYXRhTGF5ZXJOYW1lLCBndGFnTmFtZSksIHdyYXBwZWRHdGFnID0gX2Eud3JhcHBlZEd0YWcsIGd0YWdDb3JlID0gX2EuZ3RhZ0NvcmU7XHJcbiAgICAgICAgd3JhcHBlZEd0YWdGdW5jdGlvbiA9IHdyYXBwZWRHdGFnO1xyXG4gICAgICAgIGd0YWdDb3JlRnVuY3Rpb24gPSBndGFnQ29yZTtcclxuICAgICAgICBnbG9iYWxJbml0RG9uZSA9IHRydWU7XHJcbiAgICB9XHJcbiAgICAvLyBBc3luYyBidXQgbm9uLWJsb2NraW5nLlxyXG4gICAgaW5pdGlhbGl6ZWRJZFByb21pc2VzTWFwW2FuYWx5dGljc0lkXSA9IGluaXRpYWxpemVHQUlkKGFwcCwgaW5zdGFsbGF0aW9ucywgZ3RhZ0NvcmVGdW5jdGlvbik7XHJcbiAgICB2YXIgYW5hbHl0aWNzSW5zdGFuY2UgPSB7XHJcbiAgICAgICAgYXBwOiBhcHAsXHJcbiAgICAgICAgbG9nRXZlbnQ6IGZ1bmN0aW9uIChldmVudE5hbWUsIGV2ZW50UGFyYW1zLCBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBsb2dFdmVudCh3cmFwcGVkR3RhZ0Z1bmN0aW9uLCBhbmFseXRpY3NJZCwgZXZlbnROYW1lLCBldmVudFBhcmFtcywgb3B0aW9ucyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXRDdXJyZW50U2NyZWVuOiBmdW5jdGlvbiAoc2NyZWVuTmFtZSwgb3B0aW9ucykge1xyXG4gICAgICAgICAgICByZXR1cm4gc2V0Q3VycmVudFNjcmVlbih3cmFwcGVkR3RhZ0Z1bmN0aW9uLCBhbmFseXRpY3NJZCwgc2NyZWVuTmFtZSwgb3B0aW9ucyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXRVc2VySWQ6IGZ1bmN0aW9uIChpZCwgb3B0aW9ucykge1xyXG4gICAgICAgICAgICByZXR1cm4gc2V0VXNlcklkKHdyYXBwZWRHdGFnRnVuY3Rpb24sIGFuYWx5dGljc0lkLCBpZCwgb3B0aW9ucyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXRVc2VyUHJvcGVydGllczogZnVuY3Rpb24gKHByb3BlcnRpZXMsIG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNldFVzZXJQcm9wZXJ0aWVzKHdyYXBwZWRHdGFnRnVuY3Rpb24sIGFuYWx5dGljc0lkLCBwcm9wZXJ0aWVzLCBvcHRpb25zKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldEFuYWx5dGljc0NvbGxlY3Rpb25FbmFibGVkOiBmdW5jdGlvbiAoZW5hYmxlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2V0QW5hbHl0aWNzQ29sbGVjdGlvbkVuYWJsZWQoYW5hbHl0aWNzSWQsIGVuYWJsZWQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gYW5hbHl0aWNzSW5zdGFuY2U7XHJcbn1cblxudmFyIG5hbWUgPSBcIkBmaXJlYmFzZS9hbmFseXRpY3NcIjtcbnZhciB2ZXJzaW9uID0gXCIwLjMuNVwiO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVHlwZSBjb25zdGFudCBmb3IgRmlyZWJhc2UgQW5hbHl0aWNzLlxyXG4gKi9cclxudmFyIEFOQUxZVElDU19UWVBFID0gJ2FuYWx5dGljcyc7XHJcbmZ1bmN0aW9uIHJlZ2lzdGVyQW5hbHl0aWNzKGluc3RhbmNlKSB7XHJcbiAgICBpbnN0YW5jZS5JTlRFUk5BTC5yZWdpc3RlckNvbXBvbmVudChuZXcgQ29tcG9uZW50KEFOQUxZVElDU19UWVBFLCBmdW5jdGlvbiAoY29udGFpbmVyKSB7XHJcbiAgICAgICAgLy8gZ2V0SW1tZWRpYXRlIGZvciBGaXJlYmFzZUFwcCB3aWxsIGFsd2F5cyBzdWNjZWVkXHJcbiAgICAgICAgdmFyIGFwcCA9IGNvbnRhaW5lci5nZXRQcm92aWRlcignYXBwJykuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICAgICAgdmFyIGluc3RhbGxhdGlvbnMgPSBjb250YWluZXJcclxuICAgICAgICAgICAgLmdldFByb3ZpZGVyKCdpbnN0YWxsYXRpb25zJylcclxuICAgICAgICAgICAgLmdldEltbWVkaWF0ZSgpO1xyXG4gICAgICAgIHJldHVybiBmYWN0b3J5KGFwcCwgaW5zdGFsbGF0aW9ucyk7XHJcbiAgICB9LCBcIlBVQkxJQ1wiIC8qIFBVQkxJQyAqLykuc2V0U2VydmljZVByb3BzKHtcclxuICAgICAgICBzZXR0aW5nczogc2V0dGluZ3MsXHJcbiAgICAgICAgRXZlbnROYW1lOiBFdmVudE5hbWVcclxuICAgIH0pKTtcclxuICAgIGluc3RhbmNlLklOVEVSTkFMLnJlZ2lzdGVyQ29tcG9uZW50KG5ldyBDb21wb25lbnQoJ2FuYWx5dGljcy1pbnRlcm5hbCcsIGludGVybmFsRmFjdG9yeSwgXCJQUklWQVRFXCIgLyogUFJJVkFURSAqLykpO1xyXG4gICAgaW5zdGFuY2UucmVnaXN0ZXJWZXJzaW9uKG5hbWUsIHZlcnNpb24pO1xyXG4gICAgZnVuY3Rpb24gaW50ZXJuYWxGYWN0b3J5KGNvbnRhaW5lcikge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHZhciBhbmFseXRpY3MgPSBjb250YWluZXIuZ2V0UHJvdmlkZXIoQU5BTFlUSUNTX1RZUEUpLmdldEltbWVkaWF0ZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgbG9nRXZlbnQ6IGFuYWx5dGljcy5sb2dFdmVudFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImludGVyb3AtY29tcG9uZW50LXJlZy1mYWlsZWRcIiAvKiBJTlRFUk9QX0NPTVBPTkVOVF9SRUdfRkFJTEVEICovLCB7XHJcbiAgICAgICAgICAgICAgICByZWFzb246IGVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbnJlZ2lzdGVyQW5hbHl0aWNzKGZpcmViYXNlKTtcblxuZXhwb3J0IHsgZmFjdG9yeSwgZ2V0R2xvYmFsVmFycywgcmVnaXN0ZXJBbmFseXRpY3MsIHJlc2V0R2xvYmFsVmFycywgc2V0dGluZ3MgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbS5qcy5tYXBcbiIsIi8vIEZpcmViYXNlIEFwcCAodGhlIGNvcmUgRmlyZWJhc2UgU0RLKSBpcyBhbHdheXMgcmVxdWlyZWQgYW5kIG11c3QgYmUgbGlzdGVkIGZpcnN0XHJcbmltcG9ydCAqIGFzIGZpcmViYXNlIGZyb20gXCJmaXJlYmFzZS9hcHBcIjtcclxuXHJcbi8vIElmIHlvdSBlbmFibGVkIEFuYWx5dGljcyBpbiB5b3VyIHByb2plY3QsIGFkZCB0aGUgRmlyZWJhc2UgU0RLIGZvciBBbmFseXRpY3NcclxuaW1wb3J0IFwiZmlyZWJhc2UvYW5hbHl0aWNzXCI7XHJcblxyXG4vLyBBZGQgdGhlIEZpcmViYXNlIHByb2R1Y3RzIHRoYXQgeW91IHdhbnQgdG8gdXNlXHJcbmltcG9ydCBcImZpcmViYXNlL2F1dGhcIjtcclxuaW1wb3J0IFwiZmlyZWJhc2UvZmlyZXN0b3JlXCI7XHJcblxyXG5cclxudmFyIGZpcmViYXNlQ29uZmlnID0ge1xyXG4gICAgYXBpS2V5OiBcIkFJemFTeUREREZVSWRxc0dpdl92MnQ4TEp1SHczSF9jdUVqVWEtRVwiLFxyXG4gICAgYXV0aERvbWFpbjogXCJ0b2RvbGlzdC0yNGUyZS5maXJlYmFzZWFwcC5jb21cIixcclxuICAgIGRhdGFiYXNlVVJMOiBcImh0dHBzOi8vdG9kb2xpc3QtMjRlMmUuZmlyZWJhc2Vpby5jb21cIixcclxuICAgIHByb2plY3RJZDogXCJ0b2RvbGlzdC0yNGUyZVwiLFxyXG4gICAgc3RvcmFnZUJ1Y2tldDogXCJ0b2RvbGlzdC0yNGUyZS5hcHBzcG90LmNvbVwiLFxyXG4gICAgbWVzc2FnaW5nU2VuZGVySWQ6IFwiNjUxODQxOTU2NzY0XCIsXHJcbiAgICBhcHBJZDogXCIxOjY1MTg0MTk1Njc2NDp3ZWI6ZGY5M2ZmYTI0MWI4NGEzOGI4ZjY1OVwiLFxyXG4gICAgbWVhc3VyZW1lbnRJZDogXCJHLTM2UVg3WkZHUVdcIlxyXG59O1xyXG4vLyBJbml0aWFsaXplIEZpcmViYXNlXHJcbmZpcmViYXNlLmluaXRpYWxpemVBcHAoZmlyZWJhc2VDb25maWcpO1xyXG5maXJlYmFzZS5hbmFseXRpY3MoKTtcclxuXHJcbmNvbnN0IGF1dGggPSBmaXJlYmFzZS5hdXRoKCk7XHJcbmNvbnN0IGRiID0gZmlyZWJhc2UuZmlyZXN0b3JlKCk7XHJcblxyXG5leHBvcnQgeyBhdXRoLCBkYiB9IiwiaW1wb3J0IHsgZG9tTWFuaXB1bGF0aW9uIH0gZnJvbSAnLi9Eb21NYW5pcHVsYXRpb24nXHJcbmltcG9ydCB7IGF1dGgsIGRiIH0gZnJvbSAnLi9hdXRoJ1xyXG5jb3NubG9lLmxvZygnaGknKTtcclxuXHJcbi8vbWVudVRvZ2dsZSBcclxuZG9tTWFuaXB1bGF0aW9uLm1lbnVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygnd29ya2luZycpO1xyXG4gICAgZG9tTWFuaXB1bGF0aW9uLnRvZ2dsZU1lbnUoKTtcclxuXHJcbn0pXHJcblxyXG5cclxuXHJcbi8vIHNldHVwIG1hdGVyaWFsaXplIGNvbXBvbmVudHNcclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIG1vZGFscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tb2RhbCcpO1xyXG4gICAgTS5Nb2RhbC5pbml0KG1vZGFscyk7XHJcblxyXG5cclxufSk7XHJcblxyXG5cclxuLy9saXN0ZW4gZm9yIGF1dGggc3RhdHVzIGNoYW5nZXNcclxuYXV0aC5vbkF1dGhTdGF0ZUNoYW5nZWQodXNlciA9PiB7XHJcbiAgICBpZiAodXNlcikge1xyXG4gICAgICAgIGRvbU1hbmlwdWxhdGlvbi5sb2dJbigpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBkb21NYW5pcHVsYXRpb24ubG9nT3V0KCk7XHJcbiAgICB9XHJcbn0pXHJcblxyXG5cclxuLy9zaWdudXBcclxuY29uc3Qgc2lnblVwRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzaWdudXAtZm9ybScpO1xyXG5zaWduVXBGb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChlKSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG5cclxuICAgIC8vZ2V0IHVzZXIgaW5mbyBcclxuICAgIGNvbnN0IGVtYWlsID0gc2lnblVwRm9ybVsnc2lnbnVwLWVtYWlsJ10udmFsdWU7XHJcbiAgICBjb25zdCBwYXNzd29yZCA9IHNpZ25VcEZvcm1bJ3NpZ251cC1wYXNzd29yZCddLnZhbHVlO1xyXG5cclxuICAgIC8vc2lnbiB1cCB0aGUgdXNlciBcclxuICAgIGF1dGguY3JlYXRlVXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkKGVtYWlsLCBwYXNzd29yZCkudGhlbihjcmVkID0+IHtcclxuICAgICAgICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtb2RhbC1zaWdudXAnKTtcclxuICAgICAgICBNLk1vZGFsLmdldEluc3RhbmNlKG1vZGFsKS5jbG9zZSgpO1xyXG4gICAgICAgIHNpZ25VcEZvcm0ucmVzZXQoKTtcclxuXHJcbiAgICB9KTtcclxufSlcclxuXHJcbi8vTG9nIG91dCBcclxuY29uc3QgbG9nb3V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xvZ291dCcpO1xyXG5sb2dvdXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgYXV0aC5zaWduT3V0KCk7XHJcbn0pXHJcblxyXG5cclxuXHJcbi8vc2lnbiBpblxyXG5jb25zdCBsb2dpbkZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2xvZ2luLWZvcm1cIik7XHJcbmxvZ2luRm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZSkgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgY29uc3QgZW1haWwgPSBsb2dpbkZvcm1bJ2xvZ2luLWVtYWlsJ10udmFsdWU7XHJcbiAgICBjb25zdCBwYXNzd29yZCA9IGxvZ2luRm9ybVsnbG9naW4tcGFzc3dvcmQnXS52YWx1ZTtcclxuICAgIGF1dGguc2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQoZW1haWwsIHBhc3N3b3JkKS50aGVuKGNyZWQgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGNyZWQudXNlcik7XHJcbiAgICAgICAgY29uc3QgbW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbW9kYWwtbG9naW4nKTtcclxuICAgICAgICBNLk1vZGFsLmdldEluc3RhbmNlKG1vZGFsKS5jbG9zZSgpO1xyXG4gICAgICAgIGxvZ2luRm9ybS5yZXNldCgpO1xyXG4gICAgfSk7XHJcblxyXG59KSJdLCJzb3VyY2VSb290IjoiIn0=